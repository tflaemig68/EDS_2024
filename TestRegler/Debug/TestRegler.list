
TestRegler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008044  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  080081e8  080081e8  000181e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d50  08008d50  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08008d50  08008d50  00018d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d58  08008d58  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d58  08008d58  00018d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d5c  08008d5c  00018d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08008d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000200  08008f60  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08008f60  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000815f  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001961  00000000  00000000  0002838f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010116  00000000  00000000  0002aa78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007153  00000000  00000000  0003ab8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005691a  00000000  00000000  00041ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000985fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000321c  00000000  00000000  0009864c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009b868  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0009b934  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081cc 	.word	0x080081cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	080081cc 	.word	0x080081cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	db0b      	blt.n	8000f26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 021f 	and.w	r2, r3, #31
 8000f14:	4907      	ldr	r1, [pc, #28]	; (8000f34 <__NVIC_EnableIRQ+0x38>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	095b      	lsrs	r3, r3, #5
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000e100 	.word	0xe000e100

08000f38 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton(const PuBio_t* pPuBioset)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	RoPuBu.PORT_AB = pPuBioset->PORT_AB;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a53      	ldr	r2, [pc, #332]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f46:	6013      	str	r3, [r2, #0]
	RoPuBu.PinA = pPuBioset->PinA;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	791a      	ldrb	r2, [r3, #4]
 8000f4c:	4b51      	ldr	r3, [pc, #324]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f4e:	711a      	strb	r2, [r3, #4]
	RoPuBu.PinB = pPuBioset->PinB;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	79da      	ldrb	r2, [r3, #7]
 8000f54:	4b4f      	ldr	r3, [pc, #316]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f56:	71da      	strb	r2, [r3, #7]
	RoPuBu.PORT_SW = pPuBioset->PORT_SW;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f5e:	6093      	str	r3, [r2, #8]
	RoPuBu.PinSW   = pPuBioset->PinSW;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7b1a      	ldrb	r2, [r3, #12]
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f66:	731a      	strb	r2, [r3, #12]
	RoPuBu.RotA_IRQ   = pPuBioset->RotA_IRQ;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	795a      	ldrb	r2, [r3, #5]
 8000f6c:	4b49      	ldr	r3, [pc, #292]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f6e:	715a      	strb	r2, [r3, #5]
	RoPuBu.RotA_IRQn   = pPuBioset->RotA_IRQn;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8000f76:	4b47      	ldr	r3, [pc, #284]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f78:	719a      	strb	r2, [r3, #6]
	RoPuBu.RotSW_IRQ = pPuBioset->RotSW_IRQ;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	7b5a      	ldrb	r2, [r3, #13]
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f80:	735a      	strb	r2, [r3, #13]
	RoPuBu.RotSW_IRQn = pPuBioset->RotSW_IRQn;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8000f88:	4b42      	ldr	r3, [pc, #264]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f8a:	739a      	strb	r2, [r3, #14]
	RoPuBu.ccw   = pPuBioset->ccw;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f94:	821a      	strh	r2, [r3, #16]

	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(RoPuBu.PORT_AB);
 8000f96:	4b3f      	ldr	r3, [pc, #252]	; (8001094 <initRotaryPushButton+0x15c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 ffce 	bl	8002f3c <gpioInitPort>
	gpioInitPort(RoPuBu.PORT_SW);
 8000fa0:	4b3c      	ldr	r3, [pc, #240]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 ffc9 	bl	8002f3c <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000faa:	b672      	cpsid	i
}
 8000fac:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	; (8001098 <initRotaryPushButton+0x160>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a39      	ldr	r2, [pc, #228]	; (8001098 <initRotaryPushButton+0x160>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinA, INPUT);
 8000fba:	4b36      	ldr	r3, [pc, #216]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a35      	ldr	r2, [pc, #212]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fc0:	7911      	ldrb	r1, [r2, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 f87f 	bl	80030c8 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinA, PULLUP);
 8000fca:	4b32      	ldr	r3, [pc, #200]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a31      	ldr	r2, [pc, #196]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fd0:	7911      	ldrb	r1, [r2, #4]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 f9cb 	bl	8003370 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinB, INPUT);
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a2d      	ldr	r2, [pc, #180]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fe0:	79d1      	ldrb	r1, [r2, #7]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 f86f 	bl	80030c8 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinB, PULLUP);
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <initRotaryPushButton+0x15c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <initRotaryPushButton+0x15c>)
 8000ff0:	79d1      	ldrb	r1, [r2, #7]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f002 f9bb 	bl	8003370 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(RoPuBu.PORT_SW, RoPuBu.PinSW, INPUT);
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <initRotaryPushButton+0x15c>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <initRotaryPushButton+0x15c>)
 8001000:	7b11      	ldrb	r1, [r2, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f002 f85f 	bl	80030c8 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_SW, RoPuBu.PinSW, PULLUP);
 800100a:	4b22      	ldr	r3, [pc, #136]	; (8001094 <initRotaryPushButton+0x15c>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <initRotaryPushButton+0x15c>)
 8001010:	7b11      	ldrb	r1, [r2, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f9ab 	bl	8003370 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 800101a:	f001 fd39 	bl	8002a90 <extiInit>
	extiConfigIrq(RoPuBu.PORT_AB, RoPuBu.PinA);	//EXTI on ROT A
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <initRotaryPushButton+0x15c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <initRotaryPushButton+0x15c>)
 8001024:	7912      	ldrb	r2, [r2, #4]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fd4d 	bl	8002ac8 <extiConfigIrq>
	extiConfigIrq(RoPuBu.PORT_SW, RoPuBu.PinSW);	//EXTI on PUSH BUTTON
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <initRotaryPushButton+0x15c>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <initRotaryPushButton+0x15c>)
 8001034:	7b12      	ldrb	r2, [r2, #12]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fd45 	bl	8002ac8 <extiConfigIrq>
	extiEnableIrq(RoPuBu.RotA_IRQ);
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <initRotaryPushButton+0x15c>)
 8001040:	795b      	ldrb	r3, [r3, #5]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 fdf4 	bl	8002c30 <extiEnableIrq>
	extiEnableIrq(RoPuBu.RotSW_IRQ);
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <initRotaryPushButton+0x15c>)
 800104a:	7b5b      	ldrb	r3, [r3, #13]
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fdef 	bl	8002c30 <extiEnableIrq>
	extiSetTriggerEdge(RoPuBu.RotA_IRQ, FALLING_EDGE);
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <initRotaryPushButton+0x15c>)
 8001054:	795b      	ldrb	r3, [r3, #5]
 8001056:	2101      	movs	r1, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fe0b 	bl	8002c74 <extiSetTriggerEdge>
	extiSetTriggerEdge(RoPuBu.RotSW_IRQ, RISING_EDGE);
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <initRotaryPushButton+0x15c>)
 8001060:	7b5b      	ldrb	r3, [r3, #13]
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fe05 	bl	8002c74 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(RoPuBu.RotA_IRQn);
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <initRotaryPushButton+0x15c>)
 800106c:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff43 	bl	8000efc <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(RoPuBu.RotSW_IRQn);
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <initRotaryPushButton+0x15c>)
 8001078:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff3d 	bl	8000efc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001082:	b662      	cpsie	i
}
 8001084:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8001086:	4b05      	ldr	r3, [pc, #20]	; (800109c <initRotaryPushButton+0x164>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000224 	.word	0x20000224
 8001098:	40023800 	.word	0x40023800
 800109c:	2000023d 	.word	0x2000023d

080010a0 <initLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initLED(const LEDio_t* pLEDset)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	LED.PORT = pLEDset->PORT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <initLED+0xa0>)
 80010ae:	6013      	str	r3, [r2, #0]
	LED.red = pLEDset->red;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	791a      	ldrb	r2, [r3, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <initLED+0xa0>)
 80010b6:	711a      	strb	r2, [r3, #4]
	LED.green = pLEDset->green;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	795a      	ldrb	r2, [r3, #5]
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <initLED+0xa0>)
 80010be:	715a      	strb	r2, [r3, #5]
	LED.blue = pLEDset->blue;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	799a      	ldrb	r2, [r3, #6]
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <initLED+0xa0>)
 80010c6:	719a      	strb	r2, [r3, #6]
	/* Initialize GPIO ports for LED Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(LED.PORT);
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <initLED+0xa0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 ff35 	bl	8002f3c <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.red, OUTPUT);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <initLED+0xa0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <initLED+0xa0>)
 80010d8:	7911      	ldrb	r1, [r2, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fff3 	bl	80030c8 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.green, OUTPUT);
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <initLED+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <initLED+0xa0>)
 80010e8:	7951      	ldrb	r1, [r2, #5]
 80010ea:	2201      	movs	r2, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 ffeb 	bl	80030c8 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.blue, OUTPUT);
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <initLED+0xa0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <initLED+0xa0>)
 80010f8:	7991      	ldrb	r1, [r2, #6]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 ffe3 	bl	80030c8 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED.PORT,LED.red);
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <initLED+0xa0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <initLED+0xa0>)
 8001108:	7912      	ldrb	r2, [r2, #4]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f826 	bl	800315e <gpioSetPin>
	gpioSetPin(LED.PORT,LED.green);
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <initLED+0xa0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <initLED+0xa0>)
 8001118:	7952      	ldrb	r2, [r2, #5]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f002 f81e 	bl	800315e <gpioSetPin>
	gpioSetPin(LED.PORT,LED.blue);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <initLED+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <initLED+0xa0>)
 8001128:	7992      	ldrb	r2, [r2, #6]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f816 	bl	800315e <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <initLED+0xa4>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000021c 	.word	0x2000021c
 8001144:	2000023e 	.word	0x2000023e

08001148 <setLED>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setLED(LED_COLOR_t color)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 8001152:	4b4d      	ldr	r3, [pc, #308]	; (8001288 <setLED+0x140>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	f083 0301 	eor.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d002      	beq.n	8001166 <setLED+0x1e>
	{
		initLED(&LEDpgb);
 8001160:	484a      	ldr	r0, [pc, #296]	; (800128c <setLED+0x144>)
 8001162:	f7ff ff9d 	bl	80010a0 <initLED>
	}

	switch(color)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d845      	bhi.n	80011f8 <setLED+0xb0>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <setLED+0x2c>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	0800119f 	.word	0x0800119f
 8001178:	0800118d 	.word	0x0800118d
 800117c:	080011b1 	.word	0x080011b1
 8001180:	080011e7 	.word	0x080011e7
 8001184:	080011d5 	.word	0x080011d5
 8001188:	080011c3 	.word	0x080011c3
	{
		/**
		 *  Set only RED LED */
		case RED_on:
			gpioSetPin(LED.PORT,LED.red);
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <setLED+0x148>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a3f      	ldr	r2, [pc, #252]	; (8001290 <setLED+0x148>)
 8001192:	7912      	ldrb	r2, [r2, #4]
 8001194:	4611      	mov	r1, r2
 8001196:	4618      	mov	r0, r3
 8001198:	f001 ffe1 	bl	800315e <gpioSetPin>
		break;
 800119c:	e06f      	b.n	800127e <setLED+0x136>
		case RED_off:
			gpioResetPin(LED.PORT,LED.red);
 800119e:	4b3c      	ldr	r3, [pc, #240]	; (8001290 <setLED+0x148>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a3b      	ldr	r2, [pc, #236]	; (8001290 <setLED+0x148>)
 80011a4:	7912      	ldrb	r2, [r2, #4]
 80011a6:	4611      	mov	r1, r2
 80011a8:	4618      	mov	r0, r3
 80011aa:	f002 f803 	bl	80031b4 <gpioResetPin>
		break;
 80011ae:	e066      	b.n	800127e <setLED+0x136>

		/**
		 *  Set only LED GREEN */
		case GREEN_on:
			gpioResetPin(LED.PORT,LED.green);
 80011b0:	4b37      	ldr	r3, [pc, #220]	; (8001290 <setLED+0x148>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a36      	ldr	r2, [pc, #216]	; (8001290 <setLED+0x148>)
 80011b6:	7952      	ldrb	r2, [r2, #5]
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fffa 	bl	80031b4 <gpioResetPin>
		break;
 80011c0:	e05d      	b.n	800127e <setLED+0x136>
		case GREEN_off:
					gpioSetPin(LED.PORT,LED.green);
 80011c2:	4b33      	ldr	r3, [pc, #204]	; (8001290 <setLED+0x148>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a32      	ldr	r2, [pc, #200]	; (8001290 <setLED+0x148>)
 80011c8:	7952      	ldrb	r2, [r2, #5]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 ffc6 	bl	800315e <gpioSetPin>
				break;
 80011d2:	e054      	b.n	800127e <setLED+0x136>
		/**
		 *  Set only LED BLUE */
		case BLUE_on:
			gpioResetPin(LED.PORT,LED.blue);
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <setLED+0x148>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <setLED+0x148>)
 80011da:	7992      	ldrb	r2, [r2, #6]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 ffe8 	bl	80031b4 <gpioResetPin>
		break;
 80011e4:	e04b      	b.n	800127e <setLED+0x136>
		case BLUE_off:
			gpioSetPin(LED.PORT,LED.blue);
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <setLED+0x148>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a29      	ldr	r2, [pc, #164]	; (8001290 <setLED+0x148>)
 80011ec:	7992      	ldrb	r2, [r2, #6]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ffb4 	bl	800315e <gpioSetPin>
		break;
 80011f6:	e042      	b.n	800127e <setLED+0x136>

		/**
		 *  Set LEDs color RGB- matrix mix */
		default:
		{
			if ((color & 0b000001) != 0 )
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d008      	beq.n	8001214 <setLED+0xcc>
			{gpioResetPin(LED.PORT,LED.red);}
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <setLED+0x148>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a22      	ldr	r2, [pc, #136]	; (8001290 <setLED+0x148>)
 8001208:	7912      	ldrb	r2, [r2, #4]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 ffd1 	bl	80031b4 <gpioResetPin>
 8001212:	e007      	b.n	8001224 <setLED+0xdc>
			else {gpioSetPin(LED.PORT,LED.red);	}
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <setLED+0x148>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <setLED+0x148>)
 800121a:	7912      	ldrb	r2, [r2, #4]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 ff9d 	bl	800315e <gpioSetPin>
			if ((color & 0b000010) != 0 )
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d008      	beq.n	8001240 <setLED+0xf8>
			{gpioResetPin(LED.PORT,LED.green);}
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <setLED+0x148>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a17      	ldr	r2, [pc, #92]	; (8001290 <setLED+0x148>)
 8001234:	7952      	ldrb	r2, [r2, #5]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f001 ffbb 	bl	80031b4 <gpioResetPin>
 800123e:	e007      	b.n	8001250 <setLED+0x108>
			else {gpioSetPin(LED.PORT,LED.green);}
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <setLED+0x148>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <setLED+0x148>)
 8001246:	7952      	ldrb	r2, [r2, #5]
 8001248:	4611      	mov	r1, r2
 800124a:	4618      	mov	r0, r3
 800124c:	f001 ff87 	bl	800315e <gpioSetPin>
			if ((color & 0b000100) != 0 )
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <setLED+0x124>
			{gpioResetPin(LED.PORT,LED.blue);}
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <setLED+0x148>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <setLED+0x148>)
 8001260:	7992      	ldrb	r2, [r2, #6]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f001 ffa5 	bl	80031b4 <gpioResetPin>
			else {gpioSetPin(LED.PORT,LED.blue);}
		}
		break;
 800126a:	e007      	b.n	800127c <setLED+0x134>
			else {gpioSetPin(LED.PORT,LED.blue);}
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <setLED+0x148>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <setLED+0x148>)
 8001272:	7992      	ldrb	r2, [r2, #6]
 8001274:	4611      	mov	r1, r2
 8001276:	4618      	mov	r0, r3
 8001278:	f001 ff71 	bl	800315e <gpioSetPin>
		break;
 800127c:	bf00      	nop
	}
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000023e 	.word	0x2000023e
 800128c:	0800821c 	.word	0x0800821c
 8001290:	2000021c 	.word	0x2000021c

08001294 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <getRotaryPushButton+0x3c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <getRotaryPushButton+0x18>
	{
		//initRotaryPushButton();
		return ERROR_VALUE;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e00a      	b.n	80012c2 <getRotaryPushButton+0x2e>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <getRotaryPushButton+0x40>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <getRotaryPushButton+0x40>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <getRotaryPushButton+0x2c>
	{
		pushButtonFlag = false;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <getRotaryPushButton+0x40>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000023d 	.word	0x2000023d
 80012d4:	2000023c 	.word	0x2000023c

080012d8 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 80012dc:	4b07      	ldr	r3, [pc, #28]	; (80012fc <getRotaryPosition+0x24>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e001      	b.n	80012f2 <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <getRotaryPosition+0x28>)
 80012f0:	681b      	ldr	r3, [r3, #0]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	2000023d 	.word	0x2000023d
 8001300:	20000238 	.word	0x20000238

08001304 <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <setRotaryPosition+0x30>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	f083 0301 	eor.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 800131a:	2301      	movs	r3, #1
 800131c:	e003      	b.n	8001326 <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 800131e:	4a06      	ldr	r2, [pc, #24]	; (8001338 <setRotaryPosition+0x34>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]

	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	2000023d 	.word	0x2000023d
 8001338:	20000238 	.word	0x20000238

0800133c <modifPositionCount>:
/**
 *    @function	 helper for ROTARY_A_HANDLER interrupt
 *    @brief Checks ROT B and updates the position accordingly.
 */
void modifPositionCount(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(RoPuBu.PORT_AB, RoPuBu.PinB) == true)
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <modifPositionCount+0x44>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <modifPositionCount+0x44>)
 8001346:	79d2      	ldrb	r2, [r2, #7]
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f002 f86d 	bl	800342a <gpioGetPinState>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <modifPositionCount+0x2e>
	{
		rotoryPosition += RoPuBu.ccw;
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <modifPositionCount+0x44>)
 8001358:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800135c:	461a      	mov	r2, r3
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <modifPositionCount+0x48>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a07      	ldr	r2, [pc, #28]	; (8001384 <modifPositionCount+0x48>)
 8001366:	6013      	str	r3, [r2, #0]
	}
	else
	{
		rotoryPosition -= RoPuBu.ccw;
	}
}
 8001368:	e007      	b.n	800137a <modifPositionCount+0x3e>
		rotoryPosition -= RoPuBu.ccw;
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <modifPositionCount+0x48>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <modifPositionCount+0x44>)
 8001370:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	4a03      	ldr	r2, [pc, #12]	; (8001384 <modifPositionCount+0x48>)
 8001378:	6013      	str	r3, [r2, #0]
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000224 	.word	0x20000224
 8001384:	20000238 	.word	0x20000238

08001388 <EXTI0_IRQHandler>:
 * @function	 EXTI0_IRQHandler
 * 				  *
 * @brief		 EXTI Interrupt Handler for Pin0
 */
void EXTI0_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	modifPositionCount(); //! Check ROT B and update position
 800138c:	f7ff ffd6 	bl	800133c <modifPositionCount>
	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & EXTI_PR_PR0)
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <EXTI0_IRQHandler+0x24>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <EXTI0_IRQHandler+0x20>
	{
		EXTI->PR |= EXTI_PR_PR0;
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <EXTI0_IRQHandler+0x24>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <EXTI0_IRQHandler+0x24>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6153      	str	r3, [r2, #20]
	}
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <EXTI15_10_IRQHandler>:
 * 				 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void EXTI15_10_IRQHandler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <EXTI15_10_IRQHandler+0x2c>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & EXTI_PR_PR10)
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <EXTI15_10_IRQHandler+0x30>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d005      	beq.n	80013d2 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= EXTI_PR_PR10;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <EXTI15_10_IRQHandler+0x30>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <EXTI15_10_IRQHandler+0x30>)
 80013cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d0:	6153      	str	r3, [r2, #20]
	}
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	2000023c 	.word	0x2000023c
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <_DC1>:
 */
static ST7735io_t *TFT ;
static SPI_TypeDef  *spi ;

void _DC1(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->DC_PORT, TFT->DC);
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <_DC1+0x1c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <_DC1+0x1c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	7b1b      	ldrb	r3, [r3, #12]
 80013f4:	4619      	mov	r1, r3
 80013f6:	4610      	mov	r0, r2
 80013f8:	f001 feb1 	bl	800315e <gpioSetPin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000240 	.word	0x20000240

08001404 <_DC0>:
void _DC0(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->DC_PORT, TFT->DC);
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <_DC0+0x1c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <_DC0+0x1c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f001 fecc 	bl	80031b4 <gpioResetPin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000240 	.word	0x20000240

08001424 <_RST1>:

void _RST1(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->RST_PORT, TFT->RST);
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <_RST1+0x1c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <_RST1+0x1c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	7d1b      	ldrb	r3, [r3, #20]
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f001 fe91 	bl	800315e <gpioSetPin>
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000240 	.word	0x20000240

08001444 <_RST0>:

void _RST0(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->RST_PORT, TFT->RST);
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <_RST0+0x1c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691a      	ldr	r2, [r3, #16]
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <_RST0+0x1c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	7d1b      	ldrb	r3, [r3, #20]
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f001 feac 	bl	80031b4 <gpioResetPin>
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000240 	.word	0x20000240

08001464 <_CS0>:
void _CS1(void)
{
	gpioSetPin(TFT->CS_PORT, TFT->CS);
}
void _CS0(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->CS_PORT, TFT->CS);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <_CS0+0x1c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <_CS0+0x1c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	4619      	mov	r1, r3
 8001476:	4610      	mov	r0, r2
 8001478:	f001 fe9c 	bl	80031b4 <gpioResetPin>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000240 	.word	0x20000240

08001484 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 800148c:	6879      	ldr	r1, [r7, #4]
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <delayms+0x18>)
 8001490:	f002 fdea 	bl	8004068 <systickDelay>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000026c 	.word	0x2000026c

080014a0 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, TFT->CS_PORT, TFT->CS, data);
 80014aa:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <tftSPISenddata+0x28>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <tftSPISenddata+0x2c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <tftSPISenddata+0x2c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	791a      	ldrb	r2, [r3, #4]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f002 fcc5 	bl	8003e4a <spiWriteByte>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000244 	.word	0x20000244
 80014cc:	20000240 	.word	0x20000240

080014d0 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	_DC0();
 80014da:	f7ff ff93 	bl	8001404 <_DC0>
    tftSPISenddata(cmd);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ffdd 	bl	80014a0 <tftSPISenddata>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	71fb      	strb	r3, [r7, #7]
	_DC1();
 80014f8:	f7ff ff74 	bl	80013e4 <_DC1>
    tftSPISenddata(data);
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ffce 	bl	80014a0 <tftSPISenddata>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <IOspiInit>:

// Function that initializes the hardware configuration
void IOspiInit(ST7735io_t *TFTset)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af04      	add	r7, sp, #16
 8001512:	6078      	str	r0, [r7, #4]
	TFT = TFTset;
 8001514:	4a45      	ldr	r2, [pc, #276]	; (800162c <IOspiInit+0x120>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
	spi = TFT->SPI;
 800151a:	4b44      	ldr	r3, [pc, #272]	; (800162c <IOspiInit+0x120>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <IOspiInit+0x124>)
 8001522:	6013      	str	r3, [r2, #0]
    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(TFT->RST_PORT);
 8001524:	4b41      	ldr	r3, [pc, #260]	; (800162c <IOspiInit+0x120>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4618      	mov	r0, r3
 800152c:	f001 fd68 	bl	8003000 <gpioSelectPort>
    gpioSelectPinMode(TFT->RST_PORT, TFT->RST, OUTPUT);		// RESET
 8001530:	4b3e      	ldr	r3, [pc, #248]	; (800162c <IOspiInit+0x120>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6918      	ldr	r0, [r3, #16]
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <IOspiInit+0x120>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	7d1b      	ldrb	r3, [r3, #20]
 800153c:	2201      	movs	r2, #1
 800153e:	4619      	mov	r1, r3
 8001540:	f001 fdc2 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectPort(TFT->DC_PORT);
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <IOspiInit+0x120>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fd58 	bl	8003000 <gpioSelectPort>
    gpioSelectPinMode(TFT->DC_PORT, TFT->DC, OUTPUT);		// DATA/Command
 8001550:	4b36      	ldr	r3, [pc, #216]	; (800162c <IOspiInit+0x120>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6898      	ldr	r0, [r3, #8]
 8001556:	4b35      	ldr	r3, [pc, #212]	; (800162c <IOspiInit+0x120>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	7b1b      	ldrb	r3, [r3, #12]
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f001 fdb2 	bl	80030c8 <gpioSelectPinMode>



    gpioInitPort(TFT->CS_PORT);
 8001564:	4b31      	ldr	r3, [pc, #196]	; (800162c <IOspiInit+0x120>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f001 fce6 	bl	8002f3c <gpioInitPort>
    gpioSelectPinMode(TFT->CS_PORT,TFT->CS, OUTPUT);        // CS
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <IOspiInit+0x120>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <IOspiInit+0x120>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	4619      	mov	r1, r3
 8001580:	f001 fda2 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectPushPullMode(TFT->CS_PORT, TFT->CS, PULLUP);
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <IOspiInit+0x120>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6818      	ldr	r0, [r3, #0]
 800158a:	4b28      	ldr	r3, [pc, #160]	; (800162c <IOspiInit+0x120>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	791b      	ldrb	r3, [r3, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	4619      	mov	r1, r3
 8001594:	f001 feec 	bl	8003370 <gpioSelectPushPullMode>

    gpioInitPort(TFT->SPI_PORT);
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <IOspiInit+0x120>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4618      	mov	r0, r3
 80015a0:	f001 fccc 	bl	8002f3c <gpioInitPort>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->CLK, ALTFUNC);	// SPI1 Clock
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <IOspiInit+0x120>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69d8      	ldr	r0, [r3, #28]
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <IOspiInit+0x120>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015b2:	2202      	movs	r2, #2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f001 fd87 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->CLK, AF5);
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <IOspiInit+0x120>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	69d8      	ldr	r0, [r3, #28]
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <IOspiInit+0x120>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80015c8:	2205      	movs	r2, #5
 80015ca:	4619      	mov	r1, r3
 80015cc:	f001 fe1e 	bl	800320c <gpioSelectAltFunc>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->MOSI, ALTFUNC);	// SPI1 MOSI
 80015d0:	4b16      	ldr	r3, [pc, #88]	; (800162c <IOspiInit+0x120>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69d8      	ldr	r0, [r3, #28]
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <IOspiInit+0x120>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015de:	2202      	movs	r2, #2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f001 fd71 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->MOSI, AF5);
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <IOspiInit+0x120>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69d8      	ldr	r0, [r3, #28]
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <IOspiInit+0x120>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f4:	2205      	movs	r2, #5
 80015f6:	4619      	mov	r1, r3
 80015f8:	f001 fe08 	bl	800320c <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <IOspiInit+0x124>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f002 fbc7 	bl	8003d94 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <IOspiInit+0x124>)
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	2300      	movs	r3, #0
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	2300      	movs	r3, #0
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	2301      	movs	r3, #1
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	2200      	movs	r2, #0
 800161e:	2103      	movs	r1, #3
 8001620:	f002 faca 	bl	8003bb8 <spiInitSPI>

}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000240 	.word	0x20000240
 8001630:	20000244 	.word	0x20000244

08001634 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 8001646:	e033      	b.n	80016b0 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff3d 	bl	80014d0 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001660:	7bbb      	ldrb	r3, [r7, #14]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001668:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 800166a:	7bbb      	ldrb	r3, [r7, #14]
 800166c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001670:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8001672:	e006      	b.n	8001682 <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff36 	bl	80014ee <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	73ba      	strb	r2, [r7, #14]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f3      	bne.n	8001674 <commandList+0x40>
		}

		if(ms) {
 800168c:	89bb      	ldrh	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d00e      	beq.n	80016b0 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	607a      	str	r2, [r7, #4]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	2bff      	cmp	r3, #255	; 0xff
 80016a0:	d102      	bne.n	80016a8 <commandList+0x74>
 80016a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a6:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 80016a8:	89bb      	ldrh	r3, [r7, #12]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff feea 	bl	8001484 <delayms>
	while(numCommands--) {                 // For each command...
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	1e5a      	subs	r2, r3, #1
 80016b4:	73fa      	strb	r2, [r7, #15]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1c6      	bne.n	8001648 <commandList+0x14>
		}
	}
}
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	_CS0();
 80016cc:	f7ff feca 	bl	8001464 <_CS0>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	_RST0();
 80016d0:	f7ff feb8 	bl	8001444 <_RST0>
	delayms(50);  //default value 50
 80016d4:	2032      	movs	r0, #50	; 0x32
 80016d6:	f7ff fed5 	bl	8001484 <delayms>
	_RST1();
 80016da:	f7ff fea3 	bl	8001424 <_RST1>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <commonInit+0x26>
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffa5 	bl	8001634 <commandList>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80016fe:	2032      	movs	r0, #50	; 0x32
 8001700:	f7ff fec0 	bl	8001484 <delayms>
	commonInit(Rcmd1);
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <tftInitR+0x58>)
 8001706:	f7ff ffdd 	bl	80016c4 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d109      	bne.n	8001724 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 8001710:	480f      	ldr	r0, [pc, #60]	; (8001750 <tftInitR+0x5c>)
 8001712:	f7ff ff8f 	bl	8001634 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8001716:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <tftInitR+0x60>)
 8001718:	2202      	movs	r2, #2
 800171a:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <tftInitR+0x64>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e002      	b.n	800172a <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <tftInitR+0x68>)
 8001726:	f7ff ff85 	bl	8001634 <commandList>
	}
	commandList(Rcmd3);
 800172a:	480d      	ldr	r0, [pc, #52]	; (8001760 <tftInitR+0x6c>)
 800172c:	f7ff ff82 	bl	8001634 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2b02      	cmp	r3, #2
 8001734:	d105      	bne.n	8001742 <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f7ff feca 	bl	80014d0 <tftSendCmd>
		tftSendData(0xC0);
 800173c:	20c0      	movs	r0, #192	; 0xc0
 800173e:	f7ff fed6 	bl	80014ee <tftSendData>
	}

	//  tabcolor = options;
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	080086b0 	.word	0x080086b0
 8001750:	080086ec 	.word	0x080086ec
 8001754:	20000248 	.word	0x20000248
 8001758:	2000024c 	.word	0x2000024c
 800175c:	080086fc 	.word	0x080086fc
 8001760:	0800870c 	.word	0x0800870c

08001764 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4604      	mov	r4, r0
 800176c:	4608      	mov	r0, r1
 800176e:	4611      	mov	r1, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4623      	mov	r3, r4
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	4603      	mov	r3, r0
 8001778:	71bb      	strb	r3, [r7, #6]
 800177a:	460b      	mov	r3, r1
 800177c:	717b      	strb	r3, [r7, #5]
 800177e:	4613      	mov	r3, r2
 8001780:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8001782:	202a      	movs	r0, #42	; 0x2a
 8001784:	f7ff fea4 	bl	80014d0 <tftSendCmd>
	tftSendData(0x00);
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff feb0 	bl	80014ee <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <tftSetAddrWindow+0x98>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4413      	add	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fea7 	bl	80014ee <tftSendData>
	tftSendData(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fea4 	bl	80014ee <tftSendData>
	tftSendData(x1+colstart);     // XEND
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <tftSetAddrWindow+0x98>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	797b      	ldrb	r3, [r7, #5]
 80017ae:	4413      	add	r3, r2
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fe9b 	bl	80014ee <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 80017b8:	202b      	movs	r0, #43	; 0x2b
 80017ba:	f7ff fe89 	bl	80014d0 <tftSendCmd>
	tftSendData(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f7ff fe95 	bl	80014ee <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <tftSetAddrWindow+0x9c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	4413      	add	r3, r2
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fe8c 	bl	80014ee <tftSendData>
	tftSendData(0x00);
 80017d6:	2000      	movs	r0, #0
 80017d8:	f7ff fe89 	bl	80014ee <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <tftSetAddrWindow+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	793b      	ldrb	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe80 	bl	80014ee <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 80017ee:	202c      	movs	r0, #44	; 0x2c
 80017f0:	f7ff fe6e 	bl	80014d0 <tftSendCmd>
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}
 80017fc:	20000248 	.word	0x20000248
 8001800:	2000024c 	.word	0x2000024c

08001804 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
	_DC1();
 800180e:	f7ff fde9 	bl	80013e4 <_DC1>
	putpix(color);
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	b29b      	uxth	r3, r3
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fe40 	bl	80014a0 <tftSPISenddata>
 8001820:	88fb      	ldrh	r3, [r7, #6]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe3b 	bl	80014a0 <tftSPISenddata>
}
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	460b      	mov	r3, r1
 8001840:	80bb      	strh	r3, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8001846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184a:	2b00      	cmp	r3, #0
 800184c:	db22      	blt.n	8001894 <tftDrawPixel+0x60>
 800184e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <tftDrawPixel+0x68>)
 8001854:	8812      	ldrh	r2, [r2, #0]
 8001856:	4293      	cmp	r3, r2
 8001858:	da1c      	bge.n	8001894 <tftDrawPixel+0x60>
 800185a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db18      	blt.n	8001894 <tftDrawPixel+0x60>
 8001862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <tftDrawPixel+0x6c>)
 8001868:	8812      	ldrh	r2, [r2, #0]
 800186a:	4293      	cmp	r3, r2
 800186c:	da12      	bge.n	8001894 <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2d8      	uxtb	r0, r3
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	b2d9      	uxtb	r1, r3
 8001876:	88fb      	ldrh	r3, [r7, #6]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	88bb      	ldrh	r3, [r7, #4]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f7ff ff6d 	bl	8001764 <tftSetAddrWindow>
	tftPushColor(color);
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ffb9 	bl	8001804 <tftPushColor>
 8001892:	e000      	b.n	8001896 <tftDrawPixel+0x62>
		return;
 8001894:	bf00      	nop
}
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000002 	.word	0x20000002

080018a4 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	4611      	mov	r1, r2
 80018b0:	461a      	mov	r2, r3
 80018b2:	4623      	mov	r3, r4
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	4603      	mov	r3, r0
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]
 80018be:	4613      	mov	r3, r2
 80018c0:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	4a36      	ldr	r2, [pc, #216]	; (80019a0 <tftFillRect+0xfc>)
 80018c8:	8812      	ldrh	r2, [r2, #0]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	da63      	bge.n	8001996 <tftFillRect+0xf2>
 80018ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018d2:	4a34      	ldr	r2, [pc, #208]	; (80019a4 <tftFillRect+0x100>)
 80018d4:	8812      	ldrh	r2, [r2, #0]
 80018d6:	4293      	cmp	r3, r2
 80018d8:	da5d      	bge.n	8001996 <tftFillRect+0xf2>
		{
		return;
		}

	if((x + w - 1) >= width)
 80018da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <tftFillRect+0xfc>)
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	dd05      	ble.n	80018f8 <tftFillRect+0x54>
		{
		w = width  - x;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <tftFillRect+0xfc>)
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 80018f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001900:	4413      	add	r3, r2
 8001902:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <tftFillRect+0x100>)
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	4293      	cmp	r3, r2
 8001908:	dd05      	ble.n	8001916 <tftFillRect+0x72>
		{
		h = height - y;
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <tftFillRect+0x100>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	b29b      	uxth	r3, r3
 8001914:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	b2d8      	uxtb	r0, r3
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b2dc      	uxtb	r4, r3
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	883b      	ldrh	r3, [r7, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	4622      	mov	r2, r4
 8001940:	f7ff ff10 	bl	8001764 <tftSetAddrWindow>

	_DC1();
 8001944:	f7ff fd4e 	bl	80013e4 <_DC1>
	for(y=h; y>0; y--)
 8001948:	883b      	ldrh	r3, [r7, #0]
 800194a:	80bb      	strh	r3, [r7, #4]
 800194c:	e01e      	b.n	800198c <tftFillRect+0xe8>
	{
		for(x=w; x>0; x--)
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	80fb      	strh	r3, [r7, #6]
 8001952:	e011      	b.n	8001978 <tftFillRect+0xd4>
		{
			putpix(color);
 8001954:	8b3b      	ldrh	r3, [r7, #24]
 8001956:	0a1b      	lsrs	r3, r3, #8
 8001958:	b29b      	uxth	r3, r3
 800195a:	b2db      	uxtb	r3, r3
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fd9f 	bl	80014a0 <tftSPISenddata>
 8001962:	8b3b      	ldrh	r3, [r7, #24]
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd9a 	bl	80014a0 <tftSPISenddata>
		for(x=w; x>0; x--)
 800196c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29b      	uxth	r3, r3
 8001976:	80fb      	strh	r3, [r7, #6]
 8001978:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dce9      	bgt.n	8001954 <tftFillRect+0xb0>
	for(y=h; y>0; y--)
 8001980:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001984:	b29b      	uxth	r3, r3
 8001986:	3b01      	subs	r3, #1
 8001988:	b29b      	uxth	r3, r3
 800198a:	80bb      	strh	r3, [r7, #4]
 800198c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	dcdc      	bgt.n	800194e <tftFillRect+0xaa>
 8001994:	e000      	b.n	8001998 <tftFillRect+0xf4>
		return;
 8001996:	bf00      	nop
		}
	}
}
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000002 	.word	0x20000002

080019a8 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80019a8:	b590      	push	{r4, r7, lr}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4604      	mov	r4, r0
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	80fb      	strh	r3, [r7, #6]
 80019ba:	4603      	mov	r3, r0
 80019bc:	80bb      	strh	r3, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 80019c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <tftDrawFastVLine+0xb0>)
 80019cc:	8812      	ldrh	r2, [r2, #0]
 80019ce:	4293      	cmp	r3, r2
 80019d0:	da3d      	bge.n	8001a4e <tftDrawFastVLine+0xa6>
 80019d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <tftDrawFastVLine+0xb4>)
 80019d8:	8812      	ldrh	r2, [r2, #0]
 80019da:	4293      	cmp	r3, r2
 80019dc:	da37      	bge.n	8001a4e <tftDrawFastVLine+0xa6>
	if((y+h-1) >= height) h = height-y;
 80019de:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <tftDrawFastVLine+0xb4>)
 80019ea:	8812      	ldrh	r2, [r2, #0]
 80019ec:	4293      	cmp	r3, r2
 80019ee:	dd05      	ble.n	80019fc <tftDrawFastVLine+0x54>
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <tftDrawFastVLine+0xb4>)
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	88bb      	ldrh	r3, [r7, #4]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	b2d8      	uxtb	r0, r3
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	b2dc      	uxtb	r4, r3
 8001a08:	88bb      	ldrh	r3, [r7, #4]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	887b      	ldrh	r3, [r7, #2]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4622      	mov	r2, r4
 8001a1a:	f7ff fea3 	bl	8001764 <tftSetAddrWindow>

	_DC1();
 8001a1e:	f7ff fce1 	bl	80013e4 <_DC1>
	while (h--) {
 8001a22:	e00b      	b.n	8001a3c <tftDrawFastVLine+0x94>
		putpix(color);
 8001a24:	883b      	ldrh	r3, [r7, #0]
 8001a26:	0a1b      	lsrs	r3, r3, #8
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd37 	bl	80014a0 <tftSPISenddata>
 8001a32:	883b      	ldrh	r3, [r7, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fd32 	bl	80014a0 <tftSPISenddata>
	while (h--) {
 8001a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	3a01      	subs	r2, #1
 8001a44:	b292      	uxth	r2, r2
 8001a46:	807a      	strh	r2, [r7, #2]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1eb      	bne.n	8001a24 <tftDrawFastVLine+0x7c>
 8001a4c:	e000      	b.n	8001a50 <tftDrawFastVLine+0xa8>
	if((x >= width) || (y >= height)) return;
 8001a4e:	bf00      	nop
	}
}
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000002 	.word	0x20000002

08001a60 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <tftSetFont+0x40>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781a      	ldrb	r2, [r3, #0]
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <tftSetFont+0x40>)
 8001a74:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	785a      	ldrb	r2, [r3, #1]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <tftSetFont+0x40>)
 8001a7c:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	789a      	ldrb	r2, [r3, #2]
 8001a82:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <tftSetFont+0x40>)
 8001a84:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3303      	adds	r3, #3
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <tftSetFont+0x40>)
 8001a90:	811a      	strh	r2, [r3, #8]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000254 	.word	0x20000254

08001aa4 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001ab2:	4b74      	ldr	r3, [pc, #464]	; (8001c84 <tftPrintChar+0x1e0>)
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d803      	bhi.n	8001ac2 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001aba:	4b72      	ldr	r3, [pc, #456]	; (8001c84 <tftPrintChar+0x1e0>)
 8001abc:	791b      	ldrb	r3, [r3, #4]
 8001abe:	77bb      	strb	r3, [r7, #30]
 8001ac0:	e003      	b.n	8001aca <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001ac2:	4b70      	ldr	r3, [pc, #448]	; (8001c84 <tftPrintChar+0x1e0>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001aca:	4b6f      	ldr	r3, [pc, #444]	; (8001c88 <tftPrintChar+0x1e4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d15e      	bne.n	8001b90 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	b2d9      	uxtb	r1, r3
 8001ada:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <tftPrintChar+0x1e0>)
 8001adc:	791a      	ldrb	r2, [r3, #4]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b2dc      	uxtb	r4, r3
 8001aea:	4b66      	ldr	r3, [pc, #408]	; (8001c84 <tftPrintChar+0x1e0>)
 8001aec:	795a      	ldrb	r2, [r3, #5]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4622      	mov	r2, r4
 8001afc:	f7ff fe32 	bl	8001764 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4a60      	ldr	r2, [pc, #384]	; (8001c84 <tftPrintChar+0x1e0>)
 8001b04:	7992      	ldrb	r2, [r2, #6]
 8001b06:	1a9b      	subs	r3, r3, r2
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	7fbb      	ldrb	r3, [r7, #30]
 8001b0c:	b299      	uxth	r1, r3
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	; (8001c84 <tftPrintChar+0x1e0>)
 8001b10:	795b      	ldrb	r3, [r3, #5]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	fb11 f303 	smulbb	r3, r1, r3
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	fb12 f303 	smulbb	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3304      	adds	r3, #4
 8001b22:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	83bb      	strh	r3, [r7, #28]
 8001b28:	e029      	b.n	8001b7e <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001b2a:	4b56      	ldr	r3, [pc, #344]	; (8001c84 <tftPrintChar+0x1e0>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	8b7b      	ldrh	r3, [r7, #26]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	77fb      	strb	r3, [r7, #31]
 8001b3a:	e017      	b.n	8001b6c <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001b3c:	7cfa      	ldrb	r2, [r7, #19]
 8001b3e:	7ffb      	ldrb	r3, [r7, #31]
 8001b40:	f1c3 0307 	rsb	r3, r3, #7
 8001b44:	fa42 f303 	asr.w	r3, r2, r3
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001b50:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <tftPrintChar+0x1e8>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe55 	bl	8001804 <tftPushColor>
 8001b5a:	e004      	b.n	8001b66 <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <tftPrintChar+0x1ec>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe4f 	bl	8001804 <tftPushColor>
			for(i=0;i<8;i++)
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	77fb      	strb	r3, [r7, #31]
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d9e4      	bls.n	8001b3c <tftPrintChar+0x98>
				}
			}
			temp++;
 8001b72:	8b7b      	ldrh	r3, [r7, #26]
 8001b74:	3301      	adds	r3, #1
 8001b76:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001b78:	8bbb      	ldrh	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	83bb      	strh	r3, [r7, #28]
 8001b7e:	8bba      	ldrh	r2, [r7, #28]
 8001b80:	7fbb      	ldrb	r3, [r7, #30]
 8001b82:	4940      	ldr	r1, [pc, #256]	; (8001c84 <tftPrintChar+0x1e0>)
 8001b84:	7949      	ldrb	r1, [r1, #5]
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	dbcd      	blt.n	8001b2a <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001b8e:	e075      	b.n	8001c7c <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	4a3c      	ldr	r2, [pc, #240]	; (8001c84 <tftPrintChar+0x1e0>)
 8001b94:	7992      	ldrb	r2, [r2, #6]
 8001b96:	1a9b      	subs	r3, r3, r2
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	7fbb      	ldrb	r3, [r7, #30]
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <tftPrintChar+0x1e0>)
 8001ba0:	795b      	ldrb	r3, [r3, #5]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	fb11 f303 	smulbb	r3, r1, r3
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	fb12 f303 	smulbb	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	83bb      	strh	r3, [r7, #28]
 8001bb8:	e05a      	b.n	8001c70 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e04b      	b.n	8001c58 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001bc0:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <tftPrintChar+0x1e0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	8b79      	ldrh	r1, [r7, #26]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	440a      	add	r2, r1
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	77fb      	strb	r3, [r7, #31]
 8001bd4:	e03a      	b.n	8001c4c <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	7ffb      	ldrb	r3, [r7, #31]
 8001bdc:	4413      	add	r3, r2
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4413      	add	r3, r2
 8001bea:	b2d8      	uxtb	r0, r3
 8001bec:	8bbb      	ldrh	r3, [r7, #28]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	4413      	add	r3, r2
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2dc      	uxtb	r4, r3
 8001c12:	8bbb      	ldrh	r3, [r7, #28]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4622      	mov	r2, r4
 8001c24:	f7ff fd9e 	bl	8001764 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001c28:	7cfa      	ldrb	r2, [r7, #19]
 8001c2a:	7ffb      	ldrb	r3, [r7, #31]
 8001c2c:	f1c3 0307 	rsb	r3, r3, #7
 8001c30:	fa42 f303 	asr.w	r3, r2, r3
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d004      	beq.n	8001c46 <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <tftPrintChar+0x1e8>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fddf 	bl	8001804 <tftPushColor>
				for(i=0;i<8;i++)
 8001c46:	7ffb      	ldrb	r3, [r7, #31]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	77fb      	strb	r3, [r7, #31]
 8001c4c:	7ffb      	ldrb	r3, [r7, #31]
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	d9c1      	bls.n	8001bd6 <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	7fbb      	ldrb	r3, [r7, #30]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	dbaf      	blt.n	8001bc0 <tftPrintChar+0x11c>
			temp+=(fz);
 8001c60:	7fbb      	ldrb	r3, [r7, #30]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	8b7b      	ldrh	r3, [r7, #26]
 8001c66:	4413      	add	r3, r2
 8001c68:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001c6a:	8bbb      	ldrh	r3, [r7, #28]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	83bb      	strh	r3, [r7, #28]
 8001c70:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <tftPrintChar+0x1e0>)
 8001c72:	795b      	ldrb	r3, [r3, #5]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	8bba      	ldrh	r2, [r7, #28]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d39e      	bcc.n	8001bba <tftPrintChar+0x116>
}
 8001c7c:	bf00      	nop
 8001c7e:	3724      	adds	r7, #36	; 0x24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}
 8001c84:	20000254 	.word	0x20000254
 8001c88:	20000260 	.word	0x20000260
 8001c8c:	20000028 	.word	0x20000028
 8001c90:	20000262 	.word	0x20000262
 8001c94:	00000000 	.word	0x00000000

08001c98 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c9c:	b08e      	sub	sp, #56	; 0x38
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001caa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001cac:	f7fe fc42 	bl	8000534 <__aeabi_i2d>
 8001cb0:	a395      	add	r3, pc, #596	; (adr r3, 8001f08 <tftRotateChar+0x270>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <tftRotateChar+0x260>)
 8001cc4:	791b      	ldrb	r3, [r3, #4]
 8001cc6:	2b07      	cmp	r3, #7
 8001cc8:	d804      	bhi.n	8001cd4 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001cca:	4b8b      	ldr	r3, [pc, #556]	; (8001ef8 <tftRotateChar+0x260>)
 8001ccc:	791b      	ldrb	r3, [r3, #4]
 8001cce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001cd2:	e017      	b.n	8001d04 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001cd4:	4b88      	ldr	r3, [pc, #544]	; (8001ef8 <tftRotateChar+0x260>)
 8001cd6:	791b      	ldrb	r3, [r3, #4]
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
 8001ce0:	4a85      	ldr	r2, [pc, #532]	; (8001ef8 <tftRotateChar+0x260>)
 8001ce2:	7992      	ldrb	r2, [r2, #6]
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cec:	b299      	uxth	r1, r3
 8001cee:	4b82      	ldr	r3, [pc, #520]	; (8001ef8 <tftRotateChar+0x260>)
 8001cf0:	795b      	ldrb	r3, [r3, #5]
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	fb11 f303 	smulbb	r3, r1, r3
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	fb12 f303 	smulbb	r3, r2, r3
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	3304      	adds	r3, #4
 8001d02:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d0a:	e0e6      	b.n	8001eda <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	e0d2      	b.n	8001eb8 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001d12:	4b79      	ldr	r3, [pc, #484]	; (8001ef8 <tftRotateChar+0x260>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d1a:	440a      	add	r2, r1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001d22:	2300      	movs	r3, #0
 8001d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d28:	e0be      	b.n	8001ea8 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	f7fe fc02 	bl	8000534 <__aeabi_i2d>
 8001d30:	4604      	mov	r4, r0
 8001d32:	460d      	mov	r5, r1
 8001d34:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	441a      	add	r2, r3
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <tftRotateChar+0x260>)
 8001d40:	791b      	ldrb	r3, [r3, #4]
 8001d42:	4619      	mov	r1, r3
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf1 	bl	8000534 <__aeabi_i2d>
 8001d52:	4680      	mov	r8, r0
 8001d54:	4689      	mov	r9, r1
 8001d56:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d5a:	f005 f949 	bl	8006ff0 <cos>
 8001d5e:	ec53 2b10 	vmov	r2, r3, d0
 8001d62:	4640      	mov	r0, r8
 8001d64:	4649      	mov	r1, r9
 8001d66:	f7fe fc4f 	bl	8000608 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4692      	mov	sl, r2
 8001d70:	469b      	mov	fp, r3
 8001d72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fbdc 	bl	8000534 <__aeabi_i2d>
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	4689      	mov	r9, r1
 8001d80:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d84:	f005 f988 	bl	8007098 <sin>
 8001d88:	ec53 2b10 	vmov	r2, r3, d0
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	4649      	mov	r1, r9
 8001d90:	f7fe fc3a 	bl	8000608 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4650      	mov	r0, sl
 8001d9a:	4659      	mov	r1, fp
 8001d9c:	f7fe fa7c 	bl	8000298 <__aeabi_dsub>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa78 	bl	800029c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe fed8 	bl	8000b68 <__aeabi_d2iz>
 8001db8:	4603      	mov	r3, r0
 8001dba:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe fbb9 	bl	8000534 <__aeabi_i2d>
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	460d      	mov	r5, r1
 8001dc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbb2 	bl	8000534 <__aeabi_i2d>
 8001dd0:	4680      	mov	r8, r0
 8001dd2:	4689      	mov	r9, r1
 8001dd4:	ed97 0b08 	vldr	d0, [r7, #32]
 8001dd8:	f005 f90a 	bl	8006ff0 <cos>
 8001ddc:	ec53 2b10 	vmov	r2, r3, d0
 8001de0:	4640      	mov	r0, r8
 8001de2:	4649      	mov	r1, r9
 8001de4:	f7fe fc10 	bl	8000608 <__aeabi_dmul>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4692      	mov	sl, r2
 8001dee:	469b      	mov	fp, r3
 8001df0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	441a      	add	r2, r3
 8001dfa:	4b3f      	ldr	r3, [pc, #252]	; (8001ef8 <tftRotateChar+0x260>)
 8001dfc:	791b      	ldrb	r3, [r3, #4]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	fb01 f303 	mul.w	r3, r1, r3
 8001e06:	4413      	add	r3, r2
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb93 	bl	8000534 <__aeabi_i2d>
 8001e0e:	4680      	mov	r8, r0
 8001e10:	4689      	mov	r9, r1
 8001e12:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e16:	f005 f93f 	bl	8007098 <sin>
 8001e1a:	ec53 2b10 	vmov	r2, r3, d0
 8001e1e:	4640      	mov	r0, r8
 8001e20:	4649      	mov	r1, r9
 8001e22:	f7fe fbf1 	bl	8000608 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4650      	mov	r0, sl
 8001e2c:	4659      	mov	r1, fp
 8001e2e:	f7fe fa35 	bl	800029c <__adddf3>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe fa2f 	bl	800029c <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe8f 	bl	8000b68 <__aeabi_d2iz>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	b2d8      	uxtb	r0, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	b2d9      	uxtb	r1, r3
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3301      	adds	r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f7ff fc7d 	bl	8001764 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8001e6a:	7ffa      	ldrb	r2, [r7, #31]
 8001e6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e70:	f1c3 0307 	rsb	r3, r3, #7
 8001e74:	fa42 f303 	asr.w	r3, r2, r3
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8001e80:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <tftRotateChar+0x264>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fcbd 	bl	8001804 <tftPushColor>
 8001e8a:	e008      	b.n	8001e9e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <tftRotateChar+0x268>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d104      	bne.n	8001e9e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <tftRotateChar+0x26c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fcb3 	bl	8001804 <tftPushColor>
			for(i=0;i<8;i++)
 8001e9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001eac:	2b07      	cmp	r3, #7
 8001eae:	f67f af3c 	bls.w	8001d2a <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8001eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	f6ff af27 	blt.w	8001d12 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8001ec4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001ecc:	4413      	add	r3, r2
 8001ece:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8001ed0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <tftRotateChar+0x260>)
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	f4ff af12 	bcc.w	8001d0c <tftRotateChar+0x74>
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3738      	adds	r7, #56	; 0x38
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ef4:	f3af 8000 	nop.w
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	20000028 	.word	0x20000028
 8001f00:	20000260 	.word	0x20000260
 8001f04:	20000262 	.word	0x20000262
 8001f08:	1eb851ec 	.word	0x1eb851ec
 8001f0c:	3f91eb85 	.word	0x3f91eb85

08001f10 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7fe f958 	bl	80001e0 <strlen>
 8001f30:	4603      	mov	r3, r0
 8001f32:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f113 0f02 	cmn.w	r3, #2
 8001f3a:	d10a      	bne.n	8001f52 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8001f3c:	4b3e      	ldr	r3, [pc, #248]	; (8002038 <tftPrint+0x128>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <tftPrint+0x12c>)
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	4619      	mov	r1, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d10d      	bne.n	8001f76 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8001f5a:	4b39      	ldr	r3, [pc, #228]	; (8002040 <tftPrint+0x130>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <tftPrint+0x12c>)
 8001f62:	791b      	ldrb	r3, [r3, #4]
 8001f64:	4619      	mov	r1, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	0fda      	lsrs	r2, r3, #31
 8001f70:	4413      	add	r3, r2
 8001f72:	105b      	asrs	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e053      	b.n	8002024 <tftPrint+0x114>
	{
		lettercount++;
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d112      	bne.n	8001fae <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	60fa      	str	r2, [r7, #12]
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	69f9      	ldr	r1, [r7, #28]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fd85 	bl	8001aa4 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8001f9a:	4b28      	ldr	r3, [pc, #160]	; (800203c <tftPrint+0x12c>)
 8001f9c:	791b      	ldrb	r3, [r3, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	e00a      	b.n	8001fc4 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	60fa      	str	r2, [r7, #12]
 8001fb4:	7818      	ldrb	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	f7ff fe6a 	bl	8001c98 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8001fc4:	f000 f8c4 	bl	8002150 <tftGetWidth>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4b1b      	ldr	r3, [pc, #108]	; (800203c <tftPrint+0x12c>)
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	db1f      	blt.n	800201e <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <tftPrint+0x12c>)
 8001fe8:	795b      	ldrb	r3, [r3, #5]
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4413      	add	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8001ff2:	f000 f8b9 	bl	8002168 <tftGetHeight>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <tftPrint+0x12c>)
 8001ffc:	795b      	ldrb	r3, [r3, #5]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	429a      	cmp	r2, r3
 8002004:	dd09      	ble.n	800201a <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8002006:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800200a:	f7ff fa3b 	bl	8001484 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 800200e:	2000      	movs	r0, #0
 8002010:	f000 f834 	bl	800207c <tftFillScreen>
				y=0; // start at top left of new Page
 8002014:	2300      	movs	r3, #0
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	e001      	b.n	800201e <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
 8002024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	dba7      	blt.n	8001f7c <tftPrint+0x6c>
			}

		}

	}
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000000 	.word	0x20000000
 800203c:	20000254 	.word	0x20000254
 8002040:	20000002 	.word	0x20000002

08002044 <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <tftPrintColor+0x34>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8002058:	4a07      	ldr	r2, [pc, #28]	; (8002078 <tftPrintColor+0x34>)
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 800205e:	2300      	movs	r3, #0
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff ff53 	bl	8001f10 <tftPrint>
	_fg = _fg_old;
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <tftPrintColor+0x34>)
 800206c:	8afb      	ldrh	r3, [r7, #22]
 800206e:	8013      	strh	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000028 	.word	0x20000028

0800207c <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af02      	add	r7, sp, #8
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <tftFillScreen+0x2c>)
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b21a      	sxth	r2, r3
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <tftFillScreen+0x30>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	b219      	sxth	r1, r3
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	460b      	mov	r3, r1
 8002098:	2100      	movs	r1, #0
 800209a:	2000      	movs	r0, #0
 800209c:	f7ff fc02 	bl	80018a4 <tftFillRect>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000002 	.word	0x20000002

080020b0 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 80020c2:	2036      	movs	r0, #54	; 0x36
 80020c4:	f7ff fa04 	bl	80014d0 <tftSendCmd>

	switch (rotation)
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d836      	bhi.n	800213c <tftSetRotation+0x8c>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <tftSetRotation+0x24>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020f9 	.word	0x080020f9
 80020dc:	0800210d 	.word	0x0800210d
 80020e0:	08002121 	.word	0x08002121
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80020e4:	20c0      	movs	r0, #192	; 0xc0
 80020e6:	f7ff fa02 	bl	80014ee <tftSendData>
		width  = ST7735_TFTWIDTH;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <tftSetRotation+0x94>)
 80020ec:	2280      	movs	r2, #128	; 0x80
 80020ee:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 80020f0:	4b15      	ldr	r3, [pc, #84]	; (8002148 <tftSetRotation+0x98>)
 80020f2:	22a0      	movs	r2, #160	; 0xa0
 80020f4:	801a      	strh	r2, [r3, #0]
		break;
 80020f6:	e01d      	b.n	8002134 <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80020f8:	20a0      	movs	r0, #160	; 0xa0
 80020fa:	f7ff f9f8 	bl	80014ee <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <tftSetRotation+0x94>)
 8002100:	22a0      	movs	r2, #160	; 0xa0
 8002102:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <tftSetRotation+0x98>)
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	801a      	strh	r2, [r3, #0]
		   break;
 800210a:	e013      	b.n	8002134 <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 800210c:	2000      	movs	r0, #0
 800210e:	f7ff f9ee 	bl	80014ee <tftSendData>
		   width  = ST7735_TFTWIDTH;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <tftSetRotation+0x94>)
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <tftSetRotation+0x98>)
 800211a:	22a0      	movs	r2, #160	; 0xa0
 800211c:	801a      	strh	r2, [r3, #0]
		   break;
 800211e:	e009      	b.n	8002134 <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8002120:	2060      	movs	r0, #96	; 0x60
 8002122:	f7ff f9e4 	bl	80014ee <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <tftSetRotation+0x94>)
 8002128:	22a0      	movs	r2, #160	; 0xa0
 800212a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <tftSetRotation+0x98>)
 800212e:	2280      	movs	r2, #128	; 0x80
 8002130:	801a      	strh	r2, [r3, #0]
		   break;
 8002132:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 8002134:	4a05      	ldr	r2, [pc, #20]	; (800214c <tftSetRotation+0x9c>)
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	7013      	strb	r3, [r2, #0]
 800213a:	e000      	b.n	800213e <tftSetRotation+0x8e>
		   return;
 800213c:	bf00      	nop
}
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000000 	.word	0x20000000
 8002148:	20000002 	.word	0x20000002
 800214c:	20000250 	.word	0x20000250

08002150 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <tftGetWidth+0x14>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b2db      	uxtb	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	20000000 	.word	0x20000000

08002168 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <tftGetHeight+0x14>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000002 	.word	0x20000002

08002180 <i2cActivate>:

/**
 * @brief Init hardware pins for I2C
 */
void i2cActivate()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <i2cActivate+0x70>)
 8002188:	607b      	str	r3, [r7, #4]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <i2cActivate+0x74>)
 800218c:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f001 f9b2 	bl	80034f8 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	f000 fed1 	bl	8002f3c <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 800219a:	2202      	movs	r2, #2
 800219c:	2108      	movs	r1, #8
 800219e:	6838      	ldr	r0, [r7, #0]
 80021a0:	f000 ff92 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 80021a4:	2204      	movs	r2, #4
 80021a6:	2108      	movs	r1, #8
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f001 f82f 	bl	800320c <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 80021ae:	2202      	movs	r2, #2
 80021b0:	2109      	movs	r1, #9
 80021b2:	6838      	ldr	r0, [r7, #0]
 80021b4:	f000 ff88 	bl	80030c8 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 80021b8:	2204      	movs	r2, #4
 80021ba:	2109      	movs	r1, #9
 80021bc:	6838      	ldr	r0, [r7, #0]
 80021be:	f001 f825 	bl	800320c <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 80021c2:	2201      	movs	r2, #1
 80021c4:	2108      	movs	r1, #8
 80021c6:	6838      	ldr	r0, [r7, #0]
 80021c8:	f001 f889 	bl	80032de <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 80021cc:	2201      	movs	r2, #1
 80021ce:	2109      	movs	r1, #9
 80021d0:	6838      	ldr	r0, [r7, #0]
 80021d2:	f001 f884 	bl	80032de <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 80021d6:	2300      	movs	r3, #0
 80021d8:	2211      	movs	r2, #17
 80021da:	2100      	movs	r1, #0
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fa43 	bl	8003668 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f001 fa8e 	bl	8003704 <i2cEnableDevice>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
#endif /* BALA2024 */
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40005400 	.word	0x40005400
 80021f4:	40020400 	.word	0x40020400

080021f8 <ledActivate>:
/**
 * @brief Init LED pins for RGB
 */
void ledActivate(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 80021fc:	481e      	ldr	r0, [pc, #120]	; (8002278 <ledActivate+0x80>)
 80021fe:	f000 feff 	bl	8003000 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8002202:	2201      	movs	r2, #1
 8002204:	2103      	movs	r1, #3
 8002206:	481c      	ldr	r0, [pc, #112]	; (8002278 <ledActivate+0x80>)
 8002208:	f000 ff5e 	bl	80030c8 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 800220c:	2200      	movs	r2, #0
 800220e:	2103      	movs	r1, #3
 8002210:	4819      	ldr	r0, [pc, #100]	; (8002278 <ledActivate+0x80>)
 8002212:	f001 f864 	bl	80032de <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8002216:	2201      	movs	r2, #1
 8002218:	2103      	movs	r1, #3
 800221a:	4817      	ldr	r0, [pc, #92]	; (8002278 <ledActivate+0x80>)
 800221c:	f001 f8a8 	bl	8003370 <gpioSelectPushPullMode>
    LED_red_off;
 8002220:	2103      	movs	r1, #3
 8002222:	4815      	ldr	r0, [pc, #84]	; (8002278 <ledActivate+0x80>)
 8002224:	f000 ff9b 	bl	800315e <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8002228:	2201      	movs	r2, #1
 800222a:	2104      	movs	r1, #4
 800222c:	4812      	ldr	r0, [pc, #72]	; (8002278 <ledActivate+0x80>)
 800222e:	f000 ff4b 	bl	80030c8 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8002232:	2200      	movs	r2, #0
 8002234:	2104      	movs	r1, #4
 8002236:	4810      	ldr	r0, [pc, #64]	; (8002278 <ledActivate+0x80>)
 8002238:	f001 f851 	bl	80032de <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 800223c:	2201      	movs	r2, #1
 800223e:	2104      	movs	r1, #4
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <ledActivate+0x80>)
 8002242:	f001 f895 	bl	8003370 <gpioSelectPushPullMode>
    LED_green_off;
 8002246:	2104      	movs	r1, #4
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <ledActivate+0x80>)
 800224a:	f000 ff88 	bl	800315e <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 800224e:	2201      	movs	r2, #1
 8002250:	210a      	movs	r1, #10
 8002252:	4809      	ldr	r0, [pc, #36]	; (8002278 <ledActivate+0x80>)
 8002254:	f000 ff38 	bl	80030c8 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8002258:	2200      	movs	r2, #0
 800225a:	210a      	movs	r1, #10
 800225c:	4806      	ldr	r0, [pc, #24]	; (8002278 <ledActivate+0x80>)
 800225e:	f001 f83e 	bl	80032de <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8002262:	2201      	movs	r2, #1
 8002264:	210a      	movs	r1, #10
 8002266:	4804      	ldr	r0, [pc, #16]	; (8002278 <ledActivate+0x80>)
 8002268:	f001 f882 	bl	8003370 <gpioSelectPushPullMode>
    LED_blue_off;
 800226c:	210a      	movs	r1, #10
 800226e:	4802      	ldr	r0, [pc, #8]	; (8002278 <ledActivate+0x80>)
 8002270:	f000 ff75 	bl	800315e <gpioSetPin>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020400 	.word	0x40020400

0800227c <HWsetup>:

/**
 * @brief init the used IO-hardware
 */
void HWsetup(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
    // Configuration LED Pin
   ledActivate();
 8002280:	f7ff ffba 	bl	80021f8 <ledActivate>
   i2cActivate();
 8002284:	f7ff ff7c 	bl	8002180 <i2cActivate>
}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}

0800228c <OSZIinit>:
 * @param ColA	- Color of A Channel Line default: tft_YELLOW;
 * @param ColB	- Color of B Channel Line default: tft_MAGENTA;
 *
 */
void OSZIinit(Scope_t* Scope, int16_t PosX, int16_t PosY, int16_t AmpY,int16_t TimeX, uint16_t ColBG, uint16_t ColA, uint16_t ColB)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	4608      	mov	r0, r1
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	4603      	mov	r3, r0
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	460b      	mov	r3, r1
 80022a0:	813b      	strh	r3, [r7, #8]
 80022a2:	4613      	mov	r3, r2
 80022a4:	80fb      	strh	r3, [r7, #6]
	Scope->PosX = PosX;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	897a      	ldrh	r2, [r7, #10]
 80022aa:	801a      	strh	r2, [r3, #0]
	Scope->PosY = PosY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	893a      	ldrh	r2, [r7, #8]
 80022b0:	805a      	strh	r2, [r3, #2]
	Scope->AmpY = AmpY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	88fa      	ldrh	r2, [r7, #6]
 80022b6:	809a      	strh	r2, [r3, #4]
	Scope->TimeX = TimeX;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8b3a      	ldrh	r2, [r7, #24]
 80022bc:	80da      	strh	r2, [r3, #6]
	Scope->TimePos =0;		//! Set Current Time Pos to 0
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	811a      	strh	r2, [r3, #8]
	Scope->ColBG = ColBG;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8bba      	ldrh	r2, [r7, #28]
 80022c8:	815a      	strh	r2, [r3, #10]
	Scope->ColA = ColA;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8c3a      	ldrh	r2, [r7, #32]
 80022ce:	819a      	strh	r2, [r3, #12]
	Scope->ColB = ColB;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022d4:	81da      	strh	r2, [r3, #14]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <OSZIrun>:
/**
 * @brief run procedure for display A and B Line on this Scope
 */
int16_t OSZIrun(Scope_t* Oszi, float *AlphaBeta)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	// Variables for Oszi Function
	int16_t oszi[4] = {Oszi->PosY,Oszi->AmpY,Oszi->TimeX,Oszi->PosX};			//oszi ypos-Zero Level, y-amplitude, t_lenght
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022fc:	817b      	strh	r3, [r7, #10]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002304:	81bb      	strh	r3, [r7, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	81fb      	strh	r3, [r7, #14]
	uint16_t osziColor = Oszi->ColBG;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	895b      	ldrh	r3, [r3, #10]
 8002312:	83bb      	strh	r3, [r7, #28]
	uint16_t aColor = Oszi->ColA;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	899b      	ldrh	r3, [r3, #12]
 8002318:	837b      	strh	r3, [r7, #26]
	uint16_t bColor = Oszi->ColB;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	89db      	ldrh	r3, [r3, #14]
 800231e:	833b      	strh	r3, [r7, #24]

	int16_t timepos = Oszi->TimePos;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	891b      	ldrh	r3, [r3, #8]
 8002324:	83fb      	strh	r3, [r7, #30]

	// kleines Oszi als Zeitmitschrieb
		if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	dd03      	ble.n	8002342 <OSZIrun+0x5e>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002340:	601a      	str	r2, [r3, #0]
		if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800234c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d502      	bpl.n	800235c <OSZIrun+0x78>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4a61      	ldr	r2, [pc, #388]	; (80024e0 <OSZIrun+0x1fc>)
 800235a:	601a      	str	r2, [r3, #0]
		if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	3304      	adds	r3, #4
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd04      	ble.n	800237c <OSZIrun+0x98>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	3304      	adds	r3, #4
 8002376:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800237a:	601a      	str	r2, [r3, #0]
		if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3304      	adds	r3, #4
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	d503      	bpl.n	800239a <OSZIrun+0xb6>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <OSZIrun+0x1fc>)
 8002398:	601a      	str	r2, [r3, #0]
		int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 800239a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	edd3 7a00 	vldr	s15, [r3]
 80023b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023bc:	ee17 3a90 	vmov	r3, s15
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	82fb      	strh	r3, [r7, #22]
		int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 80023ca:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3304      	adds	r3, #4
 80023e2:	edd3 7a00 	vldr	s15, [r3]
 80023e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ee:	ee17 3a90 	vmov	r3, s15
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	82bb      	strh	r3, [r7, #20]
		int16_t osziHight = oszi[1]*2;
 80023fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002400:	b29b      	uxth	r3, r3
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	b29b      	uxth	r3, r3
 8002406:	827b      	strh	r3, [r7, #18]
		tftDrawFastVLine(timepos+oszi[3], (oszi[0]-oszi[1]), osziHight, osziColor);
 8002408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800240c:	b29a      	uxth	r2, r3
 800240e:	8bfb      	ldrh	r3, [r7, #30]
 8002410:	4413      	add	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	b218      	sxth	r0, r3
 8002416:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800241a:	b29a      	uxth	r2, r3
 800241c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002420:	b29b      	uxth	r3, r3
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	b29b      	uxth	r3, r3
 8002426:	b219      	sxth	r1, r3
 8002428:	8bbb      	ldrh	r3, [r7, #28]
 800242a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800242e:	f7ff fabb 	bl	80019a8 <tftDrawFastVLine>
		if (Ya == Yb)
 8002432:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800243a:	429a      	cmp	r2, r3
 800243c:	d10e      	bne.n	800245c <OSZIrun+0x178>
		{
			tftDrawPixel(timepos+oszi[3],Ya,tft_WHITE);
 800243e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002442:	b29a      	uxth	r2, r3
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4413      	add	r3, r2
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21b      	sxth	r3, r3
 800244c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff f9ed 	bl	8001834 <tftDrawPixel>
 800245a:	e019      	b.n	8002490 <OSZIrun+0x1ac>
		}
		else
		{
			tftDrawPixel(timepos+oszi[3],Ya,aColor);
 800245c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002460:	b29a      	uxth	r2, r3
 8002462:	8bfb      	ldrh	r3, [r7, #30]
 8002464:	4413      	add	r3, r2
 8002466:	b29b      	uxth	r3, r3
 8002468:	b21b      	sxth	r3, r3
 800246a:	8b7a      	ldrh	r2, [r7, #26]
 800246c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f9df 	bl	8001834 <tftDrawPixel>
			tftDrawPixel(timepos+oszi[3],Yb,bColor);
 8002476:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800247a:	b29a      	uxth	r2, r3
 800247c:	8bfb      	ldrh	r3, [r7, #30]
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	b21b      	sxth	r3, r3
 8002484:	8b3a      	ldrh	r2, [r7, #24]
 8002486:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff f9d2 	bl	8001834 <tftDrawPixel>
		}
		if (++timepos > oszi[2] )
 8002490:	8bfb      	ldrh	r3, [r7, #30]
 8002492:	3301      	adds	r3, #1
 8002494:	b29b      	uxth	r3, r3
 8002496:	83fb      	strh	r3, [r7, #30]
 8002498:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800249c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	dd01      	ble.n	80024a8 <OSZIrun+0x1c4>
		{
			timepos = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	83fb      	strh	r3, [r7, #30]
			//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], osziColor);  // Clear all
		}
		tftDrawFastVLine(timepos+oszi[3], oszi[0], oszi[1]/2, tft_RED);
 80024a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	8bfb      	ldrh	r3, [r7, #30]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	b218      	sxth	r0, r3
 80024b6:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80024ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024be:	0fda      	lsrs	r2, r3, #31
 80024c0:	4413      	add	r3, r2
 80024c2:	105b      	asrs	r3, r3, #1
 80024c4:	b21a      	sxth	r2, r3
 80024c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80024ca:	f7ff fa6d 	bl	80019a8 <tftDrawFastVLine>
		Oszi->TimePos = timepos;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	8bfa      	ldrh	r2, [r7, #30]
 80024d2:	811a      	strh	r2, [r3, #8]
		return timepos;
 80024d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	bf800000 	.word	0xbf800000
 80024e4:	00000000 	.word	0x00000000

080024e8 <main>:
uint32_t	Timer1 = 0UL;
uint32_t    ST7735_Timer = 0UL;


int main(void)
{
 80024e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024ec:	b0a3      	sub	sp, #140	; 0x8c
 80024ee:	af04      	add	r7, sp, #16
	const uint32_t   TaskTime = 50UL; // TaskTime for the main process with the period of xx ms
 80024f0:	2332      	movs	r3, #50	; 0x32
 80024f2:	677b      	str	r3, [r7, #116]	; 0x74
	char strT[32];

	float AlphaBeta[2];  // Calc Values Alpha for Target and Beta for PID out

	// This is the Array, of all Timer-Variables
    uint32_t *timerList[] = { &Timer1, &ST7735_Timer /*, additional timer */ };
 80024f4:	4ab2      	ldr	r2, [pc, #712]	; (80027c0 <main+0x2d8>)
 80024f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024fe:	e883 0003 	stmia.w	r3, {r0, r1}
	// size of the array  are calculated
	size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8002502:	2302      	movs	r3, #2
 8002504:	673b      	str	r3, [r7, #112]	; 0x70

	HWsetup();		// using this function from graphics.c for the hardware setup
 8002506:	f7ff feb9 	bl	800227c <HWsetup>
	LED_red_on;			// switch LED to RED
 800250a:	2103      	movs	r1, #3
 800250c:	48ad      	ldr	r0, [pc, #692]	; (80027c4 <main+0x2dc>)
 800250e:	f000 fe51 	bl	80031b4 <gpioResetPin>

	struct PIDContr PID_Demo;  	// instance for PID Controller
	struct ScopeFrame Scope_Demo;	// Instance for Demo Scope

	// Initialisiert den Systick-Timer
	systickInit(SYSTICK_1MS);
 8002512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002516:	f001 fd25 	bl	8003f64 <systickInit>

	// Inits needed for TFT Display

	IOspiInit(&ST7735pgb);
 800251a:	48ab      	ldr	r0, [pc, #684]	; (80027c8 <main+0x2e0>)
 800251c:	f7fe fff6 	bl	800150c <IOspiInit>
	tftInitR(INITR_REDTAB);
 8002520:	2001      	movs	r0, #1
 8002522:	f7ff f8e7 	bl	80016f4 <tftInitR>

	//display setup
	tftSetRotation(LANDSCAPE_FLIP);
 8002526:	2003      	movs	r0, #3
 8002528:	f7ff fdc2 	bl	80020b0 <tftSetRotation>
	tftSetFont((uint8_t *)&SmallFont[0]);
 800252c:	48a7      	ldr	r0, [pc, #668]	; (80027cc <main+0x2e4>)
 800252e:	f7ff fa97 	bl	8001a60 <tftSetFont>
	tftFillScreen(tft_BLACK);
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff fda2 	bl	800207c <tftFillScreen>

	// initialize the rotary push button module
	initLED(&LEDpgb);
 8002538:	48a5      	ldr	r0, [pc, #660]	; (80027d0 <main+0x2e8>)
 800253a:	f7fe fdb1 	bl	80010a0 <initLED>
	initRotaryPushButton(&PuBio_pgb);
 800253e:	48a5      	ldr	r0, [pc, #660]	; (80027d4 <main+0x2ec>)
 8002540:	f7fe fcfa 	bl	8000f38 <initRotaryPushButton>
	systickSetMillis(&Timer1, TaskTime);	// setting of the Task Timer
 8002544:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002546:	48a4      	ldr	r0, [pc, #656]	; (80027d8 <main+0x2f0>)
 8002548:	f001 fcfe 	bl	8003f48 <systickSetMillis>

	LED_red_off;
 800254c:	2103      	movs	r1, #3
 800254e:	489d      	ldr	r0, [pc, #628]	; (80027c4 <main+0x2dc>)
 8002550:	f000 fe05 	bl	800315e <gpioSetPin>
	tftPrintColor((char *)SwVersion,0,0,tft_MAGENTA);
 8002554:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	489f      	ldr	r0, [pc, #636]	; (80027dc <main+0x2f4>)
 800255e:	f7ff fd71 	bl	8002044 <tftPrintColor>

	PID.init(&PID_Demo, _KP, _KI, _KD, (float)0.0001*TaskTime);  // Init der PID-Koeffizienten des Positions-Regler
 8002562:	4b9f      	ldr	r3, [pc, #636]	; (80027e0 <main+0x2f8>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002568:	ee07 2a90 	vmov	s15, r2
 800256c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002570:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80027e4 <main+0x2fc>
 8002574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002578:	f107 0218 	add.w	r2, r7, #24
 800257c:	eef0 1a67 	vmov.f32	s3, s15
 8002580:	ed9f 1a99 	vldr	s2, [pc, #612]	; 80027e8 <main+0x300>
 8002584:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002588:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800258c:	4610      	mov	r0, r2
 800258e:	4798      	blx	r3

	sprintf(strT, "P:%2.1f I:%2.1f D:%2.1f", PID_Demo.KP,PID_Demo.KI,PID_Demo.KD);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffe0 	bl	8000558 <__aeabi_f2d>
 8002598:	4680      	mov	r8, r0
 800259a:	4689      	mov	r9, r1
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffda 	bl	8000558 <__aeabi_f2d>
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffd4 	bl	8000558 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80025b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80025bc:	e9cd 4500 	strd	r4, r5, [sp]
 80025c0:	4642      	mov	r2, r8
 80025c2:	464b      	mov	r3, r9
 80025c4:	4989      	ldr	r1, [pc, #548]	; (80027ec <main+0x304>)
 80025c6:	f002 fa9b 	bl	8004b00 <siprintf>
	tftPrintColor((char *)strT, 0 , 14, tft_GREEN);
 80025ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80025ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80025d2:	220e      	movs	r2, #14
 80025d4:	2100      	movs	r1, #0
 80025d6:	f7ff fd35 	bl	8002044 <tftPrintColor>
	Scope.init(&Scope_Demo, _TFTX-Scope.TimeX*_OSZIScale ,_TFTY-Scope.AmpY*_OSZIScale, Scope.AmpY*_OSZIScale, Scope.TimeX*_OSZIScale, Scope.ColBG, Scope.ColA, Scope.ColB);
 80025da:	4b85      	ldr	r3, [pc, #532]	; (80027f0 <main+0x308>)
 80025dc:	691c      	ldr	r4, [r3, #16]
 80025de:	4b84      	ldr	r3, [pc, #528]	; (80027f0 <main+0x308>)
 80025e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ffa5 	bl	8000534 <__aeabi_i2d>
 80025ea:	a373      	add	r3, pc, #460	; (adr r3, 80027b8 <main+0x2d0>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe f80a 	bl	8000608 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	f04f 0000 	mov.w	r0, #0
 80025fc:	497d      	ldr	r1, [pc, #500]	; (80027f4 <main+0x30c>)
 80025fe:	f7fd fe4b 	bl	8000298 <__aeabi_dsub>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4610      	mov	r0, r2
 8002608:	4619      	mov	r1, r3
 800260a:	f7fe faad 	bl	8000b68 <__aeabi_d2iz>
 800260e:	4603      	mov	r3, r0
 8002610:	b21e      	sxth	r6, r3
 8002612:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <main+0x308>)
 8002614:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff8b 	bl	8000534 <__aeabi_i2d>
 800261e:	a366      	add	r3, pc, #408	; (adr r3, 80027b8 <main+0x2d0>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fd fff0 	bl	8000608 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	f04f 0000 	mov.w	r0, #0
 8002630:	4971      	ldr	r1, [pc, #452]	; (80027f8 <main+0x310>)
 8002632:	f7fd fe31 	bl	8000298 <__aeabi_dsub>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa93 	bl	8000b68 <__aeabi_d2iz>
 8002642:	4603      	mov	r3, r0
 8002644:	fa0f f883 	sxth.w	r8, r3
 8002648:	4b69      	ldr	r3, [pc, #420]	; (80027f0 <main+0x308>)
 800264a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fd ff70 	bl	8000534 <__aeabi_i2d>
 8002654:	a358      	add	r3, pc, #352	; (adr r3, 80027b8 <main+0x2d0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffd5 	bl	8000608 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fa7f 	bl	8000b68 <__aeabi_d2iz>
 800266a:	4603      	mov	r3, r0
 800266c:	fa0f f983 	sxth.w	r9, r3
 8002670:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <main+0x308>)
 8002672:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff5c 	bl	8000534 <__aeabi_i2d>
 800267c:	a34e      	add	r3, pc, #312	; (adr r3, 80027b8 <main+0x2d0>)
 800267e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002682:	f7fd ffc1 	bl	8000608 <__aeabi_dmul>
 8002686:	4602      	mov	r2, r0
 8002688:	460b      	mov	r3, r1
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f7fe fa6b 	bl	8000b68 <__aeabi_d2iz>
 8002692:	4603      	mov	r3, r0
 8002694:	b21b      	sxth	r3, r3
 8002696:	4a56      	ldr	r2, [pc, #344]	; (80027f0 <main+0x308>)
 8002698:	8952      	ldrh	r2, [r2, #10]
 800269a:	4955      	ldr	r1, [pc, #340]	; (80027f0 <main+0x308>)
 800269c:	8989      	ldrh	r1, [r1, #12]
 800269e:	4854      	ldr	r0, [pc, #336]	; (80027f0 <main+0x308>)
 80026a0:	89c0      	ldrh	r0, [r0, #14]
 80026a2:	463d      	mov	r5, r7
 80026a4:	9003      	str	r0, [sp, #12]
 80026a6:	9102      	str	r1, [sp, #8]
 80026a8:	9201      	str	r2, [sp, #4]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	464b      	mov	r3, r9
 80026ae:	4642      	mov	r2, r8
 80026b0:	4631      	mov	r1, r6
 80026b2:	4628      	mov	r0, r5
 80026b4:	47a0      	blx	r4

	while (1)
	{
	   if (true == timerTrigger)
 80026b6:	4b51      	ldr	r3, [pc, #324]	; (80027fc <main+0x314>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <main+0x1e6>
	   {
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 80026be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026c6:	4611      	mov	r1, r2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f001 fca3 	bl	8004014 <systickUpdateTimerList>
	   }
	   if (isSystickExpired(Timer1))
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <main+0x2f0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fc68 	bl	8003fa8 <isSystickExpired>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0eb      	beq.n	80026b6 <main+0x1ce>
	   {
		   systickSetTicktime(&Timer1, TaskTime);
 80026de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80026e0:	483d      	ldr	r0, [pc, #244]	; (80027d8 <main+0x2f0>)
 80026e2:	f001 fc53 	bl	8003f8c <systickSetTicktime>

		   if (getRotaryPushButton() != 0)
 80026e6:	f7fe fdd5 	bl	8001294 <getRotaryPushButton>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d019      	beq.n	8002724 <main+0x23c>
		   {
			   setRotaryPosition(0);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe fe07 	bl	8001304 <setRotaryPosition>
			   PID.init(&PID_Demo, _KD, _KI, _KD, (float)0.0001*TaskTime);
 80026f6:	4b3a      	ldr	r3, [pc, #232]	; (80027e0 <main+0x2f8>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026fc:	ee07 2a90 	vmov	s15, r2
 8002700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002704:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80027e4 <main+0x2fc>
 8002708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800270c:	f107 0218 	add.w	r2, r7, #24
 8002710:	eef0 1a67 	vmov.f32	s3, s15
 8002714:	ed9f 1a34 	vldr	s2, [pc, #208]	; 80027e8 <main+0x300>
 8002718:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800271c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80027e8 <main+0x300>
 8002720:	4610      	mov	r0, r2
 8002722:	4798      	blx	r3
		   }
		   AlphaBeta[0] = (float)getRotaryPosition()/Scope_Demo.AmpY;		// Scale Rot-Pos Value to
 8002724:	f7fe fdd8 	bl	80012d8 <getRotaryPosition>
 8002728:	ee07 0a90 	vmov	s15, r0
 800272c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002730:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002734:	ee07 3a90 	vmov	s15, r3
 8002738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002740:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		   //setLED(BLUE_on);							// Switch Blue LED ON/OFF for Time Measurement of PID.run
		   AlphaBeta[1] = PID.run(&PID_Demo,AlphaBeta[0]);
 8002744:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <main+0x2f8>)
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800274c:	f107 0218 	add.w	r2, r7, #24
 8002750:	eeb0 0a67 	vmov.f32	s0, s15
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
 8002758:	eef0 7a40 	vmov.f32	s15, s0
 800275c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		   //setLED(BLUE_off);
		   setLED( (LED_COLOR_t)(fabs(AlphaBeta[1])*7+8));
 8002760:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002764:	eef0 7ae7 	vabs.f32	s15, s15
 8002768:	ee17 0a90 	vmov	r0, s15
 800276c:	f7fd fef4 	bl	8000558 <__aeabi_f2d>
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <main+0x318>)
 8002776:	f7fd ff47 	bl	8000608 <__aeabi_dmul>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	4b1f      	ldr	r3, [pc, #124]	; (8002804 <main+0x31c>)
 8002788:	f7fd fd88 	bl	800029c <__adddf3>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	f7fe fa10 	bl	8000bb8 <__aeabi_d2uiz>
 8002798:	4603      	mov	r3, r0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fcd3 	bl	8001148 <setLED>
		   else
		   {
			   setLED(GREEN_on);
		   }
*/
		   Scope.run(&Scope_Demo, AlphaBeta);
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <main+0x308>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80027aa:	463a      	mov	r2, r7
 80027ac:	4610      	mov	r0, r2
 80027ae:	4798      	blx	r3
	   if (true == timerTrigger)
 80027b0:	e781      	b.n	80026b6 <main+0x1ce>
 80027b2:	bf00      	nop
 80027b4:	f3af 8000 	nop.w
 80027b8:	9999999a 	.word	0x9999999a
 80027bc:	3fe99999 	.word	0x3fe99999
 80027c0:	08008214 	.word	0x08008214
 80027c4:	40020400 	.word	0x40020400
 80027c8:	20000004 	.word	0x20000004
 80027cc:	08008238 	.word	0x08008238
 80027d0:	0800821c 	.word	0x0800821c
 80027d4:	08008224 	.word	0x08008224
 80027d8:	20000268 	.word	0x20000268
 80027dc:	080081e8 	.word	0x080081e8
 80027e0:	08008750 	.word	0x08008750
 80027e4:	38d1b717 	.word	0x38d1b717
 80027e8:	3dcccccd 	.word	0x3dcccccd
 80027ec:	080081fc 	.word	0x080081fc
 80027f0:	08008738 	.word	0x08008738
 80027f4:	40640000 	.word	0x40640000
 80027f8:	40600000 	.word	0x40600000
 80027fc:	20000264 	.word	0x20000264
 8002800:	401c0000 	.word	0x401c0000
 8002804:	40200000 	.word	0x40200000

08002808 <PIDget>:
 * @param PIDContr - pointer of PID with parameters
 * @returns PIDContr - pointer
 */

PIDContr_t* PIDget(PIDContr_t* PIDContr)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	return PIDContr;
 8002810:	687b      	ldr	r3, [r7, #4]
};
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <PIDclear>:
 * clear the PID internal values
 * @param PIDParam - pointer to PID
 *
 */
void PIDclear(PIDContr_t* PIDParam)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	PIDParam->ISUM = 0;		//!< internal value, set zero for the sum e.g. integral value
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
	PIDParam->InpOld =0;	//!< internal value, last input
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
};
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <PIDset>:
 * @param Source pointer to Source
 * @param Desti  pointer to destination PID
 *
 */
void PIDset(PIDContr_t* Source, PIDContr_t* Desti)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
	Desti->KP = Source->KP;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
	Desti->KI = Source->KI;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	605a      	str	r2, [r3, #4]
	if (Desti->KI == 0)	{Desti-> ISUM = 0;	} //!< clear internal sum if KI Value 0
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002862:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286a:	d103      	bne.n	8002874 <PIDset+0x32>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
	Desti->KD = Source->KD;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	609a      	str	r2, [r3, #8]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <PIDinit>:
 * @param KD - differential coefficient
 * @param TA - sampling time, should be updated if task time changes
 *
 */
void PIDinit(PIDContr_t* PIDParam, float KP, float KI, float KD, float TA)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6178      	str	r0, [r7, #20]
 8002890:	ed87 0a04 	vstr	s0, [r7, #16]
 8002894:	edc7 0a03 	vstr	s1, [r7, #12]
 8002898:	ed87 1a02 	vstr	s2, [r7, #8]
 800289c:	edc7 1a01 	vstr	s3, [r7, #4]
	PIDParam->KP = KP;		// proportional coefficient
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]
	PIDParam->KI = KI;		// integral coefficient
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
	PIDParam->KD = KD;		// differential coefficient
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	609a      	str	r2, [r3, #8]
	PIDParam->TA = TA;		// sampling time, should be updated if task time changes
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	611a      	str	r2, [r3, #16]
	PIDclear(PIDParam);
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f7ff ffb0 	bl	800281e <PIDclear>
};
 80028be:	bf00      	nop
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <PIDrun>:
 * @param Diff - input difference = target minus current value
 *
 */

float PIDrun(PIDContr_t* PID, float Diff)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	ed87 0a00 	vstr	s0, [r7]
	if (PID->KI == 0)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d104      	bne.n	80028ec <PIDrun+0x26>
	{
		PID->ISUM = 0;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	e009      	b.n	8002900 <PIDrun+0x3a>
	}
	else
	{
		PID->ISUM += Diff;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80028f2:	edd7 7a00 	vldr	s15, [r7]
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	float result = (PID->KP * Diff) + (PID->KI * PID->ISUM *PID->TA) + (PID->KD / PID->TA)*(Diff - PID->InpOld);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	edd7 7a00 	vldr	s15, [r7]
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	edd3 6a01 	vldr	s13, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	edd3 7a03 	vldr	s15, [r3, #12]
 800291a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	edd3 7a04 	vldr	s15, [r3, #16]
 8002924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	ed93 6a02 	vldr	s12, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	edd3 7a04 	vldr	s15, [r3, #16]
 8002938:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002942:	ed97 6a00 	vldr	s12, [r7]
 8002946:	ee76 7a67 	vsub.f32	s15, s12, s15
 800294a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800294e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002952:	edc7 7a03 	vstr	s15, [r7, #12]
	PID->InpOld = Diff;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	615a      	str	r2, [r3, #20]
	return result;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	ee07 3a90 	vmov	s15, r3
};
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002970:	480d      	ldr	r0, [pc, #52]	; (80029a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002972:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002974:	f001 fb9c 	bl	80040b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <LoopForever+0x6>)
  ldr r1, =_edata
 800297a:	490d      	ldr	r1, [pc, #52]	; (80029b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800297c:	4a0d      	ldr	r2, [pc, #52]	; (80029b4 <LoopForever+0xe>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002980:	e002      	b.n	8002988 <LoopCopyDataInit>

08002982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002986:	3304      	adds	r3, #4

08002988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800298a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800298c:	d3f9      	bcc.n	8002982 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002990:	4c0a      	ldr	r4, [pc, #40]	; (80029bc <LoopForever+0x16>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002994:	e001      	b.n	800299a <LoopFillZerobss>

08002996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002998:	3204      	adds	r2, #4

0800299a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800299a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800299c:	d3fb      	bcc.n	8002996 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800299e:	f001 fc19 	bl	80041d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029a2:	f7ff fda1 	bl	80024e8 <main>

080029a6 <LoopForever>:

LoopForever:
  b LoopForever
 80029a6:	e7fe      	b.n	80029a6 <LoopForever>
  ldr   r0, =_estack
 80029a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80029b4:	08008d60 	.word	0x08008d60
  ldr r2, =_sbss
 80029b8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80029bc:	20000284 	.word	0x20000284

080029c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c0:	e7fe      	b.n	80029c0 <ADC_IRQHandler>

080029c2 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03e      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d03b      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d038      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d035      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d032      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d02f      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d02c      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b07      	cmp	r3, #7
 80029fa:	d029      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d026      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d023      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b0a      	cmp	r3, #10
 8002a0c:	d020      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b0b      	cmp	r3, #11
 8002a12:	d01d      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d01a      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b0d      	cmp	r3, #13
 8002a1e:	d017      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	2b0e      	cmp	r3, #14
 8002a24:	d014      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d011      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	2b10      	cmp	r3, #16
 8002a30:	d00e      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2b11      	cmp	r3, #17
 8002a36:	d00b      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	2b12      	cmp	r3, #18
 8002a3c:	d008      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b14      	cmp	r3, #20
 8002a42:	d005      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b15      	cmp	r3, #21
 8002a48:	d002      	beq.n	8002a50 <extiVerifyIrqNum+0x8e>
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	2b16      	cmp	r3, #22
 8002a4e:	d101      	bne.n	8002a54 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <extiVerifyIrqNum+0x94>
    }
    return false;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002a6c:	79fb      	ldrb	r3, [r7, #7]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <extiVerifyTrigger+0x1c>
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d002      	beq.n	8002a7e <extiVerifyTrigger+0x1c>
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d101      	bne.n	8002a82 <extiVerifyTrigger+0x20>
    {
        return true;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <extiVerifyTrigger+0x22>
    }
    return false;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8002a96:	2300      	movs	r3, #0
 8002a98:	71fb      	strb	r3, [r7, #7]
 8002a9a:	e008      	b.n	8002aae <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <extiInit+0x34>)
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	71fb      	strb	r3, [r7, #7]
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d9f3      	bls.n	8002a9c <extiInit+0xc>
    }
}
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40013800 	.word	0x40013800

08002ac8 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f937 	bl	8002d54 <gpioVerifyPort>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 8002af2:	23ff      	movs	r3, #255	; 0xff
 8002af4:	e08a      	b.n	8002c0c <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f000 f95d 	bl	8002db8 <gpioVerifyPin>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8002b0a:	23fe      	movs	r3, #254	; 0xfe
 8002b0c:	e07e      	b.n	8002c0c <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	2b0f      	cmp	r3, #15
 8002b12:	d841      	bhi.n	8002b98 <extiConfigIrq+0xd0>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <extiConfigIrq+0x54>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b5d 	.word	0x08002b5d
 8002b20:	08002b5d 	.word	0x08002b5d
 8002b24:	08002b5d 	.word	0x08002b5d
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b69 	.word	0x08002b69
 8002b30:	08002b69 	.word	0x08002b69
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b69 	.word	0x08002b69
 8002b3c:	08002b79 	.word	0x08002b79
 8002b40:	08002b79 	.word	0x08002b79
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b79 	.word	0x08002b79
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002b89 	.word	0x08002b89
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002b5c:	78fb      	ldrb	r3, [r7, #3]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
            break;
 8002b66:	e017      	b.n	8002b98 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
            break;
 8002b76:	e00f      	b.n	8002b98 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002b82:	2302      	movs	r3, #2
 8002b84:	73fb      	strb	r3, [r7, #15]
            break;
 8002b86:	e007      	b.n	8002b98 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	3b0c      	subs	r3, #12
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002b92:	2303      	movs	r3, #3
 8002b94:	73fb      	strb	r3, [r7, #15]
            break;
 8002b96:	bf00      	nop
    }

    if (GPIOA == port)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a1e      	ldr	r2, [pc, #120]	; (8002c14 <extiConfigIrq+0x14c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d102      	bne.n	8002ba6 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	737b      	strb	r3, [r7, #13]
 8002ba4:	e021      	b.n	8002bea <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <extiConfigIrq+0x150>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d102      	bne.n	8002bb4 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	737b      	strb	r3, [r7, #13]
 8002bb2:	e01a      	b.n	8002bea <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <extiConfigIrq+0x154>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d102      	bne.n	8002bc2 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	737b      	strb	r3, [r7, #13]
 8002bc0:	e013      	b.n	8002bea <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <extiConfigIrq+0x158>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d102      	bne.n	8002bd0 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	737b      	strb	r3, [r7, #13]
 8002bce:	e00c      	b.n	8002bea <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <extiConfigIrq+0x15c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8002bd8:	2304      	movs	r3, #4
 8002bda:	737b      	strb	r3, [r7, #13]
 8002bdc:	e005      	b.n	8002bea <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <extiConfigIrq+0x160>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 8002be6:	2307      	movs	r3, #7
 8002be8:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <extiConfigIrq+0x164>)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	3302      	adds	r3, #2
 8002bf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002bf4:	7b79      	ldrb	r1, [r7, #13]
 8002bf6:	7bbb      	ldrb	r3, [r7, #14]
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	490b      	ldr	r1, [pc, #44]	; (8002c2c <extiConfigIrq+0x164>)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4302      	orrs	r2, r0
 8002c04:	3302      	adds	r3, #2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021c00 	.word	0x40021c00
 8002c2c:	40013800 	.word	0x40013800

08002c30 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fec0 	bl	80029c2 <extiVerifyIrqNum>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8002c4e:	23d8      	movs	r3, #216	; 0xd8
 8002c50:	e00a      	b.n	8002c68 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <extiEnableIrq+0x40>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4a03      	ldr	r2, [pc, #12]	; (8002c70 <extiEnableIrq+0x40>)
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	71fb      	strb	r3, [r7, #7]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fe9b 	bl	80029c2 <extiVerifyIrqNum>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f083 0301 	eor.w	r3, r3, #1
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8002c98:	23d8      	movs	r3, #216	; 0xd8
 8002c9a:	e055      	b.n	8002d48 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8002c9c:	79bb      	ldrb	r3, [r7, #6]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fedf 	bl	8002a62 <extiVerifyTrigger>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8002cb0:	23d7      	movs	r3, #215	; 0xd7
 8002cb2:	e049      	b.n	8002d48 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8002cb4:	79bb      	ldrb	r3, [r7, #6]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d115      	bne.n	8002ce6 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002cba:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4a21      	ldr	r2, [pc, #132]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	79fa      	ldrb	r2, [r7, #7]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cda:	43d2      	mvns	r2, r2
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002ce0:	400b      	ands	r3, r1
 8002ce2:	60d3      	str	r3, [r2, #12]
 8002ce4:	e02f      	b.n	8002d46 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 8002ce6:	79bb      	ldrb	r3, [r7, #6]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d115      	bne.n	8002d18 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002cec:	4b18      	ldr	r3, [pc, #96]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	79fa      	ldrb	r2, [r7, #7]
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4a15      	ldr	r2, [pc, #84]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8002d00:	4b13      	ldr	r3, [pc, #76]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	43d2      	mvns	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4a0f      	ldr	r2, [pc, #60]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6093      	str	r3, [r2, #8]
 8002d16:	e016      	b.n	8002d46 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8002d18:	79bb      	ldrb	r3, [r7, #6]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d113      	bne.n	8002d46 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	79fa      	ldrb	r2, [r7, #7]
 8002d24:	2101      	movs	r1, #1
 8002d26:	fa01 f202 	lsl.w	r2, r1, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	79fa      	ldrb	r2, [r7, #7]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <extiSetTriggerEdge+0xdc>)
 8002d42:	430b      	orrs	r3, r1
 8002d44:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013c00 	.word	0x40013c00

08002d54 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <gpioVerifyPort+0x4c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <gpioVerifyPort+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a0f      	ldr	r2, [pc, #60]	; (8002da4 <gpioVerifyPort+0x50>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00f      	beq.n	8002d8c <gpioVerifyPort+0x38>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <gpioVerifyPort+0x54>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <gpioVerifyPort+0x38>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <gpioVerifyPort+0x58>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d007      	beq.n	8002d8c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <gpioVerifyPort+0x5c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d003      	beq.n	8002d8c <gpioVerifyPort+0x38>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a0b      	ldr	r2, [pc, #44]	; (8002db4 <gpioVerifyPort+0x60>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d101      	bne.n	8002d90 <gpioVerifyPort+0x3c>
    {
        return true;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <gpioVerifyPort+0x3e>
    }
    return false;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40020000 	.word	0x40020000
 8002da4:	40020400 	.word	0x40020400
 8002da8:	40020800 	.word	0x40020800
 8002dac:	40020c00 	.word	0x40020c00
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40021c00 	.word	0x40021c00

08002db8 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02c      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d029      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d026      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d023      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dda:	79fb      	ldrb	r3, [r7, #7]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d020      	beq.n	8002e22 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d01d      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b06      	cmp	r3, #6
 8002dea:	d01a      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	2b07      	cmp	r3, #7
 8002df0:	d017      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d014      	beq.n	8002e22 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8002df8:	79fb      	ldrb	r3, [r7, #7]
 8002dfa:	2b09      	cmp	r3, #9
 8002dfc:	d011      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	2b0a      	cmp	r3, #10
 8002e02:	d00e      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	2b0b      	cmp	r3, #11
 8002e08:	d00b      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d008      	beq.n	8002e22 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8002e10:	79fb      	ldrb	r3, [r7, #7]
 8002e12:	2b0d      	cmp	r3, #13
 8002e14:	d005      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	2b0e      	cmp	r3, #14
 8002e1a:	d002      	beq.n	8002e22 <gpioVerifyPin+0x6a>
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	2b0f      	cmp	r3, #15
 8002e20:	d101      	bne.n	8002e26 <gpioVerifyPin+0x6e>
    {
        return true;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <gpioVerifyPin+0x70>
    }
    return false;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02c      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d029      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d026      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d023      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	2b04      	cmp	r3, #4
 8002e5a:	d020      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d01d      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d01a      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	d017      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d014      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d011      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e7a:	79fb      	ldrb	r3, [r7, #7]
 8002e7c:	2b0a      	cmp	r3, #10
 8002e7e:	d00e      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	2b0b      	cmp	r3, #11
 8002e84:	d00b      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d008      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2b0d      	cmp	r3, #13
 8002e90:	d005      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b0e      	cmp	r3, #14
 8002e96:	d002      	beq.n	8002e9e <gpioVerifyAltFunc+0x6a>
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d101      	bne.n	8002ea2 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <gpioVerifyPinMode+0x22>
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d005      	beq.n	8002ed2 <gpioVerifyPinMode+0x22>
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d002      	beq.n	8002ed2 <gpioVerifyPinMode+0x22>
 8002ecc:	79fb      	ldrb	r3, [r7, #7]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d101      	bne.n	8002ed6 <gpioVerifyPinMode+0x26>
    {
        return true;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <gpioVerifyPinMode+0x28>
    }

    return false;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <gpioVerifyOutputType+0x16>
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d101      	bne.n	8002efe <gpioVerifyOutputType+0x1a>
    {
        return true;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <gpioVerifyPushPullMode+0x1c>
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d002      	beq.n	8002f28 <gpioVerifyPushPullMode+0x1c>
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d101      	bne.n	8002f2c <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff05 	bl	8002d54 <gpioVerifyPort>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d042      	beq.n	8002fd6 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a24      	ldr	r2, [pc, #144]	; (8002fe4 <gpioInitPort+0xa8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d106      	bne.n	8002f66 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <gpioInitPort+0xac>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	4a22      	ldr	r2, [pc, #136]	; (8002fe8 <gpioInitPort+0xac>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6313      	str	r3, [r2, #48]	; 0x30
 8002f64:	e035      	b.n	8002fd2 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a20      	ldr	r2, [pc, #128]	; (8002fec <gpioInitPort+0xb0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d106      	bne.n	8002f7c <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <gpioInitPort+0xac>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <gpioInitPort+0xac>)
 8002f74:	f043 0302 	orr.w	r3, r3, #2
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	e02a      	b.n	8002fd2 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	; (8002ff0 <gpioInitPort+0xb4>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d106      	bne.n	8002f92 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <gpioInitPort+0xac>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <gpioInitPort+0xac>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f90:	e01f      	b.n	8002fd2 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a17      	ldr	r2, [pc, #92]	; (8002ff4 <gpioInitPort+0xb8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d106      	bne.n	8002fa8 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <gpioInitPort+0xac>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <gpioInitPort+0xac>)
 8002fa0:	f043 0308 	orr.w	r3, r3, #8
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	e014      	b.n	8002fd2 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <gpioInitPort+0xbc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d106      	bne.n	8002fbe <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8002fb0:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <gpioInitPort+0xac>)
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <gpioInitPort+0xac>)
 8002fb6:	f043 0310 	orr.w	r3, r3, #16
 8002fba:	6313      	str	r3, [r2, #48]	; 0x30
 8002fbc:	e009      	b.n	8002fd2 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <gpioInitPort+0xc0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d105      	bne.n	8002fd2 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <gpioInitPort+0xac>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a07      	ldr	r2, [pc, #28]	; (8002fe8 <gpioInitPort+0xac>)
 8002fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	e001      	b.n	8002fda <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021c00 	.word	0x40021c00

08003000 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fea3 	bl	8002d54 <gpioVerifyPort>
 800300e:	4603      	mov	r3, r0
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295
 800301e:	e041      	b.n	80030a4 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <gpioSelectPort+0xac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d106      	bne.n	8003036 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003028:	4b21      	ldr	r3, [pc, #132]	; (80030b0 <gpioSelectPort+0xb0>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	4a20      	ldr	r2, [pc, #128]	; (80030b0 <gpioSelectPort+0xb0>)
 800302e:	f043 0301 	orr.w	r3, r3, #1
 8003032:	6313      	str	r3, [r2, #48]	; 0x30
 8003034:	e035      	b.n	80030a2 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <gpioSelectPort+0xb4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d106      	bne.n	800304c <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800303e:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <gpioSelectPort+0xb0>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a1b      	ldr	r2, [pc, #108]	; (80030b0 <gpioSelectPort+0xb0>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	e02a      	b.n	80030a2 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a1a      	ldr	r2, [pc, #104]	; (80030b8 <gpioSelectPort+0xb8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d106      	bne.n	8003062 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003054:	4b16      	ldr	r3, [pc, #88]	; (80030b0 <gpioSelectPort+0xb0>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <gpioSelectPort+0xb0>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6313      	str	r3, [r2, #48]	; 0x30
 8003060:	e01f      	b.n	80030a2 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a15      	ldr	r2, [pc, #84]	; (80030bc <gpioSelectPort+0xbc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d106      	bne.n	8003078 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800306a:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <gpioSelectPort+0xb0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <gpioSelectPort+0xb0>)
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6313      	str	r3, [r2, #48]	; 0x30
 8003076:	e014      	b.n	80030a2 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <gpioSelectPort+0xc0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d106      	bne.n	800308e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <gpioSelectPort+0xb0>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	4a0a      	ldr	r2, [pc, #40]	; (80030b0 <gpioSelectPort+0xb0>)
 8003086:	f043 0310 	orr.w	r3, r3, #16
 800308a:	6313      	str	r3, [r2, #48]	; 0x30
 800308c:	e009      	b.n	80030a2 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a0c      	ldr	r2, [pc, #48]	; (80030c4 <gpioSelectPort+0xc4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d105      	bne.n	80030a2 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <gpioSelectPort+0xb0>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <gpioSelectPort+0xb0>)
 800309c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030a0:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40020400 	.word	0x40020400
 80030b8:	40020800 	.word	0x40020800
 80030bc:	40020c00 	.word	0x40020c00
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40021c00 	.word	0x40021c00

080030c8 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
 80030d4:	4613      	mov	r3, r2
 80030d6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fe3b 	bl	8002d54 <gpioVerifyPort>
 80030de:	4603      	mov	r3, r0
 80030e0:	f083 0301 	eor.w	r3, r3, #1
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	e032      	b.n	8003156 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fe60 	bl	8002db8 <gpioVerifyPin>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f083 0301 	eor.w	r3, r3, #1
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003104:	f06f 0301 	mvn.w	r3, #1
 8003108:	e025      	b.n	8003156 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 800310a:	78bb      	ldrb	r3, [r7, #2]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fecf 	bl	8002eb0 <gpioVerifyPinMode>
 8003112:	4603      	mov	r3, r0
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 800311e:	f06f 0305 	mvn.w	r3, #5
 8003122:	e018      	b.n	8003156 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	0052      	lsls	r2, r2, #1
 800312c:	2103      	movs	r1, #3
 800312e:	fa01 f202 	lsl.w	r2, r1, r2
 8003132:	43d2      	mvns	r2, r2
 8003134:	401a      	ands	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 800313a:	78bb      	ldrb	r3, [r7, #2]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	78b9      	ldrb	r1, [r7, #2]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	0052      	lsls	r2, r2, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b082      	sub	sp, #8
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	460b      	mov	r3, r1
 8003168:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fdf2 	bl	8002d54 <gpioVerifyPort>
 8003170:	4603      	mov	r3, r0
 8003172:	f083 0301 	eor.w	r3, r3, #1
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	e014      	b.n	80031ac <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fe17 	bl	8002db8 <gpioVerifyPin>
 800318a:	4603      	mov	r3, r0
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003196:	f06f 0301 	mvn.w	r3, #1
 800319a:	e007      	b.n	80031ac <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	2201      	movs	r2, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7ff fdc7 	bl	8002d54 <gpioVerifyPort>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e015      	b.n	8003204 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fdec 	bl	8002db8 <gpioVerifyPin>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f083 0301 	eor.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80031ec:	f06f 0301 	mvn.w	r3, #1
 80031f0:	e008      	b.n	8003204 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	3310      	adds	r3, #16
 80031f6:	2201      	movs	r2, #1
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
 8003218:	4613      	mov	r3, r2
 800321a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff fd99 	bl	8002d54 <gpioVerifyPort>
 8003222:	4603      	mov	r3, r0
 8003224:	f083 0301 	eor.w	r3, r3, #1
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	e050      	b.n	80032d6 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fdbe 	bl	8002db8 <gpioVerifyPin>
 800323c:	4603      	mov	r3, r0
 800323e:	f083 0301 	eor.w	r3, r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8003248:	f06f 0301 	mvn.w	r3, #1
 800324c:	e043      	b.n	80032d6 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff fdef 	bl	8002e34 <gpioVerifyAltFunc>
 8003256:	4603      	mov	r3, r0
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d002      	beq.n	8003268 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8003262:	f06f 0302 	mvn.w	r3, #2
 8003266:	e036      	b.n	80032d6 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	2202      	movs	r2, #2
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff2a 	bl	80030c8 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	2b07      	cmp	r3, #7
 8003278:	d815      	bhi.n	80032a6 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	0092      	lsls	r2, r2, #2
 8003282:	210f      	movs	r1, #15
 8003284:	fa01 f202 	lsl.w	r2, r1, r2
 8003288:	43d2      	mvns	r2, r2
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	78b9      	ldrb	r1, [r7, #2]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	fa01 f202 	lsl.w	r2, r1, r2
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	621a      	str	r2, [r3, #32]
 80032a4:	e016      	b.n	80032d4 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	3a08      	subs	r2, #8
 80032ae:	0092      	lsls	r2, r2, #2
 80032b0:	210f      	movs	r1, #15
 80032b2:	fa01 f202 	lsl.w	r2, r1, r2
 80032b6:	43d2      	mvns	r2, r2
 80032b8:	401a      	ands	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	78b9      	ldrb	r1, [r7, #2]
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	3a08      	subs	r2, #8
 80032c8:	0092      	lsls	r2, r2, #2
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	431a      	orrs	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	70fb      	strb	r3, [r7, #3]
 80032ea:	4613      	mov	r3, r2
 80032ec:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fd30 	bl	8002d54 <gpioVerifyPort>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f083 0301 	eor.w	r3, r3, #1
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	e030      	b.n	8003368 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8003306:	78fb      	ldrb	r3, [r7, #3]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fd55 	bl	8002db8 <gpioVerifyPin>
 800330e:	4603      	mov	r3, r0
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 800331a:	f06f 0301 	mvn.w	r3, #1
 800331e:	e023      	b.n	8003368 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8003320:	78bb      	ldrb	r3, [r7, #2]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fdde 	bl	8002ee4 <gpioVerifyOutputType>
 8003328:	4603      	mov	r3, r0
 800332a:	f083 0301 	eor.w	r3, r3, #1
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d002      	beq.n	800333a <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8003334:	f06f 0303 	mvn.w	r3, #3
 8003338:	e016      	b.n	8003368 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	43d2      	mvns	r2, r2
 8003348:	401a      	ands	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 800334e:	78bb      	ldrb	r3, [r7, #2]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d108      	bne.n	8003366 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	70fb      	strb	r3, [r7, #3]
 800337c:	4613      	mov	r3, r2
 800337e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fce7 	bl	8002d54 <gpioVerifyPort>
 8003386:	4603      	mov	r3, r0
 8003388:	f083 0301 	eor.w	r3, r3, #1
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
 8003396:	e044      	b.n	8003422 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fd0c 	bl	8002db8 <gpioVerifyPin>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f083 0301 	eor.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80033ac:	f06f 0301 	mvn.w	r3, #1
 80033b0:	e037      	b.n	8003422 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 80033b2:	78bb      	ldrb	r3, [r7, #2]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fda9 	bl	8002f0c <gpioVerifyPushPullMode>
 80033ba:	4603      	mov	r3, r0
 80033bc:	f083 0301 	eor.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 80033c6:	f06f 0306 	mvn.w	r3, #6
 80033ca:	e02a      	b.n	8003422 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	0052      	lsls	r2, r2, #1
 80033d4:	2103      	movs	r1, #3
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	43d2      	mvns	r2, r2
 80033dc:	401a      	ands	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d11a      	bne.n	8003420 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 80033ea:	78bb      	ldrb	r3, [r7, #2]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10a      	bne.n	8003406 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	0052      	lsls	r2, r2, #1
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f202 	lsl.w	r2, r1, r2
 80033fe:	431a      	orrs	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	60da      	str	r2, [r3, #12]
 8003404:	e00c      	b.n	8003420 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8003406:	78bb      	ldrb	r3, [r7, #2]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d109      	bne.n	8003420 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	0052      	lsls	r2, r2, #1
 8003414:	2102      	movs	r1, #2
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f202 	lsl.w	r2, r1, r2
 8003442:	4013      	ands	r3, r2
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	2101      	movs	r1, #1
 8003448:	fa01 f202 	lsl.w	r2, r1, r2
 800344c:	4293      	cmp	r3, r2
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003476:	bf00      	nop
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f9      	beq.n	8003478 <__i2c_start+0x16>
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <__i2c_dummy_read_SR1_SR2>:
 	i2c->CR1 |= I2C_CR1_STOP;
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 }

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 800349a:	bf00      	nop
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf0c      	ite	eq
 80034b2:	2301      	moveq	r3, #1
 80034b4:	2300      	movne	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ed      	bne.n	800349c <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 80034c0:	bf00      	nop
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 80034d8:	79fb      	ldrb	r3, [r7, #7]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <i2cVerifyDutyCycle+0x16>
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <i2cSelectI2C+0x58>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d106      	bne.n	8003516 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <i2cSelectI2C+0x5c>)
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	4a11      	ldr	r2, [pc, #68]	; (8003554 <i2cSelectI2C+0x5c>)
 800350e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003512:	6413      	str	r3, [r2, #64]	; 0x40
 8003514:	e014      	b.n	8003540 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <i2cSelectI2C+0x60>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d106      	bne.n	800352c <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800351e:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <i2cSelectI2C+0x5c>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <i2cSelectI2C+0x5c>)
 8003524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	e009      	b.n	8003540 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a0b      	ldr	r2, [pc, #44]	; (800355c <i2cSelectI2C+0x64>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d105      	bne.n	8003540 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003534:	4b07      	ldr	r3, [pc, #28]	; (8003554 <i2cSelectI2C+0x5c>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	4a06      	ldr	r2, [pc, #24]	; (8003554 <i2cSelectI2C+0x5c>)
 800353a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800353e:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40005400 	.word	0x40005400
 8003554:	40023800 	.word	0x40023800
 8003558:	40005800 	.word	0x40005800
 800355c:	40005c00 	.word	0x40005c00

08003560 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <i2cSetClkSpd+0x2a>
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d008      	beq.n	800358a <i2cSetClkSpd+0x2a>
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d005      	beq.n	800358a <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 800357e:	78fb      	ldrb	r3, [r7, #3]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d002      	beq.n	800358a <i2cSetClkSpd+0x2a>
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d166      	bne.n	8003658 <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 800358a:	bf00      	nop
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80035a6:	f023 030f 	bic.w	r3, r3, #15
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	61da      	str	r2, [r3, #28]
    	switch (spd)
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d836      	bhi.n	800362e <i2cSetClkSpd+0xce>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <i2cSetClkSpd+0x68>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035eb 	.word	0x080035eb
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	08003607 	.word	0x08003607
 80035d8:	08003615 	.word	0x08003615
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	61da      	str	r2, [r3, #28]
				break;
 80035e8:	e02e      	b.n	8003648 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	61da      	str	r2, [r3, #28]
    			break;
 80035f6:	e027      	b.n	8003648 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	61da      	str	r2, [r3, #28]
    				break;
 8003604:	e020      	b.n	8003648 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f043 0214 	orr.w	r2, r3, #20
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	61da      	str	r2, [r3, #28]
    			break;
 8003612:	e019      	b.n	8003648 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	f043 0205 	orr.w	r2, r3, #5
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	61da      	str	r2, [r3, #28]
				break;
 800362c:	e00c      	b.n	8003648 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	61da      	str	r2, [r3, #28]
    			break;
 8003646:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e001      	b.n	800365c <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8003658:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	461a      	mov	r2, r3
 8003676:	4603      	mov	r3, r0
 8003678:	70fb      	strb	r3, [r7, #3]
 800367a:	460b      	mov	r3, r1
 800367c:	70bb      	strb	r3, [r7, #2]
 800367e:	4613      	mov	r3, r2
 8003680:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8003682:	78fb      	ldrb	r3, [r7, #3]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff22 	bl	80034ce <i2cVerifyDutyCycle>
 800368a:	4603      	mov	r3, r0
 800368c:	f083 0301 	eor.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8003696:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 800369a:	e02d      	b.n	80036f8 <i2cInitI2C+0x90>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036a2:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0201 	bic.w	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 80036b6:	f000 f993 	bl	80039e0 <rccGetPclk1Freq>
 80036ba:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <i2cInitI2C+0x98>)
 80036c0:	fba2 2303 	umull	r2, r3, r2, r3
 80036c4:	0c9a      	lsrs	r2, r3, #18
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 80036ca:	78ba      	ldrb	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 80036e4:	787b      	ldrb	r3, [r7, #1]
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff39 	bl	8003560 <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    i2cFindSlaveAddr(i2c, 1);			// first run find routine for Adr 0, work arround for result failure at first search run
 80036ee:	2101      	movs	r1, #1
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f818 	bl	8003726 <i2cFindSlaveAddr>


    return I2C_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	431bde83 	.word	0x431bde83

08003704 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f043 0201 	orr.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fe95 	bl	8003462 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	461a      	mov	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fea5 	bl	8003492 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	e002      	b.n	8003760 <i2cFindSlaveAddr+0x3a>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3301      	adds	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003766:	d3f8      	bcc.n	800375a <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	e000      	b.n	800377a <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8003778:	2300      	movs	r3, #0
    }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003788:	b094      	sub	sp, #80	; 0x50
 800378a:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 800378c:	2300      	movs	r3, #0
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003790:	2300      	movs	r3, #0
 8003792:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003794:	2300      	movs	r3, #0
 8003796:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8003798:	2300      	movs	r3, #0
 800379a:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 800379c:	4b79      	ldr	r3, [pc, #484]	; (8003984 <rccGetSysClock+0x200>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d00d      	beq.n	80037c4 <rccGetSysClock+0x40>
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 80e1 	bhi.w	8003970 <rccGetSysClock+0x1ec>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <rccGetSysClock+0x34>
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d003      	beq.n	80037be <rccGetSysClock+0x3a>
 80037b6:	e0db      	b.n	8003970 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <rccGetSysClock+0x204>)
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80037bc:	e0db      	b.n	8003976 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80037be:	4b73      	ldr	r3, [pc, #460]	; (800398c <rccGetSysClock+0x208>)
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80037c2:	e0d8      	b.n	8003976 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <rccGetSysClock+0x200>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037cc:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037ce:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <rccGetSysClock+0x200>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80037da:	4b6a      	ldr	r3, [pc, #424]	; (8003984 <rccGetSysClock+0x200>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	099b      	lsrs	r3, r3, #6
 80037e0:	2200      	movs	r2, #0
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
 80037f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80037f6:	4622      	mov	r2, r4
 80037f8:	462b      	mov	r3, r5
 80037fa:	f04f 0000 	mov.w	r0, #0
 80037fe:	f04f 0100 	mov.w	r1, #0
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003808:	0150      	lsls	r0, r2, #5
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4621      	mov	r1, r4
 8003810:	1a51      	subs	r1, r2, r1
 8003812:	6139      	str	r1, [r7, #16]
 8003814:	4629      	mov	r1, r5
 8003816:	eb63 0301 	sbc.w	r3, r3, r1
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003828:	4659      	mov	r1, fp
 800382a:	018b      	lsls	r3, r1, #6
 800382c:	4651      	mov	r1, sl
 800382e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003832:	4651      	mov	r1, sl
 8003834:	018a      	lsls	r2, r1, #6
 8003836:	4651      	mov	r1, sl
 8003838:	ebb2 0801 	subs.w	r8, r2, r1
 800383c:	4659      	mov	r1, fp
 800383e:	eb63 0901 	sbc.w	r9, r3, r1
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800384e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003856:	4690      	mov	r8, r2
 8003858:	4699      	mov	r9, r3
 800385a:	4623      	mov	r3, r4
 800385c:	eb18 0303 	adds.w	r3, r8, r3
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	462b      	mov	r3, r5
 8003864:	eb49 0303 	adc.w	r3, r9, r3
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003876:	4629      	mov	r1, r5
 8003878:	024b      	lsls	r3, r1, #9
 800387a:	4621      	mov	r1, r4
 800387c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003880:	4621      	mov	r1, r4
 8003882:	024a      	lsls	r2, r1, #9
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003894:	f7fd f9b0 	bl	8000bf8 <__aeabi_uldivmod>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 800389c:	4613      	mov	r3, r2
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	e058      	b.n	8003954 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <rccGetSysClock+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	2200      	movs	r2, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	4611      	mov	r1, r2
 80038ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	2300      	movs	r3, #0
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038bc:	4642      	mov	r2, r8
 80038be:	464b      	mov	r3, r9
 80038c0:	f04f 0000 	mov.w	r0, #0
 80038c4:	f04f 0100 	mov.w	r1, #0
 80038c8:	0159      	lsls	r1, r3, #5
 80038ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038ce:	0150      	lsls	r0, r2, #5
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4641      	mov	r1, r8
 80038d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038da:	4649      	mov	r1, r9
 80038dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f4:	ebb2 040a 	subs.w	r4, r2, sl
 80038f8:	eb63 050b 	sbc.w	r5, r3, fp
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	f04f 0300 	mov.w	r3, #0
 8003904:	00eb      	lsls	r3, r5, #3
 8003906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390a:	00e2      	lsls	r2, r4, #3
 800390c:	4614      	mov	r4, r2
 800390e:	461d      	mov	r5, r3
 8003910:	4643      	mov	r3, r8
 8003912:	18e3      	adds	r3, r4, r3
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	464b      	mov	r3, r9
 8003918:	eb45 0303 	adc.w	r3, r5, r3
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392a:	4629      	mov	r1, r5
 800392c:	028b      	lsls	r3, r1, #10
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003934:	4621      	mov	r1, r4
 8003936:	028a      	lsls	r2, r1, #10
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	61fa      	str	r2, [r7, #28]
 8003944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003948:	f7fd f956 	bl	8000bf8 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003950:	4613      	mov	r3, r2
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <rccGetSysClock+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	0c1b      	lsrs	r3, r3, #16
 800395a:	f003 0303 	and.w	r3, r3, #3
 800395e:	3301      	adds	r3, #1
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003968:	fbb2 f3f3 	udiv	r3, r2, r3
 800396c:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800396e:	e002      	b.n	8003976 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <rccGetSysClock+0x204>)
 8003972:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003974:	bf00      	nop
    }

    return sysClock;
 8003976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003978:	4618      	mov	r0, r3
 800397a:	3750      	adds	r7, #80	; 0x50
 800397c:	46bd      	mov	sp, r7
 800397e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003982:	bf00      	nop
 8003984:	40023800 	.word	0x40023800
 8003988:	00f42400 	.word	0x00f42400
 800398c:	007a1200 	.word	0x007a1200

08003990 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8003996:	f7ff fef5 	bl	8003784 <rccGetSysClock>
 800399a:	4601      	mov	r1, r0
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <rccGetHclkFreq+0x44>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a4:	22f0      	movs	r2, #240	; 0xf0
 80039a6:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	fa92 f2a2 	rbit	r2, r2
 80039ae:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	fab2 f282 	clz	r2, r2
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	40d3      	lsrs	r3, r2
 80039ba:	4a07      	ldr	r2, [pc, #28]	; (80039d8 <rccGetHclkFreq+0x48>)
 80039bc:	5cd3      	ldrb	r3, [r2, r3]
 80039be:	fa21 f303 	lsr.w	r3, r1, r3
 80039c2:	4a06      	ldr	r2, [pc, #24]	; (80039dc <rccGetHclkFreq+0x4c>)
 80039c4:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <rccGetHclkFreq+0x4c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08008778 	.word	0x08008778
 80039dc:	2000002c 	.word	0x2000002c

080039e0 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80039e6:	f7ff ffd3 	bl	8003990 <rccGetHclkFreq>
 80039ea:	4601      	mov	r1, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <rccGetPclk1Freq+0x3c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80039f4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80039f8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	fa92 f2a2 	rbit	r2, r2
 8003a00:	603a      	str	r2, [r7, #0]
  return result;
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	b2d2      	uxtb	r2, r2
 8003a0a:	40d3      	lsrs	r3, r2
 8003a0c:	4a04      	ldr	r2, [pc, #16]	; (8003a20 <rccGetPclk1Freq+0x40>)
 8003a0e:	5cd3      	ldrb	r3, [r2, r3]
 8003a10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	08008778 	.word	0x08008778

08003a24 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8003a2c:	bf00      	nop
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f9      	beq.n	8003a2e <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	81fb      	strh	r3, [r7, #14]
 8003a3e:	e002      	b.n	8003a46 <__spi_Chk_TX_empty+0x22>
 8003a40:	89fb      	ldrh	r3, [r7, #14]
 8003a42:	3301      	adds	r3, #1
 8003a44:	81fb      	strh	r3, [r7, #14]
 8003a46:	89fb      	ldrh	r3, [r7, #14]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d9f9      	bls.n	8003a40 <__spi_Chk_TX_empty+0x1c>

}
 8003a4c:	bf00      	nop
 8003a4e:	bf00      	nop
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8003a62:	bf00      	nop
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f9      	bne.n	8003a64 <__spi_Chk_notBSY+0xa>
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	; (8003abc <spiVerifySPI+0x3c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <spiVerifySPI+0x28>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <spiVerifySPI+0x40>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <spiVerifySPI+0x28>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <spiVerifySPI+0x44>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <spiVerifySPI+0x28>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a09      	ldr	r2, [pc, #36]	; (8003ac8 <spiVerifySPI+0x48>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <spiVerifySPI+0x2c>
    {
        return true;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <spiVerifySPI+0x2e>
    }
    return false;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40013000 	.word	0x40013000
 8003ac0:	40003800 	.word	0x40003800
 8003ac4:	40003c00 	.word	0x40003c00
 8003ac8:	40013400 	.word	0x40013400

08003acc <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d014      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d011      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d00e      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	2b03      	cmp	r3, #3
 8003aec:	d00b      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d008      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d005      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d002      	beq.n	8003b06 <spiVerifyClkDivider+0x3a>
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	d101      	bne.n	8003b0a <spiVerifyClkDivider+0x3e>
    {
        return true;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <spiVerifyClkDivider+0x40>
    }
    return false;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d002      	beq.n	8003b2e <spiVerifySSM+0x16>
 8003b28:	79fb      	ldrb	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <spiVerifySSM+0x1a>
    {
        return true;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <spiVerifySSM+0x1c>
    }
    return false;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <spiVerifyOpMode+0x16>
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <spiVerifyOpMode+0x1a>
    {
        return true;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <spiVerifyOpMode+0x1c>
    }
    return false;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <spiVerifyPhase+0x16>
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <spiVerifyPhase+0x1a>
    {
        return true;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <spiVerifyPhase+0x1c>
    }
    return false;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <spiVerifyIdlePolarity+0x16>
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	70fb      	strb	r3, [r7, #3]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	70bb      	strb	r3, [r7, #2]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff ff77 	bl	8003acc <spiVerifyClkDivider>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8003bea:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8003bee:	e0cc      	b.n	8003d8a <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff ff90 	bl	8003b18 <spiVerifySSM>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f083 0301 	eor.w	r3, r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d002      	beq.n	8003c0a <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8003c04:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8003c08:	e0bf      	b.n	8003d8a <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8003c0a:	7f3b      	ldrb	r3, [r7, #28]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff ff97 	bl	8003b40 <spiVerifyOpMode>
 8003c12:	4603      	mov	r3, r0
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8003c1e:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8003c22:	e0b2      	b.n	8003d8a <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8003c24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff9d 	bl	8003b68 <spiVerifyPhase>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8003c3a:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8003c3e:	e0a4      	b.n	8003d8a <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8003c40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ffa3 	bl	8003b90 <spiVerifyIdlePolarity>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f083 0301 	eor.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d002      	beq.n	8003c5c <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8003c56:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8003c5a:	e096      	b.n	8003d8a <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	2b07      	cmp	r3, #7
 8003c60:	d83a      	bhi.n	8003cd8 <spiInitSPI+0x120>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <spiInitSPI+0xb0>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c89 	.word	0x08003c89
 8003c6c:	08003c93 	.word	0x08003c93
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003ca7 	.word	0x08003ca7
 8003c78:	08003cb1 	.word	0x08003cb1
 8003c7c:	08003cbb 	.word	0x08003cbb
 8003c80:	08003cc5 	.word	0x08003cc5
 8003c84:	08003ccf 	.word	0x08003ccf
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003c8e:	81fb      	strh	r3, [r7, #14]
            break;
 8003c90:	e027      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8003c92:	89fb      	ldrh	r3, [r7, #14]
 8003c94:	f043 0308 	orr.w	r3, r3, #8
 8003c98:	81fb      	strh	r3, [r7, #14]
            break;
 8003c9a:	e022      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	f043 0310 	orr.w	r3, r3, #16
 8003ca2:	81fb      	strh	r3, [r7, #14]
            break;
 8003ca4:	e01d      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003ca6:	89fb      	ldrh	r3, [r7, #14]
 8003ca8:	f043 0318 	orr.w	r3, r3, #24
 8003cac:	81fb      	strh	r3, [r7, #14]
            break;
 8003cae:	e018      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8003cb0:	89fb      	ldrh	r3, [r7, #14]
 8003cb2:	f043 0320 	orr.w	r3, r3, #32
 8003cb6:	81fb      	strh	r3, [r7, #14]
            break;
 8003cb8:	e013      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8003cba:	89fb      	ldrh	r3, [r7, #14]
 8003cbc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003cc0:	81fb      	strh	r3, [r7, #14]
            break;
 8003cc2:	e00e      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8003cc4:	89fb      	ldrh	r3, [r7, #14]
 8003cc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003cca:	81fb      	strh	r3, [r7, #14]
            break;
 8003ccc:	e009      	b.n	8003ce2 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003cd4:	81fb      	strh	r3, [r7, #14]
            break;
 8003cd6:	e004      	b.n	8003ce2 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8003cd8:	89fb      	ldrh	r3, [r7, #14]
 8003cda:	f043 0318 	orr.w	r3, r3, #24
 8003cde:	81fb      	strh	r3, [r7, #14]
            break;
 8003ce0:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8003ce2:	78bb      	ldrb	r3, [r7, #2]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8003ce8:	89fb      	ldrh	r3, [r7, #14]
 8003cea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cee:	81fb      	strh	r3, [r7, #14]
 8003cf0:	e003      	b.n	8003cfa <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8003cf2:	89fb      	ldrh	r3, [r7, #14]
 8003cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf8:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8003cfa:	787b      	ldrb	r3, [r7, #1]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d110      	bne.n	8003d22 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8003d00:	89fb      	ldrh	r3, [r7, #14]
 8003d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d06:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8003d08:	7e3b      	ldrb	r3, [r7, #24]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d104      	bne.n	8003d18 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8003d0e:	89fb      	ldrh	r3, [r7, #14]
 8003d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d14:	81fb      	strh	r3, [r7, #14]
 8003d16:	e008      	b.n	8003d2a <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8003d18:	89fb      	ldrh	r3, [r7, #14]
 8003d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1e:	81fb      	strh	r3, [r7, #14]
 8003d20:	e003      	b.n	8003d2a <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d28:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8003d2a:	7f3b      	ldrb	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	81fb      	strh	r3, [r7, #14]
 8003d38:	e003      	b.n	8003d42 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8003d3a:	89fb      	ldrh	r3, [r7, #14]
 8003d3c:	f023 0304 	bic.w	r3, r3, #4
 8003d40:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8003d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8003d4a:	89fb      	ldrh	r3, [r7, #14]
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	81fb      	strh	r3, [r7, #14]
 8003d52:	e003      	b.n	8003d5c <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8003d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d104      	bne.n	8003d6e <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8003d64:	89fb      	ldrh	r3, [r7, #14]
 8003d66:	f023 0302 	bic.w	r3, r3, #2
 8003d6a:	81fb      	strh	r3, [r7, #14]
 8003d6c:	e003      	b.n	8003d76 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8003d6e:	89fb      	ldrh	r3, [r7, #14]
 8003d70:	f043 0302 	orr.w	r3, r3, #2
 8003d74:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8003d76:	89fa      	ldrh	r2, [r7, #14]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f846 	bl	8003e14 <spiEnableSPI>

    return SPI_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop

08003d94 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <spiSelectSPI+0x6c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d106      	bne.n	8003db2 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <spiSelectSPI+0x70>)
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <spiSelectSPI+0x70>)
 8003daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003dae:	6453      	str	r3, [r2, #68]	; 0x44
 8003db0:	e01f      	b.n	8003df2 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a14      	ldr	r2, [pc, #80]	; (8003e08 <spiSelectSPI+0x74>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d106      	bne.n	8003dc8 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8003dba:	4b12      	ldr	r3, [pc, #72]	; (8003e04 <spiSelectSPI+0x70>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <spiSelectSPI+0x70>)
 8003dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	e014      	b.n	8003df2 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <spiSelectSPI+0x78>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d106      	bne.n	8003dde <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <spiSelectSPI+0x70>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <spiSelectSPI+0x70>)
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	6413      	str	r3, [r2, #64]	; 0x40
 8003ddc:	e009      	b.n	8003df2 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <spiSelectSPI+0x7c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d105      	bne.n	8003df2 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <spiSelectSPI+0x70>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a06      	ldr	r2, [pc, #24]	; (8003e04 <spiSelectSPI+0x70>)
 8003dec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40013000 	.word	0x40013000
 8003e04:	40023800 	.word	0x40023800
 8003e08:	40003800 	.word	0x40003800
 8003e0c:	40003c00 	.word	0x40003c00
 8003e10:	40013400 	.word	0x40013400

08003e14 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fe2f 	bl	8003a80 <spiVerifySPI>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f083 0301 	eor.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8003e2e:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8003e32:	e006      	b.n	8003e42 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4611      	mov	r1, r2
 8003e56:	461a      	mov	r2, r3
 8003e58:	460b      	mov	r3, r1
 8003e5a:	71fb      	strb	r3, [r7, #7]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe ffa8 	bl	8002db8 <gpioVerifyPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d002      	beq.n	8003e7a <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8003e74:	f06f 0301 	mvn.w	r3, #1
 8003e78:	e016      	b.n	8003ea8 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f7ff fdd2 	bl	8003a24 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	4619      	mov	r1, r3
 8003e84:	68b8      	ldr	r0, [r7, #8]
 8003e86:	f7ff f995 	bl	80031b4 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8003e8a:	79ba      	ldrb	r2, [r7, #6]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff fdc7 	bl	8003a24 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff fddf 	bl	8003a5a <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68b8      	ldr	r0, [r7, #8]
 8003ea2:	f7ff f95c 	bl	800315e <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	db0a      	blt.n	8003eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	490c      	ldr	r1, [pc, #48]	; (8003efc <__NVIC_SetPriority+0x4c>)
 8003eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ece:	0112      	lsls	r2, r2, #4
 8003ed0:	b2d2      	uxtb	r2, r2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed8:	e00a      	b.n	8003ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	4908      	ldr	r1, [pc, #32]	; (8003f00 <__NVIC_SetPriority+0x50>)
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	f003 030f 	and.w	r3, r3, #15
 8003ee6:	3b04      	subs	r3, #4
 8003ee8:	0112      	lsls	r2, r2, #4
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	440b      	add	r3, r1
 8003eee:	761a      	strb	r2, [r3, #24]
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000e100 	.word	0xe000e100
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f14:	d301      	bcc.n	8003f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f16:	2301      	movs	r3, #1
 8003f18:	e00f      	b.n	8003f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <SysTick_Config+0x40>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f22:	210f      	movs	r1, #15
 8003f24:	f04f 30ff 	mov.w	r0, #4294967295
 8003f28:	f7ff ffc2 	bl	8003eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <SysTick_Config+0x40>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <SysTick_Config+0x40>)
 8003f34:	2207      	movs	r2, #7
 8003f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010

08003f48 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	601a      	str	r2, [r3, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8003f6c:	f000 f8b2 	bl	80040d4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <systickInit+0x24>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ffc2 	bl	8003f04 <SysTick_Config>
}
 8003f80:	bf00      	nop
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	2000002c 	.word	0x2000002c

08003f8c <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	601a      	str	r2, [r3, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <isSystickExpired+0x16>
	{
		timerState = true;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <SysTick_Handler+0x14>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
}
 8003fd6:	bf00      	nop
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000264 	.word	0x20000264

08003fe4 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <systickUpdateTimer+0x1a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	1e5a      	subs	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8003ffe:	4b04      	ldr	r3, [pc, #16]	; (8004010 <systickUpdateTimer+0x2c>)
 8004000:	2200      	movs	r2, #0
 8004002:	701a      	strb	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	20000264 	.word	0x20000264

08004014 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e011      	b.n	800404a <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <systickUpdateTimerList+0x30>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	3301      	adds	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	429a      	cmp	r2, r3
 8004050:	d3e9      	bcc.n	8004026 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8004052:	4b04      	ldr	r3, [pc, #16]	; (8004064 <systickUpdateTimerList+0x50>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	20000264 	.word	0x20000264

08004068 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8004072:	6839      	ldr	r1, [r7, #0]
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff ff67 	bl	8003f48 <systickSetMillis>
    while (!isSystickExpired(*timer))
 800407a:	e006      	b.n	800408a <systickDelay+0x22>
    {
        if (timerTrigger == true)
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <systickDelay+0x44>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ffad 	bl	8003fe4 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff ff8a 	bl	8003fa8 <isSystickExpired>
 8004094:	4603      	mov	r3, r0
 8004096:	f083 0301 	eor.w	r3, r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ed      	bne.n	800407c <systickDelay+0x14>
        }
    }
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000264 	.word	0x20000264

080040b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <SystemInit+0x20>)
 80040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ba:	4a05      	ldr	r2, [pc, #20]	; (80040d0 <SystemInit+0x20>)
 80040bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000ed00 	.word	0xe000ed00

080040d4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	2300      	movs	r3, #0
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	2302      	movs	r3, #2
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	2302      	movs	r3, #2
 80040ec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80040ee:	4b34      	ldr	r3, [pc, #208]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d011      	beq.n	8004122 <SystemCoreClockUpdate+0x4e>
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d844      	bhi.n	800418e <SystemCoreClockUpdate+0xba>
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <SystemCoreClockUpdate+0x3e>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b04      	cmp	r3, #4
 800410e:	d004      	beq.n	800411a <SystemCoreClockUpdate+0x46>
 8004110:	e03d      	b.n	800418e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004112:	4b2c      	ldr	r3, [pc, #176]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 8004114:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <SystemCoreClockUpdate+0xf4>)
 8004116:	601a      	str	r2, [r3, #0]
      break;
 8004118:	e03d      	b.n	8004196 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 800411c:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <SystemCoreClockUpdate+0xf8>)
 800411e:	601a      	str	r2, [r3, #0]
      break;
 8004120:	e039      	b.n	8004196 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004122:	4b27      	ldr	r3, [pc, #156]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	0d9b      	lsrs	r3, r3, #22
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800412e:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004136:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00c      	beq.n	8004158 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800413e:	4a23      	ldr	r2, [pc, #140]	; (80041cc <SystemCoreClockUpdate+0xf8>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004148:	6852      	ldr	r2, [r2, #4]
 800414a:	0992      	lsrs	r2, r2, #6
 800414c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004150:	fb02 f303 	mul.w	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e00b      	b.n	8004170 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004158:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <SystemCoreClockUpdate+0xf4>)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	4a17      	ldr	r2, [pc, #92]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004162:	6852      	ldr	r2, [r2, #4]
 8004164:	0992      	lsrs	r2, r2, #6
 8004166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	3301      	adds	r3, #1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	4a0e      	ldr	r2, [pc, #56]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 800418a:	6013      	str	r3, [r2, #0]
      break;
 800418c:	e003      	b.n	8004196 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <SystemCoreClockUpdate+0xf4>)
 8004192:	601a      	str	r2, [r3, #0]
      break;
 8004194:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004196:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <SystemCoreClockUpdate+0xec>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	091b      	lsrs	r3, r3, #4
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	4a0b      	ldr	r2, [pc, #44]	; (80041d0 <SystemCoreClockUpdate+0xfc>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80041a6:	4b07      	ldr	r3, [pc, #28]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	4a04      	ldr	r2, [pc, #16]	; (80041c4 <SystemCoreClockUpdate+0xf0>)
 80041b2:	6013      	str	r3, [r2, #0]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	40023800 	.word	0x40023800
 80041c4:	2000002c 	.word	0x2000002c
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	007a1200 	.word	0x007a1200
 80041d0:	08008788 	.word	0x08008788

080041d4 <__libc_init_array>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	4d0d      	ldr	r5, [pc, #52]	; (800420c <__libc_init_array+0x38>)
 80041d8:	4c0d      	ldr	r4, [pc, #52]	; (8004210 <__libc_init_array+0x3c>)
 80041da:	1b64      	subs	r4, r4, r5
 80041dc:	10a4      	asrs	r4, r4, #2
 80041de:	2600      	movs	r6, #0
 80041e0:	42a6      	cmp	r6, r4
 80041e2:	d109      	bne.n	80041f8 <__libc_init_array+0x24>
 80041e4:	4d0b      	ldr	r5, [pc, #44]	; (8004214 <__libc_init_array+0x40>)
 80041e6:	4c0c      	ldr	r4, [pc, #48]	; (8004218 <__libc_init_array+0x44>)
 80041e8:	f003 fff0 	bl	80081cc <_init>
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	2600      	movs	r6, #0
 80041f2:	42a6      	cmp	r6, r4
 80041f4:	d105      	bne.n	8004202 <__libc_init_array+0x2e>
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
 80041f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fc:	4798      	blx	r3
 80041fe:	3601      	adds	r6, #1
 8004200:	e7ee      	b.n	80041e0 <__libc_init_array+0xc>
 8004202:	f855 3b04 	ldr.w	r3, [r5], #4
 8004206:	4798      	blx	r3
 8004208:	3601      	adds	r6, #1
 800420a:	e7f2      	b.n	80041f2 <__libc_init_array+0x1e>
 800420c:	08008d58 	.word	0x08008d58
 8004210:	08008d58 	.word	0x08008d58
 8004214:	08008d58 	.word	0x08008d58
 8004218:	08008d5c 	.word	0x08008d5c

0800421c <memset>:
 800421c:	4402      	add	r2, r0
 800421e:	4603      	mov	r3, r0
 8004220:	4293      	cmp	r3, r2
 8004222:	d100      	bne.n	8004226 <memset+0xa>
 8004224:	4770      	bx	lr
 8004226:	f803 1b01 	strb.w	r1, [r3], #1
 800422a:	e7f9      	b.n	8004220 <memset+0x4>

0800422c <__cvt>:
 800422c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	ec55 4b10 	vmov	r4, r5, d0
 8004234:	2d00      	cmp	r5, #0
 8004236:	460e      	mov	r6, r1
 8004238:	4619      	mov	r1, r3
 800423a:	462b      	mov	r3, r5
 800423c:	bfbb      	ittet	lt
 800423e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004242:	461d      	movlt	r5, r3
 8004244:	2300      	movge	r3, #0
 8004246:	232d      	movlt	r3, #45	; 0x2d
 8004248:	700b      	strb	r3, [r1, #0]
 800424a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800424c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004250:	4691      	mov	r9, r2
 8004252:	f023 0820 	bic.w	r8, r3, #32
 8004256:	bfbc      	itt	lt
 8004258:	4622      	movlt	r2, r4
 800425a:	4614      	movlt	r4, r2
 800425c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004260:	d005      	beq.n	800426e <__cvt+0x42>
 8004262:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004266:	d100      	bne.n	800426a <__cvt+0x3e>
 8004268:	3601      	adds	r6, #1
 800426a:	2102      	movs	r1, #2
 800426c:	e000      	b.n	8004270 <__cvt+0x44>
 800426e:	2103      	movs	r1, #3
 8004270:	ab03      	add	r3, sp, #12
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	ab02      	add	r3, sp, #8
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	ec45 4b10 	vmov	d0, r4, r5
 800427c:	4653      	mov	r3, sl
 800427e:	4632      	mov	r2, r6
 8004280:	f000 fcea 	bl	8004c58 <_dtoa_r>
 8004284:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004288:	4607      	mov	r7, r0
 800428a:	d102      	bne.n	8004292 <__cvt+0x66>
 800428c:	f019 0f01 	tst.w	r9, #1
 8004290:	d022      	beq.n	80042d8 <__cvt+0xac>
 8004292:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004296:	eb07 0906 	add.w	r9, r7, r6
 800429a:	d110      	bne.n	80042be <__cvt+0x92>
 800429c:	783b      	ldrb	r3, [r7, #0]
 800429e:	2b30      	cmp	r3, #48	; 0x30
 80042a0:	d10a      	bne.n	80042b8 <__cvt+0x8c>
 80042a2:	2200      	movs	r2, #0
 80042a4:	2300      	movs	r3, #0
 80042a6:	4620      	mov	r0, r4
 80042a8:	4629      	mov	r1, r5
 80042aa:	f7fc fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80042ae:	b918      	cbnz	r0, 80042b8 <__cvt+0x8c>
 80042b0:	f1c6 0601 	rsb	r6, r6, #1
 80042b4:	f8ca 6000 	str.w	r6, [sl]
 80042b8:	f8da 3000 	ldr.w	r3, [sl]
 80042bc:	4499      	add	r9, r3
 80042be:	2200      	movs	r2, #0
 80042c0:	2300      	movs	r3, #0
 80042c2:	4620      	mov	r0, r4
 80042c4:	4629      	mov	r1, r5
 80042c6:	f7fc fc07 	bl	8000ad8 <__aeabi_dcmpeq>
 80042ca:	b108      	cbz	r0, 80042d0 <__cvt+0xa4>
 80042cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80042d0:	2230      	movs	r2, #48	; 0x30
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	454b      	cmp	r3, r9
 80042d6:	d307      	bcc.n	80042e8 <__cvt+0xbc>
 80042d8:	9b03      	ldr	r3, [sp, #12]
 80042da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042dc:	1bdb      	subs	r3, r3, r7
 80042de:	4638      	mov	r0, r7
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	b004      	add	sp, #16
 80042e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042e8:	1c59      	adds	r1, r3, #1
 80042ea:	9103      	str	r1, [sp, #12]
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e7f0      	b.n	80042d2 <__cvt+0xa6>

080042f0 <__exponent>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	4603      	mov	r3, r0
 80042f4:	2900      	cmp	r1, #0
 80042f6:	bfb8      	it	lt
 80042f8:	4249      	neglt	r1, r1
 80042fa:	f803 2b02 	strb.w	r2, [r3], #2
 80042fe:	bfb4      	ite	lt
 8004300:	222d      	movlt	r2, #45	; 0x2d
 8004302:	222b      	movge	r2, #43	; 0x2b
 8004304:	2909      	cmp	r1, #9
 8004306:	7042      	strb	r2, [r0, #1]
 8004308:	dd2a      	ble.n	8004360 <__exponent+0x70>
 800430a:	f10d 0407 	add.w	r4, sp, #7
 800430e:	46a4      	mov	ip, r4
 8004310:	270a      	movs	r7, #10
 8004312:	46a6      	mov	lr, r4
 8004314:	460a      	mov	r2, r1
 8004316:	fb91 f6f7 	sdiv	r6, r1, r7
 800431a:	fb07 1516 	mls	r5, r7, r6, r1
 800431e:	3530      	adds	r5, #48	; 0x30
 8004320:	2a63      	cmp	r2, #99	; 0x63
 8004322:	f104 34ff 	add.w	r4, r4, #4294967295
 8004326:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800432a:	4631      	mov	r1, r6
 800432c:	dcf1      	bgt.n	8004312 <__exponent+0x22>
 800432e:	3130      	adds	r1, #48	; 0x30
 8004330:	f1ae 0502 	sub.w	r5, lr, #2
 8004334:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004338:	1c44      	adds	r4, r0, #1
 800433a:	4629      	mov	r1, r5
 800433c:	4561      	cmp	r1, ip
 800433e:	d30a      	bcc.n	8004356 <__exponent+0x66>
 8004340:	f10d 0209 	add.w	r2, sp, #9
 8004344:	eba2 020e 	sub.w	r2, r2, lr
 8004348:	4565      	cmp	r5, ip
 800434a:	bf88      	it	hi
 800434c:	2200      	movhi	r2, #0
 800434e:	4413      	add	r3, r2
 8004350:	1a18      	subs	r0, r3, r0
 8004352:	b003      	add	sp, #12
 8004354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800435a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800435e:	e7ed      	b.n	800433c <__exponent+0x4c>
 8004360:	2330      	movs	r3, #48	; 0x30
 8004362:	3130      	adds	r1, #48	; 0x30
 8004364:	7083      	strb	r3, [r0, #2]
 8004366:	70c1      	strb	r1, [r0, #3]
 8004368:	1d03      	adds	r3, r0, #4
 800436a:	e7f1      	b.n	8004350 <__exponent+0x60>

0800436c <_printf_float>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	ed2d 8b02 	vpush	{d8}
 8004374:	b08d      	sub	sp, #52	; 0x34
 8004376:	460c      	mov	r4, r1
 8004378:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800437c:	4616      	mov	r6, r2
 800437e:	461f      	mov	r7, r3
 8004380:	4605      	mov	r5, r0
 8004382:	f001 fa57 	bl	8005834 <_localeconv_r>
 8004386:	f8d0 a000 	ldr.w	sl, [r0]
 800438a:	4650      	mov	r0, sl
 800438c:	f7fb ff28 	bl	80001e0 <strlen>
 8004390:	2300      	movs	r3, #0
 8004392:	930a      	str	r3, [sp, #40]	; 0x28
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	9305      	str	r3, [sp, #20]
 8004398:	f8d8 3000 	ldr.w	r3, [r8]
 800439c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043a0:	3307      	adds	r3, #7
 80043a2:	f023 0307 	bic.w	r3, r3, #7
 80043a6:	f103 0208 	add.w	r2, r3, #8
 80043aa:	f8c8 2000 	str.w	r2, [r8]
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80043b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80043ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043be:	9307      	str	r3, [sp, #28]
 80043c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80043c4:	ee08 0a10 	vmov	s16, r0
 80043c8:	4b9f      	ldr	r3, [pc, #636]	; (8004648 <_printf_float+0x2dc>)
 80043ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	f7fc fbb3 	bl	8000b3c <__aeabi_dcmpun>
 80043d6:	bb88      	cbnz	r0, 800443c <_printf_float+0xd0>
 80043d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043dc:	4b9a      	ldr	r3, [pc, #616]	; (8004648 <_printf_float+0x2dc>)
 80043de:	f04f 32ff 	mov.w	r2, #4294967295
 80043e2:	f7fc fb8d 	bl	8000b00 <__aeabi_dcmple>
 80043e6:	bb48      	cbnz	r0, 800443c <_printf_float+0xd0>
 80043e8:	2200      	movs	r2, #0
 80043ea:	2300      	movs	r3, #0
 80043ec:	4640      	mov	r0, r8
 80043ee:	4649      	mov	r1, r9
 80043f0:	f7fc fb7c 	bl	8000aec <__aeabi_dcmplt>
 80043f4:	b110      	cbz	r0, 80043fc <_printf_float+0x90>
 80043f6:	232d      	movs	r3, #45	; 0x2d
 80043f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fc:	4b93      	ldr	r3, [pc, #588]	; (800464c <_printf_float+0x2e0>)
 80043fe:	4894      	ldr	r0, [pc, #592]	; (8004650 <_printf_float+0x2e4>)
 8004400:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004404:	bf94      	ite	ls
 8004406:	4698      	movls	r8, r3
 8004408:	4680      	movhi	r8, r0
 800440a:	2303      	movs	r3, #3
 800440c:	6123      	str	r3, [r4, #16]
 800440e:	9b05      	ldr	r3, [sp, #20]
 8004410:	f023 0204 	bic.w	r2, r3, #4
 8004414:	6022      	str	r2, [r4, #0]
 8004416:	f04f 0900 	mov.w	r9, #0
 800441a:	9700      	str	r7, [sp, #0]
 800441c:	4633      	mov	r3, r6
 800441e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004420:	4621      	mov	r1, r4
 8004422:	4628      	mov	r0, r5
 8004424:	f000 f9d8 	bl	80047d8 <_printf_common>
 8004428:	3001      	adds	r0, #1
 800442a:	f040 8090 	bne.w	800454e <_printf_float+0x1e2>
 800442e:	f04f 30ff 	mov.w	r0, #4294967295
 8004432:	b00d      	add	sp, #52	; 0x34
 8004434:	ecbd 8b02 	vpop	{d8}
 8004438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	4640      	mov	r0, r8
 8004442:	4649      	mov	r1, r9
 8004444:	f7fc fb7a 	bl	8000b3c <__aeabi_dcmpun>
 8004448:	b140      	cbz	r0, 800445c <_printf_float+0xf0>
 800444a:	464b      	mov	r3, r9
 800444c:	2b00      	cmp	r3, #0
 800444e:	bfbc      	itt	lt
 8004450:	232d      	movlt	r3, #45	; 0x2d
 8004452:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004456:	487f      	ldr	r0, [pc, #508]	; (8004654 <_printf_float+0x2e8>)
 8004458:	4b7f      	ldr	r3, [pc, #508]	; (8004658 <_printf_float+0x2ec>)
 800445a:	e7d1      	b.n	8004400 <_printf_float+0x94>
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004462:	9206      	str	r2, [sp, #24]
 8004464:	1c5a      	adds	r2, r3, #1
 8004466:	d13f      	bne.n	80044e8 <_printf_float+0x17c>
 8004468:	2306      	movs	r3, #6
 800446a:	6063      	str	r3, [r4, #4]
 800446c:	9b05      	ldr	r3, [sp, #20]
 800446e:	6861      	ldr	r1, [r4, #4]
 8004470:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004474:	2300      	movs	r3, #0
 8004476:	9303      	str	r3, [sp, #12]
 8004478:	ab0a      	add	r3, sp, #40	; 0x28
 800447a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800447e:	ab09      	add	r3, sp, #36	; 0x24
 8004480:	ec49 8b10 	vmov	d0, r8, r9
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	6022      	str	r2, [r4, #0]
 8004488:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800448c:	4628      	mov	r0, r5
 800448e:	f7ff fecd 	bl	800422c <__cvt>
 8004492:	9b06      	ldr	r3, [sp, #24]
 8004494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004496:	2b47      	cmp	r3, #71	; 0x47
 8004498:	4680      	mov	r8, r0
 800449a:	d108      	bne.n	80044ae <_printf_float+0x142>
 800449c:	1cc8      	adds	r0, r1, #3
 800449e:	db02      	blt.n	80044a6 <_printf_float+0x13a>
 80044a0:	6863      	ldr	r3, [r4, #4]
 80044a2:	4299      	cmp	r1, r3
 80044a4:	dd41      	ble.n	800452a <_printf_float+0x1be>
 80044a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80044aa:	fa5f fb8b 	uxtb.w	fp, fp
 80044ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044b2:	d820      	bhi.n	80044f6 <_printf_float+0x18a>
 80044b4:	3901      	subs	r1, #1
 80044b6:	465a      	mov	r2, fp
 80044b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044bc:	9109      	str	r1, [sp, #36]	; 0x24
 80044be:	f7ff ff17 	bl	80042f0 <__exponent>
 80044c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044c4:	1813      	adds	r3, r2, r0
 80044c6:	2a01      	cmp	r2, #1
 80044c8:	4681      	mov	r9, r0
 80044ca:	6123      	str	r3, [r4, #16]
 80044cc:	dc02      	bgt.n	80044d4 <_printf_float+0x168>
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	07d2      	lsls	r2, r2, #31
 80044d2:	d501      	bpl.n	80044d8 <_printf_float+0x16c>
 80044d4:	3301      	adds	r3, #1
 80044d6:	6123      	str	r3, [r4, #16]
 80044d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d09c      	beq.n	800441a <_printf_float+0xae>
 80044e0:	232d      	movs	r3, #45	; 0x2d
 80044e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e6:	e798      	b.n	800441a <_printf_float+0xae>
 80044e8:	9a06      	ldr	r2, [sp, #24]
 80044ea:	2a47      	cmp	r2, #71	; 0x47
 80044ec:	d1be      	bne.n	800446c <_printf_float+0x100>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1bc      	bne.n	800446c <_printf_float+0x100>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e7b9      	b.n	800446a <_printf_float+0xfe>
 80044f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044fa:	d118      	bne.n	800452e <_printf_float+0x1c2>
 80044fc:	2900      	cmp	r1, #0
 80044fe:	6863      	ldr	r3, [r4, #4]
 8004500:	dd0b      	ble.n	800451a <_printf_float+0x1ae>
 8004502:	6121      	str	r1, [r4, #16]
 8004504:	b913      	cbnz	r3, 800450c <_printf_float+0x1a0>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	07d0      	lsls	r0, r2, #31
 800450a:	d502      	bpl.n	8004512 <_printf_float+0x1a6>
 800450c:	3301      	adds	r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	65a1      	str	r1, [r4, #88]	; 0x58
 8004514:	f04f 0900 	mov.w	r9, #0
 8004518:	e7de      	b.n	80044d8 <_printf_float+0x16c>
 800451a:	b913      	cbnz	r3, 8004522 <_printf_float+0x1b6>
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	07d2      	lsls	r2, r2, #31
 8004520:	d501      	bpl.n	8004526 <_printf_float+0x1ba>
 8004522:	3302      	adds	r3, #2
 8004524:	e7f4      	b.n	8004510 <_printf_float+0x1a4>
 8004526:	2301      	movs	r3, #1
 8004528:	e7f2      	b.n	8004510 <_printf_float+0x1a4>
 800452a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800452e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004530:	4299      	cmp	r1, r3
 8004532:	db05      	blt.n	8004540 <_printf_float+0x1d4>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	6121      	str	r1, [r4, #16]
 8004538:	07d8      	lsls	r0, r3, #31
 800453a:	d5ea      	bpl.n	8004512 <_printf_float+0x1a6>
 800453c:	1c4b      	adds	r3, r1, #1
 800453e:	e7e7      	b.n	8004510 <_printf_float+0x1a4>
 8004540:	2900      	cmp	r1, #0
 8004542:	bfd4      	ite	le
 8004544:	f1c1 0202 	rsble	r2, r1, #2
 8004548:	2201      	movgt	r2, #1
 800454a:	4413      	add	r3, r2
 800454c:	e7e0      	b.n	8004510 <_printf_float+0x1a4>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	055a      	lsls	r2, r3, #21
 8004552:	d407      	bmi.n	8004564 <_printf_float+0x1f8>
 8004554:	6923      	ldr	r3, [r4, #16]
 8004556:	4642      	mov	r2, r8
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	d12c      	bne.n	80045bc <_printf_float+0x250>
 8004562:	e764      	b.n	800442e <_printf_float+0xc2>
 8004564:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004568:	f240 80e0 	bls.w	800472c <_printf_float+0x3c0>
 800456c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004570:	2200      	movs	r2, #0
 8004572:	2300      	movs	r3, #0
 8004574:	f7fc fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004578:	2800      	cmp	r0, #0
 800457a:	d034      	beq.n	80045e6 <_printf_float+0x27a>
 800457c:	4a37      	ldr	r2, [pc, #220]	; (800465c <_printf_float+0x2f0>)
 800457e:	2301      	movs	r3, #1
 8004580:	4631      	mov	r1, r6
 8004582:	4628      	mov	r0, r5
 8004584:	47b8      	blx	r7
 8004586:	3001      	adds	r0, #1
 8004588:	f43f af51 	beq.w	800442e <_printf_float+0xc2>
 800458c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004590:	429a      	cmp	r2, r3
 8004592:	db02      	blt.n	800459a <_printf_float+0x22e>
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	07d8      	lsls	r0, r3, #31
 8004598:	d510      	bpl.n	80045bc <_printf_float+0x250>
 800459a:	ee18 3a10 	vmov	r3, s16
 800459e:	4652      	mov	r2, sl
 80045a0:	4631      	mov	r1, r6
 80045a2:	4628      	mov	r0, r5
 80045a4:	47b8      	blx	r7
 80045a6:	3001      	adds	r0, #1
 80045a8:	f43f af41 	beq.w	800442e <_printf_float+0xc2>
 80045ac:	f04f 0800 	mov.w	r8, #0
 80045b0:	f104 091a 	add.w	r9, r4, #26
 80045b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	4543      	cmp	r3, r8
 80045ba:	dc09      	bgt.n	80045d0 <_printf_float+0x264>
 80045bc:	6823      	ldr	r3, [r4, #0]
 80045be:	079b      	lsls	r3, r3, #30
 80045c0:	f100 8105 	bmi.w	80047ce <_printf_float+0x462>
 80045c4:	68e0      	ldr	r0, [r4, #12]
 80045c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045c8:	4298      	cmp	r0, r3
 80045ca:	bfb8      	it	lt
 80045cc:	4618      	movlt	r0, r3
 80045ce:	e730      	b.n	8004432 <_printf_float+0xc6>
 80045d0:	2301      	movs	r3, #1
 80045d2:	464a      	mov	r2, r9
 80045d4:	4631      	mov	r1, r6
 80045d6:	4628      	mov	r0, r5
 80045d8:	47b8      	blx	r7
 80045da:	3001      	adds	r0, #1
 80045dc:	f43f af27 	beq.w	800442e <_printf_float+0xc2>
 80045e0:	f108 0801 	add.w	r8, r8, #1
 80045e4:	e7e6      	b.n	80045b4 <_printf_float+0x248>
 80045e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	dc39      	bgt.n	8004660 <_printf_float+0x2f4>
 80045ec:	4a1b      	ldr	r2, [pc, #108]	; (800465c <_printf_float+0x2f0>)
 80045ee:	2301      	movs	r3, #1
 80045f0:	4631      	mov	r1, r6
 80045f2:	4628      	mov	r0, r5
 80045f4:	47b8      	blx	r7
 80045f6:	3001      	adds	r0, #1
 80045f8:	f43f af19 	beq.w	800442e <_printf_float+0xc2>
 80045fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004600:	4313      	orrs	r3, r2
 8004602:	d102      	bne.n	800460a <_printf_float+0x29e>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	07d9      	lsls	r1, r3, #31
 8004608:	d5d8      	bpl.n	80045bc <_printf_float+0x250>
 800460a:	ee18 3a10 	vmov	r3, s16
 800460e:	4652      	mov	r2, sl
 8004610:	4631      	mov	r1, r6
 8004612:	4628      	mov	r0, r5
 8004614:	47b8      	blx	r7
 8004616:	3001      	adds	r0, #1
 8004618:	f43f af09 	beq.w	800442e <_printf_float+0xc2>
 800461c:	f04f 0900 	mov.w	r9, #0
 8004620:	f104 0a1a 	add.w	sl, r4, #26
 8004624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004626:	425b      	negs	r3, r3
 8004628:	454b      	cmp	r3, r9
 800462a:	dc01      	bgt.n	8004630 <_printf_float+0x2c4>
 800462c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800462e:	e792      	b.n	8004556 <_printf_float+0x1ea>
 8004630:	2301      	movs	r3, #1
 8004632:	4652      	mov	r2, sl
 8004634:	4631      	mov	r1, r6
 8004636:	4628      	mov	r0, r5
 8004638:	47b8      	blx	r7
 800463a:	3001      	adds	r0, #1
 800463c:	f43f aef7 	beq.w	800442e <_printf_float+0xc2>
 8004640:	f109 0901 	add.w	r9, r9, #1
 8004644:	e7ee      	b.n	8004624 <_printf_float+0x2b8>
 8004646:	bf00      	nop
 8004648:	7fefffff 	.word	0x7fefffff
 800464c:	0800879c 	.word	0x0800879c
 8004650:	080087a0 	.word	0x080087a0
 8004654:	080087a8 	.word	0x080087a8
 8004658:	080087a4 	.word	0x080087a4
 800465c:	080087ac 	.word	0x080087ac
 8004660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004664:	429a      	cmp	r2, r3
 8004666:	bfa8      	it	ge
 8004668:	461a      	movge	r2, r3
 800466a:	2a00      	cmp	r2, #0
 800466c:	4691      	mov	r9, r2
 800466e:	dc37      	bgt.n	80046e0 <_printf_float+0x374>
 8004670:	f04f 0b00 	mov.w	fp, #0
 8004674:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004678:	f104 021a 	add.w	r2, r4, #26
 800467c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800467e:	9305      	str	r3, [sp, #20]
 8004680:	eba3 0309 	sub.w	r3, r3, r9
 8004684:	455b      	cmp	r3, fp
 8004686:	dc33      	bgt.n	80046f0 <_printf_float+0x384>
 8004688:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468c:	429a      	cmp	r2, r3
 800468e:	db3b      	blt.n	8004708 <_printf_float+0x39c>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	07da      	lsls	r2, r3, #31
 8004694:	d438      	bmi.n	8004708 <_printf_float+0x39c>
 8004696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004698:	9a05      	ldr	r2, [sp, #20]
 800469a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800469c:	1a9a      	subs	r2, r3, r2
 800469e:	eba3 0901 	sub.w	r9, r3, r1
 80046a2:	4591      	cmp	r9, r2
 80046a4:	bfa8      	it	ge
 80046a6:	4691      	movge	r9, r2
 80046a8:	f1b9 0f00 	cmp.w	r9, #0
 80046ac:	dc35      	bgt.n	800471a <_printf_float+0x3ae>
 80046ae:	f04f 0800 	mov.w	r8, #0
 80046b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b6:	f104 0a1a 	add.w	sl, r4, #26
 80046ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	eba3 0309 	sub.w	r3, r3, r9
 80046c4:	4543      	cmp	r3, r8
 80046c6:	f77f af79 	ble.w	80045bc <_printf_float+0x250>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4652      	mov	r2, sl
 80046ce:	4631      	mov	r1, r6
 80046d0:	4628      	mov	r0, r5
 80046d2:	47b8      	blx	r7
 80046d4:	3001      	adds	r0, #1
 80046d6:	f43f aeaa 	beq.w	800442e <_printf_float+0xc2>
 80046da:	f108 0801 	add.w	r8, r8, #1
 80046de:	e7ec      	b.n	80046ba <_printf_float+0x34e>
 80046e0:	4613      	mov	r3, r2
 80046e2:	4631      	mov	r1, r6
 80046e4:	4642      	mov	r2, r8
 80046e6:	4628      	mov	r0, r5
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	d1c0      	bne.n	8004670 <_printf_float+0x304>
 80046ee:	e69e      	b.n	800442e <_printf_float+0xc2>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4631      	mov	r1, r6
 80046f4:	4628      	mov	r0, r5
 80046f6:	9205      	str	r2, [sp, #20]
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f43f ae97 	beq.w	800442e <_printf_float+0xc2>
 8004700:	9a05      	ldr	r2, [sp, #20]
 8004702:	f10b 0b01 	add.w	fp, fp, #1
 8004706:	e7b9      	b.n	800467c <_printf_float+0x310>
 8004708:	ee18 3a10 	vmov	r3, s16
 800470c:	4652      	mov	r2, sl
 800470e:	4631      	mov	r1, r6
 8004710:	4628      	mov	r0, r5
 8004712:	47b8      	blx	r7
 8004714:	3001      	adds	r0, #1
 8004716:	d1be      	bne.n	8004696 <_printf_float+0x32a>
 8004718:	e689      	b.n	800442e <_printf_float+0xc2>
 800471a:	9a05      	ldr	r2, [sp, #20]
 800471c:	464b      	mov	r3, r9
 800471e:	4442      	add	r2, r8
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	d1c1      	bne.n	80046ae <_printf_float+0x342>
 800472a:	e680      	b.n	800442e <_printf_float+0xc2>
 800472c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800472e:	2a01      	cmp	r2, #1
 8004730:	dc01      	bgt.n	8004736 <_printf_float+0x3ca>
 8004732:	07db      	lsls	r3, r3, #31
 8004734:	d538      	bpl.n	80047a8 <_printf_float+0x43c>
 8004736:	2301      	movs	r3, #1
 8004738:	4642      	mov	r2, r8
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	f43f ae74 	beq.w	800442e <_printf_float+0xc2>
 8004746:	ee18 3a10 	vmov	r3, s16
 800474a:	4652      	mov	r2, sl
 800474c:	4631      	mov	r1, r6
 800474e:	4628      	mov	r0, r5
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	f43f ae6b 	beq.w	800442e <_printf_float+0xc2>
 8004758:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800475c:	2200      	movs	r2, #0
 800475e:	2300      	movs	r3, #0
 8004760:	f7fc f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004764:	b9d8      	cbnz	r0, 800479e <_printf_float+0x432>
 8004766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004768:	f108 0201 	add.w	r2, r8, #1
 800476c:	3b01      	subs	r3, #1
 800476e:	4631      	mov	r1, r6
 8004770:	4628      	mov	r0, r5
 8004772:	47b8      	blx	r7
 8004774:	3001      	adds	r0, #1
 8004776:	d10e      	bne.n	8004796 <_printf_float+0x42a>
 8004778:	e659      	b.n	800442e <_printf_float+0xc2>
 800477a:	2301      	movs	r3, #1
 800477c:	4652      	mov	r2, sl
 800477e:	4631      	mov	r1, r6
 8004780:	4628      	mov	r0, r5
 8004782:	47b8      	blx	r7
 8004784:	3001      	adds	r0, #1
 8004786:	f43f ae52 	beq.w	800442e <_printf_float+0xc2>
 800478a:	f108 0801 	add.w	r8, r8, #1
 800478e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	4543      	cmp	r3, r8
 8004794:	dcf1      	bgt.n	800477a <_printf_float+0x40e>
 8004796:	464b      	mov	r3, r9
 8004798:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800479c:	e6dc      	b.n	8004558 <_printf_float+0x1ec>
 800479e:	f04f 0800 	mov.w	r8, #0
 80047a2:	f104 0a1a 	add.w	sl, r4, #26
 80047a6:	e7f2      	b.n	800478e <_printf_float+0x422>
 80047a8:	2301      	movs	r3, #1
 80047aa:	4642      	mov	r2, r8
 80047ac:	e7df      	b.n	800476e <_printf_float+0x402>
 80047ae:	2301      	movs	r3, #1
 80047b0:	464a      	mov	r2, r9
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f ae38 	beq.w	800442e <_printf_float+0xc2>
 80047be:	f108 0801 	add.w	r8, r8, #1
 80047c2:	68e3      	ldr	r3, [r4, #12]
 80047c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047c6:	1a5b      	subs	r3, r3, r1
 80047c8:	4543      	cmp	r3, r8
 80047ca:	dcf0      	bgt.n	80047ae <_printf_float+0x442>
 80047cc:	e6fa      	b.n	80045c4 <_printf_float+0x258>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	f104 0919 	add.w	r9, r4, #25
 80047d6:	e7f4      	b.n	80047c2 <_printf_float+0x456>

080047d8 <_printf_common>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	4616      	mov	r6, r2
 80047de:	4699      	mov	r9, r3
 80047e0:	688a      	ldr	r2, [r1, #8]
 80047e2:	690b      	ldr	r3, [r1, #16]
 80047e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047e8:	4293      	cmp	r3, r2
 80047ea:	bfb8      	it	lt
 80047ec:	4613      	movlt	r3, r2
 80047ee:	6033      	str	r3, [r6, #0]
 80047f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047f4:	4607      	mov	r7, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	b10a      	cbz	r2, 80047fe <_printf_common+0x26>
 80047fa:	3301      	adds	r3, #1
 80047fc:	6033      	str	r3, [r6, #0]
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	0699      	lsls	r1, r3, #26
 8004802:	bf42      	ittt	mi
 8004804:	6833      	ldrmi	r3, [r6, #0]
 8004806:	3302      	addmi	r3, #2
 8004808:	6033      	strmi	r3, [r6, #0]
 800480a:	6825      	ldr	r5, [r4, #0]
 800480c:	f015 0506 	ands.w	r5, r5, #6
 8004810:	d106      	bne.n	8004820 <_printf_common+0x48>
 8004812:	f104 0a19 	add.w	sl, r4, #25
 8004816:	68e3      	ldr	r3, [r4, #12]
 8004818:	6832      	ldr	r2, [r6, #0]
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	42ab      	cmp	r3, r5
 800481e:	dc26      	bgt.n	800486e <_printf_common+0x96>
 8004820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004824:	1e13      	subs	r3, r2, #0
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	bf18      	it	ne
 800482a:	2301      	movne	r3, #1
 800482c:	0692      	lsls	r2, r2, #26
 800482e:	d42b      	bmi.n	8004888 <_printf_common+0xb0>
 8004830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004834:	4649      	mov	r1, r9
 8004836:	4638      	mov	r0, r7
 8004838:	47c0      	blx	r8
 800483a:	3001      	adds	r0, #1
 800483c:	d01e      	beq.n	800487c <_printf_common+0xa4>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	68e5      	ldr	r5, [r4, #12]
 8004842:	6832      	ldr	r2, [r6, #0]
 8004844:	f003 0306 	and.w	r3, r3, #6
 8004848:	2b04      	cmp	r3, #4
 800484a:	bf08      	it	eq
 800484c:	1aad      	subeq	r5, r5, r2
 800484e:	68a3      	ldr	r3, [r4, #8]
 8004850:	6922      	ldr	r2, [r4, #16]
 8004852:	bf0c      	ite	eq
 8004854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004858:	2500      	movne	r5, #0
 800485a:	4293      	cmp	r3, r2
 800485c:	bfc4      	itt	gt
 800485e:	1a9b      	subgt	r3, r3, r2
 8004860:	18ed      	addgt	r5, r5, r3
 8004862:	2600      	movs	r6, #0
 8004864:	341a      	adds	r4, #26
 8004866:	42b5      	cmp	r5, r6
 8004868:	d11a      	bne.n	80048a0 <_printf_common+0xc8>
 800486a:	2000      	movs	r0, #0
 800486c:	e008      	b.n	8004880 <_printf_common+0xa8>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4649      	mov	r1, r9
 8004874:	4638      	mov	r0, r7
 8004876:	47c0      	blx	r8
 8004878:	3001      	adds	r0, #1
 800487a:	d103      	bne.n	8004884 <_printf_common+0xac>
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004884:	3501      	adds	r5, #1
 8004886:	e7c6      	b.n	8004816 <_printf_common+0x3e>
 8004888:	18e1      	adds	r1, r4, r3
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	2030      	movs	r0, #48	; 0x30
 800488e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004892:	4422      	add	r2, r4
 8004894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800489c:	3302      	adds	r3, #2
 800489e:	e7c7      	b.n	8004830 <_printf_common+0x58>
 80048a0:	2301      	movs	r3, #1
 80048a2:	4622      	mov	r2, r4
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d0e6      	beq.n	800487c <_printf_common+0xa4>
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7d9      	b.n	8004866 <_printf_common+0x8e>
	...

080048b4 <_printf_i>:
 80048b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b8:	7e0f      	ldrb	r7, [r1, #24]
 80048ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048bc:	2f78      	cmp	r7, #120	; 0x78
 80048be:	4691      	mov	r9, r2
 80048c0:	4680      	mov	r8, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	469a      	mov	sl, r3
 80048c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048ca:	d807      	bhi.n	80048dc <_printf_i+0x28>
 80048cc:	2f62      	cmp	r7, #98	; 0x62
 80048ce:	d80a      	bhi.n	80048e6 <_printf_i+0x32>
 80048d0:	2f00      	cmp	r7, #0
 80048d2:	f000 80d8 	beq.w	8004a86 <_printf_i+0x1d2>
 80048d6:	2f58      	cmp	r7, #88	; 0x58
 80048d8:	f000 80a3 	beq.w	8004a22 <_printf_i+0x16e>
 80048dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048e4:	e03a      	b.n	800495c <_printf_i+0xa8>
 80048e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ea:	2b15      	cmp	r3, #21
 80048ec:	d8f6      	bhi.n	80048dc <_printf_i+0x28>
 80048ee:	a101      	add	r1, pc, #4	; (adr r1, 80048f4 <_printf_i+0x40>)
 80048f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048f4:	0800494d 	.word	0x0800494d
 80048f8:	08004961 	.word	0x08004961
 80048fc:	080048dd 	.word	0x080048dd
 8004900:	080048dd 	.word	0x080048dd
 8004904:	080048dd 	.word	0x080048dd
 8004908:	080048dd 	.word	0x080048dd
 800490c:	08004961 	.word	0x08004961
 8004910:	080048dd 	.word	0x080048dd
 8004914:	080048dd 	.word	0x080048dd
 8004918:	080048dd 	.word	0x080048dd
 800491c:	080048dd 	.word	0x080048dd
 8004920:	08004a6d 	.word	0x08004a6d
 8004924:	08004991 	.word	0x08004991
 8004928:	08004a4f 	.word	0x08004a4f
 800492c:	080048dd 	.word	0x080048dd
 8004930:	080048dd 	.word	0x080048dd
 8004934:	08004a8f 	.word	0x08004a8f
 8004938:	080048dd 	.word	0x080048dd
 800493c:	08004991 	.word	0x08004991
 8004940:	080048dd 	.word	0x080048dd
 8004944:	080048dd 	.word	0x080048dd
 8004948:	08004a57 	.word	0x08004a57
 800494c:	682b      	ldr	r3, [r5, #0]
 800494e:	1d1a      	adds	r2, r3, #4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	602a      	str	r2, [r5, #0]
 8004954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800495c:	2301      	movs	r3, #1
 800495e:	e0a3      	b.n	8004aa8 <_printf_i+0x1f4>
 8004960:	6820      	ldr	r0, [r4, #0]
 8004962:	6829      	ldr	r1, [r5, #0]
 8004964:	0606      	lsls	r6, r0, #24
 8004966:	f101 0304 	add.w	r3, r1, #4
 800496a:	d50a      	bpl.n	8004982 <_printf_i+0xce>
 800496c:	680e      	ldr	r6, [r1, #0]
 800496e:	602b      	str	r3, [r5, #0]
 8004970:	2e00      	cmp	r6, #0
 8004972:	da03      	bge.n	800497c <_printf_i+0xc8>
 8004974:	232d      	movs	r3, #45	; 0x2d
 8004976:	4276      	negs	r6, r6
 8004978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800497c:	485e      	ldr	r0, [pc, #376]	; (8004af8 <_printf_i+0x244>)
 800497e:	230a      	movs	r3, #10
 8004980:	e019      	b.n	80049b6 <_printf_i+0x102>
 8004982:	680e      	ldr	r6, [r1, #0]
 8004984:	602b      	str	r3, [r5, #0]
 8004986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800498a:	bf18      	it	ne
 800498c:	b236      	sxthne	r6, r6
 800498e:	e7ef      	b.n	8004970 <_printf_i+0xbc>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	1d19      	adds	r1, r3, #4
 8004996:	6029      	str	r1, [r5, #0]
 8004998:	0601      	lsls	r1, r0, #24
 800499a:	d501      	bpl.n	80049a0 <_printf_i+0xec>
 800499c:	681e      	ldr	r6, [r3, #0]
 800499e:	e002      	b.n	80049a6 <_printf_i+0xf2>
 80049a0:	0646      	lsls	r6, r0, #25
 80049a2:	d5fb      	bpl.n	800499c <_printf_i+0xe8>
 80049a4:	881e      	ldrh	r6, [r3, #0]
 80049a6:	4854      	ldr	r0, [pc, #336]	; (8004af8 <_printf_i+0x244>)
 80049a8:	2f6f      	cmp	r7, #111	; 0x6f
 80049aa:	bf0c      	ite	eq
 80049ac:	2308      	moveq	r3, #8
 80049ae:	230a      	movne	r3, #10
 80049b0:	2100      	movs	r1, #0
 80049b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049b6:	6865      	ldr	r5, [r4, #4]
 80049b8:	60a5      	str	r5, [r4, #8]
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	bfa2      	ittt	ge
 80049be:	6821      	ldrge	r1, [r4, #0]
 80049c0:	f021 0104 	bicge.w	r1, r1, #4
 80049c4:	6021      	strge	r1, [r4, #0]
 80049c6:	b90e      	cbnz	r6, 80049cc <_printf_i+0x118>
 80049c8:	2d00      	cmp	r5, #0
 80049ca:	d04d      	beq.n	8004a68 <_printf_i+0x1b4>
 80049cc:	4615      	mov	r5, r2
 80049ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80049d2:	fb03 6711 	mls	r7, r3, r1, r6
 80049d6:	5dc7      	ldrb	r7, [r0, r7]
 80049d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049dc:	4637      	mov	r7, r6
 80049de:	42bb      	cmp	r3, r7
 80049e0:	460e      	mov	r6, r1
 80049e2:	d9f4      	bls.n	80049ce <_printf_i+0x11a>
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d10b      	bne.n	8004a00 <_printf_i+0x14c>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07de      	lsls	r6, r3, #31
 80049ec:	d508      	bpl.n	8004a00 <_printf_i+0x14c>
 80049ee:	6923      	ldr	r3, [r4, #16]
 80049f0:	6861      	ldr	r1, [r4, #4]
 80049f2:	4299      	cmp	r1, r3
 80049f4:	bfde      	ittt	le
 80049f6:	2330      	movle	r3, #48	; 0x30
 80049f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a00:	1b52      	subs	r2, r2, r5
 8004a02:	6122      	str	r2, [r4, #16]
 8004a04:	f8cd a000 	str.w	sl, [sp]
 8004a08:	464b      	mov	r3, r9
 8004a0a:	aa03      	add	r2, sp, #12
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4640      	mov	r0, r8
 8004a10:	f7ff fee2 	bl	80047d8 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	d14c      	bne.n	8004ab2 <_printf_i+0x1fe>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1c:	b004      	add	sp, #16
 8004a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a22:	4835      	ldr	r0, [pc, #212]	; (8004af8 <_printf_i+0x244>)
 8004a24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a28:	6829      	ldr	r1, [r5, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a30:	6029      	str	r1, [r5, #0]
 8004a32:	061d      	lsls	r5, r3, #24
 8004a34:	d514      	bpl.n	8004a60 <_printf_i+0x1ac>
 8004a36:	07df      	lsls	r7, r3, #31
 8004a38:	bf44      	itt	mi
 8004a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a3e:	6023      	strmi	r3, [r4, #0]
 8004a40:	b91e      	cbnz	r6, 8004a4a <_printf_i+0x196>
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	f023 0320 	bic.w	r3, r3, #32
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	2310      	movs	r3, #16
 8004a4c:	e7b0      	b.n	80049b0 <_printf_i+0xfc>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f043 0320 	orr.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	2378      	movs	r3, #120	; 0x78
 8004a58:	4828      	ldr	r0, [pc, #160]	; (8004afc <_printf_i+0x248>)
 8004a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a5e:	e7e3      	b.n	8004a28 <_printf_i+0x174>
 8004a60:	0659      	lsls	r1, r3, #25
 8004a62:	bf48      	it	mi
 8004a64:	b2b6      	uxthmi	r6, r6
 8004a66:	e7e6      	b.n	8004a36 <_printf_i+0x182>
 8004a68:	4615      	mov	r5, r2
 8004a6a:	e7bb      	b.n	80049e4 <_printf_i+0x130>
 8004a6c:	682b      	ldr	r3, [r5, #0]
 8004a6e:	6826      	ldr	r6, [r4, #0]
 8004a70:	6961      	ldr	r1, [r4, #20]
 8004a72:	1d18      	adds	r0, r3, #4
 8004a74:	6028      	str	r0, [r5, #0]
 8004a76:	0635      	lsls	r5, r6, #24
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	d501      	bpl.n	8004a80 <_printf_i+0x1cc>
 8004a7c:	6019      	str	r1, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <_printf_i+0x1d2>
 8004a80:	0670      	lsls	r0, r6, #25
 8004a82:	d5fb      	bpl.n	8004a7c <_printf_i+0x1c8>
 8004a84:	8019      	strh	r1, [r3, #0]
 8004a86:	2300      	movs	r3, #0
 8004a88:	6123      	str	r3, [r4, #16]
 8004a8a:	4615      	mov	r5, r2
 8004a8c:	e7ba      	b.n	8004a04 <_printf_i+0x150>
 8004a8e:	682b      	ldr	r3, [r5, #0]
 8004a90:	1d1a      	adds	r2, r3, #4
 8004a92:	602a      	str	r2, [r5, #0]
 8004a94:	681d      	ldr	r5, [r3, #0]
 8004a96:	6862      	ldr	r2, [r4, #4]
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7fb fba8 	bl	80001f0 <memchr>
 8004aa0:	b108      	cbz	r0, 8004aa6 <_printf_i+0x1f2>
 8004aa2:	1b40      	subs	r0, r0, r5
 8004aa4:	6060      	str	r0, [r4, #4]
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ab0:	e7a8      	b.n	8004a04 <_printf_i+0x150>
 8004ab2:	6923      	ldr	r3, [r4, #16]
 8004ab4:	462a      	mov	r2, r5
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4640      	mov	r0, r8
 8004aba:	47d0      	blx	sl
 8004abc:	3001      	adds	r0, #1
 8004abe:	d0ab      	beq.n	8004a18 <_printf_i+0x164>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	079b      	lsls	r3, r3, #30
 8004ac4:	d413      	bmi.n	8004aee <_printf_i+0x23a>
 8004ac6:	68e0      	ldr	r0, [r4, #12]
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	4298      	cmp	r0, r3
 8004acc:	bfb8      	it	lt
 8004ace:	4618      	movlt	r0, r3
 8004ad0:	e7a4      	b.n	8004a1c <_printf_i+0x168>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	47d0      	blx	sl
 8004adc:	3001      	adds	r0, #1
 8004ade:	d09b      	beq.n	8004a18 <_printf_i+0x164>
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	68e3      	ldr	r3, [r4, #12]
 8004ae4:	9903      	ldr	r1, [sp, #12]
 8004ae6:	1a5b      	subs	r3, r3, r1
 8004ae8:	42ab      	cmp	r3, r5
 8004aea:	dcf2      	bgt.n	8004ad2 <_printf_i+0x21e>
 8004aec:	e7eb      	b.n	8004ac6 <_printf_i+0x212>
 8004aee:	2500      	movs	r5, #0
 8004af0:	f104 0619 	add.w	r6, r4, #25
 8004af4:	e7f5      	b.n	8004ae2 <_printf_i+0x22e>
 8004af6:	bf00      	nop
 8004af8:	080087ae 	.word	0x080087ae
 8004afc:	080087bf 	.word	0x080087bf

08004b00 <siprintf>:
 8004b00:	b40e      	push	{r1, r2, r3}
 8004b02:	b500      	push	{lr}
 8004b04:	b09c      	sub	sp, #112	; 0x70
 8004b06:	ab1d      	add	r3, sp, #116	; 0x74
 8004b08:	9002      	str	r0, [sp, #8]
 8004b0a:	9006      	str	r0, [sp, #24]
 8004b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b10:	4809      	ldr	r0, [pc, #36]	; (8004b38 <siprintf+0x38>)
 8004b12:	9107      	str	r1, [sp, #28]
 8004b14:	9104      	str	r1, [sp, #16]
 8004b16:	4909      	ldr	r1, [pc, #36]	; (8004b3c <siprintf+0x3c>)
 8004b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	a902      	add	r1, sp, #8
 8004b24:	f001 fb76 	bl	8006214 <_svfiprintf_r>
 8004b28:	9b02      	ldr	r3, [sp, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	b01c      	add	sp, #112	; 0x70
 8004b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b34:	b003      	add	sp, #12
 8004b36:	4770      	bx	lr
 8004b38:	20000030 	.word	0x20000030
 8004b3c:	ffff0208 	.word	0xffff0208

08004b40 <quorem>:
 8004b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	690c      	ldr	r4, [r1, #16]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	f2c0 8081 	blt.w	8004c52 <quorem+0x112>
 8004b50:	3c01      	subs	r4, #1
 8004b52:	f101 0814 	add.w	r8, r1, #20
 8004b56:	f100 0514 	add.w	r5, r0, #20
 8004b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b78:	d331      	bcc.n	8004bde <quorem+0x9e>
 8004b7a:	f04f 0e00 	mov.w	lr, #0
 8004b7e:	4640      	mov	r0, r8
 8004b80:	46ac      	mov	ip, r5
 8004b82:	46f2      	mov	sl, lr
 8004b84:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b88:	b293      	uxth	r3, r2
 8004b8a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	ebaa 0303 	sub.w	r3, sl, r3
 8004b98:	f8dc a000 	ldr.w	sl, [ip]
 8004b9c:	0c12      	lsrs	r2, r2, #16
 8004b9e:	fa13 f38a 	uxtah	r3, r3, sl
 8004ba2:	fb06 e202 	mla	r2, r6, r2, lr
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	9b00      	ldr	r3, [sp, #0]
 8004baa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8004bbc:	4581      	cmp	r9, r0
 8004bbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bca:	d2db      	bcs.n	8004b84 <quorem+0x44>
 8004bcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bd0:	b92b      	cbnz	r3, 8004bde <quorem+0x9e>
 8004bd2:	9b01      	ldr	r3, [sp, #4]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	d32e      	bcc.n	8004c3a <quorem+0xfa>
 8004bdc:	613c      	str	r4, [r7, #16]
 8004bde:	4638      	mov	r0, r7
 8004be0:	f001 f8c4 	bl	8005d6c <__mcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	db24      	blt.n	8004c32 <quorem+0xf2>
 8004be8:	3601      	adds	r6, #1
 8004bea:	4628      	mov	r0, r5
 8004bec:	f04f 0c00 	mov.w	ip, #0
 8004bf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bf4:	f8d0 e000 	ldr.w	lr, [r0]
 8004bf8:	b293      	uxth	r3, r2
 8004bfa:	ebac 0303 	sub.w	r3, ip, r3
 8004bfe:	0c12      	lsrs	r2, r2, #16
 8004c00:	fa13 f38e 	uxtah	r3, r3, lr
 8004c04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c12:	45c1      	cmp	r9, r8
 8004c14:	f840 3b04 	str.w	r3, [r0], #4
 8004c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c1c:	d2e8      	bcs.n	8004bf0 <quorem+0xb0>
 8004c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c26:	b922      	cbnz	r2, 8004c32 <quorem+0xf2>
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	d30a      	bcc.n	8004c46 <quorem+0x106>
 8004c30:	613c      	str	r4, [r7, #16]
 8004c32:	4630      	mov	r0, r6
 8004c34:	b003      	add	sp, #12
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	3b04      	subs	r3, #4
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	d1cc      	bne.n	8004bdc <quorem+0x9c>
 8004c42:	3c01      	subs	r4, #1
 8004c44:	e7c7      	b.n	8004bd6 <quorem+0x96>
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d1f0      	bne.n	8004c30 <quorem+0xf0>
 8004c4e:	3c01      	subs	r4, #1
 8004c50:	e7eb      	b.n	8004c2a <quorem+0xea>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7ee      	b.n	8004c34 <quorem+0xf4>
	...

08004c58 <_dtoa_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	ed2d 8b04 	vpush	{d8-d9}
 8004c60:	ec57 6b10 	vmov	r6, r7, d0
 8004c64:	b093      	sub	sp, #76	; 0x4c
 8004c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c6c:	9106      	str	r1, [sp, #24]
 8004c6e:	ee10 aa10 	vmov	sl, s0
 8004c72:	4604      	mov	r4, r0
 8004c74:	9209      	str	r2, [sp, #36]	; 0x24
 8004c76:	930c      	str	r3, [sp, #48]	; 0x30
 8004c78:	46bb      	mov	fp, r7
 8004c7a:	b975      	cbnz	r5, 8004c9a <_dtoa_r+0x42>
 8004c7c:	2010      	movs	r0, #16
 8004c7e:	f000 fddd 	bl	800583c <malloc>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6260      	str	r0, [r4, #36]	; 0x24
 8004c86:	b920      	cbnz	r0, 8004c92 <_dtoa_r+0x3a>
 8004c88:	4ba7      	ldr	r3, [pc, #668]	; (8004f28 <_dtoa_r+0x2d0>)
 8004c8a:	21ea      	movs	r1, #234	; 0xea
 8004c8c:	48a7      	ldr	r0, [pc, #668]	; (8004f2c <_dtoa_r+0x2d4>)
 8004c8e:	f001 fbd1 	bl	8006434 <__assert_func>
 8004c92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c96:	6005      	str	r5, [r0, #0]
 8004c98:	60c5      	str	r5, [r0, #12]
 8004c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	b151      	cbz	r1, 8004cb6 <_dtoa_r+0x5e>
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	604a      	str	r2, [r1, #4]
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	4093      	lsls	r3, r2
 8004ca8:	608b      	str	r3, [r1, #8]
 8004caa:	4620      	mov	r0, r4
 8004cac:	f000 fe1c 	bl	80058e8 <_Bfree>
 8004cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	1e3b      	subs	r3, r7, #0
 8004cb8:	bfaa      	itet	ge
 8004cba:	2300      	movge	r3, #0
 8004cbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004cc0:	f8c8 3000 	strge.w	r3, [r8]
 8004cc4:	4b9a      	ldr	r3, [pc, #616]	; (8004f30 <_dtoa_r+0x2d8>)
 8004cc6:	bfbc      	itt	lt
 8004cc8:	2201      	movlt	r2, #1
 8004cca:	f8c8 2000 	strlt.w	r2, [r8]
 8004cce:	ea33 030b 	bics.w	r3, r3, fp
 8004cd2:	d11b      	bne.n	8004d0c <_dtoa_r+0xb4>
 8004cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ce0:	4333      	orrs	r3, r6
 8004ce2:	f000 8592 	beq.w	800580a <_dtoa_r+0xbb2>
 8004ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ce8:	b963      	cbnz	r3, 8004d04 <_dtoa_r+0xac>
 8004cea:	4b92      	ldr	r3, [pc, #584]	; (8004f34 <_dtoa_r+0x2dc>)
 8004cec:	e022      	b.n	8004d34 <_dtoa_r+0xdc>
 8004cee:	4b92      	ldr	r3, [pc, #584]	; (8004f38 <_dtoa_r+0x2e0>)
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	3308      	adds	r3, #8
 8004cf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	9801      	ldr	r0, [sp, #4]
 8004cfa:	b013      	add	sp, #76	; 0x4c
 8004cfc:	ecbd 8b04 	vpop	{d8-d9}
 8004d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d04:	4b8b      	ldr	r3, [pc, #556]	; (8004f34 <_dtoa_r+0x2dc>)
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	3303      	adds	r3, #3
 8004d0a:	e7f3      	b.n	8004cf4 <_dtoa_r+0x9c>
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2300      	movs	r3, #0
 8004d10:	4650      	mov	r0, sl
 8004d12:	4659      	mov	r1, fp
 8004d14:	f7fb fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d18:	ec4b ab19 	vmov	d9, sl, fp
 8004d1c:	4680      	mov	r8, r0
 8004d1e:	b158      	cbz	r0, 8004d38 <_dtoa_r+0xe0>
 8004d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d22:	2301      	movs	r3, #1
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 856b 	beq.w	8005804 <_dtoa_r+0xbac>
 8004d2e:	4883      	ldr	r0, [pc, #524]	; (8004f3c <_dtoa_r+0x2e4>)
 8004d30:	6018      	str	r0, [r3, #0]
 8004d32:	1e43      	subs	r3, r0, #1
 8004d34:	9301      	str	r3, [sp, #4]
 8004d36:	e7df      	b.n	8004cf8 <_dtoa_r+0xa0>
 8004d38:	ec4b ab10 	vmov	d0, sl, fp
 8004d3c:	aa10      	add	r2, sp, #64	; 0x40
 8004d3e:	a911      	add	r1, sp, #68	; 0x44
 8004d40:	4620      	mov	r0, r4
 8004d42:	f001 f8b9 	bl	8005eb8 <__d2b>
 8004d46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004d4a:	ee08 0a10 	vmov	s16, r0
 8004d4e:	2d00      	cmp	r5, #0
 8004d50:	f000 8084 	beq.w	8004e5c <_dtoa_r+0x204>
 8004d54:	ee19 3a90 	vmov	r3, s19
 8004d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d60:	4656      	mov	r6, sl
 8004d62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004d6e:	4b74      	ldr	r3, [pc, #464]	; (8004f40 <_dtoa_r+0x2e8>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	4630      	mov	r0, r6
 8004d74:	4639      	mov	r1, r7
 8004d76:	f7fb fa8f 	bl	8000298 <__aeabi_dsub>
 8004d7a:	a365      	add	r3, pc, #404	; (adr r3, 8004f10 <_dtoa_r+0x2b8>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fc42 	bl	8000608 <__aeabi_dmul>
 8004d84:	a364      	add	r3, pc, #400	; (adr r3, 8004f18 <_dtoa_r+0x2c0>)
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f7fb fa87 	bl	800029c <__adddf3>
 8004d8e:	4606      	mov	r6, r0
 8004d90:	4628      	mov	r0, r5
 8004d92:	460f      	mov	r7, r1
 8004d94:	f7fb fbce 	bl	8000534 <__aeabi_i2d>
 8004d98:	a361      	add	r3, pc, #388	; (adr r3, 8004f20 <_dtoa_r+0x2c8>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	f7fb fc33 	bl	8000608 <__aeabi_dmul>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	f7fb fa77 	bl	800029c <__adddf3>
 8004dae:	4606      	mov	r6, r0
 8004db0:	460f      	mov	r7, r1
 8004db2:	f7fb fed9 	bl	8000b68 <__aeabi_d2iz>
 8004db6:	2200      	movs	r2, #0
 8004db8:	9000      	str	r0, [sp, #0]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fe94 	bl	8000aec <__aeabi_dcmplt>
 8004dc4:	b150      	cbz	r0, 8004ddc <_dtoa_r+0x184>
 8004dc6:	9800      	ldr	r0, [sp, #0]
 8004dc8:	f7fb fbb4 	bl	8000534 <__aeabi_i2d>
 8004dcc:	4632      	mov	r2, r6
 8004dce:	463b      	mov	r3, r7
 8004dd0:	f7fb fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd4:	b910      	cbnz	r0, 8004ddc <_dtoa_r+0x184>
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	9b00      	ldr	r3, [sp, #0]
 8004dde:	2b16      	cmp	r3, #22
 8004de0:	d85a      	bhi.n	8004e98 <_dtoa_r+0x240>
 8004de2:	9a00      	ldr	r2, [sp, #0]
 8004de4:	4b57      	ldr	r3, [pc, #348]	; (8004f44 <_dtoa_r+0x2ec>)
 8004de6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	ec51 0b19 	vmov	r0, r1, d9
 8004df2:	f7fb fe7b 	bl	8000aec <__aeabi_dcmplt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d050      	beq.n	8004e9c <_dtoa_r+0x244>
 8004dfa:	9b00      	ldr	r3, [sp, #0]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2300      	movs	r3, #0
 8004e02:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e06:	1b5d      	subs	r5, r3, r5
 8004e08:	1e6b      	subs	r3, r5, #1
 8004e0a:	9305      	str	r3, [sp, #20]
 8004e0c:	bf45      	ittet	mi
 8004e0e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004e12:	9304      	strmi	r3, [sp, #16]
 8004e14:	2300      	movpl	r3, #0
 8004e16:	2300      	movmi	r3, #0
 8004e18:	bf4c      	ite	mi
 8004e1a:	9305      	strmi	r3, [sp, #20]
 8004e1c:	9304      	strpl	r3, [sp, #16]
 8004e1e:	9b00      	ldr	r3, [sp, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db3d      	blt.n	8004ea0 <_dtoa_r+0x248>
 8004e24:	9b05      	ldr	r3, [sp, #20]
 8004e26:	9a00      	ldr	r2, [sp, #0]
 8004e28:	920a      	str	r2, [sp, #40]	; 0x28
 8004e2a:	4413      	add	r3, r2
 8004e2c:	9305      	str	r3, [sp, #20]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9307      	str	r3, [sp, #28]
 8004e32:	9b06      	ldr	r3, [sp, #24]
 8004e34:	2b09      	cmp	r3, #9
 8004e36:	f200 8089 	bhi.w	8004f4c <_dtoa_r+0x2f4>
 8004e3a:	2b05      	cmp	r3, #5
 8004e3c:	bfc4      	itt	gt
 8004e3e:	3b04      	subgt	r3, #4
 8004e40:	9306      	strgt	r3, [sp, #24]
 8004e42:	9b06      	ldr	r3, [sp, #24]
 8004e44:	f1a3 0302 	sub.w	r3, r3, #2
 8004e48:	bfcc      	ite	gt
 8004e4a:	2500      	movgt	r5, #0
 8004e4c:	2501      	movle	r5, #1
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	f200 8087 	bhi.w	8004f62 <_dtoa_r+0x30a>
 8004e54:	e8df f003 	tbb	[pc, r3]
 8004e58:	59383a2d 	.word	0x59383a2d
 8004e5c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004e60:	441d      	add	r5, r3
 8004e62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	bfc1      	itttt	gt
 8004e6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e72:	fa0b f303 	lslgt.w	r3, fp, r3
 8004e76:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e7a:	bfda      	itte	le
 8004e7c:	f1c3 0320 	rsble	r3, r3, #32
 8004e80:	fa06 f003 	lslle.w	r0, r6, r3
 8004e84:	4318      	orrgt	r0, r3
 8004e86:	f7fb fb45 	bl	8000514 <__aeabi_ui2d>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e92:	3d01      	subs	r5, #1
 8004e94:	930e      	str	r3, [sp, #56]	; 0x38
 8004e96:	e76a      	b.n	8004d6e <_dtoa_r+0x116>
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e7b2      	b.n	8004e02 <_dtoa_r+0x1aa>
 8004e9c:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e9e:	e7b1      	b.n	8004e04 <_dtoa_r+0x1ac>
 8004ea0:	9b04      	ldr	r3, [sp, #16]
 8004ea2:	9a00      	ldr	r2, [sp, #0]
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	4253      	negs	r3, r2
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	2300      	movs	r3, #0
 8004eae:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb0:	e7bf      	b.n	8004e32 <_dtoa_r+0x1da>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9308      	str	r3, [sp, #32]
 8004eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dc55      	bgt.n	8004f68 <_dtoa_r+0x310>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ec6:	e00c      	b.n	8004ee2 <_dtoa_r+0x28a>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e7f3      	b.n	8004eb4 <_dtoa_r+0x25c>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ed0:	9308      	str	r3, [sp, #32]
 8004ed2:	9b00      	ldr	r3, [sp, #0]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	9302      	str	r3, [sp, #8]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	9303      	str	r3, [sp, #12]
 8004ede:	bfb8      	it	lt
 8004ee0:	2301      	movlt	r3, #1
 8004ee2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	6042      	str	r2, [r0, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	f102 0614 	add.w	r6, r2, #20
 8004eee:	429e      	cmp	r6, r3
 8004ef0:	6841      	ldr	r1, [r0, #4]
 8004ef2:	d93d      	bls.n	8004f70 <_dtoa_r+0x318>
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 fcb7 	bl	8005868 <_Balloc>
 8004efa:	9001      	str	r0, [sp, #4]
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d13b      	bne.n	8004f78 <_dtoa_r+0x320>
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <_dtoa_r+0x2f0>)
 8004f02:	4602      	mov	r2, r0
 8004f04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f08:	e6c0      	b.n	8004c8c <_dtoa_r+0x34>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e7df      	b.n	8004ece <_dtoa_r+0x276>
 8004f0e:	bf00      	nop
 8004f10:	636f4361 	.word	0x636f4361
 8004f14:	3fd287a7 	.word	0x3fd287a7
 8004f18:	8b60c8b3 	.word	0x8b60c8b3
 8004f1c:	3fc68a28 	.word	0x3fc68a28
 8004f20:	509f79fb 	.word	0x509f79fb
 8004f24:	3fd34413 	.word	0x3fd34413
 8004f28:	080087dd 	.word	0x080087dd
 8004f2c:	080087f4 	.word	0x080087f4
 8004f30:	7ff00000 	.word	0x7ff00000
 8004f34:	080087d9 	.word	0x080087d9
 8004f38:	080087d0 	.word	0x080087d0
 8004f3c:	080087ad 	.word	0x080087ad
 8004f40:	3ff80000 	.word	0x3ff80000
 8004f44:	080088e8 	.word	0x080088e8
 8004f48:	0800884f 	.word	0x0800884f
 8004f4c:	2501      	movs	r5, #1
 8004f4e:	2300      	movs	r3, #0
 8004f50:	9306      	str	r3, [sp, #24]
 8004f52:	9508      	str	r5, [sp, #32]
 8004f54:	f04f 33ff 	mov.w	r3, #4294967295
 8004f58:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2312      	movs	r3, #18
 8004f60:	e7b0      	b.n	8004ec4 <_dtoa_r+0x26c>
 8004f62:	2301      	movs	r3, #1
 8004f64:	9308      	str	r3, [sp, #32]
 8004f66:	e7f5      	b.n	8004f54 <_dtoa_r+0x2fc>
 8004f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004f6e:	e7b8      	b.n	8004ee2 <_dtoa_r+0x28a>
 8004f70:	3101      	adds	r1, #1
 8004f72:	6041      	str	r1, [r0, #4]
 8004f74:	0052      	lsls	r2, r2, #1
 8004f76:	e7b8      	b.n	8004eea <_dtoa_r+0x292>
 8004f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f7a:	9a01      	ldr	r2, [sp, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	9b03      	ldr	r3, [sp, #12]
 8004f80:	2b0e      	cmp	r3, #14
 8004f82:	f200 809d 	bhi.w	80050c0 <_dtoa_r+0x468>
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	f000 809a 	beq.w	80050c0 <_dtoa_r+0x468>
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	dd32      	ble.n	8004ff8 <_dtoa_r+0x3a0>
 8004f92:	4ab7      	ldr	r2, [pc, #732]	; (8005270 <_dtoa_r+0x618>)
 8004f94:	f003 030f 	and.w	r3, r3, #15
 8004f98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fa0:	9b00      	ldr	r3, [sp, #0]
 8004fa2:	05d8      	lsls	r0, r3, #23
 8004fa4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004fa8:	d516      	bpl.n	8004fd8 <_dtoa_r+0x380>
 8004faa:	4bb2      	ldr	r3, [pc, #712]	; (8005274 <_dtoa_r+0x61c>)
 8004fac:	ec51 0b19 	vmov	r0, r1, d9
 8004fb0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb4:	f7fb fc52 	bl	800085c <__aeabi_ddiv>
 8004fb8:	f007 070f 	and.w	r7, r7, #15
 8004fbc:	4682      	mov	sl, r0
 8004fbe:	468b      	mov	fp, r1
 8004fc0:	2503      	movs	r5, #3
 8004fc2:	4eac      	ldr	r6, [pc, #688]	; (8005274 <_dtoa_r+0x61c>)
 8004fc4:	b957      	cbnz	r7, 8004fdc <_dtoa_r+0x384>
 8004fc6:	4642      	mov	r2, r8
 8004fc8:	464b      	mov	r3, r9
 8004fca:	4650      	mov	r0, sl
 8004fcc:	4659      	mov	r1, fp
 8004fce:	f7fb fc45 	bl	800085c <__aeabi_ddiv>
 8004fd2:	4682      	mov	sl, r0
 8004fd4:	468b      	mov	fp, r1
 8004fd6:	e028      	b.n	800502a <_dtoa_r+0x3d2>
 8004fd8:	2502      	movs	r5, #2
 8004fda:	e7f2      	b.n	8004fc2 <_dtoa_r+0x36a>
 8004fdc:	07f9      	lsls	r1, r7, #31
 8004fde:	d508      	bpl.n	8004ff2 <_dtoa_r+0x39a>
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fe8:	f7fb fb0e 	bl	8000608 <__aeabi_dmul>
 8004fec:	3501      	adds	r5, #1
 8004fee:	4680      	mov	r8, r0
 8004ff0:	4689      	mov	r9, r1
 8004ff2:	107f      	asrs	r7, r7, #1
 8004ff4:	3608      	adds	r6, #8
 8004ff6:	e7e5      	b.n	8004fc4 <_dtoa_r+0x36c>
 8004ff8:	f000 809b 	beq.w	8005132 <_dtoa_r+0x4da>
 8004ffc:	9b00      	ldr	r3, [sp, #0]
 8004ffe:	4f9d      	ldr	r7, [pc, #628]	; (8005274 <_dtoa_r+0x61c>)
 8005000:	425e      	negs	r6, r3
 8005002:	4b9b      	ldr	r3, [pc, #620]	; (8005270 <_dtoa_r+0x618>)
 8005004:	f006 020f 	and.w	r2, r6, #15
 8005008:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	ec51 0b19 	vmov	r0, r1, d9
 8005014:	f7fb faf8 	bl	8000608 <__aeabi_dmul>
 8005018:	1136      	asrs	r6, r6, #4
 800501a:	4682      	mov	sl, r0
 800501c:	468b      	mov	fp, r1
 800501e:	2300      	movs	r3, #0
 8005020:	2502      	movs	r5, #2
 8005022:	2e00      	cmp	r6, #0
 8005024:	d17a      	bne.n	800511c <_dtoa_r+0x4c4>
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1d3      	bne.n	8004fd2 <_dtoa_r+0x37a>
 800502a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8082 	beq.w	8005136 <_dtoa_r+0x4de>
 8005032:	4b91      	ldr	r3, [pc, #580]	; (8005278 <_dtoa_r+0x620>)
 8005034:	2200      	movs	r2, #0
 8005036:	4650      	mov	r0, sl
 8005038:	4659      	mov	r1, fp
 800503a:	f7fb fd57 	bl	8000aec <__aeabi_dcmplt>
 800503e:	2800      	cmp	r0, #0
 8005040:	d079      	beq.n	8005136 <_dtoa_r+0x4de>
 8005042:	9b03      	ldr	r3, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d076      	beq.n	8005136 <_dtoa_r+0x4de>
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dd36      	ble.n	80050bc <_dtoa_r+0x464>
 800504e:	9b00      	ldr	r3, [sp, #0]
 8005050:	4650      	mov	r0, sl
 8005052:	4659      	mov	r1, fp
 8005054:	1e5f      	subs	r7, r3, #1
 8005056:	2200      	movs	r2, #0
 8005058:	4b88      	ldr	r3, [pc, #544]	; (800527c <_dtoa_r+0x624>)
 800505a:	f7fb fad5 	bl	8000608 <__aeabi_dmul>
 800505e:	9e02      	ldr	r6, [sp, #8]
 8005060:	4682      	mov	sl, r0
 8005062:	468b      	mov	fp, r1
 8005064:	3501      	adds	r5, #1
 8005066:	4628      	mov	r0, r5
 8005068:	f7fb fa64 	bl	8000534 <__aeabi_i2d>
 800506c:	4652      	mov	r2, sl
 800506e:	465b      	mov	r3, fp
 8005070:	f7fb faca 	bl	8000608 <__aeabi_dmul>
 8005074:	4b82      	ldr	r3, [pc, #520]	; (8005280 <_dtoa_r+0x628>)
 8005076:	2200      	movs	r2, #0
 8005078:	f7fb f910 	bl	800029c <__adddf3>
 800507c:	46d0      	mov	r8, sl
 800507e:	46d9      	mov	r9, fp
 8005080:	4682      	mov	sl, r0
 8005082:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005086:	2e00      	cmp	r6, #0
 8005088:	d158      	bne.n	800513c <_dtoa_r+0x4e4>
 800508a:	4b7e      	ldr	r3, [pc, #504]	; (8005284 <_dtoa_r+0x62c>)
 800508c:	2200      	movs	r2, #0
 800508e:	4640      	mov	r0, r8
 8005090:	4649      	mov	r1, r9
 8005092:	f7fb f901 	bl	8000298 <__aeabi_dsub>
 8005096:	4652      	mov	r2, sl
 8005098:	465b      	mov	r3, fp
 800509a:	4680      	mov	r8, r0
 800509c:	4689      	mov	r9, r1
 800509e:	f7fb fd43 	bl	8000b28 <__aeabi_dcmpgt>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	f040 8295 	bne.w	80055d2 <_dtoa_r+0x97a>
 80050a8:	4652      	mov	r2, sl
 80050aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80050ae:	4640      	mov	r0, r8
 80050b0:	4649      	mov	r1, r9
 80050b2:	f7fb fd1b 	bl	8000aec <__aeabi_dcmplt>
 80050b6:	2800      	cmp	r0, #0
 80050b8:	f040 8289 	bne.w	80055ce <_dtoa_r+0x976>
 80050bc:	ec5b ab19 	vmov	sl, fp, d9
 80050c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f2c0 8148 	blt.w	8005358 <_dtoa_r+0x700>
 80050c8:	9a00      	ldr	r2, [sp, #0]
 80050ca:	2a0e      	cmp	r2, #14
 80050cc:	f300 8144 	bgt.w	8005358 <_dtoa_r+0x700>
 80050d0:	4b67      	ldr	r3, [pc, #412]	; (8005270 <_dtoa_r+0x618>)
 80050d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f280 80d5 	bge.w	800528c <_dtoa_r+0x634>
 80050e2:	9b03      	ldr	r3, [sp, #12]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f300 80d1 	bgt.w	800528c <_dtoa_r+0x634>
 80050ea:	f040 826f 	bne.w	80055cc <_dtoa_r+0x974>
 80050ee:	4b65      	ldr	r3, [pc, #404]	; (8005284 <_dtoa_r+0x62c>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	4640      	mov	r0, r8
 80050f4:	4649      	mov	r1, r9
 80050f6:	f7fb fa87 	bl	8000608 <__aeabi_dmul>
 80050fa:	4652      	mov	r2, sl
 80050fc:	465b      	mov	r3, fp
 80050fe:	f7fb fd09 	bl	8000b14 <__aeabi_dcmpge>
 8005102:	9e03      	ldr	r6, [sp, #12]
 8005104:	4637      	mov	r7, r6
 8005106:	2800      	cmp	r0, #0
 8005108:	f040 8245 	bne.w	8005596 <_dtoa_r+0x93e>
 800510c:	9d01      	ldr	r5, [sp, #4]
 800510e:	2331      	movs	r3, #49	; 0x31
 8005110:	f805 3b01 	strb.w	r3, [r5], #1
 8005114:	9b00      	ldr	r3, [sp, #0]
 8005116:	3301      	adds	r3, #1
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	e240      	b.n	800559e <_dtoa_r+0x946>
 800511c:	07f2      	lsls	r2, r6, #31
 800511e:	d505      	bpl.n	800512c <_dtoa_r+0x4d4>
 8005120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005124:	f7fb fa70 	bl	8000608 <__aeabi_dmul>
 8005128:	3501      	adds	r5, #1
 800512a:	2301      	movs	r3, #1
 800512c:	1076      	asrs	r6, r6, #1
 800512e:	3708      	adds	r7, #8
 8005130:	e777      	b.n	8005022 <_dtoa_r+0x3ca>
 8005132:	2502      	movs	r5, #2
 8005134:	e779      	b.n	800502a <_dtoa_r+0x3d2>
 8005136:	9f00      	ldr	r7, [sp, #0]
 8005138:	9e03      	ldr	r6, [sp, #12]
 800513a:	e794      	b.n	8005066 <_dtoa_r+0x40e>
 800513c:	9901      	ldr	r1, [sp, #4]
 800513e:	4b4c      	ldr	r3, [pc, #304]	; (8005270 <_dtoa_r+0x618>)
 8005140:	4431      	add	r1, r6
 8005142:	910d      	str	r1, [sp, #52]	; 0x34
 8005144:	9908      	ldr	r1, [sp, #32]
 8005146:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800514a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800514e:	2900      	cmp	r1, #0
 8005150:	d043      	beq.n	80051da <_dtoa_r+0x582>
 8005152:	494d      	ldr	r1, [pc, #308]	; (8005288 <_dtoa_r+0x630>)
 8005154:	2000      	movs	r0, #0
 8005156:	f7fb fb81 	bl	800085c <__aeabi_ddiv>
 800515a:	4652      	mov	r2, sl
 800515c:	465b      	mov	r3, fp
 800515e:	f7fb f89b 	bl	8000298 <__aeabi_dsub>
 8005162:	9d01      	ldr	r5, [sp, #4]
 8005164:	4682      	mov	sl, r0
 8005166:	468b      	mov	fp, r1
 8005168:	4649      	mov	r1, r9
 800516a:	4640      	mov	r0, r8
 800516c:	f7fb fcfc 	bl	8000b68 <__aeabi_d2iz>
 8005170:	4606      	mov	r6, r0
 8005172:	f7fb f9df 	bl	8000534 <__aeabi_i2d>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	4640      	mov	r0, r8
 800517c:	4649      	mov	r1, r9
 800517e:	f7fb f88b 	bl	8000298 <__aeabi_dsub>
 8005182:	3630      	adds	r6, #48	; 0x30
 8005184:	f805 6b01 	strb.w	r6, [r5], #1
 8005188:	4652      	mov	r2, sl
 800518a:	465b      	mov	r3, fp
 800518c:	4680      	mov	r8, r0
 800518e:	4689      	mov	r9, r1
 8005190:	f7fb fcac 	bl	8000aec <__aeabi_dcmplt>
 8005194:	2800      	cmp	r0, #0
 8005196:	d163      	bne.n	8005260 <_dtoa_r+0x608>
 8005198:	4642      	mov	r2, r8
 800519a:	464b      	mov	r3, r9
 800519c:	4936      	ldr	r1, [pc, #216]	; (8005278 <_dtoa_r+0x620>)
 800519e:	2000      	movs	r0, #0
 80051a0:	f7fb f87a 	bl	8000298 <__aeabi_dsub>
 80051a4:	4652      	mov	r2, sl
 80051a6:	465b      	mov	r3, fp
 80051a8:	f7fb fca0 	bl	8000aec <__aeabi_dcmplt>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	f040 80b5 	bne.w	800531c <_dtoa_r+0x6c4>
 80051b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b4:	429d      	cmp	r5, r3
 80051b6:	d081      	beq.n	80050bc <_dtoa_r+0x464>
 80051b8:	4b30      	ldr	r3, [pc, #192]	; (800527c <_dtoa_r+0x624>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	4650      	mov	r0, sl
 80051be:	4659      	mov	r1, fp
 80051c0:	f7fb fa22 	bl	8000608 <__aeabi_dmul>
 80051c4:	4b2d      	ldr	r3, [pc, #180]	; (800527c <_dtoa_r+0x624>)
 80051c6:	4682      	mov	sl, r0
 80051c8:	468b      	mov	fp, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	2200      	movs	r2, #0
 80051d0:	f7fb fa1a 	bl	8000608 <__aeabi_dmul>
 80051d4:	4680      	mov	r8, r0
 80051d6:	4689      	mov	r9, r1
 80051d8:	e7c6      	b.n	8005168 <_dtoa_r+0x510>
 80051da:	4650      	mov	r0, sl
 80051dc:	4659      	mov	r1, fp
 80051de:	f7fb fa13 	bl	8000608 <__aeabi_dmul>
 80051e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051e4:	9d01      	ldr	r5, [sp, #4]
 80051e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80051e8:	4682      	mov	sl, r0
 80051ea:	468b      	mov	fp, r1
 80051ec:	4649      	mov	r1, r9
 80051ee:	4640      	mov	r0, r8
 80051f0:	f7fb fcba 	bl	8000b68 <__aeabi_d2iz>
 80051f4:	4606      	mov	r6, r0
 80051f6:	f7fb f99d 	bl	8000534 <__aeabi_i2d>
 80051fa:	3630      	adds	r6, #48	; 0x30
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4640      	mov	r0, r8
 8005202:	4649      	mov	r1, r9
 8005204:	f7fb f848 	bl	8000298 <__aeabi_dsub>
 8005208:	f805 6b01 	strb.w	r6, [r5], #1
 800520c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800520e:	429d      	cmp	r5, r3
 8005210:	4680      	mov	r8, r0
 8005212:	4689      	mov	r9, r1
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	d124      	bne.n	8005264 <_dtoa_r+0x60c>
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <_dtoa_r+0x630>)
 800521c:	4650      	mov	r0, sl
 800521e:	4659      	mov	r1, fp
 8005220:	f7fb f83c 	bl	800029c <__adddf3>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	f7fb fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 8005230:	2800      	cmp	r0, #0
 8005232:	d173      	bne.n	800531c <_dtoa_r+0x6c4>
 8005234:	4652      	mov	r2, sl
 8005236:	465b      	mov	r3, fp
 8005238:	4913      	ldr	r1, [pc, #76]	; (8005288 <_dtoa_r+0x630>)
 800523a:	2000      	movs	r0, #0
 800523c:	f7fb f82c 	bl	8000298 <__aeabi_dsub>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4640      	mov	r0, r8
 8005246:	4649      	mov	r1, r9
 8005248:	f7fb fc50 	bl	8000aec <__aeabi_dcmplt>
 800524c:	2800      	cmp	r0, #0
 800524e:	f43f af35 	beq.w	80050bc <_dtoa_r+0x464>
 8005252:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005254:	1e6b      	subs	r3, r5, #1
 8005256:	930f      	str	r3, [sp, #60]	; 0x3c
 8005258:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800525c:	2b30      	cmp	r3, #48	; 0x30
 800525e:	d0f8      	beq.n	8005252 <_dtoa_r+0x5fa>
 8005260:	9700      	str	r7, [sp, #0]
 8005262:	e049      	b.n	80052f8 <_dtoa_r+0x6a0>
 8005264:	4b05      	ldr	r3, [pc, #20]	; (800527c <_dtoa_r+0x624>)
 8005266:	f7fb f9cf 	bl	8000608 <__aeabi_dmul>
 800526a:	4680      	mov	r8, r0
 800526c:	4689      	mov	r9, r1
 800526e:	e7bd      	b.n	80051ec <_dtoa_r+0x594>
 8005270:	080088e8 	.word	0x080088e8
 8005274:	080088c0 	.word	0x080088c0
 8005278:	3ff00000 	.word	0x3ff00000
 800527c:	40240000 	.word	0x40240000
 8005280:	401c0000 	.word	0x401c0000
 8005284:	40140000 	.word	0x40140000
 8005288:	3fe00000 	.word	0x3fe00000
 800528c:	9d01      	ldr	r5, [sp, #4]
 800528e:	4656      	mov	r6, sl
 8005290:	465f      	mov	r7, fp
 8005292:	4642      	mov	r2, r8
 8005294:	464b      	mov	r3, r9
 8005296:	4630      	mov	r0, r6
 8005298:	4639      	mov	r1, r7
 800529a:	f7fb fadf 	bl	800085c <__aeabi_ddiv>
 800529e:	f7fb fc63 	bl	8000b68 <__aeabi_d2iz>
 80052a2:	4682      	mov	sl, r0
 80052a4:	f7fb f946 	bl	8000534 <__aeabi_i2d>
 80052a8:	4642      	mov	r2, r8
 80052aa:	464b      	mov	r3, r9
 80052ac:	f7fb f9ac 	bl	8000608 <__aeabi_dmul>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80052bc:	f7fa ffec 	bl	8000298 <__aeabi_dsub>
 80052c0:	f805 6b01 	strb.w	r6, [r5], #1
 80052c4:	9e01      	ldr	r6, [sp, #4]
 80052c6:	9f03      	ldr	r7, [sp, #12]
 80052c8:	1bae      	subs	r6, r5, r6
 80052ca:	42b7      	cmp	r7, r6
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	d135      	bne.n	800533e <_dtoa_r+0x6e6>
 80052d2:	f7fa ffe3 	bl	800029c <__adddf3>
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	4606      	mov	r6, r0
 80052dc:	460f      	mov	r7, r1
 80052de:	f7fb fc23 	bl	8000b28 <__aeabi_dcmpgt>
 80052e2:	b9d0      	cbnz	r0, 800531a <_dtoa_r+0x6c2>
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	4630      	mov	r0, r6
 80052ea:	4639      	mov	r1, r7
 80052ec:	f7fb fbf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80052f0:	b110      	cbz	r0, 80052f8 <_dtoa_r+0x6a0>
 80052f2:	f01a 0f01 	tst.w	sl, #1
 80052f6:	d110      	bne.n	800531a <_dtoa_r+0x6c2>
 80052f8:	4620      	mov	r0, r4
 80052fa:	ee18 1a10 	vmov	r1, s16
 80052fe:	f000 faf3 	bl	80058e8 <_Bfree>
 8005302:	2300      	movs	r3, #0
 8005304:	9800      	ldr	r0, [sp, #0]
 8005306:	702b      	strb	r3, [r5, #0]
 8005308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800530a:	3001      	adds	r0, #1
 800530c:	6018      	str	r0, [r3, #0]
 800530e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005310:	2b00      	cmp	r3, #0
 8005312:	f43f acf1 	beq.w	8004cf8 <_dtoa_r+0xa0>
 8005316:	601d      	str	r5, [r3, #0]
 8005318:	e4ee      	b.n	8004cf8 <_dtoa_r+0xa0>
 800531a:	9f00      	ldr	r7, [sp, #0]
 800531c:	462b      	mov	r3, r5
 800531e:	461d      	mov	r5, r3
 8005320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005324:	2a39      	cmp	r2, #57	; 0x39
 8005326:	d106      	bne.n	8005336 <_dtoa_r+0x6de>
 8005328:	9a01      	ldr	r2, [sp, #4]
 800532a:	429a      	cmp	r2, r3
 800532c:	d1f7      	bne.n	800531e <_dtoa_r+0x6c6>
 800532e:	9901      	ldr	r1, [sp, #4]
 8005330:	2230      	movs	r2, #48	; 0x30
 8005332:	3701      	adds	r7, #1
 8005334:	700a      	strb	r2, [r1, #0]
 8005336:	781a      	ldrb	r2, [r3, #0]
 8005338:	3201      	adds	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]
 800533c:	e790      	b.n	8005260 <_dtoa_r+0x608>
 800533e:	4ba6      	ldr	r3, [pc, #664]	; (80055d8 <_dtoa_r+0x980>)
 8005340:	2200      	movs	r2, #0
 8005342:	f7fb f961 	bl	8000608 <__aeabi_dmul>
 8005346:	2200      	movs	r2, #0
 8005348:	2300      	movs	r3, #0
 800534a:	4606      	mov	r6, r0
 800534c:	460f      	mov	r7, r1
 800534e:	f7fb fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005352:	2800      	cmp	r0, #0
 8005354:	d09d      	beq.n	8005292 <_dtoa_r+0x63a>
 8005356:	e7cf      	b.n	80052f8 <_dtoa_r+0x6a0>
 8005358:	9a08      	ldr	r2, [sp, #32]
 800535a:	2a00      	cmp	r2, #0
 800535c:	f000 80d7 	beq.w	800550e <_dtoa_r+0x8b6>
 8005360:	9a06      	ldr	r2, [sp, #24]
 8005362:	2a01      	cmp	r2, #1
 8005364:	f300 80ba 	bgt.w	80054dc <_dtoa_r+0x884>
 8005368:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800536a:	2a00      	cmp	r2, #0
 800536c:	f000 80b2 	beq.w	80054d4 <_dtoa_r+0x87c>
 8005370:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005374:	9e07      	ldr	r6, [sp, #28]
 8005376:	9d04      	ldr	r5, [sp, #16]
 8005378:	9a04      	ldr	r2, [sp, #16]
 800537a:	441a      	add	r2, r3
 800537c:	9204      	str	r2, [sp, #16]
 800537e:	9a05      	ldr	r2, [sp, #20]
 8005380:	2101      	movs	r1, #1
 8005382:	441a      	add	r2, r3
 8005384:	4620      	mov	r0, r4
 8005386:	9205      	str	r2, [sp, #20]
 8005388:	f000 fb66 	bl	8005a58 <__i2b>
 800538c:	4607      	mov	r7, r0
 800538e:	2d00      	cmp	r5, #0
 8005390:	dd0c      	ble.n	80053ac <_dtoa_r+0x754>
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd09      	ble.n	80053ac <_dtoa_r+0x754>
 8005398:	42ab      	cmp	r3, r5
 800539a:	9a04      	ldr	r2, [sp, #16]
 800539c:	bfa8      	it	ge
 800539e:	462b      	movge	r3, r5
 80053a0:	1ad2      	subs	r2, r2, r3
 80053a2:	9204      	str	r2, [sp, #16]
 80053a4:	9a05      	ldr	r2, [sp, #20]
 80053a6:	1aed      	subs	r5, r5, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	9305      	str	r3, [sp, #20]
 80053ac:	9b07      	ldr	r3, [sp, #28]
 80053ae:	b31b      	cbz	r3, 80053f8 <_dtoa_r+0x7a0>
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80af 	beq.w	8005516 <_dtoa_r+0x8be>
 80053b8:	2e00      	cmp	r6, #0
 80053ba:	dd13      	ble.n	80053e4 <_dtoa_r+0x78c>
 80053bc:	4639      	mov	r1, r7
 80053be:	4632      	mov	r2, r6
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fc09 	bl	8005bd8 <__pow5mult>
 80053c6:	ee18 2a10 	vmov	r2, s16
 80053ca:	4601      	mov	r1, r0
 80053cc:	4607      	mov	r7, r0
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 fb58 	bl	8005a84 <__multiply>
 80053d4:	ee18 1a10 	vmov	r1, s16
 80053d8:	4680      	mov	r8, r0
 80053da:	4620      	mov	r0, r4
 80053dc:	f000 fa84 	bl	80058e8 <_Bfree>
 80053e0:	ee08 8a10 	vmov	s16, r8
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	1b9a      	subs	r2, r3, r6
 80053e8:	d006      	beq.n	80053f8 <_dtoa_r+0x7a0>
 80053ea:	ee18 1a10 	vmov	r1, s16
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fbf2 	bl	8005bd8 <__pow5mult>
 80053f4:	ee08 0a10 	vmov	s16, r0
 80053f8:	2101      	movs	r1, #1
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 fb2c 	bl	8005a58 <__i2b>
 8005400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005402:	2b00      	cmp	r3, #0
 8005404:	4606      	mov	r6, r0
 8005406:	f340 8088 	ble.w	800551a <_dtoa_r+0x8c2>
 800540a:	461a      	mov	r2, r3
 800540c:	4601      	mov	r1, r0
 800540e:	4620      	mov	r0, r4
 8005410:	f000 fbe2 	bl	8005bd8 <__pow5mult>
 8005414:	9b06      	ldr	r3, [sp, #24]
 8005416:	2b01      	cmp	r3, #1
 8005418:	4606      	mov	r6, r0
 800541a:	f340 8081 	ble.w	8005520 <_dtoa_r+0x8c8>
 800541e:	f04f 0800 	mov.w	r8, #0
 8005422:	6933      	ldr	r3, [r6, #16]
 8005424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005428:	6918      	ldr	r0, [r3, #16]
 800542a:	f000 fac5 	bl	80059b8 <__hi0bits>
 800542e:	f1c0 0020 	rsb	r0, r0, #32
 8005432:	9b05      	ldr	r3, [sp, #20]
 8005434:	4418      	add	r0, r3
 8005436:	f010 001f 	ands.w	r0, r0, #31
 800543a:	f000 8092 	beq.w	8005562 <_dtoa_r+0x90a>
 800543e:	f1c0 0320 	rsb	r3, r0, #32
 8005442:	2b04      	cmp	r3, #4
 8005444:	f340 808a 	ble.w	800555c <_dtoa_r+0x904>
 8005448:	f1c0 001c 	rsb	r0, r0, #28
 800544c:	9b04      	ldr	r3, [sp, #16]
 800544e:	4403      	add	r3, r0
 8005450:	9304      	str	r3, [sp, #16]
 8005452:	9b05      	ldr	r3, [sp, #20]
 8005454:	4403      	add	r3, r0
 8005456:	4405      	add	r5, r0
 8005458:	9305      	str	r3, [sp, #20]
 800545a:	9b04      	ldr	r3, [sp, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dd07      	ble.n	8005470 <_dtoa_r+0x818>
 8005460:	ee18 1a10 	vmov	r1, s16
 8005464:	461a      	mov	r2, r3
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fc10 	bl	8005c8c <__lshift>
 800546c:	ee08 0a10 	vmov	s16, r0
 8005470:	9b05      	ldr	r3, [sp, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dd05      	ble.n	8005482 <_dtoa_r+0x82a>
 8005476:	4631      	mov	r1, r6
 8005478:	461a      	mov	r2, r3
 800547a:	4620      	mov	r0, r4
 800547c:	f000 fc06 	bl	8005c8c <__lshift>
 8005480:	4606      	mov	r6, r0
 8005482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005484:	2b00      	cmp	r3, #0
 8005486:	d06e      	beq.n	8005566 <_dtoa_r+0x90e>
 8005488:	ee18 0a10 	vmov	r0, s16
 800548c:	4631      	mov	r1, r6
 800548e:	f000 fc6d 	bl	8005d6c <__mcmp>
 8005492:	2800      	cmp	r0, #0
 8005494:	da67      	bge.n	8005566 <_dtoa_r+0x90e>
 8005496:	9b00      	ldr	r3, [sp, #0]
 8005498:	3b01      	subs	r3, #1
 800549a:	ee18 1a10 	vmov	r1, s16
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	220a      	movs	r2, #10
 80054a2:	2300      	movs	r3, #0
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa41 	bl	800592c <__multadd>
 80054aa:	9b08      	ldr	r3, [sp, #32]
 80054ac:	ee08 0a10 	vmov	s16, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 81b1 	beq.w	8005818 <_dtoa_r+0xbc0>
 80054b6:	2300      	movs	r3, #0
 80054b8:	4639      	mov	r1, r7
 80054ba:	220a      	movs	r2, #10
 80054bc:	4620      	mov	r0, r4
 80054be:	f000 fa35 	bl	800592c <__multadd>
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	4607      	mov	r7, r0
 80054c8:	f300 808e 	bgt.w	80055e8 <_dtoa_r+0x990>
 80054cc:	9b06      	ldr	r3, [sp, #24]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	dc51      	bgt.n	8005576 <_dtoa_r+0x91e>
 80054d2:	e089      	b.n	80055e8 <_dtoa_r+0x990>
 80054d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054da:	e74b      	b.n	8005374 <_dtoa_r+0x71c>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	1e5e      	subs	r6, r3, #1
 80054e0:	9b07      	ldr	r3, [sp, #28]
 80054e2:	42b3      	cmp	r3, r6
 80054e4:	bfbf      	itttt	lt
 80054e6:	9b07      	ldrlt	r3, [sp, #28]
 80054e8:	9607      	strlt	r6, [sp, #28]
 80054ea:	1af2      	sublt	r2, r6, r3
 80054ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80054ee:	bfb6      	itet	lt
 80054f0:	189b      	addlt	r3, r3, r2
 80054f2:	1b9e      	subge	r6, r3, r6
 80054f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80054f6:	9b03      	ldr	r3, [sp, #12]
 80054f8:	bfb8      	it	lt
 80054fa:	2600      	movlt	r6, #0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bfb7      	itett	lt
 8005500:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005504:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005508:	1a9d      	sublt	r5, r3, r2
 800550a:	2300      	movlt	r3, #0
 800550c:	e734      	b.n	8005378 <_dtoa_r+0x720>
 800550e:	9e07      	ldr	r6, [sp, #28]
 8005510:	9d04      	ldr	r5, [sp, #16]
 8005512:	9f08      	ldr	r7, [sp, #32]
 8005514:	e73b      	b.n	800538e <_dtoa_r+0x736>
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	e767      	b.n	80053ea <_dtoa_r+0x792>
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	2b01      	cmp	r3, #1
 800551e:	dc18      	bgt.n	8005552 <_dtoa_r+0x8fa>
 8005520:	f1ba 0f00 	cmp.w	sl, #0
 8005524:	d115      	bne.n	8005552 <_dtoa_r+0x8fa>
 8005526:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800552a:	b993      	cbnz	r3, 8005552 <_dtoa_r+0x8fa>
 800552c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005530:	0d1b      	lsrs	r3, r3, #20
 8005532:	051b      	lsls	r3, r3, #20
 8005534:	b183      	cbz	r3, 8005558 <_dtoa_r+0x900>
 8005536:	9b04      	ldr	r3, [sp, #16]
 8005538:	3301      	adds	r3, #1
 800553a:	9304      	str	r3, [sp, #16]
 800553c:	9b05      	ldr	r3, [sp, #20]
 800553e:	3301      	adds	r3, #1
 8005540:	9305      	str	r3, [sp, #20]
 8005542:	f04f 0801 	mov.w	r8, #1
 8005546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f af6a 	bne.w	8005422 <_dtoa_r+0x7ca>
 800554e:	2001      	movs	r0, #1
 8005550:	e76f      	b.n	8005432 <_dtoa_r+0x7da>
 8005552:	f04f 0800 	mov.w	r8, #0
 8005556:	e7f6      	b.n	8005546 <_dtoa_r+0x8ee>
 8005558:	4698      	mov	r8, r3
 800555a:	e7f4      	b.n	8005546 <_dtoa_r+0x8ee>
 800555c:	f43f af7d 	beq.w	800545a <_dtoa_r+0x802>
 8005560:	4618      	mov	r0, r3
 8005562:	301c      	adds	r0, #28
 8005564:	e772      	b.n	800544c <_dtoa_r+0x7f4>
 8005566:	9b03      	ldr	r3, [sp, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dc37      	bgt.n	80055dc <_dtoa_r+0x984>
 800556c:	9b06      	ldr	r3, [sp, #24]
 800556e:	2b02      	cmp	r3, #2
 8005570:	dd34      	ble.n	80055dc <_dtoa_r+0x984>
 8005572:	9b03      	ldr	r3, [sp, #12]
 8005574:	9302      	str	r3, [sp, #8]
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	b96b      	cbnz	r3, 8005596 <_dtoa_r+0x93e>
 800557a:	4631      	mov	r1, r6
 800557c:	2205      	movs	r2, #5
 800557e:	4620      	mov	r0, r4
 8005580:	f000 f9d4 	bl	800592c <__multadd>
 8005584:	4601      	mov	r1, r0
 8005586:	4606      	mov	r6, r0
 8005588:	ee18 0a10 	vmov	r0, s16
 800558c:	f000 fbee 	bl	8005d6c <__mcmp>
 8005590:	2800      	cmp	r0, #0
 8005592:	f73f adbb 	bgt.w	800510c <_dtoa_r+0x4b4>
 8005596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005598:	9d01      	ldr	r5, [sp, #4]
 800559a:	43db      	mvns	r3, r3
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	f04f 0800 	mov.w	r8, #0
 80055a2:	4631      	mov	r1, r6
 80055a4:	4620      	mov	r0, r4
 80055a6:	f000 f99f 	bl	80058e8 <_Bfree>
 80055aa:	2f00      	cmp	r7, #0
 80055ac:	f43f aea4 	beq.w	80052f8 <_dtoa_r+0x6a0>
 80055b0:	f1b8 0f00 	cmp.w	r8, #0
 80055b4:	d005      	beq.n	80055c2 <_dtoa_r+0x96a>
 80055b6:	45b8      	cmp	r8, r7
 80055b8:	d003      	beq.n	80055c2 <_dtoa_r+0x96a>
 80055ba:	4641      	mov	r1, r8
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 f993 	bl	80058e8 <_Bfree>
 80055c2:	4639      	mov	r1, r7
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 f98f 	bl	80058e8 <_Bfree>
 80055ca:	e695      	b.n	80052f8 <_dtoa_r+0x6a0>
 80055cc:	2600      	movs	r6, #0
 80055ce:	4637      	mov	r7, r6
 80055d0:	e7e1      	b.n	8005596 <_dtoa_r+0x93e>
 80055d2:	9700      	str	r7, [sp, #0]
 80055d4:	4637      	mov	r7, r6
 80055d6:	e599      	b.n	800510c <_dtoa_r+0x4b4>
 80055d8:	40240000 	.word	0x40240000
 80055dc:	9b08      	ldr	r3, [sp, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 80ca 	beq.w	8005778 <_dtoa_r+0xb20>
 80055e4:	9b03      	ldr	r3, [sp, #12]
 80055e6:	9302      	str	r3, [sp, #8]
 80055e8:	2d00      	cmp	r5, #0
 80055ea:	dd05      	ble.n	80055f8 <_dtoa_r+0x9a0>
 80055ec:	4639      	mov	r1, r7
 80055ee:	462a      	mov	r2, r5
 80055f0:	4620      	mov	r0, r4
 80055f2:	f000 fb4b 	bl	8005c8c <__lshift>
 80055f6:	4607      	mov	r7, r0
 80055f8:	f1b8 0f00 	cmp.w	r8, #0
 80055fc:	d05b      	beq.n	80056b6 <_dtoa_r+0xa5e>
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4620      	mov	r0, r4
 8005602:	f000 f931 	bl	8005868 <_Balloc>
 8005606:	4605      	mov	r5, r0
 8005608:	b928      	cbnz	r0, 8005616 <_dtoa_r+0x9be>
 800560a:	4b87      	ldr	r3, [pc, #540]	; (8005828 <_dtoa_r+0xbd0>)
 800560c:	4602      	mov	r2, r0
 800560e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005612:	f7ff bb3b 	b.w	8004c8c <_dtoa_r+0x34>
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	3202      	adds	r2, #2
 800561a:	0092      	lsls	r2, r2, #2
 800561c:	f107 010c 	add.w	r1, r7, #12
 8005620:	300c      	adds	r0, #12
 8005622:	f000 f913 	bl	800584c <memcpy>
 8005626:	2201      	movs	r2, #1
 8005628:	4629      	mov	r1, r5
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fb2e 	bl	8005c8c <__lshift>
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	f103 0901 	add.w	r9, r3, #1
 8005636:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800563a:	4413      	add	r3, r2
 800563c:	9305      	str	r3, [sp, #20]
 800563e:	f00a 0301 	and.w	r3, sl, #1
 8005642:	46b8      	mov	r8, r7
 8005644:	9304      	str	r3, [sp, #16]
 8005646:	4607      	mov	r7, r0
 8005648:	4631      	mov	r1, r6
 800564a:	ee18 0a10 	vmov	r0, s16
 800564e:	f7ff fa77 	bl	8004b40 <quorem>
 8005652:	4641      	mov	r1, r8
 8005654:	9002      	str	r0, [sp, #8]
 8005656:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800565a:	ee18 0a10 	vmov	r0, s16
 800565e:	f000 fb85 	bl	8005d6c <__mcmp>
 8005662:	463a      	mov	r2, r7
 8005664:	9003      	str	r0, [sp, #12]
 8005666:	4631      	mov	r1, r6
 8005668:	4620      	mov	r0, r4
 800566a:	f000 fb9b 	bl	8005da4 <__mdiff>
 800566e:	68c2      	ldr	r2, [r0, #12]
 8005670:	f109 3bff 	add.w	fp, r9, #4294967295
 8005674:	4605      	mov	r5, r0
 8005676:	bb02      	cbnz	r2, 80056ba <_dtoa_r+0xa62>
 8005678:	4601      	mov	r1, r0
 800567a:	ee18 0a10 	vmov	r0, s16
 800567e:	f000 fb75 	bl	8005d6c <__mcmp>
 8005682:	4602      	mov	r2, r0
 8005684:	4629      	mov	r1, r5
 8005686:	4620      	mov	r0, r4
 8005688:	9207      	str	r2, [sp, #28]
 800568a:	f000 f92d 	bl	80058e8 <_Bfree>
 800568e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005692:	ea43 0102 	orr.w	r1, r3, r2
 8005696:	9b04      	ldr	r3, [sp, #16]
 8005698:	430b      	orrs	r3, r1
 800569a:	464d      	mov	r5, r9
 800569c:	d10f      	bne.n	80056be <_dtoa_r+0xa66>
 800569e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056a2:	d02a      	beq.n	80056fa <_dtoa_r+0xaa2>
 80056a4:	9b03      	ldr	r3, [sp, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	dd02      	ble.n	80056b0 <_dtoa_r+0xa58>
 80056aa:	9b02      	ldr	r3, [sp, #8]
 80056ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80056b0:	f88b a000 	strb.w	sl, [fp]
 80056b4:	e775      	b.n	80055a2 <_dtoa_r+0x94a>
 80056b6:	4638      	mov	r0, r7
 80056b8:	e7ba      	b.n	8005630 <_dtoa_r+0x9d8>
 80056ba:	2201      	movs	r2, #1
 80056bc:	e7e2      	b.n	8005684 <_dtoa_r+0xa2c>
 80056be:	9b03      	ldr	r3, [sp, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	db04      	blt.n	80056ce <_dtoa_r+0xa76>
 80056c4:	9906      	ldr	r1, [sp, #24]
 80056c6:	430b      	orrs	r3, r1
 80056c8:	9904      	ldr	r1, [sp, #16]
 80056ca:	430b      	orrs	r3, r1
 80056cc:	d122      	bne.n	8005714 <_dtoa_r+0xabc>
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	ddee      	ble.n	80056b0 <_dtoa_r+0xa58>
 80056d2:	ee18 1a10 	vmov	r1, s16
 80056d6:	2201      	movs	r2, #1
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 fad7 	bl	8005c8c <__lshift>
 80056de:	4631      	mov	r1, r6
 80056e0:	ee08 0a10 	vmov	s16, r0
 80056e4:	f000 fb42 	bl	8005d6c <__mcmp>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	dc03      	bgt.n	80056f4 <_dtoa_r+0xa9c>
 80056ec:	d1e0      	bne.n	80056b0 <_dtoa_r+0xa58>
 80056ee:	f01a 0f01 	tst.w	sl, #1
 80056f2:	d0dd      	beq.n	80056b0 <_dtoa_r+0xa58>
 80056f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80056f8:	d1d7      	bne.n	80056aa <_dtoa_r+0xa52>
 80056fa:	2339      	movs	r3, #57	; 0x39
 80056fc:	f88b 3000 	strb.w	r3, [fp]
 8005700:	462b      	mov	r3, r5
 8005702:	461d      	mov	r5, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800570a:	2a39      	cmp	r2, #57	; 0x39
 800570c:	d071      	beq.n	80057f2 <_dtoa_r+0xb9a>
 800570e:	3201      	adds	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
 8005712:	e746      	b.n	80055a2 <_dtoa_r+0x94a>
 8005714:	2a00      	cmp	r2, #0
 8005716:	dd07      	ble.n	8005728 <_dtoa_r+0xad0>
 8005718:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800571c:	d0ed      	beq.n	80056fa <_dtoa_r+0xaa2>
 800571e:	f10a 0301 	add.w	r3, sl, #1
 8005722:	f88b 3000 	strb.w	r3, [fp]
 8005726:	e73c      	b.n	80055a2 <_dtoa_r+0x94a>
 8005728:	9b05      	ldr	r3, [sp, #20]
 800572a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800572e:	4599      	cmp	r9, r3
 8005730:	d047      	beq.n	80057c2 <_dtoa_r+0xb6a>
 8005732:	ee18 1a10 	vmov	r1, s16
 8005736:	2300      	movs	r3, #0
 8005738:	220a      	movs	r2, #10
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f8f6 	bl	800592c <__multadd>
 8005740:	45b8      	cmp	r8, r7
 8005742:	ee08 0a10 	vmov	s16, r0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	f04f 020a 	mov.w	r2, #10
 800574e:	4641      	mov	r1, r8
 8005750:	4620      	mov	r0, r4
 8005752:	d106      	bne.n	8005762 <_dtoa_r+0xb0a>
 8005754:	f000 f8ea 	bl	800592c <__multadd>
 8005758:	4680      	mov	r8, r0
 800575a:	4607      	mov	r7, r0
 800575c:	f109 0901 	add.w	r9, r9, #1
 8005760:	e772      	b.n	8005648 <_dtoa_r+0x9f0>
 8005762:	f000 f8e3 	bl	800592c <__multadd>
 8005766:	4639      	mov	r1, r7
 8005768:	4680      	mov	r8, r0
 800576a:	2300      	movs	r3, #0
 800576c:	220a      	movs	r2, #10
 800576e:	4620      	mov	r0, r4
 8005770:	f000 f8dc 	bl	800592c <__multadd>
 8005774:	4607      	mov	r7, r0
 8005776:	e7f1      	b.n	800575c <_dtoa_r+0xb04>
 8005778:	9b03      	ldr	r3, [sp, #12]
 800577a:	9302      	str	r3, [sp, #8]
 800577c:	9d01      	ldr	r5, [sp, #4]
 800577e:	ee18 0a10 	vmov	r0, s16
 8005782:	4631      	mov	r1, r6
 8005784:	f7ff f9dc 	bl	8004b40 <quorem>
 8005788:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800578c:	9b01      	ldr	r3, [sp, #4]
 800578e:	f805 ab01 	strb.w	sl, [r5], #1
 8005792:	1aea      	subs	r2, r5, r3
 8005794:	9b02      	ldr	r3, [sp, #8]
 8005796:	4293      	cmp	r3, r2
 8005798:	dd09      	ble.n	80057ae <_dtoa_r+0xb56>
 800579a:	ee18 1a10 	vmov	r1, s16
 800579e:	2300      	movs	r3, #0
 80057a0:	220a      	movs	r2, #10
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 f8c2 	bl	800592c <__multadd>
 80057a8:	ee08 0a10 	vmov	s16, r0
 80057ac:	e7e7      	b.n	800577e <_dtoa_r+0xb26>
 80057ae:	9b02      	ldr	r3, [sp, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bfc8      	it	gt
 80057b4:	461d      	movgt	r5, r3
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	bfd8      	it	le
 80057ba:	2501      	movle	r5, #1
 80057bc:	441d      	add	r5, r3
 80057be:	f04f 0800 	mov.w	r8, #0
 80057c2:	ee18 1a10 	vmov	r1, s16
 80057c6:	2201      	movs	r2, #1
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fa5f 	bl	8005c8c <__lshift>
 80057ce:	4631      	mov	r1, r6
 80057d0:	ee08 0a10 	vmov	s16, r0
 80057d4:	f000 faca 	bl	8005d6c <__mcmp>
 80057d8:	2800      	cmp	r0, #0
 80057da:	dc91      	bgt.n	8005700 <_dtoa_r+0xaa8>
 80057dc:	d102      	bne.n	80057e4 <_dtoa_r+0xb8c>
 80057de:	f01a 0f01 	tst.w	sl, #1
 80057e2:	d18d      	bne.n	8005700 <_dtoa_r+0xaa8>
 80057e4:	462b      	mov	r3, r5
 80057e6:	461d      	mov	r5, r3
 80057e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057ec:	2a30      	cmp	r2, #48	; 0x30
 80057ee:	d0fa      	beq.n	80057e6 <_dtoa_r+0xb8e>
 80057f0:	e6d7      	b.n	80055a2 <_dtoa_r+0x94a>
 80057f2:	9a01      	ldr	r2, [sp, #4]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d184      	bne.n	8005702 <_dtoa_r+0xaaa>
 80057f8:	9b00      	ldr	r3, [sp, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	2331      	movs	r3, #49	; 0x31
 8005800:	7013      	strb	r3, [r2, #0]
 8005802:	e6ce      	b.n	80055a2 <_dtoa_r+0x94a>
 8005804:	4b09      	ldr	r3, [pc, #36]	; (800582c <_dtoa_r+0xbd4>)
 8005806:	f7ff ba95 	b.w	8004d34 <_dtoa_r+0xdc>
 800580a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f aa6e 	bne.w	8004cee <_dtoa_r+0x96>
 8005812:	4b07      	ldr	r3, [pc, #28]	; (8005830 <_dtoa_r+0xbd8>)
 8005814:	f7ff ba8e 	b.w	8004d34 <_dtoa_r+0xdc>
 8005818:	9b02      	ldr	r3, [sp, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	dcae      	bgt.n	800577c <_dtoa_r+0xb24>
 800581e:	9b06      	ldr	r3, [sp, #24]
 8005820:	2b02      	cmp	r3, #2
 8005822:	f73f aea8 	bgt.w	8005576 <_dtoa_r+0x91e>
 8005826:	e7a9      	b.n	800577c <_dtoa_r+0xb24>
 8005828:	0800884f 	.word	0x0800884f
 800582c:	080087ac 	.word	0x080087ac
 8005830:	080087d0 	.word	0x080087d0

08005834 <_localeconv_r>:
 8005834:	4800      	ldr	r0, [pc, #0]	; (8005838 <_localeconv_r+0x4>)
 8005836:	4770      	bx	lr
 8005838:	20000184 	.word	0x20000184

0800583c <malloc>:
 800583c:	4b02      	ldr	r3, [pc, #8]	; (8005848 <malloc+0xc>)
 800583e:	4601      	mov	r1, r0
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	f000 bc17 	b.w	8006074 <_malloc_r>
 8005846:	bf00      	nop
 8005848:	20000030 	.word	0x20000030

0800584c <memcpy>:
 800584c:	440a      	add	r2, r1
 800584e:	4291      	cmp	r1, r2
 8005850:	f100 33ff 	add.w	r3, r0, #4294967295
 8005854:	d100      	bne.n	8005858 <memcpy+0xc>
 8005856:	4770      	bx	lr
 8005858:	b510      	push	{r4, lr}
 800585a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800585e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005862:	4291      	cmp	r1, r2
 8005864:	d1f9      	bne.n	800585a <memcpy+0xe>
 8005866:	bd10      	pop	{r4, pc}

08005868 <_Balloc>:
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800586c:	4604      	mov	r4, r0
 800586e:	460d      	mov	r5, r1
 8005870:	b976      	cbnz	r6, 8005890 <_Balloc+0x28>
 8005872:	2010      	movs	r0, #16
 8005874:	f7ff ffe2 	bl	800583c <malloc>
 8005878:	4602      	mov	r2, r0
 800587a:	6260      	str	r0, [r4, #36]	; 0x24
 800587c:	b920      	cbnz	r0, 8005888 <_Balloc+0x20>
 800587e:	4b18      	ldr	r3, [pc, #96]	; (80058e0 <_Balloc+0x78>)
 8005880:	4818      	ldr	r0, [pc, #96]	; (80058e4 <_Balloc+0x7c>)
 8005882:	2166      	movs	r1, #102	; 0x66
 8005884:	f000 fdd6 	bl	8006434 <__assert_func>
 8005888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800588c:	6006      	str	r6, [r0, #0]
 800588e:	60c6      	str	r6, [r0, #12]
 8005890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005892:	68f3      	ldr	r3, [r6, #12]
 8005894:	b183      	cbz	r3, 80058b8 <_Balloc+0x50>
 8005896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800589e:	b9b8      	cbnz	r0, 80058d0 <_Balloc+0x68>
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f605 	lsl.w	r6, r1, r5
 80058a6:	1d72      	adds	r2, r6, #5
 80058a8:	0092      	lsls	r2, r2, #2
 80058aa:	4620      	mov	r0, r4
 80058ac:	f000 fb60 	bl	8005f70 <_calloc_r>
 80058b0:	b160      	cbz	r0, 80058cc <_Balloc+0x64>
 80058b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058b6:	e00e      	b.n	80058d6 <_Balloc+0x6e>
 80058b8:	2221      	movs	r2, #33	; 0x21
 80058ba:	2104      	movs	r1, #4
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 fb57 	bl	8005f70 <_calloc_r>
 80058c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c4:	60f0      	str	r0, [r6, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e4      	bne.n	8005896 <_Balloc+0x2e>
 80058cc:	2000      	movs	r0, #0
 80058ce:	bd70      	pop	{r4, r5, r6, pc}
 80058d0:	6802      	ldr	r2, [r0, #0]
 80058d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058d6:	2300      	movs	r3, #0
 80058d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058dc:	e7f7      	b.n	80058ce <_Balloc+0x66>
 80058de:	bf00      	nop
 80058e0:	080087dd 	.word	0x080087dd
 80058e4:	08008860 	.word	0x08008860

080058e8 <_Bfree>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	b976      	cbnz	r6, 8005910 <_Bfree+0x28>
 80058f2:	2010      	movs	r0, #16
 80058f4:	f7ff ffa2 	bl	800583c <malloc>
 80058f8:	4602      	mov	r2, r0
 80058fa:	6268      	str	r0, [r5, #36]	; 0x24
 80058fc:	b920      	cbnz	r0, 8005908 <_Bfree+0x20>
 80058fe:	4b09      	ldr	r3, [pc, #36]	; (8005924 <_Bfree+0x3c>)
 8005900:	4809      	ldr	r0, [pc, #36]	; (8005928 <_Bfree+0x40>)
 8005902:	218a      	movs	r1, #138	; 0x8a
 8005904:	f000 fd96 	bl	8006434 <__assert_func>
 8005908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800590c:	6006      	str	r6, [r0, #0]
 800590e:	60c6      	str	r6, [r0, #12]
 8005910:	b13c      	cbz	r4, 8005922 <_Bfree+0x3a>
 8005912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005914:	6862      	ldr	r2, [r4, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800591c:	6021      	str	r1, [r4, #0]
 800591e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	080087dd 	.word	0x080087dd
 8005928:	08008860 	.word	0x08008860

0800592c <__multadd>:
 800592c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005930:	690d      	ldr	r5, [r1, #16]
 8005932:	4607      	mov	r7, r0
 8005934:	460c      	mov	r4, r1
 8005936:	461e      	mov	r6, r3
 8005938:	f101 0c14 	add.w	ip, r1, #20
 800593c:	2000      	movs	r0, #0
 800593e:	f8dc 3000 	ldr.w	r3, [ip]
 8005942:	b299      	uxth	r1, r3
 8005944:	fb02 6101 	mla	r1, r2, r1, r6
 8005948:	0c1e      	lsrs	r6, r3, #16
 800594a:	0c0b      	lsrs	r3, r1, #16
 800594c:	fb02 3306 	mla	r3, r2, r6, r3
 8005950:	b289      	uxth	r1, r1
 8005952:	3001      	adds	r0, #1
 8005954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005958:	4285      	cmp	r5, r0
 800595a:	f84c 1b04 	str.w	r1, [ip], #4
 800595e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005962:	dcec      	bgt.n	800593e <__multadd+0x12>
 8005964:	b30e      	cbz	r6, 80059aa <__multadd+0x7e>
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	42ab      	cmp	r3, r5
 800596a:	dc19      	bgt.n	80059a0 <__multadd+0x74>
 800596c:	6861      	ldr	r1, [r4, #4]
 800596e:	4638      	mov	r0, r7
 8005970:	3101      	adds	r1, #1
 8005972:	f7ff ff79 	bl	8005868 <_Balloc>
 8005976:	4680      	mov	r8, r0
 8005978:	b928      	cbnz	r0, 8005986 <__multadd+0x5a>
 800597a:	4602      	mov	r2, r0
 800597c:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <__multadd+0x84>)
 800597e:	480d      	ldr	r0, [pc, #52]	; (80059b4 <__multadd+0x88>)
 8005980:	21b5      	movs	r1, #181	; 0xb5
 8005982:	f000 fd57 	bl	8006434 <__assert_func>
 8005986:	6922      	ldr	r2, [r4, #16]
 8005988:	3202      	adds	r2, #2
 800598a:	f104 010c 	add.w	r1, r4, #12
 800598e:	0092      	lsls	r2, r2, #2
 8005990:	300c      	adds	r0, #12
 8005992:	f7ff ff5b 	bl	800584c <memcpy>
 8005996:	4621      	mov	r1, r4
 8005998:	4638      	mov	r0, r7
 800599a:	f7ff ffa5 	bl	80058e8 <_Bfree>
 800599e:	4644      	mov	r4, r8
 80059a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059a4:	3501      	adds	r5, #1
 80059a6:	615e      	str	r6, [r3, #20]
 80059a8:	6125      	str	r5, [r4, #16]
 80059aa:	4620      	mov	r0, r4
 80059ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b0:	0800884f 	.word	0x0800884f
 80059b4:	08008860 	.word	0x08008860

080059b8 <__hi0bits>:
 80059b8:	0c03      	lsrs	r3, r0, #16
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	b9d3      	cbnz	r3, 80059f4 <__hi0bits+0x3c>
 80059be:	0400      	lsls	r0, r0, #16
 80059c0:	2310      	movs	r3, #16
 80059c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80059c6:	bf04      	itt	eq
 80059c8:	0200      	lsleq	r0, r0, #8
 80059ca:	3308      	addeq	r3, #8
 80059cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80059d0:	bf04      	itt	eq
 80059d2:	0100      	lsleq	r0, r0, #4
 80059d4:	3304      	addeq	r3, #4
 80059d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80059da:	bf04      	itt	eq
 80059dc:	0080      	lsleq	r0, r0, #2
 80059de:	3302      	addeq	r3, #2
 80059e0:	2800      	cmp	r0, #0
 80059e2:	db05      	blt.n	80059f0 <__hi0bits+0x38>
 80059e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80059e8:	f103 0301 	add.w	r3, r3, #1
 80059ec:	bf08      	it	eq
 80059ee:	2320      	moveq	r3, #32
 80059f0:	4618      	mov	r0, r3
 80059f2:	4770      	bx	lr
 80059f4:	2300      	movs	r3, #0
 80059f6:	e7e4      	b.n	80059c2 <__hi0bits+0xa>

080059f8 <__lo0bits>:
 80059f8:	6803      	ldr	r3, [r0, #0]
 80059fa:	f013 0207 	ands.w	r2, r3, #7
 80059fe:	4601      	mov	r1, r0
 8005a00:	d00b      	beq.n	8005a1a <__lo0bits+0x22>
 8005a02:	07da      	lsls	r2, r3, #31
 8005a04:	d423      	bmi.n	8005a4e <__lo0bits+0x56>
 8005a06:	0798      	lsls	r0, r3, #30
 8005a08:	bf49      	itett	mi
 8005a0a:	085b      	lsrmi	r3, r3, #1
 8005a0c:	089b      	lsrpl	r3, r3, #2
 8005a0e:	2001      	movmi	r0, #1
 8005a10:	600b      	strmi	r3, [r1, #0]
 8005a12:	bf5c      	itt	pl
 8005a14:	600b      	strpl	r3, [r1, #0]
 8005a16:	2002      	movpl	r0, #2
 8005a18:	4770      	bx	lr
 8005a1a:	b298      	uxth	r0, r3
 8005a1c:	b9a8      	cbnz	r0, 8005a4a <__lo0bits+0x52>
 8005a1e:	0c1b      	lsrs	r3, r3, #16
 8005a20:	2010      	movs	r0, #16
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	b90a      	cbnz	r2, 8005a2a <__lo0bits+0x32>
 8005a26:	3008      	adds	r0, #8
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	071a      	lsls	r2, r3, #28
 8005a2c:	bf04      	itt	eq
 8005a2e:	091b      	lsreq	r3, r3, #4
 8005a30:	3004      	addeq	r0, #4
 8005a32:	079a      	lsls	r2, r3, #30
 8005a34:	bf04      	itt	eq
 8005a36:	089b      	lsreq	r3, r3, #2
 8005a38:	3002      	addeq	r0, #2
 8005a3a:	07da      	lsls	r2, r3, #31
 8005a3c:	d403      	bmi.n	8005a46 <__lo0bits+0x4e>
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	f100 0001 	add.w	r0, r0, #1
 8005a44:	d005      	beq.n	8005a52 <__lo0bits+0x5a>
 8005a46:	600b      	str	r3, [r1, #0]
 8005a48:	4770      	bx	lr
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	e7e9      	b.n	8005a22 <__lo0bits+0x2a>
 8005a4e:	2000      	movs	r0, #0
 8005a50:	4770      	bx	lr
 8005a52:	2020      	movs	r0, #32
 8005a54:	4770      	bx	lr
	...

08005a58 <__i2b>:
 8005a58:	b510      	push	{r4, lr}
 8005a5a:	460c      	mov	r4, r1
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	f7ff ff03 	bl	8005868 <_Balloc>
 8005a62:	4602      	mov	r2, r0
 8005a64:	b928      	cbnz	r0, 8005a72 <__i2b+0x1a>
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <__i2b+0x24>)
 8005a68:	4805      	ldr	r0, [pc, #20]	; (8005a80 <__i2b+0x28>)
 8005a6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005a6e:	f000 fce1 	bl	8006434 <__assert_func>
 8005a72:	2301      	movs	r3, #1
 8005a74:	6144      	str	r4, [r0, #20]
 8005a76:	6103      	str	r3, [r0, #16]
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	bf00      	nop
 8005a7c:	0800884f 	.word	0x0800884f
 8005a80:	08008860 	.word	0x08008860

08005a84 <__multiply>:
 8005a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a88:	4691      	mov	r9, r2
 8005a8a:	690a      	ldr	r2, [r1, #16]
 8005a8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	bfb8      	it	lt
 8005a94:	460b      	movlt	r3, r1
 8005a96:	460c      	mov	r4, r1
 8005a98:	bfbc      	itt	lt
 8005a9a:	464c      	movlt	r4, r9
 8005a9c:	4699      	movlt	r9, r3
 8005a9e:	6927      	ldr	r7, [r4, #16]
 8005aa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005aa4:	68a3      	ldr	r3, [r4, #8]
 8005aa6:	6861      	ldr	r1, [r4, #4]
 8005aa8:	eb07 060a 	add.w	r6, r7, sl
 8005aac:	42b3      	cmp	r3, r6
 8005aae:	b085      	sub	sp, #20
 8005ab0:	bfb8      	it	lt
 8005ab2:	3101      	addlt	r1, #1
 8005ab4:	f7ff fed8 	bl	8005868 <_Balloc>
 8005ab8:	b930      	cbnz	r0, 8005ac8 <__multiply+0x44>
 8005aba:	4602      	mov	r2, r0
 8005abc:	4b44      	ldr	r3, [pc, #272]	; (8005bd0 <__multiply+0x14c>)
 8005abe:	4845      	ldr	r0, [pc, #276]	; (8005bd4 <__multiply+0x150>)
 8005ac0:	f240 115d 	movw	r1, #349	; 0x15d
 8005ac4:	f000 fcb6 	bl	8006434 <__assert_func>
 8005ac8:	f100 0514 	add.w	r5, r0, #20
 8005acc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4543      	cmp	r3, r8
 8005ad6:	d321      	bcc.n	8005b1c <__multiply+0x98>
 8005ad8:	f104 0314 	add.w	r3, r4, #20
 8005adc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ae0:	f109 0314 	add.w	r3, r9, #20
 8005ae4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ae8:	9202      	str	r2, [sp, #8]
 8005aea:	1b3a      	subs	r2, r7, r4
 8005aec:	3a15      	subs	r2, #21
 8005aee:	f022 0203 	bic.w	r2, r2, #3
 8005af2:	3204      	adds	r2, #4
 8005af4:	f104 0115 	add.w	r1, r4, #21
 8005af8:	428f      	cmp	r7, r1
 8005afa:	bf38      	it	cc
 8005afc:	2204      	movcc	r2, #4
 8005afe:	9201      	str	r2, [sp, #4]
 8005b00:	9a02      	ldr	r2, [sp, #8]
 8005b02:	9303      	str	r3, [sp, #12]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d80c      	bhi.n	8005b22 <__multiply+0x9e>
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	dd03      	ble.n	8005b14 <__multiply+0x90>
 8005b0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05a      	beq.n	8005bca <__multiply+0x146>
 8005b14:	6106      	str	r6, [r0, #16]
 8005b16:	b005      	add	sp, #20
 8005b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1c:	f843 2b04 	str.w	r2, [r3], #4
 8005b20:	e7d8      	b.n	8005ad4 <__multiply+0x50>
 8005b22:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b26:	f1ba 0f00 	cmp.w	sl, #0
 8005b2a:	d024      	beq.n	8005b76 <__multiply+0xf2>
 8005b2c:	f104 0e14 	add.w	lr, r4, #20
 8005b30:	46a9      	mov	r9, r5
 8005b32:	f04f 0c00 	mov.w	ip, #0
 8005b36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b3a:	f8d9 1000 	ldr.w	r1, [r9]
 8005b3e:	fa1f fb82 	uxth.w	fp, r2
 8005b42:	b289      	uxth	r1, r1
 8005b44:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b50:	4461      	add	r1, ip
 8005b52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b56:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b5e:	b289      	uxth	r1, r1
 8005b60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005b64:	4577      	cmp	r7, lr
 8005b66:	f849 1b04 	str.w	r1, [r9], #4
 8005b6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b6e:	d8e2      	bhi.n	8005b36 <__multiply+0xb2>
 8005b70:	9a01      	ldr	r2, [sp, #4]
 8005b72:	f845 c002 	str.w	ip, [r5, r2]
 8005b76:	9a03      	ldr	r2, [sp, #12]
 8005b78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005b7c:	3304      	adds	r3, #4
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	d020      	beq.n	8005bc6 <__multiply+0x142>
 8005b84:	6829      	ldr	r1, [r5, #0]
 8005b86:	f104 0c14 	add.w	ip, r4, #20
 8005b8a:	46ae      	mov	lr, r5
 8005b8c:	f04f 0a00 	mov.w	sl, #0
 8005b90:	f8bc b000 	ldrh.w	fp, [ip]
 8005b94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005b98:	fb09 220b 	mla	r2, r9, fp, r2
 8005b9c:	4492      	add	sl, r2
 8005b9e:	b289      	uxth	r1, r1
 8005ba0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ba4:	f84e 1b04 	str.w	r1, [lr], #4
 8005ba8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bac:	f8be 1000 	ldrh.w	r1, [lr]
 8005bb0:	0c12      	lsrs	r2, r2, #16
 8005bb2:	fb09 1102 	mla	r1, r9, r2, r1
 8005bb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005bba:	4567      	cmp	r7, ip
 8005bbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bc0:	d8e6      	bhi.n	8005b90 <__multiply+0x10c>
 8005bc2:	9a01      	ldr	r2, [sp, #4]
 8005bc4:	50a9      	str	r1, [r5, r2]
 8005bc6:	3504      	adds	r5, #4
 8005bc8:	e79a      	b.n	8005b00 <__multiply+0x7c>
 8005bca:	3e01      	subs	r6, #1
 8005bcc:	e79c      	b.n	8005b08 <__multiply+0x84>
 8005bce:	bf00      	nop
 8005bd0:	0800884f 	.word	0x0800884f
 8005bd4:	08008860 	.word	0x08008860

08005bd8 <__pow5mult>:
 8005bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bdc:	4615      	mov	r5, r2
 8005bde:	f012 0203 	ands.w	r2, r2, #3
 8005be2:	4606      	mov	r6, r0
 8005be4:	460f      	mov	r7, r1
 8005be6:	d007      	beq.n	8005bf8 <__pow5mult+0x20>
 8005be8:	4c25      	ldr	r4, [pc, #148]	; (8005c80 <__pow5mult+0xa8>)
 8005bea:	3a01      	subs	r2, #1
 8005bec:	2300      	movs	r3, #0
 8005bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bf2:	f7ff fe9b 	bl	800592c <__multadd>
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	10ad      	asrs	r5, r5, #2
 8005bfa:	d03d      	beq.n	8005c78 <__pow5mult+0xa0>
 8005bfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005bfe:	b97c      	cbnz	r4, 8005c20 <__pow5mult+0x48>
 8005c00:	2010      	movs	r0, #16
 8005c02:	f7ff fe1b 	bl	800583c <malloc>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6270      	str	r0, [r6, #36]	; 0x24
 8005c0a:	b928      	cbnz	r0, 8005c18 <__pow5mult+0x40>
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <__pow5mult+0xac>)
 8005c0e:	481e      	ldr	r0, [pc, #120]	; (8005c88 <__pow5mult+0xb0>)
 8005c10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c14:	f000 fc0e 	bl	8006434 <__assert_func>
 8005c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c1c:	6004      	str	r4, [r0, #0]
 8005c1e:	60c4      	str	r4, [r0, #12]
 8005c20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c28:	b94c      	cbnz	r4, 8005c3e <__pow5mult+0x66>
 8005c2a:	f240 2171 	movw	r1, #625	; 0x271
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7ff ff12 	bl	8005a58 <__i2b>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	6003      	str	r3, [r0, #0]
 8005c3e:	f04f 0900 	mov.w	r9, #0
 8005c42:	07eb      	lsls	r3, r5, #31
 8005c44:	d50a      	bpl.n	8005c5c <__pow5mult+0x84>
 8005c46:	4639      	mov	r1, r7
 8005c48:	4622      	mov	r2, r4
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ff1a 	bl	8005a84 <__multiply>
 8005c50:	4639      	mov	r1, r7
 8005c52:	4680      	mov	r8, r0
 8005c54:	4630      	mov	r0, r6
 8005c56:	f7ff fe47 	bl	80058e8 <_Bfree>
 8005c5a:	4647      	mov	r7, r8
 8005c5c:	106d      	asrs	r5, r5, #1
 8005c5e:	d00b      	beq.n	8005c78 <__pow5mult+0xa0>
 8005c60:	6820      	ldr	r0, [r4, #0]
 8005c62:	b938      	cbnz	r0, 8005c74 <__pow5mult+0x9c>
 8005c64:	4622      	mov	r2, r4
 8005c66:	4621      	mov	r1, r4
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff ff0b 	bl	8005a84 <__multiply>
 8005c6e:	6020      	str	r0, [r4, #0]
 8005c70:	f8c0 9000 	str.w	r9, [r0]
 8005c74:	4604      	mov	r4, r0
 8005c76:	e7e4      	b.n	8005c42 <__pow5mult+0x6a>
 8005c78:	4638      	mov	r0, r7
 8005c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7e:	bf00      	nop
 8005c80:	080089b0 	.word	0x080089b0
 8005c84:	080087dd 	.word	0x080087dd
 8005c88:	08008860 	.word	0x08008860

08005c8c <__lshift>:
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c90:	460c      	mov	r4, r1
 8005c92:	6849      	ldr	r1, [r1, #4]
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c9a:	68a3      	ldr	r3, [r4, #8]
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	4691      	mov	r9, r2
 8005ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ca4:	f108 0601 	add.w	r6, r8, #1
 8005ca8:	42b3      	cmp	r3, r6
 8005caa:	db0b      	blt.n	8005cc4 <__lshift+0x38>
 8005cac:	4638      	mov	r0, r7
 8005cae:	f7ff fddb 	bl	8005868 <_Balloc>
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b948      	cbnz	r0, 8005cca <__lshift+0x3e>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <__lshift+0xd8>)
 8005cba:	482b      	ldr	r0, [pc, #172]	; (8005d68 <__lshift+0xdc>)
 8005cbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005cc0:	f000 fbb8 	bl	8006434 <__assert_func>
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__lshift+0x1c>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	f100 0114 	add.w	r1, r0, #20
 8005cd0:	f100 0210 	add.w	r2, r0, #16
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	4553      	cmp	r3, sl
 8005cd8:	db37      	blt.n	8005d4a <__lshift+0xbe>
 8005cda:	6920      	ldr	r0, [r4, #16]
 8005cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ce0:	f104 0314 	add.w	r3, r4, #20
 8005ce4:	f019 091f 	ands.w	r9, r9, #31
 8005ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005cf0:	d02f      	beq.n	8005d52 <__lshift+0xc6>
 8005cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8005cf6:	468a      	mov	sl, r1
 8005cf8:	f04f 0c00 	mov.w	ip, #0
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	fa02 f209 	lsl.w	r2, r2, r9
 8005d02:	ea42 020c 	orr.w	r2, r2, ip
 8005d06:	f84a 2b04 	str.w	r2, [sl], #4
 8005d0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0e:	4298      	cmp	r0, r3
 8005d10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d14:	d8f2      	bhi.n	8005cfc <__lshift+0x70>
 8005d16:	1b03      	subs	r3, r0, r4
 8005d18:	3b15      	subs	r3, #21
 8005d1a:	f023 0303 	bic.w	r3, r3, #3
 8005d1e:	3304      	adds	r3, #4
 8005d20:	f104 0215 	add.w	r2, r4, #21
 8005d24:	4290      	cmp	r0, r2
 8005d26:	bf38      	it	cc
 8005d28:	2304      	movcc	r3, #4
 8005d2a:	f841 c003 	str.w	ip, [r1, r3]
 8005d2e:	f1bc 0f00 	cmp.w	ip, #0
 8005d32:	d001      	beq.n	8005d38 <__lshift+0xac>
 8005d34:	f108 0602 	add.w	r6, r8, #2
 8005d38:	3e01      	subs	r6, #1
 8005d3a:	4638      	mov	r0, r7
 8005d3c:	612e      	str	r6, [r5, #16]
 8005d3e:	4621      	mov	r1, r4
 8005d40:	f7ff fdd2 	bl	80058e8 <_Bfree>
 8005d44:	4628      	mov	r0, r5
 8005d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d4e:	3301      	adds	r3, #1
 8005d50:	e7c1      	b.n	8005cd6 <__lshift+0x4a>
 8005d52:	3904      	subs	r1, #4
 8005d54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d58:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d5c:	4298      	cmp	r0, r3
 8005d5e:	d8f9      	bhi.n	8005d54 <__lshift+0xc8>
 8005d60:	e7ea      	b.n	8005d38 <__lshift+0xac>
 8005d62:	bf00      	nop
 8005d64:	0800884f 	.word	0x0800884f
 8005d68:	08008860 	.word	0x08008860

08005d6c <__mcmp>:
 8005d6c:	b530      	push	{r4, r5, lr}
 8005d6e:	6902      	ldr	r2, [r0, #16]
 8005d70:	690c      	ldr	r4, [r1, #16]
 8005d72:	1b12      	subs	r2, r2, r4
 8005d74:	d10e      	bne.n	8005d94 <__mcmp+0x28>
 8005d76:	f100 0314 	add.w	r3, r0, #20
 8005d7a:	3114      	adds	r1, #20
 8005d7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005d80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005d84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005d88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005d8c:	42a5      	cmp	r5, r4
 8005d8e:	d003      	beq.n	8005d98 <__mcmp+0x2c>
 8005d90:	d305      	bcc.n	8005d9e <__mcmp+0x32>
 8005d92:	2201      	movs	r2, #1
 8005d94:	4610      	mov	r0, r2
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	4283      	cmp	r3, r0
 8005d9a:	d3f3      	bcc.n	8005d84 <__mcmp+0x18>
 8005d9c:	e7fa      	b.n	8005d94 <__mcmp+0x28>
 8005d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8005da2:	e7f7      	b.n	8005d94 <__mcmp+0x28>

08005da4 <__mdiff>:
 8005da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	460c      	mov	r4, r1
 8005daa:	4606      	mov	r6, r0
 8005dac:	4611      	mov	r1, r2
 8005dae:	4620      	mov	r0, r4
 8005db0:	4690      	mov	r8, r2
 8005db2:	f7ff ffdb 	bl	8005d6c <__mcmp>
 8005db6:	1e05      	subs	r5, r0, #0
 8005db8:	d110      	bne.n	8005ddc <__mdiff+0x38>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	f7ff fd53 	bl	8005868 <_Balloc>
 8005dc2:	b930      	cbnz	r0, 8005dd2 <__mdiff+0x2e>
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	; (8005eb0 <__mdiff+0x10c>)
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	f240 2132 	movw	r1, #562	; 0x232
 8005dcc:	4839      	ldr	r0, [pc, #228]	; (8005eb4 <__mdiff+0x110>)
 8005dce:	f000 fb31 	bl	8006434 <__assert_func>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ddc:	bfa4      	itt	ge
 8005dde:	4643      	movge	r3, r8
 8005de0:	46a0      	movge	r8, r4
 8005de2:	4630      	mov	r0, r6
 8005de4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005de8:	bfa6      	itte	ge
 8005dea:	461c      	movge	r4, r3
 8005dec:	2500      	movge	r5, #0
 8005dee:	2501      	movlt	r5, #1
 8005df0:	f7ff fd3a 	bl	8005868 <_Balloc>
 8005df4:	b920      	cbnz	r0, 8005e00 <__mdiff+0x5c>
 8005df6:	4b2e      	ldr	r3, [pc, #184]	; (8005eb0 <__mdiff+0x10c>)
 8005df8:	4602      	mov	r2, r0
 8005dfa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005dfe:	e7e5      	b.n	8005dcc <__mdiff+0x28>
 8005e00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e04:	6926      	ldr	r6, [r4, #16]
 8005e06:	60c5      	str	r5, [r0, #12]
 8005e08:	f104 0914 	add.w	r9, r4, #20
 8005e0c:	f108 0514 	add.w	r5, r8, #20
 8005e10:	f100 0e14 	add.w	lr, r0, #20
 8005e14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e1c:	f108 0210 	add.w	r2, r8, #16
 8005e20:	46f2      	mov	sl, lr
 8005e22:	2100      	movs	r1, #0
 8005e24:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e2c:	fa1f f883 	uxth.w	r8, r3
 8005e30:	fa11 f18b 	uxtah	r1, r1, fp
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	eba1 0808 	sub.w	r8, r1, r8
 8005e3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e42:	fa1f f888 	uxth.w	r8, r8
 8005e46:	1419      	asrs	r1, r3, #16
 8005e48:	454e      	cmp	r6, r9
 8005e4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e4e:	f84a 3b04 	str.w	r3, [sl], #4
 8005e52:	d8e7      	bhi.n	8005e24 <__mdiff+0x80>
 8005e54:	1b33      	subs	r3, r6, r4
 8005e56:	3b15      	subs	r3, #21
 8005e58:	f023 0303 	bic.w	r3, r3, #3
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	3415      	adds	r4, #21
 8005e60:	42a6      	cmp	r6, r4
 8005e62:	bf38      	it	cc
 8005e64:	2304      	movcc	r3, #4
 8005e66:	441d      	add	r5, r3
 8005e68:	4473      	add	r3, lr
 8005e6a:	469e      	mov	lr, r3
 8005e6c:	462e      	mov	r6, r5
 8005e6e:	4566      	cmp	r6, ip
 8005e70:	d30e      	bcc.n	8005e90 <__mdiff+0xec>
 8005e72:	f10c 0203 	add.w	r2, ip, #3
 8005e76:	1b52      	subs	r2, r2, r5
 8005e78:	f022 0203 	bic.w	r2, r2, #3
 8005e7c:	3d03      	subs	r5, #3
 8005e7e:	45ac      	cmp	ip, r5
 8005e80:	bf38      	it	cc
 8005e82:	2200      	movcc	r2, #0
 8005e84:	441a      	add	r2, r3
 8005e86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005e8a:	b17b      	cbz	r3, 8005eac <__mdiff+0x108>
 8005e8c:	6107      	str	r7, [r0, #16]
 8005e8e:	e7a3      	b.n	8005dd8 <__mdiff+0x34>
 8005e90:	f856 8b04 	ldr.w	r8, [r6], #4
 8005e94:	fa11 f288 	uxtah	r2, r1, r8
 8005e98:	1414      	asrs	r4, r2, #16
 8005e9a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005ea4:	f84e 2b04 	str.w	r2, [lr], #4
 8005ea8:	1421      	asrs	r1, r4, #16
 8005eaa:	e7e0      	b.n	8005e6e <__mdiff+0xca>
 8005eac:	3f01      	subs	r7, #1
 8005eae:	e7ea      	b.n	8005e86 <__mdiff+0xe2>
 8005eb0:	0800884f 	.word	0x0800884f
 8005eb4:	08008860 	.word	0x08008860

08005eb8 <__d2b>:
 8005eb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ebc:	4689      	mov	r9, r1
 8005ebe:	2101      	movs	r1, #1
 8005ec0:	ec57 6b10 	vmov	r6, r7, d0
 8005ec4:	4690      	mov	r8, r2
 8005ec6:	f7ff fccf 	bl	8005868 <_Balloc>
 8005eca:	4604      	mov	r4, r0
 8005ecc:	b930      	cbnz	r0, 8005edc <__d2b+0x24>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <__d2b+0xb0>)
 8005ed2:	4826      	ldr	r0, [pc, #152]	; (8005f6c <__d2b+0xb4>)
 8005ed4:	f240 310a 	movw	r1, #778	; 0x30a
 8005ed8:	f000 faac 	bl	8006434 <__assert_func>
 8005edc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005ee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ee4:	bb35      	cbnz	r5, 8005f34 <__d2b+0x7c>
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	d028      	beq.n	8005f3e <__d2b+0x86>
 8005eec:	4668      	mov	r0, sp
 8005eee:	9600      	str	r6, [sp, #0]
 8005ef0:	f7ff fd82 	bl	80059f8 <__lo0bits>
 8005ef4:	9900      	ldr	r1, [sp, #0]
 8005ef6:	b300      	cbz	r0, 8005f3a <__d2b+0x82>
 8005ef8:	9a01      	ldr	r2, [sp, #4]
 8005efa:	f1c0 0320 	rsb	r3, r0, #32
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	430b      	orrs	r3, r1
 8005f04:	40c2      	lsrs	r2, r0
 8005f06:	6163      	str	r3, [r4, #20]
 8005f08:	9201      	str	r2, [sp, #4]
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	61a3      	str	r3, [r4, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bf14      	ite	ne
 8005f12:	2202      	movne	r2, #2
 8005f14:	2201      	moveq	r2, #1
 8005f16:	6122      	str	r2, [r4, #16]
 8005f18:	b1d5      	cbz	r5, 8005f50 <__d2b+0x98>
 8005f1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f1e:	4405      	add	r5, r0
 8005f20:	f8c9 5000 	str.w	r5, [r9]
 8005f24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f28:	f8c8 0000 	str.w	r0, [r8]
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	b003      	add	sp, #12
 8005f30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f38:	e7d5      	b.n	8005ee6 <__d2b+0x2e>
 8005f3a:	6161      	str	r1, [r4, #20]
 8005f3c:	e7e5      	b.n	8005f0a <__d2b+0x52>
 8005f3e:	a801      	add	r0, sp, #4
 8005f40:	f7ff fd5a 	bl	80059f8 <__lo0bits>
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	6163      	str	r3, [r4, #20]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	6122      	str	r2, [r4, #16]
 8005f4c:	3020      	adds	r0, #32
 8005f4e:	e7e3      	b.n	8005f18 <__d2b+0x60>
 8005f50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f58:	f8c9 0000 	str.w	r0, [r9]
 8005f5c:	6918      	ldr	r0, [r3, #16]
 8005f5e:	f7ff fd2b 	bl	80059b8 <__hi0bits>
 8005f62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f66:	e7df      	b.n	8005f28 <__d2b+0x70>
 8005f68:	0800884f 	.word	0x0800884f
 8005f6c:	08008860 	.word	0x08008860

08005f70 <_calloc_r>:
 8005f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f72:	fba1 2402 	umull	r2, r4, r1, r2
 8005f76:	b94c      	cbnz	r4, 8005f8c <_calloc_r+0x1c>
 8005f78:	4611      	mov	r1, r2
 8005f7a:	9201      	str	r2, [sp, #4]
 8005f7c:	f000 f87a 	bl	8006074 <_malloc_r>
 8005f80:	9a01      	ldr	r2, [sp, #4]
 8005f82:	4605      	mov	r5, r0
 8005f84:	b930      	cbnz	r0, 8005f94 <_calloc_r+0x24>
 8005f86:	4628      	mov	r0, r5
 8005f88:	b003      	add	sp, #12
 8005f8a:	bd30      	pop	{r4, r5, pc}
 8005f8c:	220c      	movs	r2, #12
 8005f8e:	6002      	str	r2, [r0, #0]
 8005f90:	2500      	movs	r5, #0
 8005f92:	e7f8      	b.n	8005f86 <_calloc_r+0x16>
 8005f94:	4621      	mov	r1, r4
 8005f96:	f7fe f941 	bl	800421c <memset>
 8005f9a:	e7f4      	b.n	8005f86 <_calloc_r+0x16>

08005f9c <_free_r>:
 8005f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f9e:	2900      	cmp	r1, #0
 8005fa0:	d044      	beq.n	800602c <_free_r+0x90>
 8005fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fa6:	9001      	str	r0, [sp, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f1a1 0404 	sub.w	r4, r1, #4
 8005fae:	bfb8      	it	lt
 8005fb0:	18e4      	addlt	r4, r4, r3
 8005fb2:	f000 fa9b 	bl	80064ec <__malloc_lock>
 8005fb6:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <_free_r+0x94>)
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	6813      	ldr	r3, [r2, #0]
 8005fbc:	b933      	cbnz	r3, 8005fcc <_free_r+0x30>
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	6014      	str	r4, [r2, #0]
 8005fc2:	b003      	add	sp, #12
 8005fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fc8:	f000 ba96 	b.w	80064f8 <__malloc_unlock>
 8005fcc:	42a3      	cmp	r3, r4
 8005fce:	d908      	bls.n	8005fe2 <_free_r+0x46>
 8005fd0:	6825      	ldr	r5, [r4, #0]
 8005fd2:	1961      	adds	r1, r4, r5
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf01      	itttt	eq
 8005fd8:	6819      	ldreq	r1, [r3, #0]
 8005fda:	685b      	ldreq	r3, [r3, #4]
 8005fdc:	1949      	addeq	r1, r1, r5
 8005fde:	6021      	streq	r1, [r4, #0]
 8005fe0:	e7ed      	b.n	8005fbe <_free_r+0x22>
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b10b      	cbz	r3, 8005fec <_free_r+0x50>
 8005fe8:	42a3      	cmp	r3, r4
 8005fea:	d9fa      	bls.n	8005fe2 <_free_r+0x46>
 8005fec:	6811      	ldr	r1, [r2, #0]
 8005fee:	1855      	adds	r5, r2, r1
 8005ff0:	42a5      	cmp	r5, r4
 8005ff2:	d10b      	bne.n	800600c <_free_r+0x70>
 8005ff4:	6824      	ldr	r4, [r4, #0]
 8005ff6:	4421      	add	r1, r4
 8005ff8:	1854      	adds	r4, r2, r1
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	6011      	str	r1, [r2, #0]
 8005ffe:	d1e0      	bne.n	8005fc2 <_free_r+0x26>
 8006000:	681c      	ldr	r4, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	4421      	add	r1, r4
 8006008:	6011      	str	r1, [r2, #0]
 800600a:	e7da      	b.n	8005fc2 <_free_r+0x26>
 800600c:	d902      	bls.n	8006014 <_free_r+0x78>
 800600e:	230c      	movs	r3, #12
 8006010:	6003      	str	r3, [r0, #0]
 8006012:	e7d6      	b.n	8005fc2 <_free_r+0x26>
 8006014:	6825      	ldr	r5, [r4, #0]
 8006016:	1961      	adds	r1, r4, r5
 8006018:	428b      	cmp	r3, r1
 800601a:	bf04      	itt	eq
 800601c:	6819      	ldreq	r1, [r3, #0]
 800601e:	685b      	ldreq	r3, [r3, #4]
 8006020:	6063      	str	r3, [r4, #4]
 8006022:	bf04      	itt	eq
 8006024:	1949      	addeq	r1, r1, r5
 8006026:	6021      	streq	r1, [r4, #0]
 8006028:	6054      	str	r4, [r2, #4]
 800602a:	e7ca      	b.n	8005fc2 <_free_r+0x26>
 800602c:	b003      	add	sp, #12
 800602e:	bd30      	pop	{r4, r5, pc}
 8006030:	20000270 	.word	0x20000270

08006034 <sbrk_aligned>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	4e0e      	ldr	r6, [pc, #56]	; (8006070 <sbrk_aligned+0x3c>)
 8006038:	460c      	mov	r4, r1
 800603a:	6831      	ldr	r1, [r6, #0]
 800603c:	4605      	mov	r5, r0
 800603e:	b911      	cbnz	r1, 8006046 <sbrk_aligned+0x12>
 8006040:	f000 f9e8 	bl	8006414 <_sbrk_r>
 8006044:	6030      	str	r0, [r6, #0]
 8006046:	4621      	mov	r1, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f9e3 	bl	8006414 <_sbrk_r>
 800604e:	1c43      	adds	r3, r0, #1
 8006050:	d00a      	beq.n	8006068 <sbrk_aligned+0x34>
 8006052:	1cc4      	adds	r4, r0, #3
 8006054:	f024 0403 	bic.w	r4, r4, #3
 8006058:	42a0      	cmp	r0, r4
 800605a:	d007      	beq.n	800606c <sbrk_aligned+0x38>
 800605c:	1a21      	subs	r1, r4, r0
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f9d8 	bl	8006414 <_sbrk_r>
 8006064:	3001      	adds	r0, #1
 8006066:	d101      	bne.n	800606c <sbrk_aligned+0x38>
 8006068:	f04f 34ff 	mov.w	r4, #4294967295
 800606c:	4620      	mov	r0, r4
 800606e:	bd70      	pop	{r4, r5, r6, pc}
 8006070:	20000274 	.word	0x20000274

08006074 <_malloc_r>:
 8006074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4607      	mov	r7, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d905      	bls.n	800609c <_malloc_r+0x28>
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	2600      	movs	r6, #0
 8006096:	4630      	mov	r0, r6
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	4e2e      	ldr	r6, [pc, #184]	; (8006158 <_malloc_r+0xe4>)
 800609e:	f000 fa25 	bl	80064ec <__malloc_lock>
 80060a2:	6833      	ldr	r3, [r6, #0]
 80060a4:	461c      	mov	r4, r3
 80060a6:	bb34      	cbnz	r4, 80060f6 <_malloc_r+0x82>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4638      	mov	r0, r7
 80060ac:	f7ff ffc2 	bl	8006034 <sbrk_aligned>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	4604      	mov	r4, r0
 80060b4:	d14d      	bne.n	8006152 <_malloc_r+0xde>
 80060b6:	6834      	ldr	r4, [r6, #0]
 80060b8:	4626      	mov	r6, r4
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	d140      	bne.n	8006140 <_malloc_r+0xcc>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	4631      	mov	r1, r6
 80060c2:	4638      	mov	r0, r7
 80060c4:	eb04 0803 	add.w	r8, r4, r3
 80060c8:	f000 f9a4 	bl	8006414 <_sbrk_r>
 80060cc:	4580      	cmp	r8, r0
 80060ce:	d13a      	bne.n	8006146 <_malloc_r+0xd2>
 80060d0:	6821      	ldr	r1, [r4, #0]
 80060d2:	3503      	adds	r5, #3
 80060d4:	1a6d      	subs	r5, r5, r1
 80060d6:	f025 0503 	bic.w	r5, r5, #3
 80060da:	3508      	adds	r5, #8
 80060dc:	2d0c      	cmp	r5, #12
 80060de:	bf38      	it	cc
 80060e0:	250c      	movcc	r5, #12
 80060e2:	4629      	mov	r1, r5
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ffa5 	bl	8006034 <sbrk_aligned>
 80060ea:	3001      	adds	r0, #1
 80060ec:	d02b      	beq.n	8006146 <_malloc_r+0xd2>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	442b      	add	r3, r5
 80060f2:	6023      	str	r3, [r4, #0]
 80060f4:	e00e      	b.n	8006114 <_malloc_r+0xa0>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	1b52      	subs	r2, r2, r5
 80060fa:	d41e      	bmi.n	800613a <_malloc_r+0xc6>
 80060fc:	2a0b      	cmp	r2, #11
 80060fe:	d916      	bls.n	800612e <_malloc_r+0xba>
 8006100:	1961      	adds	r1, r4, r5
 8006102:	42a3      	cmp	r3, r4
 8006104:	6025      	str	r5, [r4, #0]
 8006106:	bf18      	it	ne
 8006108:	6059      	strne	r1, [r3, #4]
 800610a:	6863      	ldr	r3, [r4, #4]
 800610c:	bf08      	it	eq
 800610e:	6031      	streq	r1, [r6, #0]
 8006110:	5162      	str	r2, [r4, r5]
 8006112:	604b      	str	r3, [r1, #4]
 8006114:	4638      	mov	r0, r7
 8006116:	f104 060b 	add.w	r6, r4, #11
 800611a:	f000 f9ed 	bl	80064f8 <__malloc_unlock>
 800611e:	f026 0607 	bic.w	r6, r6, #7
 8006122:	1d23      	adds	r3, r4, #4
 8006124:	1af2      	subs	r2, r6, r3
 8006126:	d0b6      	beq.n	8006096 <_malloc_r+0x22>
 8006128:	1b9b      	subs	r3, r3, r6
 800612a:	50a3      	str	r3, [r4, r2]
 800612c:	e7b3      	b.n	8006096 <_malloc_r+0x22>
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	42a3      	cmp	r3, r4
 8006132:	bf0c      	ite	eq
 8006134:	6032      	streq	r2, [r6, #0]
 8006136:	605a      	strne	r2, [r3, #4]
 8006138:	e7ec      	b.n	8006114 <_malloc_r+0xa0>
 800613a:	4623      	mov	r3, r4
 800613c:	6864      	ldr	r4, [r4, #4]
 800613e:	e7b2      	b.n	80060a6 <_malloc_r+0x32>
 8006140:	4634      	mov	r4, r6
 8006142:	6876      	ldr	r6, [r6, #4]
 8006144:	e7b9      	b.n	80060ba <_malloc_r+0x46>
 8006146:	230c      	movs	r3, #12
 8006148:	603b      	str	r3, [r7, #0]
 800614a:	4638      	mov	r0, r7
 800614c:	f000 f9d4 	bl	80064f8 <__malloc_unlock>
 8006150:	e7a1      	b.n	8006096 <_malloc_r+0x22>
 8006152:	6025      	str	r5, [r4, #0]
 8006154:	e7de      	b.n	8006114 <_malloc_r+0xa0>
 8006156:	bf00      	nop
 8006158:	20000270 	.word	0x20000270

0800615c <__ssputs_r>:
 800615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	688e      	ldr	r6, [r1, #8]
 8006162:	429e      	cmp	r6, r3
 8006164:	4682      	mov	sl, r0
 8006166:	460c      	mov	r4, r1
 8006168:	4690      	mov	r8, r2
 800616a:	461f      	mov	r7, r3
 800616c:	d838      	bhi.n	80061e0 <__ssputs_r+0x84>
 800616e:	898a      	ldrh	r2, [r1, #12]
 8006170:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006174:	d032      	beq.n	80061dc <__ssputs_r+0x80>
 8006176:	6825      	ldr	r5, [r4, #0]
 8006178:	6909      	ldr	r1, [r1, #16]
 800617a:	eba5 0901 	sub.w	r9, r5, r1
 800617e:	6965      	ldr	r5, [r4, #20]
 8006180:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006188:	3301      	adds	r3, #1
 800618a:	444b      	add	r3, r9
 800618c:	106d      	asrs	r5, r5, #1
 800618e:	429d      	cmp	r5, r3
 8006190:	bf38      	it	cc
 8006192:	461d      	movcc	r5, r3
 8006194:	0553      	lsls	r3, r2, #21
 8006196:	d531      	bpl.n	80061fc <__ssputs_r+0xa0>
 8006198:	4629      	mov	r1, r5
 800619a:	f7ff ff6b 	bl	8006074 <_malloc_r>
 800619e:	4606      	mov	r6, r0
 80061a0:	b950      	cbnz	r0, 80061b8 <__ssputs_r+0x5c>
 80061a2:	230c      	movs	r3, #12
 80061a4:	f8ca 3000 	str.w	r3, [sl]
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ae:	81a3      	strh	r3, [r4, #12]
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	6921      	ldr	r1, [r4, #16]
 80061ba:	464a      	mov	r2, r9
 80061bc:	f7ff fb46 	bl	800584c <memcpy>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ca:	81a3      	strh	r3, [r4, #12]
 80061cc:	6126      	str	r6, [r4, #16]
 80061ce:	6165      	str	r5, [r4, #20]
 80061d0:	444e      	add	r6, r9
 80061d2:	eba5 0509 	sub.w	r5, r5, r9
 80061d6:	6026      	str	r6, [r4, #0]
 80061d8:	60a5      	str	r5, [r4, #8]
 80061da:	463e      	mov	r6, r7
 80061dc:	42be      	cmp	r6, r7
 80061de:	d900      	bls.n	80061e2 <__ssputs_r+0x86>
 80061e0:	463e      	mov	r6, r7
 80061e2:	6820      	ldr	r0, [r4, #0]
 80061e4:	4632      	mov	r2, r6
 80061e6:	4641      	mov	r1, r8
 80061e8:	f000 f966 	bl	80064b8 <memmove>
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	1b9b      	subs	r3, r3, r6
 80061f0:	60a3      	str	r3, [r4, #8]
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	4433      	add	r3, r6
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	2000      	movs	r0, #0
 80061fa:	e7db      	b.n	80061b4 <__ssputs_r+0x58>
 80061fc:	462a      	mov	r2, r5
 80061fe:	f000 f981 	bl	8006504 <_realloc_r>
 8006202:	4606      	mov	r6, r0
 8006204:	2800      	cmp	r0, #0
 8006206:	d1e1      	bne.n	80061cc <__ssputs_r+0x70>
 8006208:	6921      	ldr	r1, [r4, #16]
 800620a:	4650      	mov	r0, sl
 800620c:	f7ff fec6 	bl	8005f9c <_free_r>
 8006210:	e7c7      	b.n	80061a2 <__ssputs_r+0x46>
	...

08006214 <_svfiprintf_r>:
 8006214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	4698      	mov	r8, r3
 800621a:	898b      	ldrh	r3, [r1, #12]
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	b09d      	sub	sp, #116	; 0x74
 8006220:	4607      	mov	r7, r0
 8006222:	460d      	mov	r5, r1
 8006224:	4614      	mov	r4, r2
 8006226:	d50e      	bpl.n	8006246 <_svfiprintf_r+0x32>
 8006228:	690b      	ldr	r3, [r1, #16]
 800622a:	b963      	cbnz	r3, 8006246 <_svfiprintf_r+0x32>
 800622c:	2140      	movs	r1, #64	; 0x40
 800622e:	f7ff ff21 	bl	8006074 <_malloc_r>
 8006232:	6028      	str	r0, [r5, #0]
 8006234:	6128      	str	r0, [r5, #16]
 8006236:	b920      	cbnz	r0, 8006242 <_svfiprintf_r+0x2e>
 8006238:	230c      	movs	r3, #12
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	f04f 30ff 	mov.w	r0, #4294967295
 8006240:	e0d1      	b.n	80063e6 <_svfiprintf_r+0x1d2>
 8006242:	2340      	movs	r3, #64	; 0x40
 8006244:	616b      	str	r3, [r5, #20]
 8006246:	2300      	movs	r3, #0
 8006248:	9309      	str	r3, [sp, #36]	; 0x24
 800624a:	2320      	movs	r3, #32
 800624c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006250:	f8cd 800c 	str.w	r8, [sp, #12]
 8006254:	2330      	movs	r3, #48	; 0x30
 8006256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006400 <_svfiprintf_r+0x1ec>
 800625a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800625e:	f04f 0901 	mov.w	r9, #1
 8006262:	4623      	mov	r3, r4
 8006264:	469a      	mov	sl, r3
 8006266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800626a:	b10a      	cbz	r2, 8006270 <_svfiprintf_r+0x5c>
 800626c:	2a25      	cmp	r2, #37	; 0x25
 800626e:	d1f9      	bne.n	8006264 <_svfiprintf_r+0x50>
 8006270:	ebba 0b04 	subs.w	fp, sl, r4
 8006274:	d00b      	beq.n	800628e <_svfiprintf_r+0x7a>
 8006276:	465b      	mov	r3, fp
 8006278:	4622      	mov	r2, r4
 800627a:	4629      	mov	r1, r5
 800627c:	4638      	mov	r0, r7
 800627e:	f7ff ff6d 	bl	800615c <__ssputs_r>
 8006282:	3001      	adds	r0, #1
 8006284:	f000 80aa 	beq.w	80063dc <_svfiprintf_r+0x1c8>
 8006288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800628a:	445a      	add	r2, fp
 800628c:	9209      	str	r2, [sp, #36]	; 0x24
 800628e:	f89a 3000 	ldrb.w	r3, [sl]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f000 80a2 	beq.w	80063dc <_svfiprintf_r+0x1c8>
 8006298:	2300      	movs	r3, #0
 800629a:	f04f 32ff 	mov.w	r2, #4294967295
 800629e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062a2:	f10a 0a01 	add.w	sl, sl, #1
 80062a6:	9304      	str	r3, [sp, #16]
 80062a8:	9307      	str	r3, [sp, #28]
 80062aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062ae:	931a      	str	r3, [sp, #104]	; 0x68
 80062b0:	4654      	mov	r4, sl
 80062b2:	2205      	movs	r2, #5
 80062b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062b8:	4851      	ldr	r0, [pc, #324]	; (8006400 <_svfiprintf_r+0x1ec>)
 80062ba:	f7f9 ff99 	bl	80001f0 <memchr>
 80062be:	9a04      	ldr	r2, [sp, #16]
 80062c0:	b9d8      	cbnz	r0, 80062fa <_svfiprintf_r+0xe6>
 80062c2:	06d0      	lsls	r0, r2, #27
 80062c4:	bf44      	itt	mi
 80062c6:	2320      	movmi	r3, #32
 80062c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062cc:	0711      	lsls	r1, r2, #28
 80062ce:	bf44      	itt	mi
 80062d0:	232b      	movmi	r3, #43	; 0x2b
 80062d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062d6:	f89a 3000 	ldrb.w	r3, [sl]
 80062da:	2b2a      	cmp	r3, #42	; 0x2a
 80062dc:	d015      	beq.n	800630a <_svfiprintf_r+0xf6>
 80062de:	9a07      	ldr	r2, [sp, #28]
 80062e0:	4654      	mov	r4, sl
 80062e2:	2000      	movs	r0, #0
 80062e4:	f04f 0c0a 	mov.w	ip, #10
 80062e8:	4621      	mov	r1, r4
 80062ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80062ee:	3b30      	subs	r3, #48	; 0x30
 80062f0:	2b09      	cmp	r3, #9
 80062f2:	d94e      	bls.n	8006392 <_svfiprintf_r+0x17e>
 80062f4:	b1b0      	cbz	r0, 8006324 <_svfiprintf_r+0x110>
 80062f6:	9207      	str	r2, [sp, #28]
 80062f8:	e014      	b.n	8006324 <_svfiprintf_r+0x110>
 80062fa:	eba0 0308 	sub.w	r3, r0, r8
 80062fe:	fa09 f303 	lsl.w	r3, r9, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	9304      	str	r3, [sp, #16]
 8006306:	46a2      	mov	sl, r4
 8006308:	e7d2      	b.n	80062b0 <_svfiprintf_r+0x9c>
 800630a:	9b03      	ldr	r3, [sp, #12]
 800630c:	1d19      	adds	r1, r3, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	9103      	str	r1, [sp, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	bfbb      	ittet	lt
 8006316:	425b      	neglt	r3, r3
 8006318:	f042 0202 	orrlt.w	r2, r2, #2
 800631c:	9307      	strge	r3, [sp, #28]
 800631e:	9307      	strlt	r3, [sp, #28]
 8006320:	bfb8      	it	lt
 8006322:	9204      	strlt	r2, [sp, #16]
 8006324:	7823      	ldrb	r3, [r4, #0]
 8006326:	2b2e      	cmp	r3, #46	; 0x2e
 8006328:	d10c      	bne.n	8006344 <_svfiprintf_r+0x130>
 800632a:	7863      	ldrb	r3, [r4, #1]
 800632c:	2b2a      	cmp	r3, #42	; 0x2a
 800632e:	d135      	bne.n	800639c <_svfiprintf_r+0x188>
 8006330:	9b03      	ldr	r3, [sp, #12]
 8006332:	1d1a      	adds	r2, r3, #4
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	9203      	str	r2, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb8      	it	lt
 800633c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006340:	3402      	adds	r4, #2
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006410 <_svfiprintf_r+0x1fc>
 8006348:	7821      	ldrb	r1, [r4, #0]
 800634a:	2203      	movs	r2, #3
 800634c:	4650      	mov	r0, sl
 800634e:	f7f9 ff4f 	bl	80001f0 <memchr>
 8006352:	b140      	cbz	r0, 8006366 <_svfiprintf_r+0x152>
 8006354:	2340      	movs	r3, #64	; 0x40
 8006356:	eba0 000a 	sub.w	r0, r0, sl
 800635a:	fa03 f000 	lsl.w	r0, r3, r0
 800635e:	9b04      	ldr	r3, [sp, #16]
 8006360:	4303      	orrs	r3, r0
 8006362:	3401      	adds	r4, #1
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800636a:	4826      	ldr	r0, [pc, #152]	; (8006404 <_svfiprintf_r+0x1f0>)
 800636c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006370:	2206      	movs	r2, #6
 8006372:	f7f9 ff3d 	bl	80001f0 <memchr>
 8006376:	2800      	cmp	r0, #0
 8006378:	d038      	beq.n	80063ec <_svfiprintf_r+0x1d8>
 800637a:	4b23      	ldr	r3, [pc, #140]	; (8006408 <_svfiprintf_r+0x1f4>)
 800637c:	bb1b      	cbnz	r3, 80063c6 <_svfiprintf_r+0x1b2>
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	3307      	adds	r3, #7
 8006382:	f023 0307 	bic.w	r3, r3, #7
 8006386:	3308      	adds	r3, #8
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638c:	4433      	add	r3, r6
 800638e:	9309      	str	r3, [sp, #36]	; 0x24
 8006390:	e767      	b.n	8006262 <_svfiprintf_r+0x4e>
 8006392:	fb0c 3202 	mla	r2, ip, r2, r3
 8006396:	460c      	mov	r4, r1
 8006398:	2001      	movs	r0, #1
 800639a:	e7a5      	b.n	80062e8 <_svfiprintf_r+0xd4>
 800639c:	2300      	movs	r3, #0
 800639e:	3401      	adds	r4, #1
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	4619      	mov	r1, r3
 80063a4:	f04f 0c0a 	mov.w	ip, #10
 80063a8:	4620      	mov	r0, r4
 80063aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063ae:	3a30      	subs	r2, #48	; 0x30
 80063b0:	2a09      	cmp	r2, #9
 80063b2:	d903      	bls.n	80063bc <_svfiprintf_r+0x1a8>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0c5      	beq.n	8006344 <_svfiprintf_r+0x130>
 80063b8:	9105      	str	r1, [sp, #20]
 80063ba:	e7c3      	b.n	8006344 <_svfiprintf_r+0x130>
 80063bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80063c0:	4604      	mov	r4, r0
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7f0      	b.n	80063a8 <_svfiprintf_r+0x194>
 80063c6:	ab03      	add	r3, sp, #12
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	462a      	mov	r2, r5
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <_svfiprintf_r+0x1f8>)
 80063ce:	a904      	add	r1, sp, #16
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7fd ffcb 	bl	800436c <_printf_float>
 80063d6:	1c42      	adds	r2, r0, #1
 80063d8:	4606      	mov	r6, r0
 80063da:	d1d6      	bne.n	800638a <_svfiprintf_r+0x176>
 80063dc:	89ab      	ldrh	r3, [r5, #12]
 80063de:	065b      	lsls	r3, r3, #25
 80063e0:	f53f af2c 	bmi.w	800623c <_svfiprintf_r+0x28>
 80063e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063e6:	b01d      	add	sp, #116	; 0x74
 80063e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ec:	ab03      	add	r3, sp, #12
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	462a      	mov	r2, r5
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <_svfiprintf_r+0x1f8>)
 80063f4:	a904      	add	r1, sp, #16
 80063f6:	4638      	mov	r0, r7
 80063f8:	f7fe fa5c 	bl	80048b4 <_printf_i>
 80063fc:	e7eb      	b.n	80063d6 <_svfiprintf_r+0x1c2>
 80063fe:	bf00      	nop
 8006400:	080089bc 	.word	0x080089bc
 8006404:	080089c6 	.word	0x080089c6
 8006408:	0800436d 	.word	0x0800436d
 800640c:	0800615d 	.word	0x0800615d
 8006410:	080089c2 	.word	0x080089c2

08006414 <_sbrk_r>:
 8006414:	b538      	push	{r3, r4, r5, lr}
 8006416:	4d06      	ldr	r5, [pc, #24]	; (8006430 <_sbrk_r+0x1c>)
 8006418:	2300      	movs	r3, #0
 800641a:	4604      	mov	r4, r0
 800641c:	4608      	mov	r0, r1
 800641e:	602b      	str	r3, [r5, #0]
 8006420:	f001 febc 	bl	800819c <_sbrk>
 8006424:	1c43      	adds	r3, r0, #1
 8006426:	d102      	bne.n	800642e <_sbrk_r+0x1a>
 8006428:	682b      	ldr	r3, [r5, #0]
 800642a:	b103      	cbz	r3, 800642e <_sbrk_r+0x1a>
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	20000278 	.word	0x20000278

08006434 <__assert_func>:
 8006434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006436:	4614      	mov	r4, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4b09      	ldr	r3, [pc, #36]	; (8006460 <__assert_func+0x2c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4605      	mov	r5, r0
 8006440:	68d8      	ldr	r0, [r3, #12]
 8006442:	b14c      	cbz	r4, 8006458 <__assert_func+0x24>
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <__assert_func+0x30>)
 8006446:	9100      	str	r1, [sp, #0]
 8006448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800644c:	4906      	ldr	r1, [pc, #24]	; (8006468 <__assert_func+0x34>)
 800644e:	462b      	mov	r3, r5
 8006450:	f000 f80e 	bl	8006470 <fiprintf>
 8006454:	f000 faac 	bl	80069b0 <abort>
 8006458:	4b04      	ldr	r3, [pc, #16]	; (800646c <__assert_func+0x38>)
 800645a:	461c      	mov	r4, r3
 800645c:	e7f3      	b.n	8006446 <__assert_func+0x12>
 800645e:	bf00      	nop
 8006460:	20000030 	.word	0x20000030
 8006464:	080089cd 	.word	0x080089cd
 8006468:	080089da 	.word	0x080089da
 800646c:	08008a08 	.word	0x08008a08

08006470 <fiprintf>:
 8006470:	b40e      	push	{r1, r2, r3}
 8006472:	b503      	push	{r0, r1, lr}
 8006474:	4601      	mov	r1, r0
 8006476:	ab03      	add	r3, sp, #12
 8006478:	4805      	ldr	r0, [pc, #20]	; (8006490 <fiprintf+0x20>)
 800647a:	f853 2b04 	ldr.w	r2, [r3], #4
 800647e:	6800      	ldr	r0, [r0, #0]
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	f000 f897 	bl	80065b4 <_vfiprintf_r>
 8006486:	b002      	add	sp, #8
 8006488:	f85d eb04 	ldr.w	lr, [sp], #4
 800648c:	b003      	add	sp, #12
 800648e:	4770      	bx	lr
 8006490:	20000030 	.word	0x20000030

08006494 <__ascii_mbtowc>:
 8006494:	b082      	sub	sp, #8
 8006496:	b901      	cbnz	r1, 800649a <__ascii_mbtowc+0x6>
 8006498:	a901      	add	r1, sp, #4
 800649a:	b142      	cbz	r2, 80064ae <__ascii_mbtowc+0x1a>
 800649c:	b14b      	cbz	r3, 80064b2 <__ascii_mbtowc+0x1e>
 800649e:	7813      	ldrb	r3, [r2, #0]
 80064a0:	600b      	str	r3, [r1, #0]
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	1e10      	subs	r0, r2, #0
 80064a6:	bf18      	it	ne
 80064a8:	2001      	movne	r0, #1
 80064aa:	b002      	add	sp, #8
 80064ac:	4770      	bx	lr
 80064ae:	4610      	mov	r0, r2
 80064b0:	e7fb      	b.n	80064aa <__ascii_mbtowc+0x16>
 80064b2:	f06f 0001 	mvn.w	r0, #1
 80064b6:	e7f8      	b.n	80064aa <__ascii_mbtowc+0x16>

080064b8 <memmove>:
 80064b8:	4288      	cmp	r0, r1
 80064ba:	b510      	push	{r4, lr}
 80064bc:	eb01 0402 	add.w	r4, r1, r2
 80064c0:	d902      	bls.n	80064c8 <memmove+0x10>
 80064c2:	4284      	cmp	r4, r0
 80064c4:	4623      	mov	r3, r4
 80064c6:	d807      	bhi.n	80064d8 <memmove+0x20>
 80064c8:	1e43      	subs	r3, r0, #1
 80064ca:	42a1      	cmp	r1, r4
 80064cc:	d008      	beq.n	80064e0 <memmove+0x28>
 80064ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064d6:	e7f8      	b.n	80064ca <memmove+0x12>
 80064d8:	4402      	add	r2, r0
 80064da:	4601      	mov	r1, r0
 80064dc:	428a      	cmp	r2, r1
 80064de:	d100      	bne.n	80064e2 <memmove+0x2a>
 80064e0:	bd10      	pop	{r4, pc}
 80064e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ea:	e7f7      	b.n	80064dc <memmove+0x24>

080064ec <__malloc_lock>:
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <__malloc_lock+0x8>)
 80064ee:	f000 bc1f 	b.w	8006d30 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	2000027c 	.word	0x2000027c

080064f8 <__malloc_unlock>:
 80064f8:	4801      	ldr	r0, [pc, #4]	; (8006500 <__malloc_unlock+0x8>)
 80064fa:	f000 bc1a 	b.w	8006d32 <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	2000027c 	.word	0x2000027c

08006504 <_realloc_r>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	4680      	mov	r8, r0
 800650a:	4614      	mov	r4, r2
 800650c:	460e      	mov	r6, r1
 800650e:	b921      	cbnz	r1, 800651a <_realloc_r+0x16>
 8006510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	4611      	mov	r1, r2
 8006516:	f7ff bdad 	b.w	8006074 <_malloc_r>
 800651a:	b92a      	cbnz	r2, 8006528 <_realloc_r+0x24>
 800651c:	f7ff fd3e 	bl	8005f9c <_free_r>
 8006520:	4625      	mov	r5, r4
 8006522:	4628      	mov	r0, r5
 8006524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006528:	f000 fc6a 	bl	8006e00 <_malloc_usable_size_r>
 800652c:	4284      	cmp	r4, r0
 800652e:	4607      	mov	r7, r0
 8006530:	d802      	bhi.n	8006538 <_realloc_r+0x34>
 8006532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006536:	d812      	bhi.n	800655e <_realloc_r+0x5a>
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fd9a 	bl	8006074 <_malloc_r>
 8006540:	4605      	mov	r5, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	d0ed      	beq.n	8006522 <_realloc_r+0x1e>
 8006546:	42bc      	cmp	r4, r7
 8006548:	4622      	mov	r2, r4
 800654a:	4631      	mov	r1, r6
 800654c:	bf28      	it	cs
 800654e:	463a      	movcs	r2, r7
 8006550:	f7ff f97c 	bl	800584c <memcpy>
 8006554:	4631      	mov	r1, r6
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fd20 	bl	8005f9c <_free_r>
 800655c:	e7e1      	b.n	8006522 <_realloc_r+0x1e>
 800655e:	4635      	mov	r5, r6
 8006560:	e7df      	b.n	8006522 <_realloc_r+0x1e>

08006562 <__sfputc_r>:
 8006562:	6893      	ldr	r3, [r2, #8]
 8006564:	3b01      	subs	r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	b410      	push	{r4}
 800656a:	6093      	str	r3, [r2, #8]
 800656c:	da08      	bge.n	8006580 <__sfputc_r+0x1e>
 800656e:	6994      	ldr	r4, [r2, #24]
 8006570:	42a3      	cmp	r3, r4
 8006572:	db01      	blt.n	8006578 <__sfputc_r+0x16>
 8006574:	290a      	cmp	r1, #10
 8006576:	d103      	bne.n	8006580 <__sfputc_r+0x1e>
 8006578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800657c:	f000 b94a 	b.w	8006814 <__swbuf_r>
 8006580:	6813      	ldr	r3, [r2, #0]
 8006582:	1c58      	adds	r0, r3, #1
 8006584:	6010      	str	r0, [r2, #0]
 8006586:	7019      	strb	r1, [r3, #0]
 8006588:	4608      	mov	r0, r1
 800658a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800658e:	4770      	bx	lr

08006590 <__sfputs_r>:
 8006590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006592:	4606      	mov	r6, r0
 8006594:	460f      	mov	r7, r1
 8006596:	4614      	mov	r4, r2
 8006598:	18d5      	adds	r5, r2, r3
 800659a:	42ac      	cmp	r4, r5
 800659c:	d101      	bne.n	80065a2 <__sfputs_r+0x12>
 800659e:	2000      	movs	r0, #0
 80065a0:	e007      	b.n	80065b2 <__sfputs_r+0x22>
 80065a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065a6:	463a      	mov	r2, r7
 80065a8:	4630      	mov	r0, r6
 80065aa:	f7ff ffda 	bl	8006562 <__sfputc_r>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	d1f3      	bne.n	800659a <__sfputs_r+0xa>
 80065b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080065b4 <_vfiprintf_r>:
 80065b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065b8:	460d      	mov	r5, r1
 80065ba:	b09d      	sub	sp, #116	; 0x74
 80065bc:	4614      	mov	r4, r2
 80065be:	4698      	mov	r8, r3
 80065c0:	4606      	mov	r6, r0
 80065c2:	b118      	cbz	r0, 80065cc <_vfiprintf_r+0x18>
 80065c4:	6983      	ldr	r3, [r0, #24]
 80065c6:	b90b      	cbnz	r3, 80065cc <_vfiprintf_r+0x18>
 80065c8:	f000 fb14 	bl	8006bf4 <__sinit>
 80065cc:	4b89      	ldr	r3, [pc, #548]	; (80067f4 <_vfiprintf_r+0x240>)
 80065ce:	429d      	cmp	r5, r3
 80065d0:	d11b      	bne.n	800660a <_vfiprintf_r+0x56>
 80065d2:	6875      	ldr	r5, [r6, #4]
 80065d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065d6:	07d9      	lsls	r1, r3, #31
 80065d8:	d405      	bmi.n	80065e6 <_vfiprintf_r+0x32>
 80065da:	89ab      	ldrh	r3, [r5, #12]
 80065dc:	059a      	lsls	r2, r3, #22
 80065de:	d402      	bmi.n	80065e6 <_vfiprintf_r+0x32>
 80065e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065e2:	f000 fba5 	bl	8006d30 <__retarget_lock_acquire_recursive>
 80065e6:	89ab      	ldrh	r3, [r5, #12]
 80065e8:	071b      	lsls	r3, r3, #28
 80065ea:	d501      	bpl.n	80065f0 <_vfiprintf_r+0x3c>
 80065ec:	692b      	ldr	r3, [r5, #16]
 80065ee:	b9eb      	cbnz	r3, 800662c <_vfiprintf_r+0x78>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4630      	mov	r0, r6
 80065f4:	f000 f96e 	bl	80068d4 <__swsetup_r>
 80065f8:	b1c0      	cbz	r0, 800662c <_vfiprintf_r+0x78>
 80065fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065fc:	07dc      	lsls	r4, r3, #31
 80065fe:	d50e      	bpl.n	800661e <_vfiprintf_r+0x6a>
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	b01d      	add	sp, #116	; 0x74
 8006606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800660a:	4b7b      	ldr	r3, [pc, #492]	; (80067f8 <_vfiprintf_r+0x244>)
 800660c:	429d      	cmp	r5, r3
 800660e:	d101      	bne.n	8006614 <_vfiprintf_r+0x60>
 8006610:	68b5      	ldr	r5, [r6, #8]
 8006612:	e7df      	b.n	80065d4 <_vfiprintf_r+0x20>
 8006614:	4b79      	ldr	r3, [pc, #484]	; (80067fc <_vfiprintf_r+0x248>)
 8006616:	429d      	cmp	r5, r3
 8006618:	bf08      	it	eq
 800661a:	68f5      	ldreq	r5, [r6, #12]
 800661c:	e7da      	b.n	80065d4 <_vfiprintf_r+0x20>
 800661e:	89ab      	ldrh	r3, [r5, #12]
 8006620:	0598      	lsls	r0, r3, #22
 8006622:	d4ed      	bmi.n	8006600 <_vfiprintf_r+0x4c>
 8006624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006626:	f000 fb84 	bl	8006d32 <__retarget_lock_release_recursive>
 800662a:	e7e9      	b.n	8006600 <_vfiprintf_r+0x4c>
 800662c:	2300      	movs	r3, #0
 800662e:	9309      	str	r3, [sp, #36]	; 0x24
 8006630:	2320      	movs	r3, #32
 8006632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006636:	f8cd 800c 	str.w	r8, [sp, #12]
 800663a:	2330      	movs	r3, #48	; 0x30
 800663c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006800 <_vfiprintf_r+0x24c>
 8006640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006644:	f04f 0901 	mov.w	r9, #1
 8006648:	4623      	mov	r3, r4
 800664a:	469a      	mov	sl, r3
 800664c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006650:	b10a      	cbz	r2, 8006656 <_vfiprintf_r+0xa2>
 8006652:	2a25      	cmp	r2, #37	; 0x25
 8006654:	d1f9      	bne.n	800664a <_vfiprintf_r+0x96>
 8006656:	ebba 0b04 	subs.w	fp, sl, r4
 800665a:	d00b      	beq.n	8006674 <_vfiprintf_r+0xc0>
 800665c:	465b      	mov	r3, fp
 800665e:	4622      	mov	r2, r4
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ff94 	bl	8006590 <__sfputs_r>
 8006668:	3001      	adds	r0, #1
 800666a:	f000 80aa 	beq.w	80067c2 <_vfiprintf_r+0x20e>
 800666e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006670:	445a      	add	r2, fp
 8006672:	9209      	str	r2, [sp, #36]	; 0x24
 8006674:	f89a 3000 	ldrb.w	r3, [sl]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80a2 	beq.w	80067c2 <_vfiprintf_r+0x20e>
 800667e:	2300      	movs	r3, #0
 8006680:	f04f 32ff 	mov.w	r2, #4294967295
 8006684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006688:	f10a 0a01 	add.w	sl, sl, #1
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	9307      	str	r3, [sp, #28]
 8006690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006694:	931a      	str	r3, [sp, #104]	; 0x68
 8006696:	4654      	mov	r4, sl
 8006698:	2205      	movs	r2, #5
 800669a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800669e:	4858      	ldr	r0, [pc, #352]	; (8006800 <_vfiprintf_r+0x24c>)
 80066a0:	f7f9 fda6 	bl	80001f0 <memchr>
 80066a4:	9a04      	ldr	r2, [sp, #16]
 80066a6:	b9d8      	cbnz	r0, 80066e0 <_vfiprintf_r+0x12c>
 80066a8:	06d1      	lsls	r1, r2, #27
 80066aa:	bf44      	itt	mi
 80066ac:	2320      	movmi	r3, #32
 80066ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066b2:	0713      	lsls	r3, r2, #28
 80066b4:	bf44      	itt	mi
 80066b6:	232b      	movmi	r3, #43	; 0x2b
 80066b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066bc:	f89a 3000 	ldrb.w	r3, [sl]
 80066c0:	2b2a      	cmp	r3, #42	; 0x2a
 80066c2:	d015      	beq.n	80066f0 <_vfiprintf_r+0x13c>
 80066c4:	9a07      	ldr	r2, [sp, #28]
 80066c6:	4654      	mov	r4, sl
 80066c8:	2000      	movs	r0, #0
 80066ca:	f04f 0c0a 	mov.w	ip, #10
 80066ce:	4621      	mov	r1, r4
 80066d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066d4:	3b30      	subs	r3, #48	; 0x30
 80066d6:	2b09      	cmp	r3, #9
 80066d8:	d94e      	bls.n	8006778 <_vfiprintf_r+0x1c4>
 80066da:	b1b0      	cbz	r0, 800670a <_vfiprintf_r+0x156>
 80066dc:	9207      	str	r2, [sp, #28]
 80066de:	e014      	b.n	800670a <_vfiprintf_r+0x156>
 80066e0:	eba0 0308 	sub.w	r3, r0, r8
 80066e4:	fa09 f303 	lsl.w	r3, r9, r3
 80066e8:	4313      	orrs	r3, r2
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	46a2      	mov	sl, r4
 80066ee:	e7d2      	b.n	8006696 <_vfiprintf_r+0xe2>
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	1d19      	adds	r1, r3, #4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	9103      	str	r1, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	bfbb      	ittet	lt
 80066fc:	425b      	neglt	r3, r3
 80066fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006702:	9307      	strge	r3, [sp, #28]
 8006704:	9307      	strlt	r3, [sp, #28]
 8006706:	bfb8      	it	lt
 8006708:	9204      	strlt	r2, [sp, #16]
 800670a:	7823      	ldrb	r3, [r4, #0]
 800670c:	2b2e      	cmp	r3, #46	; 0x2e
 800670e:	d10c      	bne.n	800672a <_vfiprintf_r+0x176>
 8006710:	7863      	ldrb	r3, [r4, #1]
 8006712:	2b2a      	cmp	r3, #42	; 0x2a
 8006714:	d135      	bne.n	8006782 <_vfiprintf_r+0x1ce>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	1d1a      	adds	r2, r3, #4
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	9203      	str	r2, [sp, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	bfb8      	it	lt
 8006722:	f04f 33ff 	movlt.w	r3, #4294967295
 8006726:	3402      	adds	r4, #2
 8006728:	9305      	str	r3, [sp, #20]
 800672a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006810 <_vfiprintf_r+0x25c>
 800672e:	7821      	ldrb	r1, [r4, #0]
 8006730:	2203      	movs	r2, #3
 8006732:	4650      	mov	r0, sl
 8006734:	f7f9 fd5c 	bl	80001f0 <memchr>
 8006738:	b140      	cbz	r0, 800674c <_vfiprintf_r+0x198>
 800673a:	2340      	movs	r3, #64	; 0x40
 800673c:	eba0 000a 	sub.w	r0, r0, sl
 8006740:	fa03 f000 	lsl.w	r0, r3, r0
 8006744:	9b04      	ldr	r3, [sp, #16]
 8006746:	4303      	orrs	r3, r0
 8006748:	3401      	adds	r4, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006750:	482c      	ldr	r0, [pc, #176]	; (8006804 <_vfiprintf_r+0x250>)
 8006752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006756:	2206      	movs	r2, #6
 8006758:	f7f9 fd4a 	bl	80001f0 <memchr>
 800675c:	2800      	cmp	r0, #0
 800675e:	d03f      	beq.n	80067e0 <_vfiprintf_r+0x22c>
 8006760:	4b29      	ldr	r3, [pc, #164]	; (8006808 <_vfiprintf_r+0x254>)
 8006762:	bb1b      	cbnz	r3, 80067ac <_vfiprintf_r+0x1f8>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	3307      	adds	r3, #7
 8006768:	f023 0307 	bic.w	r3, r3, #7
 800676c:	3308      	adds	r3, #8
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006772:	443b      	add	r3, r7
 8006774:	9309      	str	r3, [sp, #36]	; 0x24
 8006776:	e767      	b.n	8006648 <_vfiprintf_r+0x94>
 8006778:	fb0c 3202 	mla	r2, ip, r2, r3
 800677c:	460c      	mov	r4, r1
 800677e:	2001      	movs	r0, #1
 8006780:	e7a5      	b.n	80066ce <_vfiprintf_r+0x11a>
 8006782:	2300      	movs	r3, #0
 8006784:	3401      	adds	r4, #1
 8006786:	9305      	str	r3, [sp, #20]
 8006788:	4619      	mov	r1, r3
 800678a:	f04f 0c0a 	mov.w	ip, #10
 800678e:	4620      	mov	r0, r4
 8006790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006794:	3a30      	subs	r2, #48	; 0x30
 8006796:	2a09      	cmp	r2, #9
 8006798:	d903      	bls.n	80067a2 <_vfiprintf_r+0x1ee>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0c5      	beq.n	800672a <_vfiprintf_r+0x176>
 800679e:	9105      	str	r1, [sp, #20]
 80067a0:	e7c3      	b.n	800672a <_vfiprintf_r+0x176>
 80067a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067a6:	4604      	mov	r4, r0
 80067a8:	2301      	movs	r3, #1
 80067aa:	e7f0      	b.n	800678e <_vfiprintf_r+0x1da>
 80067ac:	ab03      	add	r3, sp, #12
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	462a      	mov	r2, r5
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <_vfiprintf_r+0x258>)
 80067b4:	a904      	add	r1, sp, #16
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7fd fdd8 	bl	800436c <_printf_float>
 80067bc:	4607      	mov	r7, r0
 80067be:	1c78      	adds	r0, r7, #1
 80067c0:	d1d6      	bne.n	8006770 <_vfiprintf_r+0x1bc>
 80067c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c4:	07d9      	lsls	r1, r3, #31
 80067c6:	d405      	bmi.n	80067d4 <_vfiprintf_r+0x220>
 80067c8:	89ab      	ldrh	r3, [r5, #12]
 80067ca:	059a      	lsls	r2, r3, #22
 80067cc:	d402      	bmi.n	80067d4 <_vfiprintf_r+0x220>
 80067ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067d0:	f000 faaf 	bl	8006d32 <__retarget_lock_release_recursive>
 80067d4:	89ab      	ldrh	r3, [r5, #12]
 80067d6:	065b      	lsls	r3, r3, #25
 80067d8:	f53f af12 	bmi.w	8006600 <_vfiprintf_r+0x4c>
 80067dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067de:	e711      	b.n	8006604 <_vfiprintf_r+0x50>
 80067e0:	ab03      	add	r3, sp, #12
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	462a      	mov	r2, r5
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <_vfiprintf_r+0x258>)
 80067e8:	a904      	add	r1, sp, #16
 80067ea:	4630      	mov	r0, r6
 80067ec:	f7fe f862 	bl	80048b4 <_printf_i>
 80067f0:	e7e4      	b.n	80067bc <_vfiprintf_r+0x208>
 80067f2:	bf00      	nop
 80067f4:	08008b34 	.word	0x08008b34
 80067f8:	08008b54 	.word	0x08008b54
 80067fc:	08008b14 	.word	0x08008b14
 8006800:	080089bc 	.word	0x080089bc
 8006804:	080089c6 	.word	0x080089c6
 8006808:	0800436d 	.word	0x0800436d
 800680c:	08006591 	.word	0x08006591
 8006810:	080089c2 	.word	0x080089c2

08006814 <__swbuf_r>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	460e      	mov	r6, r1
 8006818:	4614      	mov	r4, r2
 800681a:	4605      	mov	r5, r0
 800681c:	b118      	cbz	r0, 8006826 <__swbuf_r+0x12>
 800681e:	6983      	ldr	r3, [r0, #24]
 8006820:	b90b      	cbnz	r3, 8006826 <__swbuf_r+0x12>
 8006822:	f000 f9e7 	bl	8006bf4 <__sinit>
 8006826:	4b21      	ldr	r3, [pc, #132]	; (80068ac <__swbuf_r+0x98>)
 8006828:	429c      	cmp	r4, r3
 800682a:	d12b      	bne.n	8006884 <__swbuf_r+0x70>
 800682c:	686c      	ldr	r4, [r5, #4]
 800682e:	69a3      	ldr	r3, [r4, #24]
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	071a      	lsls	r2, r3, #28
 8006836:	d52f      	bpl.n	8006898 <__swbuf_r+0x84>
 8006838:	6923      	ldr	r3, [r4, #16]
 800683a:	b36b      	cbz	r3, 8006898 <__swbuf_r+0x84>
 800683c:	6923      	ldr	r3, [r4, #16]
 800683e:	6820      	ldr	r0, [r4, #0]
 8006840:	1ac0      	subs	r0, r0, r3
 8006842:	6963      	ldr	r3, [r4, #20]
 8006844:	b2f6      	uxtb	r6, r6
 8006846:	4283      	cmp	r3, r0
 8006848:	4637      	mov	r7, r6
 800684a:	dc04      	bgt.n	8006856 <__swbuf_r+0x42>
 800684c:	4621      	mov	r1, r4
 800684e:	4628      	mov	r0, r5
 8006850:	f000 f93c 	bl	8006acc <_fflush_r>
 8006854:	bb30      	cbnz	r0, 80068a4 <__swbuf_r+0x90>
 8006856:	68a3      	ldr	r3, [r4, #8]
 8006858:	3b01      	subs	r3, #1
 800685a:	60a3      	str	r3, [r4, #8]
 800685c:	6823      	ldr	r3, [r4, #0]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	6022      	str	r2, [r4, #0]
 8006862:	701e      	strb	r6, [r3, #0]
 8006864:	6963      	ldr	r3, [r4, #20]
 8006866:	3001      	adds	r0, #1
 8006868:	4283      	cmp	r3, r0
 800686a:	d004      	beq.n	8006876 <__swbuf_r+0x62>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	07db      	lsls	r3, r3, #31
 8006870:	d506      	bpl.n	8006880 <__swbuf_r+0x6c>
 8006872:	2e0a      	cmp	r6, #10
 8006874:	d104      	bne.n	8006880 <__swbuf_r+0x6c>
 8006876:	4621      	mov	r1, r4
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f927 	bl	8006acc <_fflush_r>
 800687e:	b988      	cbnz	r0, 80068a4 <__swbuf_r+0x90>
 8006880:	4638      	mov	r0, r7
 8006882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <__swbuf_r+0x9c>)
 8006886:	429c      	cmp	r4, r3
 8006888:	d101      	bne.n	800688e <__swbuf_r+0x7a>
 800688a:	68ac      	ldr	r4, [r5, #8]
 800688c:	e7cf      	b.n	800682e <__swbuf_r+0x1a>
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <__swbuf_r+0xa0>)
 8006890:	429c      	cmp	r4, r3
 8006892:	bf08      	it	eq
 8006894:	68ec      	ldreq	r4, [r5, #12]
 8006896:	e7ca      	b.n	800682e <__swbuf_r+0x1a>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f000 f81a 	bl	80068d4 <__swsetup_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d0cb      	beq.n	800683c <__swbuf_r+0x28>
 80068a4:	f04f 37ff 	mov.w	r7, #4294967295
 80068a8:	e7ea      	b.n	8006880 <__swbuf_r+0x6c>
 80068aa:	bf00      	nop
 80068ac:	08008b34 	.word	0x08008b34
 80068b0:	08008b54 	.word	0x08008b54
 80068b4:	08008b14 	.word	0x08008b14

080068b8 <__ascii_wctomb>:
 80068b8:	b149      	cbz	r1, 80068ce <__ascii_wctomb+0x16>
 80068ba:	2aff      	cmp	r2, #255	; 0xff
 80068bc:	bf85      	ittet	hi
 80068be:	238a      	movhi	r3, #138	; 0x8a
 80068c0:	6003      	strhi	r3, [r0, #0]
 80068c2:	700a      	strbls	r2, [r1, #0]
 80068c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80068c8:	bf98      	it	ls
 80068ca:	2001      	movls	r0, #1
 80068cc:	4770      	bx	lr
 80068ce:	4608      	mov	r0, r1
 80068d0:	4770      	bx	lr
	...

080068d4 <__swsetup_r>:
 80068d4:	4b32      	ldr	r3, [pc, #200]	; (80069a0 <__swsetup_r+0xcc>)
 80068d6:	b570      	push	{r4, r5, r6, lr}
 80068d8:	681d      	ldr	r5, [r3, #0]
 80068da:	4606      	mov	r6, r0
 80068dc:	460c      	mov	r4, r1
 80068de:	b125      	cbz	r5, 80068ea <__swsetup_r+0x16>
 80068e0:	69ab      	ldr	r3, [r5, #24]
 80068e2:	b913      	cbnz	r3, 80068ea <__swsetup_r+0x16>
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 f985 	bl	8006bf4 <__sinit>
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <__swsetup_r+0xd0>)
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d10f      	bne.n	8006910 <__swsetup_r+0x3c>
 80068f0:	686c      	ldr	r4, [r5, #4]
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068f8:	0719      	lsls	r1, r3, #28
 80068fa:	d42c      	bmi.n	8006956 <__swsetup_r+0x82>
 80068fc:	06dd      	lsls	r5, r3, #27
 80068fe:	d411      	bmi.n	8006924 <__swsetup_r+0x50>
 8006900:	2309      	movs	r3, #9
 8006902:	6033      	str	r3, [r6, #0]
 8006904:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	e03e      	b.n	800698e <__swsetup_r+0xba>
 8006910:	4b25      	ldr	r3, [pc, #148]	; (80069a8 <__swsetup_r+0xd4>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <__swsetup_r+0x46>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7eb      	b.n	80068f2 <__swsetup_r+0x1e>
 800691a:	4b24      	ldr	r3, [pc, #144]	; (80069ac <__swsetup_r+0xd8>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7e6      	b.n	80068f2 <__swsetup_r+0x1e>
 8006924:	0758      	lsls	r0, r3, #29
 8006926:	d512      	bpl.n	800694e <__swsetup_r+0x7a>
 8006928:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692a:	b141      	cbz	r1, 800693e <__swsetup_r+0x6a>
 800692c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006930:	4299      	cmp	r1, r3
 8006932:	d002      	beq.n	800693a <__swsetup_r+0x66>
 8006934:	4630      	mov	r0, r6
 8006936:	f7ff fb31 	bl	8005f9c <_free_r>
 800693a:	2300      	movs	r3, #0
 800693c:	6363      	str	r3, [r4, #52]	; 0x34
 800693e:	89a3      	ldrh	r3, [r4, #12]
 8006940:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006944:	81a3      	strh	r3, [r4, #12]
 8006946:	2300      	movs	r3, #0
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	89a3      	ldrh	r3, [r4, #12]
 8006950:	f043 0308 	orr.w	r3, r3, #8
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	b94b      	cbnz	r3, 800696e <__swsetup_r+0x9a>
 800695a:	89a3      	ldrh	r3, [r4, #12]
 800695c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006964:	d003      	beq.n	800696e <__swsetup_r+0x9a>
 8006966:	4621      	mov	r1, r4
 8006968:	4630      	mov	r0, r6
 800696a:	f000 fa09 	bl	8006d80 <__smakebuf_r>
 800696e:	89a0      	ldrh	r0, [r4, #12]
 8006970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006974:	f010 0301 	ands.w	r3, r0, #1
 8006978:	d00a      	beq.n	8006990 <__swsetup_r+0xbc>
 800697a:	2300      	movs	r3, #0
 800697c:	60a3      	str	r3, [r4, #8]
 800697e:	6963      	ldr	r3, [r4, #20]
 8006980:	425b      	negs	r3, r3
 8006982:	61a3      	str	r3, [r4, #24]
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	b943      	cbnz	r3, 800699a <__swsetup_r+0xc6>
 8006988:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800698c:	d1ba      	bne.n	8006904 <__swsetup_r+0x30>
 800698e:	bd70      	pop	{r4, r5, r6, pc}
 8006990:	0781      	lsls	r1, r0, #30
 8006992:	bf58      	it	pl
 8006994:	6963      	ldrpl	r3, [r4, #20]
 8006996:	60a3      	str	r3, [r4, #8]
 8006998:	e7f4      	b.n	8006984 <__swsetup_r+0xb0>
 800699a:	2000      	movs	r0, #0
 800699c:	e7f7      	b.n	800698e <__swsetup_r+0xba>
 800699e:	bf00      	nop
 80069a0:	20000030 	.word	0x20000030
 80069a4:	08008b34 	.word	0x08008b34
 80069a8:	08008b54 	.word	0x08008b54
 80069ac:	08008b14 	.word	0x08008b14

080069b0 <abort>:
 80069b0:	b508      	push	{r3, lr}
 80069b2:	2006      	movs	r0, #6
 80069b4:	f000 fa54 	bl	8006e60 <raise>
 80069b8:	2001      	movs	r0, #1
 80069ba:	f001 fc05 	bl	80081c8 <_exit>
	...

080069c0 <__sflush_r>:
 80069c0:	898a      	ldrh	r2, [r1, #12]
 80069c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069c6:	4605      	mov	r5, r0
 80069c8:	0710      	lsls	r0, r2, #28
 80069ca:	460c      	mov	r4, r1
 80069cc:	d458      	bmi.n	8006a80 <__sflush_r+0xc0>
 80069ce:	684b      	ldr	r3, [r1, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	dc05      	bgt.n	80069e0 <__sflush_r+0x20>
 80069d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dc02      	bgt.n	80069e0 <__sflush_r+0x20>
 80069da:	2000      	movs	r0, #0
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d0f9      	beq.n	80069da <__sflush_r+0x1a>
 80069e6:	2300      	movs	r3, #0
 80069e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069ec:	682f      	ldr	r7, [r5, #0]
 80069ee:	602b      	str	r3, [r5, #0]
 80069f0:	d032      	beq.n	8006a58 <__sflush_r+0x98>
 80069f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	075a      	lsls	r2, r3, #29
 80069f8:	d505      	bpl.n	8006a06 <__sflush_r+0x46>
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	1ac0      	subs	r0, r0, r3
 80069fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a00:	b10b      	cbz	r3, 8006a06 <__sflush_r+0x46>
 8006a02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a04:	1ac0      	subs	r0, r0, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	4602      	mov	r2, r0
 8006a0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a0c:	6a21      	ldr	r1, [r4, #32]
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b0      	blx	r6
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	d106      	bne.n	8006a26 <__sflush_r+0x66>
 8006a18:	6829      	ldr	r1, [r5, #0]
 8006a1a:	291d      	cmp	r1, #29
 8006a1c:	d82c      	bhi.n	8006a78 <__sflush_r+0xb8>
 8006a1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <__sflush_r+0x108>)
 8006a20:	40ca      	lsrs	r2, r1
 8006a22:	07d6      	lsls	r6, r2, #31
 8006a24:	d528      	bpl.n	8006a78 <__sflush_r+0xb8>
 8006a26:	2200      	movs	r2, #0
 8006a28:	6062      	str	r2, [r4, #4]
 8006a2a:	04d9      	lsls	r1, r3, #19
 8006a2c:	6922      	ldr	r2, [r4, #16]
 8006a2e:	6022      	str	r2, [r4, #0]
 8006a30:	d504      	bpl.n	8006a3c <__sflush_r+0x7c>
 8006a32:	1c42      	adds	r2, r0, #1
 8006a34:	d101      	bne.n	8006a3a <__sflush_r+0x7a>
 8006a36:	682b      	ldr	r3, [r5, #0]
 8006a38:	b903      	cbnz	r3, 8006a3c <__sflush_r+0x7c>
 8006a3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a3e:	602f      	str	r7, [r5, #0]
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d0ca      	beq.n	80069da <__sflush_r+0x1a>
 8006a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a48:	4299      	cmp	r1, r3
 8006a4a:	d002      	beq.n	8006a52 <__sflush_r+0x92>
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f7ff faa5 	bl	8005f9c <_free_r>
 8006a52:	2000      	movs	r0, #0
 8006a54:	6360      	str	r0, [r4, #52]	; 0x34
 8006a56:	e7c1      	b.n	80069dc <__sflush_r+0x1c>
 8006a58:	6a21      	ldr	r1, [r4, #32]
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b0      	blx	r6
 8006a60:	1c41      	adds	r1, r0, #1
 8006a62:	d1c7      	bne.n	80069f4 <__sflush_r+0x34>
 8006a64:	682b      	ldr	r3, [r5, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0c4      	beq.n	80069f4 <__sflush_r+0x34>
 8006a6a:	2b1d      	cmp	r3, #29
 8006a6c:	d001      	beq.n	8006a72 <__sflush_r+0xb2>
 8006a6e:	2b16      	cmp	r3, #22
 8006a70:	d101      	bne.n	8006a76 <__sflush_r+0xb6>
 8006a72:	602f      	str	r7, [r5, #0]
 8006a74:	e7b1      	b.n	80069da <__sflush_r+0x1a>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7c:	81a3      	strh	r3, [r4, #12]
 8006a7e:	e7ad      	b.n	80069dc <__sflush_r+0x1c>
 8006a80:	690f      	ldr	r7, [r1, #16]
 8006a82:	2f00      	cmp	r7, #0
 8006a84:	d0a9      	beq.n	80069da <__sflush_r+0x1a>
 8006a86:	0793      	lsls	r3, r2, #30
 8006a88:	680e      	ldr	r6, [r1, #0]
 8006a8a:	bf08      	it	eq
 8006a8c:	694b      	ldreq	r3, [r1, #20]
 8006a8e:	600f      	str	r7, [r1, #0]
 8006a90:	bf18      	it	ne
 8006a92:	2300      	movne	r3, #0
 8006a94:	eba6 0807 	sub.w	r8, r6, r7
 8006a98:	608b      	str	r3, [r1, #8]
 8006a9a:	f1b8 0f00 	cmp.w	r8, #0
 8006a9e:	dd9c      	ble.n	80069da <__sflush_r+0x1a>
 8006aa0:	6a21      	ldr	r1, [r4, #32]
 8006aa2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006aa4:	4643      	mov	r3, r8
 8006aa6:	463a      	mov	r2, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b0      	blx	r6
 8006aac:	2800      	cmp	r0, #0
 8006aae:	dc06      	bgt.n	8006abe <__sflush_r+0xfe>
 8006ab0:	89a3      	ldrh	r3, [r4, #12]
 8006ab2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ab6:	81a3      	strh	r3, [r4, #12]
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	e78e      	b.n	80069dc <__sflush_r+0x1c>
 8006abe:	4407      	add	r7, r0
 8006ac0:	eba8 0800 	sub.w	r8, r8, r0
 8006ac4:	e7e9      	b.n	8006a9a <__sflush_r+0xda>
 8006ac6:	bf00      	nop
 8006ac8:	20400001 	.word	0x20400001

08006acc <_fflush_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	690b      	ldr	r3, [r1, #16]
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b913      	cbnz	r3, 8006adc <_fflush_r+0x10>
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	4628      	mov	r0, r5
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	b118      	cbz	r0, 8006ae6 <_fflush_r+0x1a>
 8006ade:	6983      	ldr	r3, [r0, #24]
 8006ae0:	b90b      	cbnz	r3, 8006ae6 <_fflush_r+0x1a>
 8006ae2:	f000 f887 	bl	8006bf4 <__sinit>
 8006ae6:	4b14      	ldr	r3, [pc, #80]	; (8006b38 <_fflush_r+0x6c>)
 8006ae8:	429c      	cmp	r4, r3
 8006aea:	d11b      	bne.n	8006b24 <_fflush_r+0x58>
 8006aec:	686c      	ldr	r4, [r5, #4]
 8006aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ef      	beq.n	8006ad6 <_fflush_r+0xa>
 8006af6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006af8:	07d0      	lsls	r0, r2, #31
 8006afa:	d404      	bmi.n	8006b06 <_fflush_r+0x3a>
 8006afc:	0599      	lsls	r1, r3, #22
 8006afe:	d402      	bmi.n	8006b06 <_fflush_r+0x3a>
 8006b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b02:	f000 f915 	bl	8006d30 <__retarget_lock_acquire_recursive>
 8006b06:	4628      	mov	r0, r5
 8006b08:	4621      	mov	r1, r4
 8006b0a:	f7ff ff59 	bl	80069c0 <__sflush_r>
 8006b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b10:	07da      	lsls	r2, r3, #31
 8006b12:	4605      	mov	r5, r0
 8006b14:	d4e0      	bmi.n	8006ad8 <_fflush_r+0xc>
 8006b16:	89a3      	ldrh	r3, [r4, #12]
 8006b18:	059b      	lsls	r3, r3, #22
 8006b1a:	d4dd      	bmi.n	8006ad8 <_fflush_r+0xc>
 8006b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b1e:	f000 f908 	bl	8006d32 <__retarget_lock_release_recursive>
 8006b22:	e7d9      	b.n	8006ad8 <_fflush_r+0xc>
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <_fflush_r+0x70>)
 8006b26:	429c      	cmp	r4, r3
 8006b28:	d101      	bne.n	8006b2e <_fflush_r+0x62>
 8006b2a:	68ac      	ldr	r4, [r5, #8]
 8006b2c:	e7df      	b.n	8006aee <_fflush_r+0x22>
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <_fflush_r+0x74>)
 8006b30:	429c      	cmp	r4, r3
 8006b32:	bf08      	it	eq
 8006b34:	68ec      	ldreq	r4, [r5, #12]
 8006b36:	e7da      	b.n	8006aee <_fflush_r+0x22>
 8006b38:	08008b34 	.word	0x08008b34
 8006b3c:	08008b54 	.word	0x08008b54
 8006b40:	08008b14 	.word	0x08008b14

08006b44 <std>:
 8006b44:	2300      	movs	r3, #0
 8006b46:	b510      	push	{r4, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006b4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b52:	6083      	str	r3, [r0, #8]
 8006b54:	8181      	strh	r1, [r0, #12]
 8006b56:	6643      	str	r3, [r0, #100]	; 0x64
 8006b58:	81c2      	strh	r2, [r0, #14]
 8006b5a:	6183      	str	r3, [r0, #24]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	2208      	movs	r2, #8
 8006b60:	305c      	adds	r0, #92	; 0x5c
 8006b62:	f7fd fb5b 	bl	800421c <memset>
 8006b66:	4b05      	ldr	r3, [pc, #20]	; (8006b7c <std+0x38>)
 8006b68:	6263      	str	r3, [r4, #36]	; 0x24
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <std+0x3c>)
 8006b6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b6e:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <std+0x40>)
 8006b70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <std+0x44>)
 8006b74:	6224      	str	r4, [r4, #32]
 8006b76:	6323      	str	r3, [r4, #48]	; 0x30
 8006b78:	bd10      	pop	{r4, pc}
 8006b7a:	bf00      	nop
 8006b7c:	08006e99 	.word	0x08006e99
 8006b80:	08006ebb 	.word	0x08006ebb
 8006b84:	08006ef3 	.word	0x08006ef3
 8006b88:	08006f17 	.word	0x08006f17

08006b8c <_cleanup_r>:
 8006b8c:	4901      	ldr	r1, [pc, #4]	; (8006b94 <_cleanup_r+0x8>)
 8006b8e:	f000 b8af 	b.w	8006cf0 <_fwalk_reent>
 8006b92:	bf00      	nop
 8006b94:	08006acd 	.word	0x08006acd

08006b98 <__sfmoreglue>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	2268      	movs	r2, #104	; 0x68
 8006b9c:	1e4d      	subs	r5, r1, #1
 8006b9e:	4355      	muls	r5, r2
 8006ba0:	460e      	mov	r6, r1
 8006ba2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006ba6:	f7ff fa65 	bl	8006074 <_malloc_r>
 8006baa:	4604      	mov	r4, r0
 8006bac:	b140      	cbz	r0, 8006bc0 <__sfmoreglue+0x28>
 8006bae:	2100      	movs	r1, #0
 8006bb0:	e9c0 1600 	strd	r1, r6, [r0]
 8006bb4:	300c      	adds	r0, #12
 8006bb6:	60a0      	str	r0, [r4, #8]
 8006bb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006bbc:	f7fd fb2e 	bl	800421c <memset>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	bd70      	pop	{r4, r5, r6, pc}

08006bc4 <__sfp_lock_acquire>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__sfp_lock_acquire+0x8>)
 8006bc6:	f000 b8b3 	b.w	8006d30 <__retarget_lock_acquire_recursive>
 8006bca:	bf00      	nop
 8006bcc:	2000027d 	.word	0x2000027d

08006bd0 <__sfp_lock_release>:
 8006bd0:	4801      	ldr	r0, [pc, #4]	; (8006bd8 <__sfp_lock_release+0x8>)
 8006bd2:	f000 b8ae 	b.w	8006d32 <__retarget_lock_release_recursive>
 8006bd6:	bf00      	nop
 8006bd8:	2000027d 	.word	0x2000027d

08006bdc <__sinit_lock_acquire>:
 8006bdc:	4801      	ldr	r0, [pc, #4]	; (8006be4 <__sinit_lock_acquire+0x8>)
 8006bde:	f000 b8a7 	b.w	8006d30 <__retarget_lock_acquire_recursive>
 8006be2:	bf00      	nop
 8006be4:	2000027e 	.word	0x2000027e

08006be8 <__sinit_lock_release>:
 8006be8:	4801      	ldr	r0, [pc, #4]	; (8006bf0 <__sinit_lock_release+0x8>)
 8006bea:	f000 b8a2 	b.w	8006d32 <__retarget_lock_release_recursive>
 8006bee:	bf00      	nop
 8006bf0:	2000027e 	.word	0x2000027e

08006bf4 <__sinit>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4604      	mov	r4, r0
 8006bf8:	f7ff fff0 	bl	8006bdc <__sinit_lock_acquire>
 8006bfc:	69a3      	ldr	r3, [r4, #24]
 8006bfe:	b11b      	cbz	r3, 8006c08 <__sinit+0x14>
 8006c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c04:	f7ff bff0 	b.w	8006be8 <__sinit_lock_release>
 8006c08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006c0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006c0e:	4b13      	ldr	r3, [pc, #76]	; (8006c5c <__sinit+0x68>)
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <__sinit+0x6c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	bf04      	itt	eq
 8006c1a:	2301      	moveq	r3, #1
 8006c1c:	61a3      	streq	r3, [r4, #24]
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f000 f820 	bl	8006c64 <__sfp>
 8006c24:	6060      	str	r0, [r4, #4]
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f81c 	bl	8006c64 <__sfp>
 8006c2c:	60a0      	str	r0, [r4, #8]
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f000 f818 	bl	8006c64 <__sfp>
 8006c34:	2200      	movs	r2, #0
 8006c36:	60e0      	str	r0, [r4, #12]
 8006c38:	2104      	movs	r1, #4
 8006c3a:	6860      	ldr	r0, [r4, #4]
 8006c3c:	f7ff ff82 	bl	8006b44 <std>
 8006c40:	68a0      	ldr	r0, [r4, #8]
 8006c42:	2201      	movs	r2, #1
 8006c44:	2109      	movs	r1, #9
 8006c46:	f7ff ff7d 	bl	8006b44 <std>
 8006c4a:	68e0      	ldr	r0, [r4, #12]
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	2112      	movs	r1, #18
 8006c50:	f7ff ff78 	bl	8006b44 <std>
 8006c54:	2301      	movs	r3, #1
 8006c56:	61a3      	str	r3, [r4, #24]
 8006c58:	e7d2      	b.n	8006c00 <__sinit+0xc>
 8006c5a:	bf00      	nop
 8006c5c:	08008798 	.word	0x08008798
 8006c60:	08006b8d 	.word	0x08006b8d

08006c64 <__sfp>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	4607      	mov	r7, r0
 8006c68:	f7ff ffac 	bl	8006bc4 <__sfp_lock_acquire>
 8006c6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <__sfp+0x84>)
 8006c6e:	681e      	ldr	r6, [r3, #0]
 8006c70:	69b3      	ldr	r3, [r6, #24]
 8006c72:	b913      	cbnz	r3, 8006c7a <__sfp+0x16>
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff ffbd 	bl	8006bf4 <__sinit>
 8006c7a:	3648      	adds	r6, #72	; 0x48
 8006c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	d503      	bpl.n	8006c8c <__sfp+0x28>
 8006c84:	6833      	ldr	r3, [r6, #0]
 8006c86:	b30b      	cbz	r3, 8006ccc <__sfp+0x68>
 8006c88:	6836      	ldr	r6, [r6, #0]
 8006c8a:	e7f7      	b.n	8006c7c <__sfp+0x18>
 8006c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c90:	b9d5      	cbnz	r5, 8006cc8 <__sfp+0x64>
 8006c92:	4b16      	ldr	r3, [pc, #88]	; (8006cec <__sfp+0x88>)
 8006c94:	60e3      	str	r3, [r4, #12]
 8006c96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006c9c:	f000 f847 	bl	8006d2e <__retarget_lock_init_recursive>
 8006ca0:	f7ff ff96 	bl	8006bd0 <__sfp_lock_release>
 8006ca4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ca8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006cac:	6025      	str	r5, [r4, #0]
 8006cae:	61a5      	str	r5, [r4, #24]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006cb8:	f7fd fab0 	bl	800421c <memset>
 8006cbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006cc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc8:	3468      	adds	r4, #104	; 0x68
 8006cca:	e7d9      	b.n	8006c80 <__sfp+0x1c>
 8006ccc:	2104      	movs	r1, #4
 8006cce:	4638      	mov	r0, r7
 8006cd0:	f7ff ff62 	bl	8006b98 <__sfmoreglue>
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	6030      	str	r0, [r6, #0]
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d1d5      	bne.n	8006c88 <__sfp+0x24>
 8006cdc:	f7ff ff78 	bl	8006bd0 <__sfp_lock_release>
 8006ce0:	230c      	movs	r3, #12
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	e7ee      	b.n	8006cc4 <__sfp+0x60>
 8006ce6:	bf00      	nop
 8006ce8:	08008798 	.word	0x08008798
 8006cec:	ffff0001 	.word	0xffff0001

08006cf0 <_fwalk_reent>:
 8006cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf4:	4606      	mov	r6, r0
 8006cf6:	4688      	mov	r8, r1
 8006cf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cfc:	2700      	movs	r7, #0
 8006cfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d02:	f1b9 0901 	subs.w	r9, r9, #1
 8006d06:	d505      	bpl.n	8006d14 <_fwalk_reent+0x24>
 8006d08:	6824      	ldr	r4, [r4, #0]
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d1f7      	bne.n	8006cfe <_fwalk_reent+0xe>
 8006d0e:	4638      	mov	r0, r7
 8006d10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d14:	89ab      	ldrh	r3, [r5, #12]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d907      	bls.n	8006d2a <_fwalk_reent+0x3a>
 8006d1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	d003      	beq.n	8006d2a <_fwalk_reent+0x3a>
 8006d22:	4629      	mov	r1, r5
 8006d24:	4630      	mov	r0, r6
 8006d26:	47c0      	blx	r8
 8006d28:	4307      	orrs	r7, r0
 8006d2a:	3568      	adds	r5, #104	; 0x68
 8006d2c:	e7e9      	b.n	8006d02 <_fwalk_reent+0x12>

08006d2e <__retarget_lock_init_recursive>:
 8006d2e:	4770      	bx	lr

08006d30 <__retarget_lock_acquire_recursive>:
 8006d30:	4770      	bx	lr

08006d32 <__retarget_lock_release_recursive>:
 8006d32:	4770      	bx	lr

08006d34 <__swhatbuf_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	460e      	mov	r6, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	b096      	sub	sp, #88	; 0x58
 8006d40:	4614      	mov	r4, r2
 8006d42:	461d      	mov	r5, r3
 8006d44:	da08      	bge.n	8006d58 <__swhatbuf_r+0x24>
 8006d46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	602a      	str	r2, [r5, #0]
 8006d4e:	061a      	lsls	r2, r3, #24
 8006d50:	d410      	bmi.n	8006d74 <__swhatbuf_r+0x40>
 8006d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d56:	e00e      	b.n	8006d76 <__swhatbuf_r+0x42>
 8006d58:	466a      	mov	r2, sp
 8006d5a:	f000 f903 	bl	8006f64 <_fstat_r>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	dbf1      	blt.n	8006d46 <__swhatbuf_r+0x12>
 8006d62:	9a01      	ldr	r2, [sp, #4]
 8006d64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d6c:	425a      	negs	r2, r3
 8006d6e:	415a      	adcs	r2, r3
 8006d70:	602a      	str	r2, [r5, #0]
 8006d72:	e7ee      	b.n	8006d52 <__swhatbuf_r+0x1e>
 8006d74:	2340      	movs	r3, #64	; 0x40
 8006d76:	2000      	movs	r0, #0
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	b016      	add	sp, #88	; 0x58
 8006d7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d80 <__smakebuf_r>:
 8006d80:	898b      	ldrh	r3, [r1, #12]
 8006d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d84:	079d      	lsls	r5, r3, #30
 8006d86:	4606      	mov	r6, r0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	d507      	bpl.n	8006d9c <__smakebuf_r+0x1c>
 8006d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	2301      	movs	r3, #1
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	ab01      	add	r3, sp, #4
 8006d9e:	466a      	mov	r2, sp
 8006da0:	f7ff ffc8 	bl	8006d34 <__swhatbuf_r>
 8006da4:	9900      	ldr	r1, [sp, #0]
 8006da6:	4605      	mov	r5, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff f963 	bl	8006074 <_malloc_r>
 8006dae:	b948      	cbnz	r0, 8006dc4 <__smakebuf_r+0x44>
 8006db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db4:	059a      	lsls	r2, r3, #22
 8006db6:	d4ef      	bmi.n	8006d98 <__smakebuf_r+0x18>
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7e3      	b.n	8006d8c <__smakebuf_r+0xc>
 8006dc4:	4b0d      	ldr	r3, [pc, #52]	; (8006dfc <__smakebuf_r+0x7c>)
 8006dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	6020      	str	r0, [r4, #0]
 8006dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd0:	81a3      	strh	r3, [r4, #12]
 8006dd2:	9b00      	ldr	r3, [sp, #0]
 8006dd4:	6163      	str	r3, [r4, #20]
 8006dd6:	9b01      	ldr	r3, [sp, #4]
 8006dd8:	6120      	str	r0, [r4, #16]
 8006dda:	b15b      	cbz	r3, 8006df4 <__smakebuf_r+0x74>
 8006ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de0:	4630      	mov	r0, r6
 8006de2:	f000 f8d1 	bl	8006f88 <_isatty_r>
 8006de6:	b128      	cbz	r0, 8006df4 <__smakebuf_r+0x74>
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	f023 0303 	bic.w	r3, r3, #3
 8006dee:	f043 0301 	orr.w	r3, r3, #1
 8006df2:	81a3      	strh	r3, [r4, #12]
 8006df4:	89a0      	ldrh	r0, [r4, #12]
 8006df6:	4305      	orrs	r5, r0
 8006df8:	81a5      	strh	r5, [r4, #12]
 8006dfa:	e7cd      	b.n	8006d98 <__smakebuf_r+0x18>
 8006dfc:	08006b8d 	.word	0x08006b8d

08006e00 <_malloc_usable_size_r>:
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f18      	subs	r0, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfbc      	itt	lt
 8006e0a:	580b      	ldrlt	r3, [r1, r0]
 8006e0c:	18c0      	addlt	r0, r0, r3
 8006e0e:	4770      	bx	lr

08006e10 <_raise_r>:
 8006e10:	291f      	cmp	r1, #31
 8006e12:	b538      	push	{r3, r4, r5, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	460d      	mov	r5, r1
 8006e18:	d904      	bls.n	8006e24 <_raise_r+0x14>
 8006e1a:	2316      	movs	r3, #22
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e26:	b112      	cbz	r2, 8006e2e <_raise_r+0x1e>
 8006e28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e2c:	b94b      	cbnz	r3, 8006e42 <_raise_r+0x32>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f830 	bl	8006e94 <_getpid_r>
 8006e34:	462a      	mov	r2, r5
 8006e36:	4601      	mov	r1, r0
 8006e38:	4620      	mov	r0, r4
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f000 b817 	b.w	8006e70 <_kill_r>
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d00a      	beq.n	8006e5c <_raise_r+0x4c>
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	d103      	bne.n	8006e52 <_raise_r+0x42>
 8006e4a:	2316      	movs	r3, #22
 8006e4c:	6003      	str	r3, [r0, #0]
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7e7      	b.n	8006e22 <_raise_r+0x12>
 8006e52:	2400      	movs	r4, #0
 8006e54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e58:	4628      	mov	r0, r5
 8006e5a:	4798      	blx	r3
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e7e0      	b.n	8006e22 <_raise_r+0x12>

08006e60 <raise>:
 8006e60:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <raise+0xc>)
 8006e62:	4601      	mov	r1, r0
 8006e64:	6818      	ldr	r0, [r3, #0]
 8006e66:	f7ff bfd3 	b.w	8006e10 <_raise_r>
 8006e6a:	bf00      	nop
 8006e6c:	20000030 	.word	0x20000030

08006e70 <_kill_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4d07      	ldr	r5, [pc, #28]	; (8006e90 <_kill_r+0x20>)
 8006e74:	2300      	movs	r3, #0
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	602b      	str	r3, [r5, #0]
 8006e7e:	f001 f975 	bl	800816c <_kill>
 8006e82:	1c43      	adds	r3, r0, #1
 8006e84:	d102      	bne.n	8006e8c <_kill_r+0x1c>
 8006e86:	682b      	ldr	r3, [r5, #0]
 8006e88:	b103      	cbz	r3, 8006e8c <_kill_r+0x1c>
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000278 	.word	0x20000278

08006e94 <_getpid_r>:
 8006e94:	f001 b95a 	b.w	800814c <_getpid>

08006e98 <__sread>:
 8006e98:	b510      	push	{r4, lr}
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ea0:	f000 f894 	bl	8006fcc <_read_r>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	bfab      	itete	ge
 8006ea8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006eaa:	89a3      	ldrhlt	r3, [r4, #12]
 8006eac:	181b      	addge	r3, r3, r0
 8006eae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006eb2:	bfac      	ite	ge
 8006eb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006eb6:	81a3      	strhlt	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__swrite>:
 8006eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ebe:	461f      	mov	r7, r3
 8006ec0:	898b      	ldrh	r3, [r1, #12]
 8006ec2:	05db      	lsls	r3, r3, #23
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	460c      	mov	r4, r1
 8006ec8:	4616      	mov	r6, r2
 8006eca:	d505      	bpl.n	8006ed8 <__swrite+0x1e>
 8006ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f000 f868 	bl	8006fa8 <_lseek_r>
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	4632      	mov	r2, r6
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	4628      	mov	r0, r5
 8006eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eee:	f000 b817 	b.w	8006f20 <_write_r>

08006ef2 <__sseek>:
 8006ef2:	b510      	push	{r4, lr}
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efa:	f000 f855 	bl	8006fa8 <_lseek_r>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	bf15      	itete	ne
 8006f04:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f0e:	81a3      	strheq	r3, [r4, #12]
 8006f10:	bf18      	it	ne
 8006f12:	81a3      	strhne	r3, [r4, #12]
 8006f14:	bd10      	pop	{r4, pc}

08006f16 <__sclose>:
 8006f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1a:	f000 b813 	b.w	8006f44 <_close_r>
	...

08006f20 <_write_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	; (8006f40 <_write_r+0x20>)
 8006f24:	4604      	mov	r4, r0
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f001 f942 	bl	80081b8 <_write>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_write_r+0x1e>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_write_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	20000278 	.word	0x20000278

08006f44 <_close_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_close_r+0x1c>)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	4608      	mov	r0, r1
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	f001 f8ec 	bl	800812c <_close>
 8006f54:	1c43      	adds	r3, r0, #1
 8006f56:	d102      	bne.n	8006f5e <_close_r+0x1a>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	b103      	cbz	r3, 8006f5e <_close_r+0x1a>
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	bd38      	pop	{r3, r4, r5, pc}
 8006f60:	20000278 	.word	0x20000278

08006f64 <_fstat_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d07      	ldr	r5, [pc, #28]	; (8006f84 <_fstat_r+0x20>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	4611      	mov	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f001 f8e3 	bl	800813c <_fstat>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d102      	bne.n	8006f80 <_fstat_r+0x1c>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	b103      	cbz	r3, 8006f80 <_fstat_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd38      	pop	{r3, r4, r5, pc}
 8006f82:	bf00      	nop
 8006f84:	20000278 	.word	0x20000278

08006f88 <_isatty_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d06      	ldr	r5, [pc, #24]	; (8006fa4 <_isatty_r+0x1c>)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f001 f8e2 	bl	800815c <_isatty>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_isatty_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_isatty_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000278 	.word	0x20000278

08006fa8 <_lseek_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	; (8006fc8 <_lseek_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f001 f8e0 	bl	800817c <_lseek>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_lseek_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_lseek_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	20000278 	.word	0x20000278

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	; (8006fec <_read_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f001 f8d6 	bl	800818c <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20000278 	.word	0x20000278

08006ff0 <cos>:
 8006ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ff2:	ec53 2b10 	vmov	r2, r3, d0
 8006ff6:	4826      	ldr	r0, [pc, #152]	; (8007090 <cos+0xa0>)
 8006ff8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ffc:	4281      	cmp	r1, r0
 8006ffe:	dc06      	bgt.n	800700e <cos+0x1e>
 8007000:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007088 <cos+0x98>
 8007004:	b005      	add	sp, #20
 8007006:	f85d eb04 	ldr.w	lr, [sp], #4
 800700a:	f000 baa9 	b.w	8007560 <__kernel_cos>
 800700e:	4821      	ldr	r0, [pc, #132]	; (8007094 <cos+0xa4>)
 8007010:	4281      	cmp	r1, r0
 8007012:	dd09      	ble.n	8007028 <cos+0x38>
 8007014:	ee10 0a10 	vmov	r0, s0
 8007018:	4619      	mov	r1, r3
 800701a:	f7f9 f93d 	bl	8000298 <__aeabi_dsub>
 800701e:	ec41 0b10 	vmov	d0, r0, r1
 8007022:	b005      	add	sp, #20
 8007024:	f85d fb04 	ldr.w	pc, [sp], #4
 8007028:	4668      	mov	r0, sp
 800702a:	f000 f88d 	bl	8007148 <__ieee754_rem_pio2>
 800702e:	f000 0003 	and.w	r0, r0, #3
 8007032:	2801      	cmp	r0, #1
 8007034:	d00b      	beq.n	800704e <cos+0x5e>
 8007036:	2802      	cmp	r0, #2
 8007038:	d016      	beq.n	8007068 <cos+0x78>
 800703a:	b9e0      	cbnz	r0, 8007076 <cos+0x86>
 800703c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007040:	ed9d 0b00 	vldr	d0, [sp]
 8007044:	f000 fa8c 	bl	8007560 <__kernel_cos>
 8007048:	ec51 0b10 	vmov	r0, r1, d0
 800704c:	e7e7      	b.n	800701e <cos+0x2e>
 800704e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007052:	ed9d 0b00 	vldr	d0, [sp]
 8007056:	f000 fe9b 	bl	8007d90 <__kernel_sin>
 800705a:	ec53 2b10 	vmov	r2, r3, d0
 800705e:	ee10 0a10 	vmov	r0, s0
 8007062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007066:	e7da      	b.n	800701e <cos+0x2e>
 8007068:	ed9d 1b02 	vldr	d1, [sp, #8]
 800706c:	ed9d 0b00 	vldr	d0, [sp]
 8007070:	f000 fa76 	bl	8007560 <__kernel_cos>
 8007074:	e7f1      	b.n	800705a <cos+0x6a>
 8007076:	ed9d 1b02 	vldr	d1, [sp, #8]
 800707a:	ed9d 0b00 	vldr	d0, [sp]
 800707e:	2001      	movs	r0, #1
 8007080:	f000 fe86 	bl	8007d90 <__kernel_sin>
 8007084:	e7e0      	b.n	8007048 <cos+0x58>
 8007086:	bf00      	nop
	...
 8007090:	3fe921fb 	.word	0x3fe921fb
 8007094:	7fefffff 	.word	0x7fefffff

08007098 <sin>:
 8007098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800709a:	ec53 2b10 	vmov	r2, r3, d0
 800709e:	4828      	ldr	r0, [pc, #160]	; (8007140 <sin+0xa8>)
 80070a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070a4:	4281      	cmp	r1, r0
 80070a6:	dc07      	bgt.n	80070b8 <sin+0x20>
 80070a8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007138 <sin+0xa0>
 80070ac:	2000      	movs	r0, #0
 80070ae:	b005      	add	sp, #20
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	f000 be6c 	b.w	8007d90 <__kernel_sin>
 80070b8:	4822      	ldr	r0, [pc, #136]	; (8007144 <sin+0xac>)
 80070ba:	4281      	cmp	r1, r0
 80070bc:	dd09      	ble.n	80070d2 <sin+0x3a>
 80070be:	ee10 0a10 	vmov	r0, s0
 80070c2:	4619      	mov	r1, r3
 80070c4:	f7f9 f8e8 	bl	8000298 <__aeabi_dsub>
 80070c8:	ec41 0b10 	vmov	d0, r0, r1
 80070cc:	b005      	add	sp, #20
 80070ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80070d2:	4668      	mov	r0, sp
 80070d4:	f000 f838 	bl	8007148 <__ieee754_rem_pio2>
 80070d8:	f000 0003 	and.w	r0, r0, #3
 80070dc:	2801      	cmp	r0, #1
 80070de:	d00c      	beq.n	80070fa <sin+0x62>
 80070e0:	2802      	cmp	r0, #2
 80070e2:	d011      	beq.n	8007108 <sin+0x70>
 80070e4:	b9f0      	cbnz	r0, 8007124 <sin+0x8c>
 80070e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070ea:	ed9d 0b00 	vldr	d0, [sp]
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 fe4e 	bl	8007d90 <__kernel_sin>
 80070f4:	ec51 0b10 	vmov	r0, r1, d0
 80070f8:	e7e6      	b.n	80070c8 <sin+0x30>
 80070fa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80070fe:	ed9d 0b00 	vldr	d0, [sp]
 8007102:	f000 fa2d 	bl	8007560 <__kernel_cos>
 8007106:	e7f5      	b.n	80070f4 <sin+0x5c>
 8007108:	ed9d 1b02 	vldr	d1, [sp, #8]
 800710c:	ed9d 0b00 	vldr	d0, [sp]
 8007110:	2001      	movs	r0, #1
 8007112:	f000 fe3d 	bl	8007d90 <__kernel_sin>
 8007116:	ec53 2b10 	vmov	r2, r3, d0
 800711a:	ee10 0a10 	vmov	r0, s0
 800711e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007122:	e7d1      	b.n	80070c8 <sin+0x30>
 8007124:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007128:	ed9d 0b00 	vldr	d0, [sp]
 800712c:	f000 fa18 	bl	8007560 <__kernel_cos>
 8007130:	e7f1      	b.n	8007116 <sin+0x7e>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
	...
 8007140:	3fe921fb 	.word	0x3fe921fb
 8007144:	7fefffff 	.word	0x7fefffff

08007148 <__ieee754_rem_pio2>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	ed2d 8b02 	vpush	{d8}
 8007150:	ec55 4b10 	vmov	r4, r5, d0
 8007154:	4bca      	ldr	r3, [pc, #808]	; (8007480 <__ieee754_rem_pio2+0x338>)
 8007156:	b08b      	sub	sp, #44	; 0x2c
 8007158:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800715c:	4598      	cmp	r8, r3
 800715e:	4682      	mov	sl, r0
 8007160:	9502      	str	r5, [sp, #8]
 8007162:	dc08      	bgt.n	8007176 <__ieee754_rem_pio2+0x2e>
 8007164:	2200      	movs	r2, #0
 8007166:	2300      	movs	r3, #0
 8007168:	ed80 0b00 	vstr	d0, [r0]
 800716c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007170:	f04f 0b00 	mov.w	fp, #0
 8007174:	e028      	b.n	80071c8 <__ieee754_rem_pio2+0x80>
 8007176:	4bc3      	ldr	r3, [pc, #780]	; (8007484 <__ieee754_rem_pio2+0x33c>)
 8007178:	4598      	cmp	r8, r3
 800717a:	dc78      	bgt.n	800726e <__ieee754_rem_pio2+0x126>
 800717c:	9b02      	ldr	r3, [sp, #8]
 800717e:	4ec2      	ldr	r6, [pc, #776]	; (8007488 <__ieee754_rem_pio2+0x340>)
 8007180:	2b00      	cmp	r3, #0
 8007182:	ee10 0a10 	vmov	r0, s0
 8007186:	a3b0      	add	r3, pc, #704	; (adr r3, 8007448 <__ieee754_rem_pio2+0x300>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4629      	mov	r1, r5
 800718e:	dd39      	ble.n	8007204 <__ieee754_rem_pio2+0xbc>
 8007190:	f7f9 f882 	bl	8000298 <__aeabi_dsub>
 8007194:	45b0      	cmp	r8, r6
 8007196:	4604      	mov	r4, r0
 8007198:	460d      	mov	r5, r1
 800719a:	d01b      	beq.n	80071d4 <__ieee754_rem_pio2+0x8c>
 800719c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007450 <__ieee754_rem_pio2+0x308>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f9 f879 	bl	8000298 <__aeabi_dsub>
 80071a6:	4602      	mov	r2, r0
 80071a8:	460b      	mov	r3, r1
 80071aa:	e9ca 2300 	strd	r2, r3, [sl]
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 f871 	bl	8000298 <__aeabi_dsub>
 80071b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007450 <__ieee754_rem_pio2+0x308>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f86c 	bl	8000298 <__aeabi_dsub>
 80071c0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071c4:	f04f 0b01 	mov.w	fp, #1
 80071c8:	4658      	mov	r0, fp
 80071ca:	b00b      	add	sp, #44	; 0x2c
 80071cc:	ecbd 8b02 	vpop	{d8}
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007458 <__ieee754_rem_pio2+0x310>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f85d 	bl	8000298 <__aeabi_dsub>
 80071de:	a3a0      	add	r3, pc, #640	; (adr r3, 8007460 <__ieee754_rem_pio2+0x318>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	4604      	mov	r4, r0
 80071e6:	460d      	mov	r5, r1
 80071e8:	f7f9 f856 	bl	8000298 <__aeabi_dsub>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	e9ca 2300 	strd	r2, r3, [sl]
 80071f4:	4620      	mov	r0, r4
 80071f6:	4629      	mov	r1, r5
 80071f8:	f7f9 f84e 	bl	8000298 <__aeabi_dsub>
 80071fc:	a398      	add	r3, pc, #608	; (adr r3, 8007460 <__ieee754_rem_pio2+0x318>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	e7db      	b.n	80071bc <__ieee754_rem_pio2+0x74>
 8007204:	f7f9 f84a 	bl	800029c <__adddf3>
 8007208:	45b0      	cmp	r8, r6
 800720a:	4604      	mov	r4, r0
 800720c:	460d      	mov	r5, r1
 800720e:	d016      	beq.n	800723e <__ieee754_rem_pio2+0xf6>
 8007210:	a38f      	add	r3, pc, #572	; (adr r3, 8007450 <__ieee754_rem_pio2+0x308>)
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	f7f9 f841 	bl	800029c <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	e9ca 2300 	strd	r2, r3, [sl]
 8007222:	4620      	mov	r0, r4
 8007224:	4629      	mov	r1, r5
 8007226:	f7f9 f837 	bl	8000298 <__aeabi_dsub>
 800722a:	a389      	add	r3, pc, #548	; (adr r3, 8007450 <__ieee754_rem_pio2+0x308>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f834 	bl	800029c <__adddf3>
 8007234:	f04f 3bff 	mov.w	fp, #4294967295
 8007238:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800723c:	e7c4      	b.n	80071c8 <__ieee754_rem_pio2+0x80>
 800723e:	a386      	add	r3, pc, #536	; (adr r3, 8007458 <__ieee754_rem_pio2+0x310>)
 8007240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007244:	f7f9 f82a 	bl	800029c <__adddf3>
 8007248:	a385      	add	r3, pc, #532	; (adr r3, 8007460 <__ieee754_rem_pio2+0x318>)
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	4604      	mov	r4, r0
 8007250:	460d      	mov	r5, r1
 8007252:	f7f9 f823 	bl	800029c <__adddf3>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	e9ca 2300 	strd	r2, r3, [sl]
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 f819 	bl	8000298 <__aeabi_dsub>
 8007266:	a37e      	add	r3, pc, #504	; (adr r3, 8007460 <__ieee754_rem_pio2+0x318>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	e7e0      	b.n	8007230 <__ieee754_rem_pio2+0xe8>
 800726e:	4b87      	ldr	r3, [pc, #540]	; (800748c <__ieee754_rem_pio2+0x344>)
 8007270:	4598      	cmp	r8, r3
 8007272:	f300 80d9 	bgt.w	8007428 <__ieee754_rem_pio2+0x2e0>
 8007276:	f000 fe49 	bl	8007f0c <fabs>
 800727a:	ec55 4b10 	vmov	r4, r5, d0
 800727e:	ee10 0a10 	vmov	r0, s0
 8007282:	a379      	add	r3, pc, #484	; (adr r3, 8007468 <__ieee754_rem_pio2+0x320>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	4629      	mov	r1, r5
 800728a:	f7f9 f9bd 	bl	8000608 <__aeabi_dmul>
 800728e:	4b80      	ldr	r3, [pc, #512]	; (8007490 <__ieee754_rem_pio2+0x348>)
 8007290:	2200      	movs	r2, #0
 8007292:	f7f9 f803 	bl	800029c <__adddf3>
 8007296:	f7f9 fc67 	bl	8000b68 <__aeabi_d2iz>
 800729a:	4683      	mov	fp, r0
 800729c:	f7f9 f94a 	bl	8000534 <__aeabi_i2d>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	ec43 2b18 	vmov	d8, r2, r3
 80072a8:	a367      	add	r3, pc, #412	; (adr r3, 8007448 <__ieee754_rem_pio2+0x300>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f9 f9ab 	bl	8000608 <__aeabi_dmul>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4620      	mov	r0, r4
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7f8 ffed 	bl	8000298 <__aeabi_dsub>
 80072be:	a364      	add	r3, pc, #400	; (adr r3, 8007450 <__ieee754_rem_pio2+0x308>)
 80072c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	ec51 0b18 	vmov	r0, r1, d8
 80072cc:	f7f9 f99c 	bl	8000608 <__aeabi_dmul>
 80072d0:	f1bb 0f1f 	cmp.w	fp, #31
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	dc0d      	bgt.n	80072f6 <__ieee754_rem_pio2+0x1ae>
 80072da:	4b6e      	ldr	r3, [pc, #440]	; (8007494 <__ieee754_rem_pio2+0x34c>)
 80072dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	4543      	cmp	r3, r8
 80072e6:	d006      	beq.n	80072f6 <__ieee754_rem_pio2+0x1ae>
 80072e8:	4622      	mov	r2, r4
 80072ea:	462b      	mov	r3, r5
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f8 ffd2 	bl	8000298 <__aeabi_dsub>
 80072f4:	e00f      	b.n	8007316 <__ieee754_rem_pio2+0x1ce>
 80072f6:	462b      	mov	r3, r5
 80072f8:	4622      	mov	r2, r4
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f8 ffcb 	bl	8000298 <__aeabi_dsub>
 8007302:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007306:	9303      	str	r3, [sp, #12]
 8007308:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800730c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007310:	f1b8 0f10 	cmp.w	r8, #16
 8007314:	dc02      	bgt.n	800731c <__ieee754_rem_pio2+0x1d4>
 8007316:	e9ca 0100 	strd	r0, r1, [sl]
 800731a:	e039      	b.n	8007390 <__ieee754_rem_pio2+0x248>
 800731c:	a34e      	add	r3, pc, #312	; (adr r3, 8007458 <__ieee754_rem_pio2+0x310>)
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	ec51 0b18 	vmov	r0, r1, d8
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4604      	mov	r4, r0
 800732c:	460d      	mov	r5, r1
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f8 ffaf 	bl	8000298 <__aeabi_dsub>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4680      	mov	r8, r0
 8007340:	4689      	mov	r9, r1
 8007342:	4630      	mov	r0, r6
 8007344:	4639      	mov	r1, r7
 8007346:	f7f8 ffa7 	bl	8000298 <__aeabi_dsub>
 800734a:	4622      	mov	r2, r4
 800734c:	462b      	mov	r3, r5
 800734e:	f7f8 ffa3 	bl	8000298 <__aeabi_dsub>
 8007352:	a343      	add	r3, pc, #268	; (adr r3, 8007460 <__ieee754_rem_pio2+0x318>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	ec51 0b18 	vmov	r0, r1, d8
 8007360:	f7f9 f952 	bl	8000608 <__aeabi_dmul>
 8007364:	4622      	mov	r2, r4
 8007366:	462b      	mov	r3, r5
 8007368:	f7f8 ff96 	bl	8000298 <__aeabi_dsub>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4604      	mov	r4, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f8 ff8e 	bl	8000298 <__aeabi_dsub>
 800737c:	9a03      	ldr	r2, [sp, #12]
 800737e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b31      	cmp	r3, #49	; 0x31
 8007386:	dc24      	bgt.n	80073d2 <__ieee754_rem_pio2+0x28a>
 8007388:	e9ca 0100 	strd	r0, r1, [sl]
 800738c:	4646      	mov	r6, r8
 800738e:	464f      	mov	r7, r9
 8007390:	e9da 8900 	ldrd	r8, r9, [sl]
 8007394:	4630      	mov	r0, r6
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	4639      	mov	r1, r7
 800739c:	f7f8 ff7c 	bl	8000298 <__aeabi_dsub>
 80073a0:	462b      	mov	r3, r5
 80073a2:	4622      	mov	r2, r4
 80073a4:	f7f8 ff78 	bl	8000298 <__aeabi_dsub>
 80073a8:	9b02      	ldr	r3, [sp, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073b0:	f6bf af0a 	bge.w	80071c8 <__ieee754_rem_pio2+0x80>
 80073b4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80073b8:	f8ca 3004 	str.w	r3, [sl, #4]
 80073bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073c0:	f8ca 8000 	str.w	r8, [sl]
 80073c4:	f8ca 0008 	str.w	r0, [sl, #8]
 80073c8:	f8ca 300c 	str.w	r3, [sl, #12]
 80073cc:	f1cb 0b00 	rsb	fp, fp, #0
 80073d0:	e6fa      	b.n	80071c8 <__ieee754_rem_pio2+0x80>
 80073d2:	a327      	add	r3, pc, #156	; (adr r3, 8007470 <__ieee754_rem_pio2+0x328>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	ec51 0b18 	vmov	r0, r1, d8
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4640      	mov	r0, r8
 80073ea:	4649      	mov	r1, r9
 80073ec:	f7f8 ff54 	bl	8000298 <__aeabi_dsub>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4606      	mov	r6, r0
 80073f6:	460f      	mov	r7, r1
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	f7f8 ff4c 	bl	8000298 <__aeabi_dsub>
 8007400:	4622      	mov	r2, r4
 8007402:	462b      	mov	r3, r5
 8007404:	f7f8 ff48 	bl	8000298 <__aeabi_dsub>
 8007408:	a31b      	add	r3, pc, #108	; (adr r3, 8007478 <__ieee754_rem_pio2+0x330>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	ec51 0b18 	vmov	r0, r1, d8
 8007416:	f7f9 f8f7 	bl	8000608 <__aeabi_dmul>
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	f7f8 ff3b 	bl	8000298 <__aeabi_dsub>
 8007422:	4604      	mov	r4, r0
 8007424:	460d      	mov	r5, r1
 8007426:	e75f      	b.n	80072e8 <__ieee754_rem_pio2+0x1a0>
 8007428:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <__ieee754_rem_pio2+0x350>)
 800742a:	4598      	cmp	r8, r3
 800742c:	dd36      	ble.n	800749c <__ieee754_rem_pio2+0x354>
 800742e:	ee10 2a10 	vmov	r2, s0
 8007432:	462b      	mov	r3, r5
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	f7f8 ff2e 	bl	8000298 <__aeabi_dsub>
 800743c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007440:	e9ca 0100 	strd	r0, r1, [sl]
 8007444:	e694      	b.n	8007170 <__ieee754_rem_pio2+0x28>
 8007446:	bf00      	nop
 8007448:	54400000 	.word	0x54400000
 800744c:	3ff921fb 	.word	0x3ff921fb
 8007450:	1a626331 	.word	0x1a626331
 8007454:	3dd0b461 	.word	0x3dd0b461
 8007458:	1a600000 	.word	0x1a600000
 800745c:	3dd0b461 	.word	0x3dd0b461
 8007460:	2e037073 	.word	0x2e037073
 8007464:	3ba3198a 	.word	0x3ba3198a
 8007468:	6dc9c883 	.word	0x6dc9c883
 800746c:	3fe45f30 	.word	0x3fe45f30
 8007470:	2e000000 	.word	0x2e000000
 8007474:	3ba3198a 	.word	0x3ba3198a
 8007478:	252049c1 	.word	0x252049c1
 800747c:	397b839a 	.word	0x397b839a
 8007480:	3fe921fb 	.word	0x3fe921fb
 8007484:	4002d97b 	.word	0x4002d97b
 8007488:	3ff921fb 	.word	0x3ff921fb
 800748c:	413921fb 	.word	0x413921fb
 8007490:	3fe00000 	.word	0x3fe00000
 8007494:	08008b74 	.word	0x08008b74
 8007498:	7fefffff 	.word	0x7fefffff
 800749c:	ea4f 5428 	mov.w	r4, r8, asr #20
 80074a0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80074a4:	ee10 0a10 	vmov	r0, s0
 80074a8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80074ac:	ee10 6a10 	vmov	r6, s0
 80074b0:	460f      	mov	r7, r1
 80074b2:	f7f9 fb59 	bl	8000b68 <__aeabi_d2iz>
 80074b6:	f7f9 f83d 	bl	8000534 <__aeabi_i2d>
 80074ba:	4602      	mov	r2, r0
 80074bc:	460b      	mov	r3, r1
 80074be:	4630      	mov	r0, r6
 80074c0:	4639      	mov	r1, r7
 80074c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074c6:	f7f8 fee7 	bl	8000298 <__aeabi_dsub>
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <__ieee754_rem_pio2+0x410>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	f7f9 f89b 	bl	8000608 <__aeabi_dmul>
 80074d2:	460f      	mov	r7, r1
 80074d4:	4606      	mov	r6, r0
 80074d6:	f7f9 fb47 	bl	8000b68 <__aeabi_d2iz>
 80074da:	f7f9 f82b 	bl	8000534 <__aeabi_i2d>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80074ea:	f7f8 fed5 	bl	8000298 <__aeabi_dsub>
 80074ee:	4b1a      	ldr	r3, [pc, #104]	; (8007558 <__ieee754_rem_pio2+0x410>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	f7f9 f889 	bl	8000608 <__aeabi_dmul>
 80074f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80074fa:	ad04      	add	r5, sp, #16
 80074fc:	f04f 0803 	mov.w	r8, #3
 8007500:	46a9      	mov	r9, r5
 8007502:	2600      	movs	r6, #0
 8007504:	2700      	movs	r7, #0
 8007506:	4632      	mov	r2, r6
 8007508:	463b      	mov	r3, r7
 800750a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800750e:	46c3      	mov	fp, r8
 8007510:	3d08      	subs	r5, #8
 8007512:	f108 38ff 	add.w	r8, r8, #4294967295
 8007516:	f7f9 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800751a:	2800      	cmp	r0, #0
 800751c:	d1f3      	bne.n	8007506 <__ieee754_rem_pio2+0x3be>
 800751e:	4b0f      	ldr	r3, [pc, #60]	; (800755c <__ieee754_rem_pio2+0x414>)
 8007520:	9301      	str	r3, [sp, #4]
 8007522:	2302      	movs	r3, #2
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	4622      	mov	r2, r4
 8007528:	465b      	mov	r3, fp
 800752a:	4651      	mov	r1, sl
 800752c:	4648      	mov	r0, r9
 800752e:	f000 f8df 	bl	80076f0 <__kernel_rem_pio2>
 8007532:	9b02      	ldr	r3, [sp, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	4683      	mov	fp, r0
 8007538:	f6bf ae46 	bge.w	80071c8 <__ieee754_rem_pio2+0x80>
 800753c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007540:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007544:	e9ca 2300 	strd	r2, r3, [sl]
 8007548:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800754c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007550:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007554:	e73a      	b.n	80073cc <__ieee754_rem_pio2+0x284>
 8007556:	bf00      	nop
 8007558:	41700000 	.word	0x41700000
 800755c:	08008bf4 	.word	0x08008bf4

08007560 <__kernel_cos>:
 8007560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	ec57 6b10 	vmov	r6, r7, d0
 8007568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800756c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007570:	ed8d 1b00 	vstr	d1, [sp]
 8007574:	da07      	bge.n	8007586 <__kernel_cos+0x26>
 8007576:	ee10 0a10 	vmov	r0, s0
 800757a:	4639      	mov	r1, r7
 800757c:	f7f9 faf4 	bl	8000b68 <__aeabi_d2iz>
 8007580:	2800      	cmp	r0, #0
 8007582:	f000 8088 	beq.w	8007696 <__kernel_cos+0x136>
 8007586:	4632      	mov	r2, r6
 8007588:	463b      	mov	r3, r7
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 f83b 	bl	8000608 <__aeabi_dmul>
 8007592:	4b51      	ldr	r3, [pc, #324]	; (80076d8 <__kernel_cos+0x178>)
 8007594:	2200      	movs	r2, #0
 8007596:	4604      	mov	r4, r0
 8007598:	460d      	mov	r5, r1
 800759a:	f7f9 f835 	bl	8000608 <__aeabi_dmul>
 800759e:	a340      	add	r3, pc, #256	; (adr r3, 80076a0 <__kernel_cos+0x140>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	4682      	mov	sl, r0
 80075a6:	468b      	mov	fp, r1
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f9 f82c 	bl	8000608 <__aeabi_dmul>
 80075b0:	a33d      	add	r3, pc, #244	; (adr r3, 80076a8 <__kernel_cos+0x148>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f8 fe71 	bl	800029c <__adddf3>
 80075ba:	4622      	mov	r2, r4
 80075bc:	462b      	mov	r3, r5
 80075be:	f7f9 f823 	bl	8000608 <__aeabi_dmul>
 80075c2:	a33b      	add	r3, pc, #236	; (adr r3, 80076b0 <__kernel_cos+0x150>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	f7f8 fe66 	bl	8000298 <__aeabi_dsub>
 80075cc:	4622      	mov	r2, r4
 80075ce:	462b      	mov	r3, r5
 80075d0:	f7f9 f81a 	bl	8000608 <__aeabi_dmul>
 80075d4:	a338      	add	r3, pc, #224	; (adr r3, 80076b8 <__kernel_cos+0x158>)
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f7f8 fe5f 	bl	800029c <__adddf3>
 80075de:	4622      	mov	r2, r4
 80075e0:	462b      	mov	r3, r5
 80075e2:	f7f9 f811 	bl	8000608 <__aeabi_dmul>
 80075e6:	a336      	add	r3, pc, #216	; (adr r3, 80076c0 <__kernel_cos+0x160>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	f7f8 fe54 	bl	8000298 <__aeabi_dsub>
 80075f0:	4622      	mov	r2, r4
 80075f2:	462b      	mov	r3, r5
 80075f4:	f7f9 f808 	bl	8000608 <__aeabi_dmul>
 80075f8:	a333      	add	r3, pc, #204	; (adr r3, 80076c8 <__kernel_cos+0x168>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fe4d 	bl	800029c <__adddf3>
 8007602:	4622      	mov	r2, r4
 8007604:	462b      	mov	r3, r5
 8007606:	f7f8 ffff 	bl	8000608 <__aeabi_dmul>
 800760a:	4622      	mov	r2, r4
 800760c:	462b      	mov	r3, r5
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007616:	4604      	mov	r4, r0
 8007618:	460d      	mov	r5, r1
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	f7f8 fff3 	bl	8000608 <__aeabi_dmul>
 8007622:	460b      	mov	r3, r1
 8007624:	4602      	mov	r2, r0
 8007626:	4629      	mov	r1, r5
 8007628:	4620      	mov	r0, r4
 800762a:	f7f8 fe35 	bl	8000298 <__aeabi_dsub>
 800762e:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <__kernel_cos+0x17c>)
 8007630:	4598      	cmp	r8, r3
 8007632:	4606      	mov	r6, r0
 8007634:	460f      	mov	r7, r1
 8007636:	dc10      	bgt.n	800765a <__kernel_cos+0xfa>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	f7f8 fe2a 	bl	8000298 <__aeabi_dsub>
 8007644:	460b      	mov	r3, r1
 8007646:	4926      	ldr	r1, [pc, #152]	; (80076e0 <__kernel_cos+0x180>)
 8007648:	4602      	mov	r2, r0
 800764a:	2000      	movs	r0, #0
 800764c:	f7f8 fe24 	bl	8000298 <__aeabi_dsub>
 8007650:	ec41 0b10 	vmov	d0, r0, r1
 8007654:	b003      	add	sp, #12
 8007656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765a:	4b22      	ldr	r3, [pc, #136]	; (80076e4 <__kernel_cos+0x184>)
 800765c:	4920      	ldr	r1, [pc, #128]	; (80076e0 <__kernel_cos+0x180>)
 800765e:	4598      	cmp	r8, r3
 8007660:	bfcc      	ite	gt
 8007662:	4d21      	ldrgt	r5, [pc, #132]	; (80076e8 <__kernel_cos+0x188>)
 8007664:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007668:	2400      	movs	r4, #0
 800766a:	4622      	mov	r2, r4
 800766c:	462b      	mov	r3, r5
 800766e:	2000      	movs	r0, #0
 8007670:	f7f8 fe12 	bl	8000298 <__aeabi_dsub>
 8007674:	4622      	mov	r2, r4
 8007676:	4680      	mov	r8, r0
 8007678:	4689      	mov	r9, r1
 800767a:	462b      	mov	r3, r5
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	f7f8 fe0a 	bl	8000298 <__aeabi_dsub>
 8007684:	4632      	mov	r2, r6
 8007686:	463b      	mov	r3, r7
 8007688:	f7f8 fe06 	bl	8000298 <__aeabi_dsub>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4640      	mov	r0, r8
 8007692:	4649      	mov	r1, r9
 8007694:	e7da      	b.n	800764c <__kernel_cos+0xec>
 8007696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80076d0 <__kernel_cos+0x170>
 800769a:	e7db      	b.n	8007654 <__kernel_cos+0xf4>
 800769c:	f3af 8000 	nop.w
 80076a0:	be8838d4 	.word	0xbe8838d4
 80076a4:	bda8fae9 	.word	0xbda8fae9
 80076a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80076ac:	3e21ee9e 	.word	0x3e21ee9e
 80076b0:	809c52ad 	.word	0x809c52ad
 80076b4:	3e927e4f 	.word	0x3e927e4f
 80076b8:	19cb1590 	.word	0x19cb1590
 80076bc:	3efa01a0 	.word	0x3efa01a0
 80076c0:	16c15177 	.word	0x16c15177
 80076c4:	3f56c16c 	.word	0x3f56c16c
 80076c8:	5555554c 	.word	0x5555554c
 80076cc:	3fa55555 	.word	0x3fa55555
 80076d0:	00000000 	.word	0x00000000
 80076d4:	3ff00000 	.word	0x3ff00000
 80076d8:	3fe00000 	.word	0x3fe00000
 80076dc:	3fd33332 	.word	0x3fd33332
 80076e0:	3ff00000 	.word	0x3ff00000
 80076e4:	3fe90000 	.word	0x3fe90000
 80076e8:	3fd20000 	.word	0x3fd20000
 80076ec:	00000000 	.word	0x00000000

080076f0 <__kernel_rem_pio2>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	ed2d 8b02 	vpush	{d8}
 80076f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80076fc:	f112 0f14 	cmn.w	r2, #20
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	9101      	str	r1, [sp, #4]
 8007704:	4bc4      	ldr	r3, [pc, #784]	; (8007a18 <__kernel_rem_pio2+0x328>)
 8007706:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007708:	900b      	str	r0, [sp, #44]	; 0x2c
 800770a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800770e:	9302      	str	r3, [sp, #8]
 8007710:	9b08      	ldr	r3, [sp, #32]
 8007712:	f103 33ff 	add.w	r3, r3, #4294967295
 8007716:	bfa8      	it	ge
 8007718:	1ed4      	subge	r4, r2, #3
 800771a:	9306      	str	r3, [sp, #24]
 800771c:	bfb2      	itee	lt
 800771e:	2400      	movlt	r4, #0
 8007720:	2318      	movge	r3, #24
 8007722:	fb94 f4f3 	sdivge	r4, r4, r3
 8007726:	f06f 0317 	mvn.w	r3, #23
 800772a:	fb04 3303 	mla	r3, r4, r3, r3
 800772e:	eb03 0a02 	add.w	sl, r3, r2
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	9a06      	ldr	r2, [sp, #24]
 8007736:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007a08 <__kernel_rem_pio2+0x318>
 800773a:	eb03 0802 	add.w	r8, r3, r2
 800773e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007740:	1aa7      	subs	r7, r4, r2
 8007742:	ae22      	add	r6, sp, #136	; 0x88
 8007744:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007748:	2500      	movs	r5, #0
 800774a:	4545      	cmp	r5, r8
 800774c:	dd13      	ble.n	8007776 <__kernel_rem_pio2+0x86>
 800774e:	9b08      	ldr	r3, [sp, #32]
 8007750:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007a08 <__kernel_rem_pio2+0x318>
 8007754:	aa22      	add	r2, sp, #136	; 0x88
 8007756:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800775a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	9b02      	ldr	r3, [sp, #8]
 8007764:	4598      	cmp	r8, r3
 8007766:	dc2f      	bgt.n	80077c8 <__kernel_rem_pio2+0xd8>
 8007768:	ed8d 8b04 	vstr	d8, [sp, #16]
 800776c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007770:	462f      	mov	r7, r5
 8007772:	2600      	movs	r6, #0
 8007774:	e01b      	b.n	80077ae <__kernel_rem_pio2+0xbe>
 8007776:	42ef      	cmn	r7, r5
 8007778:	d407      	bmi.n	800778a <__kernel_rem_pio2+0x9a>
 800777a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800777e:	f7f8 fed9 	bl	8000534 <__aeabi_i2d>
 8007782:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007786:	3501      	adds	r5, #1
 8007788:	e7df      	b.n	800774a <__kernel_rem_pio2+0x5a>
 800778a:	ec51 0b18 	vmov	r0, r1, d8
 800778e:	e7f8      	b.n	8007782 <__kernel_rem_pio2+0x92>
 8007790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007794:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007798:	f7f8 ff36 	bl	8000608 <__aeabi_dmul>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a4:	f7f8 fd7a 	bl	800029c <__adddf3>
 80077a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ac:	3601      	adds	r6, #1
 80077ae:	9b06      	ldr	r3, [sp, #24]
 80077b0:	429e      	cmp	r6, r3
 80077b2:	f1a7 0708 	sub.w	r7, r7, #8
 80077b6:	ddeb      	ble.n	8007790 <__kernel_rem_pio2+0xa0>
 80077b8:	ed9d 7b04 	vldr	d7, [sp, #16]
 80077bc:	f108 0801 	add.w	r8, r8, #1
 80077c0:	ecab 7b02 	vstmia	fp!, {d7}
 80077c4:	3508      	adds	r5, #8
 80077c6:	e7cc      	b.n	8007762 <__kernel_rem_pio2+0x72>
 80077c8:	9b02      	ldr	r3, [sp, #8]
 80077ca:	aa0e      	add	r2, sp, #56	; 0x38
 80077cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077d0:	930d      	str	r3, [sp, #52]	; 0x34
 80077d2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80077d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077d8:	9c02      	ldr	r4, [sp, #8]
 80077da:	930c      	str	r3, [sp, #48]	; 0x30
 80077dc:	00e3      	lsls	r3, r4, #3
 80077de:	930a      	str	r3, [sp, #40]	; 0x28
 80077e0:	ab9a      	add	r3, sp, #616	; 0x268
 80077e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077e6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80077ea:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80077ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80077f0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80077f4:	46c3      	mov	fp, r8
 80077f6:	46a1      	mov	r9, r4
 80077f8:	f1b9 0f00 	cmp.w	r9, #0
 80077fc:	f1a5 0508 	sub.w	r5, r5, #8
 8007800:	dc77      	bgt.n	80078f2 <__kernel_rem_pio2+0x202>
 8007802:	ec47 6b10 	vmov	d0, r6, r7
 8007806:	4650      	mov	r0, sl
 8007808:	f000 fc0a 	bl	8008020 <scalbn>
 800780c:	ec57 6b10 	vmov	r6, r7, d0
 8007810:	2200      	movs	r2, #0
 8007812:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007816:	ee10 0a10 	vmov	r0, s0
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fef4 	bl	8000608 <__aeabi_dmul>
 8007820:	ec41 0b10 	vmov	d0, r0, r1
 8007824:	f000 fb7c 	bl	8007f20 <floor>
 8007828:	4b7c      	ldr	r3, [pc, #496]	; (8007a1c <__kernel_rem_pio2+0x32c>)
 800782a:	ec51 0b10 	vmov	r0, r1, d0
 800782e:	2200      	movs	r2, #0
 8007830:	f7f8 feea 	bl	8000608 <__aeabi_dmul>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4630      	mov	r0, r6
 800783a:	4639      	mov	r1, r7
 800783c:	f7f8 fd2c 	bl	8000298 <__aeabi_dsub>
 8007840:	460f      	mov	r7, r1
 8007842:	4606      	mov	r6, r0
 8007844:	f7f9 f990 	bl	8000b68 <__aeabi_d2iz>
 8007848:	9004      	str	r0, [sp, #16]
 800784a:	f7f8 fe73 	bl	8000534 <__aeabi_i2d>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4630      	mov	r0, r6
 8007854:	4639      	mov	r1, r7
 8007856:	f7f8 fd1f 	bl	8000298 <__aeabi_dsub>
 800785a:	f1ba 0f00 	cmp.w	sl, #0
 800785e:	4606      	mov	r6, r0
 8007860:	460f      	mov	r7, r1
 8007862:	dd6d      	ble.n	8007940 <__kernel_rem_pio2+0x250>
 8007864:	1e62      	subs	r2, r4, #1
 8007866:	ab0e      	add	r3, sp, #56	; 0x38
 8007868:	9d04      	ldr	r5, [sp, #16]
 800786a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800786e:	f1ca 0118 	rsb	r1, sl, #24
 8007872:	fa40 f301 	asr.w	r3, r0, r1
 8007876:	441d      	add	r5, r3
 8007878:	408b      	lsls	r3, r1
 800787a:	1ac0      	subs	r0, r0, r3
 800787c:	ab0e      	add	r3, sp, #56	; 0x38
 800787e:	9504      	str	r5, [sp, #16]
 8007880:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007884:	f1ca 0317 	rsb	r3, sl, #23
 8007888:	fa40 fb03 	asr.w	fp, r0, r3
 800788c:	f1bb 0f00 	cmp.w	fp, #0
 8007890:	dd65      	ble.n	800795e <__kernel_rem_pio2+0x26e>
 8007892:	9b04      	ldr	r3, [sp, #16]
 8007894:	2200      	movs	r2, #0
 8007896:	3301      	adds	r3, #1
 8007898:	9304      	str	r3, [sp, #16]
 800789a:	4615      	mov	r5, r2
 800789c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80078a0:	4294      	cmp	r4, r2
 80078a2:	f300 809c 	bgt.w	80079de <__kernel_rem_pio2+0x2ee>
 80078a6:	f1ba 0f00 	cmp.w	sl, #0
 80078aa:	dd07      	ble.n	80078bc <__kernel_rem_pio2+0x1cc>
 80078ac:	f1ba 0f01 	cmp.w	sl, #1
 80078b0:	f000 80c0 	beq.w	8007a34 <__kernel_rem_pio2+0x344>
 80078b4:	f1ba 0f02 	cmp.w	sl, #2
 80078b8:	f000 80c6 	beq.w	8007a48 <__kernel_rem_pio2+0x358>
 80078bc:	f1bb 0f02 	cmp.w	fp, #2
 80078c0:	d14d      	bne.n	800795e <__kernel_rem_pio2+0x26e>
 80078c2:	4632      	mov	r2, r6
 80078c4:	463b      	mov	r3, r7
 80078c6:	4956      	ldr	r1, [pc, #344]	; (8007a20 <__kernel_rem_pio2+0x330>)
 80078c8:	2000      	movs	r0, #0
 80078ca:	f7f8 fce5 	bl	8000298 <__aeabi_dsub>
 80078ce:	4606      	mov	r6, r0
 80078d0:	460f      	mov	r7, r1
 80078d2:	2d00      	cmp	r5, #0
 80078d4:	d043      	beq.n	800795e <__kernel_rem_pio2+0x26e>
 80078d6:	4650      	mov	r0, sl
 80078d8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007a10 <__kernel_rem_pio2+0x320>
 80078dc:	f000 fba0 	bl	8008020 <scalbn>
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	ec53 2b10 	vmov	r2, r3, d0
 80078e8:	f7f8 fcd6 	bl	8000298 <__aeabi_dsub>
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	e035      	b.n	800795e <__kernel_rem_pio2+0x26e>
 80078f2:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <__kernel_rem_pio2+0x334>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	4630      	mov	r0, r6
 80078f8:	4639      	mov	r1, r7
 80078fa:	f7f8 fe85 	bl	8000608 <__aeabi_dmul>
 80078fe:	f7f9 f933 	bl	8000b68 <__aeabi_d2iz>
 8007902:	f7f8 fe17 	bl	8000534 <__aeabi_i2d>
 8007906:	4602      	mov	r2, r0
 8007908:	460b      	mov	r3, r1
 800790a:	ec43 2b18 	vmov	d8, r2, r3
 800790e:	4b46      	ldr	r3, [pc, #280]	; (8007a28 <__kernel_rem_pio2+0x338>)
 8007910:	2200      	movs	r2, #0
 8007912:	f7f8 fe79 	bl	8000608 <__aeabi_dmul>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4630      	mov	r0, r6
 800791c:	4639      	mov	r1, r7
 800791e:	f7f8 fcbb 	bl	8000298 <__aeabi_dsub>
 8007922:	f7f9 f921 	bl	8000b68 <__aeabi_d2iz>
 8007926:	e9d5 2300 	ldrd	r2, r3, [r5]
 800792a:	f84b 0b04 	str.w	r0, [fp], #4
 800792e:	ec51 0b18 	vmov	r0, r1, d8
 8007932:	f7f8 fcb3 	bl	800029c <__adddf3>
 8007936:	f109 39ff 	add.w	r9, r9, #4294967295
 800793a:	4606      	mov	r6, r0
 800793c:	460f      	mov	r7, r1
 800793e:	e75b      	b.n	80077f8 <__kernel_rem_pio2+0x108>
 8007940:	d106      	bne.n	8007950 <__kernel_rem_pio2+0x260>
 8007942:	1e63      	subs	r3, r4, #1
 8007944:	aa0e      	add	r2, sp, #56	; 0x38
 8007946:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800794a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800794e:	e79d      	b.n	800788c <__kernel_rem_pio2+0x19c>
 8007950:	4b36      	ldr	r3, [pc, #216]	; (8007a2c <__kernel_rem_pio2+0x33c>)
 8007952:	2200      	movs	r2, #0
 8007954:	f7f9 f8de 	bl	8000b14 <__aeabi_dcmpge>
 8007958:	2800      	cmp	r0, #0
 800795a:	d13d      	bne.n	80079d8 <__kernel_rem_pio2+0x2e8>
 800795c:	4683      	mov	fp, r0
 800795e:	2200      	movs	r2, #0
 8007960:	2300      	movs	r3, #0
 8007962:	4630      	mov	r0, r6
 8007964:	4639      	mov	r1, r7
 8007966:	f7f9 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800796a:	2800      	cmp	r0, #0
 800796c:	f000 80c0 	beq.w	8007af0 <__kernel_rem_pio2+0x400>
 8007970:	1e65      	subs	r5, r4, #1
 8007972:	462b      	mov	r3, r5
 8007974:	2200      	movs	r2, #0
 8007976:	9902      	ldr	r1, [sp, #8]
 8007978:	428b      	cmp	r3, r1
 800797a:	da6c      	bge.n	8007a56 <__kernel_rem_pio2+0x366>
 800797c:	2a00      	cmp	r2, #0
 800797e:	f000 8089 	beq.w	8007a94 <__kernel_rem_pio2+0x3a4>
 8007982:	ab0e      	add	r3, sp, #56	; 0x38
 8007984:	f1aa 0a18 	sub.w	sl, sl, #24
 8007988:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80ad 	beq.w	8007aec <__kernel_rem_pio2+0x3fc>
 8007992:	4650      	mov	r0, sl
 8007994:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007a10 <__kernel_rem_pio2+0x320>
 8007998:	f000 fb42 	bl	8008020 <scalbn>
 800799c:	ab9a      	add	r3, sp, #616	; 0x268
 800799e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80079a2:	ec57 6b10 	vmov	r6, r7, d0
 80079a6:	00ec      	lsls	r4, r5, #3
 80079a8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80079ac:	46aa      	mov	sl, r5
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	f280 80d6 	bge.w	8007b62 <__kernel_rem_pio2+0x472>
 80079b6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007a08 <__kernel_rem_pio2+0x318>
 80079ba:	462e      	mov	r6, r5
 80079bc:	2e00      	cmp	r6, #0
 80079be:	f2c0 8104 	blt.w	8007bca <__kernel_rem_pio2+0x4da>
 80079c2:	ab72      	add	r3, sp, #456	; 0x1c8
 80079c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80079c8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007a30 <__kernel_rem_pio2+0x340>
 80079cc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80079d0:	f04f 0800 	mov.w	r8, #0
 80079d4:	1baf      	subs	r7, r5, r6
 80079d6:	e0ea      	b.n	8007bae <__kernel_rem_pio2+0x4be>
 80079d8:	f04f 0b02 	mov.w	fp, #2
 80079dc:	e759      	b.n	8007892 <__kernel_rem_pio2+0x1a2>
 80079de:	f8d8 3000 	ldr.w	r3, [r8]
 80079e2:	b955      	cbnz	r5, 80079fa <__kernel_rem_pio2+0x30a>
 80079e4:	b123      	cbz	r3, 80079f0 <__kernel_rem_pio2+0x300>
 80079e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079ea:	f8c8 3000 	str.w	r3, [r8]
 80079ee:	2301      	movs	r3, #1
 80079f0:	3201      	adds	r2, #1
 80079f2:	f108 0804 	add.w	r8, r8, #4
 80079f6:	461d      	mov	r5, r3
 80079f8:	e752      	b.n	80078a0 <__kernel_rem_pio2+0x1b0>
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	f8c8 3000 	str.w	r3, [r8]
 8007a00:	462b      	mov	r3, r5
 8007a02:	e7f5      	b.n	80079f0 <__kernel_rem_pio2+0x300>
 8007a04:	f3af 8000 	nop.w
	...
 8007a14:	3ff00000 	.word	0x3ff00000
 8007a18:	08008d40 	.word	0x08008d40
 8007a1c:	40200000 	.word	0x40200000
 8007a20:	3ff00000 	.word	0x3ff00000
 8007a24:	3e700000 	.word	0x3e700000
 8007a28:	41700000 	.word	0x41700000
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	08008d00 	.word	0x08008d00
 8007a34:	1e62      	subs	r2, r4, #1
 8007a36:	ab0e      	add	r3, sp, #56	; 0x38
 8007a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a3c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a40:	a90e      	add	r1, sp, #56	; 0x38
 8007a42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a46:	e739      	b.n	80078bc <__kernel_rem_pio2+0x1cc>
 8007a48:	1e62      	subs	r2, r4, #1
 8007a4a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a54:	e7f4      	b.n	8007a40 <__kernel_rem_pio2+0x350>
 8007a56:	a90e      	add	r1, sp, #56	; 0x38
 8007a58:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	e789      	b.n	8007976 <__kernel_rem_pio2+0x286>
 8007a62:	3301      	adds	r3, #1
 8007a64:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a68:	2900      	cmp	r1, #0
 8007a6a:	d0fa      	beq.n	8007a62 <__kernel_rem_pio2+0x372>
 8007a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a6e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007a72:	446a      	add	r2, sp
 8007a74:	3a98      	subs	r2, #152	; 0x98
 8007a76:	920a      	str	r2, [sp, #40]	; 0x28
 8007a78:	9a08      	ldr	r2, [sp, #32]
 8007a7a:	18e3      	adds	r3, r4, r3
 8007a7c:	18a5      	adds	r5, r4, r2
 8007a7e:	aa22      	add	r2, sp, #136	; 0x88
 8007a80:	f104 0801 	add.w	r8, r4, #1
 8007a84:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007a88:	9304      	str	r3, [sp, #16]
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	4543      	cmp	r3, r8
 8007a8e:	da04      	bge.n	8007a9a <__kernel_rem_pio2+0x3aa>
 8007a90:	461c      	mov	r4, r3
 8007a92:	e6a3      	b.n	80077dc <__kernel_rem_pio2+0xec>
 8007a94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a96:	2301      	movs	r3, #1
 8007a98:	e7e4      	b.n	8007a64 <__kernel_rem_pio2+0x374>
 8007a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007aa0:	f7f8 fd48 	bl	8000534 <__aeabi_i2d>
 8007aa4:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007aa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aaa:	46ab      	mov	fp, r5
 8007aac:	461c      	mov	r4, r3
 8007aae:	f04f 0900 	mov.w	r9, #0
 8007ab2:	2600      	movs	r6, #0
 8007ab4:	2700      	movs	r7, #0
 8007ab6:	9b06      	ldr	r3, [sp, #24]
 8007ab8:	4599      	cmp	r9, r3
 8007aba:	dd06      	ble.n	8007aca <__kernel_rem_pio2+0x3da>
 8007abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007abe:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007ac2:	f108 0801 	add.w	r8, r8, #1
 8007ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac8:	e7df      	b.n	8007a8a <__kernel_rem_pio2+0x39a>
 8007aca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ace:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007ad2:	f7f8 fd99 	bl	8000608 <__aeabi_dmul>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	460b      	mov	r3, r1
 8007ada:	4630      	mov	r0, r6
 8007adc:	4639      	mov	r1, r7
 8007ade:	f7f8 fbdd 	bl	800029c <__adddf3>
 8007ae2:	f109 0901 	add.w	r9, r9, #1
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	460f      	mov	r7, r1
 8007aea:	e7e4      	b.n	8007ab6 <__kernel_rem_pio2+0x3c6>
 8007aec:	3d01      	subs	r5, #1
 8007aee:	e748      	b.n	8007982 <__kernel_rem_pio2+0x292>
 8007af0:	ec47 6b10 	vmov	d0, r6, r7
 8007af4:	f1ca 0000 	rsb	r0, sl, #0
 8007af8:	f000 fa92 	bl	8008020 <scalbn>
 8007afc:	ec57 6b10 	vmov	r6, r7, d0
 8007b00:	4ba0      	ldr	r3, [pc, #640]	; (8007d84 <__kernel_rem_pio2+0x694>)
 8007b02:	ee10 0a10 	vmov	r0, s0
 8007b06:	2200      	movs	r2, #0
 8007b08:	4639      	mov	r1, r7
 8007b0a:	f7f9 f803 	bl	8000b14 <__aeabi_dcmpge>
 8007b0e:	b1f8      	cbz	r0, 8007b50 <__kernel_rem_pio2+0x460>
 8007b10:	4b9d      	ldr	r3, [pc, #628]	; (8007d88 <__kernel_rem_pio2+0x698>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	4630      	mov	r0, r6
 8007b16:	4639      	mov	r1, r7
 8007b18:	f7f8 fd76 	bl	8000608 <__aeabi_dmul>
 8007b1c:	f7f9 f824 	bl	8000b68 <__aeabi_d2iz>
 8007b20:	4680      	mov	r8, r0
 8007b22:	f7f8 fd07 	bl	8000534 <__aeabi_i2d>
 8007b26:	4b97      	ldr	r3, [pc, #604]	; (8007d84 <__kernel_rem_pio2+0x694>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f7f8 fd6d 	bl	8000608 <__aeabi_dmul>
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4602      	mov	r2, r0
 8007b32:	4639      	mov	r1, r7
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7f8 fbaf 	bl	8000298 <__aeabi_dsub>
 8007b3a:	f7f9 f815 	bl	8000b68 <__aeabi_d2iz>
 8007b3e:	1c65      	adds	r5, r4, #1
 8007b40:	ab0e      	add	r3, sp, #56	; 0x38
 8007b42:	f10a 0a18 	add.w	sl, sl, #24
 8007b46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b4a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007b4e:	e720      	b.n	8007992 <__kernel_rem_pio2+0x2a2>
 8007b50:	4630      	mov	r0, r6
 8007b52:	4639      	mov	r1, r7
 8007b54:	f7f9 f808 	bl	8000b68 <__aeabi_d2iz>
 8007b58:	ab0e      	add	r3, sp, #56	; 0x38
 8007b5a:	4625      	mov	r5, r4
 8007b5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b60:	e717      	b.n	8007992 <__kernel_rem_pio2+0x2a2>
 8007b62:	ab0e      	add	r3, sp, #56	; 0x38
 8007b64:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007b68:	f7f8 fce4 	bl	8000534 <__aeabi_i2d>
 8007b6c:	4632      	mov	r2, r6
 8007b6e:	463b      	mov	r3, r7
 8007b70:	f7f8 fd4a 	bl	8000608 <__aeabi_dmul>
 8007b74:	4b84      	ldr	r3, [pc, #528]	; (8007d88 <__kernel_rem_pio2+0x698>)
 8007b76:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	4639      	mov	r1, r7
 8007b80:	f7f8 fd42 	bl	8000608 <__aeabi_dmul>
 8007b84:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	e70f      	b.n	80079ae <__kernel_rem_pio2+0x2be>
 8007b8e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007b92:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007b96:	f7f8 fd37 	bl	8000608 <__aeabi_dmul>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ba2:	f7f8 fb7b 	bl	800029c <__adddf3>
 8007ba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	9b02      	ldr	r3, [sp, #8]
 8007bb0:	4598      	cmp	r8, r3
 8007bb2:	dc01      	bgt.n	8007bb8 <__kernel_rem_pio2+0x4c8>
 8007bb4:	45b8      	cmp	r8, r7
 8007bb6:	ddea      	ble.n	8007b8e <__kernel_rem_pio2+0x49e>
 8007bb8:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007bbc:	ab4a      	add	r3, sp, #296	; 0x128
 8007bbe:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007bc2:	ed87 7b00 	vstr	d7, [r7]
 8007bc6:	3e01      	subs	r6, #1
 8007bc8:	e6f8      	b.n	80079bc <__kernel_rem_pio2+0x2cc>
 8007bca:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	dc0b      	bgt.n	8007be8 <__kernel_rem_pio2+0x4f8>
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	dc35      	bgt.n	8007c40 <__kernel_rem_pio2+0x550>
 8007bd4:	d059      	beq.n	8007c8a <__kernel_rem_pio2+0x59a>
 8007bd6:	9b04      	ldr	r3, [sp, #16]
 8007bd8:	f003 0007 	and.w	r0, r3, #7
 8007bdc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007be0:	ecbd 8b02 	vpop	{d8}
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d1f3      	bne.n	8007bd6 <__kernel_rem_pio2+0x4e6>
 8007bee:	ab4a      	add	r3, sp, #296	; 0x128
 8007bf0:	4423      	add	r3, r4
 8007bf2:	9306      	str	r3, [sp, #24]
 8007bf4:	461c      	mov	r4, r3
 8007bf6:	469a      	mov	sl, r3
 8007bf8:	9502      	str	r5, [sp, #8]
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f1aa 0a08 	sub.w	sl, sl, #8
 8007c02:	dc6b      	bgt.n	8007cdc <__kernel_rem_pio2+0x5ec>
 8007c04:	46aa      	mov	sl, r5
 8007c06:	f1ba 0f01 	cmp.w	sl, #1
 8007c0a:	f1a4 0408 	sub.w	r4, r4, #8
 8007c0e:	f300 8085 	bgt.w	8007d1c <__kernel_rem_pio2+0x62c>
 8007c12:	9c06      	ldr	r4, [sp, #24]
 8007c14:	2000      	movs	r0, #0
 8007c16:	3408      	adds	r4, #8
 8007c18:	2100      	movs	r1, #0
 8007c1a:	2d01      	cmp	r5, #1
 8007c1c:	f300 809d 	bgt.w	8007d5a <__kernel_rem_pio2+0x66a>
 8007c20:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007c24:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007c28:	f1bb 0f00 	cmp.w	fp, #0
 8007c2c:	f040 809b 	bne.w	8007d66 <__kernel_rem_pio2+0x676>
 8007c30:	9b01      	ldr	r3, [sp, #4]
 8007c32:	e9c3 5600 	strd	r5, r6, [r3]
 8007c36:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007c3a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c3e:	e7ca      	b.n	8007bd6 <__kernel_rem_pio2+0x4e6>
 8007c40:	3408      	adds	r4, #8
 8007c42:	ab4a      	add	r3, sp, #296	; 0x128
 8007c44:	441c      	add	r4, r3
 8007c46:	462e      	mov	r6, r5
 8007c48:	2000      	movs	r0, #0
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	da36      	bge.n	8007cbe <__kernel_rem_pio2+0x5ce>
 8007c50:	f1bb 0f00 	cmp.w	fp, #0
 8007c54:	d039      	beq.n	8007cca <__kernel_rem_pio2+0x5da>
 8007c56:	4602      	mov	r2, r0
 8007c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c5c:	9c01      	ldr	r4, [sp, #4]
 8007c5e:	e9c4 2300 	strd	r2, r3, [r4]
 8007c62:	4602      	mov	r2, r0
 8007c64:	460b      	mov	r3, r1
 8007c66:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007c6a:	f7f8 fb15 	bl	8000298 <__aeabi_dsub>
 8007c6e:	ae4c      	add	r6, sp, #304	; 0x130
 8007c70:	2401      	movs	r4, #1
 8007c72:	42a5      	cmp	r5, r4
 8007c74:	da2c      	bge.n	8007cd0 <__kernel_rem_pio2+0x5e0>
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	d002      	beq.n	8007c82 <__kernel_rem_pio2+0x592>
 8007c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c80:	4619      	mov	r1, r3
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c88:	e7a5      	b.n	8007bd6 <__kernel_rem_pio2+0x4e6>
 8007c8a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007c8e:	eb0d 0403 	add.w	r4, sp, r3
 8007c92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007c96:	2000      	movs	r0, #0
 8007c98:	2100      	movs	r1, #0
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	da09      	bge.n	8007cb2 <__kernel_rem_pio2+0x5c2>
 8007c9e:	f1bb 0f00 	cmp.w	fp, #0
 8007ca2:	d002      	beq.n	8007caa <__kernel_rem_pio2+0x5ba>
 8007ca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ca8:	4619      	mov	r1, r3
 8007caa:	9b01      	ldr	r3, [sp, #4]
 8007cac:	e9c3 0100 	strd	r0, r1, [r3]
 8007cb0:	e791      	b.n	8007bd6 <__kernel_rem_pio2+0x4e6>
 8007cb2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007cb6:	f7f8 faf1 	bl	800029c <__adddf3>
 8007cba:	3d01      	subs	r5, #1
 8007cbc:	e7ed      	b.n	8007c9a <__kernel_rem_pio2+0x5aa>
 8007cbe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007cc2:	f7f8 faeb 	bl	800029c <__adddf3>
 8007cc6:	3e01      	subs	r6, #1
 8007cc8:	e7c0      	b.n	8007c4c <__kernel_rem_pio2+0x55c>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	e7c5      	b.n	8007c5c <__kernel_rem_pio2+0x56c>
 8007cd0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007cd4:	f7f8 fae2 	bl	800029c <__adddf3>
 8007cd8:	3401      	adds	r4, #1
 8007cda:	e7ca      	b.n	8007c72 <__kernel_rem_pio2+0x582>
 8007cdc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ce0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007ce4:	9b02      	ldr	r3, [sp, #8]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	4632      	mov	r2, r6
 8007cec:	463b      	mov	r3, r7
 8007cee:	4640      	mov	r0, r8
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	f7f8 fad3 	bl	800029c <__adddf3>
 8007cf6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4640      	mov	r0, r8
 8007d00:	4649      	mov	r1, r9
 8007d02:	f7f8 fac9 	bl	8000298 <__aeabi_dsub>
 8007d06:	4632      	mov	r2, r6
 8007d08:	463b      	mov	r3, r7
 8007d0a:	f7f8 fac7 	bl	800029c <__adddf3>
 8007d0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007d12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d16:	ed8a 7b00 	vstr	d7, [sl]
 8007d1a:	e76e      	b.n	8007bfa <__kernel_rem_pio2+0x50a>
 8007d1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007d20:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007d24:	4640      	mov	r0, r8
 8007d26:	4632      	mov	r2, r6
 8007d28:	463b      	mov	r3, r7
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	f7f8 fab6 	bl	800029c <__adddf3>
 8007d30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4640      	mov	r0, r8
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	f7f8 faac 	bl	8000298 <__aeabi_dsub>
 8007d40:	4632      	mov	r2, r6
 8007d42:	463b      	mov	r3, r7
 8007d44:	f7f8 faaa 	bl	800029c <__adddf3>
 8007d48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d50:	ed84 7b00 	vstr	d7, [r4]
 8007d54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d58:	e755      	b.n	8007c06 <__kernel_rem_pio2+0x516>
 8007d5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d5e:	f7f8 fa9d 	bl	800029c <__adddf3>
 8007d62:	3d01      	subs	r5, #1
 8007d64:	e759      	b.n	8007c1a <__kernel_rem_pio2+0x52a>
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	9a01      	ldr	r2, [sp, #4]
 8007d6a:	601d      	str	r5, [r3, #0]
 8007d6c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007d70:	605c      	str	r4, [r3, #4]
 8007d72:	609f      	str	r7, [r3, #8]
 8007d74:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007d78:	60d3      	str	r3, [r2, #12]
 8007d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d7e:	6110      	str	r0, [r2, #16]
 8007d80:	6153      	str	r3, [r2, #20]
 8007d82:	e728      	b.n	8007bd6 <__kernel_rem_pio2+0x4e6>
 8007d84:	41700000 	.word	0x41700000
 8007d88:	3e700000 	.word	0x3e700000
 8007d8c:	00000000 	.word	0x00000000

08007d90 <__kernel_sin>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	ed2d 8b04 	vpush	{d8-d9}
 8007d98:	eeb0 8a41 	vmov.f32	s16, s2
 8007d9c:	eef0 8a61 	vmov.f32	s17, s3
 8007da0:	ec55 4b10 	vmov	r4, r5, d0
 8007da4:	b083      	sub	sp, #12
 8007da6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007daa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007dae:	9001      	str	r0, [sp, #4]
 8007db0:	da06      	bge.n	8007dc0 <__kernel_sin+0x30>
 8007db2:	ee10 0a10 	vmov	r0, s0
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7f8 fed6 	bl	8000b68 <__aeabi_d2iz>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d051      	beq.n	8007e64 <__kernel_sin+0xd4>
 8007dc0:	4622      	mov	r2, r4
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fc1e 	bl	8000608 <__aeabi_dmul>
 8007dcc:	4682      	mov	sl, r0
 8007dce:	468b      	mov	fp, r1
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	f7f8 fc16 	bl	8000608 <__aeabi_dmul>
 8007ddc:	a341      	add	r3, pc, #260	; (adr r3, 8007ee4 <__kernel_sin+0x154>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	4680      	mov	r8, r0
 8007de4:	4689      	mov	r9, r1
 8007de6:	4650      	mov	r0, sl
 8007de8:	4659      	mov	r1, fp
 8007dea:	f7f8 fc0d 	bl	8000608 <__aeabi_dmul>
 8007dee:	a33f      	add	r3, pc, #252	; (adr r3, 8007eec <__kernel_sin+0x15c>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fa50 	bl	8000298 <__aeabi_dsub>
 8007df8:	4652      	mov	r2, sl
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	f7f8 fc04 	bl	8000608 <__aeabi_dmul>
 8007e00:	a33c      	add	r3, pc, #240	; (adr r3, 8007ef4 <__kernel_sin+0x164>)
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fa49 	bl	800029c <__adddf3>
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	f7f8 fbfb 	bl	8000608 <__aeabi_dmul>
 8007e12:	a33a      	add	r3, pc, #232	; (adr r3, 8007efc <__kernel_sin+0x16c>)
 8007e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e18:	f7f8 fa3e 	bl	8000298 <__aeabi_dsub>
 8007e1c:	4652      	mov	r2, sl
 8007e1e:	465b      	mov	r3, fp
 8007e20:	f7f8 fbf2 	bl	8000608 <__aeabi_dmul>
 8007e24:	a337      	add	r3, pc, #220	; (adr r3, 8007f04 <__kernel_sin+0x174>)
 8007e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2a:	f7f8 fa37 	bl	800029c <__adddf3>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	4606      	mov	r6, r0
 8007e32:	460f      	mov	r7, r1
 8007e34:	b9eb      	cbnz	r3, 8007e72 <__kernel_sin+0xe2>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	4659      	mov	r1, fp
 8007e3e:	f7f8 fbe3 	bl	8000608 <__aeabi_dmul>
 8007e42:	a325      	add	r3, pc, #148	; (adr r3, 8007ed8 <__kernel_sin+0x148>)
 8007e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e48:	f7f8 fa26 	bl	8000298 <__aeabi_dsub>
 8007e4c:	4642      	mov	r2, r8
 8007e4e:	464b      	mov	r3, r9
 8007e50:	f7f8 fbda 	bl	8000608 <__aeabi_dmul>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4620      	mov	r0, r4
 8007e5a:	4629      	mov	r1, r5
 8007e5c:	f7f8 fa1e 	bl	800029c <__adddf3>
 8007e60:	4604      	mov	r4, r0
 8007e62:	460d      	mov	r5, r1
 8007e64:	ec45 4b10 	vmov	d0, r4, r5
 8007e68:	b003      	add	sp, #12
 8007e6a:	ecbd 8b04 	vpop	{d8-d9}
 8007e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e72:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <__kernel_sin+0x150>)
 8007e74:	ec51 0b18 	vmov	r0, r1, d8
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f7f8 fbc5 	bl	8000608 <__aeabi_dmul>
 8007e7e:	4632      	mov	r2, r6
 8007e80:	ec41 0b19 	vmov	d9, r0, r1
 8007e84:	463b      	mov	r3, r7
 8007e86:	4640      	mov	r0, r8
 8007e88:	4649      	mov	r1, r9
 8007e8a:	f7f8 fbbd 	bl	8000608 <__aeabi_dmul>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	ec51 0b19 	vmov	r0, r1, d9
 8007e96:	f7f8 f9ff 	bl	8000298 <__aeabi_dsub>
 8007e9a:	4652      	mov	r2, sl
 8007e9c:	465b      	mov	r3, fp
 8007e9e:	f7f8 fbb3 	bl	8000608 <__aeabi_dmul>
 8007ea2:	ec53 2b18 	vmov	r2, r3, d8
 8007ea6:	f7f8 f9f7 	bl	8000298 <__aeabi_dsub>
 8007eaa:	a30b      	add	r3, pc, #44	; (adr r3, 8007ed8 <__kernel_sin+0x148>)
 8007eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	460f      	mov	r7, r1
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	f7f8 fba6 	bl	8000608 <__aeabi_dmul>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 f9ea 	bl	800029c <__adddf3>
 8007ec8:	4602      	mov	r2, r0
 8007eca:	460b      	mov	r3, r1
 8007ecc:	4620      	mov	r0, r4
 8007ece:	4629      	mov	r1, r5
 8007ed0:	f7f8 f9e2 	bl	8000298 <__aeabi_dsub>
 8007ed4:	e7c4      	b.n	8007e60 <__kernel_sin+0xd0>
 8007ed6:	bf00      	nop
 8007ed8:	55555549 	.word	0x55555549
 8007edc:	3fc55555 	.word	0x3fc55555
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	5acfd57c 	.word	0x5acfd57c
 8007ee8:	3de5d93a 	.word	0x3de5d93a
 8007eec:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ef0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007ef4:	57b1fe7d 	.word	0x57b1fe7d
 8007ef8:	3ec71de3 	.word	0x3ec71de3
 8007efc:	19c161d5 	.word	0x19c161d5
 8007f00:	3f2a01a0 	.word	0x3f2a01a0
 8007f04:	1110f8a6 	.word	0x1110f8a6
 8007f08:	3f811111 	.word	0x3f811111

08007f0c <fabs>:
 8007f0c:	ec51 0b10 	vmov	r0, r1, d0
 8007f10:	ee10 2a10 	vmov	r2, s0
 8007f14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f18:	ec43 2b10 	vmov	d0, r2, r3
 8007f1c:	4770      	bx	lr
	...

08007f20 <floor>:
 8007f20:	ec51 0b10 	vmov	r0, r1, d0
 8007f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f28:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007f2c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007f30:	2e13      	cmp	r6, #19
 8007f32:	ee10 5a10 	vmov	r5, s0
 8007f36:	ee10 8a10 	vmov	r8, s0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	dc32      	bgt.n	8007fa4 <floor+0x84>
 8007f3e:	2e00      	cmp	r6, #0
 8007f40:	da14      	bge.n	8007f6c <floor+0x4c>
 8007f42:	a333      	add	r3, pc, #204	; (adr r3, 8008010 <floor+0xf0>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f7f8 f9a8 	bl	800029c <__adddf3>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f7f8 fdea 	bl	8000b28 <__aeabi_dcmpgt>
 8007f54:	b138      	cbz	r0, 8007f66 <floor+0x46>
 8007f56:	2c00      	cmp	r4, #0
 8007f58:	da57      	bge.n	800800a <floor+0xea>
 8007f5a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f5e:	431d      	orrs	r5, r3
 8007f60:	d001      	beq.n	8007f66 <floor+0x46>
 8007f62:	4c2d      	ldr	r4, [pc, #180]	; (8008018 <floor+0xf8>)
 8007f64:	2500      	movs	r5, #0
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	e025      	b.n	8007fb8 <floor+0x98>
 8007f6c:	4f2b      	ldr	r7, [pc, #172]	; (800801c <floor+0xfc>)
 8007f6e:	4137      	asrs	r7, r6
 8007f70:	ea01 0307 	and.w	r3, r1, r7
 8007f74:	4303      	orrs	r3, r0
 8007f76:	d01f      	beq.n	8007fb8 <floor+0x98>
 8007f78:	a325      	add	r3, pc, #148	; (adr r3, 8008010 <floor+0xf0>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 f98d 	bl	800029c <__adddf3>
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	f7f8 fdcf 	bl	8000b28 <__aeabi_dcmpgt>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d0eb      	beq.n	8007f66 <floor+0x46>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	bfbe      	ittt	lt
 8007f92:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007f96:	fa43 f606 	asrlt.w	r6, r3, r6
 8007f9a:	19a4      	addlt	r4, r4, r6
 8007f9c:	ea24 0407 	bic.w	r4, r4, r7
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	e7e0      	b.n	8007f66 <floor+0x46>
 8007fa4:	2e33      	cmp	r6, #51	; 0x33
 8007fa6:	dd0b      	ble.n	8007fc0 <floor+0xa0>
 8007fa8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007fac:	d104      	bne.n	8007fb8 <floor+0x98>
 8007fae:	ee10 2a10 	vmov	r2, s0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	f7f8 f972 	bl	800029c <__adddf3>
 8007fb8:	ec41 0b10 	vmov	d0, r0, r1
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fc8:	fa23 f707 	lsr.w	r7, r3, r7
 8007fcc:	4207      	tst	r7, r0
 8007fce:	d0f3      	beq.n	8007fb8 <floor+0x98>
 8007fd0:	a30f      	add	r3, pc, #60	; (adr r3, 8008010 <floor+0xf0>)
 8007fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd6:	f7f8 f961 	bl	800029c <__adddf3>
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2300      	movs	r3, #0
 8007fde:	f7f8 fda3 	bl	8000b28 <__aeabi_dcmpgt>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	d0bf      	beq.n	8007f66 <floor+0x46>
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	da02      	bge.n	8007ff0 <floor+0xd0>
 8007fea:	2e14      	cmp	r6, #20
 8007fec:	d103      	bne.n	8007ff6 <floor+0xd6>
 8007fee:	3401      	adds	r4, #1
 8007ff0:	ea25 0507 	bic.w	r5, r5, r7
 8007ff4:	e7b7      	b.n	8007f66 <floor+0x46>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007ffc:	fa03 f606 	lsl.w	r6, r3, r6
 8008000:	4435      	add	r5, r6
 8008002:	4545      	cmp	r5, r8
 8008004:	bf38      	it	cc
 8008006:	18e4      	addcc	r4, r4, r3
 8008008:	e7f2      	b.n	8007ff0 <floor+0xd0>
 800800a:	2500      	movs	r5, #0
 800800c:	462c      	mov	r4, r5
 800800e:	e7aa      	b.n	8007f66 <floor+0x46>
 8008010:	8800759c 	.word	0x8800759c
 8008014:	7e37e43c 	.word	0x7e37e43c
 8008018:	bff00000 	.word	0xbff00000
 800801c:	000fffff 	.word	0x000fffff

08008020 <scalbn>:
 8008020:	b570      	push	{r4, r5, r6, lr}
 8008022:	ec55 4b10 	vmov	r4, r5, d0
 8008026:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800802a:	4606      	mov	r6, r0
 800802c:	462b      	mov	r3, r5
 800802e:	b99a      	cbnz	r2, 8008058 <scalbn+0x38>
 8008030:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008034:	4323      	orrs	r3, r4
 8008036:	d036      	beq.n	80080a6 <scalbn+0x86>
 8008038:	4b39      	ldr	r3, [pc, #228]	; (8008120 <scalbn+0x100>)
 800803a:	4629      	mov	r1, r5
 800803c:	ee10 0a10 	vmov	r0, s0
 8008040:	2200      	movs	r2, #0
 8008042:	f7f8 fae1 	bl	8000608 <__aeabi_dmul>
 8008046:	4b37      	ldr	r3, [pc, #220]	; (8008124 <scalbn+0x104>)
 8008048:	429e      	cmp	r6, r3
 800804a:	4604      	mov	r4, r0
 800804c:	460d      	mov	r5, r1
 800804e:	da10      	bge.n	8008072 <scalbn+0x52>
 8008050:	a32b      	add	r3, pc, #172	; (adr r3, 8008100 <scalbn+0xe0>)
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	e03a      	b.n	80080ce <scalbn+0xae>
 8008058:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800805c:	428a      	cmp	r2, r1
 800805e:	d10c      	bne.n	800807a <scalbn+0x5a>
 8008060:	ee10 2a10 	vmov	r2, s0
 8008064:	4620      	mov	r0, r4
 8008066:	4629      	mov	r1, r5
 8008068:	f7f8 f918 	bl	800029c <__adddf3>
 800806c:	4604      	mov	r4, r0
 800806e:	460d      	mov	r5, r1
 8008070:	e019      	b.n	80080a6 <scalbn+0x86>
 8008072:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008076:	460b      	mov	r3, r1
 8008078:	3a36      	subs	r2, #54	; 0x36
 800807a:	4432      	add	r2, r6
 800807c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008080:	428a      	cmp	r2, r1
 8008082:	dd08      	ble.n	8008096 <scalbn+0x76>
 8008084:	2d00      	cmp	r5, #0
 8008086:	a120      	add	r1, pc, #128	; (adr r1, 8008108 <scalbn+0xe8>)
 8008088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800808c:	da1c      	bge.n	80080c8 <scalbn+0xa8>
 800808e:	a120      	add	r1, pc, #128	; (adr r1, 8008110 <scalbn+0xf0>)
 8008090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008094:	e018      	b.n	80080c8 <scalbn+0xa8>
 8008096:	2a00      	cmp	r2, #0
 8008098:	dd08      	ble.n	80080ac <scalbn+0x8c>
 800809a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800809e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080a6:	ec45 4b10 	vmov	d0, r4, r5
 80080aa:	bd70      	pop	{r4, r5, r6, pc}
 80080ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080b0:	da19      	bge.n	80080e6 <scalbn+0xc6>
 80080b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080b6:	429e      	cmp	r6, r3
 80080b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80080bc:	dd0a      	ble.n	80080d4 <scalbn+0xb4>
 80080be:	a112      	add	r1, pc, #72	; (adr r1, 8008108 <scalbn+0xe8>)
 80080c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e2      	bne.n	800808e <scalbn+0x6e>
 80080c8:	a30f      	add	r3, pc, #60	; (adr r3, 8008108 <scalbn+0xe8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa9b 	bl	8000608 <__aeabi_dmul>
 80080d2:	e7cb      	b.n	800806c <scalbn+0x4c>
 80080d4:	a10a      	add	r1, pc, #40	; (adr r1, 8008100 <scalbn+0xe0>)
 80080d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0b8      	beq.n	8008050 <scalbn+0x30>
 80080de:	a10e      	add	r1, pc, #56	; (adr r1, 8008118 <scalbn+0xf8>)
 80080e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080e4:	e7b4      	b.n	8008050 <scalbn+0x30>
 80080e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080ea:	3236      	adds	r2, #54	; 0x36
 80080ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80080f4:	4620      	mov	r0, r4
 80080f6:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <scalbn+0x108>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	e7e8      	b.n	80080ce <scalbn+0xae>
 80080fc:	f3af 8000 	nop.w
 8008100:	c2f8f359 	.word	0xc2f8f359
 8008104:	01a56e1f 	.word	0x01a56e1f
 8008108:	8800759c 	.word	0x8800759c
 800810c:	7e37e43c 	.word	0x7e37e43c
 8008110:	8800759c 	.word	0x8800759c
 8008114:	fe37e43c 	.word	0xfe37e43c
 8008118:	c2f8f359 	.word	0xc2f8f359
 800811c:	81a56e1f 	.word	0x81a56e1f
 8008120:	43500000 	.word	0x43500000
 8008124:	ffff3cb0 	.word	0xffff3cb0
 8008128:	3c900000 	.word	0x3c900000

0800812c <_close>:
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <_close+0xc>)
 800812e:	2258      	movs	r2, #88	; 0x58
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	4770      	bx	lr
 8008138:	20000278 	.word	0x20000278

0800813c <_fstat>:
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <_fstat+0xc>)
 800813e:	2258      	movs	r2, #88	; 0x58
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	f04f 30ff 	mov.w	r0, #4294967295
 8008146:	4770      	bx	lr
 8008148:	20000278 	.word	0x20000278

0800814c <_getpid>:
 800814c:	4b02      	ldr	r3, [pc, #8]	; (8008158 <_getpid+0xc>)
 800814e:	2258      	movs	r2, #88	; 0x58
 8008150:	601a      	str	r2, [r3, #0]
 8008152:	f04f 30ff 	mov.w	r0, #4294967295
 8008156:	4770      	bx	lr
 8008158:	20000278 	.word	0x20000278

0800815c <_isatty>:
 800815c:	4b02      	ldr	r3, [pc, #8]	; (8008168 <_isatty+0xc>)
 800815e:	2258      	movs	r2, #88	; 0x58
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	2000      	movs	r0, #0
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20000278 	.word	0x20000278

0800816c <_kill>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <_kill+0xc>)
 800816e:	2258      	movs	r2, #88	; 0x58
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	4770      	bx	lr
 8008178:	20000278 	.word	0x20000278

0800817c <_lseek>:
 800817c:	4b02      	ldr	r3, [pc, #8]	; (8008188 <_lseek+0xc>)
 800817e:	2258      	movs	r2, #88	; 0x58
 8008180:	601a      	str	r2, [r3, #0]
 8008182:	f04f 30ff 	mov.w	r0, #4294967295
 8008186:	4770      	bx	lr
 8008188:	20000278 	.word	0x20000278

0800818c <_read>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <_read+0xc>)
 800818e:	2258      	movs	r2, #88	; 0x58
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	4770      	bx	lr
 8008198:	20000278 	.word	0x20000278

0800819c <_sbrk>:
 800819c:	4a04      	ldr	r2, [pc, #16]	; (80081b0 <_sbrk+0x14>)
 800819e:	6811      	ldr	r1, [r2, #0]
 80081a0:	4603      	mov	r3, r0
 80081a2:	b909      	cbnz	r1, 80081a8 <_sbrk+0xc>
 80081a4:	4903      	ldr	r1, [pc, #12]	; (80081b4 <_sbrk+0x18>)
 80081a6:	6011      	str	r1, [r2, #0]
 80081a8:	6810      	ldr	r0, [r2, #0]
 80081aa:	4403      	add	r3, r0
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	4770      	bx	lr
 80081b0:	20000280 	.word	0x20000280
 80081b4:	20000288 	.word	0x20000288

080081b8 <_write>:
 80081b8:	4b02      	ldr	r3, [pc, #8]	; (80081c4 <_write+0xc>)
 80081ba:	2258      	movs	r2, #88	; 0x58
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	f04f 30ff 	mov.w	r0, #4294967295
 80081c2:	4770      	bx	lr
 80081c4:	20000278 	.word	0x20000278

080081c8 <_exit>:
 80081c8:	e7fe      	b.n	80081c8 <_exit>
	...

080081cc <_init>:
 80081cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ce:	bf00      	nop
 80081d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081d2:	bc08      	pop	{r3}
 80081d4:	469e      	mov	lr, r3
 80081d6:	4770      	bx	lr

080081d8 <_fini>:
 80081d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081da:	bf00      	nop
 80081dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081de:	bc08      	pop	{r3}
 80081e0:	469e      	mov	lr, r3
 80081e2:	4770      	bx	lr
