
TestLib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c83c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f48  0800c9e0  0800c9e0  0001c9e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d928  0800d928  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d930  0800d930  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800d938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200001f4  0800db2c  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800db2c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a52f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d3  00000000  00000000  0002a753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002d1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a3c  00000000  00000000  0002da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abaf  00000000  00000000  0003f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a93e  00000000  00000000  0004a06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a49a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f30  00000000  00000000  000a49fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c9c4 	.word	0x0800c9c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800c9c4 	.word	0x0800c9c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <i2cActivate+0x70>)
 8001010:	607b      	str	r3, [r7, #4]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <i2cActivate+0x74>)
 8001014:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f004 ffd8 	bl	8005fcc <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f004 fc99 	bl	8005954 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8001022:	2202      	movs	r2, #2
 8001024:	2108      	movs	r1, #8
 8001026:	6838      	ldr	r0, [r7, #0]
 8001028:	f004 fd5a 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 800102c:	2204      	movs	r2, #4
 800102e:	2108      	movs	r1, #8
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f004 fe22 	bl	8005c7a <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8001036:	2202      	movs	r2, #2
 8001038:	2109      	movs	r1, #9
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f004 fd50 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8001040:	2204      	movs	r2, #4
 8001042:	2109      	movs	r1, #9
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f004 fe18 	bl	8005c7a <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 800104a:	2201      	movs	r2, #1
 800104c:	2108      	movs	r1, #8
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f004 fe7c 	bl	8005d4c <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8001054:	2201      	movs	r2, #1
 8001056:	2109      	movs	r1, #9
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f004 fe77 	bl	8005d4c <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_1Mz);		//I2C_CLOCK_1Mz
 800105e:	2304      	movs	r3, #4
 8001060:	2211      	movs	r2, #17
 8001062:	2100      	movs	r1, #0
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f005 f863 	bl	8006130 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f005 f9ff 	bl	800646e <i2cEnableDevice>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
#endif /* BALA2024 */
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	40020400 	.word	0x40020400

08001080 <ledActivate>:




void ledActivate(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8001084:	481e      	ldr	r0, [pc, #120]	; (8001100 <ledActivate+0x80>)
 8001086:	f004 fcc7 	bl	8005a18 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800108a:	2201      	movs	r2, #1
 800108c:	2103      	movs	r1, #3
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <ledActivate+0x80>)
 8001090:	f004 fd26 	bl	8005ae0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8001094:	2200      	movs	r2, #0
 8001096:	2103      	movs	r1, #3
 8001098:	4819      	ldr	r0, [pc, #100]	; (8001100 <ledActivate+0x80>)
 800109a:	f004 fe57 	bl	8005d4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800109e:	2201      	movs	r2, #1
 80010a0:	2103      	movs	r1, #3
 80010a2:	4817      	ldr	r0, [pc, #92]	; (8001100 <ledActivate+0x80>)
 80010a4:	f004 fe9b 	bl	8005dde <gpioSelectPushPullMode>
    LED_red_off;
 80010a8:	2103      	movs	r1, #3
 80010aa:	4815      	ldr	r0, [pc, #84]	; (8001100 <ledActivate+0x80>)
 80010ac:	f004 fd63 	bl	8005b76 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2104      	movs	r1, #4
 80010b4:	4812      	ldr	r0, [pc, #72]	; (8001100 <ledActivate+0x80>)
 80010b6:	f004 fd13 	bl	8005ae0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2104      	movs	r1, #4
 80010be:	4810      	ldr	r0, [pc, #64]	; (8001100 <ledActivate+0x80>)
 80010c0:	f004 fe44 	bl	8005d4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2104      	movs	r1, #4
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <ledActivate+0x80>)
 80010ca:	f004 fe88 	bl	8005dde <gpioSelectPushPullMode>
    LED_green_off;
 80010ce:	2104      	movs	r1, #4
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <ledActivate+0x80>)
 80010d2:	f004 fd50 	bl	8005b76 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 80010d6:	2201      	movs	r2, #1
 80010d8:	210a      	movs	r1, #10
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <ledActivate+0x80>)
 80010dc:	f004 fd00 	bl	8005ae0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 80010e0:	2200      	movs	r2, #0
 80010e2:	210a      	movs	r1, #10
 80010e4:	4806      	ldr	r0, [pc, #24]	; (8001100 <ledActivate+0x80>)
 80010e6:	f004 fe31 	bl	8005d4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 80010ea:	2201      	movs	r2, #1
 80010ec:	210a      	movs	r1, #10
 80010ee:	4804      	ldr	r0, [pc, #16]	; (8001100 <ledActivate+0x80>)
 80010f0:	f004 fe75 	bl	8005dde <gpioSelectPushPullMode>
    LED_blue_off;
 80010f4:	210a      	movs	r1, #10
 80010f6:	4802      	ldr	r0, [pc, #8]	; (8001100 <ledActivate+0x80>)
 80010f8:	f004 fd3d 	bl	8005b76 <gpioSetPin>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020400 	.word	0x40020400

08001104 <BalaHWsetup>:




void BalaHWsetup(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8001108:	f7ff ffba 	bl	8001080 <ledActivate>
   i2cActivate();
 800110c:	f7ff ff7c 	bl	8001008 <i2cActivate>

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8001154:	482b      	ldr	r0, [pc, #172]	; (8001204 <initRotaryPushButton+0xb4>)
 8001156:	f004 fbfd 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOB);
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <initRotaryPushButton+0xb8>)
 800115c:	f004 fbfa 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOC);
 8001160:	482a      	ldr	r0, [pc, #168]	; (800120c <initRotaryPushButton+0xbc>)
 8001162:	f004 fbf7 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOD);
 8001166:	482a      	ldr	r0, [pc, #168]	; (8001210 <initRotaryPushButton+0xc0>)
 8001168:	f004 fbf4 	bl	8005954 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <initRotaryPushButton+0xc4>)
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	4a27      	ldr	r2, [pc, #156]	; (8001214 <initRotaryPushButton+0xc4>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 800117c:	2200      	movs	r2, #0
 800117e:	2101      	movs	r1, #1
 8001180:	4822      	ldr	r0, [pc, #136]	; (800120c <initRotaryPushButton+0xbc>)
 8001182:	f004 fcad 	bl	8005ae0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8001186:	2201      	movs	r2, #1
 8001188:	2101      	movs	r1, #1
 800118a:	4820      	ldr	r0, [pc, #128]	; (800120c <initRotaryPushButton+0xbc>)
 800118c:	f004 fe27 	bl	8005dde <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	481d      	ldr	r0, [pc, #116]	; (800120c <initRotaryPushButton+0xbc>)
 8001196:	f004 fca3 	bl	8005ae0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 800119a:	2201      	movs	r2, #1
 800119c:	2100      	movs	r1, #0
 800119e:	481b      	ldr	r0, [pc, #108]	; (800120c <initRotaryPushButton+0xbc>)
 80011a0:	f004 fe1d 	bl	8005dde <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 80011a4:	2200      	movs	r2, #0
 80011a6:	210a      	movs	r1, #10
 80011a8:	4816      	ldr	r0, [pc, #88]	; (8001204 <initRotaryPushButton+0xb4>)
 80011aa:	f004 fc99 	bl	8005ae0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 80011ae:	2201      	movs	r2, #1
 80011b0:	210a      	movs	r1, #10
 80011b2:	4814      	ldr	r0, [pc, #80]	; (8001204 <initRotaryPushButton+0xb4>)
 80011b4:	f004 fe13 	bl	8005dde <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 80011b8:	f004 f976 	bl	80054a8 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 80011bc:	2101      	movs	r1, #1
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <initRotaryPushButton+0xbc>)
 80011c0:	f004 f98e 	bl	80054e0 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 80011c4:	210a      	movs	r1, #10
 80011c6:	480f      	ldr	r0, [pc, #60]	; (8001204 <initRotaryPushButton+0xb4>)
 80011c8:	f004 f98a 	bl	80054e0 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f004 fa3b 	bl	8005648 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 80011d2:	200a      	movs	r0, #10
 80011d4:	f004 fa38 	bl	8005648 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 80011d8:	2101      	movs	r1, #1
 80011da:	2001      	movs	r0, #1
 80011dc:	f004 fa56 	bl	800568c <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 80011e0:	2100      	movs	r1, #0
 80011e2:	200a      	movs	r0, #10
 80011e4:	f004 fa52 	bl	800568c <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 80011e8:	2007      	movs	r0, #7
 80011ea:	f7ff ff93 	bl	8001114 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 80011ee:	2028      	movs	r0, #40	; 0x28
 80011f0:	f7ff ff90 	bl	8001114 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80011f4:	b662      	cpsie	i
}
 80011f6:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <initRotaryPushButton+0xc8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020000 	.word	0x40020000
 8001208:	40020400 	.word	0x40020400
 800120c:	40020800 	.word	0x40020800
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40023800 	.word	0x40023800
 8001218:	20000215 	.word	0x20000215

0800121c <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8001220:	4815      	ldr	r0, [pc, #84]	; (8001278 <initRotaryPushButtonLED+0x5c>)
 8001222:	f004 fb97 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOB);
 8001226:	4815      	ldr	r0, [pc, #84]	; (800127c <initRotaryPushButtonLED+0x60>)
 8001228:	f004 fb94 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOC);
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <initRotaryPushButtonLED+0x64>)
 800122e:	f004 fb91 	bl	8005954 <gpioInitPort>
	gpioInitPort(GPIOD);
 8001232:	4814      	ldr	r0, [pc, #80]	; (8001284 <initRotaryPushButtonLED+0x68>)
 8001234:	f004 fb8e 	bl	8005954 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 8001238:	2201      	movs	r2, #1
 800123a:	2103      	movs	r1, #3
 800123c:	480f      	ldr	r0, [pc, #60]	; (800127c <initRotaryPushButtonLED+0x60>)
 800123e:	f004 fc4f 	bl	8005ae0 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	480d      	ldr	r0, [pc, #52]	; (800127c <initRotaryPushButtonLED+0x60>)
 8001248:	f004 fc4a 	bl	8005ae0 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 800124c:	2201      	movs	r2, #1
 800124e:	210a      	movs	r1, #10
 8001250:	480a      	ldr	r0, [pc, #40]	; (800127c <initRotaryPushButtonLED+0x60>)
 8001252:	f004 fc45 	bl	8005ae0 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 8001256:	2103      	movs	r1, #3
 8001258:	4808      	ldr	r0, [pc, #32]	; (800127c <initRotaryPushButtonLED+0x60>)
 800125a:	f004 fc8c 	bl	8005b76 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 800125e:	2104      	movs	r1, #4
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <initRotaryPushButtonLED+0x60>)
 8001262:	f004 fc88 	bl	8005b76 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 8001266:	210a      	movs	r1, #10
 8001268:	4804      	ldr	r0, [pc, #16]	; (800127c <initRotaryPushButtonLED+0x60>)
 800126a:	f004 fc84 	bl	8005b76 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <initRotaryPushButtonLED+0x6c>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020000 	.word	0x40020000
 800127c:	40020400 	.word	0x40020400
 8001280:	40020800 	.word	0x40020800
 8001284:	40020c00 	.word	0x40020c00
 8001288:	20000216 	.word	0x20000216

0800128c <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <getRotaryPushButton+0x3c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	f083 0301 	eor.w	r3, r3, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 80012a0:	f7ff ff56 	bl	8001150 <initRotaryPushButton>
		return ERROR_VALUE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e00a      	b.n	80012be <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <getRotaryPushButton+0x40>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <getRotaryPushButton+0x40>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <getRotaryPushButton+0x40>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000215 	.word	0x20000215
 80012cc:	20000214 	.word	0x20000214

080012d0 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <getRotaryPosition+0x24>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f083 0301 	eor.w	r3, r3, #1
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e001      	b.n	80012ea <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <getRotaryPosition+0x28>)
 80012e8:	681b      	ldr	r3, [r3, #0]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	20000215 	.word	0x20000215
 80012f8:	20000210 	.word	0x20000210

080012fc <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <setRotaryPosition+0x30>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f083 0301 	eor.w	r3, r3, #1
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 8001312:	2301      	movs	r3, #1
 8001314:	e003      	b.n	800131e <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 8001316:	4a06      	ldr	r2, [pc, #24]	; (8001330 <setRotaryPosition+0x34>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]

	return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000215 	.word	0x20000215
 8001330:	20000210 	.word	0x20000210

08001334 <EXTI1_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8001338:	2100      	movs	r1, #0
 800133a:	480f      	ldr	r0, [pc, #60]	; (8001378 <EXTI1_IRQHandler+0x44>)
 800133c:	f004 fdac 	bl	8005e98 <gpioGetPinState>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <EXTI1_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <EXTI1_IRQHandler+0x48>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	3301      	adds	r3, #1
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <EXTI1_IRQHandler+0x48>)
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	e004      	b.n	800135c <EXTI1_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <EXTI1_IRQHandler+0x48>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3b01      	subs	r3, #1
 8001358:	4a08      	ldr	r2, [pc, #32]	; (800137c <EXTI1_IRQHandler+0x48>)
 800135a:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <EXTI1_IRQHandler+0x4c>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <EXTI1_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <EXTI1_IRQHandler+0x4c>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <EXTI1_IRQHandler+0x4c>)
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6153      	str	r3, [r2, #20]
	}
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40020800 	.word	0x40020800
 800137c:	20000210 	.word	0x20000210
 8001380:	40013c00 	.word	0x40013c00

08001384 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <EXTI15_10_IRQHandler+0x2c>)
 800138a:	2201      	movs	r2, #1
 800138c:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <EXTI15_10_IRQHandler+0x30>)
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <EXTI15_10_IRQHandler+0x30>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <EXTI15_10_IRQHandler+0x30>)
 80013a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a4:	6153      	str	r3, [r2, #20]
	}
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	20000214 	.word	0x20000214
 80013b4:	40013c00 	.word	0x40013c00

080013b8 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <delayms+0x18>)
 80013c4:	f005 fd04 	bl	8006dd0 <systickDelay>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000240 	.word	0x20000240

080013d4 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <tftSPISenddata+0x20>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2206      	movs	r2, #6
 80013e6:	4904      	ldr	r1, [pc, #16]	; (80013f8 <tftSPISenddata+0x24>)
 80013e8:	f005 fbe3 	bl	8006bb2 <spiWriteByte>
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000004 	.word	0x20000004
 80013f8:	40020400 	.word	0x40020400

080013fc <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 8001406:	2107      	movs	r1, #7
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <tftSendCmd+0x24>)
 800140a:	f004 fbdf 	bl	8005bcc <gpioResetPin>
    tftSPISenddata(cmd);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ffdf 	bl	80013d4 <tftSPISenddata>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40020800 	.word	0x40020800

08001424 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 800142e:	2107      	movs	r1, #7
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <tftSendData+0x24>)
 8001432:	f004 fba0 	bl	8005b76 <gpioSetPin>
    tftSPISenddata(data);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffcb 	bl	80013d4 <tftSPISenddata>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40020800 	.word	0x40020800

0800144c <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8001452:	4825      	ldr	r0, [pc, #148]	; (80014e8 <spiInit+0x9c>)
 8001454:	f004 fae0 	bl	8005a18 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001458:	2201      	movs	r2, #1
 800145a:	2109      	movs	r1, #9
 800145c:	4822      	ldr	r0, [pc, #136]	; (80014e8 <spiInit+0x9c>)
 800145e:	f004 fb3f 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8001462:	4822      	ldr	r0, [pc, #136]	; (80014ec <spiInit+0xa0>)
 8001464:	f004 fad8 	bl	8005a18 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001468:	2201      	movs	r2, #1
 800146a:	2107      	movs	r1, #7
 800146c:	481f      	ldr	r0, [pc, #124]	; (80014ec <spiInit+0xa0>)
 800146e:	f004 fb37 	bl	8005ae0 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8001472:	481f      	ldr	r0, [pc, #124]	; (80014f0 <spiInit+0xa4>)
 8001474:	f004 fa6e 	bl	8005954 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001478:	2201      	movs	r2, #1
 800147a:	2106      	movs	r1, #6
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <spiInit+0xa4>)
 800147e:	f004 fb2f 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8001482:	2201      	movs	r2, #1
 8001484:	2106      	movs	r1, #6
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <spiInit+0xa4>)
 8001488:	f004 fca9 	bl	8005dde <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <spiInit+0x9c>)
 800148e:	f004 fa61 	bl	8005954 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8001492:	2202      	movs	r2, #2
 8001494:	2105      	movs	r1, #5
 8001496:	4814      	ldr	r0, [pc, #80]	; (80014e8 <spiInit+0x9c>)
 8001498:	f004 fb22 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 800149c:	2205      	movs	r2, #5
 800149e:	2105      	movs	r1, #5
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <spiInit+0x9c>)
 80014a2:	f004 fbea 	bl	8005c7a <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 80014a6:	2202      	movs	r2, #2
 80014a8:	2107      	movs	r1, #7
 80014aa:	480f      	ldr	r0, [pc, #60]	; (80014e8 <spiInit+0x9c>)
 80014ac:	f004 fb18 	bl	8005ae0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 80014b0:	2205      	movs	r2, #5
 80014b2:	2107      	movs	r1, #7
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <spiInit+0x9c>)
 80014b6:	f004 fbe0 	bl	8005c7a <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <spiInit+0xa8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f005 fb1c 	bl	8006afc <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <spiInit+0xa8>)
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	2300      	movs	r3, #0
 80014ca:	9303      	str	r3, [sp, #12]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	2301      	movs	r3, #1
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	2200      	movs	r2, #0
 80014dc:	2103      	movs	r1, #3
 80014de:	f005 fa1f 	bl	8006920 <spiInitSPI>

}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020400 	.word	0x40020400
 80014f4:	20000004 	.word	0x20000004

080014f8 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 800150a:	e033      	b.n	8001574 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff71 	bl	80013fc <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	b29b      	uxth	r3, r3
 8001528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001534:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8001536:	e006      	b.n	8001546 <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff6f 	bl	8001424 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	73ba      	strb	r2, [r7, #14]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f3      	bne.n	8001538 <commandList+0x40>
		}

		if(ms) {
 8001550:	89bb      	ldrh	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00e      	beq.n	8001574 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	2bff      	cmp	r3, #255	; 0xff
 8001564:	d102      	bne.n	800156c <commandList+0x74>
 8001566:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800156a:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff22 	bl	80013b8 <delayms>
	while(numCommands--) {                 // For each command...
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	1e5a      	subs	r2, r3, #1
 8001578:	73fa      	strb	r2, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1c6      	bne.n	800150c <commandList+0x14>
		}
	}
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001590:	2106      	movs	r1, #6
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <commonInit+0x3c>)
 8001594:	f004 fb1a 	bl	8005bcc <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8001598:	2109      	movs	r1, #9
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <commonInit+0x40>)
 800159c:	f004 fb16 	bl	8005bcc <gpioResetPin>
	delayms(50);  //default value 500
 80015a0:	2032      	movs	r0, #50	; 0x32
 80015a2:	f7ff ff09 	bl	80013b8 <delayms>
	ST7735_RST1;
 80015a6:	2109      	movs	r1, #9
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <commonInit+0x40>)
 80015aa:	f004 fae4 	bl	8005b76 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <commonInit+0x32>
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ff9f 	bl	80014f8 <commandList>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020000 	.word	0x40020000

080015cc <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80015d6:	2032      	movs	r0, #50	; 0x32
 80015d8:	f7ff feee 	bl	80013b8 <delayms>
	commonInit(Rcmd1);
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <tftInitR+0x58>)
 80015de:	f7ff ffd3 	bl	8001588 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80015e8:	480f      	ldr	r0, [pc, #60]	; (8001628 <tftInitR+0x5c>)
 80015ea:	f7ff ff85 	bl	80014f8 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80015ee:	4b0f      	ldr	r3, [pc, #60]	; (800162c <tftInitR+0x60>)
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <tftInitR+0x64>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	e002      	b.n	8001602 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <tftInitR+0x68>)
 80015fe:	f7ff ff7b 	bl	80014f8 <commandList>
	}
	commandList(Rcmd3);
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <tftInitR+0x6c>)
 8001604:	f7ff ff78 	bl	80014f8 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d105      	bne.n	800161a <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 800160e:	2036      	movs	r0, #54	; 0x36
 8001610:	f7ff fef4 	bl	80013fc <tftSendCmd>
		tftSendData(0xC0);
 8001614:	20c0      	movs	r0, #192	; 0xc0
 8001616:	f7ff ff05 	bl	8001424 <tftSendData>
	}

	//  tabcolor = options;
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	0800d1f8 	.word	0x0800d1f8
 8001628:	0800d234 	.word	0x0800d234
 800162c:	20000218 	.word	0x20000218
 8001630:	2000021c 	.word	0x2000021c
 8001634:	0800d244 	.word	0x0800d244
 8001638:	0800d254 	.word	0x0800d254

0800163c <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4604      	mov	r4, r0
 8001644:	4608      	mov	r0, r1
 8001646:	4611      	mov	r1, r2
 8001648:	461a      	mov	r2, r3
 800164a:	4623      	mov	r3, r4
 800164c:	71fb      	strb	r3, [r7, #7]
 800164e:	4603      	mov	r3, r0
 8001650:	71bb      	strb	r3, [r7, #6]
 8001652:	460b      	mov	r3, r1
 8001654:	717b      	strb	r3, [r7, #5]
 8001656:	4613      	mov	r3, r2
 8001658:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 800165a:	202a      	movs	r0, #42	; 0x2a
 800165c:	f7ff fece 	bl	80013fc <tftSendCmd>
	tftSendData(0x00);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fedf 	bl	8001424 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <tftSetAddrWindow+0x98>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b2da      	uxtb	r2, r3
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4413      	add	r3, r2
 8001670:	b2db      	uxtb	r3, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fed6 	bl	8001424 <tftSendData>
	tftSendData(0x00);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff fed3 	bl	8001424 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <tftSetAddrWindow+0x98>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	797b      	ldrb	r3, [r7, #5]
 8001686:	4413      	add	r3, r2
 8001688:	b2db      	uxtb	r3, r3
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff feca 	bl	8001424 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001690:	202b      	movs	r0, #43	; 0x2b
 8001692:	f7ff feb3 	bl	80013fc <tftSendCmd>
	tftSendData(0x00);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff fec4 	bl	8001424 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <tftSetAddrWindow+0x9c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	79bb      	ldrb	r3, [r7, #6]
 80016a4:	4413      	add	r3, r2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff febb 	bl	8001424 <tftSendData>
	tftSendData(0x00);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff feb8 	bl	8001424 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <tftSetAddrWindow+0x9c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	793b      	ldrb	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff feaf 	bl	8001424 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 80016c6:	202c      	movs	r0, #44	; 0x2c
 80016c8:	f7ff fe98 	bl	80013fc <tftSendCmd>
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	20000218 	.word	0x20000218
 80016d8:	2000021c 	.word	0x2000021c

080016dc <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 80016e6:	2107      	movs	r1, #7
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <tftPushColor+0x34>)
 80016ea:	f004 fa44 	bl	8005b76 <gpioSetPin>
	putpix(color);
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe6c 	bl	80013d4 <tftSPISenddata>
 80016fc:	88fb      	ldrh	r3, [r7, #6]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fe67 	bl	80013d4 <tftSPISenddata>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40020800 	.word	0x40020800

08001714 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4604      	mov	r4, r0
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	4603      	mov	r3, r0
 8001728:	80bb      	strh	r3, [r7, #4]
 800172a:	460b      	mov	r3, r1
 800172c:	807b      	strh	r3, [r7, #2]
 800172e:	4613      	mov	r3, r2
 8001730:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001736:	4a37      	ldr	r2, [pc, #220]	; (8001814 <tftFillRect+0x100>)
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	4293      	cmp	r3, r2
 800173c:	da65      	bge.n	800180a <tftFillRect+0xf6>
 800173e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001742:	4a35      	ldr	r2, [pc, #212]	; (8001818 <tftFillRect+0x104>)
 8001744:	8812      	ldrh	r2, [r2, #0]
 8001746:	4293      	cmp	r3, r2
 8001748:	da5f      	bge.n	800180a <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 800174a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800174e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001752:	4413      	add	r3, r2
 8001754:	4a2f      	ldr	r2, [pc, #188]	; (8001814 <tftFillRect+0x100>)
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	dd05      	ble.n	8001768 <tftFillRect+0x54>
		{
		w = width  - x;
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <tftFillRect+0x100>)
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b29b      	uxth	r3, r3
 8001766:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8001768:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800176c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001770:	4413      	add	r3, r2
 8001772:	4a29      	ldr	r2, [pc, #164]	; (8001818 <tftFillRect+0x104>)
 8001774:	8812      	ldrh	r2, [r2, #0]
 8001776:	4293      	cmp	r3, r2
 8001778:	dd05      	ble.n	8001786 <tftFillRect+0x72>
		{
		h = height - y;
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <tftFillRect+0x104>)
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	88bb      	ldrh	r3, [r7, #4]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	b2d8      	uxtb	r0, r3
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	b2d9      	uxtb	r1, r3
 800178e:	88fb      	ldrh	r3, [r7, #6]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b01      	subs	r3, #1
 800179c:	b2dc      	uxtb	r4, r3
 800179e:	88bb      	ldrh	r3, [r7, #4]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	883b      	ldrh	r3, [r7, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4622      	mov	r2, r4
 80017b0:	f7ff ff44 	bl	800163c <tftSetAddrWindow>

	ST7735_DC1;
 80017b4:	2107      	movs	r1, #7
 80017b6:	4819      	ldr	r0, [pc, #100]	; (800181c <tftFillRect+0x108>)
 80017b8:	f004 f9dd 	bl	8005b76 <gpioSetPin>
	for(y=h; y>0; y--)
 80017bc:	883b      	ldrh	r3, [r7, #0]
 80017be:	80bb      	strh	r3, [r7, #4]
 80017c0:	e01e      	b.n	8001800 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	80fb      	strh	r3, [r7, #6]
 80017c6:	e011      	b.n	80017ec <tftFillRect+0xd8>
		{
			putpix(color);
 80017c8:	8b3b      	ldrh	r3, [r7, #24]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fdff 	bl	80013d4 <tftSPISenddata>
 80017d6:	8b3b      	ldrh	r3, [r7, #24]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fdfa 	bl	80013d4 <tftSPISenddata>
		for(x=w; x>0; x--)
 80017e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	80fb      	strh	r3, [r7, #6]
 80017ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dce9      	bgt.n	80017c8 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 80017f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	80bb      	strh	r3, [r7, #4]
 8001800:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dcdc      	bgt.n	80017c2 <tftFillRect+0xae>
 8001808:	e000      	b.n	800180c <tftFillRect+0xf8>
		return;
 800180a:	bf00      	nop
		}
	}
}
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	bd90      	pop	{r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000000 	.word	0x20000000
 8001818:	20000002 	.word	0x20000002
 800181c:	40020800 	.word	0x40020800

08001820 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4604      	mov	r4, r0
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4623      	mov	r3, r4
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	4603      	mov	r3, r0
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <tftDrawFastVLine+0xb4>)
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	4293      	cmp	r3, r2
 8001848:	da3f      	bge.n	80018ca <tftDrawFastVLine+0xaa>
 800184a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800184e:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <tftDrawFastVLine+0xb8>)
 8001850:	8812      	ldrh	r2, [r2, #0]
 8001852:	4293      	cmp	r3, r2
 8001854:	da39      	bge.n	80018ca <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8001856:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800185a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800185e:	4413      	add	r3, r2
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <tftDrawFastVLine+0xb8>)
 8001862:	8812      	ldrh	r2, [r2, #0]
 8001864:	4293      	cmp	r3, r2
 8001866:	dd05      	ble.n	8001874 <tftDrawFastVLine+0x54>
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <tftDrawFastVLine+0xb8>)
 800186a:	881a      	ldrh	r2, [r3, #0]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	b2d8      	uxtb	r0, r3
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	b2d9      	uxtb	r1, r3
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	b2dc      	uxtb	r4, r3
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	887b      	ldrh	r3, [r7, #2]
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4622      	mov	r2, r4
 8001892:	f7ff fed3 	bl	800163c <tftSetAddrWindow>

	ST7735_DC1;
 8001896:	2107      	movs	r1, #7
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <tftDrawFastVLine+0xbc>)
 800189a:	f004 f96c 	bl	8005b76 <gpioSetPin>
	while (h--) {
 800189e:	e00b      	b.n	80018b8 <tftDrawFastVLine+0x98>
		putpix(color);
 80018a0:	883b      	ldrh	r3, [r7, #0]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd93 	bl	80013d4 <tftSPISenddata>
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fd8e 	bl	80013d4 <tftSPISenddata>
	while (h--) {
 80018b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	3a01      	subs	r2, #1
 80018c0:	b292      	uxth	r2, r2
 80018c2:	807a      	strh	r2, [r7, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1eb      	bne.n	80018a0 <tftDrawFastVLine+0x80>
 80018c8:	e000      	b.n	80018cc <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 80018ca:	bf00      	nop
	}
}
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000002 	.word	0x20000002
 80018dc:	40020800 	.word	0x40020800

080018e0 <tftDrawFastHLine>:
 * draws horizontal line
 * x an y are starting point
 * w is width
 */
void tftDrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4604      	mov	r4, r0
 80018e8:	4608      	mov	r0, r1
 80018ea:	4611      	mov	r1, r2
 80018ec:	461a      	mov	r2, r3
 80018ee:	4623      	mov	r3, r4
 80018f0:	80fb      	strh	r3, [r7, #6]
 80018f2:	4603      	mov	r3, r0
 80018f4:	80bb      	strh	r3, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height))
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	4a23      	ldr	r2, [pc, #140]	; (8001990 <tftDrawFastHLine+0xb0>)
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	4293      	cmp	r3, r2
 8001908:	da3e      	bge.n	8001988 <tftDrawFastHLine+0xa8>
 800190a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <tftDrawFastHLine+0xb4>)
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	4293      	cmp	r3, r2
 8001914:	da38      	bge.n	8001988 <tftDrawFastHLine+0xa8>
		{
		return;
		}

	if((x+w-1) >= width)
 8001916:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800191a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800191e:	4413      	add	r3, r2
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <tftDrawFastHLine+0xb0>)
 8001922:	8812      	ldrh	r2, [r2, #0]
 8001924:	4293      	cmp	r3, r2
 8001926:	dd05      	ble.n	8001934 <tftDrawFastHLine+0x54>
		{
		w = width-x;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <tftDrawFastHLine+0xb0>)
 800192a:	881a      	ldrh	r2, [r3, #0]
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	b29b      	uxth	r3, r3
 8001932:	807b      	strh	r3, [r7, #2]
		}

	tftSetAddrWindow(x, y, x+w-1, y);
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	b2d8      	uxtb	r0, r3
 8001938:	88bb      	ldrh	r3, [r7, #4]
 800193a:	b2d9      	uxtb	r1, r3
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3b01      	subs	r3, #1
 800194a:	b2da      	uxtb	r2, r3
 800194c:	88bb      	ldrh	r3, [r7, #4]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f7ff fe74 	bl	800163c <tftSetAddrWindow>

	ST7735_DC1;
 8001954:	2107      	movs	r1, #7
 8001956:	4810      	ldr	r0, [pc, #64]	; (8001998 <tftDrawFastHLine+0xb8>)
 8001958:	f004 f90d 	bl	8005b76 <gpioSetPin>
	while (w--)
 800195c:	e00b      	b.n	8001976 <tftDrawFastHLine+0x96>
	{
		putpix(color);
 800195e:	883b      	ldrh	r3, [r7, #0]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	b29b      	uxth	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fd34 	bl	80013d4 <tftSPISenddata>
 800196c:	883b      	ldrh	r3, [r7, #0]
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff fd2f 	bl	80013d4 <tftSPISenddata>
	while (w--)
 8001976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800197a:	b29a      	uxth	r2, r3
 800197c:	3a01      	subs	r2, #1
 800197e:	b292      	uxth	r2, r2
 8001980:	807a      	strh	r2, [r7, #2]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1eb      	bne.n	800195e <tftDrawFastHLine+0x7e>
 8001986:	e000      	b.n	800198a <tftDrawFastHLine+0xaa>
		return;
 8001988:	bf00      	nop
	}
}
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000002 	.word	0x20000002
 8001998:	40020800 	.word	0x40020800

0800199c <tftDrawRect>:
 * x2 is end parameter x
 * y1 is start parameter y
 * y2 is end parameter y
*/
void tftDrawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	4603      	mov	r3, r0
 80019b0:	71bb      	strb	r3, [r7, #6]
 80019b2:	460b      	mov	r3, r1
 80019b4:	717b      	strb	r3, [r7, #5]
 80019b6:	4613      	mov	r3, r2
 80019b8:	713b      	strb	r3, [r7, #4]
	tftDrawFastHLine(x1,y1,x2-x1, color);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	b218      	sxth	r0, r3
 80019be:	79bb      	ldrb	r3, [r7, #6]
 80019c0:	b219      	sxth	r1, r3
 80019c2:	797b      	ldrb	r3, [r7, #5]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	79fb      	ldrb	r3, [r7, #7]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	8b3b      	ldrh	r3, [r7, #24]
 80019d2:	f7ff ff85 	bl	80018e0 <tftDrawFastHLine>
	tftDrawFastVLine(x2,y1,y2-y1, color);
 80019d6:	797b      	ldrb	r3, [r7, #5]
 80019d8:	b218      	sxth	r0, r3
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	b219      	sxth	r1, r3
 80019de:	793b      	ldrb	r3, [r7, #4]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	79bb      	ldrb	r3, [r7, #6]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	8b3b      	ldrh	r3, [r7, #24]
 80019ee:	f7ff ff17 	bl	8001820 <tftDrawFastVLine>
	tftDrawFastHLine(x1,y2,x2-x1, color);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	b218      	sxth	r0, r3
 80019f6:	793b      	ldrb	r3, [r7, #4]
 80019f8:	b219      	sxth	r1, r3
 80019fa:	797b      	ldrb	r3, [r7, #5]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	8b3b      	ldrh	r3, [r7, #24]
 8001a0a:	f7ff ff69 	bl	80018e0 <tftDrawFastHLine>
	tftDrawFastVLine(x1,y1,y2-y1, color);
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	b218      	sxth	r0, r3
 8001a12:	79bb      	ldrb	r3, [r7, #6]
 8001a14:	b219      	sxth	r1, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	79bb      	ldrb	r3, [r7, #6]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	8b3b      	ldrh	r3, [r7, #24]
 8001a26:	f7ff fefb 	bl	8001820 <tftDrawFastVLine>
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd90      	pop	{r4, r7, pc}
	...

08001a34 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	; (8001a74 <tftSetFont+0x40>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <tftSetFont+0x40>)
 8001a48:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	785a      	ldrb	r2, [r3, #1]
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <tftSetFont+0x40>)
 8001a50:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	789a      	ldrb	r2, [r3, #2]
 8001a56:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <tftSetFont+0x40>)
 8001a58:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3303      	adds	r3, #3
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <tftSetFont+0x40>)
 8001a64:	811a      	strh	r2, [r3, #8]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000224 	.word	0x20000224

08001a78 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
 8001a84:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001a86:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <tftPrintChar+0x1e0>)
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d803      	bhi.n	8001a96 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <tftPrintChar+0x1e0>)
 8001a90:	791b      	ldrb	r3, [r3, #4]
 8001a92:	77bb      	strb	r3, [r7, #30]
 8001a94:	e003      	b.n	8001a9e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001a96:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <tftPrintChar+0x1e0>)
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	08db      	lsrs	r3, r3, #3
 8001a9c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <tftPrintChar+0x1e4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d15e      	bne.n	8001b64 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	b2d8      	uxtb	r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	b2d9      	uxtb	r1, r3
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <tftPrintChar+0x1e0>)
 8001ab0:	791a      	ldrb	r2, [r3, #4]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	3b01      	subs	r3, #1
 8001abc:	b2dc      	uxtb	r4, r3
 8001abe:	4b66      	ldr	r3, [pc, #408]	; (8001c58 <tftPrintChar+0x1e0>)
 8001ac0:	795a      	ldrb	r2, [r3, #5]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	3b01      	subs	r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	4622      	mov	r2, r4
 8001ad0:	f7ff fdb4 	bl	800163c <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
 8001ad6:	4a60      	ldr	r2, [pc, #384]	; (8001c58 <tftPrintChar+0x1e0>)
 8001ad8:	7992      	ldrb	r2, [r2, #6]
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	7fbb      	ldrb	r3, [r7, #30]
 8001ae0:	b299      	uxth	r1, r3
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <tftPrintChar+0x1e0>)
 8001ae4:	795b      	ldrb	r3, [r3, #5]
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	fb11 f303 	smulbb	r3, r1, r3
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	fb12 f303 	smulbb	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3304      	adds	r3, #4
 8001af6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	83bb      	strh	r3, [r7, #28]
 8001afc:	e029      	b.n	8001b52 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <tftPrintChar+0x1e0>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	8b7b      	ldrh	r3, [r7, #26]
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	77fb      	strb	r3, [r7, #31]
 8001b0e:	e017      	b.n	8001b40 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001b10:	7cfa      	ldrb	r2, [r7, #19]
 8001b12:	7ffb      	ldrb	r3, [r7, #31]
 8001b14:	f1c3 0307 	rsb	r3, r3, #7
 8001b18:	fa42 f303 	asr.w	r3, r2, r3
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001b24:	4b4e      	ldr	r3, [pc, #312]	; (8001c60 <tftPrintChar+0x1e8>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fdd7 	bl	80016dc <tftPushColor>
 8001b2e:	e004      	b.n	8001b3a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001b30:	4b4c      	ldr	r3, [pc, #304]	; (8001c64 <tftPrintChar+0x1ec>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fdd1 	bl	80016dc <tftPushColor>
			for(i=0;i<8;i++)
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	77fb      	strb	r3, [r7, #31]
 8001b40:	7ffb      	ldrb	r3, [r7, #31]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9e4      	bls.n	8001b10 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001b46:	8b7b      	ldrh	r3, [r7, #26]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001b4c:	8bbb      	ldrh	r3, [r7, #28]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	83bb      	strh	r3, [r7, #28]
 8001b52:	8bba      	ldrh	r2, [r7, #28]
 8001b54:	7fbb      	ldrb	r3, [r7, #30]
 8001b56:	4940      	ldr	r1, [pc, #256]	; (8001c58 <tftPrintChar+0x1e0>)
 8001b58:	7949      	ldrb	r1, [r1, #5]
 8001b5a:	fb01 f303 	mul.w	r3, r1, r3
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	dbcd      	blt.n	8001afe <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001b62:	e075      	b.n	8001c50 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	4a3c      	ldr	r2, [pc, #240]	; (8001c58 <tftPrintChar+0x1e0>)
 8001b68:	7992      	ldrb	r2, [r2, #6]
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	7fbb      	ldrb	r3, [r7, #30]
 8001b70:	b299      	uxth	r1, r3
 8001b72:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <tftPrintChar+0x1e0>)
 8001b74:	795b      	ldrb	r3, [r3, #5]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	fb11 f303 	smulbb	r3, r1, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	fb12 f303 	smulbb	r3, r2, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3304      	adds	r3, #4
 8001b86:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	83bb      	strh	r3, [r7, #28]
 8001b8c:	e05a      	b.n	8001c44 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e04b      	b.n	8001c2c <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <tftPrintChar+0x1e0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	8b79      	ldrh	r1, [r7, #26]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
 8001ba8:	e03a      	b.n	8001c20 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	7ffb      	ldrb	r3, [r7, #31]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	8bbb      	ldrh	r3, [r7, #28]
 8001bc2:	b2da      	uxtb	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4413      	add	r3, r2
 8001bca:	b2d9      	uxtb	r1, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	7ffb      	ldrb	r3, [r7, #31]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3301      	adds	r3, #1
 8001be4:	b2dc      	uxtb	r4, r3
 8001be6:	8bbb      	ldrh	r3, [r7, #28]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	f7ff fd20 	bl	800163c <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001bfc:	7cfa      	ldrb	r2, [r7, #19]
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	f1c3 0307 	rsb	r3, r3, #7
 8001c04:	fa42 f303 	asr.w	r3, r2, r3
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <tftPrintChar+0x1e8>)
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fd61 	bl	80016dc <tftPushColor>
				for(i=0;i<8;i++)
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	77fb      	strb	r3, [r7, #31]
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
 8001c22:	2b07      	cmp	r3, #7
 8001c24:	d9c1      	bls.n	8001baa <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	7fbb      	ldrb	r3, [r7, #30]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbaf      	blt.n	8001b94 <tftPrintChar+0x11c>
			temp+=(fz);
 8001c34:	7fbb      	ldrb	r3, [r7, #30]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	8b7b      	ldrh	r3, [r7, #26]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001c3e:	8bbb      	ldrh	r3, [r7, #28]
 8001c40:	3301      	adds	r3, #1
 8001c42:	83bb      	strh	r3, [r7, #28]
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <tftPrintChar+0x1e0>)
 8001c46:	795b      	ldrb	r3, [r3, #5]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	8bba      	ldrh	r2, [r7, #28]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d39e      	bcc.n	8001b8e <tftPrintChar+0x116>
}
 8001c50:	bf00      	nop
 8001c52:	3724      	adds	r7, #36	; 0x24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	20000224 	.word	0x20000224
 8001c5c:	20000230 	.word	0x20000230
 8001c60:	20000008 	.word	0x20000008
 8001c64:	20000232 	.word	0x20000232

08001c68 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001c68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c6c:	b08e      	sub	sp, #56	; 0x38
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4603      	mov	r3, r0
 8001c78:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001c7a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001c7c:	f7fe fc5a 	bl	8000534 <__aeabi_i2d>
 8001c80:	a395      	add	r3, pc, #596	; (adr r3, 8001ed8 <tftRotateChar+0x270>)
 8001c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c86:	f7fe fcbf 	bl	8000608 <__aeabi_dmul>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001c92:	4b8d      	ldr	r3, [pc, #564]	; (8001ec8 <tftRotateChar+0x260>)
 8001c94:	791b      	ldrb	r3, [r3, #4]
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d804      	bhi.n	8001ca4 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001c9a:	4b8b      	ldr	r3, [pc, #556]	; (8001ec8 <tftRotateChar+0x260>)
 8001c9c:	791b      	ldrb	r3, [r3, #4]
 8001c9e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001ca2:	e017      	b.n	8001cd4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001ca4:	4b88      	ldr	r3, [pc, #544]	; (8001ec8 <tftRotateChar+0x260>)
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	4a85      	ldr	r2, [pc, #532]	; (8001ec8 <tftRotateChar+0x260>)
 8001cb2:	7992      	ldrb	r2, [r2, #6]
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	4b82      	ldr	r3, [pc, #520]	; (8001ec8 <tftRotateChar+0x260>)
 8001cc0:	795b      	ldrb	r3, [r3, #5]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	fb11 f303 	smulbb	r3, r1, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	fb12 f303 	smulbb	r3, r2, r3
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001cda:	e0e6      	b.n	8001eaa <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	e0d2      	b.n	8001e88 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001ce2:	4b79      	ldr	r3, [pc, #484]	; (8001ec8 <tftRotateChar+0x260>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001ce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cea:	440a      	add	r2, r1
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cf8:	e0be      	b.n	8001e78 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001cfa:	68b8      	ldr	r0, [r7, #8]
 8001cfc:	f7fe fc1a 	bl	8000534 <__aeabi_i2d>
 8001d00:	4604      	mov	r4, r0
 8001d02:	460d      	mov	r5, r1
 8001d04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	441a      	add	r2, r3
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <tftRotateChar+0x260>)
 8001d10:	791b      	ldrb	r3, [r3, #4]
 8001d12:	4619      	mov	r1, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	fb01 f303 	mul.w	r3, r1, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc09 	bl	8000534 <__aeabi_i2d>
 8001d22:	4680      	mov	r8, r0
 8001d24:	4689      	mov	r9, r1
 8001d26:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d2a:	f009 fda9 	bl	800b880 <cos>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4640      	mov	r0, r8
 8001d34:	4649      	mov	r1, r9
 8001d36:	f7fe fc67 	bl	8000608 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4692      	mov	sl, r2
 8001d40:	469b      	mov	fp, r3
 8001d42:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fbf4 	bl	8000534 <__aeabi_i2d>
 8001d4c:	4680      	mov	r8, r0
 8001d4e:	4689      	mov	r9, r1
 8001d50:	ed97 0b08 	vldr	d0, [r7, #32]
 8001d54:	f009 fdf4 	bl	800b940 <sin>
 8001d58:	ec53 2b10 	vmov	r2, r3, d0
 8001d5c:	4640      	mov	r0, r8
 8001d5e:	4649      	mov	r1, r9
 8001d60:	f7fe fc52 	bl	8000608 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4650      	mov	r0, sl
 8001d6a:	4659      	mov	r1, fp
 8001d6c:	f7fe fa94 	bl	8000298 <__aeabi_dsub>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4620      	mov	r0, r4
 8001d76:	4629      	mov	r1, r5
 8001d78:	f7fe fa90 	bl	800029c <__adddf3>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4610      	mov	r0, r2
 8001d82:	4619      	mov	r1, r3
 8001d84:	f7fe fef0 	bl	8000b68 <__aeabi_d2iz>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7fe fbd1 	bl	8000534 <__aeabi_i2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fbca 	bl	8000534 <__aeabi_i2d>
 8001da0:	4680      	mov	r8, r0
 8001da2:	4689      	mov	r9, r1
 8001da4:	ed97 0b08 	vldr	d0, [r7, #32]
 8001da8:	f009 fd6a 	bl	800b880 <cos>
 8001dac:	ec53 2b10 	vmov	r2, r3, d0
 8001db0:	4640      	mov	r0, r8
 8001db2:	4649      	mov	r1, r9
 8001db4:	f7fe fc28 	bl	8000608 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4692      	mov	sl, r2
 8001dbe:	469b      	mov	fp, r3
 8001dc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	441a      	add	r2, r3
 8001dca:	4b3f      	ldr	r3, [pc, #252]	; (8001ec8 <tftRotateChar+0x260>)
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fbab 	bl	8000534 <__aeabi_i2d>
 8001dde:	4680      	mov	r8, r0
 8001de0:	4689      	mov	r9, r1
 8001de2:	ed97 0b08 	vldr	d0, [r7, #32]
 8001de6:	f009 fdab 	bl	800b940 <sin>
 8001dea:	ec53 2b10 	vmov	r2, r3, d0
 8001dee:	4640      	mov	r0, r8
 8001df0:	4649      	mov	r1, r9
 8001df2:	f7fe fc09 	bl	8000608 <__aeabi_dmul>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4650      	mov	r0, sl
 8001dfc:	4659      	mov	r1, fp
 8001dfe:	f7fe fa4d 	bl	800029c <__adddf3>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fa47 	bl	800029c <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f7fe fea7 	bl	8000b68 <__aeabi_d2iz>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	b2d8      	uxtb	r0, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	b2d9      	uxtb	r1, r3
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	f7ff fc01 	bl	800163c <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8001e3a:	7ffa      	ldrb	r2, [r7, #31]
 8001e3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e40:	f1c3 0307 	rsb	r3, r3, #7
 8001e44:	fa42 f303 	asr.w	r3, r2, r3
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <tftRotateChar+0x264>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc41 	bl	80016dc <tftPushColor>
 8001e5a:	e008      	b.n	8001e6e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <tftRotateChar+0x268>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d104      	bne.n	8001e6e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <tftRotateChar+0x26c>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fc37 	bl	80016dc <tftPushColor>
			for(i=0;i<8;i++)
 8001e6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e72:	3301      	adds	r3, #1
 8001e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e7c:	2b07      	cmp	r3, #7
 8001e7e:	f67f af3c 	bls.w	8001cfa <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8001e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e84:	3301      	adds	r3, #1
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	f6ff af27 	blt.w	8001ce2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8001e94:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e9c:	4413      	add	r3, r2
 8001e9e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8001ea0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <tftRotateChar+0x260>)
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	f4ff af12 	bcc.w	8001cdc <tftRotateChar+0x74>
	}
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3738      	adds	r7, #56	; 0x38
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec4:	f3af 8000 	nop.w
 8001ec8:	20000224 	.word	0x20000224
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000230 	.word	0x20000230
 8001ed4:	20000232 	.word	0x20000232
 8001ed8:	1eb851ec 	.word	0x1eb851ec
 8001edc:	3f91eb85 	.word	0x3f91eb85

08001ee0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
 8001eec:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7fe f970 	bl	80001e0 <strlen>
 8001f00:	4603      	mov	r3, r0
 8001f02:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f113 0f02 	cmn.w	r3, #2
 8001f0a:	d10a      	bne.n	8001f22 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8001f0c:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <tftPrint+0x128>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	4b3e      	ldr	r3, [pc, #248]	; (800200c <tftPrint+0x12c>)
 8001f14:	791b      	ldrb	r3, [r3, #4]
 8001f16:	4619      	mov	r1, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d10d      	bne.n	8001f46 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8001f2a:	4b39      	ldr	r3, [pc, #228]	; (8002010 <tftPrint+0x130>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4b36      	ldr	r3, [pc, #216]	; (800200c <tftPrint+0x12c>)
 8001f32:	791b      	ldrb	r3, [r3, #4]
 8001f34:	4619      	mov	r1, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	0fda      	lsrs	r2, r3, #31
 8001f40:	4413      	add	r3, r2
 8001f42:	105b      	asrs	r3, r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4a:	e053      	b.n	8001ff4 <tftPrint+0x114>
	{
		lettercount++;
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d112      	bne.n	8001f7e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60fa      	str	r2, [r7, #12]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	69f9      	ldr	r1, [r7, #28]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd87 	bl	8001a78 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8001f6a:	4b28      	ldr	r3, [pc, #160]	; (800200c <tftPrint+0x12c>)
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	4413      	add	r3, r2
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	e00a      	b.n	8001f94 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1c5a      	adds	r2, r3, #1
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	7818      	ldrb	r0, [r3, #0]
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	f7ff fe6a 	bl	8001c68 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8001f94:	f000 f8a8 	bl	80020e8 <tftGetWidth>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <tftPrint+0x12c>)
 8001f9e:	791b      	ldrb	r3, [r3, #4]
 8001fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	4293      	cmp	r3, r2
 8001fac:	db1f      	blt.n	8001fee <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <tftPrint+0x12c>)
 8001fb8:	795b      	ldrb	r3, [r3, #5]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 8001fc2:	f000 f89d 	bl	8002100 <tftGetHeight>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b10      	ldr	r3, [pc, #64]	; (800200c <tftPrint+0x12c>)
 8001fcc:	795b      	ldrb	r3, [r3, #5]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dd09      	ble.n	8001fea <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 8001fd6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001fda:	f7ff f9ed 	bl	80013b8 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f818 	bl	8002014 <tftFillScreen>
				y=0; // start at top left of new Page
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	e001      	b.n	8001fee <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	dba7      	blt.n	8001f4c <tftPrint+0x6c>
			}

		}

	}
}
 8001ffc:	bf00      	nop
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000000 	.word	0x20000000
 800200c:	20000224 	.word	0x20000224
 8002010:	20000002 	.word	0x20000002

08002014 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af02      	add	r7, sp, #8
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <tftFillScreen+0x2c>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b21a      	sxth	r2, r3
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <tftFillScreen+0x30>)
 8002026:	881b      	ldrh	r3, [r3, #0]
 8002028:	b219      	sxth	r1, r3
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	460b      	mov	r3, r1
 8002030:	2100      	movs	r1, #0
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff fb6e 	bl	8001714 <tftFillRect>
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000000 	.word	0x20000000
 8002044:	20000002 	.word	0x20000002

08002048 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800205a:	2036      	movs	r0, #54	; 0x36
 800205c:	f7ff f9ce 	bl	80013fc <tftSendCmd>

	switch (rotation)
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	2b03      	cmp	r3, #3
 8002064:	d836      	bhi.n	80020d4 <tftSetRotation+0x8c>
 8002066:	a201      	add	r2, pc, #4	; (adr r2, 800206c <tftSetRotation+0x24>)
 8002068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206c:	0800207d 	.word	0x0800207d
 8002070:	08002091 	.word	0x08002091
 8002074:	080020a5 	.word	0x080020a5
 8002078:	080020b9 	.word	0x080020b9
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800207c:	20c0      	movs	r0, #192	; 0xc0
 800207e:	f7ff f9d1 	bl	8001424 <tftSendData>
		width  = ST7735_TFTWIDTH;
 8002082:	4b16      	ldr	r3, [pc, #88]	; (80020dc <tftSetRotation+0x94>)
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <tftSetRotation+0x98>)
 800208a:	22a0      	movs	r2, #160	; 0xa0
 800208c:	801a      	strh	r2, [r3, #0]
		break;
 800208e:	e01d      	b.n	80020cc <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8002090:	20a0      	movs	r0, #160	; 0xa0
 8002092:	f7ff f9c7 	bl	8001424 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <tftSetRotation+0x94>)
 8002098:	22a0      	movs	r2, #160	; 0xa0
 800209a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800209c:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <tftSetRotation+0x98>)
 800209e:	2280      	movs	r2, #128	; 0x80
 80020a0:	801a      	strh	r2, [r3, #0]
		   break;
 80020a2:	e013      	b.n	80020cc <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff f9bd 	bl	8001424 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <tftSetRotation+0x94>)
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <tftSetRotation+0x98>)
 80020b2:	22a0      	movs	r2, #160	; 0xa0
 80020b4:	801a      	strh	r2, [r3, #0]
		   break;
 80020b6:	e009      	b.n	80020cc <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80020b8:	2060      	movs	r0, #96	; 0x60
 80020ba:	f7ff f9b3 	bl	8001424 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <tftSetRotation+0x94>)
 80020c0:	22a0      	movs	r2, #160	; 0xa0
 80020c2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <tftSetRotation+0x98>)
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	801a      	strh	r2, [r3, #0]
		   break;
 80020ca:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80020cc:	4a05      	ldr	r2, [pc, #20]	; (80020e4 <tftSetRotation+0x9c>)
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	7013      	strb	r3, [r2, #0]
 80020d2:	e000      	b.n	80020d6 <tftSetRotation+0x8e>
		   return;
 80020d4:	bf00      	nop
}
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000002 	.word	0x20000002
 80020e4:	20000220 	.word	0x20000220

080020e8 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <tftGetWidth+0x14>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	20000000 	.word	0x20000000

08002100 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8002104:	4b03      	ldr	r3, [pc, #12]	; (8002114 <tftGetHeight+0x14>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b2db      	uxtb	r3, r3
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000002 	.word	0x20000002

08002118 <initializeTOFSensor>:

//--------------------- SENSOR FUNCTIONS ------------------------

// Function to initialize the TOF sensor
// Initializes the sensor with given address, I2C interface, ranging profile, and measurement range.
void initializeTOFSensor(TOFSensor_t* sensor, I2C_TypeDef *i2c_tof, uint16_t TOF_address_used, uint16_t Ranging_Profiles_t, uint16_t measuredRange) {
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	460b      	mov	r3, r1
 8002128:	80fb      	strh	r3, [r7, #6]
 800212a:	4613      	mov	r3, r2
 800212c:	80bb      	strh	r3, [r7, #4]
	sensor->i2c_tof = i2c_tof;                    // Set the I2C interface (e.g., I2C1, I2C2)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	601a      	str	r2, [r3, #0]
	sensor->TOF_address_used = TOF_address_used;  // Set the TOF sensor address
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	809a      	strh	r2, [r3, #4]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the ranging profile (measurement mode)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	88ba      	ldrh	r2, [r7, #4]
 800213e:	80da      	strh	r2, [r3, #6]
    sensor->measuredRange = measuredRange;        // Set the maximum measurable range
 8002140:	8b3a      	ldrh	r2, [r7, #24]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	60da      	str	r2, [r3, #12]
    sensor->distanceFromTOF = 0;                  // Initialize the measured distance to zero
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	811a      	strh	r2, [r3, #8]
    sensor->enableTOFSensor = false;              // Default is to keep the sensor disabled
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	741a      	strb	r2, [r3, #16]
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <configureTOFSensor>:

// Function to configure the TOF sensor
// Configures the sensor's ranging profile and whether the sensor should be enabled or disabled.
void configureTOFSensor(TOFSensor_t* sensor, uint16_t Ranging_Profiles_t, bool enable) {
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
 800216a:	4613      	mov	r3, r2
 800216c:	707b      	strb	r3, [r7, #1]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the new ranging profile
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	887a      	ldrh	r2, [r7, #2]
 8002172:	80da      	strh	r2, [r3, #6]
    sensor->enableTOFSensor = enable;                  // Enable or disable the TOF sensor
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	787a      	ldrb	r2, [r7, #1]
 8002178:	741a      	strb	r2, [r3, #16]
    if(sensor->enableTOFSensor == true)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7c1b      	ldrb	r3, [r3, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <configureTOFSensor+0x2a>
    {
    	TOF_set_ranging_profile(sensor);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f001 fba4 	bl	80038d0 <TOF_set_ranging_profile>
    }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <TOF_configure_interrupt>:
 *
 *
 * @returns:     bool: true if the configuration is successful, otherwise false.
 */
bool TOF_configure_interrupt(TOFSensor_t* TOFSENS)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af02      	add	r7, sp, #8
 8002196:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	889b      	ldrh	r3, [r3, #4]
 800219c:	b25a      	sxtb	r2, r3
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <TOF_configure_interrupt+0xc4>)
 80021a0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <TOF_configure_interrupt+0xc8>)
 80021a8:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

	/* Interrupt on new sample ready */
	i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80021aa:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <TOF_configure_interrupt+0xc8>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <TOF_configure_interrupt+0xc4>)
 80021b0:	f993 3000 	ldrsb.w	r3, [r3]
 80021b4:	b2d9      	uxtb	r1, r3
 80021b6:	2304      	movs	r3, #4
 80021b8:	220a      	movs	r2, #10
 80021ba:	f004 f809 	bl	80061d0 <i2cSendByteToSlaveReg>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <TOF_configure_interrupt+0x3e>
    {
        return false;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e03e      	b.n	800224c <TOF_configure_interrupt+0xbc>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high[1];
    i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high, 1);
 80021ce:	4b22      	ldr	r3, [pc, #136]	; (8002258 <TOF_configure_interrupt+0xc8>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	4b20      	ldr	r3, [pc, #128]	; (8002254 <TOF_configure_interrupt+0xc4>)
 80021d4:	f993 3000 	ldrsb.w	r3, [r3]
 80021d8:	b2d9      	uxtb	r1, r3
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	2201      	movs	r2, #1
 80021e0:	9200      	str	r2, [sp, #0]
 80021e2:	2284      	movs	r2, #132	; 0x84
 80021e4:	f004 f8ae 	bl	8006344 <i2cBurstRegRead>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80021ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <TOF_configure_interrupt+0x68>
	{
		return false;
 80021f4:	2300      	movs	r3, #0
 80021f6:	e029      	b.n	800224c <TOF_configure_interrupt+0xbc>
	}

    gpio_hv_mux_active_high[0] &= ~0x10;
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	f023 0310 	bic.w	r3, r3, #16
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	733b      	strb	r3, [r7, #12]
    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH,  gpio_hv_mux_active_high[0]);
 8002202:	4b15      	ldr	r3, [pc, #84]	; (8002258 <TOF_configure_interrupt+0xc8>)
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <TOF_configure_interrupt+0xc4>)
 8002208:	f993 3000 	ldrsb.w	r3, [r3]
 800220c:	b2d9      	uxtb	r1, r3
 800220e:	7b3b      	ldrb	r3, [r7, #12]
 8002210:	2284      	movs	r2, #132	; 0x84
 8002212:	f003 ffdd 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 800221a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <TOF_configure_interrupt+0x96>
	{
		return false;
 8002222:	2300      	movs	r3, #0
 8002224:	e012      	b.n	800224c <TOF_configure_interrupt+0xbc>
	}

    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <TOF_configure_interrupt+0xc8>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <TOF_configure_interrupt+0xc4>)
 800222c:	f993 3000 	ldrsb.w	r3, [r3]
 8002230:	b2d9      	uxtb	r1, r3
 8002232:	2301      	movs	r3, #1
 8002234:	220b      	movs	r2, #11
 8002236:	f003 ffcb 	bl	80061d0 <i2cSendByteToSlaveReg>
 800223a:	4603      	mov	r3, r0
 800223c:	73fb      	strb	r3, [r7, #15]
	if (i2c_return != I2C_OK)
 800223e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <TOF_configure_interrupt+0xba>
	{
		return false;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <TOF_configure_interrupt+0xbc>
	}

    return true;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000000a 	.word	0x2000000a
 8002258:	20000238 	.word	0x20000238

0800225c <TOF_init_address>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the correct TOF sensor is connected and communication is successful, otherwise false.
 */
bool TOF_init_address(TOFSensor_t* TOFSENS)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	889b      	ldrh	r3, [r3, #4]
 8002268:	b25a      	sxtb	r2, r3
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <TOF_init_address+0x58>)
 800226c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a11      	ldr	r2, [pc, #68]	; (80022b8 <TOF_init_address+0x5c>)
 8002274:	6013      	str	r3, [r2, #0]
	//set i2c clock speed
	//i2cSetClkSpd(TOF_i2c, I2C_CLOCK_400);

	//check correct device by reading the ID
	uint8_t device_id[1];
	I2C_RETURN_CODE_t i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_IDENTIFICATION_MODEL_ID, device_id, 1);
 8002276:	4b10      	ldr	r3, [pc, #64]	; (80022b8 <TOF_init_address+0x5c>)
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <TOF_init_address+0x58>)
 800227c:	f993 3000 	ldrsb.w	r3, [r3]
 8002280:	b2d9      	uxtb	r1, r3
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2201      	movs	r2, #1
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	22c0      	movs	r2, #192	; 0xc0
 800228c:	f004 f85a 	bl	8006344 <i2cBurstRegRead>
 8002290:	4603      	mov	r3, r0
 8002292:	73fb      	strb	r3, [r7, #15]

	if (i2c_return != I2C_OK)
 8002294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <TOF_init_address+0x44>
	{
		// returns false, if i2cBurstRegRead was not successful
		return false;
 800229c:	2300      	movs	r3, #0
 800229e:	e005      	b.n	80022ac <TOF_init_address+0x50>
	}

	//returns true, if correct TOF sensor is connected, otherwise false
	return (device_id[0] == TOF_VL53L0X_EXPECTED_DEVICE_ID);
 80022a0:	7b3b      	ldrb	r3, [r7, #12]
 80022a2:	2bee      	cmp	r3, #238	; 0xee
 80022a4:	bf0c      	ite	eq
 80022a6:	2301      	moveq	r3, #1
 80022a8:	2300      	movne	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	2000000a 	.word	0x2000000a
 80022b8:	20000238 	.word	0x20000238

080022bc <TOF_data_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the sensor is successfully initialized, otherwise false.
 */
bool TOF_data_init(TOFSensor_t* TOFSENS)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	889b      	ldrh	r3, [r3, #4]
 80022c8:	b25a      	sxtb	r2, r3
 80022ca:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <TOF_data_init+0x178>)
 80022cc:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a59      	ldr	r2, [pc, #356]	; (8002438 <TOF_data_init+0x17c>)
 80022d4:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = false;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]

	/* Set 2v8 mode */
	uint8_t vhv_config_scl_sda = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	73bb      	strb	r3, [r7, #14]
	success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda);
 80022de:	4b56      	ldr	r3, [pc, #344]	; (8002438 <TOF_data_init+0x17c>)
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	4b54      	ldr	r3, [pc, #336]	; (8002434 <TOF_data_init+0x178>)
 80022e4:	f993 3000 	ldrsb.w	r3, [r3]
 80022e8:	b2d9      	uxtb	r1, r3
 80022ea:	f107 030e 	add.w	r3, r7, #14
 80022ee:	2289      	movs	r2, #137	; 0x89
 80022f0:	f003 ffbc 	bl	800626c <i2cReadByteFromSlaveReg>
 80022f4:	4603      	mov	r3, r0
 80022f6:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 80022f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <TOF_data_init+0x48>
	{
		return false;
 8002300:	2300      	movs	r3, #0
 8002302:	e092      	b.n	800242a <TOF_data_init+0x16e>
	}

	vhv_config_scl_sda |= 0x01;
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	b2db      	uxtb	r3, r3
 800230c:	73bb      	strb	r3, [r7, #14]

	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda);
 800230e:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <TOF_data_init+0x17c>)
 8002310:	6818      	ldr	r0, [r3, #0]
 8002312:	4b48      	ldr	r3, [pc, #288]	; (8002434 <TOF_data_init+0x178>)
 8002314:	f993 3000 	ldrsb.w	r3, [r3]
 8002318:	b2d9      	uxtb	r1, r3
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	2289      	movs	r2, #137	; 0x89
 800231e:	f003 ff57 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <TOF_data_init+0x76>
	{
		return false;
 800232e:	2300      	movs	r3, #0
 8002330:	e07b      	b.n	800242a <TOF_data_init+0x16e>
	}

	/* Set I2C standard mode */
	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_I2C_MODE, 0x00);
 8002332:	4b41      	ldr	r3, [pc, #260]	; (8002438 <TOF_data_init+0x17c>)
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <TOF_data_init+0x178>)
 8002338:	f993 3000 	ldrsb.w	r3, [r3]
 800233c:	b2d9      	uxtb	r1, r3
 800233e:	2300      	movs	r3, #0
 8002340:	2288      	movs	r2, #136	; 0x88
 8002342:	f003 ff45 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <TOF_data_init+0x17c>)
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	4b39      	ldr	r3, [pc, #228]	; (8002434 <TOF_data_init+0x178>)
 8002350:	f993 3000 	ldrsb.w	r3, [r3]
 8002354:	b2d9      	uxtb	r1, r3
 8002356:	2301      	movs	r3, #1
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	f003 ff39 	bl	80061d0 <i2cSendByteToSlaveReg>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	4013      	ands	r3, r2
 8002366:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8002368:	4b33      	ldr	r3, [pc, #204]	; (8002438 <TOF_data_init+0x17c>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	4b31      	ldr	r3, [pc, #196]	; (8002434 <TOF_data_init+0x178>)
 800236e:	f993 3000 	ldrsb.w	r3, [r3]
 8002372:	b2d9      	uxtb	r1, r3
 8002374:	2301      	movs	r3, #1
 8002376:	22ff      	movs	r2, #255	; 0xff
 8002378:	f003 ff2a 	bl	80061d0 <i2cSendByteToSlaveReg>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	4013      	ands	r3, r2
 8002384:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8002386:	4b2c      	ldr	r3, [pc, #176]	; (8002438 <TOF_data_init+0x17c>)
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <TOF_data_init+0x178>)
 800238c:	f993 3000 	ldrsb.w	r3, [r3]
 8002390:	b2d9      	uxtb	r1, r3
 8002392:	2300      	movs	r3, #0
 8002394:	2200      	movs	r2, #0
 8002396:	f003 ff1b 	bl	80061d0 <i2cSendByteToSlaveReg>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	4013      	ands	r3, r2
 80023a2:	73fb      	strb	r3, [r7, #15]
	success &= i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, &TOF_stop_variable);
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <TOF_data_init+0x17c>)
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <TOF_data_init+0x178>)
 80023aa:	f993 3000 	ldrsb.w	r3, [r3]
 80023ae:	b2d9      	uxtb	r1, r3
 80023b0:	4b22      	ldr	r3, [pc, #136]	; (800243c <TOF_data_init+0x180>)
 80023b2:	2291      	movs	r2, #145	; 0x91
 80023b4:	f003 ff5a 	bl	800626c <i2cReadByteFromSlaveReg>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	4013      	ands	r3, r2
 80023c0:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <TOF_data_init+0x17c>)
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <TOF_data_init+0x178>)
 80023c8:	f993 3000 	ldrsb.w	r3, [r3]
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	2301      	movs	r3, #1
 80023d0:	2200      	movs	r2, #0
 80023d2:	f003 fefd 	bl	80061d0 <i2cSendByteToSlaveReg>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4013      	ands	r3, r2
 80023de:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <TOF_data_init+0x17c>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	4b13      	ldr	r3, [pc, #76]	; (8002434 <TOF_data_init+0x178>)
 80023e6:	f993 3000 	ldrsb.w	r3, [r3]
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	22ff      	movs	r2, #255	; 0xff
 80023f0:	f003 feee 	bl	80061d0 <i2cSendByteToSlaveReg>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461a      	mov	r2, r3
 80023f8:	7bfb      	ldrb	r3, [r7, #15]
 80023fa:	4013      	ands	r3, r2
 80023fc:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <TOF_data_init+0x17c>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <TOF_data_init+0x178>)
 8002404:	f993 3000 	ldrsb.w	r3, [r3]
 8002408:	b2d9      	uxtb	r1, r3
 800240a:	2300      	movs	r3, #0
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	f003 fedf 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	4013      	ands	r3, r2
 800241a:	73fb      	strb	r3, [r7, #15]

	if (success != I2C_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <TOF_data_init+0x16c>
	{
		return false;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <TOF_data_init+0x16e>
	}

	return true;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000000a 	.word	0x2000000a
 8002438:	20000238 	.word	0x20000238
 800243c:	2000023c 	.word	0x2000023c

08002440 <TOF_get_spad_info_from_nvm>:
 * 				bool * type_is_aperture						indicating whether the SPADs are of the aperture type.
 *
 * @returns:    bool: true if the SPAD information is successfully retrieved, otherwise false.
 */
bool TOF_get_spad_info_from_nvm(TOFSensor_t* TOFSENS, uint8_t * count, bool * type_is_aperture)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	889b      	ldrh	r3, [r3, #4]
 8002450:	b25a      	sxtb	r2, r3
 8002452:	4b8a      	ldr	r3, [pc, #552]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002454:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a89      	ldr	r2, [pc, #548]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800245c:	6013      	str	r3, [r2, #0]

	uint8_t tmp;

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	4b86      	ldr	r3, [pc, #536]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002464:	f993 3000 	ldrsb.w	r3, [r3]
 8002468:	b2d9      	uxtb	r1, r3
 800246a:	2301      	movs	r3, #1
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	f003 feaf 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8002472:	4b83      	ldr	r3, [pc, #524]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	4b81      	ldr	r3, [pc, #516]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002478:	f993 3000 	ldrsb.w	r3, [r3]
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	2301      	movs	r3, #1
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f003 fea5 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	4b7c      	ldr	r3, [pc, #496]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 800248c:	f993 3000 	ldrsb.w	r3, [r3]
 8002490:	b2d9      	uxtb	r1, r3
 8002492:	2300      	movs	r3, #0
 8002494:	2200      	movs	r2, #0
 8002496:	f003 fe9b 	bl	80061d0 <i2cSendByteToSlaveReg>

	uint8_t data = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 800249e:	4b78      	ldr	r3, [pc, #480]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80024a4:	f993 3000 	ldrsb.w	r3, [r3]
 80024a8:	b2d9      	uxtb	r1, r3
 80024aa:	2306      	movs	r3, #6
 80024ac:	22ff      	movs	r2, #255	; 0xff
 80024ae:	f003 fe8f 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 80024b2:	4b73      	ldr	r3, [pc, #460]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	4b71      	ldr	r3, [pc, #452]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80024b8:	f993 3000 	ldrsb.w	r3, [r3]
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	f107 0315 	add.w	r3, r7, #21
 80024c2:	2283      	movs	r2, #131	; 0x83
 80024c4:	f003 fed2 	bl	800626c <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data | 0x04);
 80024c8:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80024ce:	f993 3000 	ldrsb.w	r3, [r3]
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	7d7b      	ldrb	r3, [r7, #21]
 80024d6:	f043 0304 	orr.w	r3, r3, #4
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2283      	movs	r2, #131	; 0x83
 80024de:	f003 fe77 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x07);
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80024e8:	f993 3000 	ldrsb.w	r3, [r3]
 80024ec:	b2d9      	uxtb	r1, r3
 80024ee:	2307      	movs	r3, #7
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	f003 fe6d 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80024f8:	6818      	ldr	r0, [r3, #0]
 80024fa:	4b60      	ldr	r3, [pc, #384]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80024fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002500:	b2d9      	uxtb	r1, r3
 8002502:	2301      	movs	r3, #1
 8002504:	2283      	movs	r2, #131	; 0x83
 8002506:	f003 fe63 	bl	80061d0 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002510:	f993 3000 	ldrsb.w	r3, [r3]
 8002514:	b2d9      	uxtb	r1, r3
 8002516:	2301      	movs	r3, #1
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	f003 fe59 	bl	80061d0 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x94, 0x6b);
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	4b56      	ldr	r3, [pc, #344]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002524:	f993 3000 	ldrsb.w	r3, [r3]
 8002528:	b2d9      	uxtb	r1, r3
 800252a:	236b      	movs	r3, #107	; 0x6b
 800252c:	2294      	movs	r2, #148	; 0x94
 800252e:	f003 fe4f 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x00);
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002538:	f993 3000 	ldrsb.w	r3, [r3]
 800253c:	b2d9      	uxtb	r1, r3
 800253e:	2300      	movs	r3, #0
 8002540:	2283      	movs	r2, #131	; 0x83
 8002542:	f003 fe45 	bl	80061d0 <i2cSendByteToSlaveReg>

	data = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	757b      	strb	r3, [r7, #21]
	I2C_RETURN_CODE_t i2c_return;

	do
		{
			i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_INTERNAL_CONFIG_0x83, &data, 1);
 800254a:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800254c:	6818      	ldr	r0, [r3, #0]
 800254e:	4b4b      	ldr	r3, [pc, #300]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002550:	f993 3000 	ldrsb.w	r3, [r3]
 8002554:	b2d9      	uxtb	r1, r3
 8002556:	f107 0315 	add.w	r3, r7, #21
 800255a:	2201      	movs	r2, #1
 800255c:	9200      	str	r2, [sp, #0]
 800255e:	2283      	movs	r2, #131	; 0x83
 8002560:	f003 fef0 	bl	8006344 <i2cBurstRegRead>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
		} while (i2c_return == I2C_OK && data == 0x00);
 8002568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <TOF_get_spad_info_from_nvm+0x136>
 8002570:	7d7b      	ldrb	r3, [r7, #21]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0e9      	beq.n	800254a <TOF_get_spad_info_from_nvm+0x10a>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	4b40      	ldr	r3, [pc, #256]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 800257c:	f993 3000 	ldrsb.w	r3, [r3]
 8002580:	b2d9      	uxtb	r1, r3
 8002582:	2301      	movs	r3, #1
 8002584:	2283      	movs	r2, #131	; 0x83
 8002586:	f003 fe23 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, 0x92, &tmp);
 800258a:	4b3d      	ldr	r3, [pc, #244]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002590:	f993 3000 	ldrsb.w	r3, [r3]
 8002594:	b2d9      	uxtb	r1, r3
 8002596:	f107 0316 	add.w	r3, r7, #22
 800259a:	2292      	movs	r2, #146	; 0x92
 800259c:	f003 fe66 	bl	800626c <i2cReadByteFromSlaveReg>

	*count = tmp & 0x7f;
 80025a0:	7dbb      	ldrb	r3, [r7, #22]
 80025a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 80025ac:	7dbb      	ldrb	r3, [r7, #22]
 80025ae:	09db      	lsrs	r3, r3, #7
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	701a      	strb	r2, [r3, #0]

	data = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x00);
 80025c8:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80025ce:	f993 3000 	ldrsb.w	r3, [r3]
 80025d2:	b2d9      	uxtb	r1, r3
 80025d4:	2300      	movs	r3, #0
 80025d6:	2281      	movs	r2, #129	; 0x81
 80025d8:	f003 fdfa 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80025e2:	f993 3000 	ldrsb.w	r3, [r3]
 80025e6:	b2d9      	uxtb	r1, r3
 80025e8:	2306      	movs	r3, #6
 80025ea:	22ff      	movs	r2, #255	; 0xff
 80025ec:	f003 fdf0 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 80025f0:	4b23      	ldr	r3, [pc, #140]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 80025f6:	f993 3000 	ldrsb.w	r3, [r3]
 80025fa:	b2d9      	uxtb	r1, r3
 80025fc:	f107 0315 	add.w	r3, r7, #21
 8002600:	2283      	movs	r2, #131	; 0x83
 8002602:	f003 fe33 	bl	800626c <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data  & ~0x04);
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 800260c:	f993 3000 	ldrsb.w	r3, [r3]
 8002610:	b2d9      	uxtb	r1, r3
 8002612:	7d7b      	ldrb	r3, [r7, #21]
 8002614:	f023 0304 	bic.w	r3, r3, #4
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2283      	movs	r2, #131	; 0x83
 800261c:	f003 fdd8 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002622:	6818      	ldr	r0, [r3, #0]
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002626:	f993 3000 	ldrsb.w	r3, [r3]
 800262a:	b2d9      	uxtb	r1, r3
 800262c:	2301      	movs	r3, #1
 800262e:	22ff      	movs	r2, #255	; 0xff
 8002630:	f003 fdce 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 800263a:	f993 3000 	ldrsb.w	r3, [r3]
 800263e:	b2d9      	uxtb	r1, r3
 8002640:	2301      	movs	r3, #1
 8002642:	2200      	movs	r2, #0
 8002644:	f003 fdc4 	bl	80061d0 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 800264e:	f993 3000 	ldrsb.w	r3, [r3]
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	2300      	movs	r3, #0
 8002656:	22ff      	movs	r2, #255	; 0xff
 8002658:	f003 fdba 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <TOF_get_spad_info_from_nvm+0x240>)
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <TOF_get_spad_info_from_nvm+0x23c>)
 8002662:	f993 3000 	ldrsb.w	r3, [r3]
 8002666:	b2d9      	uxtb	r1, r3
 8002668:	2300      	movs	r3, #0
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	f003 fdb0 	bl	80061d0 <i2cSendByteToSlaveReg>

	return true;
 8002670:	2301      	movs	r3, #1
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000000a 	.word	0x2000000a
 8002680:	20000238 	.word	0x20000238

08002684 <TOF_set_spads_from_nvm>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the SPAD configuration is successful, otherwise false.
 */
bool TOF_set_spads_from_nvm(TOFSensor_t* TOFSENS)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	889b      	ldrh	r3, [r3, #4]
 8002690:	b25a      	sxtb	r2, r3
 8002692:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 8002694:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 800269c:	6013      	str	r3, [r2, #0]

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!TOF_get_spad_info_from_nvm(TOFSENS, &spad_count, &spad_type_is_aperture))
 800269e:	f107 0213 	add.w	r2, r7, #19
 80026a2:	f107 0314 	add.w	r3, r7, #20
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fec9 	bl	8002440 <TOF_get_spad_info_from_nvm>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <TOF_set_spads_from_nvm+0x3a>
	{
		return false;
 80026ba:	2300      	movs	r3, #0
 80026bc:	e0c4      	b.n	8002848 <TOF_set_spads_from_nvm+0x1c4>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80026be:	4b65      	ldr	r3, [pc, #404]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	4b63      	ldr	r3, [pc, #396]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80026c4:	f993 3000 	ldrsb.w	r3, [r3]
 80026c8:	b2d9      	uxtb	r1, r3
 80026ca:	f107 030c 	add.w	r3, r7, #12
 80026ce:	2206      	movs	r2, #6
 80026d0:	9200      	str	r2, [sp, #0]
 80026d2:	22b0      	movs	r2, #176	; 0xb0
 80026d4:	f003 fe36 	bl	8006344 <i2cBurstRegRead>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80026d8:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	4b5c      	ldr	r3, [pc, #368]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80026de:	f993 3000 	ldrsb.w	r3, [r3]
 80026e2:	b2d9      	uxtb	r1, r3
 80026e4:	2301      	movs	r3, #1
 80026e6:	22ff      	movs	r2, #255	; 0xff
 80026e8:	f003 fd72 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80026f2:	f993 3000 	ldrsb.w	r3, [r3]
 80026f6:	b2d9      	uxtb	r1, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	224f      	movs	r2, #79	; 0x4f
 80026fc:	f003 fd68 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8002700:	4b54      	ldr	r3, [pc, #336]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	4b52      	ldr	r3, [pc, #328]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 8002706:	f993 3000 	ldrsb.w	r3, [r3]
 800270a:	b2d9      	uxtb	r1, r3
 800270c:	232c      	movs	r3, #44	; 0x2c
 800270e:	224e      	movs	r2, #78	; 0x4e
 8002710:	f003 fd5e 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8002714:	4b4f      	ldr	r3, [pc, #316]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 800271a:	f993 3000 	ldrsb.w	r3, [r3]
 800271e:	b2d9      	uxtb	r1, r3
 8002720:	2300      	movs	r3, #0
 8002722:	22ff      	movs	r2, #255	; 0xff
 8002724:	f003 fd54 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	4b48      	ldr	r3, [pc, #288]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 800272e:	f993 3000 	ldrsb.w	r3, [r3]
 8002732:	b2d9      	uxtb	r1, r3
 8002734:	23b4      	movs	r3, #180	; 0xb4
 8002736:	22b6      	movs	r2, #182	; 0xb6
 8002738:	f003 fd4a 	bl	80061d0 <i2cSendByteToSlaveReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800273c:	7cfb      	ldrb	r3, [r7, #19]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <TOF_set_spads_from_nvm+0xc2>
 8002742:	230c      	movs	r3, #12
 8002744:	e000      	b.n	8002748 <TOF_set_spads_from_nvm+0xc4>
 8002746:	2300      	movs	r3, #0
 8002748:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	75bb      	strb	r3, [r7, #22]
 8002752:	e039      	b.n	80027c8 <TOF_set_spads_from_nvm+0x144>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8002754:	7dba      	ldrb	r2, [r7, #22]
 8002756:	7d7b      	ldrb	r3, [r7, #21]
 8002758:	429a      	cmp	r2, r3
 800275a:	d303      	bcc.n	8002764 <TOF_set_spads_from_nvm+0xe0>
 800275c:	7d3b      	ldrb	r3, [r7, #20]
 800275e:	7dfa      	ldrb	r2, [r7, #23]
 8002760:	429a      	cmp	r2, r3
 8002762:	d11a      	bne.n	800279a <TOF_set_spads_from_nvm+0x116>
		{
		// This bit is lower than the first one that should be enabled, or
		// (reference_spad_count) bits have already been enabled, so zero this bit
		ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8002764:	7dbb      	ldrb	r3, [r7, #22]
 8002766:	08db      	lsrs	r3, r3, #3
 8002768:	b2d8      	uxtb	r0, r3
 800276a:	4603      	mov	r3, r0
 800276c:	3318      	adds	r3, #24
 800276e:	443b      	add	r3, r7
 8002770:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002774:	b25a      	sxtb	r2, r3
 8002776:	7dbb      	ldrb	r3, [r7, #22]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	b25b      	sxtb	r3, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	b25b      	sxtb	r3, r3
 8002788:	4013      	ands	r3, r2
 800278a:	b25a      	sxtb	r2, r3
 800278c:	4603      	mov	r3, r0
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	3318      	adds	r3, #24
 8002792:	443b      	add	r3, r7
 8002794:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002798:	e013      	b.n	80027c2 <TOF_set_spads_from_nvm+0x13e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	08db      	lsrs	r3, r3, #3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3318      	adds	r3, #24
 80027a2:	443b      	add	r3, r7
 80027a4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80027a8:	461a      	mov	r2, r3
 80027aa:	7dbb      	ldrb	r3, [r7, #22]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	fa42 f303 	asr.w	r3, r2, r3
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <TOF_set_spads_from_nvm+0x13e>
		{
		spads_enabled++;
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
 80027be:	3301      	adds	r3, #1
 80027c0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 80027c2:	7dbb      	ldrb	r3, [r7, #22]
 80027c4:	3301      	adds	r3, #1
 80027c6:	75bb      	strb	r3, [r7, #22]
 80027c8:	7dbb      	ldrb	r3, [r7, #22]
 80027ca:	2b2f      	cmp	r3, #47	; 0x2f
 80027cc:	d9c2      	bls.n	8002754 <TOF_set_spads_from_nvm+0xd0>
		}
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map[0]);
 80027ce:	4b21      	ldr	r3, [pc, #132]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80027d4:	f993 3000 	ldrsb.w	r3, [r3]
 80027d8:	b2d9      	uxtb	r1, r3
 80027da:	7b3b      	ldrb	r3, [r7, #12]
 80027dc:	22b0      	movs	r2, #176	; 0xb0
 80027de:	f003 fcf7 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 1, ref_spad_map[1]);
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80027e8:	f993 3000 	ldrsb.w	r3, [r3]
 80027ec:	b2d9      	uxtb	r1, r3
 80027ee:	7b7b      	ldrb	r3, [r7, #13]
 80027f0:	22b1      	movs	r2, #177	; 0xb1
 80027f2:	f003 fced 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 2, ref_spad_map[2]);
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	4b15      	ldr	r3, [pc, #84]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 80027fc:	f993 3000 	ldrsb.w	r3, [r3]
 8002800:	b2d9      	uxtb	r1, r3
 8002802:	7bbb      	ldrb	r3, [r7, #14]
 8002804:	22b2      	movs	r2, #178	; 0xb2
 8002806:	f003 fce3 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 3, ref_spad_map[3]);
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 8002810:	f993 3000 	ldrsb.w	r3, [r3]
 8002814:	b2d9      	uxtb	r1, r3
 8002816:	7bfb      	ldrb	r3, [r7, #15]
 8002818:	22b3      	movs	r2, #179	; 0xb3
 800281a:	f003 fcd9 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 4, ref_spad_map[4]);
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 8002824:	f993 3000 	ldrsb.w	r3, [r3]
 8002828:	b2d9      	uxtb	r1, r3
 800282a:	7c3b      	ldrb	r3, [r7, #16]
 800282c:	22b4      	movs	r2, #180	; 0xb4
 800282e:	f003 fccf 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 5, ref_spad_map[5]);
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <TOF_set_spads_from_nvm+0x1d0>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <TOF_set_spads_from_nvm+0x1cc>)
 8002838:	f993 3000 	ldrsb.w	r3, [r3]
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	7c7b      	ldrb	r3, [r7, #17]
 8002840:	22b5      	movs	r2, #181	; 0xb5
 8002842:	f003 fcc5 	bl	80061d0 <i2cSendByteToSlaveReg>

	return true;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	2000000a 	.word	0x2000000a
 8002854:	20000238 	.word	0x20000238

08002858 <TOF_load_default_tuning_settings>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the tuning configuration was successful, otherwise false.
 */
bool TOF_load_default_tuning_settings(TOFSensor_t* TOFSENS)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	889b      	ldrh	r3, [r3, #4]
 8002864:	b25a      	sxtb	r2, r3
 8002866:	4bc6      	ldr	r3, [pc, #792]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002868:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4ac5      	ldr	r2, [pc, #788]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002870:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8002872:	4bc4      	ldr	r3, [pc, #784]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	4bc2      	ldr	r3, [pc, #776]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002878:	f993 3000 	ldrsb.w	r3, [r3]
 800287c:	b2d9      	uxtb	r1, r3
 800287e:	2301      	movs	r3, #1
 8002880:	22ff      	movs	r2, #255	; 0xff
 8002882:	f003 fca5 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002886:	4603      	mov	r3, r0
 8002888:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x00);
 800288a:	4bbe      	ldr	r3, [pc, #760]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	4bbc      	ldr	r3, [pc, #752]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002890:	f993 3000 	ldrsb.w	r3, [r3]
 8002894:	b2d9      	uxtb	r1, r3
 8002896:	2300      	movs	r3, #0
 8002898:	2200      	movs	r2, #0
 800289a:	f003 fc99 	bl	80061d0 <i2cSendByteToSlaveReg>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	4013      	ands	r3, r2
 80028a6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 80028a8:	4bb6      	ldr	r3, [pc, #728]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	4bb4      	ldr	r3, [pc, #720]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80028ae:	f993 3000 	ldrsb.w	r3, [r3]
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	22ff      	movs	r2, #255	; 0xff
 80028b8:	f003 fc8a 	bl	80061d0 <i2cSendByteToSlaveReg>
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	4013      	ands	r3, r2
 80028c4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_RANGE_CONFIG, TOF_DEFAULT_0x00);
 80028c6:	4baf      	ldr	r3, [pc, #700]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	4bad      	ldr	r3, [pc, #692]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80028cc:	f993 3000 	ldrsb.w	r3, [r3]
 80028d0:	b2d9      	uxtb	r1, r3
 80028d2:	2300      	movs	r3, #0
 80028d4:	2209      	movs	r2, #9
 80028d6:	f003 fc7b 	bl	80061d0 <i2cSendByteToSlaveReg>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	4013      	ands	r3, r2
 80028e2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x10, TOF_DEFAULT_0x00);
 80028e4:	4ba7      	ldr	r3, [pc, #668]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	4ba5      	ldr	r3, [pc, #660]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80028ea:	f993 3000 	ldrsb.w	r3, [r3]
 80028ee:	b2d9      	uxtb	r1, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	2210      	movs	r2, #16
 80028f4:	f003 fc6c 	bl	80061d0 <i2cSendByteToSlaveReg>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
 80028fe:	4013      	ands	r3, r2
 8002900:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x11, TOF_DEFAULT_0x00);
 8002902:	4ba0      	ldr	r3, [pc, #640]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002904:	6818      	ldr	r0, [r3, #0]
 8002906:	4b9e      	ldr	r3, [pc, #632]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002908:	f993 3000 	ldrsb.w	r3, [r3]
 800290c:	b2d9      	uxtb	r1, r3
 800290e:	2300      	movs	r3, #0
 8002910:	2211      	movs	r2, #17
 8002912:	f003 fc5d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	4013      	ands	r3, r2
 800291e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x24, TOF_DEFAULT_0x01);
 8002920:	4b98      	ldr	r3, [pc, #608]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	4b96      	ldr	r3, [pc, #600]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002926:	f993 3000 	ldrsb.w	r3, [r3]
 800292a:	b2d9      	uxtb	r1, r3
 800292c:	2301      	movs	r3, #1
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	f003 fc4e 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	4013      	ands	r3, r2
 800293c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x25, TOF_DEFAULT_0xFF);
 800293e:	4b91      	ldr	r3, [pc, #580]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	4b8f      	ldr	r3, [pc, #572]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002944:	f993 3000 	ldrsb.w	r3, [r3]
 8002948:	b2d9      	uxtb	r1, r3
 800294a:	23ff      	movs	r3, #255	; 0xff
 800294c:	2225      	movs	r2, #37	; 0x25
 800294e:	f003 fc3f 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002952:	4603      	mov	r3, r0
 8002954:	461a      	mov	r2, r3
 8002956:	7bfb      	ldrb	r3, [r7, #15]
 8002958:	4013      	ands	r3, r2
 800295a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x75, TOF_DEFAULT_0x00);
 800295c:	4b89      	ldr	r3, [pc, #548]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002962:	f993 3000 	ldrsb.w	r3, [r3]
 8002966:	b2d9      	uxtb	r1, r3
 8002968:	2300      	movs	r3, #0
 800296a:	2275      	movs	r2, #117	; 0x75
 800296c:	f003 fc30 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	4013      	ands	r3, r2
 8002978:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 800297a:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002980:	f993 3000 	ldrsb.w	r3, [r3]
 8002984:	b2d9      	uxtb	r1, r3
 8002986:	2301      	movs	r3, #1
 8002988:	22ff      	movs	r2, #255	; 0xff
 800298a:	f003 fc21 	bl	80061d0 <i2cSendByteToSlaveReg>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	4013      	ands	r3, r2
 8002996:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, TOF_DEFAULT_0x2C);
 8002998:	4b7a      	ldr	r3, [pc, #488]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	4b78      	ldr	r3, [pc, #480]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 800299e:	f993 3000 	ldrsb.w	r3, [r3]
 80029a2:	b2d9      	uxtb	r1, r3
 80029a4:	232c      	movs	r3, #44	; 0x2c
 80029a6:	224e      	movs	r2, #78	; 0x4e
 80029a8:	f003 fc12 	bl	80061d0 <i2cSendByteToSlaveReg>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	4013      	ands	r3, r2
 80029b4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x00);
 80029b6:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	4b71      	ldr	r3, [pc, #452]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80029bc:	f993 3000 	ldrsb.w	r3, [r3]
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	2300      	movs	r3, #0
 80029c4:	2248      	movs	r2, #72	; 0x48
 80029c6:	f003 fc03 	bl	80061d0 <i2cSendByteToSlaveReg>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	4013      	ands	r3, r2
 80029d2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x20);
 80029d4:	4b6b      	ldr	r3, [pc, #428]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	4b69      	ldr	r3, [pc, #420]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80029da:	f993 3000 	ldrsb.w	r3, [r3]
 80029de:	b2d9      	uxtb	r1, r3
 80029e0:	2320      	movs	r3, #32
 80029e2:	2230      	movs	r2, #48	; 0x30
 80029e4:	f003 fbf4 	bl	80061d0 <i2cSendByteToSlaveReg>
 80029e8:	4603      	mov	r3, r0
 80029ea:	461a      	mov	r2, r3
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	4013      	ands	r3, r2
 80029f0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 80029f2:	4b64      	ldr	r3, [pc, #400]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 80029f8:	f993 3000 	ldrsb.w	r3, [r3]
 80029fc:	b2d9      	uxtb	r1, r3
 80029fe:	2300      	movs	r3, #0
 8002a00:	22ff      	movs	r2, #255	; 0xff
 8002a02:	f003 fbe5 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	7bfb      	ldrb	r3, [r7, #15]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x09);
 8002a10:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002a16:	f993 3000 	ldrsb.w	r3, [r3]
 8002a1a:	b2d9      	uxtb	r1, r3
 8002a1c:	2309      	movs	r3, #9
 8002a1e:	2230      	movs	r2, #48	; 0x30
 8002a20:	f003 fbd6 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x54, TOF_DEFAULT_0x00);
 8002a2e:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002a34:	f993 3000 	ldrsb.w	r3, [r3]
 8002a38:	b2d9      	uxtb	r1, r3
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2254      	movs	r2, #84	; 0x54
 8002a3e:	f003 fbc7 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a42:	4603      	mov	r3, r0
 8002a44:	461a      	mov	r2, r3
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 8002a4c:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002a52:	f993 3000 	ldrsb.w	r3, [r3]
 8002a56:	b2d9      	uxtb	r1, r3
 8002a58:	2304      	movs	r3, #4
 8002a5a:	2231      	movs	r2, #49	; 0x31
 8002a5c:	f003 fbb8 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a60:	4603      	mov	r3, r0
 8002a62:	461a      	mov	r2, r3
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	4013      	ands	r3, r2
 8002a68:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_VCSEL_WIDTH, TOF_DEFAULT_0x03);
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002a70:	f993 3000 	ldrsb.w	r3, [r3]
 8002a74:	b2d9      	uxtb	r1, r3
 8002a76:	2303      	movs	r3, #3
 8002a78:	2232      	movs	r2, #50	; 0x32
 8002a7a:	f003 fba9 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	461a      	mov	r2, r3
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	4013      	ands	r3, r2
 8002a86:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x83);
 8002a88:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002a8a:	6818      	ldr	r0, [r3, #0]
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8002a92:	b2d9      	uxtb	r1, r3
 8002a94:	2383      	movs	r3, #131	; 0x83
 8002a96:	2240      	movs	r2, #64	; 0x40
 8002a98:	f003 fb9a 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x25);
 8002aa6:	4b37      	ldr	r3, [pc, #220]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002aac:	f993 3000 	ldrsb.w	r3, [r3]
 8002ab0:	b2d9      	uxtb	r1, r3
 8002ab2:	2325      	movs	r3, #37	; 0x25
 8002ab4:	2246      	movs	r2, #70	; 0x46
 8002ab6:	f003 fb8b 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_CONTROL, TOF_DEFAULT_0x00);
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002aca:	f993 3000 	ldrsb.w	r3, [r3]
 8002ace:	b2d9      	uxtb	r1, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2260      	movs	r2, #96	; 0x60
 8002ad4:	f003 fb7c 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	4b26      	ldr	r3, [pc, #152]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8002aec:	b2d9      	uxtb	r1, r3
 8002aee:	2300      	movs	r3, #0
 8002af0:	2227      	movs	r2, #39	; 0x27
 8002af2:	f003 fb6d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	4013      	ands	r3, r2
 8002afe:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x06);
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002b06:	f993 3000 	ldrsb.w	r3, [r3]
 8002b0a:	b2d9      	uxtb	r1, r3
 8002b0c:	2306      	movs	r3, #6
 8002b0e:	2250      	movs	r2, #80	; 0x50
 8002b10:	f003 fb5e 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461a      	mov	r2, r3
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x00);
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002b24:	f993 3000 	ldrsb.w	r3, [r3]
 8002b28:	b2d9      	uxtb	r1, r3
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2251      	movs	r2, #81	; 0x51
 8002b2e:	f003 fb4f 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0x96);
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002b42:	f993 3000 	ldrsb.w	r3, [r3]
 8002b46:	b2d9      	uxtb	r1, r3
 8002b48:	2396      	movs	r3, #150	; 0x96
 8002b4a:	2252      	movs	r2, #82	; 0x52
 8002b4c:	f003 fb40 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	4013      	ands	r3, r2
 8002b58:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <TOF_load_default_tuning_settings+0x328>)
 8002b60:	f993 3000 	ldrsb.w	r3, [r3]
 8002b64:	b2d9      	uxtb	r1, r3
 8002b66:	2308      	movs	r3, #8
 8002b68:	2256      	movs	r2, #86	; 0x56
 8002b6a:	f003 fb31 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	4013      	ands	r3, r2
 8002b76:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x30);
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <TOF_load_default_tuning_settings+0x32c>)
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	e004      	b.n	8002b88 <TOF_load_default_tuning_settings+0x330>
 8002b7e:	bf00      	nop
 8002b80:	2000000a 	.word	0x2000000a
 8002b84:	20000238 	.word	0x20000238
 8002b88:	4bc9      	ldr	r3, [pc, #804]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8002b8e:	b2d9      	uxtb	r1, r3
 8002b90:	2330      	movs	r3, #48	; 0x30
 8002b92:	2257      	movs	r2, #87	; 0x57
 8002b94:	f003 fb1c 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_HI, TOF_DEFAULT_0x00);
 8002ba2:	4bc4      	ldr	r3, [pc, #784]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002ba4:	6818      	ldr	r0, [r3, #0]
 8002ba6:	4bc2      	ldr	r3, [pc, #776]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002ba8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bac:	b2d9      	uxtb	r1, r3
 8002bae:	2300      	movs	r3, #0
 8002bb0:	2261      	movs	r2, #97	; 0x61
 8002bb2:	f003 fb0d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_LO, TOF_DEFAULT_0x00);
 8002bc0:	4bbc      	ldr	r3, [pc, #752]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	4bba      	ldr	r3, [pc, #744]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002bca:	b2d9      	uxtb	r1, r3
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2262      	movs	r2, #98	; 0x62
 8002bd0:	f003 fafe 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	7bfb      	ldrb	r3, [r7, #15]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8002bde:	4bb5      	ldr	r3, [pc, #724]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	4bb3      	ldr	r3, [pc, #716]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002be4:	f993 3000 	ldrsb.w	r3, [r3]
 8002be8:	b2d9      	uxtb	r1, r3
 8002bea:	2300      	movs	r3, #0
 8002bec:	2264      	movs	r2, #100	; 0x64
 8002bee:	f003 faef 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x65, TOF_DEFAULT_0x00);
 8002bfc:	4bad      	ldr	r3, [pc, #692]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	4bab      	ldr	r3, [pc, #684]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c02:	f993 3000 	ldrsb.w	r3, [r3]
 8002c06:	b2d9      	uxtb	r1, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2265      	movs	r2, #101	; 0x65
 8002c0c:	f003 fae0 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	4013      	ands	r3, r2
 8002c18:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x66, TOF_DEFAULT_0xA0);
 8002c1a:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	4ba4      	ldr	r3, [pc, #656]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c20:	f993 3000 	ldrsb.w	r3, [r3]
 8002c24:	b2d9      	uxtb	r1, r3
 8002c26:	23a0      	movs	r3, #160	; 0xa0
 8002c28:	2266      	movs	r2, #102	; 0x66
 8002c2a:	f003 fad1 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	4013      	ands	r3, r2
 8002c36:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8002c38:	4b9e      	ldr	r3, [pc, #632]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	4b9c      	ldr	r3, [pc, #624]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c42:	b2d9      	uxtb	r1, r3
 8002c44:	2301      	movs	r3, #1
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	f003 fac2 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	4013      	ands	r3, r2
 8002c54:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x22, TOF_DEFAULT_0x32);
 8002c56:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	4b95      	ldr	r3, [pc, #596]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c5c:	f993 3000 	ldrsb.w	r3, [r3]
 8002c60:	b2d9      	uxtb	r1, r3
 8002c62:	2332      	movs	r3, #50	; 0x32
 8002c64:	2222      	movs	r2, #34	; 0x22
 8002c66:	f003 fab3 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	4013      	ands	r3, r2
 8002c72:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x14);
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c7e:	b2d9      	uxtb	r1, r3
 8002c80:	2314      	movs	r3, #20
 8002c82:	2247      	movs	r2, #71	; 0x47
 8002c84:	f003 faa4 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x49, TOF_DEFAULT_0xFF);
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	4b86      	ldr	r3, [pc, #536]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002c98:	f993 3000 	ldrsb.w	r3, [r3]
 8002c9c:	b2d9      	uxtb	r1, r3
 8002c9e:	23ff      	movs	r3, #255	; 0xff
 8002ca0:	2249      	movs	r2, #73	; 0x49
 8002ca2:	f003 fa95 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	7bfb      	ldrb	r3, [r7, #15]
 8002cac:	4013      	ands	r3, r2
 8002cae:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4A, TOF_DEFAULT_0x00);
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cba:	b2d9      	uxtb	r1, r3
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	224a      	movs	r2, #74	; 0x4a
 8002cc0:	f003 fa86 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8002cce:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	4b77      	ldr	r3, [pc, #476]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002cd8:	b2d9      	uxtb	r1, r3
 8002cda:	2300      	movs	r3, #0
 8002cdc:	22ff      	movs	r2, #255	; 0xff
 8002cde:	f003 fa77 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7A, TOF_DEFAULT_0xA0);
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8002cf6:	b2d9      	uxtb	r1, r3
 8002cf8:	23a0      	movs	r3, #160	; 0xa0
 8002cfa:	227a      	movs	r2, #122	; 0x7a
 8002cfc:	f003 fa68 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
 8002d06:	4013      	ands	r3, r2
 8002d08:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7B, TOF_DEFAULT_0x00);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002d10:	f993 3000 	ldrsb.w	r3, [r3]
 8002d14:	b2d9      	uxtb	r1, r3
 8002d16:	2300      	movs	r3, #0
 8002d18:	227b      	movs	r2, #123	; 0x7b
 8002d1a:	f003 fa59 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	4013      	ands	r3, r2
 8002d26:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x78, TOF_DEFAULT_0x21);
 8002d28:	4b62      	ldr	r3, [pc, #392]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	4b60      	ldr	r3, [pc, #384]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8002d32:	b2d9      	uxtb	r1, r3
 8002d34:	2321      	movs	r3, #33	; 0x21
 8002d36:	2278      	movs	r2, #120	; 0x78
 8002d38:	f003 fa4a 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	4013      	ands	r3, r2
 8002d44:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002d4c:	f993 3000 	ldrsb.w	r3, [r3]
 8002d50:	b2d9      	uxtb	r1, r3
 8002d52:	2301      	movs	r3, #1
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	f003 fa3b 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	4013      	ands	r3, r2
 8002d62:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x23, TOF_DEFAULT_0x34);
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8002d6e:	b2d9      	uxtb	r1, r3
 8002d70:	2334      	movs	r3, #52	; 0x34
 8002d72:	2223      	movs	r2, #35	; 0x23
 8002d74:	f003 fa2c 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x42, TOF_DEFAULT_0x00);
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	4b4a      	ldr	r3, [pc, #296]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002d88:	f993 3000 	ldrsb.w	r3, [r3]
 8002d8c:	b2d9      	uxtb	r1, r3
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2242      	movs	r2, #66	; 0x42
 8002d92:	f003 fa1d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0xFF);
 8002da0:	4b44      	ldr	r3, [pc, #272]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002da6:	f993 3000 	ldrsb.w	r3, [r3]
 8002daa:	b2d9      	uxtb	r1, r3
 8002dac:	23ff      	movs	r3, #255	; 0xff
 8002dae:	2244      	movs	r2, #68	; 0x44
 8002db0:	f003 fa0e 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x26);
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc8:	b2d9      	uxtb	r1, r3
 8002dca:	2326      	movs	r3, #38	; 0x26
 8002dcc:	2245      	movs	r2, #69	; 0x45
 8002dce:	f003 f9ff 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x05);
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	4b33      	ldr	r3, [pc, #204]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002de2:	f993 3000 	ldrsb.w	r3, [r3]
 8002de6:	b2d9      	uxtb	r1, r3
 8002de8:	2305      	movs	r3, #5
 8002dea:	2246      	movs	r2, #70	; 0x46
 8002dec:	f003 f9f0 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	4013      	ands	r3, r2
 8002df8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x40);
 8002dfa:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	4b2c      	ldr	r3, [pc, #176]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e00:	f993 3000 	ldrsb.w	r3, [r3]
 8002e04:	b2d9      	uxtb	r1, r3
 8002e06:	2340      	movs	r3, #64	; 0x40
 8002e08:	2240      	movs	r2, #64	; 0x40
 8002e0a:	f003 f9e1 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	4013      	ands	r3, r2
 8002e16:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_THRESH_LOW, TOF_DEFAULT_0x06);
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8002e22:	b2d9      	uxtb	r1, r3
 8002e24:	2306      	movs	r3, #6
 8002e26:	220e      	movs	r2, #14
 8002e28:	f003 f9d2 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461a      	mov	r2, r3
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	4013      	ands	r3, r2
 8002e34:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x20, TOF_DEFAULT_0x1A);
 8002e36:	4b1f      	ldr	r3, [pc, #124]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002e38:	6818      	ldr	r0, [r3, #0]
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8002e40:	b2d9      	uxtb	r1, r3
 8002e42:	231a      	movs	r3, #26
 8002e44:	2220      	movs	r2, #32
 8002e46:	f003 f9c3 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	4013      	ands	r3, r2
 8002e52:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x43, TOF_DEFAULT_0x40);
 8002e54:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002e56:	6818      	ldr	r0, [r3, #0]
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8002e5e:	b2d9      	uxtb	r1, r3
 8002e60:	2340      	movs	r3, #64	; 0x40
 8002e62:	2243      	movs	r2, #67	; 0x43
 8002e64:	f003 f9b4 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	7bfb      	ldrb	r3, [r7, #15]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8002e72:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e78:	f993 3000 	ldrsb.w	r3, [r3]
 8002e7c:	b2d9      	uxtb	r1, r3
 8002e7e:	2300      	movs	r3, #0
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f003 f9a5 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002e86:	4603      	mov	r3, r0
 8002e88:	461a      	mov	r2, r3
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x34, TOF_DEFAULT_0x03);
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <TOF_load_default_tuning_settings+0x65c>)
 8002e92:	6818      	ldr	r0, [r3, #0]
 8002e94:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <TOF_load_default_tuning_settings+0x658>)
 8002e96:	f993 3000 	ldrsb.w	r3, [r3]
 8002e9a:	b2d9      	uxtb	r1, r3
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	2234      	movs	r2, #52	; 0x34
 8002ea0:	f003 f996 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	e004      	b.n	8002eb8 <TOF_load_default_tuning_settings+0x660>
 8002eae:	bf00      	nop
 8002eb0:	2000000a 	.word	0x2000000a
 8002eb4:	20000238 	.word	0x20000238
 8002eb8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x35, TOF_DEFAULT_0x44);
 8002eba:	4bc8      	ldr	r3, [pc, #800]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	4bc8      	ldr	r3, [pc, #800]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002ec0:	f993 3000 	ldrsb.w	r3, [r3]
 8002ec4:	b2d9      	uxtb	r1, r3
 8002ec6:	2344      	movs	r3, #68	; 0x44
 8002ec8:	2235      	movs	r2, #53	; 0x35
 8002eca:	f003 f981 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8002ed8:	4bc0      	ldr	r3, [pc, #768]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	4bc0      	ldr	r3, [pc, #768]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002ede:	f993 3000 	ldrsb.w	r3, [r3]
 8002ee2:	b2d9      	uxtb	r1, r3
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	f003 f972 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 8002ef6:	4bb9      	ldr	r3, [pc, #740]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002ef8:	6818      	ldr	r0, [r3, #0]
 8002efa:	4bb9      	ldr	r3, [pc, #740]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002efc:	f993 3000 	ldrsb.w	r3, [r3]
 8002f00:	b2d9      	uxtb	r1, r3
 8002f02:	2304      	movs	r3, #4
 8002f04:	2231      	movs	r2, #49	; 0x31
 8002f06:	f003 f963 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	4013      	ands	r3, r2
 8002f12:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4B, TOF_DEFAULT_0x09);
 8002f14:	4bb1      	ldr	r3, [pc, #708]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	4bb1      	ldr	r3, [pc, #708]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002f1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002f1e:	b2d9      	uxtb	r1, r3
 8002f20:	2309      	movs	r3, #9
 8002f22:	224b      	movs	r2, #75	; 0x4b
 8002f24:	f003 f954 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4C, TOF_DEFAULT_0x05);
 8002f32:	4baa      	ldr	r3, [pc, #680]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	4baa      	ldr	r3, [pc, #680]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002f38:	f993 3000 	ldrsb.w	r3, [r3]
 8002f3c:	b2d9      	uxtb	r1, r3
 8002f3e:	2305      	movs	r3, #5
 8002f40:	224c      	movs	r2, #76	; 0x4c
 8002f42:	f003 f945 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002f46:	4603      	mov	r3, r0
 8002f48:	461a      	mov	r2, r3
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4D, TOF_DEFAULT_0x04);
 8002f50:	4ba2      	ldr	r3, [pc, #648]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002f52:	6818      	ldr	r0, [r3, #0]
 8002f54:	4ba2      	ldr	r3, [pc, #648]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002f56:	f993 3000 	ldrsb.w	r3, [r3]
 8002f5a:	b2d9      	uxtb	r1, r3
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	224d      	movs	r2, #77	; 0x4d
 8002f60:	f003 f936 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8002f6e:	4b9b      	ldr	r3, [pc, #620]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002f74:	f993 3000 	ldrsb.w	r3, [r3]
 8002f78:	b2d9      	uxtb	r1, r3
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	22ff      	movs	r2, #255	; 0xff
 8002f7e:	f003 f927 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002f82:	4603      	mov	r3, r0
 8002f84:	461a      	mov	r2, r3
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8002f8c:	4b93      	ldr	r3, [pc, #588]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	4b93      	ldr	r3, [pc, #588]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002f92:	f993 3000 	ldrsb.w	r3, [r3]
 8002f96:	b2d9      	uxtb	r1, r3
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2244      	movs	r2, #68	; 0x44
 8002f9c:	f003 f918 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x20);
 8002faa:	4b8c      	ldr	r3, [pc, #560]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	4b8c      	ldr	r3, [pc, #560]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8002fb4:	b2d9      	uxtb	r1, r3
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	2245      	movs	r2, #69	; 0x45
 8002fba:	f003 f909 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	4b84      	ldr	r3, [pc, #528]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002fce:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd2:	b2d9      	uxtb	r1, r3
 8002fd4:	2308      	movs	r3, #8
 8002fd6:	2247      	movs	r2, #71	; 0x47
 8002fd8:	f003 f8fa 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x28);
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8002fec:	f993 3000 	ldrsb.w	r3, [r3]
 8002ff0:	b2d9      	uxtb	r1, r3
 8002ff2:	2328      	movs	r3, #40	; 0x28
 8002ff4:	2248      	movs	r2, #72	; 0x48
 8002ff6:	f003 f8eb 	bl	80061d0 <i2cSendByteToSlaveReg>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	4013      	ands	r3, r2
 8003002:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 8003004:	4b75      	ldr	r3, [pc, #468]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 800300a:	f993 3000 	ldrsb.w	r3, [r3]
 800300e:	b2d9      	uxtb	r1, r3
 8003010:	2300      	movs	r3, #0
 8003012:	2267      	movs	r2, #103	; 0x67
 8003014:	f003 f8dc 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003018:	4603      	mov	r3, r0
 800301a:	461a      	mov	r2, r3
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	4013      	ands	r3, r2
 8003020:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x04);
 8003022:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	4b6e      	ldr	r3, [pc, #440]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003028:	f993 3000 	ldrsb.w	r3, [r3]
 800302c:	b2d9      	uxtb	r1, r3
 800302e:	2304      	movs	r3, #4
 8003030:	2270      	movs	r2, #112	; 0x70
 8003032:	f003 f8cd 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	4013      	ands	r3, r2
 800303e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x01);
 8003040:	4b66      	ldr	r3, [pc, #408]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003046:	f993 3000 	ldrsb.w	r3, [r3]
 800304a:	b2d9      	uxtb	r1, r3
 800304c:	2301      	movs	r3, #1
 800304e:	2271      	movs	r2, #113	; 0x71
 8003050:	f003 f8be 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	4013      	ands	r3, r2
 800305c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0xFE);
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003060:	6818      	ldr	r0, [r3, #0]
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003064:	f993 3000 	ldrsb.w	r3, [r3]
 8003068:	b2d9      	uxtb	r1, r3
 800306a:	23fe      	movs	r3, #254	; 0xfe
 800306c:	2272      	movs	r2, #114	; 0x72
 800306e:	f003 f8af 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	4013      	ands	r3, r2
 800307a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x76, TOF_DEFAULT_0x00);
 800307c:	4b57      	ldr	r3, [pc, #348]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	4b57      	ldr	r3, [pc, #348]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003082:	f993 3000 	ldrsb.w	r3, [r3]
 8003086:	b2d9      	uxtb	r1, r3
 8003088:	2300      	movs	r3, #0
 800308a:	2276      	movs	r2, #118	; 0x76
 800308c:	f003 f8a0 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	4013      	ands	r3, r2
 8003098:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x77, TOF_DEFAULT_0x00);
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	4b50      	ldr	r3, [pc, #320]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80030a0:	f993 3000 	ldrsb.w	r3, [r3]
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	2300      	movs	r3, #0
 80030a8:	2277      	movs	r2, #119	; 0x77
 80030aa:	f003 f891 	bl	80061d0 <i2cSendByteToSlaveReg>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	4013      	ands	r3, r2
 80030b6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80030be:	f993 3000 	ldrsb.w	r3, [r3]
 80030c2:	b2d9      	uxtb	r1, r3
 80030c4:	2301      	movs	r3, #1
 80030c6:	22ff      	movs	r2, #255	; 0xff
 80030c8:	f003 f882 	bl	80061d0 <i2cSendByteToSlaveReg>
 80030cc:	4603      	mov	r3, r0
 80030ce:	461a      	mov	r2, r3
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4013      	ands	r3, r2
 80030d4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x0D, TOF_DEFAULT_0x01);
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80030dc:	f993 3000 	ldrsb.w	r3, [r3]
 80030e0:	b2d9      	uxtb	r1, r3
 80030e2:	2301      	movs	r3, #1
 80030e4:	220d      	movs	r2, #13
 80030e6:	f003 f873 	bl	80061d0 <i2cSendByteToSlaveReg>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	4013      	ands	r3, r2
 80030f2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80030fa:	f993 3000 	ldrsb.w	r3, [r3]
 80030fe:	b2d9      	uxtb	r1, r3
 8003100:	2300      	movs	r3, #0
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	f003 f864 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	4013      	ands	r3, r2
 8003110:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x01);
 8003112:	4b32      	ldr	r3, [pc, #200]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	4b32      	ldr	r3, [pc, #200]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003118:	f993 3000 	ldrsb.w	r3, [r3]
 800311c:	b2d9      	uxtb	r1, r3
 800311e:	2301      	movs	r3, #1
 8003120:	2280      	movs	r2, #128	; 0x80
 8003122:	f003 f855 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	4013      	ands	r3, r2
 800312e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, TOF_DEFAULT_0xF8);
 8003130:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003136:	f993 3000 	ldrsb.w	r3, [r3]
 800313a:	b2d9      	uxtb	r1, r3
 800313c:	23f8      	movs	r3, #248	; 0xf8
 800313e:	2201      	movs	r2, #1
 8003140:	f003 f846 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	4013      	ands	r3, r2
 800314c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003154:	f993 3000 	ldrsb.w	r3, [r3]
 8003158:	b2d9      	uxtb	r1, r3
 800315a:	2301      	movs	r3, #1
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	f003 f837 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003162:	4603      	mov	r3, r0
 8003164:	461a      	mov	r2, r3
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	4013      	ands	r3, r2
 800316a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x8E, TOF_DEFAULT_0x01);
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003172:	f993 3000 	ldrsb.w	r3, [r3]
 8003176:	b2d9      	uxtb	r1, r3
 8003178:	2301      	movs	r3, #1
 800317a:	228e      	movs	r2, #142	; 0x8e
 800317c:	f003 f828 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	4013      	ands	r3, r2
 8003188:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x01);
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 800318c:	6818      	ldr	r0, [r3, #0]
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 8003190:	f993 3000 	ldrsb.w	r3, [r3]
 8003194:	b2d9      	uxtb	r1, r3
 8003196:	2301      	movs	r3, #1
 8003198:	2200      	movs	r2, #0
 800319a:	f003 f819 	bl	80061d0 <i2cSendByteToSlaveReg>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4013      	ands	r3, r2
 80031a6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80031ae:	f993 3000 	ldrsb.w	r3, [r3]
 80031b2:	b2d9      	uxtb	r1, r3
 80031b4:	2300      	movs	r3, #0
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	f003 f80a 	bl	80061d0 <i2cSendByteToSlaveReg>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	4013      	ands	r3, r2
 80031c4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x00);
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <TOF_load_default_tuning_settings+0x984>)
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <TOF_load_default_tuning_settings+0x988>)
 80031cc:	f993 3000 	ldrsb.w	r3, [r3]
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	f002 fffb 	bl	80061d0 <i2cSendByteToSlaveReg>
 80031da:	e003      	b.n	80031e4 <TOF_load_default_tuning_settings+0x98c>
 80031dc:	20000238 	.word	0x20000238
 80031e0:	2000000a 	.word	0x2000000a
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	4013      	ands	r3, r2
 80031ec:	73fb      	strb	r3, [r7, #15]

    if (success != I2C_OK)
 80031ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <TOF_load_default_tuning_settings+0x9a2>
	{
		return false;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <TOF_load_default_tuning_settings+0x9a4>
	}

	return true;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <TOF_set_sequence_steps_enabled>:
 *  														specific step in the sensor's operational sequence.
 *
 * @returns:     bool: true if the sequence configuration was successfully written to the sensor, otherwise false.
 */
bool TOF_set_sequence_steps_enabled(TOFSensor_t* TOFSENS, uint8_t sequence_step)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	889b      	ldrh	r3, [r3, #4]
 8003214:	b25a      	sxtb	r2, r3
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <TOF_set_sequence_steps_enabled+0x50>)
 8003218:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <TOF_set_sequence_steps_enabled+0x54>)
 8003220:	6013      	str	r3, [r2, #0]

	bool result = false;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <TOF_set_sequence_steps_enabled+0x54>)
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <TOF_set_sequence_steps_enabled+0x50>)
 800322c:	f993 3000 	ldrsb.w	r3, [r3]
 8003230:	b2d9      	uxtb	r1, r3
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	2201      	movs	r2, #1
 8003236:	f002 ffcb 	bl	80061d0 <i2cSendByteToSlaveReg>
 800323a:	4603      	mov	r3, r0
 800323c:	73bb      	strb	r3, [r7, #14]

	if(success == I2C_OK)
 800323e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <TOF_set_sequence_steps_enabled+0x46>
	{
		result = true;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2000000a 	.word	0x2000000a
 8003258:	20000238 	.word	0x20000238

0800325c <TOF_perform_single_ref_calibration>:
 *                  - TOF_CALIBRATION_TYPE_PHASE 			Calibrates phase measurements.
 *
 * @returns:     bool: true if the calibration was successfully performed, otherwise false.
 */
bool TOF_perform_single_ref_calibration(TOFSensor_t* TOFSENS, TOF_calibration_type_t calib_type)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	889b      	ldrh	r3, [r3, #4]
 800326c:	b25a      	sxtb	r2, r3
 800326e:	4b41      	ldr	r3, [pc, #260]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 8003270:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a40      	ldr	r2, [pc, #256]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 8003278:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success;

    uint8_t sysrange_start = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 800327e:	2300      	movs	r3, #0
 8003280:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <TOF_perform_single_ref_calibration+0x32>
 8003288:	2b01      	cmp	r3, #1
 800328a:	d005      	beq.n	8003298 <TOF_perform_single_ref_calibration+0x3c>
 800328c:	e009      	b.n	80032a2 <TOF_perform_single_ref_calibration+0x46>
    {
    case TOF_CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 800328e:	2301      	movs	r3, #1
 8003290:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8003292:	2341      	movs	r3, #65	; 0x41
 8003294:	73fb      	strb	r3, [r7, #15]
        break;
 8003296:	e004      	b.n	80032a2 <TOF_perform_single_ref_calibration+0x46>
    case TOF_CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8003298:	2302      	movs	r3, #2
 800329a:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
        break;
 80032a0:	bf00      	nop
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_config);
 80032a2:	4b35      	ldr	r3, [pc, #212]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	4b33      	ldr	r3, [pc, #204]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 80032a8:	f993 3000 	ldrsb.w	r3, [r3]
 80032ac:	b2d9      	uxtb	r1, r3
 80032ae:	7bbb      	ldrb	r3, [r7, #14]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f002 ff8d 	bl	80061d0 <i2cSendByteToSlaveReg>
 80032b6:	4603      	mov	r3, r0
 80032b8:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80032ba:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <TOF_perform_single_ref_calibration+0x6a>
    {
        return false;
 80032c2:	2300      	movs	r3, #0
 80032c4:	e052      	b.n	800336c <TOF_perform_single_ref_calibration+0x110>
    }
//ToDo Abfrage ob die jeweiligen Initialisierungen richtig gesetzt wurden.
    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, sysrange_start);
 80032c6:	4b2c      	ldr	r3, [pc, #176]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 80032cc:	f993 3000 	ldrsb.w	r3, [r3]
 80032d0:	b2d9      	uxtb	r1, r3
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f002 ff7b 	bl	80061d0 <i2cSendByteToSlaveReg>
 80032da:	4603      	mov	r3, r0
 80032dc:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80032de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <TOF_perform_single_ref_calibration+0x8e>
    {
        return false;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e040      	b.n	800336c <TOF_perform_single_ref_calibration+0x110>

    /* Wait for interrupt */



    uint8_t interrupt_status = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	733b      	strb	r3, [r7, #12]
    do {		//Funktion in welcher der MCAL Fehler auftritt //ToDo i2cReadByteFromSlaveReg durch i2cBurstRegRead ersetzen

        //success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
        success = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status, 1);
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 80032f4:	f993 3000 	ldrsb.w	r3, [r3]
 80032f8:	b2d9      	uxtb	r1, r3
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	2201      	movs	r2, #1
 8003300:	9200      	str	r2, [sp, #0]
 8003302:	2213      	movs	r2, #19
 8003304:	f003 f81e 	bl	8006344 <i2cBurstRegRead>
 8003308:	4603      	mov	r3, r0
 800330a:	737b      	strb	r3, [r7, #13]
    } while ((interrupt_status & 0x07) == 0);
 800330c:	7b3b      	ldrb	r3, [r7, #12]
 800330e:	f003 0307 	and.w	r3, r3, #7
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0eb      	beq.n	80032ee <TOF_perform_single_ref_calibration+0x92>

    //} while (success == I2C_OK && ((interrupt_status & 0x07) == 0));
    if (success != I2C_OK)
 8003316:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <TOF_perform_single_ref_calibration+0xc6>
    {
        return false;
 800331e:	2300      	movs	r3, #0
 8003320:	e024      	b.n	800336c <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	4b13      	ldr	r3, [pc, #76]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 8003328:	f993 3000 	ldrsb.w	r3, [r3]
 800332c:	b2d9      	uxtb	r1, r3
 800332e:	2301      	movs	r3, #1
 8003330:	220b      	movs	r2, #11
 8003332:	f002 ff4d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003336:	4603      	mov	r3, r0
 8003338:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 800333a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <TOF_perform_single_ref_calibration+0xea>
    {
        return false;
 8003342:	2300      	movs	r3, #0
 8003344:	e012      	b.n	800336c <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8003346:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <TOF_perform_single_ref_calibration+0x11c>)
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <TOF_perform_single_ref_calibration+0x118>)
 800334c:	f993 3000 	ldrsb.w	r3, [r3]
 8003350:	b2d9      	uxtb	r1, r3
 8003352:	2300      	movs	r3, #0
 8003354:	2200      	movs	r2, #0
 8003356:	f002 ff3b 	bl	80061d0 <i2cSendByteToSlaveReg>
 800335a:	4603      	mov	r3, r0
 800335c:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 800335e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <TOF_perform_single_ref_calibration+0x10e>
    {
        return false;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <TOF_perform_single_ref_calibration+0x110>
    }

    return true;
 800336a:	2301      	movs	r3, #1
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000000a 	.word	0x2000000a
 8003378:	20000238 	.word	0x20000238

0800337c <TOF_perform_ref_calibration>:
 *               - After calibration, the sequence steps for measurement are re-enabled using
 *                 TOF_set_sequence_steps_enabled.
 *               - If any step in the calibration or configuration fails, the function returns false.
 */
bool TOF_perform_ref_calibration(TOFSensor_t* TOFSENS)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	889b      	ldrh	r3, [r3, #4]
 8003388:	b25a      	sxtb	r2, r3
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <TOF_perform_ref_calibration+0x6c>)
 800338c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a16      	ldr	r2, [pc, #88]	; (80033ec <TOF_perform_ref_calibration+0x70>)
 8003394:	6013      	str	r3, [r2, #0]

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_VHV)) {
 8003396:	2100      	movs	r1, #0
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7ff ff5f 	bl	800325c <TOF_perform_single_ref_calibration>
 800339e:	4603      	mov	r3, r0
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <TOF_perform_ref_calibration+0x32>
		return false;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e018      	b.n	80033e0 <TOF_perform_ref_calibration+0x64>
	}

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_PHASE)) {		//Funktion in welcher der MCAL Fehler auftritt
 80033ae:	2101      	movs	r1, #1
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff53 	bl	800325c <TOF_perform_single_ref_calibration>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <TOF_perform_ref_calibration+0x4a>
		return false;
 80033c2:	2300      	movs	r3, #0
 80033c4:	e00c      	b.n	80033e0 <TOF_perform_ref_calibration+0x64>
	}


	/* Restore sequence steps enabled */

	if (!TOF_set_sequence_steps_enabled(TOFSENS, TOF_RANGE_SEQUENCE_STEP_DSS + TOF_RANGE_SEQUENCE_STEP_PRE_RANGE + TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
 80033c6:	21e8      	movs	r1, #232	; 0xe8
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ff1b 	bl	8003204 <TOF_set_sequence_steps_enabled>
 80033ce:	4603      	mov	r3, r0
 80033d0:	f083 0301 	eor.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <TOF_perform_ref_calibration+0x62>
		return false;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <TOF_perform_ref_calibration+0x64>
	}

	return true;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	2000000a 	.word	0x2000000a
 80033ec:	20000238 	.word	0x20000238

080033f0 <TOF_init_device>:
 * @note:        - This function depends on several helper functions, each responsible for a specific initialization
 *                 task. If any step fails, the initialization halts and the function returns false.
 *               - Ensure the I2C communication setup is properly initialized before calling this function.
 */
bool TOF_init_device(TOFSensor_t* TOFSENS)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	889b      	ldrh	r3, [r3, #4]
 80033fc:	b25a      	sxtb	r2, r3
 80033fe:	4b27      	ldr	r3, [pc, #156]	; (800349c <TOF_init_device+0xac>)
 8003400:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a26      	ldr	r2, [pc, #152]	; (80034a0 <TOF_init_device+0xb0>)
 8003408:	6013      	str	r3, [r2, #0]

	if (!TOF_data_init(TOFSENS))
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fe ff56 	bl	80022bc <TOF_data_init>
 8003410:	4603      	mov	r3, r0
 8003412:	f083 0301 	eor.w	r3, r3, #1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <TOF_init_device+0x30>
	{
		return false;
 800341c:	2300      	movs	r3, #0
 800341e:	e038      	b.n	8003492 <TOF_init_device+0xa2>
	}

	if (!TOF_set_spads_from_nvm(TOFSENS)) {
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff f92f 	bl	8002684 <TOF_set_spads_from_nvm>
 8003426:	4603      	mov	r3, r0
 8003428:	f083 0301 	eor.w	r3, r3, #1
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <TOF_init_device+0x46>
		return false;
 8003432:	2300      	movs	r3, #0
 8003434:	e02d      	b.n	8003492 <TOF_init_device+0xa2>
	}

	if (!TOF_load_default_tuning_settings(TOFSENS))
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fa0e 	bl	8002858 <TOF_load_default_tuning_settings>
 800343c:	4603      	mov	r3, r0
 800343e:	f083 0301 	eor.w	r3, r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d001      	beq.n	800344c <TOF_init_device+0x5c>
	{
		return false;
 8003448:	2300      	movs	r3, #0
 800344a:	e022      	b.n	8003492 <TOF_init_device+0xa2>
	}

	if (!TOF_configure_interrupt(TOFSENS))
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7fe fe9f 	bl	8002190 <TOF_configure_interrupt>
 8003452:	4603      	mov	r3, r0
 8003454:	f083 0301 	eor.w	r3, r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <TOF_init_device+0x72>
	{
		return false;
 800345e:	2300      	movs	r3, #0
 8003460:	e017      	b.n	8003492 <TOF_init_device+0xa2>
	}

	if (!TOF_set_sequence_steps_enabled(TOFSENS, TOF_RANGE_SEQUENCE_STEP_DSS + TOF_RANGE_SEQUENCE_STEP_PRE_RANGE + TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
 8003462:	21e8      	movs	r1, #232	; 0xe8
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fecd 	bl	8003204 <TOF_set_sequence_steps_enabled>
 800346a:	4603      	mov	r3, r0
 800346c:	f083 0301 	eor.w	r3, r3, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <TOF_init_device+0x8a>
		return false;
 8003476:	2300      	movs	r3, #0
 8003478:	e00b      	b.n	8003492 <TOF_init_device+0xa2>
	}

    if (!TOF_perform_ref_calibration(TOFSENS))			//Funktion in welcher der MCAL Fehler auftritt
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff ff7e 	bl	800337c <TOF_perform_ref_calibration>
 8003480:	4603      	mov	r3, r0
 8003482:	f083 0301 	eor.w	r3, r3, #1
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <TOF_init_device+0xa0>
    {
        return false;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <TOF_init_device+0xa2>
    }

	return true;
 8003490:	2301      	movs	r3, #1
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	2000000a 	.word	0x2000000a
 80034a0:	20000238 	.word	0x20000238

080034a4 <TOF_getMeasurement>:
 * @limitations:
 *               - If the range is out of the sensor's measurable distance, the value returned is defined
 *                 as TOF_VL53L0X_OUT_OF_RANGE.
 */
bool TOF_getMeasurement(TOFSensor_t* TOFSENS, uint16_t *range)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
	I2C_RETURN_CODE_t i2c_return;
	TOF_address_used = TOFSENS->TOF_address_used;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	889b      	ldrh	r3, [r3, #4]
 80034b2:	b25a      	sxtb	r2, r3
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <TOF_getMeasurement+0xec>)
 80034b6:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a35      	ldr	r2, [pc, #212]	; (8003594 <TOF_getMeasurement+0xf0>)
 80034be:	6013      	str	r3, [r2, #0]
	uint8_t interrupt_status[1];
	do
	{
		i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_RESULT_INTERRUPT_STATUS, interrupt_status, 1);
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <TOF_getMeasurement+0xf0>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4b32      	ldr	r3, [pc, #200]	; (8003590 <TOF_getMeasurement+0xec>)
 80034c6:	f993 3000 	ldrsb.w	r3, [r3]
 80034ca:	b2d9      	uxtb	r1, r3
 80034cc:	f107 030c 	add.w	r3, r7, #12
 80034d0:	2201      	movs	r2, #1
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	2213      	movs	r2, #19
 80034d6:	f002 ff35 	bl	8006344 <i2cBurstRegRead>
 80034da:	4603      	mov	r3, r0
 80034dc:	73fb      	strb	r3, [r7, #15]
	} while (i2c_return == I2C_OK && ((interrupt_status[0] & 0x07) == 0));
 80034de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <TOF_getMeasurement+0x4c>
 80034e6:	7b3b      	ldrb	r3, [r7, #12]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0e7      	beq.n	80034c0 <TOF_getMeasurement+0x1c>
	if (i2c_return != I2C_OK)
 80034f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <TOF_getMeasurement+0x58>
	{
		return false;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e045      	b.n	8003588 <TOF_getMeasurement+0xe4>
	}

	uint8_t readBuffer[2];
	i2c_return = i2cBurstRegRead(
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <TOF_getMeasurement+0xf0>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <TOF_getMeasurement+0xec>)
 8003502:	f993 3000 	ldrsb.w	r3, [r3]
 8003506:	b2d9      	uxtb	r1, r3
 8003508:	f107 0308 	add.w	r3, r7, #8
 800350c:	2202      	movs	r2, #2
 800350e:	9200      	str	r2, [sp, #0]
 8003510:	221e      	movs	r2, #30
 8003512:	f002 ff17 	bl	8006344 <i2cBurstRegRead>
 8003516:	4603      	mov	r3, r0
 8003518:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_RESULT_RANGE_STATUS + 10,
			readBuffer, 2);
	if (i2c_return != I2C_OK)
 800351a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <TOF_getMeasurement+0x82>
	{
		// returns false, if i2c communication was not successful
		return false;
 8003522:	2300      	movs	r3, #0
 8003524:	e030      	b.n	8003588 <TOF_getMeasurement+0xe4>
	}
	*range = (readBuffer[0] << 8) + readBuffer[1];
 8003526:	7a3b      	ldrb	r3, [r7, #8]
 8003528:	b29b      	uxth	r3, r3
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	b29a      	uxth	r2, r3
 800352e:	7a7b      	ldrb	r3, [r7, #9]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4413      	add	r3, r2
 8003534:	b29a      	uxth	r2, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	801a      	strh	r2, [r3, #0]

	TOFSENS->measuredRange = (uint32_t)readBuffer;
 800353a:	f107 0208 	add.w	r2, r7, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	60da      	str	r2, [r3, #12]
	i2c_return = i2cSendByteToSlaveReg(
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <TOF_getMeasurement+0xf0>)
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <TOF_getMeasurement+0xec>)
 8003548:	f993 3000 	ldrsb.w	r3, [r3]
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	2301      	movs	r3, #1
 8003550:	220b      	movs	r2, #11
 8003552:	f002 fe3d 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
	if (i2c_return != I2C_OK)
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <TOF_getMeasurement+0xc2>
	{
		// returns false, if i2c communication was not successful
		return false;
 8003562:	2300      	movs	r3, #0
 8003564:	e010      	b.n	8003588 <TOF_getMeasurement+0xe4>
	}

	/* 8190 or 8191 may be returned when obstacle is out of range. */
	if (*range == 8190 || *range == 8191)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800356e:	4293      	cmp	r3, r2
 8003570:	d005      	beq.n	800357e <TOF_getMeasurement+0xda>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800357a:	4293      	cmp	r3, r2
 800357c:	d103      	bne.n	8003586 <TOF_getMeasurement+0xe2>
	{
		*range = TOF_VL53L0X_OUT_OF_RANGE;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8003584:	801a      	strh	r2, [r3, #0]
	}

	return true;
 8003586:	2301      	movs	r3, #1
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	2000000a 	.word	0x2000000a
 8003594:	20000238 	.word	0x20000238

08003598 <TOF_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the initialization was successful, otherwise false.
 */
bool TOF_init(TOFSensor_t* TOFSENS)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	889b      	ldrh	r3, [r3, #4]
 80035a4:	b25a      	sxtb	r2, r3
 80035a6:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <TOF_init+0x50>)
 80035a8:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <TOF_init+0x54>)
 80035b0:	6013      	str	r3, [r2, #0]

	// Init i2c address and check connectivity
	if (!TOF_init_address(TOFSENS))
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fe fe52 	bl	800225c <TOF_init_address>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <TOF_init+0x30>
	{
		return false;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e00b      	b.n	80035e0 <TOF_init+0x48>
	}

	//device initialization
	if (!TOF_init_device(TOFSENS))		//Funktion in welcher der MCAL Fehler auftritt
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff11 	bl	80033f0 <TOF_init_device>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <TOF_init+0x46>
	{
		return false;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <TOF_init+0x48>
	}

	// return true, if everything was fine
	return true;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000000a 	.word	0x2000000a
 80035ec:	20000238 	.word	0x20000238

080035f0 <TOF_start_continuous>:
 * 				uint32_t period_ms							Measurement interval in milliseconds.
 *
 * @returns:     bool: true if continuous mode starts successfully, otherwise false.
 */
bool TOF_start_continuous(TOFSensor_t* TOFSENS)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	889b      	ldrh	r3, [r3, #4]
 80035fc:	b25a      	sxtb	r2, r3
 80035fe:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003600:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a67      	ldr	r2, [pc, #412]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003608:	6013      	str	r3, [r2, #0]

	uint32_t period_ms = TOFSENS->Ranging_Profile_time;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
	I2C_RETURN_CODE_t i2c_return;

	TOF_address_used = TOFSENS->TOF_address_used;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	889b      	ldrh	r3, [r3, #4]
 8003614:	b25a      	sxtb	r2, r3
 8003616:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003618:	701a      	strb	r2, [r3, #0]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800361a:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <TOF_start_continuous+0x1b4>)
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	4b60      	ldr	r3, [pc, #384]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003620:	f993 3000 	ldrsb.w	r3, [r3]
 8003624:	b2d9      	uxtb	r1, r3
 8003626:	2301      	movs	r3, #1
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	f002 fdd1 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003634:	f993 3000 	ldrsb.w	r3, [r3]
 8003638:	b2d9      	uxtb	r1, r3
 800363a:	2301      	movs	r3, #1
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	f002 fdc7 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8003642:	4b58      	ldr	r3, [pc, #352]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003648:	f993 3000 	ldrsb.w	r3, [r3]
 800364c:	b2d9      	uxtb	r1, r3
 800364e:	2300      	movs	r3, #0
 8003650:	2200      	movs	r2, #0
 8003652:	f002 fdbd 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, TOF_stop_variable);
 8003656:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <TOF_start_continuous+0x1b0>)
 800365c:	f993 3000 	ldrsb.w	r3, [r3]
 8003660:	b2d9      	uxtb	r1, r3
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <TOF_start_continuous+0x1b8>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2291      	movs	r2, #145	; 0x91
 8003668:	f002 fdb2 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 800366c:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <TOF_start_continuous+0x1b4>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003672:	f993 3000 	ldrsb.w	r3, [r3]
 8003676:	b2d9      	uxtb	r1, r3
 8003678:	2301      	movs	r3, #1
 800367a:	2200      	movs	r2, #0
 800367c:	f002 fda8 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003686:	f993 3000 	ldrsb.w	r3, [r3]
 800368a:	b2d9      	uxtb	r1, r3
 800368c:	2300      	movs	r3, #0
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	f002 fd9e 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8003694:	4b43      	ldr	r3, [pc, #268]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003696:	6818      	ldr	r0, [r3, #0]
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <TOF_start_continuous+0x1b0>)
 800369a:	f993 3000 	ldrsb.w	r3, [r3]
 800369e:	b2d9      	uxtb	r1, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	f002 fd94 	bl	80061d0 <i2cSendByteToSlaveReg>

	if (period_ms != 0)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d066      	beq.n	800377c <TOF_start_continuous+0x18c>
	{
		// continuous timed mode

		uint8_t readBuffer[2];

		i2c_return = i2cBurstRegRead(
 80036ae:	4b3d      	ldr	r3, [pc, #244]	; (80037a4 <TOF_start_continuous+0x1b4>)
 80036b0:	6818      	ldr	r0, [r3, #0]
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <TOF_start_continuous+0x1b0>)
 80036b4:	f993 3000 	ldrsb.w	r3, [r3]
 80036b8:	b2d9      	uxtb	r1, r3
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	2202      	movs	r2, #2
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	22f8      	movs	r2, #248	; 0xf8
 80036c4:	f002 fe3e 	bl	8006344 <i2cBurstRegRead>
 80036c8:	4603      	mov	r3, r0
 80036ca:	74fb      	strb	r3, [r7, #19]
				TOF_i2c, TOF_address_used,
				TOF_REG_OSC_CALIBRATE_VAL,
				readBuffer, 2);
		if (i2c_return != I2C_OK)
 80036cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <TOF_start_continuous+0xe8>
		{
			// returns false, if i2c communication was not successful
			return false;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e05f      	b.n	8003798 <TOF_start_continuous+0x1a8>
		}

		uint16_t osc_calibrate_val = (readBuffer[0]<<8) + readBuffer[1];
 80036d8:	7b3b      	ldrb	r3, [r7, #12]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	021b      	lsls	r3, r3, #8
 80036de:	b29a      	uxth	r2, r3
 80036e0:	7b7b      	ldrb	r3, [r7, #13]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	823b      	strh	r3, [r7, #16]

		if (osc_calibrate_val != 0)
 80036e8:	8a3b      	ldrh	r3, [r7, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <TOF_start_continuous+0x108>
		{
			period_ms *= osc_calibrate_val;
 80036ee:	8a3a      	ldrh	r2, [r7, #16]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
		}

		uint8_t bytes[4];

		bytes[0] = (period_ms >> 24) & 0xFF;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0e1b      	lsrs	r3, r3, #24
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	723b      	strb	r3, [r7, #8]
		bytes[1] = (period_ms >> 16) & 0xFF;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	b2db      	uxtb	r3, r3
 8003706:	727b      	strb	r3, [r7, #9]
		bytes[2] = (period_ms >> 8) & 0xFF;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b2db      	uxtb	r3, r3
 800370e:	72bb      	strb	r3, [r7, #10]
		bytes[3] = period_ms & 0xFF;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	72fb      	strb	r3, [r7, #11]

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD, bytes[0]);
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <TOF_start_continuous+0x1b0>)
 800371c:	f993 3000 	ldrsb.w	r3, [r3]
 8003720:	b2d9      	uxtb	r1, r3
 8003722:	7a3b      	ldrb	r3, [r7, #8]
 8003724:	2204      	movs	r2, #4
 8003726:	f002 fd53 	bl	80061d0 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 1, bytes[1]);
 800372a:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <TOF_start_continuous+0x1b4>)
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	4b1c      	ldr	r3, [pc, #112]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003730:	f993 3000 	ldrsb.w	r3, [r3]
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	7a7b      	ldrb	r3, [r7, #9]
 8003738:	2205      	movs	r2, #5
 800373a:	f002 fd49 	bl	80061d0 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 2, bytes[2]);
 800373e:	4b19      	ldr	r3, [pc, #100]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003744:	f993 3000 	ldrsb.w	r3, [r3]
 8003748:	b2d9      	uxtb	r1, r3
 800374a:	7abb      	ldrb	r3, [r7, #10]
 800374c:	2206      	movs	r2, #6
 800374e:	f002 fd3f 	bl	80061d0 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 3, bytes[3]);
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003758:	f993 3000 	ldrsb.w	r3, [r3]
 800375c:	b2d9      	uxtb	r1, r3
 800375e:	7afb      	ldrb	r3, [r7, #11]
 8003760:	2207      	movs	r2, #7
 8003762:	f002 fd35 	bl	80061d0 <i2cSendByteToSlaveReg>

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <TOF_start_continuous+0x1b4>)
 8003768:	6818      	ldr	r0, [r3, #0]
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <TOF_start_continuous+0x1b0>)
 800376c:	f993 3000 	ldrsb.w	r3, [r3]
 8003770:	b2d9      	uxtb	r1, r3
 8003772:	2304      	movs	r3, #4
 8003774:	2200      	movs	r2, #0
 8003776:	f002 fd2b 	bl	80061d0 <i2cSendByteToSlaveReg>
 800377a:	e009      	b.n	8003790 <TOF_start_continuous+0x1a0>
	}
	else
	{
		// continuous back-to-back mode
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <TOF_start_continuous+0x1b4>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <TOF_start_continuous+0x1b0>)
 8003782:	f993 3000 	ldrsb.w	r3, [r3]
 8003786:	b2d9      	uxtb	r1, r3
 8003788:	2302      	movs	r3, #2
 800378a:	2200      	movs	r2, #0
 800378c:	f002 fd20 	bl	80061d0 <i2cSendByteToSlaveReg>
	}

	TOF_continuous_mode = true;
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <TOF_start_continuous+0x1bc>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]

	return true;
 8003796:	2301      	movs	r3, #1
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	2000000a 	.word	0x2000000a
 80037a4:	20000238 	.word	0x20000238
 80037a8:	2000023c 	.word	0x2000023c
 80037ac:	2000023d 	.word	0x2000023d

080037b0 <TOF_stop_continuous>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if continuous mode stops successfully, false otherwise.
 */
bool TOF_stop_continuous(TOFSensor_t* TOFSENS)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	889b      	ldrh	r3, [r3, #4]
 80037bc:	b25a      	sxtb	r2, r3
 80037be:	4b29      	ldr	r3, [pc, #164]	; (8003864 <TOF_stop_continuous+0xb4>)
 80037c0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a28      	ldr	r2, [pc, #160]	; (8003868 <TOF_stop_continuous+0xb8>)
 80037c8:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 80037ca:	4b28      	ldr	r3, [pc, #160]	; (800386c <TOF_stop_continuous+0xbc>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	f083 0301 	eor.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <TOF_stop_continuous+0x2c>
	{
		return false;
 80037d8:	2300      	movs	r3, #0
 80037da:	e03f      	b.n	800385c <TOF_stop_continuous+0xac>
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
 80037dc:	4b22      	ldr	r3, [pc, #136]	; (8003868 <TOF_stop_continuous+0xb8>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4b20      	ldr	r3, [pc, #128]	; (8003864 <TOF_stop_continuous+0xb4>)
 80037e2:	f993 3000 	ldrsb.w	r3, [r3]
 80037e6:	b2d9      	uxtb	r1, r3
 80037e8:	2301      	movs	r3, #1
 80037ea:	2200      	movs	r2, #0
 80037ec:	f002 fcf0 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <TOF_stop_continuous+0xb8>)
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <TOF_stop_continuous+0xb4>)
 80037f6:	f993 3000 	ldrsb.w	r3, [r3]
 80037fa:	b2d9      	uxtb	r1, r3
 80037fc:	2301      	movs	r3, #1
 80037fe:	22ff      	movs	r2, #255	; 0xff
 8003800:	f002 fce6 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8003804:	4b18      	ldr	r3, [pc, #96]	; (8003868 <TOF_stop_continuous+0xb8>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <TOF_stop_continuous+0xb4>)
 800380a:	f993 3000 	ldrsb.w	r3, [r3]
 800380e:	b2d9      	uxtb	r1, r3
 8003810:	2300      	movs	r3, #0
 8003812:	2200      	movs	r2, #0
 8003814:	f002 fcdc 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, 0x00);
 8003818:	4b13      	ldr	r3, [pc, #76]	; (8003868 <TOF_stop_continuous+0xb8>)
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <TOF_stop_continuous+0xb4>)
 800381e:	f993 3000 	ldrsb.w	r3, [r3]
 8003822:	b2d9      	uxtb	r1, r3
 8003824:	2300      	movs	r3, #0
 8003826:	2291      	movs	r2, #145	; 0x91
 8003828:	f002 fcd2 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <TOF_stop_continuous+0xb8>)
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <TOF_stop_continuous+0xb4>)
 8003832:	f993 3000 	ldrsb.w	r3, [r3]
 8003836:	b2d9      	uxtb	r1, r3
 8003838:	2301      	movs	r3, #1
 800383a:	2200      	movs	r2, #0
 800383c:	f002 fcc8 	bl	80061d0 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003840:	4b09      	ldr	r3, [pc, #36]	; (8003868 <TOF_stop_continuous+0xb8>)
 8003842:	6818      	ldr	r0, [r3, #0]
 8003844:	4b07      	ldr	r3, [pc, #28]	; (8003864 <TOF_stop_continuous+0xb4>)
 8003846:	f993 3000 	ldrsb.w	r3, [r3]
 800384a:	b2d9      	uxtb	r1, r3
 800384c:	2300      	movs	r3, #0
 800384e:	22ff      	movs	r2, #255	; 0xff
 8003850:	f002 fcbe 	bl	80061d0 <i2cSendByteToSlaveReg>

	TOF_continuous_mode = false;
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <TOF_stop_continuous+0xbc>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]

	return true;
 800385a:	2301      	movs	r3, #1
}
 800385c:	4618      	mov	r0, r3
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	2000000a 	.word	0x2000000a
 8003868:	20000238 	.word	0x20000238
 800386c:	2000023d 	.word	0x2000023d

08003870 <TOF_read_continuous_distance>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the distance is successfully read and updated, otherwise false.
 */
bool TOF_read_continuous_distance(TOFSensor_t* TOFSENS)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	889b      	ldrh	r3, [r3, #4]
 800387c:	b25a      	sxtb	r2, r3
 800387e:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <TOF_read_continuous_distance+0x54>)
 8003880:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a10      	ldr	r2, [pc, #64]	; (80038c8 <TOF_read_continuous_distance+0x58>)
 8003888:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <TOF_read_continuous_distance+0x5c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <TOF_read_continuous_distance+0x2c>
	{
		return false;
 8003898:	2300      	movs	r3, #0
 800389a:	e00e      	b.n	80038ba <TOF_read_continuous_distance+0x4a>
	}

	if(!TOF_getMeasurement(TOFSENS, &TOFSENS->distanceFromTOF))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3308      	adds	r3, #8
 80038a0:	4619      	mov	r1, r3
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fdfe 	bl	80034a4 <TOF_getMeasurement>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f083 0301 	eor.w	r3, r3, #1
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <TOF_read_continuous_distance+0x48>
	{
		return false;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <TOF_read_continuous_distance+0x4a>
	}

	return true;
 80038b8:	2301      	movs	r3, #1
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000000a 	.word	0x2000000a
 80038c8:	20000238 	.word	0x20000238
 80038cc:	2000023d 	.word	0x2000023d

080038d0 <TOF_set_ranging_profile>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the ranging profile was successfully set, otherwise false.
 */
bool TOF_set_ranging_profile(TOFSensor_t* TOFSENS)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	889b      	ldrh	r3, [r3, #4]
 80038dc:	b25a      	sxtb	r2, r3
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <TOF_set_ranging_profile+0xfc>)
 80038e0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3a      	ldr	r2, [pc, #232]	; (80039d0 <TOF_set_ranging_profile+0x100>)
 80038e8:	6013      	str	r3, [r2, #0]

	bool value = false;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
	bool prevalue = false;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73bb      	strb	r3, [r7, #14]
    switch (TOFSENS->Ranging_Profiles_t) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	88db      	ldrh	r3, [r3, #6]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d860      	bhi.n	80039be <TOF_set_ranging_profile+0xee>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <TOF_set_ranging_profile+0x34>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003915 	.word	0x08003915
 8003908:	08003945 	.word	0x08003945
 800390c:	08003973 	.word	0x08003973
 8003910:	0800399f 	.word	0x0800399f
    case TOF_DEFAULT_MODE_D:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 30000) == true)
 8003914:	f247 5130 	movw	r1, #30000	; 0x7530
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f95f 	bl	8003bdc <TOF_set_measurement_timing_budget>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d008      	beq.n	8003936 <TOF_set_ranging_profile+0x66>
    	{
    		TOFSENS->Ranging_Profiles_t = TOF_DEFAULT_MODE_D;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	80da      	strh	r2, [r3, #6]
    		TOFSENS->Ranging_Profile_time = 30;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	221e      	movs	r2, #30
 800392e:	615a      	str	r2, [r3, #20]
    		value = true;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
    		break;
 8003934:	e045      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
    	}
    	else
    	{
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2205      	movs	r2, #5
 800393a:	80da      	strh	r2, [r3, #6]
        	value = TOF_RANGINGPROFILE_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
    		return false;
 8003940:	2300      	movs	r3, #0
 8003942:	e03f      	b.n	80039c4 <TOF_set_ranging_profile+0xf4>
    		break;
    	}

    case TOF_HIGH_SPEED_MODE_S:
        if(TOF_set_measurement_timing_budget(TOFSENS, 20000) == true)
 8003944:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f947 	bl	8003bdc <TOF_set_measurement_timing_budget>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <TOF_set_ranging_profile+0x96>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_SPEED_MODE_S;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 20;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2214      	movs	r2, #20
 800395e:	615a      	str	r2, [r3, #20]
        	value = true;
 8003960:	2301      	movs	r3, #1
 8003962:	73fb      	strb	r3, [r7, #15]
        	break;
 8003964:	e02d      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2205      	movs	r2, #5
 800396e:	80da      	strh	r2, [r3, #6]

        	break;
 8003970:	e027      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
        }

    case TOF_HIGH_ACCURACY_MODE_A:
        if(TOF_set_measurement_timing_budget(TOFSENS, 200) == true)
 8003972:	21c8      	movs	r1, #200	; 0xc8
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f931 	bl	8003bdc <TOF_set_measurement_timing_budget>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <TOF_set_ranging_profile+0xc2>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_ACCURACY_MODE_A;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2203      	movs	r2, #3
 8003984:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 200000;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <TOF_set_ranging_profile+0x104>)
 800398a:	615a      	str	r2, [r3, #20]
        	value = true;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
        	break;
 8003990:	e017      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2205      	movs	r2, #5
 800399a:	80da      	strh	r2, [r3, #6]
        	break;
 800399c:	e011      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
        }

    case TOF_LONG_RANGE_MODE_R:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 33) == true)
 800399e:	2121      	movs	r1, #33	; 0x21
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f91b 	bl	8003bdc <TOF_set_measurement_timing_budget>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <TOF_set_ranging_profile+0xe2>
    	        {
    	        	value = true;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
    	        	break;
 80039b0:	e007      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
    	        }
    	        else
    	        {
    	        	value = TOF_RANGINGPROFILE_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
    	        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2205      	movs	r2, #5
 80039ba:	80da      	strh	r2, [r3, #6]
    	        	break;
 80039bc:	e001      	b.n	80039c2 <TOF_set_ranging_profile+0xf2>
    		break;
    	}

    default:
        // Handle an invalid profile case
        return value;
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	e000      	b.n	80039c4 <TOF_set_ranging_profile+0xf4>
    }

    return value;
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	2000000a 	.word	0x2000000a
 80039d0:	20000238 	.word	0x20000238
 80039d4:	00030d40 	.word	0x00030d40

080039d8 <TOF_get_sequence_step_enables>:
 *               - The SYSTEM_SEQUENCE_CONFIG register stores the configuration of the sequence steps used by the sensor.
 *               - Each bit in the byte represents an individual sequence step: TCC, DSS, MSRC, PRE_RANGE, FINAL_RANGE.
 *               - The SequenceStepEnables structure is populated with the status of each sequence step based on these bits.
 */
bool TOF_get_sequence_step_enables(TOFSensor_t* TOFSENS, SequenceStepEnables *enables)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	889b      	ldrh	r3, [r3, #4]
 80039e6:	b25a      	sxtb	r2, r3
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <TOF_get_sequence_step_enables+0x98>)
 80039ea:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a20      	ldr	r2, [pc, #128]	; (8003a74 <TOF_get_sequence_step_enables+0x9c>)
 80039f2:	6013      	str	r3, [r2, #0]

    I2C_RETURN_CODE_t i2c_return;
    uint8_t sequence_config;

    // Read the byte from the TOF_REG_SYSTEM_SEQUENCE_CONFIG register
    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <TOF_get_sequence_step_enables+0x9c>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	4b1d      	ldr	r3, [pc, #116]	; (8003a70 <TOF_get_sequence_step_enables+0x98>)
 80039fa:	f993 3000 	ldrsb.w	r3, [r3]
 80039fe:	b2d9      	uxtb	r1, r3
 8003a00:	f107 030e 	add.w	r3, r7, #14
 8003a04:	2201      	movs	r2, #1
 8003a06:	f002 fc31 	bl	800626c <i2cReadByteFromSlaveReg>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]

    // Check if the I2C read was successful
    if (i2c_return != I2C_OK)
 8003a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <TOF_get_sequence_step_enables+0x42>
    {
        return false;  // Return false if there was an error
 8003a16:	2300      	movs	r3, #0
 8003a18:	e025      	b.n	8003a66 <TOF_get_sequence_step_enables+0x8e>
    }

    // Extract bit values using shifts and masks
    enables->tcc         = (sequence_config >> 4) & 0x1;  // Extract the TCC bit
 8003a1a:	7bbb      	ldrb	r3, [r7, #14]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	701a      	strb	r2, [r3, #0]
    enables->dss         = (sequence_config >> 3) & 0x1;  // Extract the DSS bit
 8003a2a:	7bbb      	ldrb	r3, [r7, #14]
 8003a2c:	08db      	lsrs	r3, r3, #3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	b2da      	uxtb	r2, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	705a      	strb	r2, [r3, #1]
    enables->msrc        = (sequence_config >> 2) & 0x1;  // Extract the MSRC bit
 8003a3a:	7bbb      	ldrb	r3, [r7, #14]
 8003a3c:	089b      	lsrs	r3, r3, #2
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	709a      	strb	r2, [r3, #2]
    enables->pre_range   = (sequence_config >> 6) & 0x1;  // Extract the PRE_RANGE bit
 8003a4a:	7bbb      	ldrb	r3, [r7, #14]
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	70da      	strb	r2, [r3, #3]
    enables->final_range = (sequence_config >> 7) & 0x1;  // Extract the FINAL_RANGE bit
 8003a5a:	7bbb      	ldrb	r3, [r7, #14]
 8003a5c:	09db      	lsrs	r3, r3, #7
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	711a      	strb	r2, [r3, #4]

    return true;  // Return true if everything succeeded
 8003a64:	2301      	movs	r3, #1
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	2000000a 	.word	0x2000000a
 8003a74:	20000238 	.word	0x20000238

08003a78 <TOF_get_sequence_step_timeouts>:
 * @notes:
 *               - The calculated timeouts are in microseconds and are stored in the `timeouts` structure.
 *               - The VCSEL period for both pre-range and final-range steps is used to calculate the corresponding timeouts.
 */
bool TOF_get_sequence_step_timeouts(TOFSensor_t* TOFSENS, SequenceStepEnables *enables, SequenceStepTimeouts *timeouts)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	889b      	ldrh	r3, [r3, #4]
 8003a88:	b25a      	sxtb	r2, r3
 8003a8a:	4b52      	ldr	r3, [pc, #328]	; (8003bd4 <TOF_get_sequence_step_timeouts+0x15c>)
 8003a8c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a51      	ldr	r2, [pc, #324]	; (8003bd8 <TOF_get_sequence_step_timeouts+0x160>)
 8003a94:	6013      	str	r3, [r2, #0]

	uint8_t data;
	I2C_RETURN_CODE_t i2c_return;

    timeouts->pre_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodPreRange);
 8003a96:	2100      	movs	r1, #0
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f943 	bl	8003d24 <TOF_get_vcsel_pulse_period>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	701a      	strb	r2, [r3, #0]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, &data);
 8003aa6:	4b4c      	ldr	r3, [pc, #304]	; (8003bd8 <TOF_get_sequence_step_timeouts+0x160>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <TOF_get_sequence_step_timeouts+0x15c>)
 8003aac:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	f107 0316 	add.w	r3, r7, #22
 8003ab6:	2246      	movs	r2, #70	; 0x46
 8003ab8:	f002 fbd8 	bl	800626c <i2cReadByteFromSlaveReg>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]
    timeouts->msrc_dss_tcc_mclks = data;
 8003ac0:	7dbb      	ldrb	r3, [r7, #22]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	805a      	strh	r2, [r3, #2]

	if (i2c_return != I2C_OK)
 8003ac8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <TOF_get_sequence_step_timeouts+0x5c>
	{
		return false;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e07b      	b.n	8003bcc <TOF_get_sequence_step_timeouts+0x154>
	}
    timeouts->msrc_dss_tcc_mclks += 1;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	885b      	ldrh	r3, [r3, #2]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	805a      	strh	r2, [r3, #2]
    timeouts->msrc_dss_tcc_us = timeout_mclks_to_microseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	885a      	ldrh	r2, [r3, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f000 f9b4 	bl	8003e58 <timeout_mclks_to_microseconds>
 8003af0:	4602      	mov	r2, r0
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8003af6:	4b38      	ldr	r3, [pc, #224]	; (8003bd8 <TOF_get_sequence_step_timeouts+0x160>)
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <TOF_get_sequence_step_timeouts+0x15c>)
 8003afc:	f993 3000 	ldrsb.w	r3, [r3]
 8003b00:	b2d9      	uxtb	r1, r3
 8003b02:	f107 0316 	add.w	r3, r7, #22
 8003b06:	2251      	movs	r2, #81	; 0x51
 8003b08:	f002 fbb0 	bl	800626c <i2cReadByteFromSlaveReg>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8003b10:	7dbb      	ldrb	r3, [r7, #22]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8003b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <TOF_get_sequence_step_timeouts+0xac>
    	{
    		return false;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e053      	b.n	8003bcc <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->pre_range_mclks = decode_timeout(timeouts->pre_range_mclks);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	891b      	ldrh	r3, [r3, #8]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 f97b 	bl	8003e24 <decode_timeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	461a      	mov	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	811a      	strh	r2, [r3, #8]
    timeouts->pre_range_us = timeout_mclks_to_microseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	891a      	ldrh	r2, [r3, #8]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4610      	mov	r0, r2
 8003b42:	f000 f989 	bl	8003e58 <timeout_mclks_to_microseconds>
 8003b46:	4602      	mov	r2, r0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]

    timeouts->final_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodFinalRange);
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f8e8 	bl	8003d24 <TOF_get_vcsel_pulse_period>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	741a      	strb	r2, [r3, #16]


    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8003b5c:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <TOF_get_sequence_step_timeouts+0x160>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	4b1c      	ldr	r3, [pc, #112]	; (8003bd4 <TOF_get_sequence_step_timeouts+0x15c>)
 8003b62:	f993 3000 	ldrsb.w	r3, [r3]
 8003b66:	b2d9      	uxtb	r1, r3
 8003b68:	f107 0316 	add.w	r3, r7, #22
 8003b6c:	2271      	movs	r2, #113	; 0x71
 8003b6e:	f002 fb7d 	bl	800626c <i2cReadByteFromSlaveReg>
 8003b72:	4603      	mov	r3, r0
 8003b74:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8003b76:	7dbb      	ldrb	r3, [r7, #22]
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8003b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <TOF_get_sequence_step_timeouts+0x112>
    	{
    		return false;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e020      	b.n	8003bcc <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->final_range_mclks = decode_timeout(timeouts->final_range_mclks);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	8a5b      	ldrh	r3, [r3, #18]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f948 	bl	8003e24 <decode_timeout>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	825a      	strh	r2, [r3, #18]

    if (enables->pre_range)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	78db      	ldrb	r3, [r3, #3]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <TOF_get_sequence_step_timeouts+0x13c>
    {
        timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	8a5a      	ldrh	r2, [r3, #18]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	891b      	ldrh	r3, [r3, #8]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	825a      	strh	r2, [r3, #18]
    }

    timeouts->final_range_us = timeout_mclks_to_microseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8a5a      	ldrh	r2, [r3, #18]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7c1b      	ldrb	r3, [r3, #16]
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	f000 f94a 	bl	8003e58 <timeout_mclks_to_microseconds>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	615a      	str	r2, [r3, #20]

    return true;
 8003bca:	2301      	movs	r3, #1
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	2000000a 	.word	0x2000000a
 8003bd8:	20000238 	.word	0x20000238

08003bdc <TOF_set_measurement_timing_budget>:
 *               uint32_t budget_us							Desired timing budget in microseconds (µs).
 *
 * @returns:     bool: true if the timing budget was successfully set, otherwise false.
 */
bool TOF_set_measurement_timing_budget(TOFSensor_t* TOFSENS, uint32_t budget_us)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b092      	sub	sp, #72	; 0x48
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	889b      	ldrh	r3, [r3, #4]
 8003bea:	b25a      	sxtb	r2, r3
 8003bec:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <TOF_set_measurement_timing_budget+0x140>)
 8003bee:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a4a      	ldr	r2, [pc, #296]	; (8003d20 <TOF_set_measurement_timing_budget+0x144>)
 8003bf6:	6013      	str	r3, [r2, #0]
	I2C_RETURN_CODE_t i2c_return;

    SequenceStepEnables enables;
    SequenceStepTimeouts timeouts;

    uint16_t StartOverhead     = 1910;
 8003bf8:	f240 7376 	movw	r3, #1910	; 0x776
 8003bfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint16_t EndOverhead       = 960;
 8003bfe:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003c02:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t MsrcOverhead      = 660;
 8003c04:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003c08:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t TccOverhead       = 590;
 8003c0a:	f240 234e 	movw	r3, #590	; 0x24e
 8003c0e:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t DssOverhead       = 690;
 8003c10:	f240 23b2 	movw	r3, #690	; 0x2b2
 8003c14:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t PreRangeOverhead  = 660;
 8003c16:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003c1a:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t FinalRangeOverhead = 550;
 8003c1c:	f240 2326 	movw	r3, #550	; 0x226
 8003c20:	867b      	strh	r3, [r7, #50]	; 0x32

    uint32_t used_budget_us = StartOverhead + EndOverhead;
 8003c22:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003c24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003c26:	4413      	add	r3, r2
 8003c28:	647b      	str	r3, [r7, #68]	; 0x44

    // Get sequence step enables and timeouts
    TOF_get_sequence_step_enables(TOFSENS, &enables);
 8003c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fed1 	bl	80039d8 <TOF_get_sequence_step_enables>
    TOF_get_sequence_step_timeouts(TOFSENS, &enables, &timeouts);
 8003c36:	f107 020c 	add.w	r2, r7, #12
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	4619      	mov	r1, r3
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff19 	bl	8003a78 <TOF_get_sequence_step_timeouts>

    if (enables.tcc)
 8003c46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d005      	beq.n	8003c5a <TOF_set_measurement_timing_budget+0x7e>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003c52:	4413      	add	r3, r2
 8003c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c56:	4413      	add	r3, r2
 8003c58:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.dss)
 8003c5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <TOF_set_measurement_timing_budget+0x96>
    {
        used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c66:	4413      	add	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c6c:	4413      	add	r3, r2
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c70:	e009      	b.n	8003c86 <TOF_set_measurement_timing_budget+0xaa>
    }
    else if (enables.msrc)
 8003c72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <TOF_set_measurement_timing_budget+0xaa>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c7e:	4413      	add	r3, r2
 8003c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c82:	4413      	add	r3, r2
 8003c84:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.pre_range)
 8003c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <TOF_set_measurement_timing_budget+0xbe>
    {
        used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c92:	4413      	add	r3, r2
 8003c94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c96:	4413      	add	r3, r2
 8003c98:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.final_range)
 8003c9a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d037      	beq.n	8003d12 <TOF_set_measurement_timing_budget+0x136>
    {
        used_budget_us += FinalRangeOverhead;
 8003ca2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003ca4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ca6:	4413      	add	r3, r2
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44

        if (used_budget_us > budget_us)
 8003caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d901      	bls.n	8003cb6 <TOF_set_measurement_timing_budget+0xda>
        {
            // Requested timeout too big
            return false;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	e02e      	b.n	8003d14 <TOF_set_measurement_timing_budget+0x138>
        }

        uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Convert the final range timeout to MCLks
        uint32_t final_range_timeout_mclks =
        timeout_microseconds_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8003cbe:	7f3b      	ldrb	r3, [r7, #28]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cc4:	f000 f8f0 	bl	8003ea8 <timeout_microseconds_to_mclks>
 8003cc8:	6438      	str	r0, [r7, #64]	; 0x40

        if (enables.pre_range)
 8003cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d004      	beq.n	8003cdc <TOF_set_measurement_timing_budget+0x100>
        {
            final_range_timeout_mclks += timeouts.pre_range_mclks;
 8003cd2:	8abb      	ldrh	r3, [r7, #20]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	4413      	add	r3, r2
 8003cda:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Write the final range timeout to the register

        final_range_timeout_mclks = encode_timeOut(final_range_timeout_mclks);
 8003cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f873 	bl	8003dcc <encode_timeOut>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
        i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, final_range_timeout_mclks);
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <TOF_set_measurement_timing_budget+0x144>)
 8003cec:	6818      	ldr	r0, [r3, #0]
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <TOF_set_measurement_timing_budget+0x140>)
 8003cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8003cf4:	b2d9      	uxtb	r1, r3
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2271      	movs	r2, #113	; 0x71
 8003cfc:	f002 fa68 	bl	80061d0 <i2cSendByteToSlaveReg>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (i2c_return != I2C_OK){
 8003d06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <TOF_set_measurement_timing_budget+0x136>
            		return false;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	e000      	b.n	8003d14 <TOF_set_measurement_timing_budget+0x138>
            	}
        // Store the timing budget for internal reuse
        //uint32_t measurement_timing_budget_us = budget_us;
    }

    return true;
 8003d12:	2301      	movs	r3, #1
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3748      	adds	r7, #72	; 0x48
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	2000000a 	.word	0x2000000a
 8003d20:	20000238 	.word	0x20000238

08003d24 <TOF_get_vcsel_pulse_period>:
 *               - This function reads the sensor register corresponding to the VCSEL period for either the pre-range or final-range mode.
 *               - The raw register values are decoded before returning.
 *               - A return value of 255 indicates an error during the process (either reading the register or decoding the value).
 */
uint8_t TOF_get_vcsel_pulse_period(TOFSensor_t* TOFSENS, vcselPeriodType type)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	889b      	ldrh	r3, [r3, #4]
 8003d34:	b25a      	sxtb	r2, r3
 8003d36:	4b23      	ldr	r3, [pc, #140]	; (8003dc4 <TOF_get_vcsel_pulse_period+0xa0>)
 8003d38:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <TOF_get_vcsel_pulse_period+0xa4>)
 8003d40:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

    uint8_t vcsel_period = 255;  // Default to 255 (error case)
 8003d42:	23ff      	movs	r3, #255	; 0xff
 8003d44:	73bb      	strb	r3, [r7, #14]

    if (type == VcselPeriodPreRange)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d119      	bne.n	8003d80 <TOF_get_vcsel_pulse_period+0x5c>
    {
        // Read the pre-range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <TOF_get_vcsel_pulse_period+0xa4>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <TOF_get_vcsel_pulse_period+0xa0>)
 8003d52:	f993 3000 	ldrsb.w	r3, [r3]
 8003d56:	b2d9      	uxtb	r1, r3
 8003d58:	f107 030e 	add.w	r3, r7, #14
 8003d5c:	2250      	movs	r2, #80	; 0x50
 8003d5e:	f002 fa85 	bl	800626c <i2cReadByteFromSlaveReg>
 8003d62:	4603      	mov	r3, r0
 8003d64:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8003d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <TOF_get_vcsel_pulse_period+0x4e>
    		return false;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e023      	b.n	8003dba <TOF_get_vcsel_pulse_period+0x96>
    	}
        vcsel_period = decodeVcselPeriod(vcsel_period);
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	3301      	adds	r3, #1
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	73bb      	strb	r3, [r7, #14]
 8003d7e:	e01b      	b.n	8003db8 <TOF_get_vcsel_pulse_period+0x94>
    }
    else if (type == VcselPeriodFinalRange)
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d118      	bne.n	8003db8 <TOF_get_vcsel_pulse_period+0x94>
    {
        // Read the final range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <TOF_get_vcsel_pulse_period+0xa4>)
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <TOF_get_vcsel_pulse_period+0xa0>)
 8003d8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d90:	b2d9      	uxtb	r1, r3
 8003d92:	f107 030e 	add.w	r3, r7, #14
 8003d96:	2270      	movs	r2, #112	; 0x70
 8003d98:	f002 fa68 	bl	800626c <i2cReadByteFromSlaveReg>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8003da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <TOF_get_vcsel_pulse_period+0x88>
    		return false;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e006      	b.n	8003dba <TOF_get_vcsel_pulse_period+0x96>
    	}
    	vcsel_period = decodeVcselPeriod(vcsel_period);
 8003dac:	7bbb      	ldrb	r3, [r7, #14]
 8003dae:	3301      	adds	r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	73bb      	strb	r3, [r7, #14]
    }

    return vcsel_period;
 8003db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	2000000a 	.word	0x2000000a
 8003dc8:	20000238 	.word	0x20000238

08003dcc <encode_timeOut>:
 *               - This function is crucial for converting a timeout value in macro clocks (MCLKs) into the format that can be used by the TOF sensor.
 *               - The encoded value is a 16-bit value where the higher byte represents the number of shifts, and the lower byte holds the adjusted value.
 *               - The input timeout value should be greater than zero, as the function is designed to handle positive timeouts.
 */
uint16_t encode_timeOut(uint16_t final_range_timeout_mclks)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	80fb      	strh	r3, [r7, #6]
	uint32_t ls_byte = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	817b      	strh	r3, [r7, #10]

	if (final_range_timeout_mclks > 0){
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d018      	beq.n	8003e16 <encode_timeOut+0x4a>
	ls_byte = final_range_timeout_mclks - 1;
 8003de4:	88fb      	ldrh	r3, [r7, #6]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0){
 8003dea:	e005      	b.n	8003df8 <encode_timeOut+0x2c>
	      ls_byte >>= 1;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	085b      	lsrs	r3, r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	3301      	adds	r3, #1
 8003df6:	817b      	strh	r3, [r7, #10]
		while ((ls_byte & 0xFFFFFF00) > 0){
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f4      	bne.n	8003dec <encode_timeOut+0x20>
	    }

	    return (ms_byte << 8) | (ls_byte & 0xFF);
 8003e02:	897b      	ldrh	r3, [r7, #10]
 8003e04:	021b      	lsls	r3, r3, #8
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	e000      	b.n	8003e18 <encode_timeOut+0x4c>
	  }
	  else { return 0; }
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <decode_timeout>:
 *               - This function is used to decode the timeout value from the format used by the TOF sensor's registers.
 *               - The formula used to calculate the timeout ensures that the timeout is a value greater than or equal to 1.
 *               - The decoded timeout can be used in further sensor configurations or calculations.
 */
uint16_t decode_timeout(uint16_t reg_val)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	80fb      	strh	r3, [r7, #6]
    // Formula: (LSByte * 2^MSByte) + 1
    // reg_val is a 16-bit value; the MSByte (Most Significant Byte) is the upper 8 bits
    // and the LSByte (Least Significant Byte) is the lower 8 bits.

    uint8_t msb = (reg_val >> 8) & 0xFF;  // Extract the most significant byte
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = reg_val & 0xFF;         // Extract the least significant byte
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	73bb      	strb	r3, [r7, #14]

    // Calculate the timeout as per the formula
    uint16_t timeout = (lsb << msb) + 1;
 8003e3a:	7bba      	ldrb	r2, [r7, #14]
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	81bb      	strh	r3, [r7, #12]

    return timeout;
 8003e48:	89bb      	ldrh	r3, [r7, #12]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <timeout_mclks_to_microseconds>:
 * @notes:
 *               - This function is used to convert the sensor's timeout period (expressed in MCLKs) into a more human-readable form (microseconds).
 *               - The calculation ensures the proper timing conversion based on the VCSEL period, which varies depending on the sensor configuration.
 */
uint32_t timeout_mclks_to_microseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460a      	mov	r2, r1
 8003e62:	80fb      	strh	r3, [r7, #6]
 8003e64:	4613      	mov	r3, r2
 8003e66:	717b      	strb	r3, [r7, #5]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003e68:	797b      	ldrb	r3, [r7, #5]
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	; (8003ea0 <timeout_mclks_to_microseconds+0x48>)
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003e74:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <timeout_mclks_to_microseconds+0x4c>)
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	60fb      	str	r3, [r7, #12]

    // Convert the timeout period in MCLKs to microseconds

    return (uint32_t)((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003e8a:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <timeout_mclks_to_microseconds+0x4c>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	099b      	lsrs	r3, r3, #6
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	003a2f00 	.word	0x003a2f00
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <timeout_microseconds_to_mclks>:
 * @notes:
 *               - This function is used to convert a timeout period from microseconds into the raw timing unit (MCLKs), which is suitable for sensor register configurations.
 *               - The conversion takes into account the VCSEL period (in PCLKs) to properly adjust for different sensor configurations.
 */
uint32_t timeout_microseconds_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	70fb      	strb	r3, [r7, #3]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	4a0e      	ldr	r2, [pc, #56]	; (8003ef0 <timeout_microseconds_to_mclks+0x48>)
 8003eb8:	fb02 f303 	mul.w	r3, r2, r3
 8003ebc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003ec0:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <timeout_microseconds_to_mclks+0x4c>)
 8003ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	60fb      	str	r3, [r7, #12]

    // Convert timeout from microseconds to MCLKs
    // The formula uses rounding by adding (macro_period_ns / 2) before dividing
    uint32_t return_value = (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ed0:	fb03 f202 	mul.w	r2, r3, r2
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	60bb      	str	r3, [r7, #8]
    return return_value;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	003a2f00 	.word	0x003a2f00
 8003ef4:	10624dd3 	.word	0x10624dd3

08003ef8 <main>:
 * @function:	 main
 *
 * @brief: 		 executable function, timing control and trigger
 */
int main(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b098      	sub	sp, #96	; 0x60
 8003efc:	af02      	add	r7, sp, #8

	enableTOFSensor = true;
 8003efe:	4b9a      	ldr	r3, [pc, #616]	; (8004168 <main+0x270>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
	TOF_sensor_used = 0x29;
 8003f04:	4b99      	ldr	r3, [pc, #612]	; (800416c <main+0x274>)
 8003f06:	2229      	movs	r2, #41	; 0x29
 8003f08:	701a      	strb	r2, [r3, #0]

	// variables to store rotation and push button
	int32_t position = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t oldPosition = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	657b      	str	r3, [r7, #84]	; 0x54
	bool buttonPushed = false;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// variables to store the distance
	uint16_t TOF_DISTANCE_1 = 10;
 8003f18:	230a      	movs	r3, #10
 8003f1a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	//uint16_t olddistance = TOF_VL53L0X_OUT_OF_RANGE;


	// timer variables
	uint32_t TimerExec = 0UL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t TimerVisu = 0UL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t TimerLED = 0UL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	63bb      	str	r3, [r7, #56]	; 0x38

	// Array with all timer variables and calculation of size
	uint32_t *timerList[] = { &TimerExec, &TimerVisu, &TimerLED};
 8003f2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
	size_t arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	64bb      	str	r3, [r7, #72]	; 0x48

	// init project
	initBala();
 8003f40:	f000 f990 	bl	8004264 <initBala>

	// TOF-Instanz deklarieren
	TOFSensor_t TOF_Sensor_1;

	// Initialisieren des TOF-Sensors
	initializeTOFSensor(&TOF_Sensor_1, I2C1, TOF_ADDR_VL53LOX, TOF_DEFAULT_MODE_D, TOF_DISTANCE_1);
 8003f44:	1d38      	adds	r0, r7, #4
 8003f46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	2229      	movs	r2, #41	; 0x29
 8003f50:	4987      	ldr	r1, [pc, #540]	; (8004170 <main+0x278>)
 8003f52:	f7fe f8e1 	bl	8002118 <initializeTOFSensor>

	// Konfigurieren und Aktivieren des Sensors
	configureTOFSensor(&TOF_Sensor_1, TOF_DEFAULT_MODE_D, true);
 8003f56:	1d3b      	adds	r3, r7, #4
 8003f58:	2201      	movs	r2, #1
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe f8fe 	bl	800215e <configureTOFSensor>
	//TOF_set_ranging_profile(&TOF_Sensor_1);


	while (1)
	{
		if (true == timerTrigger)
 8003f62:	4b84      	ldr	r3, [pc, #528]	; (8004174 <main+0x27c>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d007      	beq.n	8003f7a <main+0x82>
		{
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8003f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f72:	4611      	mov	r1, r2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f002 ff01 	bl	8006d7c <systickUpdateTimerList>
		}

		// if timer execute is expired
		if (isSystickExpired(TimerExec))
 8003f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f002 fec7 	bl	8006d10 <isSystickExpired>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 812a 	beq.w	80041de <main+0x2e6>
		{
			position = getRotaryPosition();
 8003f8a:	f7fd f9a1 	bl	80012d0 <getRotaryPosition>
 8003f8e:	6538      	str	r0, [r7, #80]	; 0x50
			buttonPushed = getRotaryPushButton();
 8003f90:	f7fd f97c 	bl	800128c <getRotaryPushButton>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	2301      	movne	r3, #1
 8003f9c:	2300      	moveq	r3, #0
 8003f9e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			// switch case for different screen pages
			switch(page)
 8003fa2:	4b75      	ldr	r3, [pc, #468]	; (8004178 <main+0x280>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	f200 80f5 	bhi.w	8004196 <main+0x29e>
 8003fac:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <main+0xbc>)
 8003fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb2:	bf00      	nop
 8003fb4:	08003fc9 	.word	0x08003fc9
 8003fb8:	0800406d 	.word	0x0800406d
 8003fbc:	0800409d 	.word	0x0800409d
 8003fc0:	080040bd 	.word	0x080040bd
 8003fc4:	08004151 	.word	0x08004151
			{
			case SCREEN_MAIN:
				if(buttonPushed)
 8003fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03a      	beq.n	8004046 <main+0x14e>
					{
					page = (uint16_t)position % 4 + 1;
 8003fd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	4b66      	ldr	r3, [pc, #408]	; (8004178 <main+0x280>)
 8003fe0:	701a      	strb	r2, [r3, #0]

					// check if it is tried to go to the page of an not initialized sensor
					if(page == 2 && initedTOF == false)
 8003fe2:	4b65      	ldr	r3, [pc, #404]	; (8004178 <main+0x280>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d10c      	bne.n	8004004 <main+0x10c>
 8003fea:	4b64      	ldr	r3, [pc, #400]	; (800417c <main+0x284>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f083 0301 	eor.w	r3, r3, #1
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <main+0x10c>
					{
						page = 0;
 8003ff8:	4b5f      	ldr	r3, [pc, #380]	; (8004178 <main+0x280>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8003ffe:	2001      	movs	r0, #1
 8004000:	f001 f816 	bl	8005030 <visualisationShowError>
					}

					if(page == 3 && initedTOF == false)
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <main+0x280>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b03      	cmp	r3, #3
 800400a:	d10c      	bne.n	8004026 <main+0x12e>
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <main+0x284>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	f083 0301 	eor.w	r3, r3, #1
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <main+0x12e>
					{
						page = 0;
 800401a:	4b57      	ldr	r3, [pc, #348]	; (8004178 <main+0x280>)
 800401c:	2200      	movs	r2, #0
 800401e:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8004020:	2001      	movs	r0, #1
 8004022:	f001 f805 	bl	8005030 <visualisationShowError>
					}


					// change menu page
					visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 8004026:	4b54      	ldr	r3, [pc, #336]	; (8004178 <main+0x280>)
 8004028:	7818      	ldrb	r0, [r3, #0]
 800402a:	4b54      	ldr	r3, [pc, #336]	; (800417c <main+0x284>)
 800402c:	7819      	ldrb	r1, [r3, #0]
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <main+0x288>)
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	f000 fe84 	bl	8004d40 <visualisationMenu>
					initSubMenu(page, &TOF_Sensor_1);
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <main+0x280>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	1d3a      	adds	r2, r7, #4
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f000 f925 	bl	8004290 <initSubMenu>
					}

				if(oldPosition != position)
 8004046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	429a      	cmp	r2, r3
 800404c:	f000 8088 	beq.w	8004160 <main+0x268>
				{
					oldPosition = position;
 8004050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004052:	657b      	str	r3, [r7, #84]	; 0x54

					visualisationMenuGridFocus((uint16_t)position % 4, tft_WHITE, tft_YELLOW);
 8004054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004060:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004064:	4618      	mov	r0, r3
 8004066:	f000 fca1 	bl	80049ac <visualisationMenuGridFocus>
				}
				break;
 800406a:	e079      	b.n	8004160 <main+0x268>

			// init I2C page
			case SCREEN_PAGE1:
				if(buttonPushed)
 800406c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <main+0x182>
				{
					exitMenu = EXIT_FROMSUB1;
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <main+0x28c>)
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
				}
				switch(i2cInitPort)
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <main+0x290>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d002      	beq.n	8004088 <main+0x190>
 8004082:	2b02      	cmp	r3, #2
 8004084:	d008      	beq.n	8004098 <main+0x1a0>
				case I2C_2:
					//i2cScanAndInit(i2c2);
					break;
				}

				break;
 8004086:	e086      	b.n	8004196 <main+0x29e>
					i2cScanAndInit(&TOF_Sensor_1, i2c);
 8004088:	4b40      	ldr	r3, [pc, #256]	; (800418c <main+0x294>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	1d3b      	adds	r3, r7, #4
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f93b 	bl	800430c <i2cScanAndInit>
					break;
 8004096:	e000      	b.n	800409a <main+0x1a2>
					break;
 8004098:	bf00      	nop
				break;
 800409a:	e07c      	b.n	8004196 <main+0x29e>

			// TOF page
			case SCREEN_PAGE2:
				if(buttonPushed)
 800409c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d006      	beq.n	80040b2 <main+0x1ba>
				{
					TOF_stop_continuous(&TOF_Sensor_1);
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fb82 	bl	80037b0 <TOF_stop_continuous>
					exitMenu = EXIT_FROMSUB2;
 80040ac:	4b35      	ldr	r3, [pc, #212]	; (8004184 <main+0x28c>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
				}
				TOF_read_continuous_distance(&TOF_Sensor_1);
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fbdb 	bl	8003870 <TOF_read_continuous_distance>
				break;
 80040ba:	e06c      	b.n	8004196 <main+0x29e>

			// Ranging Mode Page page
			case SCREEN_PAGE3:
				position = getRotaryPosition();
 80040bc:	f7fd f908 	bl	80012d0 <getRotaryPosition>
 80040c0:	6538      	str	r0, [r7, #80]	; 0x50
				uint16_t MODE = (uint16_t)position % 4 + 1;
 80040c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	3301      	adds	r3, #1
 80040ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				visualisationRangingProfileTOF(MODE);
 80040d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f848 	bl	800516c <visualisationRangingProfileTOF>

				if(buttonPushed)
 80040dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03f      	beq.n	8004164 <main+0x26c>
				{
					configureTOFSensor(&TOF_Sensor_1, MODE, true);
 80040e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80040e8:	1d3b      	adds	r3, r7, #4
 80040ea:	2201      	movs	r2, #1
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fe f836 	bl	800215e <configureTOFSensor>
					//TOF_set_ranging_profile(&TOF_Sensor_1);

					switch(MODE){		//change timerexecution time to recommended +3ms to make shure works
 80040f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80040f6:	3b01      	subs	r3, #1
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d81b      	bhi.n	8004134 <main+0x23c>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <main+0x20c>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411d 	.word	0x0800411d
 800410c:	08004125 	.word	0x08004125
 8004110:	0800412d 	.word	0x0800412d
					case 1:
						timeTimerExec = 30;
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <main+0x298>)
 8004116:	221e      	movs	r2, #30
 8004118:	801a      	strh	r2, [r3, #0]
						break;
 800411a:	e00f      	b.n	800413c <main+0x244>
					case 2:
						timeTimerExec = 23;
 800411c:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <main+0x298>)
 800411e:	2217      	movs	r2, #23
 8004120:	801a      	strh	r2, [r3, #0]
						break;
 8004122:	e00b      	b.n	800413c <main+0x244>
					case 3:
						timeTimerExec = 203;
 8004124:	4b1a      	ldr	r3, [pc, #104]	; (8004190 <main+0x298>)
 8004126:	22cb      	movs	r2, #203	; 0xcb
 8004128:	801a      	strh	r2, [r3, #0]
						break;
 800412a:	e007      	b.n	800413c <main+0x244>
					case 4:
						timeTimerExec = 36;
 800412c:	4b18      	ldr	r3, [pc, #96]	; (8004190 <main+0x298>)
 800412e:	2224      	movs	r2, #36	; 0x24
 8004130:	801a      	strh	r2, [r3, #0]
						break;
 8004132:	e003      	b.n	800413c <main+0x244>
					default:
						timeTimerExec = 30;
 8004134:	4b16      	ldr	r3, [pc, #88]	; (8004190 <main+0x298>)
 8004136:	221e      	movs	r2, #30
 8004138:	801a      	strh	r2, [r3, #0]
						break;
 800413a:	bf00      	nop
					}
					TimerExec = 0UL;
 800413c:	2300      	movs	r3, #0
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
					TimerVisu = 0UL;
 8004140:	2300      	movs	r3, #0
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
					TimerLED = 0UL;
 8004144:	2300      	movs	r3, #0
 8004146:	63bb      	str	r3, [r7, #56]	; 0x38

					exitMenu = EXIT_FROMSUB3;
 8004148:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <main+0x28c>)
 800414a:	2202      	movs	r2, #2
 800414c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800414e:	e009      	b.n	8004164 <main+0x26c>

			case SCREEN_PAGE4:
				if(buttonPushed)
 8004150:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01d      	beq.n	8004194 <main+0x29c>
				{
					exitMenu = EXIT_FROMSUB4;
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <main+0x28c>)
 800415a:	2203      	movs	r2, #3
 800415c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800415e:	e019      	b.n	8004194 <main+0x29c>
				break;
 8004160:	bf00      	nop
 8004162:	e018      	b.n	8004196 <main+0x29e>
				break;
 8004164:	bf00      	nop
 8004166:	e016      	b.n	8004196 <main+0x29e>
 8004168:	20000247 	.word	0x20000247
 800416c:	20000012 	.word	0x20000012
 8004170:	40005400 	.word	0x40005400
 8004174:	2000024c 	.word	0x2000024c
 8004178:	20000246 	.word	0x20000246
 800417c:	20000245 	.word	0x20000245
 8004180:	20000244 	.word	0x20000244
 8004184:	20000016 	.word	0x20000016
 8004188:	20000014 	.word	0x20000014
 800418c:	2000000c 	.word	0x2000000c
 8004190:	20000010 	.word	0x20000010
				break;
 8004194:	bf00      	nop
			}

			// exit sub page to main menu, focus right menu item
			if(exitMenu != EXIT_FALSE)
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <main+0x354>)
 8004198:	f993 3000 	ldrsb.w	r3, [r3]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a0:	d014      	beq.n	80041cc <main+0x2d4>
			{
				page = SCREEN_MAIN;
 80041a2:	4b2b      	ldr	r3, [pc, #172]	; (8004250 <main+0x358>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	701a      	strb	r2, [r3, #0]
				setRotaryPosition(exitMenu);
 80041a8:	4b28      	ldr	r3, [pc, #160]	; (800424c <main+0x354>)
 80041aa:	f993 3000 	ldrsb.w	r3, [r3]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd f8a4 	bl	80012fc <setRotaryPosition>
				visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 80041b4:	4b26      	ldr	r3, [pc, #152]	; (8004250 <main+0x358>)
 80041b6:	7818      	ldrb	r0, [r3, #0]
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <main+0x35c>)
 80041ba:	7819      	ldrb	r1, [r3, #0]
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <main+0x360>)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	1d3b      	adds	r3, r7, #4
 80041c2:	f000 fdbd 	bl	8004d40 <visualisationMenu>

				exitMenu = EXIT_FALSE;
 80041c6:	4b21      	ldr	r3, [pc, #132]	; (800424c <main+0x354>)
 80041c8:	22ff      	movs	r2, #255	; 0xff
 80041ca:	701a      	strb	r2, [r3, #0]
			}

			systickSetTicktime(&TimerExec, timeTimerExec);
 80041cc:	4b23      	ldr	r3, [pc, #140]	; (800425c <main+0x364>)
 80041ce:	881b      	ldrh	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f002 fd8b 	bl	8006cf4 <systickSetTicktime>
		}

		// if timer visualization is expired
		if (isSystickExpired(TimerVisu))
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	4618      	mov	r0, r3
 80041e2:	f002 fd95 	bl	8006d10 <isSystickExpired>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01c      	beq.n	8004226 <main+0x32e>
		{
			// switch case for dynamic display update
			switch(page)
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <main+0x358>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d812      	bhi.n	800421a <main+0x322>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <main+0x304>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	0800421b 	.word	0x0800421b
 8004200:	0800421b 	.word	0x0800421b
 8004204:	08004211 	.word	0x08004211
 8004208:	0800421b 	.word	0x0800421b
 800420c:	0800421b 	.word	0x0800421b
						delayms(200);
						visualisationTOF(&TOF_Sensor_1);

					}
*/
				visualisationTOF(&TOF_Sensor_1);
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	4618      	mov	r0, r3
 8004214:	f000 ff6a 	bl	80050ec <visualisationTOF>

				break;
 8004218:	bf00      	nop
				break;
			case SCREEN_PAGE4:
				break;
			}

			systickSetTicktime(&TimerVisu, timeTimerVisu);
 800421a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800421e:	2132      	movs	r1, #50	; 0x32
 8004220:	4618      	mov	r0, r3
 8004222:	f002 fd67 	bl	8006cf4 <systickSetTicktime>
		}

		// if timer LED is expired
		if (isSystickExpired(TimerLED))
 8004226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004228:	4618      	mov	r0, r3
 800422a:	f002 fd71 	bl	8006d10 <isSystickExpired>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	f43f ae96 	beq.w	8003f62 <main+0x6a>
		{
			// toggle LED to show current speed of system
			gpioTogglePin(LED_BLUE_ADR);
 8004236:	210a      	movs	r1, #10
 8004238:	4809      	ldr	r0, [pc, #36]	; (8004260 <main+0x368>)
 800423a:	f001 fcf3 	bl	8005c24 <gpioTogglePin>

			systickSetTicktime(&TimerLED, timeTimerLED);
 800423e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004242:	21fa      	movs	r1, #250	; 0xfa
 8004244:	4618      	mov	r0, r3
 8004246:	f002 fd55 	bl	8006cf4 <systickSetTicktime>
		if (true == timerTrigger)
 800424a:	e68a      	b.n	8003f62 <main+0x6a>
 800424c:	20000016 	.word	0x20000016
 8004250:	20000246 	.word	0x20000246
 8004254:	20000245 	.word	0x20000245
 8004258:	20000244 	.word	0x20000244
 800425c:	20000010 	.word	0x20000010
 8004260:	40020400 	.word	0x40020400

08004264 <initBala>:
 *
 * @brief: 		 initialization the Bala-system, initialization hardware
 * 				 from Balancer library and start visualization
 */
void initBala(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	// initialization bala-library
	BalaHWsetup();
 8004268:	f7fc ff4c 	bl	8001104 <BalaHWsetup>

	// initialization rotary push button
	initRotaryPushButton();
 800426c:	f7fc ff70 	bl	8001150 <initRotaryPushButton>

	// initialization LED
	initRotaryPushButtonLED();
 8004270:	f7fc ffd4 	bl	800121c <initRotaryPushButtonLED>

	// Configure of SysTick-Timers
	systickInit(SYSTICK_1MS);
 8004274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004278:	f002 fd28 	bl	8006ccc <systickInit>

	//initialization needed for TFT Display
	spiInit();
 800427c:	f7fd f8e6 	bl	800144c <spiInit>
	tftInitR(INITR_REDTAB);
 8004280:	2001      	movs	r0, #1
 8004282:	f7fd f9a3 	bl	80015cc <tftInitR>
	// start visualization
	visualisationStart();
 8004286:	f000 fa23 	bl	80046d0 <visualisationStart>

	//start page 1: i2c sensor connect
	//page = SCREEN_PAGE1;
}
 800428a:	bf00      	nop
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <initSubMenu>:
 * 				 with correct transition initialization
 *
 * @parameters:	 SCREEN_PAGES_t page:	 page to be initialized
 */
void initSubMenu(SCREEN_PAGES_t page, TOFSensor_t* TOFSENS)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	6039      	str	r1, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
	// switch case for menu pages
	switch(page)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d824      	bhi.n	80042ec <initSubMenu+0x5c>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <initSubMenu+0x18>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042eb 	.word	0x080042eb
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	080042eb 	.word	0x080042eb
 80042b8:	080042eb 	.word	0x080042eb
	{
	case SCREEN_MAIN:
			break;
	case SCREEN_PAGE1:
		enable3DGSensor = false;
 80042bc:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <initSubMenu+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	701a      	strb	r2, [r3, #0]
		// disable "sensor enable" to be able to initialize all sensors

		enableTOFSensor = false;
 80042c2:	4b0d      	ldr	r3, [pc, #52]	; (80042f8 <initSubMenu+0x68>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]

		// reset i2c scan
		scanAddr = I2C_MAXADRESS;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <initSubMenu+0x6c>)
 80042ca:	227f      	movs	r2, #127	; 0x7f
 80042cc:	701a      	strb	r2, [r3, #0]
		i2cInitPort = I2C_1;
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <initSubMenu+0x70>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	701a      	strb	r2, [r3, #0]
		i2cInitAttempts = I2C_MAXATTEMPTS;
 80042d4:	4b0b      	ldr	r3, [pc, #44]	; (8004304 <initSubMenu+0x74>)
 80042d6:	2202      	movs	r2, #2
 80042d8:	701a      	strb	r2, [r3, #0]

		// reset sensor initialization
		initedTOF = false;
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <initSubMenu+0x78>)
 80042dc:	2200      	movs	r2, #0
 80042de:	701a      	strb	r2, [r3, #0]
		break;
 80042e0:	e004      	b.n	80042ec <initSubMenu+0x5c>
	case SCREEN_PAGE2:
		TOF_start_continuous(TOFSENS);
 80042e2:	6838      	ldr	r0, [r7, #0]
 80042e4:	f7ff f984 	bl	80035f0 <TOF_start_continuous>
			break;
 80042e8:	e000      	b.n	80042ec <initSubMenu+0x5c>
			break;
 80042ea:	bf00      	nop
	case SCREEN_PAGE3:
			break;
	case SCREEN_PAGE4:
			break;
	}
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20000234 	.word	0x20000234
 80042f8:	20000247 	.word	0x20000247
 80042fc:	20000013 	.word	0x20000013
 8004300:	20000014 	.word	0x20000014
 8004304:	20000015 	.word	0x20000015
 8004308:	20000245 	.word	0x20000245

0800430c <i2cScanAndInit>:
 * 				 with correct transition initialization
 *
 * @parameters:	 I2C_TypeDef   *i2c:	 i2c to be scanned
 */
void i2cScanAndInit(TOFSensor_t* TOFSENS, I2C_TypeDef   *i2c)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
	i2c = TOFSENS->i2c_tof;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	603b      	str	r3, [r7, #0]

	if (I2C_SCAN(scanAddr, i2c) != 0)
 800431c:	4b54      	ldr	r3, [pc, #336]	; (8004470 <i2cScanAndInit+0x164>)
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f8ba 	bl	800449c <I2C_SCAN>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d057      	beq.n	80043de <i2cScanAndInit+0xd2>
	{
		// check if known sensor is found
		if (I2C_SCAN(scanAddr, i2c) == i2cAddr_Sensor[SENSOR_BMA020])
 800432e:	4b50      	ldr	r3, [pc, #320]	; (8004470 <i2cScanAndInit+0x164>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f8b1 	bl	800449c <I2C_SCAN>
 800433a:	4603      	mov	r3, r0
 800433c:	461a      	mov	r2, r3
 800433e:	4b4d      	ldr	r3, [pc, #308]	; (8004474 <i2cScanAndInit+0x168>)
 8004340:	785b      	ldrb	r3, [r3, #1]
 8004342:	429a      	cmp	r2, r3
 8004344:	d109      	bne.n	800435a <i2cScanAndInit+0x4e>
		{
			currentSensor = SENSOR_BMA020;
 8004346:	4b4c      	ldr	r3, [pc, #304]	; (8004478 <i2cScanAndInit+0x16c>)
 8004348:	2201      	movs	r2, #1
 800434a:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_BMA020);
 800434c:	2000      	movs	r0, #0
 800434e:	f000 ff4b 	bl	80051e8 <visualisationSensorRecognized>

			enable3DGSensor = true;
 8004352:	4b4a      	ldr	r3, [pc, #296]	; (800447c <i2cScanAndInit+0x170>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
 8004358:	e041      	b.n	80043de <i2cScanAndInit+0xd2>
		}
		else if (I2C_SCAN(scanAddr, i2c)== i2cAddr_Sensor[SENSOR_MPU6050])
 800435a:	4b45      	ldr	r3, [pc, #276]	; (8004470 <i2cScanAndInit+0x164>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	6839      	ldr	r1, [r7, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f89b 	bl	800449c <I2C_SCAN>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	4b42      	ldr	r3, [pc, #264]	; (8004474 <i2cScanAndInit+0x168>)
 800436c:	789b      	ldrb	r3, [r3, #2]
 800436e:	429a      	cmp	r2, r3
 8004370:	d109      	bne.n	8004386 <i2cScanAndInit+0x7a>
		{
			currentSensor = SENSOR_MPU6050;
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <i2cScanAndInit+0x16c>)
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_MPU6050);
 8004378:	2001      	movs	r0, #1
 800437a:	f000 ff35 	bl	80051e8 <visualisationSensorRecognized>

			enable3DGSensor = true;
 800437e:	4b3f      	ldr	r3, [pc, #252]	; (800447c <i2cScanAndInit+0x170>)
 8004380:	2201      	movs	r2, #1
 8004382:	701a      	strb	r2, [r3, #0]
 8004384:	e02b      	b.n	80043de <i2cScanAndInit+0xd2>
		}
		else if (I2C_SCAN(scanAddr, i2c) == i2cAddr_Sensor[SENSOR_LIS3DH])
 8004386:	4b3a      	ldr	r3, [pc, #232]	; (8004470 <i2cScanAndInit+0x164>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	6839      	ldr	r1, [r7, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f885 	bl	800449c <I2C_SCAN>
 8004392:	4603      	mov	r3, r0
 8004394:	461a      	mov	r2, r3
 8004396:	4b37      	ldr	r3, [pc, #220]	; (8004474 <i2cScanAndInit+0x168>)
 8004398:	78db      	ldrb	r3, [r3, #3]
 800439a:	429a      	cmp	r2, r3
 800439c:	d109      	bne.n	80043b2 <i2cScanAndInit+0xa6>
		{
			currentSensor = SENSOR_LIS3DH;
 800439e:	4b36      	ldr	r3, [pc, #216]	; (8004478 <i2cScanAndInit+0x16c>)
 80043a0:	2203      	movs	r2, #3
 80043a2:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_LIS3DH);
 80043a4:	2002      	movs	r0, #2
 80043a6:	f000 ff1f 	bl	80051e8 <visualisationSensorRecognized>

			enable3DGSensor = true;
 80043aa:	4b34      	ldr	r3, [pc, #208]	; (800447c <i2cScanAndInit+0x170>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e015      	b.n	80043de <i2cScanAndInit+0xd2>
		}
		else if(I2C_SCAN(scanAddr, i2c) == TOF_ADDR_VL53LOX)
 80043b2:	4b2f      	ldr	r3, [pc, #188]	; (8004470 <i2cScanAndInit+0x164>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f86f 	bl	800449c <I2C_SCAN>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b29      	cmp	r3, #41	; 0x29
 80043c2:	d109      	bne.n	80043d8 <i2cScanAndInit+0xcc>
		{
			TOF_sensor_used = TOF_ADDR_VL53LOX;
 80043c4:	4b2e      	ldr	r3, [pc, #184]	; (8004480 <i2cScanAndInit+0x174>)
 80043c6:	2229      	movs	r2, #41	; 0x29
 80043c8:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_VL53LOX);
 80043ca:	2003      	movs	r0, #3
 80043cc:	f000 ff0c 	bl	80051e8 <visualisationSensorRecognized>

			enableTOFSensor = true;
 80043d0:	4b2c      	ldr	r3, [pc, #176]	; (8004484 <i2cScanAndInit+0x178>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e002      	b.n	80043de <i2cScanAndInit+0xd2>
		}
		else
		{
			// show that an unknown sensor was found
			visualisationSensorRecognized(VISUALISATION_UNKNOWN);
 80043d8:	2004      	movs	r0, #4
 80043da:	f000 ff05 	bl	80051e8 <visualisationSensorRecognized>
		}

	}

	// check if all i2c addresses are searched
	if (scanAddr <= 0)
 80043de:	4b24      	ldr	r3, [pc, #144]	; (8004470 <i2cScanAndInit+0x164>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d118      	bne.n	8004418 <i2cScanAndInit+0x10c>
	{
		visualisationI2CScanDone(i2cInitAttempts);
 80043e6:	4b28      	ldr	r3, [pc, #160]	; (8004488 <i2cScanAndInit+0x17c>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 ff70 	bl	80052d0 <visualisationI2CScanDone>

		i2cInitAttempts -= 1;
 80043f0:	4b25      	ldr	r3, [pc, #148]	; (8004488 <i2cScanAndInit+0x17c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b23      	ldr	r3, [pc, #140]	; (8004488 <i2cScanAndInit+0x17c>)
 80043fa:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
 80043fc:	4b1c      	ldr	r3, [pc, #112]	; (8004470 <i2cScanAndInit+0x164>)
 80043fe:	227f      	movs	r2, #127	; 0x7f
 8004400:	701a      	strb	r2, [r3, #0]

		if(i2cInitAttempts < 1)
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <i2cScanAndInit+0x17c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10c      	bne.n	8004424 <i2cScanAndInit+0x118>
		{
			exitMenu = EXIT_FROMSUB1;
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <i2cScanAndInit+0x180>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
			i2cInitAttempts = I2C_MAXATTEMPTS;
 8004410:	4b1d      	ldr	r3, [pc, #116]	; (8004488 <i2cScanAndInit+0x17c>)
 8004412:	2202      	movs	r2, #2
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e005      	b.n	8004424 <i2cScanAndInit+0x118>
		}
	}
	// otherwise decrement scan address and search next i2c address
	else
	{
		scanAddr -= 1;
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <i2cScanAndInit+0x164>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	3b01      	subs	r3, #1
 800441e:	b2da      	uxtb	r2, r3
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <i2cScanAndInit+0x164>)
 8004422:	701a      	strb	r2, [r3, #0]
	}

	// initialize TOF sensor if one is found
	if(enableTOFSensor != ENABLE_TOF_FALSE && enableTOFSensor == (ENABLE_TOF_SENSOR_t)i2cInitPort)
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <i2cScanAndInit+0x178>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01c      	beq.n	8004466 <i2cScanAndInit+0x15a>
 800442c:	4b15      	ldr	r3, [pc, #84]	; (8004484 <i2cScanAndInit+0x178>)
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <i2cScanAndInit+0x184>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d116      	bne.n	8004466 <i2cScanAndInit+0x15a>
	{
		// do TOF sensor initialization
		visualisationSensorInit(SENSOR_INIT_RUNNING);
 8004438:	2000      	movs	r0, #0
 800443a:	f000 ff83 	bl	8005344 <visualisationSensorInit>

		i2c_tof = i2c;
 800443e:	4a15      	ldr	r2, [pc, #84]	; (8004494 <i2cScanAndInit+0x188>)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	6013      	str	r3, [r2, #0]

		bool result = TOF_init(TOFSENS);		//Funktion in welcher der MCAL Fehler auftritt
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff f8a7 	bl	8003598 <TOF_init>
 800444a:	4603      	mov	r3, r0
 800444c:	73fb      	strb	r3, [r7, #15]

		//ToDo Fehler in der MCAL beheben

		// check if init was successful
		if(result == true)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <i2cScanAndInit+0x15a>
		{
			// show if init was successful
			visualisationSensorInit(SENSOR_INIT_DONE);
 8004454:	2001      	movs	r0, #1
 8004456:	f000 ff75 	bl	8005344 <visualisationSensorInit>
			initedTOF = true;
 800445a:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <i2cScanAndInit+0x18c>)
 800445c:	2201      	movs	r2, #1
 800445e:	701a      	strb	r2, [r3, #0]

			// give chance to read success-massage
			//delayms(500);

			exitMenu = EXIT_FROMSUB1;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <i2cScanAndInit+0x180>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_2;

	}
	#endif /* BALA2024 */
}
 8004466:	bf00      	nop
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000013 	.word	0x20000013
 8004474:	0800d280 	.word	0x0800d280
 8004478:	20000235 	.word	0x20000235
 800447c:	20000234 	.word	0x20000234
 8004480:	20000012 	.word	0x20000012
 8004484:	20000247 	.word	0x20000247
 8004488:	20000015 	.word	0x20000015
 800448c:	20000016 	.word	0x20000016
 8004490:	20000014 	.word	0x20000014
 8004494:	20000248 	.word	0x20000248
 8004498:	20000245 	.word	0x20000245

0800449c <I2C_SCAN>:
 * @parameters:	 uint8_t scanAddr:	 address to be checked
 * 				 I2C_TypeDef *i2c:	 i2c bus to be scanned
 *
 * @return:		 uint8_t: found address, 0 if not found
 */
uint8_t I2C_SCAN(uint8_t scanAddr, I2C_TypeDef *i2c) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
	uint8_t *result;

	uint8_t foundAddr = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	73fb      	strb	r3, [r7, #15]

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	4619      	mov	r1, r3
 80044b0:	6838      	ldr	r0, [r7, #0]
 80044b2:	f001 ffed 	bl	8006490 <i2cFindSlaveAddr>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]

	result = convDecByteToHex(scanAddr);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f811 	bl	80044e4 <convDecByteToHex>
 80044c2:	60b8      	str	r0, [r7, #8]

	tftPrint((char*) result, POS_SCREEN_LINE_2_R);
 80044c4:	f7fd fe10 	bl	80020e8 <tftGetWidth>
 80044c8:	4603      	mov	r3, r0
 80044ca:	085b      	lsrs	r3, r3, #1
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	4619      	mov	r1, r3
 80044d0:	2300      	movs	r3, #0
 80044d2:	221e      	movs	r2, #30
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	f7fd fd03 	bl	8001ee0 <tftPrint>

	// returns address, if not found it returns 0
	return foundAddr;
 80044da:	7bfb      	ldrb	r3, [r7, #15]

}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <convDecByteToHex>:
 * @parameters:	 uint8_t byte:	 	 byte input
 *
 * @return:		 uint8_t: hex output
 */
uint8_t *convDecByteToHex(uint8_t byte)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b09      	cmp	r3, #9
 80044fa:	d803      	bhi.n	8004504 <convDecByteToHex+0x20>
    {
        temp += '0';
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	3330      	adds	r3, #48	; 0x30
 8004500:	73fb      	strb	r3, [r7, #15]
 8004502:	e002      	b.n	800450a <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	3337      	adds	r3, #55	; 0x37
 8004508:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 800450a:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <convDecByteToHex+0x5c>)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	2b09      	cmp	r3, #9
 800451a:	d803      	bhi.n	8004524 <convDecByteToHex+0x40>
    {
        temp += '0';
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	3330      	adds	r3, #48	; 0x30
 8004520:	73fb      	strb	r3, [r7, #15]
 8004522:	e002      	b.n	800452a <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	3337      	adds	r3, #55	; 0x37
 8004528:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 800452a:	4a05      	ldr	r2, [pc, #20]	; (8004540 <convDecByteToHex+0x5c>)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	7013      	strb	r3, [r2, #0]

    // returns hex number
    return hex;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <convDecByteToHex+0x5c>)
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000250 	.word	0x20000250

08004544 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return 1;
 8004548:	2301      	movs	r3, #1
}
 800454a:	4618      	mov	r0, r3
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_kill>:

int _kill(int pid, int sig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800455e:	f002 fced 	bl	8006f3c <__errno>
 8004562:	4603      	mov	r3, r0
 8004564:	2216      	movs	r2, #22
 8004566:	601a      	str	r2, [r3, #0]
  return -1;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_exit>:

void _exit (int status)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800457c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ffe7 	bl	8004554 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004586:	e7fe      	b.n	8004586 <_exit+0x12>

08004588 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	e00a      	b.n	80045b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800459a:	f3af 8000 	nop.w
 800459e:	4601      	mov	r1, r0
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	60ba      	str	r2, [r7, #8]
 80045a6:	b2ca      	uxtb	r2, r1
 80045a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3301      	adds	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	dbf0      	blt.n	800459a <_read+0x12>
  }

  return len;
 80045b8:	687b      	ldr	r3, [r7, #4]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	e009      	b.n	80045e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	60ba      	str	r2, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	3301      	adds	r3, #1
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	dbf1      	blt.n	80045d4 <_write+0x12>
  }
  return len;
 80045f0:	687b      	ldr	r3, [r7, #4]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <_close>:

int _close(int file)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b083      	sub	sp, #12
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004622:	605a      	str	r2, [r3, #4]
  return 0;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <_isatty>:

int _isatty(int file)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800463a:	2301      	movs	r3, #1
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <_sbrk+0x5c>)
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <_sbrk+0x60>)
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <_sbrk+0x64>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d102      	bne.n	8004686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004680:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <_sbrk+0x64>)
 8004682:	4a12      	ldr	r2, [pc, #72]	; (80046cc <_sbrk+0x68>)
 8004684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <_sbrk+0x64>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	429a      	cmp	r2, r3
 8004692:	d207      	bcs.n	80046a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004694:	f002 fc52 	bl	8006f3c <__errno>
 8004698:	4603      	mov	r3, r0
 800469a:	220c      	movs	r2, #12
 800469c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a2:	e009      	b.n	80046b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <_sbrk+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <_sbrk+0x64>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4413      	add	r3, r2
 80046b2:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <_sbrk+0x64>)
 80046b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	20018000 	.word	0x20018000
 80046c4:	00000400 	.word	0x00000400
 80046c8:	20000254 	.word	0x20000254
 80046cc:	20000268 	.word	0x20000268

080046d0 <visualisationStart>:
 * @function:	 visualisationStart
 *
 * @brief: 		 start visualization and start menu
 */
void visualisationStart(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
	//display setup
	tftSetRotation(LANDSCAPE_FLIP);
 80046d4:	2003      	movs	r0, #3
 80046d6:	f7fd fcb7 	bl	8002048 <tftSetRotation>
	tftSetFont((uint8_t *)&SmallFont[0]);
 80046da:	4813      	ldr	r0, [pc, #76]	; (8004728 <visualisationStart+0x58>)
 80046dc:	f7fd f9aa 	bl	8001a34 <tftSetFont>
	tftFillScreen(tft_BLACK);
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7fd fc97 	bl	8002014 <tftFillScreen>

	// show header on screen
	visualisationHeader();
 80046e6:	f000 f827 	bl	8004738 <visualisationHeader>

	// welcome massage
	tftPrint("----------------",0,10,0);
 80046ea:	2300      	movs	r3, #0
 80046ec:	220a      	movs	r2, #10
 80046ee:	2100      	movs	r1, #0
 80046f0:	480e      	ldr	r0, [pc, #56]	; (800472c <visualisationStart+0x5c>)
 80046f2:	f7fd fbf5 	bl	8001ee0 <tftPrint>
	tftPrint("TimeOfFlight Sensor",0,30,0);
 80046f6:	2300      	movs	r3, #0
 80046f8:	221e      	movs	r2, #30
 80046fa:	2100      	movs	r1, #0
 80046fc:	480c      	ldr	r0, [pc, #48]	; (8004730 <visualisationStart+0x60>)
 80046fe:	f7fd fbef 	bl	8001ee0 <tftPrint>
	tftPrint("Philipp & Andreas",0,50,0);
 8004702:	2300      	movs	r3, #0
 8004704:	2232      	movs	r2, #50	; 0x32
 8004706:	2100      	movs	r1, #0
 8004708:	480a      	ldr	r0, [pc, #40]	; (8004734 <visualisationStart+0x64>)
 800470a:	f7fd fbe9 	bl	8001ee0 <tftPrint>
	tftPrint("----------------",0,70,0);
 800470e:	2300      	movs	r3, #0
 8004710:	2246      	movs	r2, #70	; 0x46
 8004712:	2100      	movs	r1, #0
 8004714:	4805      	ldr	r0, [pc, #20]	; (800472c <visualisationStart+0x5c>)
 8004716:	f7fd fbe3 	bl	8001ee0 <tftPrint>


	// wait, that it can be read
	delayms(20000);
 800471a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800471e:	f7fc fe4b 	bl	80013b8 <delayms>

	// start menu scan i2c
	//visualisationMenu(SCREEN_PAGE3, false, false);
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	0800cd80 	.word	0x0800cd80
 800472c:	0800c9e0 	.word	0x0800c9e0
 8004730:	0800c9f4 	.word	0x0800c9f4
 8004734:	0800ca08 	.word	0x0800ca08

08004738 <visualisationHeader>:
 * @function:	 visualisationHeader
 *
 * @brief: 		 show screen header
 */
void visualisationHeader(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	tftPrint("ARM-TMT22GR2",0,0,0);
 800473c:	2300      	movs	r3, #0
 800473e:	2200      	movs	r2, #0
 8004740:	2100      	movs	r1, #0
 8004742:	4802      	ldr	r0, [pc, #8]	; (800474c <visualisationHeader+0x14>)
 8004744:	f7fd fbcc 	bl	8001ee0 <tftPrint>
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}
 800474c:	0800ca1c 	.word	0x0800ca1c

08004750 <visualisationMenuGrid>:
 *
 * @parameters:	 MENU_GRID_t grid:	 which grid should be visualized
 * 				 uint16_t color:	 color for grid
 */
void visualisationMenuGrid(MENU_GRID_t grid, uint16_t color)
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	b085      	sub	sp, #20
 8004754:	af02      	add	r7, sp, #8
 8004756:	4603      	mov	r3, r0
 8004758:	460a      	mov	r2, r1
 800475a:	71fb      	strb	r3, [r7, #7]
 800475c:	4613      	mov	r3, r2
 800475e:	80bb      	strh	r3, [r7, #4]
	//reset rectangle, print it black, if we don't want to draw black
	if(grid != GRID4)
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d003      	beq.n	800476e <visualisationMenuGrid+0x1e>
	{
		visualisationMenuGrid(GRID4, tft_BLACK);
 8004766:	2100      	movs	r1, #0
 8004768:	2003      	movs	r0, #3
 800476a:	f7ff fff1 	bl	8004750 <visualisationMenuGrid>
	}

	// switch different grids to be visualized
	switch(grid)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b03      	cmp	r3, #3
 8004772:	f200 8117 	bhi.w	80049a4 <visualisationMenuGrid+0x254>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <visualisationMenuGrid+0x2c>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800478d 	.word	0x0800478d
 8004780:	0800480f 	.word	0x0800480f
 8004784:	080047b3 	.word	0x080047b3
 8004788:	08004883 	.word	0x08004883
	{
		// just a frame
		case GRID1:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 800478c:	f7fd fcac 	bl	80020e8 <tftGetWidth>
 8004790:	4603      	mov	r3, r0
 8004792:	3b01      	subs	r3, #1
 8004794:	b2dc      	uxtb	r4, r3
 8004796:	f7fd fcb3 	bl	8002100 <tftGetHeight>
 800479a:	4603      	mov	r3, r0
 800479c:	3b01      	subs	r3, #1
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	88bb      	ldrh	r3, [r7, #4]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	4622      	mov	r2, r4
 80047a8:	210e      	movs	r1, #14
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7fd f8f6 	bl	800199c <tftDrawRect>
			break;
 80047b0:	e0f8      	b.n	80049a4 <visualisationMenuGrid+0x254>
		// two frame grid vertical
		case GRID2V:
			tftDrawRect(0, 14, tftGetWidth()/2 -1, tftGetHeight() - 1, color);
 80047b2:	f7fd fc99 	bl	80020e8 <tftGetWidth>
 80047b6:	4603      	mov	r3, r0
 80047b8:	085b      	lsrs	r3, r3, #1
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b2dc      	uxtb	r4, r3
 80047c0:	f7fd fc9e 	bl	8002100 <tftGetHeight>
 80047c4:	4603      	mov	r3, r0
 80047c6:	3b01      	subs	r3, #1
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	88bb      	ldrh	r3, [r7, #4]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	4622      	mov	r2, r4
 80047d2:	210e      	movs	r1, #14
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7fd f8e1 	bl	800199c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 -1, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 80047da:	f7fd fc85 	bl	80020e8 <tftGetWidth>
 80047de:	4603      	mov	r3, r0
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b2dc      	uxtb	r4, r3
 80047e8:	f7fd fc7e 	bl	80020e8 <tftGetWidth>
 80047ec:	4603      	mov	r3, r0
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b2dd      	uxtb	r5, r3
 80047f2:	f7fd fc85 	bl	8002100 <tftGetHeight>
 80047f6:	4603      	mov	r3, r0
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b2da      	uxtb	r2, r3
 80047fc:	88bb      	ldrh	r3, [r7, #4]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	4613      	mov	r3, r2
 8004802:	462a      	mov	r2, r5
 8004804:	210e      	movs	r1, #14
 8004806:	4620      	mov	r0, r4
 8004808:	f7fd f8c8 	bl	800199c <tftDrawRect>
			break;
 800480c:	e0ca      	b.n	80049a4 <visualisationMenuGrid+0x254>
		// two frame grid horizontal
		case GRID2H:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 800480e:	f7fd fc6b 	bl	80020e8 <tftGetWidth>
 8004812:	4603      	mov	r3, r0
 8004814:	3b01      	subs	r3, #1
 8004816:	b2dc      	uxtb	r4, r3
 8004818:	f7fd fc72 	bl	8002100 <tftGetHeight>
 800481c:	4603      	mov	r3, r0
 800481e:	461d      	mov	r5, r3
 8004820:	f7fd fc62 	bl	80020e8 <tftGetWidth>
 8004824:	4603      	mov	r3, r0
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	b2db      	uxtb	r3, r3
 800482a:	1aeb      	subs	r3, r5, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	3315      	adds	r3, #21
 8004830:	b2da      	uxtb	r2, r3
 8004832:	88bb      	ldrh	r3, [r7, #4]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	4613      	mov	r3, r2
 8004838:	4622      	mov	r2, r4
 800483a:	210e      	movs	r1, #14
 800483c:	2000      	movs	r0, #0
 800483e:	f7fd f8ad 	bl	800199c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8004842:	f7fd fc5d 	bl	8002100 <tftGetHeight>
 8004846:	4603      	mov	r3, r0
 8004848:	461c      	mov	r4, r3
 800484a:	f7fd fc4d 	bl	80020e8 <tftGetWidth>
 800484e:	4603      	mov	r3, r0
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	b2db      	uxtb	r3, r3
 8004854:	1ae3      	subs	r3, r4, r3
 8004856:	b2db      	uxtb	r3, r3
 8004858:	3315      	adds	r3, #21
 800485a:	b2dc      	uxtb	r4, r3
 800485c:	f7fd fc44 	bl	80020e8 <tftGetWidth>
 8004860:	4603      	mov	r3, r0
 8004862:	3b01      	subs	r3, #1
 8004864:	b2dd      	uxtb	r5, r3
 8004866:	f7fd fc4b 	bl	8002100 <tftGetHeight>
 800486a:	4603      	mov	r3, r0
 800486c:	3b01      	subs	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	88bb      	ldrh	r3, [r7, #4]
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4613      	mov	r3, r2
 8004876:	462a      	mov	r2, r5
 8004878:	4621      	mov	r1, r4
 800487a:	2000      	movs	r0, #0
 800487c:	f7fd f88e 	bl	800199c <tftDrawRect>
			break;
 8004880:	e090      	b.n	80049a4 <visualisationMenuGrid+0x254>
		// four frame grid
		case GRID4:
			tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 8004882:	f7fd fc31 	bl	80020e8 <tftGetWidth>
 8004886:	4603      	mov	r3, r0
 8004888:	461c      	mov	r4, r3
 800488a:	f7fd fc2d 	bl	80020e8 <tftGetWidth>
 800488e:	4603      	mov	r3, r0
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	b2db      	uxtb	r3, r3
 8004894:	1ae3      	subs	r3, r4, r3
 8004896:	b2db      	uxtb	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b2dc      	uxtb	r4, r3
 800489c:	f7fd fc30 	bl	8002100 <tftGetHeight>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461d      	mov	r5, r3
 80048a4:	f7fd fc20 	bl	80020e8 <tftGetWidth>
 80048a8:	4603      	mov	r3, r0
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	1aeb      	subs	r3, r5, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	3315      	adds	r3, #21
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	88bb      	ldrh	r3, [r7, #4]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	4613      	mov	r3, r2
 80048bc:	4622      	mov	r2, r4
 80048be:	210e      	movs	r1, #14
 80048c0:	2000      	movs	r0, #0
 80048c2:	f7fd f86b 	bl	800199c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 80048c6:	f7fd fc0f 	bl	80020e8 <tftGetWidth>
 80048ca:	4603      	mov	r3, r0
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b2dc      	uxtb	r4, r3
 80048d4:	f7fd fc08 	bl	80020e8 <tftGetWidth>
 80048d8:	4603      	mov	r3, r0
 80048da:	3b01      	subs	r3, #1
 80048dc:	b2dd      	uxtb	r5, r3
 80048de:	f7fd fc0f 	bl	8002100 <tftGetHeight>
 80048e2:	4603      	mov	r3, r0
 80048e4:	461e      	mov	r6, r3
 80048e6:	f7fd fbff 	bl	80020e8 <tftGetWidth>
 80048ea:	4603      	mov	r3, r0
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	1af3      	subs	r3, r6, r3
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3315      	adds	r3, #21
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	88bb      	ldrh	r3, [r7, #4]
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	462a      	mov	r2, r5
 8004900:	210e      	movs	r1, #14
 8004902:	4620      	mov	r0, r4
 8004904:	f7fd f84a 	bl	800199c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, color);
 8004908:	f7fd fbfa 	bl	8002100 <tftGetHeight>
 800490c:	4603      	mov	r3, r0
 800490e:	461c      	mov	r4, r3
 8004910:	f7fd fbea 	bl	80020e8 <tftGetWidth>
 8004914:	4603      	mov	r3, r0
 8004916:	085b      	lsrs	r3, r3, #1
 8004918:	b2db      	uxtb	r3, r3
 800491a:	1ae3      	subs	r3, r4, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3315      	adds	r3, #21
 8004920:	b2dc      	uxtb	r4, r3
 8004922:	f7fd fbe1 	bl	80020e8 <tftGetWidth>
 8004926:	4603      	mov	r3, r0
 8004928:	461d      	mov	r5, r3
 800492a:	f7fd fbdd 	bl	80020e8 <tftGetWidth>
 800492e:	4603      	mov	r3, r0
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	b2db      	uxtb	r3, r3
 8004934:	1aeb      	subs	r3, r5, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b2dd      	uxtb	r5, r3
 800493c:	f7fd fbe0 	bl	8002100 <tftGetHeight>
 8004940:	4603      	mov	r3, r0
 8004942:	3b01      	subs	r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	88bb      	ldrh	r3, [r7, #4]
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	462a      	mov	r2, r5
 800494e:	4621      	mov	r1, r4
 8004950:	2000      	movs	r0, #0
 8004952:	f7fd f823 	bl	800199c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8004956:	f7fd fbc7 	bl	80020e8 <tftGetWidth>
 800495a:	4603      	mov	r3, r0
 800495c:	085b      	lsrs	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b2dc      	uxtb	r4, r3
 8004964:	f7fd fbcc 	bl	8002100 <tftGetHeight>
 8004968:	4603      	mov	r3, r0
 800496a:	461d      	mov	r5, r3
 800496c:	f7fd fbbc 	bl	80020e8 <tftGetWidth>
 8004970:	4603      	mov	r3, r0
 8004972:	085b      	lsrs	r3, r3, #1
 8004974:	b2db      	uxtb	r3, r3
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	b2db      	uxtb	r3, r3
 800497a:	3315      	adds	r3, #21
 800497c:	b2dd      	uxtb	r5, r3
 800497e:	f7fd fbb3 	bl	80020e8 <tftGetWidth>
 8004982:	4603      	mov	r3, r0
 8004984:	3b01      	subs	r3, #1
 8004986:	b2de      	uxtb	r6, r3
 8004988:	f7fd fbba 	bl	8002100 <tftGetHeight>
 800498c:	4603      	mov	r3, r0
 800498e:	3b01      	subs	r3, #1
 8004990:	b2da      	uxtb	r2, r3
 8004992:	88bb      	ldrh	r3, [r7, #4]
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	4613      	mov	r3, r2
 8004998:	4632      	mov	r2, r6
 800499a:	4629      	mov	r1, r5
 800499c:	4620      	mov	r0, r4
 800499e:	f7fc fffd 	bl	800199c <tftDrawRect>
			break;
 80049a2:	bf00      	nop
	}
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ac <visualisationMenuGridFocus>:
 * @parameters:	 int32_t position:	 	position to focus
 * 				 uint16_t colorDefault:	default color to reset focus
 * 				 uint16_t colorFocus:	focus color
 */
void visualisationMenuGridFocus(int32_t position, uint16_t colorDefault, uint16_t colorFocus)
{
 80049ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	460b      	mov	r3, r1
 80049b6:	807b      	strh	r3, [r7, #2]
 80049b8:	4613      	mov	r3, r2
 80049ba:	803b      	strh	r3, [r7, #0]
	//reset rectangle from focus
	visualisationMenuGrid(GRID4, colorDefault);
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	4619      	mov	r1, r3
 80049c0:	2003      	movs	r0, #3
 80049c2:	f7ff fec5 	bl	8004750 <visualisationMenuGrid>
	tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 80049c6:	f7fd fb8f 	bl	80020e8 <tftGetWidth>
 80049ca:	4603      	mov	r3, r0
 80049cc:	461c      	mov	r4, r3
 80049ce:	f7fd fb8b 	bl	80020e8 <tftGetWidth>
 80049d2:	4603      	mov	r3, r0
 80049d4:	085b      	lsrs	r3, r3, #1
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	1ae3      	subs	r3, r4, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3b02      	subs	r3, #2
 80049de:	b2dc      	uxtb	r4, r3
 80049e0:	f7fd fb8e 	bl	8002100 <tftGetHeight>
 80049e4:	4603      	mov	r3, r0
 80049e6:	461d      	mov	r5, r3
 80049e8:	f7fd fb7e 	bl	80020e8 <tftGetWidth>
 80049ec:	4603      	mov	r3, r0
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	1aeb      	subs	r3, r5, r3
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	3314      	adds	r3, #20
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2200      	movs	r2, #0
 80049fc:	9200      	str	r2, [sp, #0]
 80049fe:	4622      	mov	r2, r4
 8004a00:	210f      	movs	r1, #15
 8004a02:	2001      	movs	r0, #1
 8004a04:	f7fc ffca 	bl	800199c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 8004a08:	f7fd fb6e 	bl	80020e8 <tftGetWidth>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	b2dc      	uxtb	r4, r3
 8004a12:	f7fd fb69 	bl	80020e8 <tftGetWidth>
 8004a16:	4603      	mov	r3, r0
 8004a18:	3b02      	subs	r3, #2
 8004a1a:	b2dd      	uxtb	r5, r3
 8004a1c:	f7fd fb70 	bl	8002100 <tftGetHeight>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461e      	mov	r6, r3
 8004a24:	f7fd fb60 	bl	80020e8 <tftGetWidth>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	1af3      	subs	r3, r6, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	3314      	adds	r3, #20
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2200      	movs	r2, #0
 8004a38:	9200      	str	r2, [sp, #0]
 8004a3a:	462a      	mov	r2, r5
 8004a3c:	210f      	movs	r1, #15
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fc ffac 	bl	800199c <tftDrawRect>
	tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8004a44:	f7fd fb5c 	bl	8002100 <tftGetHeight>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461c      	mov	r4, r3
 8004a4c:	f7fd fb4c 	bl	80020e8 <tftGetWidth>
 8004a50:	4603      	mov	r3, r0
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	1ae3      	subs	r3, r4, r3
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	3316      	adds	r3, #22
 8004a5c:	b2dc      	uxtb	r4, r3
 8004a5e:	f7fd fb43 	bl	80020e8 <tftGetWidth>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461d      	mov	r5, r3
 8004a66:	f7fd fb3f 	bl	80020e8 <tftGetWidth>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	1aeb      	subs	r3, r5, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3b02      	subs	r3, #2
 8004a76:	b2dd      	uxtb	r5, r3
 8004a78:	f7fd fb42 	bl	8002100 <tftGetHeight>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	3b02      	subs	r3, #2
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2200      	movs	r2, #0
 8004a84:	9200      	str	r2, [sp, #0]
 8004a86:	462a      	mov	r2, r5
 8004a88:	4621      	mov	r1, r4
 8004a8a:	2001      	movs	r0, #1
 8004a8c:	f7fc ff86 	bl	800199c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8004a90:	f7fd fb2a 	bl	80020e8 <tftGetWidth>
 8004a94:	4603      	mov	r3, r0
 8004a96:	085b      	lsrs	r3, r3, #1
 8004a98:	b2dc      	uxtb	r4, r3
 8004a9a:	f7fd fb31 	bl	8002100 <tftGetHeight>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461d      	mov	r5, r3
 8004aa2:	f7fd fb21 	bl	80020e8 <tftGetWidth>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	085b      	lsrs	r3, r3, #1
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	1aeb      	subs	r3, r5, r3
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3316      	adds	r3, #22
 8004ab2:	b2dd      	uxtb	r5, r3
 8004ab4:	f7fd fb18 	bl	80020e8 <tftGetWidth>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	3b02      	subs	r3, #2
 8004abc:	b2de      	uxtb	r6, r3
 8004abe:	f7fd fb1f 	bl	8002100 <tftGetHeight>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	3b02      	subs	r3, #2
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2200      	movs	r2, #0
 8004aca:	9200      	str	r2, [sp, #0]
 8004acc:	4632      	mov	r2, r6
 8004ace:	4629      	mov	r1, r5
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f7fc ff63 	bl	800199c <tftDrawRect>

	// which frame should be focused
	switch(position)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	f200 812b 	bhi.w	8004d34 <visualisationMenuGridFocus+0x388>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <visualisationMenuGridFocus+0x138>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b7f 	.word	0x08004b7f
 8004aec:	08004c01 	.word	0x08004c01
 8004af0:	08004c97 	.word	0x08004c97
	{
	case 0:
		tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 8004af4:	f7fd faf8 	bl	80020e8 <tftGetWidth>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461c      	mov	r4, r3
 8004afc:	f7fd faf4 	bl	80020e8 <tftGetWidth>
 8004b00:	4603      	mov	r3, r0
 8004b02:	085b      	lsrs	r3, r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	1ae3      	subs	r3, r4, r3
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3b02      	subs	r3, #2
 8004b0c:	b2dc      	uxtb	r4, r3
 8004b0e:	f7fd faf7 	bl	8002100 <tftGetHeight>
 8004b12:	4603      	mov	r3, r0
 8004b14:	461d      	mov	r5, r3
 8004b16:	f7fd fae7 	bl	80020e8 <tftGetWidth>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	085b      	lsrs	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	1aeb      	subs	r3, r5, r3
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3314      	adds	r3, #20
 8004b26:	b2da      	uxtb	r2, r3
 8004b28:	883b      	ldrh	r3, [r7, #0]
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	4622      	mov	r2, r4
 8004b30:	210f      	movs	r1, #15
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7fc ff32 	bl	800199c <tftDrawRect>
		tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 8004b38:	f7fd fad6 	bl	80020e8 <tftGetWidth>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461c      	mov	r4, r3
 8004b40:	f7fd fad2 	bl	80020e8 <tftGetWidth>
 8004b44:	4603      	mov	r3, r0
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	1ae3      	subs	r3, r4, r3
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	b2dc      	uxtb	r4, r3
 8004b52:	f7fd fad5 	bl	8002100 <tftGetHeight>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461d      	mov	r5, r3
 8004b5a:	f7fd fac5 	bl	80020e8 <tftGetWidth>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	1aeb      	subs	r3, r5, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3315      	adds	r3, #21
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	883b      	ldrh	r3, [r7, #0]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	4622      	mov	r2, r4
 8004b74:	210e      	movs	r1, #14
 8004b76:	2000      	movs	r0, #0
 8004b78:	f7fc ff10 	bl	800199c <tftDrawRect>
		break;
 8004b7c:	e0db      	b.n	8004d36 <visualisationMenuGridFocus+0x38a>
	case 1:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 8004b7e:	f7fd fab3 	bl	80020e8 <tftGetWidth>
 8004b82:	4603      	mov	r3, r0
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	b2dc      	uxtb	r4, r3
 8004b88:	f7fd faae 	bl	80020e8 <tftGetWidth>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	3b02      	subs	r3, #2
 8004b90:	b2dd      	uxtb	r5, r3
 8004b92:	f7fd fab5 	bl	8002100 <tftGetHeight>
 8004b96:	4603      	mov	r3, r0
 8004b98:	461e      	mov	r6, r3
 8004b9a:	f7fd faa5 	bl	80020e8 <tftGetWidth>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	085b      	lsrs	r3, r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	1af3      	subs	r3, r6, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3314      	adds	r3, #20
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	883b      	ldrh	r3, [r7, #0]
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	462a      	mov	r2, r5
 8004bb4:	210f      	movs	r1, #15
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fc fef0 	bl	800199c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 8004bbc:	f7fd fa94 	bl	80020e8 <tftGetWidth>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	b2dc      	uxtb	r4, r3
 8004bca:	f7fd fa8d 	bl	80020e8 <tftGetWidth>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	b2dd      	uxtb	r5, r3
 8004bd4:	f7fd fa94 	bl	8002100 <tftGetHeight>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	461e      	mov	r6, r3
 8004bdc:	f7fd fa84 	bl	80020e8 <tftGetWidth>
 8004be0:	4603      	mov	r3, r0
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	1af3      	subs	r3, r6, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3315      	adds	r3, #21
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	883b      	ldrh	r3, [r7, #0]
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	462a      	mov	r2, r5
 8004bf6:	210e      	movs	r1, #14
 8004bf8:	4620      	mov	r0, r4
 8004bfa:	f7fc fecf 	bl	800199c <tftDrawRect>
		break;
 8004bfe:	e09a      	b.n	8004d36 <visualisationMenuGridFocus+0x38a>
	case 2:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 8004c00:	f7fd fa72 	bl	80020e8 <tftGetWidth>
 8004c04:	4603      	mov	r3, r0
 8004c06:	085b      	lsrs	r3, r3, #1
 8004c08:	b2dc      	uxtb	r4, r3
 8004c0a:	f7fd fa79 	bl	8002100 <tftGetHeight>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461d      	mov	r5, r3
 8004c12:	f7fd fa69 	bl	80020e8 <tftGetWidth>
 8004c16:	4603      	mov	r3, r0
 8004c18:	085b      	lsrs	r3, r3, #1
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	1aeb      	subs	r3, r5, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	3316      	adds	r3, #22
 8004c22:	b2dd      	uxtb	r5, r3
 8004c24:	f7fd fa60 	bl	80020e8 <tftGetWidth>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	3b02      	subs	r3, #2
 8004c2c:	b2de      	uxtb	r6, r3
 8004c2e:	f7fd fa67 	bl	8002100 <tftGetHeight>
 8004c32:	4603      	mov	r3, r0
 8004c34:	3b02      	subs	r3, #2
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	883b      	ldrh	r3, [r7, #0]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	4632      	mov	r2, r6
 8004c40:	4629      	mov	r1, r5
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7fc feaa 	bl	800199c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, colorFocus);
 8004c48:	f7fd fa4e 	bl	80020e8 <tftGetWidth>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b2dc      	uxtb	r4, r3
 8004c56:	f7fd fa53 	bl	8002100 <tftGetHeight>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461d      	mov	r5, r3
 8004c5e:	f7fd fa43 	bl	80020e8 <tftGetWidth>
 8004c62:	4603      	mov	r3, r0
 8004c64:	085b      	lsrs	r3, r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	1aeb      	subs	r3, r5, r3
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3315      	adds	r3, #21
 8004c6e:	b2dd      	uxtb	r5, r3
 8004c70:	f7fd fa3a 	bl	80020e8 <tftGetWidth>
 8004c74:	4603      	mov	r3, r0
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b2de      	uxtb	r6, r3
 8004c7a:	f7fd fa41 	bl	8002100 <tftGetHeight>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	883b      	ldrh	r3, [r7, #0]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	4632      	mov	r2, r6
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7fc fe84 	bl	800199c <tftDrawRect>
		break;
 8004c94:	e04f      	b.n	8004d36 <visualisationMenuGridFocus+0x38a>
	case 3:
		tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 8004c96:	f7fd fa33 	bl	8002100 <tftGetHeight>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	f7fd fa23 	bl	80020e8 <tftGetWidth>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	1ae3      	subs	r3, r4, r3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	3316      	adds	r3, #22
 8004cae:	b2dc      	uxtb	r4, r3
 8004cb0:	f7fd fa1a 	bl	80020e8 <tftGetWidth>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	461d      	mov	r5, r3
 8004cb8:	f7fd fa16 	bl	80020e8 <tftGetWidth>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	1aeb      	subs	r3, r5, r3
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	3b02      	subs	r3, #2
 8004cc8:	b2dd      	uxtb	r5, r3
 8004cca:	f7fd fa19 	bl	8002100 <tftGetHeight>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	3b02      	subs	r3, #2
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	883b      	ldrh	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	462a      	mov	r2, r5
 8004cdc:	4621      	mov	r1, r4
 8004cde:	2001      	movs	r0, #1
 8004ce0:	f7fc fe5c 	bl	800199c <tftDrawRect>
		tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, colorFocus);
 8004ce4:	f7fd fa0c 	bl	8002100 <tftGetHeight>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461c      	mov	r4, r3
 8004cec:	f7fd f9fc 	bl	80020e8 <tftGetWidth>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	1ae3      	subs	r3, r4, r3
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	3315      	adds	r3, #21
 8004cfc:	b2dc      	uxtb	r4, r3
 8004cfe:	f7fd f9f3 	bl	80020e8 <tftGetWidth>
 8004d02:	4603      	mov	r3, r0
 8004d04:	461d      	mov	r5, r3
 8004d06:	f7fd f9ef 	bl	80020e8 <tftGetWidth>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	1aeb      	subs	r3, r5, r3
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b2dd      	uxtb	r5, r3
 8004d18:	f7fd f9f2 	bl	8002100 <tftGetHeight>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	883b      	ldrh	r3, [r7, #0]
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	4613      	mov	r3, r2
 8004d28:	462a      	mov	r2, r5
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	2000      	movs	r0, #0
 8004d2e:	f7fc fe35 	bl	800199c <tftDrawRect>
		break;
 8004d32:	e000      	b.n	8004d36 <visualisationMenuGridFocus+0x38a>
	default:
		break;
 8004d34:	bf00      	nop
	}
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d3e:	bf00      	nop

08004d40 <visualisationMenu>:
 * @parameters:	 SCREEN_PAGES_t page:	menu page to be loaded
 * 				 bool initedTOF:		flag if TOF is initialized
 * 				 bool inited3DG:		flag if 3DG is initialized
 */
void visualisationMenu(SCREEN_PAGES_t page, bool initedTOF, bool inited3DG, TOFSensor_t* TOFSENS)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4603      	mov	r3, r0
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	71bb      	strb	r3, [r7, #6]
 8004d50:	4613      	mov	r3, r2
 8004d52:	717b      	strb	r3, [r7, #5]
	// clear content
	visualisationClearBody();
 8004d54:	f000 f952 	bl	8004ffc <visualisationClearBody>

	// load right screen
	switch(page)
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	f200 8116 	bhi.w	8004f8c <visualisationMenu+0x24c>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <visualisationMenu+0x28>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d7d 	.word	0x08004d7d
 8004d6c:	08004e29 	.word	0x08004e29
 8004d70:	08004e4d 	.word	0x08004e4d
 8004d74:	08004e89 	.word	0x08004e89
 8004d78:	08004f15 	.word	0x08004f15
	{
	case SCREEN_MAIN:
		visualisationMenuGridFocus((uint16_t)getRotaryPosition() % 4, tft_WHITE, tft_YELLOW);
 8004d7c:	f7fc faa8 	bl	80012d0 <getRotaryPosition>
 8004d80:	4603      	mov	r3, r0
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8004d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fe0b 	bl	80049ac <visualisationMenuGridFocus>

		// 1. Submenu
		tftPrint("Sensor-",13,27,0);
 8004d96:	2300      	movs	r3, #0
 8004d98:	221b      	movs	r2, #27
 8004d9a:	210d      	movs	r1, #13
 8004d9c:	487d      	ldr	r0, [pc, #500]	; (8004f94 <visualisationMenu+0x254>)
 8004d9e:	f7fd f89f 	bl	8001ee0 <tftPrint>
		tftPrint("init",23,39,0);
 8004da2:	2300      	movs	r3, #0
 8004da4:	2227      	movs	r2, #39	; 0x27
 8004da6:	2117      	movs	r1, #23
 8004da8:	487b      	ldr	r0, [pc, #492]	; (8004f98 <visualisationMenu+0x258>)
 8004daa:	f7fd f899 	bl	8001ee0 <tftPrint>

		// 2. Submenu
		tftPrint("TOF", 28 + tftGetWidth()/2, 27, 0);
 8004dae:	f7fd f99b 	bl	80020e8 <tftGetWidth>
 8004db2:	4603      	mov	r3, r0
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	f103 011c 	add.w	r1, r3, #28
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	221b      	movs	r2, #27
 8004dc0:	4876      	ldr	r0, [pc, #472]	; (8004f9c <visualisationMenu+0x25c>)
 8004dc2:	f7fd f88d 	bl	8001ee0 <tftPrint>

		// show if sensor is not connected
		if(initedTOF == false)
 8004dc6:	79bb      	ldrb	r3, [r7, #6]
 8004dc8:	f083 0301 	eor.w	r3, r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <visualisationMenu+0xa8>
		{
			tftPrint("(discon.)", 3 + tftGetWidth()/2, 39, 0);
 8004dd2:	f7fd f989 	bl	80020e8 <tftGetWidth>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	085b      	lsrs	r3, r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	1cd9      	adds	r1, r3, #3
 8004dde:	2300      	movs	r3, #0
 8004de0:	2227      	movs	r2, #39	; 0x27
 8004de2:	486f      	ldr	r0, [pc, #444]	; (8004fa0 <visualisationMenu+0x260>)
 8004de4:	f7fd f87c 	bl	8001ee0 <tftPrint>
		}

		// 3. Submenu
		tftPrint("Mode", 28 + tftGetWidth()/2, 20 + tftGetHeight()/2, 0);
 8004de8:	f7fd f97e 	bl	80020e8 <tftGetWidth>
 8004dec:	4603      	mov	r3, r0
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	f103 041c 	add.w	r4, r3, #28
 8004df6:	f7fd f983 	bl	8002100 <tftGetHeight>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f103 0214 	add.w	r2, r3, #20
 8004e04:	2300      	movs	r3, #0
 8004e06:	4621      	mov	r1, r4
 8004e08:	4866      	ldr	r0, [pc, #408]	; (8004fa4 <visualisationMenu+0x264>)
 8004e0a:	f7fd f869 	bl	8001ee0 <tftPrint>



		// 4. Submenu
		tftPrint("INFO", 24, 20 + tftGetHeight()/2, 0);
 8004e0e:	f7fd f977 	bl	8002100 <tftGetHeight>
 8004e12:	4603      	mov	r3, r0
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	f103 0214 	add.w	r2, r3, #20
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	2118      	movs	r1, #24
 8004e20:	4861      	ldr	r0, [pc, #388]	; (8004fa8 <visualisationMenu+0x268>)
 8004e22:	f7fd f85d 	bl	8001ee0 <tftPrint>
		break;
 8004e26:	e0b1      	b.n	8004f8c <visualisationMenu+0x24c>
	case SCREEN_PAGE1:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8004e28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7ff fc8f 	bl	8004750 <visualisationMenuGrid>
		tftPrint("Sensor-init: i2c",POS_SCREEN_LINE_1);
 8004e32:	2300      	movs	r3, #0
 8004e34:	2211      	movs	r2, #17
 8004e36:	2104      	movs	r1, #4
 8004e38:	485c      	ldr	r0, [pc, #368]	; (8004fac <visualisationMenu+0x26c>)
 8004e3a:	f7fd f851 	bl	8001ee0 <tftPrint>
		tftPrint("Address:",POS_SCREEN_LINE_2);
 8004e3e:	2300      	movs	r3, #0
 8004e40:	221e      	movs	r2, #30
 8004e42:	2104      	movs	r1, #4
 8004e44:	485a      	ldr	r0, [pc, #360]	; (8004fb0 <visualisationMenu+0x270>)
 8004e46:	f7fd f84b 	bl	8001ee0 <tftPrint>
		break;
 8004e4a:	e09f      	b.n	8004f8c <visualisationMenu+0x24c>
	case SCREEN_PAGE2:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8004e4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e50:	2000      	movs	r0, #0
 8004e52:	f7ff fc7d 	bl	8004750 <visualisationMenuGrid>
		tftPrint("Read distance with", POS_SCREEN_LINE_1);
 8004e56:	2300      	movs	r3, #0
 8004e58:	2211      	movs	r2, #17
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	4855      	ldr	r0, [pc, #340]	; (8004fb4 <visualisationMenu+0x274>)
 8004e5e:	f7fd f83f 	bl	8001ee0 <tftPrint>
		tftPrint("TOF Sensor:", POS_SCREEN_LINE_2);
 8004e62:	2300      	movs	r3, #0
 8004e64:	221e      	movs	r2, #30
 8004e66:	2104      	movs	r1, #4
 8004e68:	4853      	ldr	r0, [pc, #332]	; (8004fb8 <visualisationMenu+0x278>)
 8004e6a:	f7fd f839 	bl	8001ee0 <tftPrint>
		tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2232      	movs	r2, #50	; 0x32
 8004e72:	2104      	movs	r1, #4
 8004e74:	4851      	ldr	r0, [pc, #324]	; (8004fbc <visualisationMenu+0x27c>)
 8004e76:	f7fd f833 	bl	8001ee0 <tftPrint>

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	226e      	movs	r2, #110	; 0x6e
 8004e7e:	2104      	movs	r1, #4
 8004e80:	484f      	ldr	r0, [pc, #316]	; (8004fc0 <visualisationMenu+0x280>)
 8004e82:	f7fd f82d 	bl	8001ee0 <tftPrint>
		break;
 8004e86:	e081      	b.n	8004f8c <visualisationMenu+0x24c>
	case SCREEN_PAGE3:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8004e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f7ff fc5f 	bl	8004750 <visualisationMenuGrid>

		tftPrint("Current Mode", POS_SCREEN_LINE_3);
 8004e92:	2300      	movs	r3, #0
 8004e94:	2228      	movs	r2, #40	; 0x28
 8004e96:	2104      	movs	r1, #4
 8004e98:	484a      	ldr	r0, [pc, #296]	; (8004fc4 <visualisationMenu+0x284>)
 8004e9a:	f7fd f821 	bl	8001ee0 <tftPrint>
		switch(TOFSENS->Ranging_Profiles_t) {
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	88db      	ldrh	r3, [r3, #6]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d827      	bhi.n	8004ef8 <visualisationMenu+0x1b8>
 8004ea8:	a201      	add	r2, pc, #4	; (adr r2, 8004eb0 <visualisationMenu+0x170>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004ec1 	.word	0x08004ec1
 8004eb4:	08004ecf 	.word	0x08004ecf
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004eeb 	.word	0x08004eeb
		    case TOF_DEFAULT_MODE_D:
		        tftPrint("DEFAULT        ", POS_SCREEN_LINE_4);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	2232      	movs	r2, #50	; 0x32
 8004ec4:	2104      	movs	r1, #4
 8004ec6:	4840      	ldr	r0, [pc, #256]	; (8004fc8 <visualisationMenu+0x288>)
 8004ec8:	f7fd f80a 	bl	8001ee0 <tftPrint>
		        break;
 8004ecc:	e01b      	b.n	8004f06 <visualisationMenu+0x1c6>

		    case TOF_HIGH_SPEED_MODE_S:
		        tftPrint("HIGH SPEED     ", POS_SCREEN_LINE_4);
 8004ece:	2300      	movs	r3, #0
 8004ed0:	2232      	movs	r2, #50	; 0x32
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	483d      	ldr	r0, [pc, #244]	; (8004fcc <visualisationMenu+0x28c>)
 8004ed6:	f7fd f803 	bl	8001ee0 <tftPrint>
		        break;
 8004eda:	e014      	b.n	8004f06 <visualisationMenu+0x1c6>

		    case TOF_HIGH_ACCURACY_MODE_A:
		        tftPrint("HIGH ACCURACY  ", POS_SCREEN_LINE_4);
 8004edc:	2300      	movs	r3, #0
 8004ede:	2232      	movs	r2, #50	; 0x32
 8004ee0:	2104      	movs	r1, #4
 8004ee2:	483b      	ldr	r0, [pc, #236]	; (8004fd0 <visualisationMenu+0x290>)
 8004ee4:	f7fc fffc 	bl	8001ee0 <tftPrint>
		        break;
 8004ee8:	e00d      	b.n	8004f06 <visualisationMenu+0x1c6>

		    case TOF_LONG_RANGE_MODE_R:
		        tftPrint("LONG RANGE     ", POS_SCREEN_LINE_4);
 8004eea:	2300      	movs	r3, #0
 8004eec:	2232      	movs	r2, #50	; 0x32
 8004eee:	2104      	movs	r1, #4
 8004ef0:	4838      	ldr	r0, [pc, #224]	; (8004fd4 <visualisationMenu+0x294>)
 8004ef2:	f7fc fff5 	bl	8001ee0 <tftPrint>
		        break;
 8004ef6:	e006      	b.n	8004f06 <visualisationMenu+0x1c6>

		    default:
		        tftPrint("RANGINGERROR   ", POS_SCREEN_LINE_4);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2232      	movs	r2, #50	; 0x32
 8004efc:	2104      	movs	r1, #4
 8004efe:	4836      	ldr	r0, [pc, #216]	; (8004fd8 <visualisationMenu+0x298>)
 8004f00:	f7fc ffee 	bl	8001ee0 <tftPrint>
		        break;
 8004f04:	bf00      	nop
		}

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8004f06:	2300      	movs	r3, #0
 8004f08:	226e      	movs	r2, #110	; 0x6e
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	482c      	ldr	r0, [pc, #176]	; (8004fc0 <visualisationMenu+0x280>)
 8004f0e:	f7fc ffe7 	bl	8001ee0 <tftPrint>
		break;
 8004f12:	e03b      	b.n	8004f8c <visualisationMenu+0x24c>
	case SCREEN_PAGE4:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8004f14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f7ff fc19 	bl	8004750 <visualisationMenuGrid>
		tftPrint("INFO:", POS_SCREEN_LINE_1);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	2211      	movs	r2, #17
 8004f22:	2104      	movs	r1, #4
 8004f24:	482d      	ldr	r0, [pc, #180]	; (8004fdc <visualisationMenu+0x29c>)
 8004f26:	f7fc ffdb 	bl	8001ee0 <tftPrint>
		tftPrint("NAVIGATION:", POS_SCREEN_LINE_2);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	221e      	movs	r2, #30
 8004f2e:	2104      	movs	r1, #4
 8004f30:	482b      	ldr	r0, [pc, #172]	; (8004fe0 <visualisationMenu+0x2a0>)
 8004f32:	f7fc ffd5 	bl	8001ee0 <tftPrint>
		tftPrint("in the manual!     ", POS_SCREEN_LINE_9);
 8004f36:	2300      	movs	r3, #0
 8004f38:	2264      	movs	r2, #100	; 0x64
 8004f3a:	2104      	movs	r1, #4
 8004f3c:	4829      	ldr	r0, [pc, #164]	; (8004fe4 <visualisationMenu+0x2a4>)
 8004f3e:	f7fc ffcf 	bl	8001ee0 <tftPrint>
		tftPrint("Further information", POS_SCREEN_LINE_8);
 8004f42:	2300      	movs	r3, #0
 8004f44:	225a      	movs	r2, #90	; 0x5a
 8004f46:	2104      	movs	r1, #4
 8004f48:	4827      	ldr	r0, [pc, #156]	; (8004fe8 <visualisationMenu+0x2a8>)
 8004f4a:	f7fc ffc9 	bl	8001ee0 <tftPrint>
		tftPrint("       through menu", POS_SCREEN_LINE_6);
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2246      	movs	r2, #70	; 0x46
 8004f52:	2104      	movs	r1, #4
 8004f54:	4825      	ldr	r0, [pc, #148]	; (8004fec <visualisationMenu+0x2ac>)
 8004f56:	f7fc ffc3 	bl	8001ee0 <tftPrint>
		tftPrint(" - rotate: navigate", POS_SCREEN_LINE_5);
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	223c      	movs	r2, #60	; 0x3c
 8004f5e:	2104      	movs	r1, #4
 8004f60:	4823      	ldr	r0, [pc, #140]	; (8004ff0 <visualisationMenu+0x2b0>)
 8004f62:	f7fc ffbd 	bl	8001ee0 <tftPrint>
		tftPrint("         - go back ", POS_SCREEN_LINE_4);
 8004f66:	2300      	movs	r3, #0
 8004f68:	2232      	movs	r2, #50	; 0x32
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4821      	ldr	r0, [pc, #132]	; (8004ff4 <visualisationMenu+0x2b4>)
 8004f6e:	f7fc ffb7 	bl	8001ee0 <tftPrint>
		tftPrint(" - push: - enter   ", POS_SCREEN_LINE_3);
 8004f72:	2300      	movs	r3, #0
 8004f74:	2228      	movs	r2, #40	; 0x28
 8004f76:	2104      	movs	r1, #4
 8004f78:	481f      	ldr	r0, [pc, #124]	; (8004ff8 <visualisationMenu+0x2b8>)
 8004f7a:	f7fc ffb1 	bl	8001ee0 <tftPrint>
		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	226e      	movs	r2, #110	; 0x6e
 8004f82:	2104      	movs	r1, #4
 8004f84:	480e      	ldr	r0, [pc, #56]	; (8004fc0 <visualisationMenu+0x280>)
 8004f86:	f7fc ffab 	bl	8001ee0 <tftPrint>
		break;
 8004f8a:	bf00      	nop
	}
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd90      	pop	{r4, r7, pc}
 8004f94:	0800ca2c 	.word	0x0800ca2c
 8004f98:	0800ca34 	.word	0x0800ca34
 8004f9c:	0800ca3c 	.word	0x0800ca3c
 8004fa0:	0800ca40 	.word	0x0800ca40
 8004fa4:	0800ca4c 	.word	0x0800ca4c
 8004fa8:	0800ca54 	.word	0x0800ca54
 8004fac:	0800ca5c 	.word	0x0800ca5c
 8004fb0:	0800ca70 	.word	0x0800ca70
 8004fb4:	0800ca7c 	.word	0x0800ca7c
 8004fb8:	0800ca90 	.word	0x0800ca90
 8004fbc:	0800ca9c 	.word	0x0800ca9c
 8004fc0:	0800caac 	.word	0x0800caac
 8004fc4:	0800cac0 	.word	0x0800cac0
 8004fc8:	0800cad0 	.word	0x0800cad0
 8004fcc:	0800cae0 	.word	0x0800cae0
 8004fd0:	0800caf0 	.word	0x0800caf0
 8004fd4:	0800cb00 	.word	0x0800cb00
 8004fd8:	0800cb10 	.word	0x0800cb10
 8004fdc:	0800cb20 	.word	0x0800cb20
 8004fe0:	0800cb28 	.word	0x0800cb28
 8004fe4:	0800cb34 	.word	0x0800cb34
 8004fe8:	0800cb48 	.word	0x0800cb48
 8004fec:	0800cb5c 	.word	0x0800cb5c
 8004ff0:	0800cb70 	.word	0x0800cb70
 8004ff4:	0800cb84 	.word	0x0800cb84
 8004ff8:	0800cb98 	.word	0x0800cb98

08004ffc <visualisationClearBody>:
 * @function:	 visualisationClearBody
 *
 * @brief: 		 clear content field to black
 */
void visualisationClearBody(void)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af02      	add	r7, sp, #8
	tftFillRect(0, 14, tftGetWidth(), tftGetHeight() - 14, tft_BLACK);
 8005002:	f7fd f871 	bl	80020e8 <tftGetWidth>
 8005006:	4603      	mov	r3, r0
 8005008:	b21c      	sxth	r4, r3
 800500a:	f7fd f879 	bl	8002100 <tftGetHeight>
 800500e:	4603      	mov	r3, r0
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b0e      	subs	r3, #14
 8005014:	b29b      	uxth	r3, r3
 8005016:	b21b      	sxth	r3, r3
 8005018:	2200      	movs	r2, #0
 800501a:	9200      	str	r2, [sp, #0]
 800501c:	4622      	mov	r2, r4
 800501e:	210e      	movs	r1, #14
 8005020:	2000      	movs	r0, #0
 8005022:	f7fc fb77 	bl	8001714 <tftFillRect>
}
 8005026:	bf00      	nop
 8005028:	3704      	adds	r7, #4
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
	...

08005030 <visualisationShowError>:
 * @brief: 		 show error screen for not initialized sensor
 *
 * @parameters:	 SCREEN_PAGES_t page:	which sensor is not initialized
 */
void visualisationShowError(SCREEN_PAGES_t page)
{
 8005030:	b590      	push	{r4, r7, lr}
 8005032:	b085      	sub	sp, #20
 8005034:	af02      	add	r7, sp, #8
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]
	tftFillRect(14, 14, tftGetWidth() - 28, tftGetHeight() - 28, tft_YELLOW);
 800503a:	f7fd f855 	bl	80020e8 <tftGetWidth>
 800503e:	4603      	mov	r3, r0
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b1c      	subs	r3, #28
 8005044:	b29b      	uxth	r3, r3
 8005046:	b21c      	sxth	r4, r3
 8005048:	f7fd f85a 	bl	8002100 <tftGetHeight>
 800504c:	4603      	mov	r3, r0
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b1c      	subs	r3, #28
 8005052:	b29b      	uxth	r3, r3
 8005054:	b21b      	sxth	r3, r3
 8005056:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800505a:	9200      	str	r2, [sp, #0]
 800505c:	4622      	mov	r2, r4
 800505e:	210e      	movs	r1, #14
 8005060:	200e      	movs	r0, #14
 8005062:	f7fc fb57 	bl	8001714 <tftFillRect>
	tftDrawRect(14, 14, tftGetWidth() - 14, tftGetHeight() - 14, tft_RED);
 8005066:	f7fd f83f 	bl	80020e8 <tftGetWidth>
 800506a:	4603      	mov	r3, r0
 800506c:	3b0e      	subs	r3, #14
 800506e:	b2dc      	uxtb	r4, r3
 8005070:	f7fd f846 	bl	8002100 <tftGetHeight>
 8005074:	4603      	mov	r3, r0
 8005076:	3b0e      	subs	r3, #14
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800507e:	9200      	str	r2, [sp, #0]
 8005080:	4622      	mov	r2, r4
 8005082:	210e      	movs	r1, #14
 8005084:	200e      	movs	r0, #14
 8005086:	f7fc fc89 	bl	800199c <tftDrawRect>

	tftPrint("ERROR", 60, 25, 0);
 800508a:	2300      	movs	r3, #0
 800508c:	2219      	movs	r2, #25
 800508e:	213c      	movs	r1, #60	; 0x3c
 8005090:	4812      	ldr	r0, [pc, #72]	; (80050dc <visualisationShowError+0xac>)
 8005092:	f7fc ff25 	bl	8001ee0 <tftPrint>
	tftPrint("not connected", 27, 55, 0);
 8005096:	2300      	movs	r3, #0
 8005098:	2237      	movs	r2, #55	; 0x37
 800509a:	211b      	movs	r1, #27
 800509c:	4810      	ldr	r0, [pc, #64]	; (80050e0 <visualisationShowError+0xb0>)
 800509e:	f7fc ff1f 	bl	8001ee0 <tftPrint>

	// which sensor
	switch(page)
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d002      	beq.n	80050ae <visualisationShowError+0x7e>
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d007      	beq.n	80050bc <visualisationShowError+0x8c>
			break;
		case SCREEN_PAGE2:
			tftPrint("Ranging-Mode", 40, 40, 0);
			break;
		default:
			break;
 80050ac:	e00d      	b.n	80050ca <visualisationShowError+0x9a>
			tftPrint("TOF-sensor", 40, 40, 0);
 80050ae:	2300      	movs	r3, #0
 80050b0:	2228      	movs	r2, #40	; 0x28
 80050b2:	2128      	movs	r1, #40	; 0x28
 80050b4:	480b      	ldr	r0, [pc, #44]	; (80050e4 <visualisationShowError+0xb4>)
 80050b6:	f7fc ff13 	bl	8001ee0 <tftPrint>
			break;
 80050ba:	e006      	b.n	80050ca <visualisationShowError+0x9a>
			tftPrint("Ranging-Mode", 40, 40, 0);
 80050bc:	2300      	movs	r3, #0
 80050be:	2228      	movs	r2, #40	; 0x28
 80050c0:	2128      	movs	r1, #40	; 0x28
 80050c2:	4809      	ldr	r0, [pc, #36]	; (80050e8 <visualisationShowError+0xb8>)
 80050c4:	f7fc ff0c 	bl	8001ee0 <tftPrint>
			break;
 80050c8:	bf00      	nop
	}

	// give time to read
	delayms(2500);
 80050ca:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80050ce:	f7fc f973 	bl	80013b8 <delayms>
}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd90      	pop	{r4, r7, pc}
 80050da:	bf00      	nop
 80050dc:	0800cbac 	.word	0x0800cbac
 80050e0:	0800cbb4 	.word	0x0800cbb4
 80050e4:	0800cbc4 	.word	0x0800cbc4
 80050e8:	0800cbd0 	.word	0x0800cbd0

080050ec <visualisationTOF>:
 *
 * @parameters:	 uint16_t distance:		current distance
 * 				 uint16_t *olddistance: old distance
 */
void visualisationTOF(TOFSensor_t* TOFSENS)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b09c      	sub	sp, #112	; 0x70
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
    static uint16_t olddistance_var = TOF_VL53L0X_OUT_OF_RANGE; // Statische Variable zur Speicherung des alten Werts
    uint16_t* olddistance = &olddistance_var; // Pointer auf die statische Variable
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <visualisationTOF+0x70>)
 80050f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    // if value is not out of range
    if (TOFSENS->distanceFromTOF != TOF_VL53L0X_OUT_OF_RANGE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	891b      	ldrh	r3, [r3, #8]
 80050fc:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8005100:	4293      	cmp	r3, r2
 8005102:	d01c      	beq.n	800513e <visualisationTOF+0x52>
    {
        // if it was out of range, restore unit visualization
        if (*olddistance == TOF_VL53L0X_OUT_OF_RANGE)
 8005104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005106:	881b      	ldrh	r3, [r3, #0]
 8005108:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800510c:	4293      	cmp	r3, r2
 800510e:	d105      	bne.n	800511c <visualisationTOF+0x30>
        {
            tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8005110:	2300      	movs	r3, #0
 8005112:	2232      	movs	r2, #50	; 0x32
 8005114:	2104      	movs	r1, #4
 8005116:	4812      	ldr	r0, [pc, #72]	; (8005160 <visualisationTOF+0x74>)
 8005118:	f7fc fee2 	bl	8001ee0 <tftPrint>
        }

        // visualize mm in 4 digits
        char buffer[100];
        sprintf(buffer, "%04d", TOFSENS->distanceFromTOF);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	891b      	ldrh	r3, [r3, #8]
 8005120:	461a      	mov	r2, r3
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	490f      	ldr	r1, [pc, #60]	; (8005164 <visualisationTOF+0x78>)
 8005128:	4618      	mov	r0, r3
 800512a:	f002 fdb9 	bl	8007ca0 <siprintf>
        tftPrint(buffer, POS_SCREEN_LINE_4);
 800512e:	f107 0008 	add.w	r0, r7, #8
 8005132:	2300      	movs	r3, #0
 8005134:	2232      	movs	r2, #50	; 0x32
 8005136:	2104      	movs	r1, #4
 8005138:	f7fc fed2 	bl	8001ee0 <tftPrint>
 800513c:	e005      	b.n	800514a <visualisationTOF+0x5e>
    }
    // if value is out of range
    else
    {
        tftPrint("out of range", POS_SCREEN_LINE_4);
 800513e:	2300      	movs	r3, #0
 8005140:	2232      	movs	r2, #50	; 0x32
 8005142:	2104      	movs	r1, #4
 8005144:	4808      	ldr	r0, [pc, #32]	; (8005168 <visualisationTOF+0x7c>)
 8005146:	f7fc fecb 	bl	8001ee0 <tftPrint>
    }

    // store current distance to old value
    *olddistance = TOFSENS->distanceFromTOF;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	891a      	ldrh	r2, [r3, #8]
 800514e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005150:	801a      	strh	r2, [r3, #0]
}
 8005152:	bf00      	nop
 8005154:	3770      	adds	r7, #112	; 0x70
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000018 	.word	0x20000018
 8005160:	0800ca9c 	.word	0x0800ca9c
 8005164:	0800cbe0 	.word	0x0800cbe0
 8005168:	0800cbe8 	.word	0x0800cbe8

0800516c <visualisationRangingProfileTOF>:


void visualisationRangingProfileTOF(MODE_PAGES_t* MODE){
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	switch((uint16_t) MODE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	b29b      	uxth	r3, r3
 8005178:	3b01      	subs	r3, #1
 800517a:	2b03      	cmp	r3, #3
 800517c:	d826      	bhi.n	80051cc <visualisationRangingProfileTOF+0x60>
 800517e:	a201      	add	r2, pc, #4	; (adr r2, 8005184 <visualisationRangingProfileTOF+0x18>)
 8005180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005184:	08005195 	.word	0x08005195
 8005188:	080051a3 	.word	0x080051a3
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051bf 	.word	0x080051bf
	{
		case DEFAULTMODE:
			tftPrint("DEFAULT MODE      ", POS_SCREEN_LINE_6);
 8005194:	2300      	movs	r3, #0
 8005196:	2246      	movs	r2, #70	; 0x46
 8005198:	2104      	movs	r1, #4
 800519a:	480f      	ldr	r0, [pc, #60]	; (80051d8 <visualisationRangingProfileTOF+0x6c>)
 800519c:	f7fc fea0 	bl	8001ee0 <tftPrint>
			break;
 80051a0:	e015      	b.n	80051ce <visualisationRangingProfileTOF+0x62>
		case HIGHSPEEDMODE:
			tftPrint("HIGH SPEED MODE   ", POS_SCREEN_LINE_6);
 80051a2:	2300      	movs	r3, #0
 80051a4:	2246      	movs	r2, #70	; 0x46
 80051a6:	2104      	movs	r1, #4
 80051a8:	480c      	ldr	r0, [pc, #48]	; (80051dc <visualisationRangingProfileTOF+0x70>)
 80051aa:	f7fc fe99 	bl	8001ee0 <tftPrint>
			break;
 80051ae:	e00e      	b.n	80051ce <visualisationRangingProfileTOF+0x62>
		case HIGHACCURACYMODE:
			tftPrint("HIGH ACCURACY MODE", POS_SCREEN_LINE_6);
 80051b0:	2300      	movs	r3, #0
 80051b2:	2246      	movs	r2, #70	; 0x46
 80051b4:	2104      	movs	r1, #4
 80051b6:	480a      	ldr	r0, [pc, #40]	; (80051e0 <visualisationRangingProfileTOF+0x74>)
 80051b8:	f7fc fe92 	bl	8001ee0 <tftPrint>
			break;
 80051bc:	e007      	b.n	80051ce <visualisationRangingProfileTOF+0x62>
		case LONGRANGEMODE:
			tftPrint("LONG RANGE MODE   ", POS_SCREEN_LINE_6);
 80051be:	2300      	movs	r3, #0
 80051c0:	2246      	movs	r2, #70	; 0x46
 80051c2:	2104      	movs	r1, #4
 80051c4:	4807      	ldr	r0, [pc, #28]	; (80051e4 <visualisationRangingProfileTOF+0x78>)
 80051c6:	f7fc fe8b 	bl	8001ee0 <tftPrint>
			break;
 80051ca:	e000      	b.n	80051ce <visualisationRangingProfileTOF+0x62>
		default:
			break;
 80051cc:	bf00      	nop
	}


}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	0800cbf8 	.word	0x0800cbf8
 80051dc:	0800cc0c 	.word	0x0800cc0c
 80051e0:	0800cc20 	.word	0x0800cc20
 80051e4:	0800cc34 	.word	0x0800cc34

080051e8 <visualisationSensorRecognized>:
 * @brief: 		 show recognition of sensor
 *
 * @parameters:	 SENSOR_t sensor:	which sensor is recognized
 */
void visualisationSensorRecognized(SENSOR_t sensor)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
	switch(sensor)
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d852      	bhi.n	800529e <visualisationSensorRecognized+0xb6>
 80051f8:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <visualisationSensorRecognized+0x18>)
 80051fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fe:	bf00      	nop
 8005200:	08005215 	.word	0x08005215
 8005204:	0800522f 	.word	0x0800522f
 8005208:	08005249 	.word	0x08005249
 800520c:	08005263 	.word	0x08005263
 8005210:	0800527d 	.word	0x0800527d
	{
	case VISUALISATION_BMA020:
		tftPrint("BMA020 recognized!", POS_SCREEN_LINE_2);
 8005214:	2300      	movs	r3, #0
 8005216:	221e      	movs	r2, #30
 8005218:	2104      	movs	r1, #4
 800521a:	4823      	ldr	r0, [pc, #140]	; (80052a8 <visualisationSensorRecognized+0xc0>)
 800521c:	f7fc fe60 	bl	8001ee0 <tftPrint>
		tftPrint("Address: 0x38", POS_SCREEN_LINE_3);
 8005220:	2300      	movs	r3, #0
 8005222:	2228      	movs	r2, #40	; 0x28
 8005224:	2104      	movs	r1, #4
 8005226:	4821      	ldr	r0, [pc, #132]	; (80052ac <visualisationSensorRecognized+0xc4>)
 8005228:	f7fc fe5a 	bl	8001ee0 <tftPrint>
		break;
 800522c:	e037      	b.n	800529e <visualisationSensorRecognized+0xb6>
	case VISUALISATION_MPU6050:
		tftPrint("MPU6050 recognized!", POS_SCREEN_LINE_2);
 800522e:	2300      	movs	r3, #0
 8005230:	221e      	movs	r2, #30
 8005232:	2104      	movs	r1, #4
 8005234:	481e      	ldr	r0, [pc, #120]	; (80052b0 <visualisationSensorRecognized+0xc8>)
 8005236:	f7fc fe53 	bl	8001ee0 <tftPrint>
		tftPrint("Address: 0x68", POS_SCREEN_LINE_3);
 800523a:	2300      	movs	r3, #0
 800523c:	2228      	movs	r2, #40	; 0x28
 800523e:	2104      	movs	r1, #4
 8005240:	481c      	ldr	r0, [pc, #112]	; (80052b4 <visualisationSensorRecognized+0xcc>)
 8005242:	f7fc fe4d 	bl	8001ee0 <tftPrint>
		break;
 8005246:	e02a      	b.n	800529e <visualisationSensorRecognized+0xb6>
	case VISUALISATION_LIS3DH:
		tftPrint("LIS3DH recognized!", POS_SCREEN_LINE_2);
 8005248:	2300      	movs	r3, #0
 800524a:	221e      	movs	r2, #30
 800524c:	2104      	movs	r1, #4
 800524e:	481a      	ldr	r0, [pc, #104]	; (80052b8 <visualisationSensorRecognized+0xd0>)
 8005250:	f7fc fe46 	bl	8001ee0 <tftPrint>
		tftPrint("Address: 0x18", POS_SCREEN_LINE_3);
 8005254:	2300      	movs	r3, #0
 8005256:	2228      	movs	r2, #40	; 0x28
 8005258:	2104      	movs	r1, #4
 800525a:	4818      	ldr	r0, [pc, #96]	; (80052bc <visualisationSensorRecognized+0xd4>)
 800525c:	f7fc fe40 	bl	8001ee0 <tftPrint>
		break;
 8005260:	e01d      	b.n	800529e <visualisationSensorRecognized+0xb6>
	case VISUALISATION_VL53LOX:
		tftPrint("TOF recognized!", POS_SCREEN_LINE_2);
 8005262:	2300      	movs	r3, #0
 8005264:	221e      	movs	r2, #30
 8005266:	2104      	movs	r1, #4
 8005268:	4815      	ldr	r0, [pc, #84]	; (80052c0 <visualisationSensorRecognized+0xd8>)
 800526a:	f7fc fe39 	bl	8001ee0 <tftPrint>
		tftPrint("Address: 0x29", POS_SCREEN_LINE_3);
 800526e:	2300      	movs	r3, #0
 8005270:	2228      	movs	r2, #40	; 0x28
 8005272:	2104      	movs	r1, #4
 8005274:	4813      	ldr	r0, [pc, #76]	; (80052c4 <visualisationSensorRecognized+0xdc>)
 8005276:	f7fc fe33 	bl	8001ee0 <tftPrint>
		break;
 800527a:	e010      	b.n	800529e <visualisationSensorRecognized+0xb6>
	case VISUALISATION_UNKNOWN:
		tftPrint("Unknown sensor!", POS_SCREEN_LINE_3);
 800527c:	2300      	movs	r3, #0
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	2104      	movs	r1, #4
 8005282:	4811      	ldr	r0, [pc, #68]	; (80052c8 <visualisationSensorRecognized+0xe0>)
 8005284:	f7fc fe2c 	bl	8001ee0 <tftPrint>
		delayms(1000);
 8005288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800528c:	f7fc f894 	bl	80013b8 <delayms>
		tftPrint("               ", POS_SCREEN_LINE_3);
 8005290:	2300      	movs	r3, #0
 8005292:	2228      	movs	r2, #40	; 0x28
 8005294:	2104      	movs	r1, #4
 8005296:	480d      	ldr	r0, [pc, #52]	; (80052cc <visualisationSensorRecognized+0xe4>)
 8005298:	f7fc fe22 	bl	8001ee0 <tftPrint>
		break;
 800529c:	bf00      	nop
	}
}
 800529e:	bf00      	nop
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	0800cc48 	.word	0x0800cc48
 80052ac:	0800cc5c 	.word	0x0800cc5c
 80052b0:	0800cc6c 	.word	0x0800cc6c
 80052b4:	0800cc80 	.word	0x0800cc80
 80052b8:	0800cc90 	.word	0x0800cc90
 80052bc:	0800cca4 	.word	0x0800cca4
 80052c0:	0800ccb4 	.word	0x0800ccb4
 80052c4:	0800ccc4 	.word	0x0800ccc4
 80052c8:	0800ccd4 	.word	0x0800ccd4
 80052cc:	0800cce4 	.word	0x0800cce4

080052d0 <visualisationI2CScanDone>:
 * @brief: 		 show i2c scan through all addresses is done
 *
 * @parameters:	 uint8_t i2cInitAttempts:	attempts left
 */
void visualisationI2CScanDone(uint8_t i2cInitAttempts)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
	tftPrint("No Sensor found   ", POS_SCREEN_LINE_2);
 80052da:	2300      	movs	r3, #0
 80052dc:	221e      	movs	r2, #30
 80052de:	2104      	movs	r1, #4
 80052e0:	4813      	ldr	r0, [pc, #76]	; (8005330 <visualisationI2CScanDone+0x60>)
 80052e2:	f7fc fdfd 	bl	8001ee0 <tftPrint>

	// if there are attempts left, trying again, otherwise leave
	if(i2cInitAttempts > 1)
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d906      	bls.n	80052fa <visualisationI2CScanDone+0x2a>
	{
		tftPrint("trying again!     ", POS_SCREEN_LINE_3);
 80052ec:	2300      	movs	r3, #0
 80052ee:	2228      	movs	r2, #40	; 0x28
 80052f0:	2104      	movs	r1, #4
 80052f2:	4810      	ldr	r0, [pc, #64]	; (8005334 <visualisationI2CScanDone+0x64>)
 80052f4:	f7fc fdf4 	bl	8001ee0 <tftPrint>
 80052f8:	e005      	b.n	8005306 <visualisationI2CScanDone+0x36>
	}
	else
	{
		tftPrint("max attempts!     ", POS_SCREEN_LINE_3);
 80052fa:	2300      	movs	r3, #0
 80052fc:	2228      	movs	r2, #40	; 0x28
 80052fe:	2104      	movs	r1, #4
 8005300:	480d      	ldr	r0, [pc, #52]	; (8005338 <visualisationI2CScanDone+0x68>)
 8005302:	f7fc fded 	bl	8001ee0 <tftPrint>
	}

	// give chance to read
	delayms(3000);
 8005306:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800530a:	f7fc f855 	bl	80013b8 <delayms>


	// restore view
	tftPrint("Address:        ",POS_SCREEN_LINE_2);
 800530e:	2300      	movs	r3, #0
 8005310:	221e      	movs	r2, #30
 8005312:	2104      	movs	r1, #4
 8005314:	4809      	ldr	r0, [pc, #36]	; (800533c <visualisationI2CScanDone+0x6c>)
 8005316:	f7fc fde3 	bl	8001ee0 <tftPrint>
	tftPrint("                ",POS_SCREEN_LINE_3);
 800531a:	2300      	movs	r3, #0
 800531c:	2228      	movs	r2, #40	; 0x28
 800531e:	2104      	movs	r1, #4
 8005320:	4807      	ldr	r0, [pc, #28]	; (8005340 <visualisationI2CScanDone+0x70>)
 8005322:	f7fc fddd 	bl	8001ee0 <tftPrint>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	0800ccf4 	.word	0x0800ccf4
 8005334:	0800cd08 	.word	0x0800cd08
 8005338:	0800cd1c 	.word	0x0800cd1c
 800533c:	0800cd30 	.word	0x0800cd30
 8005340:	0800cd44 	.word	0x0800cd44

08005344 <visualisationSensorInit>:
 * @brief: 		 visualize sensor init step: running or done
 *
 * @parameters:	 VIS_SENSOR_INIT_t step:	running or done
 */
void visualisationSensorInit(VIS_SENSOR_INIT_t step)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
	switch(step)
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <visualisationSensorInit+0x16>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d007      	beq.n	8005368 <visualisationSensorInit+0x24>
		break;
	case SENSOR_INIT_DONE:
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
		break;
	}
}
 8005358:	e00d      	b.n	8005376 <visualisationSensorInit+0x32>
		tftPrint("Sensor Init running", POS_SCREEN_LINE_3);
 800535a:	2300      	movs	r3, #0
 800535c:	2228      	movs	r2, #40	; 0x28
 800535e:	2104      	movs	r1, #4
 8005360:	4807      	ldr	r0, [pc, #28]	; (8005380 <visualisationSensorInit+0x3c>)
 8005362:	f7fc fdbd 	bl	8001ee0 <tftPrint>
		break;
 8005366:	e006      	b.n	8005376 <visualisationSensorInit+0x32>
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
 8005368:	2300      	movs	r3, #0
 800536a:	2228      	movs	r2, #40	; 0x28
 800536c:	2104      	movs	r1, #4
 800536e:	4805      	ldr	r0, [pc, #20]	; (8005384 <visualisationSensorInit+0x40>)
 8005370:	f7fc fdb6 	bl	8001ee0 <tftPrint>
		break;
 8005374:	bf00      	nop
}
 8005376:	bf00      	nop
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	0800cd58 	.word	0x0800cd58
 8005384:	0800cd6c 	.word	0x0800cd6c

08005388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005388:	480d      	ldr	r0, [pc, #52]	; (80053c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800538a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800538c:	f001 fd44 	bl	8006e18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005390:	480c      	ldr	r0, [pc, #48]	; (80053c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8005392:	490d      	ldr	r1, [pc, #52]	; (80053c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005394:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <LoopForever+0xe>)
  movs r3, #0
 8005396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005398:	e002      	b.n	80053a0 <LoopCopyDataInit>

0800539a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800539a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800539c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800539e:	3304      	adds	r3, #4

080053a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053a4:	d3f9      	bcc.n	800539a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053a6:	4a0a      	ldr	r2, [pc, #40]	; (80053d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053a8:	4c0a      	ldr	r4, [pc, #40]	; (80053d4 <LoopForever+0x16>)
  movs r3, #0
 80053aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053ac:	e001      	b.n	80053b2 <LoopFillZerobss>

080053ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053b0:	3204      	adds	r2, #4

080053b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053b4:	d3fb      	bcc.n	80053ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80053b6:	f001 fdc7 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80053ba:	f7fe fd9d 	bl	8003ef8 <main>

080053be <LoopForever>:

LoopForever:
  b LoopForever
 80053be:	e7fe      	b.n	80053be <LoopForever>
  ldr   r0, =_estack
 80053c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80053c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053c8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80053cc:	0800d938 	.word	0x0800d938
  ldr r2, =_sbss
 80053d0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80053d4:	20000268 	.word	0x20000268

080053d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80053d8:	e7fe      	b.n	80053d8 <ADC_IRQHandler>

080053da <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	4603      	mov	r3, r0
 80053e2:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80053e4:	79fb      	ldrb	r3, [r7, #7]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d03e      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d03b      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 80053f0:	79fb      	ldrb	r3, [r7, #7]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d038      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b03      	cmp	r3, #3
 80053fa:	d035      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d032      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	2b05      	cmp	r3, #5
 8005406:	d02f      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005408:	79fb      	ldrb	r3, [r7, #7]
 800540a:	2b06      	cmp	r3, #6
 800540c:	d02c      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 800540e:	79fb      	ldrb	r3, [r7, #7]
 8005410:	2b07      	cmp	r3, #7
 8005412:	d029      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	2b08      	cmp	r3, #8
 8005418:	d026      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	2b09      	cmp	r3, #9
 800541e:	d023      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	2b0a      	cmp	r3, #10
 8005424:	d020      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	2b0b      	cmp	r3, #11
 800542a:	d01d      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d01a      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8005432:	79fb      	ldrb	r3, [r7, #7]
 8005434:	2b0d      	cmp	r3, #13
 8005436:	d017      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005438:	79fb      	ldrb	r3, [r7, #7]
 800543a:	2b0e      	cmp	r3, #14
 800543c:	d014      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d011      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005444:	79fb      	ldrb	r3, [r7, #7]
 8005446:	2b10      	cmp	r3, #16
 8005448:	d00e      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 800544a:	79fb      	ldrb	r3, [r7, #7]
 800544c:	2b11      	cmp	r3, #17
 800544e:	d00b      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	2b12      	cmp	r3, #18
 8005454:	d008      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b14      	cmp	r3, #20
 800545a:	d005      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	2b15      	cmp	r3, #21
 8005460:	d002      	beq.n	8005468 <extiVerifyIrqNum+0x8e>
 8005462:	79fb      	ldrb	r3, [r7, #7]
 8005464:	2b16      	cmp	r3, #22
 8005466:	d101      	bne.n	800546c <extiVerifyIrqNum+0x92>
    {
        return true;
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <extiVerifyIrqNum+0x94>
    }
    return false;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	4603      	mov	r3, r0
 8005482:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <extiVerifyTrigger+0x1c>
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d002      	beq.n	8005496 <extiVerifyTrigger+0x1c>
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d101      	bne.n	800549a <extiVerifyTrigger+0x20>
    {
        return true;
 8005496:	2301      	movs	r3, #1
 8005498:	e000      	b.n	800549c <extiVerifyTrigger+0x22>
    }
    return false;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 80054ae:	2300      	movs	r3, #0
 80054b0:	71fb      	strb	r3, [r7, #7]
 80054b2:	e008      	b.n	80054c6 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 80054b4:	4a09      	ldr	r2, [pc, #36]	; (80054dc <extiInit+0x34>)
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	3302      	adds	r3, #2
 80054ba:	2100      	movs	r1, #0
 80054bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	3301      	adds	r3, #1
 80054c4:	71fb      	strb	r3, [r7, #7]
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d9f3      	bls.n	80054b4 <extiInit+0xc>
    }
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40013800 	.word	0x40013800

080054e0 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f937 	bl	800576c <gpioVerifyPort>
 80054fe:	4603      	mov	r3, r0
 8005500:	f083 0301 	eor.w	r3, r3, #1
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 800550a:	23ff      	movs	r3, #255	; 0xff
 800550c:	e08a      	b.n	8005624 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 f95d 	bl	80057d0 <gpioVerifyPin>
 8005516:	4603      	mov	r3, r0
 8005518:	f083 0301 	eor.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8005522:	23fe      	movs	r3, #254	; 0xfe
 8005524:	e07e      	b.n	8005624 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b0f      	cmp	r3, #15
 800552a:	d841      	bhi.n	80055b0 <extiConfigIrq+0xd0>
 800552c:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <extiConfigIrq+0x54>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	08005575 	.word	0x08005575
 8005538:	08005575 	.word	0x08005575
 800553c:	08005575 	.word	0x08005575
 8005540:	08005575 	.word	0x08005575
 8005544:	08005581 	.word	0x08005581
 8005548:	08005581 	.word	0x08005581
 800554c:	08005581 	.word	0x08005581
 8005550:	08005581 	.word	0x08005581
 8005554:	08005591 	.word	0x08005591
 8005558:	08005591 	.word	0x08005591
 800555c:	08005591 	.word	0x08005591
 8005560:	08005591 	.word	0x08005591
 8005564:	080055a1 	.word	0x080055a1
 8005568:	080055a1 	.word	0x080055a1
 800556c:	080055a1 	.word	0x080055a1
 8005570:	080055a1 	.word	0x080055a1
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8005574:	78fb      	ldrb	r3, [r7, #3]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
            break;
 800557e:	e017      	b.n	80055b0 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	3b04      	subs	r3, #4
 8005584:	b2db      	uxtb	r3, r3
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	73bb      	strb	r3, [r7, #14]
            index = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
            break;
 800558e:	e00f      	b.n	80055b0 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	3b08      	subs	r3, #8
 8005594:	b2db      	uxtb	r3, r3
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	73bb      	strb	r3, [r7, #14]
            index = 2;
 800559a:	2302      	movs	r3, #2
 800559c:	73fb      	strb	r3, [r7, #15]
            break;
 800559e:	e007      	b.n	80055b0 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	3b0c      	subs	r3, #12
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	73bb      	strb	r3, [r7, #14]
            index = 3;
 80055aa:	2303      	movs	r3, #3
 80055ac:	73fb      	strb	r3, [r7, #15]
            break;
 80055ae:	bf00      	nop
    }

    if (GPIOA == port)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1e      	ldr	r2, [pc, #120]	; (800562c <extiConfigIrq+0x14c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d102      	bne.n	80055be <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 80055b8:	2300      	movs	r3, #0
 80055ba:	737b      	strb	r3, [r7, #13]
 80055bc:	e021      	b.n	8005602 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1b      	ldr	r2, [pc, #108]	; (8005630 <extiConfigIrq+0x150>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d102      	bne.n	80055cc <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 80055c6:	2301      	movs	r3, #1
 80055c8:	737b      	strb	r3, [r7, #13]
 80055ca:	e01a      	b.n	8005602 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <extiConfigIrq+0x154>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d102      	bne.n	80055da <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 80055d4:	2302      	movs	r3, #2
 80055d6:	737b      	strb	r3, [r7, #13]
 80055d8:	e013      	b.n	8005602 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a16      	ldr	r2, [pc, #88]	; (8005638 <extiConfigIrq+0x158>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d102      	bne.n	80055e8 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 80055e2:	2303      	movs	r3, #3
 80055e4:	737b      	strb	r3, [r7, #13]
 80055e6:	e00c      	b.n	8005602 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a14      	ldr	r2, [pc, #80]	; (800563c <extiConfigIrq+0x15c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d102      	bne.n	80055f6 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80055f0:	2304      	movs	r3, #4
 80055f2:	737b      	strb	r3, [r7, #13]
 80055f4:	e005      	b.n	8005602 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a11      	ldr	r2, [pc, #68]	; (8005640 <extiConfigIrq+0x160>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80055fe:	2307      	movs	r3, #7
 8005600:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8005602:	4a10      	ldr	r2, [pc, #64]	; (8005644 <extiConfigIrq+0x164>)
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	3302      	adds	r3, #2
 8005608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800560c:	7b79      	ldrb	r1, [r7, #13]
 800560e:	7bbb      	ldrb	r3, [r7, #14]
 8005610:	fa01 f303 	lsl.w	r3, r1, r3
 8005614:	4618      	mov	r0, r3
 8005616:	490b      	ldr	r1, [pc, #44]	; (8005644 <extiConfigIrq+0x164>)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	4302      	orrs	r2, r0
 800561c:	3302      	adds	r3, #2
 800561e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40020000 	.word	0x40020000
 8005630:	40020400 	.word	0x40020400
 8005634:	40020800 	.word	0x40020800
 8005638:	40020c00 	.word	0x40020c00
 800563c:	40021000 	.word	0x40021000
 8005640:	40021c00 	.word	0x40021c00
 8005644:	40013800 	.word	0x40013800

08005648 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8005652:	79fb      	ldrb	r3, [r7, #7]
 8005654:	4618      	mov	r0, r3
 8005656:	f7ff fec0 	bl	80053da <extiVerifyIrqNum>
 800565a:	4603      	mov	r3, r0
 800565c:	f083 0301 	eor.w	r3, r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8005666:	23d8      	movs	r3, #216	; 0xd8
 8005668:	e00a      	b.n	8005680 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <extiEnableIrq+0x40>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	79fa      	ldrb	r2, [r7, #7]
 8005670:	2101      	movs	r1, #1
 8005672:	fa01 f202 	lsl.w	r2, r1, r2
 8005676:	4611      	mov	r1, r2
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <extiEnableIrq+0x40>)
 800567a:	430b      	orrs	r3, r1
 800567c:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40013c00 	.word	0x40013c00

0800568c <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	460a      	mov	r2, r1
 8005696:	71fb      	strb	r3, [r7, #7]
 8005698:	4613      	mov	r3, r2
 800569a:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fe9b 	bl	80053da <extiVerifyIrqNum>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f083 0301 	eor.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 80056b0:	23d8      	movs	r3, #216	; 0xd8
 80056b2:	e055      	b.n	8005760 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 80056b4:	79bb      	ldrb	r3, [r7, #6]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff fedf 	bl	800547a <extiVerifyTrigger>
 80056bc:	4603      	mov	r3, r0
 80056be:	f083 0301 	eor.w	r3, r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 80056c8:	23d7      	movs	r3, #215	; 0xd7
 80056ca:	e049      	b.n	8005760 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d115      	bne.n	80056fe <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80056d2:	4b25      	ldr	r3, [pc, #148]	; (8005768 <extiSetTriggerEdge+0xdc>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	79fa      	ldrb	r2, [r7, #7]
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f202 	lsl.w	r2, r1, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4a21      	ldr	r2, [pc, #132]	; (8005768 <extiSetTriggerEdge+0xdc>)
 80056e2:	430b      	orrs	r3, r1
 80056e4:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 80056e6:	4b20      	ldr	r3, [pc, #128]	; (8005768 <extiSetTriggerEdge+0xdc>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	79fa      	ldrb	r2, [r7, #7]
 80056ec:	2101      	movs	r1, #1
 80056ee:	fa01 f202 	lsl.w	r2, r1, r2
 80056f2:	43d2      	mvns	r2, r2
 80056f4:	4611      	mov	r1, r2
 80056f6:	4a1c      	ldr	r2, [pc, #112]	; (8005768 <extiSetTriggerEdge+0xdc>)
 80056f8:	400b      	ands	r3, r1
 80056fa:	60d3      	str	r3, [r2, #12]
 80056fc:	e02f      	b.n	800575e <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80056fe:	79bb      	ldrb	r3, [r7, #6]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d115      	bne.n	8005730 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8005704:	4b18      	ldr	r3, [pc, #96]	; (8005768 <extiSetTriggerEdge+0xdc>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	79fa      	ldrb	r2, [r7, #7]
 800570a:	2101      	movs	r1, #1
 800570c:	fa01 f202 	lsl.w	r2, r1, r2
 8005710:	4611      	mov	r1, r2
 8005712:	4a15      	ldr	r2, [pc, #84]	; (8005768 <extiSetTriggerEdge+0xdc>)
 8005714:	430b      	orrs	r3, r1
 8005716:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <extiSetTriggerEdge+0xdc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	79fa      	ldrb	r2, [r7, #7]
 800571e:	2101      	movs	r1, #1
 8005720:	fa01 f202 	lsl.w	r2, r1, r2
 8005724:	43d2      	mvns	r2, r2
 8005726:	4611      	mov	r1, r2
 8005728:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <extiSetTriggerEdge+0xdc>)
 800572a:	400b      	ands	r3, r1
 800572c:	6093      	str	r3, [r2, #8]
 800572e:	e016      	b.n	800575e <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8005730:	79bb      	ldrb	r3, [r7, #6]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d113      	bne.n	800575e <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8005736:	4b0c      	ldr	r3, [pc, #48]	; (8005768 <extiSetTriggerEdge+0xdc>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	79fa      	ldrb	r2, [r7, #7]
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f202 	lsl.w	r2, r1, r2
 8005742:	4611      	mov	r1, r2
 8005744:	4a08      	ldr	r2, [pc, #32]	; (8005768 <extiSetTriggerEdge+0xdc>)
 8005746:	430b      	orrs	r3, r1
 8005748:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <extiSetTriggerEdge+0xdc>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	79fa      	ldrb	r2, [r7, #7]
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f202 	lsl.w	r2, r1, r2
 8005756:	4611      	mov	r1, r2
 8005758:	4a03      	ldr	r2, [pc, #12]	; (8005768 <extiSetTriggerEdge+0xdc>)
 800575a:	430b      	orrs	r3, r1
 800575c:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40013c00 	.word	0x40013c00

0800576c <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a10      	ldr	r2, [pc, #64]	; (80057b8 <gpioVerifyPort+0x4c>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <gpioVerifyPort+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <gpioVerifyPort+0x50>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d00f      	beq.n	80057a4 <gpioVerifyPort+0x38>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a0e      	ldr	r2, [pc, #56]	; (80057c0 <gpioVerifyPort+0x54>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <gpioVerifyPort+0x38>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a0d      	ldr	r2, [pc, #52]	; (80057c4 <gpioVerifyPort+0x58>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a0c      	ldr	r2, [pc, #48]	; (80057c8 <gpioVerifyPort+0x5c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <gpioVerifyPort+0x38>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a0b      	ldr	r2, [pc, #44]	; (80057cc <gpioVerifyPort+0x60>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d101      	bne.n	80057a8 <gpioVerifyPort+0x3c>
    {
        return true;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <gpioVerifyPort+0x3e>
    }
    return false;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40020000 	.word	0x40020000
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40020800 	.word	0x40020800
 80057c4:	40020c00 	.word	0x40020c00
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40021c00 	.word	0x40021c00

080057d0 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	4603      	mov	r3, r0
 80057d8:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d02c      	beq.n	800583a <gpioVerifyPin+0x6a>
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d029      	beq.n	800583a <gpioVerifyPin+0x6a>
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d026      	beq.n	800583a <gpioVerifyPin+0x6a>
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d023      	beq.n	800583a <gpioVerifyPin+0x6a>
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d020      	beq.n	800583a <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	2b05      	cmp	r3, #5
 80057fc:	d01d      	beq.n	800583a <gpioVerifyPin+0x6a>
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b06      	cmp	r3, #6
 8005802:	d01a      	beq.n	800583a <gpioVerifyPin+0x6a>
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b07      	cmp	r3, #7
 8005808:	d017      	beq.n	800583a <gpioVerifyPin+0x6a>
 800580a:	79fb      	ldrb	r3, [r7, #7]
 800580c:	2b08      	cmp	r3, #8
 800580e:	d014      	beq.n	800583a <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	2b09      	cmp	r3, #9
 8005814:	d011      	beq.n	800583a <gpioVerifyPin+0x6a>
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d00e      	beq.n	800583a <gpioVerifyPin+0x6a>
 800581c:	79fb      	ldrb	r3, [r7, #7]
 800581e:	2b0b      	cmp	r3, #11
 8005820:	d00b      	beq.n	800583a <gpioVerifyPin+0x6a>
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	2b0c      	cmp	r3, #12
 8005826:	d008      	beq.n	800583a <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	2b0d      	cmp	r3, #13
 800582c:	d005      	beq.n	800583a <gpioVerifyPin+0x6a>
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	2b0e      	cmp	r3, #14
 8005832:	d002      	beq.n	800583a <gpioVerifyPin+0x6a>
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b0f      	cmp	r3, #15
 8005838:	d101      	bne.n	800583e <gpioVerifyPin+0x6e>
    {
        return true;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <gpioVerifyPin+0x70>
    }
    return false;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d02c      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d029      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d026      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b03      	cmp	r3, #3
 800586c:	d023      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 800586e:	79fb      	ldrb	r3, [r7, #7]
 8005870:	2b04      	cmp	r3, #4
 8005872:	d020      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	2b05      	cmp	r3, #5
 8005878:	d01d      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	2b06      	cmp	r3, #6
 800587e:	d01a      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b07      	cmp	r3, #7
 8005884:	d017      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d014      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	2b09      	cmp	r3, #9
 8005890:	d011      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b0a      	cmp	r3, #10
 8005896:	d00e      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b0b      	cmp	r3, #11
 800589c:	d00b      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 800589e:	79fb      	ldrb	r3, [r7, #7]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	d008      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	2b0d      	cmp	r3, #13
 80058a8:	d005      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b0e      	cmp	r3, #14
 80058ae:	d002      	beq.n	80058b6 <gpioVerifyAltFunc+0x6a>
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d101      	bne.n	80058ba <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e000      	b.n	80058bc <gpioVerifyAltFunc+0x70>
    }

    return false;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 80058d2:	79fb      	ldrb	r3, [r7, #7]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d008      	beq.n	80058ea <gpioVerifyPinMode+0x22>
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d005      	beq.n	80058ea <gpioVerifyPinMode+0x22>
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d002      	beq.n	80058ea <gpioVerifyPinMode+0x22>
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d101      	bne.n	80058ee <gpioVerifyPinMode+0x26>
    {
        return true;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <gpioVerifyPinMode+0x28>
    }

    return false;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	4603      	mov	r3, r0
 8005904:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <gpioVerifyOutputType+0x16>
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d101      	bne.n	8005916 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <gpioVerifyPushPullMode+0x1c>
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d002      	beq.n	8005940 <gpioVerifyPushPullMode+0x1c>
 800593a:	79fb      	ldrb	r3, [r7, #7]
 800593c:	2b02      	cmp	r3, #2
 800593e:	d101      	bne.n	8005944 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
	...

08005954 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff05 	bl	800576c <gpioVerifyPort>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d042      	beq.n	80059ee <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a24      	ldr	r2, [pc, #144]	; (80059fc <gpioInitPort+0xa8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d106      	bne.n	800597e <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005970:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <gpioInitPort+0xac>)
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <gpioInitPort+0xac>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6313      	str	r3, [r2, #48]	; 0x30
 800597c:	e035      	b.n	80059ea <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a20      	ldr	r2, [pc, #128]	; (8005a04 <gpioInitPort+0xb0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d106      	bne.n	8005994 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8005986:	4b1e      	ldr	r3, [pc, #120]	; (8005a00 <gpioInitPort+0xac>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	4a1d      	ldr	r2, [pc, #116]	; (8005a00 <gpioInitPort+0xac>)
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	6313      	str	r3, [r2, #48]	; 0x30
 8005992:	e02a      	b.n	80059ea <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <gpioInitPort+0xb4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d106      	bne.n	80059aa <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800599c:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <gpioInitPort+0xac>)
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <gpioInitPort+0xac>)
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	6313      	str	r3, [r2, #48]	; 0x30
 80059a8:	e01f      	b.n	80059ea <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <gpioInitPort+0xb8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d106      	bne.n	80059c0 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <gpioInitPort+0xac>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	4a12      	ldr	r2, [pc, #72]	; (8005a00 <gpioInitPort+0xac>)
 80059b8:	f043 0308 	orr.w	r3, r3, #8
 80059bc:	6313      	str	r3, [r2, #48]	; 0x30
 80059be:	e014      	b.n	80059ea <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a13      	ldr	r2, [pc, #76]	; (8005a10 <gpioInitPort+0xbc>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d106      	bne.n	80059d6 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <gpioInitPort+0xac>)
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <gpioInitPort+0xac>)
 80059ce:	f043 0310 	orr.w	r3, r3, #16
 80059d2:	6313      	str	r3, [r2, #48]	; 0x30
 80059d4:	e009      	b.n	80059ea <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a0e      	ldr	r2, [pc, #56]	; (8005a14 <gpioInitPort+0xc0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d105      	bne.n	80059ea <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80059de:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <gpioInitPort+0xac>)
 80059e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e2:	4a07      	ldr	r2, [pc, #28]	; (8005a00 <gpioInitPort+0xac>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	e001      	b.n	80059f2 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80059ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40020000 	.word	0x40020000
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40020400 	.word	0x40020400
 8005a08:	40020800 	.word	0x40020800
 8005a0c:	40020c00 	.word	0x40020c00
 8005a10:	40021000 	.word	0x40021000
 8005a14:	40021c00 	.word	0x40021c00

08005a18 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff fea3 	bl	800576c <gpioVerifyPort>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f083 0301 	eor.w	r3, r3, #1
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a36:	e041      	b.n	8005abc <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a22      	ldr	r2, [pc, #136]	; (8005ac4 <gpioSelectPort+0xac>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d106      	bne.n	8005a4e <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005a40:	4b21      	ldr	r3, [pc, #132]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	4a20      	ldr	r2, [pc, #128]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005a4c:	e035      	b.n	8005aba <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <gpioSelectPort+0xb4>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d106      	bne.n	8005a64 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	6313      	str	r3, [r2, #48]	; 0x30
 8005a62:	e02a      	b.n	8005aba <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1a      	ldr	r2, [pc, #104]	; (8005ad0 <gpioSelectPort+0xb8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d106      	bne.n	8005a7a <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8005a6c:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a72:	f043 0304 	orr.w	r3, r3, #4
 8005a76:	6313      	str	r3, [r2, #48]	; 0x30
 8005a78:	e01f      	b.n	8005aba <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a15      	ldr	r2, [pc, #84]	; (8005ad4 <gpioSelectPort+0xbc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d106      	bne.n	8005a90 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8005a82:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a10      	ldr	r2, [pc, #64]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	e014      	b.n	8005aba <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a11      	ldr	r2, [pc, #68]	; (8005ad8 <gpioSelectPort+0xc0>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d106      	bne.n	8005aa6 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005a9e:	f043 0310 	orr.w	r3, r3, #16
 8005aa2:	6313      	str	r3, [r2, #48]	; 0x30
 8005aa4:	e009      	b.n	8005aba <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <gpioSelectPort+0xc4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d105      	bne.n	8005aba <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	4a05      	ldr	r2, [pc, #20]	; (8005ac8 <gpioSelectPort+0xb0>)
 8005ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab8:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3708      	adds	r7, #8
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40020000 	.word	0x40020000
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020400 	.word	0x40020400
 8005ad0:	40020800 	.word	0x40020800
 8005ad4:	40020c00 	.word	0x40020c00
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	40021c00 	.word	0x40021c00

08005ae0 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	70fb      	strb	r3, [r7, #3]
 8005aec:	4613      	mov	r3, r2
 8005aee:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff fe3b 	bl	800576c <gpioVerifyPort>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f083 0301 	eor.w	r3, r3, #1
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b06:	e032      	b.n	8005b6e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fe60 	bl	80057d0 <gpioVerifyPin>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f083 0301 	eor.w	r3, r3, #1
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005b1c:	f06f 0301 	mvn.w	r3, #1
 8005b20:	e025      	b.n	8005b6e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8005b22:	78bb      	ldrb	r3, [r7, #2]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff fecf 	bl	80058c8 <gpioVerifyPinMode>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f083 0301 	eor.w	r3, r3, #1
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d002      	beq.n	8005b3c <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8005b36:	f06f 0305 	mvn.w	r3, #5
 8005b3a:	e018      	b.n	8005b6e <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	78fa      	ldrb	r2, [r7, #3]
 8005b42:	0052      	lsls	r2, r2, #1
 8005b44:	2103      	movs	r1, #3
 8005b46:	fa01 f202 	lsl.w	r2, r1, r2
 8005b4a:	43d2      	mvns	r2, r2
 8005b4c:	401a      	ands	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8005b52:	78bb      	ldrb	r3, [r7, #2]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d009      	beq.n	8005b6c <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	78b9      	ldrb	r1, [r7, #2]
 8005b5e:	78fa      	ldrb	r2, [r7, #3]
 8005b60:	0052      	lsls	r2, r2, #1
 8005b62:	fa01 f202 	lsl.w	r2, r1, r2
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff fdf2 	bl	800576c <gpioVerifyPort>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f083 0301 	eor.w	r3, r3, #1
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b98:	e014      	b.n	8005bc4 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8005b9a:	78fb      	ldrb	r3, [r7, #3]
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fe17 	bl	80057d0 <gpioVerifyPin>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f083 0301 	eor.w	r3, r3, #1
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d002      	beq.n	8005bb4 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005bae:	f06f 0301 	mvn.w	r3, #1
 8005bb2:	e007      	b.n	8005bc4 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff fdc7 	bl	800576c <gpioVerifyPort>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bee:	e015      	b.n	8005c1c <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff fdec 	bl	80057d0 <gpioVerifyPin>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f083 0301 	eor.w	r3, r3, #1
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005c04:	f06f 0301 	mvn.w	r3, #1
 8005c08:	e008      	b.n	8005c1c <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	2201      	movs	r2, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <gpioTogglePin>:
 *          <td rowspan="1">Calls the functions gpioSetPin() and gpioResetPin()</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioTogglePin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPin(pin) != true)
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fdcc 	bl	80057d0 <gpioVerifyPin>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	f083 0301 	eor.w	r3, r3, #1
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <gpioTogglePin+0x26>
    {
        return GPIO_INVALID_PIN;
 8005c44:	f06f 0301 	mvn.w	r3, #1
 8005c48:	e013      	b.n	8005c72 <gpioTogglePin+0x4e>
    }
    if (gpioGetPinState(port, pin))
 8005c4a:	78fb      	ldrb	r3, [r7, #3]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f922 	bl	8005e98 <gpioGetPinState>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <gpioTogglePin+0x42>
    {
       gpioResetPin(port, pin);
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff ffb4 	bl	8005bcc <gpioResetPin>
 8005c64:	e004      	b.n	8005c70 <gpioTogglePin+0x4c>
    }
    else
    {
        gpioSetPin(port, pin);
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff83 	bl	8005b76 <gpioSetPin>
    }

    return GPIO_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
 8005c86:	4613      	mov	r3, r2
 8005c88:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7ff fd6e 	bl	800576c <gpioVerifyPort>
 8005c90:	4603      	mov	r3, r0
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8005c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ca0:	e050      	b.n	8005d44 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fd93 	bl	80057d0 <gpioVerifyPin>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f083 0301 	eor.w	r3, r3, #1
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8005cb6:	f06f 0301 	mvn.w	r3, #1
 8005cba:	e043      	b.n	8005d44 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8005cbc:	78bb      	ldrb	r3, [r7, #2]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fdc4 	bl	800584c <gpioVerifyAltFunc>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8005cd0:	f06f 0302 	mvn.w	r3, #2
 8005cd4:	e036      	b.n	8005d44 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	4619      	mov	r1, r3
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7ff feff 	bl	8005ae0 <gpioSelectPinMode>

	if (pin <= PIN7)
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	2b07      	cmp	r3, #7
 8005ce6:	d815      	bhi.n	8005d14 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	78fa      	ldrb	r2, [r7, #3]
 8005cee:	0092      	lsls	r2, r2, #2
 8005cf0:	210f      	movs	r1, #15
 8005cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8005cf6:	43d2      	mvns	r2, r2
 8005cf8:	401a      	ands	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	78b9      	ldrb	r1, [r7, #2]
 8005d04:	78fa      	ldrb	r2, [r7, #3]
 8005d06:	0092      	lsls	r2, r2, #2
 8005d08:	fa01 f202 	lsl.w	r2, r1, r2
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]
 8005d12:	e016      	b.n	8005d42 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	3a08      	subs	r2, #8
 8005d1c:	0092      	lsls	r2, r2, #2
 8005d1e:	210f      	movs	r1, #15
 8005d20:	fa01 f202 	lsl.w	r2, r1, r2
 8005d24:	43d2      	mvns	r2, r2
 8005d26:	401a      	ands	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	78b9      	ldrb	r1, [r7, #2]
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	3a08      	subs	r2, #8
 8005d36:	0092      	lsls	r2, r2, #2
 8005d38:	fa01 f202 	lsl.w	r2, r1, r2
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	460b      	mov	r3, r1
 8005d56:	70fb      	strb	r3, [r7, #3]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fd05 	bl	800576c <gpioVerifyPort>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f083 0301 	eor.w	r3, r3, #1
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8005d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d72:	e030      	b.n	8005dd6 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fd2a 	bl	80057d0 <gpioVerifyPin>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	f083 0301 	eor.w	r3, r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8005d88:	f06f 0301 	mvn.w	r3, #1
 8005d8c:	e023      	b.n	8005dd6 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8005d8e:	78bb      	ldrb	r3, [r7, #2]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7ff fdb3 	bl	80058fc <gpioVerifyOutputType>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8005da2:	f06f 0303 	mvn.w	r3, #3
 8005da6:	e016      	b.n	8005dd6 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f202 	lsl.w	r2, r1, r2
 8005db4:	43d2      	mvns	r2, r2
 8005db6:	401a      	ands	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8005dbc:	78bb      	ldrb	r3, [r7, #2]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	78fa      	ldrb	r2, [r7, #3]
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f202 	lsl.w	r2, r1, r2
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b082      	sub	sp, #8
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
 8005dea:	4613      	mov	r3, r2
 8005dec:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff fcbc 	bl	800576c <gpioVerifyPort>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e04:	e044      	b.n	8005e90 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fce1 	bl	80057d0 <gpioVerifyPin>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	f083 0301 	eor.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005e1a:	f06f 0301 	mvn.w	r3, #1
 8005e1e:	e037      	b.n	8005e90 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8005e20:	78bb      	ldrb	r3, [r7, #2]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff fd7e 	bl	8005924 <gpioVerifyPushPullMode>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f083 0301 	eor.w	r3, r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8005e34:	f06f 0306 	mvn.w	r3, #6
 8005e38:	e02a      	b.n	8005e90 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	0052      	lsls	r2, r2, #1
 8005e42:	2103      	movs	r1, #3
 8005e44:	fa01 f202 	lsl.w	r2, r1, r2
 8005e48:	43d2      	mvns	r2, r2
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d11a      	bne.n	8005e8e <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8005e58:	78bb      	ldrb	r3, [r7, #2]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d10a      	bne.n	8005e74 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	78fa      	ldrb	r2, [r7, #3]
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	2101      	movs	r1, #1
 8005e68:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
 8005e72:	e00c      	b.n	8005e8e <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8005e74:	78bb      	ldrb	r3, [r7, #2]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d109      	bne.n	8005e8e <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	78fa      	ldrb	r2, [r7, #3]
 8005e80:	0052      	lsls	r2, r2, #1
 8005e82:	2102      	movs	r1, #2
 8005e84:	fa01 f202 	lsl.w	r2, r1, r2
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	78fa      	ldrb	r2, [r7, #3]
 8005eaa:	2101      	movs	r1, #1
 8005eac:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8005ee4:	bf00      	nop
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d0f9      	beq.n	8005ee6 <__i2c_start+0x16>
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8005f14:	bf00      	nop
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d0f9      	beq.n	8005f16 <__i2c_stop+0x16>
 }
 8005f22:	bf00      	nop
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8005f38:	bf00      	nop
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bf0c      	ite	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	2300      	movne	r3, #0
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	4313      	orrs	r3, r2
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1ed      	bne.n	8005f3a <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8005f74:	bf00      	nop
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d0f9      	beq.n	8005f76 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e002      	b.n	8005f8e <__i2c_Chk_TX_empty+0x22>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b13      	cmp	r3, #19
 8005f92:	d9f9      	bls.n	8005f88 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	4603      	mov	r3, r0
 8005faa:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d002      	beq.n	8005fb8 <i2cVerifyDutyCycle+0x16>
 8005fb2:	79fb      	ldrb	r3, [r7, #7]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e000      	b.n	8005fbe <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a13      	ldr	r2, [pc, #76]	; (8006024 <i2cSelectI2C+0x58>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d106      	bne.n	8005fea <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005fdc:	4b12      	ldr	r3, [pc, #72]	; (8006028 <i2cSelectI2C+0x5c>)
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	4a11      	ldr	r2, [pc, #68]	; (8006028 <i2cSelectI2C+0x5c>)
 8005fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8005fe8:	e014      	b.n	8006014 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a0f      	ldr	r2, [pc, #60]	; (800602c <i2cSelectI2C+0x60>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d106      	bne.n	8006000 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	; (8006028 <i2cSelectI2C+0x5c>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <i2cSelectI2C+0x5c>)
 8005ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffe:	e009      	b.n	8006014 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a0b      	ldr	r2, [pc, #44]	; (8006030 <i2cSelectI2C+0x64>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d105      	bne.n	8006014 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <i2cSelectI2C+0x5c>)
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <i2cSelectI2C+0x5c>)
 800600e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006012:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40005400 	.word	0x40005400
 8006028:	40023800 	.word	0x40023800
 800602c:	40005800 	.word	0x40005800
 8006030:	40005c00 	.word	0x40005c00

08006034 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <i2cSetClkSpd+0x2a>
 8006046:	78fb      	ldrb	r3, [r7, #3]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d008      	beq.n	800605e <i2cSetClkSpd+0x2a>
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d005      	beq.n	800605e <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	2b03      	cmp	r3, #3
 8006056:	d002      	beq.n	800605e <i2cSetClkSpd+0x2a>
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	2b04      	cmp	r3, #4
 800605c:	d160      	bne.n	8006120 <i2cSetClkSpd+0xec>
    {
    	I2C_WAIT_BUSY(i2c);
 800605e:	bf00      	nop
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f9      	bne.n	8006060 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800607a:	f023 030f 	bic.w	r3, r3, #15
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	61da      	str	r2, [r3, #28]
    	switch (spd)
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d836      	bhi.n	8006102 <i2cSetClkSpd+0xce>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <i2cSetClkSpd+0x68>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060b1 	.word	0x080060b1
 80060a0:	080060bf 	.word	0x080060bf
 80060a4:	080060cd 	.word	0x080060cd
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060e9 	.word	0x080060e9
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	61da      	str	r2, [r3, #28]
				break;
 80060bc:	e02e      	b.n	800611c <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	61da      	str	r2, [r3, #28]
    			break;
 80060ca:	e027      	b.n	800611c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	61da      	str	r2, [r3, #28]
    				break;
 80060d8:	e020      	b.n	800611c <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
     			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	f043 0214 	orr.w	r2, r3, #20
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	61da      	str	r2, [r3, #28]
    			break;
 80060e6:	e019      	b.n	800611c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f043 0205 	orr.w	r2, r3, #5
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	61da      	str	r2, [r3, #28]
				break;
 8006100:	e00c      	b.n	800611c <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	61da      	str	r2, [r3, #28]
    			break;
 800611a:	bf00      	nop
    		}
    	}
    	return I2C_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	e001      	b.n	8006124 <i2cSetClkSpd+0xf0>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8006120:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	70fb      	strb	r3, [r7, #3]
 8006142:	460b      	mov	r3, r1
 8006144:	70bb      	strb	r3, [r7, #2]
 8006146:	4613      	mov	r3, r2
 8006148:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff ff28 	bl	8005fa2 <i2cVerifyDutyCycle>
 8006152:	4603      	mov	r3, r0
 8006154:	f083 0301 	eor.w	r3, r3, #1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d002      	beq.n	8006164 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 800615e:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8006162:	e02f      	b.n	80061c4 <i2cInitI2C+0x94>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800616a:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 0201 	bic.w	r2, r3, #1
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 800617e:	f000 fae3 	bl	8006748 <rccGetPclk1Freq>
 8006182:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a11      	ldr	r2, [pc, #68]	; (80061cc <i2cInitI2C+0x9c>)
 8006188:	fba2 2303 	umull	r2, r3, r2, r3
 800618c:	0c9a      	lsrs	r2, r3, #18
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	605a      	str	r2, [r3, #4]

    i2c->TRISE = 0x0011;                // Set max. rise time
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2211      	movs	r2, #17
 8006196:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 80061ac:	787b      	ldrb	r3, [r7, #1]
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff ff3f 	bl	8006034 <i2cSetClkSpd>

    i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f043 0201 	orr.w	r2, r3, #1
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]

    return I2C_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	431bde83 	.word	0x431bde83

080061d0 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	4608      	mov	r0, r1
 80061da:	4611      	mov	r1, r2
 80061dc:	461a      	mov	r2, r3
 80061de:	4603      	mov	r3, r0
 80061e0:	70fb      	strb	r3, [r7, #3]
 80061e2:	460b      	mov	r3, r1
 80061e4:	70bb      	strb	r3, [r7, #2]
 80061e6:	4613      	mov	r3, r2
 80061e8:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 80061ea:	bf00      	nop
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f9      	bne.n	80061ec <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f7ff fe69 	bl	8005ed0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80061fe:	bf00      	nop
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f9      	beq.n	8006200 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	461a      	mov	r2, r3
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8006216:	bf00      	nop
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0f9      	beq.n	8006218 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff fe83 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff fe9e 	bl	8005f6c <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8006230:	78ba      	ldrb	r2, [r7, #2]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fe98 	bl	8005f6c <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff fe77 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8006242:	787a      	ldrb	r2, [r7, #1]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8006248:	bf00      	nop
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0f9      	beq.n	800624a <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7ff fe6a 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fe4f 	bl	8005f00 <__i2c_stop>


    return I2C_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	72fb      	strb	r3, [r7, #11]
 800627a:	4613      	mov	r3, r2
 800627c:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 800627e:	bf00      	nop
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1f9      	bne.n	8006280 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f7ff fe1f 	bl	8005ed0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8006292:	bf00      	nop
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f9      	beq.n	8006294 <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 80062a0:	7afb      	ldrb	r3, [r7, #11]
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	461a      	mov	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80062aa:	bf00      	nop
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f9      	beq.n	80062ac <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80062b8:	68f8      	ldr	r0, [r7, #12]
 80062ba:	f7ff fe39 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 80062be:	7aba      	ldrb	r2, [r7, #10]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff fe51 	bl	8005f6c <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7ff fe30 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 80062dc:	bf00      	nop
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d0f9      	beq.n	80062de <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	461a      	mov	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80062f8:	bf00      	nop
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f9      	beq.n	80062fa <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fe0c 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff fdf1 	bl	8005f00 <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 800631e:	bf00      	nop
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f9      	beq.n	8006320 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6919      	ldr	r1, [r3, #16]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	b2ca      	uxtb	r2, r1
 8006338:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	607b      	str	r3, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	72fb      	strb	r3, [r7, #11]
 8006352:	4613      	mov	r3, r2
 8006354:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8006356:	bf00      	nop
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1f9      	bne.n	8006358 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff fdb3 	bl	8005ed0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800636a:	bf00      	nop
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f003 0301 	and.w	r3, r3, #1
 8006374:	2b00      	cmp	r3, #0
 8006376:	d0f9      	beq.n	800636c <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	461a      	mov	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8006382:	bf00      	nop
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0f9      	beq.n	8006384 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff fdcd 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8006396:	7aba      	ldrb	r2, [r7, #10]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fde5 	bl	8005f6c <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 80063a2:	bf00      	nop
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f9      	beq.n	80063a4 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fdbd 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 80063c2:	bf00      	nop
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0f9      	beq.n	80063c4 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 80063d0:	7afb      	ldrb	r3, [r7, #11]
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	f043 0301 	orr.w	r3, r3, #1
 80063d8:	461a      	mov	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 80063de:	bf00      	nop
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0f9      	beq.n	80063e0 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80063f8:	e02e      	b.n	8006458 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 80063fa:	7e3b      	ldrb	r3, [r7, #24]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d117      	bne.n	8006430 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fd8f 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8006412:	bf00      	nop
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d0f9      	beq.n	8006414 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6919      	ldr	r1, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	607a      	str	r2, [r7, #4]
 800642a:	b2ca      	uxtb	r2, r1
 800642c:	701a      	strb	r2, [r3, #0]
            break;
 800642e:	e016      	b.n	800645e <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fd7d 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8006436:	bf00      	nop
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f9      	beq.n	8006438 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6919      	ldr	r1, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	607a      	str	r2, [r7, #4]
 800644e:	b2ca      	uxtb	r2, r1
 8006450:	701a      	strb	r2, [r3, #0]
            num--;
 8006452:	7e3b      	ldrb	r3, [r7, #24]
 8006454:	3b01      	subs	r3, #1
 8006456:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8006458:	7e3b      	ldrb	r3, [r7, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1cd      	bne.n	80063fa <i2cBurstRegRead+0xb6>
        }
    }
    //__i2c_dummy_read_SR1_SR2(i2c);
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fd4e 	bl	8005f00 <__i2c_stop>

    return I2C_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f043 0201 	orr.w	r2, r3, #1
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fd17 	bl	8005ed0 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	461a      	mov	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff fd3f 	bl	8005f30 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	e002      	b.n	80064ca <i2cFindSlaveAddr+0x3a>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064d0:	d3f8      	bcc.n	80064c4 <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 80064de:	78fb      	ldrb	r3, [r7, #3]
 80064e0:	e000      	b.n	80064e4 <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 80064e2:	2300      	movs	r3, #0
    }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3710      	adds	r7, #16
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b094      	sub	sp, #80	; 0x50
 80064f2:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80064f4:	2300      	movs	r3, #0
 80064f6:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 80064f8:	2300      	movs	r3, #0
 80064fa:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80064fc:	2300      	movs	r3, #0
 80064fe:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8006500:	2300      	movs	r3, #0
 8006502:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8006504:	4b79      	ldr	r3, [pc, #484]	; (80066ec <rccGetSysClock+0x200>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d00d      	beq.n	800652c <rccGetSysClock+0x40>
 8006510:	2b08      	cmp	r3, #8
 8006512:	f200 80e1 	bhi.w	80066d8 <rccGetSysClock+0x1ec>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <rccGetSysClock+0x34>
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <rccGetSysClock+0x3a>
 800651e:	e0db      	b.n	80066d8 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8006520:	4b73      	ldr	r3, [pc, #460]	; (80066f0 <rccGetSysClock+0x204>)
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8006524:	e0db      	b.n	80066de <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8006526:	4b73      	ldr	r3, [pc, #460]	; (80066f4 <rccGetSysClock+0x208>)
 8006528:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800652a:	e0d8      	b.n	80066de <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652c:	4b6f      	ldr	r3, [pc, #444]	; (80066ec <rccGetSysClock+0x200>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006534:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006536:	4b6d      	ldr	r3, [pc, #436]	; (80066ec <rccGetSysClock+0x200>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d063      	beq.n	800660a <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8006542:	4b6a      	ldr	r3, [pc, #424]	; (80066ec <rccGetSysClock+0x200>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	63bb      	str	r3, [r7, #56]	; 0x38
 800654c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800654e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006554:	633b      	str	r3, [r7, #48]	; 0x30
 8006556:	2300      	movs	r3, #0
 8006558:	637b      	str	r3, [r7, #52]	; 0x34
 800655a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800655e:	4622      	mov	r2, r4
 8006560:	462b      	mov	r3, r5
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	0159      	lsls	r1, r3, #5
 800656c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006570:	0150      	lsls	r0, r2, #5
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	4621      	mov	r1, r4
 8006578:	1a51      	subs	r1, r2, r1
 800657a:	6139      	str	r1, [r7, #16]
 800657c:	4629      	mov	r1, r5
 800657e:	eb63 0301 	sbc.w	r3, r3, r1
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	f04f 0200 	mov.w	r2, #0
 8006588:	f04f 0300 	mov.w	r3, #0
 800658c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006590:	4659      	mov	r1, fp
 8006592:	018b      	lsls	r3, r1, #6
 8006594:	4651      	mov	r1, sl
 8006596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800659a:	4651      	mov	r1, sl
 800659c:	018a      	lsls	r2, r1, #6
 800659e:	4651      	mov	r1, sl
 80065a0:	ebb2 0801 	subs.w	r8, r2, r1
 80065a4:	4659      	mov	r1, fp
 80065a6:	eb63 0901 	sbc.w	r9, r3, r1
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065be:	4690      	mov	r8, r2
 80065c0:	4699      	mov	r9, r3
 80065c2:	4623      	mov	r3, r4
 80065c4:	eb18 0303 	adds.w	r3, r8, r3
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	462b      	mov	r3, r5
 80065cc:	eb49 0303 	adc.w	r3, r9, r3
 80065d0:	60fb      	str	r3, [r7, #12]
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80065de:	4629      	mov	r1, r5
 80065e0:	024b      	lsls	r3, r1, #9
 80065e2:	4621      	mov	r1, r4
 80065e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80065e8:	4621      	mov	r1, r4
 80065ea:	024a      	lsls	r2, r1, #9
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f2:	2200      	movs	r2, #0
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065fc:	f7fa fb4c 	bl	8000c98 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8006604:	4613      	mov	r3, r2
 8006606:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006608:	e058      	b.n	80066bc <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800660a:	4b38      	ldr	r3, [pc, #224]	; (80066ec <rccGetSysClock+0x200>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	099b      	lsrs	r3, r3, #6
 8006610:	2200      	movs	r2, #0
 8006612:	4618      	mov	r0, r3
 8006614:	4611      	mov	r1, r2
 8006616:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800661a:	623b      	str	r3, [r7, #32]
 800661c:	2300      	movs	r3, #0
 800661e:	627b      	str	r3, [r7, #36]	; 0x24
 8006620:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	f04f 0000 	mov.w	r0, #0
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	0159      	lsls	r1, r3, #5
 8006632:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006636:	0150      	lsls	r0, r2, #5
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4641      	mov	r1, r8
 800663e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006642:	4649      	mov	r1, r9
 8006644:	eb63 0b01 	sbc.w	fp, r3, r1
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006654:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006658:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800665c:	ebb2 040a 	subs.w	r4, r2, sl
 8006660:	eb63 050b 	sbc.w	r5, r3, fp
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	f04f 0300 	mov.w	r3, #0
 800666c:	00eb      	lsls	r3, r5, #3
 800666e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006672:	00e2      	lsls	r2, r4, #3
 8006674:	4614      	mov	r4, r2
 8006676:	461d      	mov	r5, r3
 8006678:	4643      	mov	r3, r8
 800667a:	18e3      	adds	r3, r4, r3
 800667c:	603b      	str	r3, [r7, #0]
 800667e:	464b      	mov	r3, r9
 8006680:	eb45 0303 	adc.w	r3, r5, r3
 8006684:	607b      	str	r3, [r7, #4]
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006692:	4629      	mov	r1, r5
 8006694:	028b      	lsls	r3, r1, #10
 8006696:	4621      	mov	r1, r4
 8006698:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800669c:	4621      	mov	r1, r4
 800669e:	028a      	lsls	r2, r1, #10
 80066a0:	4610      	mov	r0, r2
 80066a2:	4619      	mov	r1, r3
 80066a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a6:	2200      	movs	r2, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	61fa      	str	r2, [r7, #28]
 80066ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066b0:	f7fa faf2 	bl	8000c98 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80066b8:	4613      	mov	r3, r2
 80066ba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <rccGetSysClock+0x200>)
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	0c1b      	lsrs	r3, r3, #16
 80066c2:	f003 0303 	and.w	r3, r3, #3
 80066c6:	3301      	adds	r3, #1
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 80066cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80066d6:	e002      	b.n	80066de <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 80066d8:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <rccGetSysClock+0x204>)
 80066da:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80066dc:	bf00      	nop
    }

    return sysClock;
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3750      	adds	r7, #80	; 0x50
 80066e4:	46bd      	mov	sp, r7
 80066e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800
 80066f0:	00f42400 	.word	0x00f42400
 80066f4:	007a1200 	.word	0x007a1200

080066f8 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 80066fe:	f7ff fef5 	bl	80064ec <rccGetSysClock>
 8006702:	4601      	mov	r1, r0
 8006704:	4b0d      	ldr	r3, [pc, #52]	; (800673c <rccGetHclkFreq+0x44>)
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800670c:	22f0      	movs	r2, #240	; 0xf0
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	fa92 f2a2 	rbit	r2, r2
 8006716:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	fab2 f282 	clz	r2, r2
 800671e:	b2d2      	uxtb	r2, r2
 8006720:	40d3      	lsrs	r3, r2
 8006722:	4a07      	ldr	r2, [pc, #28]	; (8006740 <rccGetHclkFreq+0x48>)
 8006724:	5cd3      	ldrb	r3, [r2, r3]
 8006726:	fa21 f303 	lsr.w	r3, r1, r3
 800672a:	4a06      	ldr	r2, [pc, #24]	; (8006744 <rccGetHclkFreq+0x4c>)
 800672c:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <rccGetHclkFreq+0x4c>)
 8006730:	681b      	ldr	r3, [r3, #0]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40023800 	.word	0x40023800
 8006740:	0800d284 	.word	0x0800d284
 8006744:	2000001c 	.word	0x2000001c

08006748 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800674e:	f7ff ffd3 	bl	80066f8 <rccGetHclkFreq>
 8006752:	4601      	mov	r1, r0
 8006754:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <rccGetPclk1Freq+0x3c>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800675c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006760:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	fa92 f2a2 	rbit	r2, r2
 8006768:	603a      	str	r2, [r7, #0]
  return result;
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	fab2 f282 	clz	r2, r2
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	40d3      	lsrs	r3, r2
 8006774:	4a04      	ldr	r2, [pc, #16]	; (8006788 <rccGetPclk1Freq+0x40>)
 8006776:	5cd3      	ldrb	r3, [r2, r3]
 8006778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40023800 	.word	0x40023800
 8006788:	0800d284 	.word	0x0800d284

0800678c <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8006794:	bf00      	nop
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f9      	beq.n	8006796 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 80067a2:	2300      	movs	r3, #0
 80067a4:	81fb      	strh	r3, [r7, #14]
 80067a6:	e002      	b.n	80067ae <__spi_Chk_TX_empty+0x22>
 80067a8:	89fb      	ldrh	r3, [r7, #14]
 80067aa:	3301      	adds	r3, #1
 80067ac:	81fb      	strh	r3, [r7, #14]
 80067ae:	89fb      	ldrh	r3, [r7, #14]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d9f9      	bls.n	80067a8 <__spi_Chk_TX_empty+0x1c>

}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b083      	sub	sp, #12
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 80067ca:	bf00      	nop
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1f9      	bne.n	80067cc <__spi_Chk_notBSY+0xa>
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <spiVerifySPI+0x3c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d00b      	beq.n	8006810 <spiVerifySPI+0x28>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0b      	ldr	r2, [pc, #44]	; (8006828 <spiVerifySPI+0x40>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d007      	beq.n	8006810 <spiVerifySPI+0x28>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a0a      	ldr	r2, [pc, #40]	; (800682c <spiVerifySPI+0x44>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <spiVerifySPI+0x28>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a09      	ldr	r2, [pc, #36]	; (8006830 <spiVerifySPI+0x48>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d101      	bne.n	8006814 <spiVerifySPI+0x2c>
    {
        return true;
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <spiVerifySPI+0x2e>
    }
    return false;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40013000 	.word	0x40013000
 8006828:	40003800 	.word	0x40003800
 800682c:	40003c00 	.word	0x40003c00
 8006830:	40013400 	.word	0x40013400

08006834 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d014      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	2b01      	cmp	r3, #1
 8006848:	d011      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	2b02      	cmp	r3, #2
 800684e:	d00e      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b03      	cmp	r3, #3
 8006854:	d00b      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	2b04      	cmp	r3, #4
 800685a:	d008      	beq.n	800686e <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	2b05      	cmp	r3, #5
 8006860:	d005      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	2b06      	cmp	r3, #6
 8006866:	d002      	beq.n	800686e <spiVerifyClkDivider+0x3a>
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	2b07      	cmp	r3, #7
 800686c:	d101      	bne.n	8006872 <spiVerifyClkDivider+0x3e>
    {
        return true;
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <spiVerifyClkDivider+0x40>
    }
    return false;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 800688a:	79fb      	ldrb	r3, [r7, #7]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d002      	beq.n	8006896 <spiVerifySSM+0x16>
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <spiVerifySSM+0x1a>
    {
        return true;
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <spiVerifySSM+0x1c>
    }
    return false;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <spiVerifyOpMode+0x16>
 80068b8:	79fb      	ldrb	r3, [r7, #7]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d101      	bne.n	80068c2 <spiVerifyOpMode+0x1a>
    {
        return true;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <spiVerifyOpMode+0x1c>
    }
    return false;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d002      	beq.n	80068e6 <spiVerifyPhase+0x16>
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <spiVerifyPhase+0x1a>
    {
        return true;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e000      	b.n	80068ec <spiVerifyPhase+0x1c>
    }
    return false;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8006902:	79fb      	ldrb	r3, [r7, #7]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <spiVerifyIdlePolarity+0x16>
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	4608      	mov	r0, r1
 800692a:	4611      	mov	r1, r2
 800692c:	461a      	mov	r2, r3
 800692e:	4603      	mov	r3, r0
 8006930:	70fb      	strb	r3, [r7, #3]
 8006932:	460b      	mov	r3, r1
 8006934:	70bb      	strb	r3, [r7, #2]
 8006936:	4613      	mov	r3, r2
 8006938:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	4618      	mov	r0, r3
 8006942:	f7ff ff77 	bl	8006834 <spiVerifyClkDivider>
 8006946:	4603      	mov	r3, r0
 8006948:	f083 0301 	eor.w	r3, r3, #1
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8006952:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8006956:	e0cc      	b.n	8006af2 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8006958:	787b      	ldrb	r3, [r7, #1]
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff ff90 	bl	8006880 <spiVerifySSM>
 8006960:	4603      	mov	r3, r0
 8006962:	f083 0301 	eor.w	r3, r3, #1
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d002      	beq.n	8006972 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 800696c:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8006970:	e0bf      	b.n	8006af2 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8006972:	7f3b      	ldrb	r3, [r7, #28]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ff97 	bl	80068a8 <spiVerifyOpMode>
 800697a:	4603      	mov	r3, r0
 800697c:	f083 0301 	eor.w	r3, r3, #1
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8006986:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800698a:	e0b2      	b.n	8006af2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 800698c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff ff9d 	bl	80068d0 <spiVerifyPhase>
 8006996:	4603      	mov	r3, r0
 8006998:	f083 0301 	eor.w	r3, r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 80069a2:	f06f 0356 	mvn.w	r3, #86	; 0x56
 80069a6:	e0a4      	b.n	8006af2 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 80069a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ffa3 	bl	80068f8 <spiVerifyIdlePolarity>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f083 0301 	eor.w	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 80069be:	f06f 0357 	mvn.w	r3, #87	; 0x57
 80069c2:	e096      	b.n	8006af2 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 80069c4:	78fb      	ldrb	r3, [r7, #3]
 80069c6:	2b07      	cmp	r3, #7
 80069c8:	d83a      	bhi.n	8006a40 <spiInitSPI+0x120>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <spiInitSPI+0xb0>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069f1 	.word	0x080069f1
 80069d4:	080069fb 	.word	0x080069fb
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	08006a0f 	.word	0x08006a0f
 80069e0:	08006a19 	.word	0x08006a19
 80069e4:	08006a23 	.word	0x08006a23
 80069e8:	08006a2d 	.word	0x08006a2d
 80069ec:	08006a37 	.word	0x08006a37
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80069f0:	89fb      	ldrh	r3, [r7, #14]
 80069f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80069f6:	81fb      	strh	r3, [r7, #14]
            break;
 80069f8:	e027      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80069fa:	89fb      	ldrh	r3, [r7, #14]
 80069fc:	f043 0308 	orr.w	r3, r3, #8
 8006a00:	81fb      	strh	r3, [r7, #14]
            break;
 8006a02:	e022      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	f043 0310 	orr.w	r3, r3, #16
 8006a0a:	81fb      	strh	r3, [r7, #14]
            break;
 8006a0c:	e01d      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006a0e:	89fb      	ldrh	r3, [r7, #14]
 8006a10:	f043 0318 	orr.w	r3, r3, #24
 8006a14:	81fb      	strh	r3, [r7, #14]
            break;
 8006a16:	e018      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8006a18:	89fb      	ldrh	r3, [r7, #14]
 8006a1a:	f043 0320 	orr.w	r3, r3, #32
 8006a1e:	81fb      	strh	r3, [r7, #14]
            break;
 8006a20:	e013      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8006a22:	89fb      	ldrh	r3, [r7, #14]
 8006a24:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006a28:	81fb      	strh	r3, [r7, #14]
            break;
 8006a2a:	e00e      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8006a32:	81fb      	strh	r3, [r7, #14]
            break;
 8006a34:	e009      	b.n	8006a4a <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006a36:	89fb      	ldrh	r3, [r7, #14]
 8006a38:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006a3c:	81fb      	strh	r3, [r7, #14]
            break;
 8006a3e:	e004      	b.n	8006a4a <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006a40:	89fb      	ldrh	r3, [r7, #14]
 8006a42:	f043 0318 	orr.w	r3, r3, #24
 8006a46:	81fb      	strh	r3, [r7, #14]
            break;
 8006a48:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8006a4a:	78bb      	ldrb	r3, [r7, #2]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a56:	81fb      	strh	r3, [r7, #14]
 8006a58:	e003      	b.n	8006a62 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8006a5a:	89fb      	ldrh	r3, [r7, #14]
 8006a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a60:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8006a62:	787b      	ldrb	r3, [r7, #1]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d110      	bne.n	8006a8a <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8006a68:	89fb      	ldrh	r3, [r7, #14]
 8006a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a6e:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8006a70:	7e3b      	ldrb	r3, [r7, #24]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d104      	bne.n	8006a80 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8006a76:	89fb      	ldrh	r3, [r7, #14]
 8006a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a7c:	81fb      	strh	r3, [r7, #14]
 8006a7e:	e008      	b.n	8006a92 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8006a80:	89fb      	ldrh	r3, [r7, #14]
 8006a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a86:	81fb      	strh	r3, [r7, #14]
 8006a88:	e003      	b.n	8006a92 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8006a8a:	89fb      	ldrh	r3, [r7, #14]
 8006a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a90:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8006a92:	7f3b      	ldrb	r3, [r7, #28]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8006a98:	89fb      	ldrh	r3, [r7, #14]
 8006a9a:	f043 0304 	orr.w	r3, r3, #4
 8006a9e:	81fb      	strh	r3, [r7, #14]
 8006aa0:	e003      	b.n	8006aaa <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8006aa2:	89fb      	ldrh	r3, [r7, #14]
 8006aa4:	f023 0304 	bic.w	r3, r3, #4
 8006aa8:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8006aaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8006ab2:	89fb      	ldrh	r3, [r7, #14]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	81fb      	strh	r3, [r7, #14]
 8006aba:	e003      	b.n	8006ac4 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8006abc:	89fb      	ldrh	r3, [r7, #14]
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8006ac4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d104      	bne.n	8006ad6 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8006acc:	89fb      	ldrh	r3, [r7, #14]
 8006ace:	f023 0302 	bic.w	r3, r3, #2
 8006ad2:	81fb      	strh	r3, [r7, #14]
 8006ad4:	e003      	b.n	8006ade <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8006ad6:	89fb      	ldrh	r3, [r7, #14]
 8006ad8:	f043 0302 	orr.w	r3, r3, #2
 8006adc:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8006ade:	89fa      	ldrh	r2, [r7, #14]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f846 	bl	8006b7c <spiEnableSPI>

    return SPI_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop

08006afc <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <spiSelectSPI+0x6c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d106      	bne.n	8006b1a <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006b0c:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <spiSelectSPI+0x70>)
 8006b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b10:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <spiSelectSPI+0x70>)
 8006b12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b16:	6453      	str	r3, [r2, #68]	; 0x44
 8006b18:	e01f      	b.n	8006b5a <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <spiSelectSPI+0x74>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d106      	bne.n	8006b30 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006b22:	4b12      	ldr	r3, [pc, #72]	; (8006b6c <spiSelectSPI+0x70>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	4a11      	ldr	r2, [pc, #68]	; (8006b6c <spiSelectSPI+0x70>)
 8006b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006b2e:	e014      	b.n	8006b5a <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a10      	ldr	r2, [pc, #64]	; (8006b74 <spiSelectSPI+0x78>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d106      	bne.n	8006b46 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <spiSelectSPI+0x70>)
 8006b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3c:	4a0b      	ldr	r2, [pc, #44]	; (8006b6c <spiSelectSPI+0x70>)
 8006b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b42:	6413      	str	r3, [r2, #64]	; 0x40
 8006b44:	e009      	b.n	8006b5a <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a0b      	ldr	r2, [pc, #44]	; (8006b78 <spiSelectSPI+0x7c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d105      	bne.n	8006b5a <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006b4e:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <spiSelectSPI+0x70>)
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	4a06      	ldr	r2, [pc, #24]	; (8006b6c <spiSelectSPI+0x70>)
 8006b54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b58:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40013000 	.word	0x40013000
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40003800 	.word	0x40003800
 8006b74:	40003c00 	.word	0x40003c00
 8006b78:	40013400 	.word	0x40013400

08006b7c <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe2f 	bl	80067e8 <spiVerifySPI>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	f083 0301 	eor.w	r3, r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8006b96:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8006b9a:	e006      	b.n	8006baa <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	60f8      	str	r0, [r7, #12]
 8006bba:	60b9      	str	r1, [r7, #8]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	71fb      	strb	r3, [r7, #7]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fe00 	bl	80057d0 <gpioVerifyPin>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	f083 0301 	eor.w	r3, r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8006bdc:	f06f 0301 	mvn.w	r3, #1
 8006be0:	e016      	b.n	8006c10 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f7ff fdd2 	bl	800678c <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	4619      	mov	r1, r3
 8006bec:	68b8      	ldr	r0, [r7, #8]
 8006bee:	f7fe ffed 	bl	8005bcc <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8006bf2:	79ba      	ldrb	r2, [r7, #6]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff fdc7 	bl	800678c <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fddf 	bl	80067c2 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	4619      	mov	r1, r3
 8006c08:	68b8      	ldr	r0, [r7, #8]
 8006c0a:	f7fe ffb4 	bl	8005b76 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	db0a      	blt.n	8006c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	490c      	ldr	r1, [pc, #48]	; (8006c64 <__NVIC_SetPriority+0x4c>)
 8006c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c36:	0112      	lsls	r2, r2, #4
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	440b      	add	r3, r1
 8006c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c40:	e00a      	b.n	8006c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	4908      	ldr	r1, [pc, #32]	; (8006c68 <__NVIC_SetPriority+0x50>)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	f003 030f 	and.w	r3, r3, #15
 8006c4e:	3b04      	subs	r3, #4
 8006c50:	0112      	lsls	r2, r2, #4
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	440b      	add	r3, r1
 8006c56:	761a      	strb	r2, [r3, #24]
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	e000e100 	.word	0xe000e100
 8006c68:	e000ed00 	.word	0xe000ed00

08006c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c7c:	d301      	bcc.n	8006c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e00f      	b.n	8006ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <SysTick_Config+0x40>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c8a:	210f      	movs	r1, #15
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c90:	f7ff ffc2 	bl	8006c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <SysTick_Config+0x40>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c9a:	4b04      	ldr	r3, [pc, #16]	; (8006cac <SysTick_Config+0x40>)
 8006c9c:	2207      	movs	r2, #7
 8006c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	e000e010 	.word	0xe000e010

08006cb0 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	601a      	str	r2, [r3, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8006cd4:	f000 f8b2 	bl	8006e3c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <systickInit+0x24>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff ffc2 	bl	8006c6c <SysTick_Config>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2000001c 	.word	0x2000001c

08006cf4 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <isSystickExpired+0x16>
	{
		timerState = true;
 8006d22:	2301      	movs	r3, #1
 8006d24:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8006d38:	4b03      	ldr	r3, [pc, #12]	; (8006d48 <SysTick_Handler+0x14>)
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	701a      	strb	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	2000024c 	.word	0x2000024c

08006d4c <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <systickUpdateTimer+0x1a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	1e5a      	subs	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <systickUpdateTimer+0x2c>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	2000024c 	.word	0x2000024c

08006d7c <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e011      	b.n	8006db2 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d004      	beq.n	8006dac <systickUpdateTimerList+0x30>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	1e5a      	subs	r2, r3, #1
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	3301      	adds	r3, #1
 8006db0:	73fb      	strb	r3, [r7, #15]
 8006db2:	7bfa      	ldrb	r2, [r7, #15]
 8006db4:	78fb      	ldrb	r3, [r7, #3]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d3e9      	bcc.n	8006d8e <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8006dba:	4b04      	ldr	r3, [pc, #16]	; (8006dcc <systickUpdateTimerList+0x50>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
}
 8006dc0:	bf00      	nop
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	2000024c 	.word	0x2000024c

08006dd0 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff ff67 	bl	8006cb0 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8006de2:	e006      	b.n	8006df2 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8006de4:	4b0b      	ldr	r3, [pc, #44]	; (8006e14 <systickDelay+0x44>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d002      	beq.n	8006df2 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f7ff ffad 	bl	8006d4c <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff ff8a 	bl	8006d10 <isSystickExpired>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	f083 0301 	eor.w	r3, r3, #1
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1ed      	bne.n	8006de4 <systickDelay+0x14>
        }
    }
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	2000024c 	.word	0x2000024c

08006e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <SystemInit+0x20>)
 8006e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e22:	4a05      	ldr	r2, [pc, #20]	; (8006e38 <SystemInit+0x20>)
 8006e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e2c:	bf00      	nop
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	e000ed00 	.word	0xe000ed00

08006e3c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	60fb      	str	r3, [r7, #12]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	2302      	movs	r3, #2
 8006e54:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006e56:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f003 030c 	and.w	r3, r3, #12
 8006e5e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d011      	beq.n	8006e8a <SystemCoreClockUpdate+0x4e>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d844      	bhi.n	8006ef6 <SystemCoreClockUpdate+0xba>
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <SystemCoreClockUpdate+0x3e>
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d004      	beq.n	8006e82 <SystemCoreClockUpdate+0x46>
 8006e78:	e03d      	b.n	8006ef6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006e7a:	4b2c      	ldr	r3, [pc, #176]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006e7c:	4a2c      	ldr	r2, [pc, #176]	; (8006f30 <SystemCoreClockUpdate+0xf4>)
 8006e7e:	601a      	str	r2, [r3, #0]
      break;
 8006e80:	e03d      	b.n	8006efe <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006e82:	4b2a      	ldr	r3, [pc, #168]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006e84:	4a2b      	ldr	r2, [pc, #172]	; (8006f34 <SystemCoreClockUpdate+0xf8>)
 8006e86:	601a      	str	r2, [r3, #0]
      break;
 8006e88:	e039      	b.n	8006efe <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006e8a:	4b27      	ldr	r3, [pc, #156]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	0d9b      	lsrs	r3, r3, #22
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e96:	4b24      	ldr	r3, [pc, #144]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006ea6:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <SystemCoreClockUpdate+0xf8>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eae:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006eb0:	6852      	ldr	r2, [r2, #4]
 8006eb2:	0992      	lsrs	r2, r2, #6
 8006eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb8:	fb02 f303 	mul.w	r3, r2, r3
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	e00b      	b.n	8006ed8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006ec0:	4a1b      	ldr	r2, [pc, #108]	; (8006f30 <SystemCoreClockUpdate+0xf4>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006eca:	6852      	ldr	r2, [r2, #4]
 8006ecc:	0992      	lsrs	r2, r2, #6
 8006ece:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ed2:	fb02 f303 	mul.w	r3, r2, r3
 8006ed6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006ed8:	4b13      	ldr	r3, [pc, #76]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006ee8:	697a      	ldr	r2, [r7, #20]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef0:	4a0e      	ldr	r2, [pc, #56]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006ef2:	6013      	str	r3, [r2, #0]
      break;
 8006ef4:	e003      	b.n	8006efe <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006ef8:	4a0d      	ldr	r2, [pc, #52]	; (8006f30 <SystemCoreClockUpdate+0xf4>)
 8006efa:	601a      	str	r2, [r3, #0]
      break;
 8006efc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <SystemCoreClockUpdate+0xec>)
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	091b      	lsrs	r3, r3, #4
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <SystemCoreClockUpdate+0xfc>)
 8006f0a:	5cd3      	ldrb	r3, [r2, r3]
 8006f0c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006f0e:	4b07      	ldr	r3, [pc, #28]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	4a04      	ldr	r2, [pc, #16]	; (8006f2c <SystemCoreClockUpdate+0xf0>)
 8006f1a:	6013      	str	r3, [r2, #0]
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	2000001c 	.word	0x2000001c
 8006f30:	00f42400 	.word	0x00f42400
 8006f34:	007a1200 	.word	0x007a1200
 8006f38:	0800d294 	.word	0x0800d294

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000020 	.word	0x20000020

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	; (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	; (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	; (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	; (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f005 fd32 	bl	800c9c4 <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	0800d930 	.word	0x0800d930
 8006f84:	0800d930 	.word	0x0800d930
 8006f88:	0800d930 	.word	0x0800d930
 8006f8c:	0800d934 	.word	0x0800d934

08006f90 <memset>:
 8006f90:	4402      	add	r2, r0
 8006f92:	4603      	mov	r3, r0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <memset+0xa>
 8006f98:	4770      	bx	lr
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <memset+0x4>

08006fa0 <__cvt>:
 8006fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	ec55 4b10 	vmov	r4, r5, d0
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	460e      	mov	r6, r1
 8006fac:	4619      	mov	r1, r3
 8006fae:	462b      	mov	r3, r5
 8006fb0:	bfbb      	ittet	lt
 8006fb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006fb6:	461d      	movlt	r5, r3
 8006fb8:	2300      	movge	r3, #0
 8006fba:	232d      	movlt	r3, #45	; 0x2d
 8006fbc:	700b      	strb	r3, [r1, #0]
 8006fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006fc4:	4691      	mov	r9, r2
 8006fc6:	f023 0820 	bic.w	r8, r3, #32
 8006fca:	bfbc      	itt	lt
 8006fcc:	4622      	movlt	r2, r4
 8006fce:	4614      	movlt	r4, r2
 8006fd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fd4:	d005      	beq.n	8006fe2 <__cvt+0x42>
 8006fd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006fda:	d100      	bne.n	8006fde <__cvt+0x3e>
 8006fdc:	3601      	adds	r6, #1
 8006fde:	2102      	movs	r1, #2
 8006fe0:	e000      	b.n	8006fe4 <__cvt+0x44>
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	ab03      	add	r3, sp, #12
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	ab02      	add	r3, sp, #8
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	ec45 4b10 	vmov	d0, r4, r5
 8006ff0:	4653      	mov	r3, sl
 8006ff2:	4632      	mov	r2, r6
 8006ff4:	f001 fdac 	bl	8008b50 <_dtoa_r>
 8006ff8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	d102      	bne.n	8007006 <__cvt+0x66>
 8007000:	f019 0f01 	tst.w	r9, #1
 8007004:	d022      	beq.n	800704c <__cvt+0xac>
 8007006:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800700a:	eb07 0906 	add.w	r9, r7, r6
 800700e:	d110      	bne.n	8007032 <__cvt+0x92>
 8007010:	783b      	ldrb	r3, [r7, #0]
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d10a      	bne.n	800702c <__cvt+0x8c>
 8007016:	2200      	movs	r2, #0
 8007018:	2300      	movs	r3, #0
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 fd5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007022:	b918      	cbnz	r0, 800702c <__cvt+0x8c>
 8007024:	f1c6 0601 	rsb	r6, r6, #1
 8007028:	f8ca 6000 	str.w	r6, [sl]
 800702c:	f8da 3000 	ldr.w	r3, [sl]
 8007030:	4499      	add	r9, r3
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	4620      	mov	r0, r4
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 fd4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800703e:	b108      	cbz	r0, 8007044 <__cvt+0xa4>
 8007040:	f8cd 900c 	str.w	r9, [sp, #12]
 8007044:	2230      	movs	r2, #48	; 0x30
 8007046:	9b03      	ldr	r3, [sp, #12]
 8007048:	454b      	cmp	r3, r9
 800704a:	d307      	bcc.n	800705c <__cvt+0xbc>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007050:	1bdb      	subs	r3, r3, r7
 8007052:	4638      	mov	r0, r7
 8007054:	6013      	str	r3, [r2, #0]
 8007056:	b004      	add	sp, #16
 8007058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705c:	1c59      	adds	r1, r3, #1
 800705e:	9103      	str	r1, [sp, #12]
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	e7f0      	b.n	8007046 <__cvt+0xa6>

08007064 <__exponent>:
 8007064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007066:	4603      	mov	r3, r0
 8007068:	2900      	cmp	r1, #0
 800706a:	bfb8      	it	lt
 800706c:	4249      	neglt	r1, r1
 800706e:	f803 2b02 	strb.w	r2, [r3], #2
 8007072:	bfb4      	ite	lt
 8007074:	222d      	movlt	r2, #45	; 0x2d
 8007076:	222b      	movge	r2, #43	; 0x2b
 8007078:	2909      	cmp	r1, #9
 800707a:	7042      	strb	r2, [r0, #1]
 800707c:	dd2a      	ble.n	80070d4 <__exponent+0x70>
 800707e:	f10d 0407 	add.w	r4, sp, #7
 8007082:	46a4      	mov	ip, r4
 8007084:	270a      	movs	r7, #10
 8007086:	46a6      	mov	lr, r4
 8007088:	460a      	mov	r2, r1
 800708a:	fb91 f6f7 	sdiv	r6, r1, r7
 800708e:	fb07 1516 	mls	r5, r7, r6, r1
 8007092:	3530      	adds	r5, #48	; 0x30
 8007094:	2a63      	cmp	r2, #99	; 0x63
 8007096:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800709a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800709e:	4631      	mov	r1, r6
 80070a0:	dcf1      	bgt.n	8007086 <__exponent+0x22>
 80070a2:	3130      	adds	r1, #48	; 0x30
 80070a4:	f1ae 0502 	sub.w	r5, lr, #2
 80070a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80070ac:	1c44      	adds	r4, r0, #1
 80070ae:	4629      	mov	r1, r5
 80070b0:	4561      	cmp	r1, ip
 80070b2:	d30a      	bcc.n	80070ca <__exponent+0x66>
 80070b4:	f10d 0209 	add.w	r2, sp, #9
 80070b8:	eba2 020e 	sub.w	r2, r2, lr
 80070bc:	4565      	cmp	r5, ip
 80070be:	bf88      	it	hi
 80070c0:	2200      	movhi	r2, #0
 80070c2:	4413      	add	r3, r2
 80070c4:	1a18      	subs	r0, r3, r0
 80070c6:	b003      	add	sp, #12
 80070c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 80070d2:	e7ed      	b.n	80070b0 <__exponent+0x4c>
 80070d4:	2330      	movs	r3, #48	; 0x30
 80070d6:	3130      	adds	r1, #48	; 0x30
 80070d8:	7083      	strb	r3, [r0, #2]
 80070da:	70c1      	strb	r1, [r0, #3]
 80070dc:	1d03      	adds	r3, r0, #4
 80070de:	e7f1      	b.n	80070c4 <__exponent+0x60>

080070e0 <_printf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	ed2d 8b02 	vpush	{d8}
 80070e8:	b08d      	sub	sp, #52	; 0x34
 80070ea:	460c      	mov	r4, r1
 80070ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80070f0:	4616      	mov	r6, r2
 80070f2:	461f      	mov	r7, r3
 80070f4:	4605      	mov	r5, r0
 80070f6:	f002 fe89 	bl	8009e0c <_localeconv_r>
 80070fa:	f8d0 a000 	ldr.w	sl, [r0]
 80070fe:	4650      	mov	r0, sl
 8007100:	f7f9 f86e 	bl	80001e0 <strlen>
 8007104:	2300      	movs	r3, #0
 8007106:	930a      	str	r3, [sp, #40]	; 0x28
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	9305      	str	r3, [sp, #20]
 800710c:	f8d8 3000 	ldr.w	r3, [r8]
 8007110:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007114:	3307      	adds	r3, #7
 8007116:	f023 0307 	bic.w	r3, r3, #7
 800711a:	f103 0208 	add.w	r2, r3, #8
 800711e:	f8c8 2000 	str.w	r2, [r8]
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800712a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800712e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	f8cd 8018 	str.w	r8, [sp, #24]
 8007138:	ee08 0a10 	vmov	s16, r0
 800713c:	4b9f      	ldr	r3, [pc, #636]	; (80073bc <_printf_float+0x2dc>)
 800713e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007146:	f7f9 fcf9 	bl	8000b3c <__aeabi_dcmpun>
 800714a:	bb88      	cbnz	r0, 80071b0 <_printf_float+0xd0>
 800714c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007150:	4b9a      	ldr	r3, [pc, #616]	; (80073bc <_printf_float+0x2dc>)
 8007152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007156:	f7f9 fcd3 	bl	8000b00 <__aeabi_dcmple>
 800715a:	bb48      	cbnz	r0, 80071b0 <_printf_float+0xd0>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fcc2 	bl	8000aec <__aeabi_dcmplt>
 8007168:	b110      	cbz	r0, 8007170 <_printf_float+0x90>
 800716a:	232d      	movs	r3, #45	; 0x2d
 800716c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007170:	4b93      	ldr	r3, [pc, #588]	; (80073c0 <_printf_float+0x2e0>)
 8007172:	4894      	ldr	r0, [pc, #592]	; (80073c4 <_printf_float+0x2e4>)
 8007174:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007178:	bf94      	ite	ls
 800717a:	4698      	movls	r8, r3
 800717c:	4680      	movhi	r8, r0
 800717e:	2303      	movs	r3, #3
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	9b05      	ldr	r3, [sp, #20]
 8007184:	f023 0204 	bic.w	r2, r3, #4
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	f04f 0900 	mov.w	r9, #0
 800718e:	9700      	str	r7, [sp, #0]
 8007190:	4633      	mov	r3, r6
 8007192:	aa0b      	add	r2, sp, #44	; 0x2c
 8007194:	4621      	mov	r1, r4
 8007196:	4628      	mov	r0, r5
 8007198:	f000 f9d8 	bl	800754c <_printf_common>
 800719c:	3001      	adds	r0, #1
 800719e:	f040 8090 	bne.w	80072c2 <_printf_float+0x1e2>
 80071a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071a6:	b00d      	add	sp, #52	; 0x34
 80071a8:	ecbd 8b02 	vpop	{d8}
 80071ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b0:	4642      	mov	r2, r8
 80071b2:	464b      	mov	r3, r9
 80071b4:	4640      	mov	r0, r8
 80071b6:	4649      	mov	r1, r9
 80071b8:	f7f9 fcc0 	bl	8000b3c <__aeabi_dcmpun>
 80071bc:	b140      	cbz	r0, 80071d0 <_printf_float+0xf0>
 80071be:	464b      	mov	r3, r9
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfbc      	itt	lt
 80071c4:	232d      	movlt	r3, #45	; 0x2d
 80071c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071ca:	487f      	ldr	r0, [pc, #508]	; (80073c8 <_printf_float+0x2e8>)
 80071cc:	4b7f      	ldr	r3, [pc, #508]	; (80073cc <_printf_float+0x2ec>)
 80071ce:	e7d1      	b.n	8007174 <_printf_float+0x94>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80071d6:	9206      	str	r2, [sp, #24]
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	d13f      	bne.n	800725c <_printf_float+0x17c>
 80071dc:	2306      	movs	r3, #6
 80071de:	6063      	str	r3, [r4, #4]
 80071e0:	9b05      	ldr	r3, [sp, #20]
 80071e2:	6861      	ldr	r1, [r4, #4]
 80071e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80071e8:	2300      	movs	r3, #0
 80071ea:	9303      	str	r3, [sp, #12]
 80071ec:	ab0a      	add	r3, sp, #40	; 0x28
 80071ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80071f2:	ab09      	add	r3, sp, #36	; 0x24
 80071f4:	ec49 8b10 	vmov	d0, r8, r9
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	6022      	str	r2, [r4, #0]
 80071fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007200:	4628      	mov	r0, r5
 8007202:	f7ff fecd 	bl	8006fa0 <__cvt>
 8007206:	9b06      	ldr	r3, [sp, #24]
 8007208:	9909      	ldr	r1, [sp, #36]	; 0x24
 800720a:	2b47      	cmp	r3, #71	; 0x47
 800720c:	4680      	mov	r8, r0
 800720e:	d108      	bne.n	8007222 <_printf_float+0x142>
 8007210:	1cc8      	adds	r0, r1, #3
 8007212:	db02      	blt.n	800721a <_printf_float+0x13a>
 8007214:	6863      	ldr	r3, [r4, #4]
 8007216:	4299      	cmp	r1, r3
 8007218:	dd41      	ble.n	800729e <_printf_float+0x1be>
 800721a:	f1ab 0b02 	sub.w	fp, fp, #2
 800721e:	fa5f fb8b 	uxtb.w	fp, fp
 8007222:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007226:	d820      	bhi.n	800726a <_printf_float+0x18a>
 8007228:	3901      	subs	r1, #1
 800722a:	465a      	mov	r2, fp
 800722c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007230:	9109      	str	r1, [sp, #36]	; 0x24
 8007232:	f7ff ff17 	bl	8007064 <__exponent>
 8007236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007238:	1813      	adds	r3, r2, r0
 800723a:	2a01      	cmp	r2, #1
 800723c:	4681      	mov	r9, r0
 800723e:	6123      	str	r3, [r4, #16]
 8007240:	dc02      	bgt.n	8007248 <_printf_float+0x168>
 8007242:	6822      	ldr	r2, [r4, #0]
 8007244:	07d2      	lsls	r2, r2, #31
 8007246:	d501      	bpl.n	800724c <_printf_float+0x16c>
 8007248:	3301      	adds	r3, #1
 800724a:	6123      	str	r3, [r4, #16]
 800724c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007250:	2b00      	cmp	r3, #0
 8007252:	d09c      	beq.n	800718e <_printf_float+0xae>
 8007254:	232d      	movs	r3, #45	; 0x2d
 8007256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725a:	e798      	b.n	800718e <_printf_float+0xae>
 800725c:	9a06      	ldr	r2, [sp, #24]
 800725e:	2a47      	cmp	r2, #71	; 0x47
 8007260:	d1be      	bne.n	80071e0 <_printf_float+0x100>
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1bc      	bne.n	80071e0 <_printf_float+0x100>
 8007266:	2301      	movs	r3, #1
 8007268:	e7b9      	b.n	80071de <_printf_float+0xfe>
 800726a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800726e:	d118      	bne.n	80072a2 <_printf_float+0x1c2>
 8007270:	2900      	cmp	r1, #0
 8007272:	6863      	ldr	r3, [r4, #4]
 8007274:	dd0b      	ble.n	800728e <_printf_float+0x1ae>
 8007276:	6121      	str	r1, [r4, #16]
 8007278:	b913      	cbnz	r3, 8007280 <_printf_float+0x1a0>
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	07d0      	lsls	r0, r2, #31
 800727e:	d502      	bpl.n	8007286 <_printf_float+0x1a6>
 8007280:	3301      	adds	r3, #1
 8007282:	440b      	add	r3, r1
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	65a1      	str	r1, [r4, #88]	; 0x58
 8007288:	f04f 0900 	mov.w	r9, #0
 800728c:	e7de      	b.n	800724c <_printf_float+0x16c>
 800728e:	b913      	cbnz	r3, 8007296 <_printf_float+0x1b6>
 8007290:	6822      	ldr	r2, [r4, #0]
 8007292:	07d2      	lsls	r2, r2, #31
 8007294:	d501      	bpl.n	800729a <_printf_float+0x1ba>
 8007296:	3302      	adds	r3, #2
 8007298:	e7f4      	b.n	8007284 <_printf_float+0x1a4>
 800729a:	2301      	movs	r3, #1
 800729c:	e7f2      	b.n	8007284 <_printf_float+0x1a4>
 800729e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80072a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a4:	4299      	cmp	r1, r3
 80072a6:	db05      	blt.n	80072b4 <_printf_float+0x1d4>
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	6121      	str	r1, [r4, #16]
 80072ac:	07d8      	lsls	r0, r3, #31
 80072ae:	d5ea      	bpl.n	8007286 <_printf_float+0x1a6>
 80072b0:	1c4b      	adds	r3, r1, #1
 80072b2:	e7e7      	b.n	8007284 <_printf_float+0x1a4>
 80072b4:	2900      	cmp	r1, #0
 80072b6:	bfd4      	ite	le
 80072b8:	f1c1 0202 	rsble	r2, r1, #2
 80072bc:	2201      	movgt	r2, #1
 80072be:	4413      	add	r3, r2
 80072c0:	e7e0      	b.n	8007284 <_printf_float+0x1a4>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	055a      	lsls	r2, r3, #21
 80072c6:	d407      	bmi.n	80072d8 <_printf_float+0x1f8>
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	4642      	mov	r2, r8
 80072cc:	4631      	mov	r1, r6
 80072ce:	4628      	mov	r0, r5
 80072d0:	47b8      	blx	r7
 80072d2:	3001      	adds	r0, #1
 80072d4:	d12c      	bne.n	8007330 <_printf_float+0x250>
 80072d6:	e764      	b.n	80071a2 <_printf_float+0xc2>
 80072d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072dc:	f240 80e0 	bls.w	80074a0 <_printf_float+0x3c0>
 80072e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072e4:	2200      	movs	r2, #0
 80072e6:	2300      	movs	r3, #0
 80072e8:	f7f9 fbf6 	bl	8000ad8 <__aeabi_dcmpeq>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d034      	beq.n	800735a <_printf_float+0x27a>
 80072f0:	4a37      	ldr	r2, [pc, #220]	; (80073d0 <_printf_float+0x2f0>)
 80072f2:	2301      	movs	r3, #1
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af51 	beq.w	80071a2 <_printf_float+0xc2>
 8007300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007304:	429a      	cmp	r2, r3
 8007306:	db02      	blt.n	800730e <_printf_float+0x22e>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	07d8      	lsls	r0, r3, #31
 800730c:	d510      	bpl.n	8007330 <_printf_float+0x250>
 800730e:	ee18 3a10 	vmov	r3, s16
 8007312:	4652      	mov	r2, sl
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af41 	beq.w	80071a2 <_printf_float+0xc2>
 8007320:	f04f 0800 	mov.w	r8, #0
 8007324:	f104 091a 	add.w	r9, r4, #26
 8007328:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800732a:	3b01      	subs	r3, #1
 800732c:	4543      	cmp	r3, r8
 800732e:	dc09      	bgt.n	8007344 <_printf_float+0x264>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	079b      	lsls	r3, r3, #30
 8007334:	f100 8105 	bmi.w	8007542 <_printf_float+0x462>
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733c:	4298      	cmp	r0, r3
 800733e:	bfb8      	it	lt
 8007340:	4618      	movlt	r0, r3
 8007342:	e730      	b.n	80071a6 <_printf_float+0xc6>
 8007344:	2301      	movs	r3, #1
 8007346:	464a      	mov	r2, r9
 8007348:	4631      	mov	r1, r6
 800734a:	4628      	mov	r0, r5
 800734c:	47b8      	blx	r7
 800734e:	3001      	adds	r0, #1
 8007350:	f43f af27 	beq.w	80071a2 <_printf_float+0xc2>
 8007354:	f108 0801 	add.w	r8, r8, #1
 8007358:	e7e6      	b.n	8007328 <_printf_float+0x248>
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	dc39      	bgt.n	80073d4 <_printf_float+0x2f4>
 8007360:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <_printf_float+0x2f0>)
 8007362:	2301      	movs	r3, #1
 8007364:	4631      	mov	r1, r6
 8007366:	4628      	mov	r0, r5
 8007368:	47b8      	blx	r7
 800736a:	3001      	adds	r0, #1
 800736c:	f43f af19 	beq.w	80071a2 <_printf_float+0xc2>
 8007370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007374:	4313      	orrs	r3, r2
 8007376:	d102      	bne.n	800737e <_printf_float+0x29e>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	07d9      	lsls	r1, r3, #31
 800737c:	d5d8      	bpl.n	8007330 <_printf_float+0x250>
 800737e:	ee18 3a10 	vmov	r3, s16
 8007382:	4652      	mov	r2, sl
 8007384:	4631      	mov	r1, r6
 8007386:	4628      	mov	r0, r5
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	f43f af09 	beq.w	80071a2 <_printf_float+0xc2>
 8007390:	f04f 0900 	mov.w	r9, #0
 8007394:	f104 0a1a 	add.w	sl, r4, #26
 8007398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800739a:	425b      	negs	r3, r3
 800739c:	454b      	cmp	r3, r9
 800739e:	dc01      	bgt.n	80073a4 <_printf_float+0x2c4>
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	e792      	b.n	80072ca <_printf_float+0x1ea>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4652      	mov	r2, sl
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f aef7 	beq.w	80071a2 <_printf_float+0xc2>
 80073b4:	f109 0901 	add.w	r9, r9, #1
 80073b8:	e7ee      	b.n	8007398 <_printf_float+0x2b8>
 80073ba:	bf00      	nop
 80073bc:	7fefffff 	.word	0x7fefffff
 80073c0:	0800d2a8 	.word	0x0800d2a8
 80073c4:	0800d2ac 	.word	0x0800d2ac
 80073c8:	0800d2b4 	.word	0x0800d2b4
 80073cc:	0800d2b0 	.word	0x0800d2b0
 80073d0:	0800d2b8 	.word	0x0800d2b8
 80073d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073d8:	429a      	cmp	r2, r3
 80073da:	bfa8      	it	ge
 80073dc:	461a      	movge	r2, r3
 80073de:	2a00      	cmp	r2, #0
 80073e0:	4691      	mov	r9, r2
 80073e2:	dc37      	bgt.n	8007454 <_printf_float+0x374>
 80073e4:	f04f 0b00 	mov.w	fp, #0
 80073e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ec:	f104 021a 	add.w	r2, r4, #26
 80073f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	eba3 0309 	sub.w	r3, r3, r9
 80073f8:	455b      	cmp	r3, fp
 80073fa:	dc33      	bgt.n	8007464 <_printf_float+0x384>
 80073fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007400:	429a      	cmp	r2, r3
 8007402:	db3b      	blt.n	800747c <_printf_float+0x39c>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	d438      	bmi.n	800747c <_printf_float+0x39c>
 800740a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740c:	9a05      	ldr	r2, [sp, #20]
 800740e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007410:	1a9a      	subs	r2, r3, r2
 8007412:	eba3 0901 	sub.w	r9, r3, r1
 8007416:	4591      	cmp	r9, r2
 8007418:	bfa8      	it	ge
 800741a:	4691      	movge	r9, r2
 800741c:	f1b9 0f00 	cmp.w	r9, #0
 8007420:	dc35      	bgt.n	800748e <_printf_float+0x3ae>
 8007422:	f04f 0800 	mov.w	r8, #0
 8007426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800742a:	f104 0a1a 	add.w	sl, r4, #26
 800742e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007432:	1a9b      	subs	r3, r3, r2
 8007434:	eba3 0309 	sub.w	r3, r3, r9
 8007438:	4543      	cmp	r3, r8
 800743a:	f77f af79 	ble.w	8007330 <_printf_float+0x250>
 800743e:	2301      	movs	r3, #1
 8007440:	4652      	mov	r2, sl
 8007442:	4631      	mov	r1, r6
 8007444:	4628      	mov	r0, r5
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f aeaa 	beq.w	80071a2 <_printf_float+0xc2>
 800744e:	f108 0801 	add.w	r8, r8, #1
 8007452:	e7ec      	b.n	800742e <_printf_float+0x34e>
 8007454:	4613      	mov	r3, r2
 8007456:	4631      	mov	r1, r6
 8007458:	4642      	mov	r2, r8
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	d1c0      	bne.n	80073e4 <_printf_float+0x304>
 8007462:	e69e      	b.n	80071a2 <_printf_float+0xc2>
 8007464:	2301      	movs	r3, #1
 8007466:	4631      	mov	r1, r6
 8007468:	4628      	mov	r0, r5
 800746a:	9205      	str	r2, [sp, #20]
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	f43f ae97 	beq.w	80071a2 <_printf_float+0xc2>
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	f10b 0b01 	add.w	fp, fp, #1
 800747a:	e7b9      	b.n	80073f0 <_printf_float+0x310>
 800747c:	ee18 3a10 	vmov	r3, s16
 8007480:	4652      	mov	r2, sl
 8007482:	4631      	mov	r1, r6
 8007484:	4628      	mov	r0, r5
 8007486:	47b8      	blx	r7
 8007488:	3001      	adds	r0, #1
 800748a:	d1be      	bne.n	800740a <_printf_float+0x32a>
 800748c:	e689      	b.n	80071a2 <_printf_float+0xc2>
 800748e:	9a05      	ldr	r2, [sp, #20]
 8007490:	464b      	mov	r3, r9
 8007492:	4442      	add	r2, r8
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	d1c1      	bne.n	8007422 <_printf_float+0x342>
 800749e:	e680      	b.n	80071a2 <_printf_float+0xc2>
 80074a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074a2:	2a01      	cmp	r2, #1
 80074a4:	dc01      	bgt.n	80074aa <_printf_float+0x3ca>
 80074a6:	07db      	lsls	r3, r3, #31
 80074a8:	d538      	bpl.n	800751c <_printf_float+0x43c>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4642      	mov	r2, r8
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	f43f ae74 	beq.w	80071a2 <_printf_float+0xc2>
 80074ba:	ee18 3a10 	vmov	r3, s16
 80074be:	4652      	mov	r2, sl
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f ae6b 	beq.w	80071a2 <_printf_float+0xc2>
 80074cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074d0:	2200      	movs	r2, #0
 80074d2:	2300      	movs	r3, #0
 80074d4:	f7f9 fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 80074d8:	b9d8      	cbnz	r0, 8007512 <_printf_float+0x432>
 80074da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074dc:	f108 0201 	add.w	r2, r8, #1
 80074e0:	3b01      	subs	r3, #1
 80074e2:	4631      	mov	r1, r6
 80074e4:	4628      	mov	r0, r5
 80074e6:	47b8      	blx	r7
 80074e8:	3001      	adds	r0, #1
 80074ea:	d10e      	bne.n	800750a <_printf_float+0x42a>
 80074ec:	e659      	b.n	80071a2 <_printf_float+0xc2>
 80074ee:	2301      	movs	r3, #1
 80074f0:	4652      	mov	r2, sl
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f ae52 	beq.w	80071a2 <_printf_float+0xc2>
 80074fe:	f108 0801 	add.w	r8, r8, #1
 8007502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007504:	3b01      	subs	r3, #1
 8007506:	4543      	cmp	r3, r8
 8007508:	dcf1      	bgt.n	80074ee <_printf_float+0x40e>
 800750a:	464b      	mov	r3, r9
 800750c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007510:	e6dc      	b.n	80072cc <_printf_float+0x1ec>
 8007512:	f04f 0800 	mov.w	r8, #0
 8007516:	f104 0a1a 	add.w	sl, r4, #26
 800751a:	e7f2      	b.n	8007502 <_printf_float+0x422>
 800751c:	2301      	movs	r3, #1
 800751e:	4642      	mov	r2, r8
 8007520:	e7df      	b.n	80074e2 <_printf_float+0x402>
 8007522:	2301      	movs	r3, #1
 8007524:	464a      	mov	r2, r9
 8007526:	4631      	mov	r1, r6
 8007528:	4628      	mov	r0, r5
 800752a:	47b8      	blx	r7
 800752c:	3001      	adds	r0, #1
 800752e:	f43f ae38 	beq.w	80071a2 <_printf_float+0xc2>
 8007532:	f108 0801 	add.w	r8, r8, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	4543      	cmp	r3, r8
 800753e:	dcf0      	bgt.n	8007522 <_printf_float+0x442>
 8007540:	e6fa      	b.n	8007338 <_printf_float+0x258>
 8007542:	f04f 0800 	mov.w	r8, #0
 8007546:	f104 0919 	add.w	r9, r4, #25
 800754a:	e7f4      	b.n	8007536 <_printf_float+0x456>

0800754c <_printf_common>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	4616      	mov	r6, r2
 8007552:	4699      	mov	r9, r3
 8007554:	688a      	ldr	r2, [r1, #8]
 8007556:	690b      	ldr	r3, [r1, #16]
 8007558:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800755c:	4293      	cmp	r3, r2
 800755e:	bfb8      	it	lt
 8007560:	4613      	movlt	r3, r2
 8007562:	6033      	str	r3, [r6, #0]
 8007564:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007568:	4607      	mov	r7, r0
 800756a:	460c      	mov	r4, r1
 800756c:	b10a      	cbz	r2, 8007572 <_printf_common+0x26>
 800756e:	3301      	adds	r3, #1
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	0699      	lsls	r1, r3, #26
 8007576:	bf42      	ittt	mi
 8007578:	6833      	ldrmi	r3, [r6, #0]
 800757a:	3302      	addmi	r3, #2
 800757c:	6033      	strmi	r3, [r6, #0]
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	f015 0506 	ands.w	r5, r5, #6
 8007584:	d106      	bne.n	8007594 <_printf_common+0x48>
 8007586:	f104 0a19 	add.w	sl, r4, #25
 800758a:	68e3      	ldr	r3, [r4, #12]
 800758c:	6832      	ldr	r2, [r6, #0]
 800758e:	1a9b      	subs	r3, r3, r2
 8007590:	42ab      	cmp	r3, r5
 8007592:	dc26      	bgt.n	80075e2 <_printf_common+0x96>
 8007594:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007598:	1e13      	subs	r3, r2, #0
 800759a:	6822      	ldr	r2, [r4, #0]
 800759c:	bf18      	it	ne
 800759e:	2301      	movne	r3, #1
 80075a0:	0692      	lsls	r2, r2, #26
 80075a2:	d42b      	bmi.n	80075fc <_printf_common+0xb0>
 80075a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075a8:	4649      	mov	r1, r9
 80075aa:	4638      	mov	r0, r7
 80075ac:	47c0      	blx	r8
 80075ae:	3001      	adds	r0, #1
 80075b0:	d01e      	beq.n	80075f0 <_printf_common+0xa4>
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	68e5      	ldr	r5, [r4, #12]
 80075b6:	6832      	ldr	r2, [r6, #0]
 80075b8:	f003 0306 	and.w	r3, r3, #6
 80075bc:	2b04      	cmp	r3, #4
 80075be:	bf08      	it	eq
 80075c0:	1aad      	subeq	r5, r5, r2
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	bf0c      	ite	eq
 80075c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075cc:	2500      	movne	r5, #0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	bfc4      	itt	gt
 80075d2:	1a9b      	subgt	r3, r3, r2
 80075d4:	18ed      	addgt	r5, r5, r3
 80075d6:	2600      	movs	r6, #0
 80075d8:	341a      	adds	r4, #26
 80075da:	42b5      	cmp	r5, r6
 80075dc:	d11a      	bne.n	8007614 <_printf_common+0xc8>
 80075de:	2000      	movs	r0, #0
 80075e0:	e008      	b.n	80075f4 <_printf_common+0xa8>
 80075e2:	2301      	movs	r3, #1
 80075e4:	4652      	mov	r2, sl
 80075e6:	4649      	mov	r1, r9
 80075e8:	4638      	mov	r0, r7
 80075ea:	47c0      	blx	r8
 80075ec:	3001      	adds	r0, #1
 80075ee:	d103      	bne.n	80075f8 <_printf_common+0xac>
 80075f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f8:	3501      	adds	r5, #1
 80075fa:	e7c6      	b.n	800758a <_printf_common+0x3e>
 80075fc:	18e1      	adds	r1, r4, r3
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	2030      	movs	r0, #48	; 0x30
 8007602:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007606:	4422      	add	r2, r4
 8007608:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800760c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007610:	3302      	adds	r3, #2
 8007612:	e7c7      	b.n	80075a4 <_printf_common+0x58>
 8007614:	2301      	movs	r3, #1
 8007616:	4622      	mov	r2, r4
 8007618:	4649      	mov	r1, r9
 800761a:	4638      	mov	r0, r7
 800761c:	47c0      	blx	r8
 800761e:	3001      	adds	r0, #1
 8007620:	d0e6      	beq.n	80075f0 <_printf_common+0xa4>
 8007622:	3601      	adds	r6, #1
 8007624:	e7d9      	b.n	80075da <_printf_common+0x8e>
	...

08007628 <_printf_i>:
 8007628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800762c:	7e0f      	ldrb	r7, [r1, #24]
 800762e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007630:	2f78      	cmp	r7, #120	; 0x78
 8007632:	4691      	mov	r9, r2
 8007634:	4680      	mov	r8, r0
 8007636:	460c      	mov	r4, r1
 8007638:	469a      	mov	sl, r3
 800763a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800763e:	d807      	bhi.n	8007650 <_printf_i+0x28>
 8007640:	2f62      	cmp	r7, #98	; 0x62
 8007642:	d80a      	bhi.n	800765a <_printf_i+0x32>
 8007644:	2f00      	cmp	r7, #0
 8007646:	f000 80d8 	beq.w	80077fa <_printf_i+0x1d2>
 800764a:	2f58      	cmp	r7, #88	; 0x58
 800764c:	f000 80a3 	beq.w	8007796 <_printf_i+0x16e>
 8007650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007654:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007658:	e03a      	b.n	80076d0 <_printf_i+0xa8>
 800765a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800765e:	2b15      	cmp	r3, #21
 8007660:	d8f6      	bhi.n	8007650 <_printf_i+0x28>
 8007662:	a101      	add	r1, pc, #4	; (adr r1, 8007668 <_printf_i+0x40>)
 8007664:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007668:	080076c1 	.word	0x080076c1
 800766c:	080076d5 	.word	0x080076d5
 8007670:	08007651 	.word	0x08007651
 8007674:	08007651 	.word	0x08007651
 8007678:	08007651 	.word	0x08007651
 800767c:	08007651 	.word	0x08007651
 8007680:	080076d5 	.word	0x080076d5
 8007684:	08007651 	.word	0x08007651
 8007688:	08007651 	.word	0x08007651
 800768c:	08007651 	.word	0x08007651
 8007690:	08007651 	.word	0x08007651
 8007694:	080077e1 	.word	0x080077e1
 8007698:	08007705 	.word	0x08007705
 800769c:	080077c3 	.word	0x080077c3
 80076a0:	08007651 	.word	0x08007651
 80076a4:	08007651 	.word	0x08007651
 80076a8:	08007803 	.word	0x08007803
 80076ac:	08007651 	.word	0x08007651
 80076b0:	08007705 	.word	0x08007705
 80076b4:	08007651 	.word	0x08007651
 80076b8:	08007651 	.word	0x08007651
 80076bc:	080077cb 	.word	0x080077cb
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	602a      	str	r2, [r5, #0]
 80076c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0a3      	b.n	800781c <_printf_i+0x1f4>
 80076d4:	6820      	ldr	r0, [r4, #0]
 80076d6:	6829      	ldr	r1, [r5, #0]
 80076d8:	0606      	lsls	r6, r0, #24
 80076da:	f101 0304 	add.w	r3, r1, #4
 80076de:	d50a      	bpl.n	80076f6 <_printf_i+0xce>
 80076e0:	680e      	ldr	r6, [r1, #0]
 80076e2:	602b      	str	r3, [r5, #0]
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	da03      	bge.n	80076f0 <_printf_i+0xc8>
 80076e8:	232d      	movs	r3, #45	; 0x2d
 80076ea:	4276      	negs	r6, r6
 80076ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076f0:	485e      	ldr	r0, [pc, #376]	; (800786c <_printf_i+0x244>)
 80076f2:	230a      	movs	r3, #10
 80076f4:	e019      	b.n	800772a <_printf_i+0x102>
 80076f6:	680e      	ldr	r6, [r1, #0]
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076fe:	bf18      	it	ne
 8007700:	b236      	sxthne	r6, r6
 8007702:	e7ef      	b.n	80076e4 <_printf_i+0xbc>
 8007704:	682b      	ldr	r3, [r5, #0]
 8007706:	6820      	ldr	r0, [r4, #0]
 8007708:	1d19      	adds	r1, r3, #4
 800770a:	6029      	str	r1, [r5, #0]
 800770c:	0601      	lsls	r1, r0, #24
 800770e:	d501      	bpl.n	8007714 <_printf_i+0xec>
 8007710:	681e      	ldr	r6, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0xf2>
 8007714:	0646      	lsls	r6, r0, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0xe8>
 8007718:	881e      	ldrh	r6, [r3, #0]
 800771a:	4854      	ldr	r0, [pc, #336]	; (800786c <_printf_i+0x244>)
 800771c:	2f6f      	cmp	r7, #111	; 0x6f
 800771e:	bf0c      	ite	eq
 8007720:	2308      	moveq	r3, #8
 8007722:	230a      	movne	r3, #10
 8007724:	2100      	movs	r1, #0
 8007726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800772a:	6865      	ldr	r5, [r4, #4]
 800772c:	60a5      	str	r5, [r4, #8]
 800772e:	2d00      	cmp	r5, #0
 8007730:	bfa2      	ittt	ge
 8007732:	6821      	ldrge	r1, [r4, #0]
 8007734:	f021 0104 	bicge.w	r1, r1, #4
 8007738:	6021      	strge	r1, [r4, #0]
 800773a:	b90e      	cbnz	r6, 8007740 <_printf_i+0x118>
 800773c:	2d00      	cmp	r5, #0
 800773e:	d04d      	beq.n	80077dc <_printf_i+0x1b4>
 8007740:	4615      	mov	r5, r2
 8007742:	fbb6 f1f3 	udiv	r1, r6, r3
 8007746:	fb03 6711 	mls	r7, r3, r1, r6
 800774a:	5dc7      	ldrb	r7, [r0, r7]
 800774c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007750:	4637      	mov	r7, r6
 8007752:	42bb      	cmp	r3, r7
 8007754:	460e      	mov	r6, r1
 8007756:	d9f4      	bls.n	8007742 <_printf_i+0x11a>
 8007758:	2b08      	cmp	r3, #8
 800775a:	d10b      	bne.n	8007774 <_printf_i+0x14c>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07de      	lsls	r6, r3, #31
 8007760:	d508      	bpl.n	8007774 <_printf_i+0x14c>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	6861      	ldr	r1, [r4, #4]
 8007766:	4299      	cmp	r1, r3
 8007768:	bfde      	ittt	le
 800776a:	2330      	movle	r3, #48	; 0x30
 800776c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007770:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007774:	1b52      	subs	r2, r2, r5
 8007776:	6122      	str	r2, [r4, #16]
 8007778:	f8cd a000 	str.w	sl, [sp]
 800777c:	464b      	mov	r3, r9
 800777e:	aa03      	add	r2, sp, #12
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff fee2 	bl	800754c <_printf_common>
 8007788:	3001      	adds	r0, #1
 800778a:	d14c      	bne.n	8007826 <_printf_i+0x1fe>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007790:	b004      	add	sp, #16
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	4835      	ldr	r0, [pc, #212]	; (800786c <_printf_i+0x244>)
 8007798:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800779c:	6829      	ldr	r1, [r5, #0]
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80077a4:	6029      	str	r1, [r5, #0]
 80077a6:	061d      	lsls	r5, r3, #24
 80077a8:	d514      	bpl.n	80077d4 <_printf_i+0x1ac>
 80077aa:	07df      	lsls	r7, r3, #31
 80077ac:	bf44      	itt	mi
 80077ae:	f043 0320 	orrmi.w	r3, r3, #32
 80077b2:	6023      	strmi	r3, [r4, #0]
 80077b4:	b91e      	cbnz	r6, 80077be <_printf_i+0x196>
 80077b6:	6823      	ldr	r3, [r4, #0]
 80077b8:	f023 0320 	bic.w	r3, r3, #32
 80077bc:	6023      	str	r3, [r4, #0]
 80077be:	2310      	movs	r3, #16
 80077c0:	e7b0      	b.n	8007724 <_printf_i+0xfc>
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	f043 0320 	orr.w	r3, r3, #32
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	2378      	movs	r3, #120	; 0x78
 80077cc:	4828      	ldr	r0, [pc, #160]	; (8007870 <_printf_i+0x248>)
 80077ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80077d2:	e7e3      	b.n	800779c <_printf_i+0x174>
 80077d4:	0659      	lsls	r1, r3, #25
 80077d6:	bf48      	it	mi
 80077d8:	b2b6      	uxthmi	r6, r6
 80077da:	e7e6      	b.n	80077aa <_printf_i+0x182>
 80077dc:	4615      	mov	r5, r2
 80077de:	e7bb      	b.n	8007758 <_printf_i+0x130>
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	6826      	ldr	r6, [r4, #0]
 80077e4:	6961      	ldr	r1, [r4, #20]
 80077e6:	1d18      	adds	r0, r3, #4
 80077e8:	6028      	str	r0, [r5, #0]
 80077ea:	0635      	lsls	r5, r6, #24
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0x1cc>
 80077f0:	6019      	str	r1, [r3, #0]
 80077f2:	e002      	b.n	80077fa <_printf_i+0x1d2>
 80077f4:	0670      	lsls	r0, r6, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0x1c8>
 80077f8:	8019      	strh	r1, [r3, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	4615      	mov	r5, r2
 8007800:	e7ba      	b.n	8007778 <_printf_i+0x150>
 8007802:	682b      	ldr	r3, [r5, #0]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	602a      	str	r2, [r5, #0]
 8007808:	681d      	ldr	r5, [r3, #0]
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	2100      	movs	r1, #0
 800780e:	4628      	mov	r0, r5
 8007810:	f7f8 fcee 	bl	80001f0 <memchr>
 8007814:	b108      	cbz	r0, 800781a <_printf_i+0x1f2>
 8007816:	1b40      	subs	r0, r0, r5
 8007818:	6060      	str	r0, [r4, #4]
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	2300      	movs	r3, #0
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	e7a8      	b.n	8007778 <_printf_i+0x150>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	462a      	mov	r2, r5
 800782a:	4649      	mov	r1, r9
 800782c:	4640      	mov	r0, r8
 800782e:	47d0      	blx	sl
 8007830:	3001      	adds	r0, #1
 8007832:	d0ab      	beq.n	800778c <_printf_i+0x164>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	079b      	lsls	r3, r3, #30
 8007838:	d413      	bmi.n	8007862 <_printf_i+0x23a>
 800783a:	68e0      	ldr	r0, [r4, #12]
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	4298      	cmp	r0, r3
 8007840:	bfb8      	it	lt
 8007842:	4618      	movlt	r0, r3
 8007844:	e7a4      	b.n	8007790 <_printf_i+0x168>
 8007846:	2301      	movs	r3, #1
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	47d0      	blx	sl
 8007850:	3001      	adds	r0, #1
 8007852:	d09b      	beq.n	800778c <_printf_i+0x164>
 8007854:	3501      	adds	r5, #1
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	9903      	ldr	r1, [sp, #12]
 800785a:	1a5b      	subs	r3, r3, r1
 800785c:	42ab      	cmp	r3, r5
 800785e:	dcf2      	bgt.n	8007846 <_printf_i+0x21e>
 8007860:	e7eb      	b.n	800783a <_printf_i+0x212>
 8007862:	2500      	movs	r5, #0
 8007864:	f104 0619 	add.w	r6, r4, #25
 8007868:	e7f5      	b.n	8007856 <_printf_i+0x22e>
 800786a:	bf00      	nop
 800786c:	0800d2ba 	.word	0x0800d2ba
 8007870:	0800d2cb 	.word	0x0800d2cb

08007874 <_scanf_float>:
 8007874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	b087      	sub	sp, #28
 800787a:	4617      	mov	r7, r2
 800787c:	9303      	str	r3, [sp, #12]
 800787e:	688b      	ldr	r3, [r1, #8]
 8007880:	1e5a      	subs	r2, r3, #1
 8007882:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007886:	bf83      	ittte	hi
 8007888:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800788c:	195b      	addhi	r3, r3, r5
 800788e:	9302      	strhi	r3, [sp, #8]
 8007890:	2300      	movls	r3, #0
 8007892:	bf86      	itte	hi
 8007894:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007898:	608b      	strhi	r3, [r1, #8]
 800789a:	9302      	strls	r3, [sp, #8]
 800789c:	680b      	ldr	r3, [r1, #0]
 800789e:	468b      	mov	fp, r1
 80078a0:	2500      	movs	r5, #0
 80078a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80078a6:	f84b 3b1c 	str.w	r3, [fp], #28
 80078aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80078ae:	4680      	mov	r8, r0
 80078b0:	460c      	mov	r4, r1
 80078b2:	465e      	mov	r6, fp
 80078b4:	46aa      	mov	sl, r5
 80078b6:	46a9      	mov	r9, r5
 80078b8:	9501      	str	r5, [sp, #4]
 80078ba:	68a2      	ldr	r2, [r4, #8]
 80078bc:	b152      	cbz	r2, 80078d4 <_scanf_float+0x60>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	2b4e      	cmp	r3, #78	; 0x4e
 80078c4:	d864      	bhi.n	8007990 <_scanf_float+0x11c>
 80078c6:	2b40      	cmp	r3, #64	; 0x40
 80078c8:	d83c      	bhi.n	8007944 <_scanf_float+0xd0>
 80078ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80078ce:	b2c8      	uxtb	r0, r1
 80078d0:	280e      	cmp	r0, #14
 80078d2:	d93a      	bls.n	800794a <_scanf_float+0xd6>
 80078d4:	f1b9 0f00 	cmp.w	r9, #0
 80078d8:	d003      	beq.n	80078e2 <_scanf_float+0x6e>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80078e6:	f1ba 0f01 	cmp.w	sl, #1
 80078ea:	f200 8113 	bhi.w	8007b14 <_scanf_float+0x2a0>
 80078ee:	455e      	cmp	r6, fp
 80078f0:	f200 8105 	bhi.w	8007afe <_scanf_float+0x28a>
 80078f4:	2501      	movs	r5, #1
 80078f6:	4628      	mov	r0, r5
 80078f8:	b007      	add	sp, #28
 80078fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007902:	2a0d      	cmp	r2, #13
 8007904:	d8e6      	bhi.n	80078d4 <_scanf_float+0x60>
 8007906:	a101      	add	r1, pc, #4	; (adr r1, 800790c <_scanf_float+0x98>)
 8007908:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800790c:	08007a4b 	.word	0x08007a4b
 8007910:	080078d5 	.word	0x080078d5
 8007914:	080078d5 	.word	0x080078d5
 8007918:	080078d5 	.word	0x080078d5
 800791c:	08007aab 	.word	0x08007aab
 8007920:	08007a83 	.word	0x08007a83
 8007924:	080078d5 	.word	0x080078d5
 8007928:	080078d5 	.word	0x080078d5
 800792c:	08007a59 	.word	0x08007a59
 8007930:	080078d5 	.word	0x080078d5
 8007934:	080078d5 	.word	0x080078d5
 8007938:	080078d5 	.word	0x080078d5
 800793c:	080078d5 	.word	0x080078d5
 8007940:	08007a11 	.word	0x08007a11
 8007944:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007948:	e7db      	b.n	8007902 <_scanf_float+0x8e>
 800794a:	290e      	cmp	r1, #14
 800794c:	d8c2      	bhi.n	80078d4 <_scanf_float+0x60>
 800794e:	a001      	add	r0, pc, #4	; (adr r0, 8007954 <_scanf_float+0xe0>)
 8007950:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007954:	08007a03 	.word	0x08007a03
 8007958:	080078d5 	.word	0x080078d5
 800795c:	08007a03 	.word	0x08007a03
 8007960:	08007a97 	.word	0x08007a97
 8007964:	080078d5 	.word	0x080078d5
 8007968:	080079b1 	.word	0x080079b1
 800796c:	080079ed 	.word	0x080079ed
 8007970:	080079ed 	.word	0x080079ed
 8007974:	080079ed 	.word	0x080079ed
 8007978:	080079ed 	.word	0x080079ed
 800797c:	080079ed 	.word	0x080079ed
 8007980:	080079ed 	.word	0x080079ed
 8007984:	080079ed 	.word	0x080079ed
 8007988:	080079ed 	.word	0x080079ed
 800798c:	080079ed 	.word	0x080079ed
 8007990:	2b6e      	cmp	r3, #110	; 0x6e
 8007992:	d809      	bhi.n	80079a8 <_scanf_float+0x134>
 8007994:	2b60      	cmp	r3, #96	; 0x60
 8007996:	d8b2      	bhi.n	80078fe <_scanf_float+0x8a>
 8007998:	2b54      	cmp	r3, #84	; 0x54
 800799a:	d077      	beq.n	8007a8c <_scanf_float+0x218>
 800799c:	2b59      	cmp	r3, #89	; 0x59
 800799e:	d199      	bne.n	80078d4 <_scanf_float+0x60>
 80079a0:	2d07      	cmp	r5, #7
 80079a2:	d197      	bne.n	80078d4 <_scanf_float+0x60>
 80079a4:	2508      	movs	r5, #8
 80079a6:	e029      	b.n	80079fc <_scanf_float+0x188>
 80079a8:	2b74      	cmp	r3, #116	; 0x74
 80079aa:	d06f      	beq.n	8007a8c <_scanf_float+0x218>
 80079ac:	2b79      	cmp	r3, #121	; 0x79
 80079ae:	e7f6      	b.n	800799e <_scanf_float+0x12a>
 80079b0:	6821      	ldr	r1, [r4, #0]
 80079b2:	05c8      	lsls	r0, r1, #23
 80079b4:	d51a      	bpl.n	80079ec <_scanf_float+0x178>
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80079bc:	6021      	str	r1, [r4, #0]
 80079be:	f109 0901 	add.w	r9, r9, #1
 80079c2:	b11b      	cbz	r3, 80079cc <_scanf_float+0x158>
 80079c4:	3b01      	subs	r3, #1
 80079c6:	3201      	adds	r2, #1
 80079c8:	9302      	str	r3, [sp, #8]
 80079ca:	60a2      	str	r2, [r4, #8]
 80079cc:	68a3      	ldr	r3, [r4, #8]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	3301      	adds	r3, #1
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	607b      	str	r3, [r7, #4]
 80079e0:	f340 8084 	ble.w	8007aec <_scanf_float+0x278>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	3301      	adds	r3, #1
 80079e8:	603b      	str	r3, [r7, #0]
 80079ea:	e766      	b.n	80078ba <_scanf_float+0x46>
 80079ec:	eb1a 0f05 	cmn.w	sl, r5
 80079f0:	f47f af70 	bne.w	80078d4 <_scanf_float+0x60>
 80079f4:	6822      	ldr	r2, [r4, #0]
 80079f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007a00:	e7e4      	b.n	80079cc <_scanf_float+0x158>
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	0610      	lsls	r0, r2, #24
 8007a06:	f57f af65 	bpl.w	80078d4 <_scanf_float+0x60>
 8007a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a0e:	e7f4      	b.n	80079fa <_scanf_float+0x186>
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	d10e      	bne.n	8007a34 <_scanf_float+0x1c0>
 8007a16:	f1b9 0f00 	cmp.w	r9, #0
 8007a1a:	d10e      	bne.n	8007a3a <_scanf_float+0x1c6>
 8007a1c:	6822      	ldr	r2, [r4, #0]
 8007a1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a26:	d108      	bne.n	8007a3a <_scanf_float+0x1c6>
 8007a28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a2c:	6022      	str	r2, [r4, #0]
 8007a2e:	f04f 0a01 	mov.w	sl, #1
 8007a32:	e7e3      	b.n	80079fc <_scanf_float+0x188>
 8007a34:	f1ba 0f02 	cmp.w	sl, #2
 8007a38:	d055      	beq.n	8007ae6 <_scanf_float+0x272>
 8007a3a:	2d01      	cmp	r5, #1
 8007a3c:	d002      	beq.n	8007a44 <_scanf_float+0x1d0>
 8007a3e:	2d04      	cmp	r5, #4
 8007a40:	f47f af48 	bne.w	80078d4 <_scanf_float+0x60>
 8007a44:	3501      	adds	r5, #1
 8007a46:	b2ed      	uxtb	r5, r5
 8007a48:	e7d8      	b.n	80079fc <_scanf_float+0x188>
 8007a4a:	f1ba 0f01 	cmp.w	sl, #1
 8007a4e:	f47f af41 	bne.w	80078d4 <_scanf_float+0x60>
 8007a52:	f04f 0a02 	mov.w	sl, #2
 8007a56:	e7d1      	b.n	80079fc <_scanf_float+0x188>
 8007a58:	b97d      	cbnz	r5, 8007a7a <_scanf_float+0x206>
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	f47f af3c 	bne.w	80078da <_scanf_float+0x66>
 8007a62:	6822      	ldr	r2, [r4, #0]
 8007a64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007a68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007a6c:	f47f af39 	bne.w	80078e2 <_scanf_float+0x6e>
 8007a70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	2501      	movs	r5, #1
 8007a78:	e7c0      	b.n	80079fc <_scanf_float+0x188>
 8007a7a:	2d03      	cmp	r5, #3
 8007a7c:	d0e2      	beq.n	8007a44 <_scanf_float+0x1d0>
 8007a7e:	2d05      	cmp	r5, #5
 8007a80:	e7de      	b.n	8007a40 <_scanf_float+0x1cc>
 8007a82:	2d02      	cmp	r5, #2
 8007a84:	f47f af26 	bne.w	80078d4 <_scanf_float+0x60>
 8007a88:	2503      	movs	r5, #3
 8007a8a:	e7b7      	b.n	80079fc <_scanf_float+0x188>
 8007a8c:	2d06      	cmp	r5, #6
 8007a8e:	f47f af21 	bne.w	80078d4 <_scanf_float+0x60>
 8007a92:	2507      	movs	r5, #7
 8007a94:	e7b2      	b.n	80079fc <_scanf_float+0x188>
 8007a96:	6822      	ldr	r2, [r4, #0]
 8007a98:	0591      	lsls	r1, r2, #22
 8007a9a:	f57f af1b 	bpl.w	80078d4 <_scanf_float+0x60>
 8007a9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007aa2:	6022      	str	r2, [r4, #0]
 8007aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007aa8:	e7a8      	b.n	80079fc <_scanf_float+0x188>
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ab0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ab4:	d006      	beq.n	8007ac4 <_scanf_float+0x250>
 8007ab6:	0550      	lsls	r0, r2, #21
 8007ab8:	f57f af0c 	bpl.w	80078d4 <_scanf_float+0x60>
 8007abc:	f1b9 0f00 	cmp.w	r9, #0
 8007ac0:	f43f af0f 	beq.w	80078e2 <_scanf_float+0x6e>
 8007ac4:	0591      	lsls	r1, r2, #22
 8007ac6:	bf58      	it	pl
 8007ac8:	9901      	ldrpl	r1, [sp, #4]
 8007aca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ace:	bf58      	it	pl
 8007ad0:	eba9 0101 	subpl.w	r1, r9, r1
 8007ad4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ad8:	bf58      	it	pl
 8007ada:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007ade:	6022      	str	r2, [r4, #0]
 8007ae0:	f04f 0900 	mov.w	r9, #0
 8007ae4:	e78a      	b.n	80079fc <_scanf_float+0x188>
 8007ae6:	f04f 0a03 	mov.w	sl, #3
 8007aea:	e787      	b.n	80079fc <_scanf_float+0x188>
 8007aec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007af0:	4639      	mov	r1, r7
 8007af2:	4640      	mov	r0, r8
 8007af4:	4798      	blx	r3
 8007af6:	2800      	cmp	r0, #0
 8007af8:	f43f aedf 	beq.w	80078ba <_scanf_float+0x46>
 8007afc:	e6ea      	b.n	80078d4 <_scanf_float+0x60>
 8007afe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b06:	463a      	mov	r2, r7
 8007b08:	4640      	mov	r0, r8
 8007b0a:	4798      	blx	r3
 8007b0c:	6923      	ldr	r3, [r4, #16]
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	e6ec      	b.n	80078ee <_scanf_float+0x7a>
 8007b14:	1e6b      	subs	r3, r5, #1
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d825      	bhi.n	8007b66 <_scanf_float+0x2f2>
 8007b1a:	2d02      	cmp	r5, #2
 8007b1c:	d836      	bhi.n	8007b8c <_scanf_float+0x318>
 8007b1e:	455e      	cmp	r6, fp
 8007b20:	f67f aee8 	bls.w	80078f4 <_scanf_float+0x80>
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b2c:	463a      	mov	r2, r7
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4798      	blx	r3
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	6123      	str	r3, [r4, #16]
 8007b38:	e7f1      	b.n	8007b1e <_scanf_float+0x2aa>
 8007b3a:	9802      	ldr	r0, [sp, #8]
 8007b3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007b44:	9002      	str	r0, [sp, #8]
 8007b46:	463a      	mov	r2, r7
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4798      	blx	r3
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	3b01      	subs	r3, #1
 8007b50:	6123      	str	r3, [r4, #16]
 8007b52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b56:	fa5f fa8a 	uxtb.w	sl, sl
 8007b5a:	f1ba 0f02 	cmp.w	sl, #2
 8007b5e:	d1ec      	bne.n	8007b3a <_scanf_float+0x2c6>
 8007b60:	3d03      	subs	r5, #3
 8007b62:	b2ed      	uxtb	r5, r5
 8007b64:	1b76      	subs	r6, r6, r5
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	05da      	lsls	r2, r3, #23
 8007b6a:	d52f      	bpl.n	8007bcc <_scanf_float+0x358>
 8007b6c:	055b      	lsls	r3, r3, #21
 8007b6e:	d510      	bpl.n	8007b92 <_scanf_float+0x31e>
 8007b70:	455e      	cmp	r6, fp
 8007b72:	f67f aebf 	bls.w	80078f4 <_scanf_float+0x80>
 8007b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007b7e:	463a      	mov	r2, r7
 8007b80:	4640      	mov	r0, r8
 8007b82:	4798      	blx	r3
 8007b84:	6923      	ldr	r3, [r4, #16]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	e7f1      	b.n	8007b70 <_scanf_float+0x2fc>
 8007b8c:	46aa      	mov	sl, r5
 8007b8e:	9602      	str	r6, [sp, #8]
 8007b90:	e7df      	b.n	8007b52 <_scanf_float+0x2de>
 8007b92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	2965      	cmp	r1, #101	; 0x65
 8007b9a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8007b9e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	d00c      	beq.n	8007bc0 <_scanf_float+0x34c>
 8007ba6:	2945      	cmp	r1, #69	; 0x45
 8007ba8:	d00a      	beq.n	8007bc0 <_scanf_float+0x34c>
 8007baa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bae:	463a      	mov	r2, r7
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	4798      	blx	r3
 8007bb4:	6923      	ldr	r3, [r4, #16]
 8007bb6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	1eb5      	subs	r5, r6, #2
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007bc4:	463a      	mov	r2, r7
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4798      	blx	r3
 8007bca:	462e      	mov	r6, r5
 8007bcc:	6825      	ldr	r5, [r4, #0]
 8007bce:	f015 0510 	ands.w	r5, r5, #16
 8007bd2:	d159      	bne.n	8007c88 <_scanf_float+0x414>
 8007bd4:	7035      	strb	r5, [r6, #0]
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007bdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be0:	d11b      	bne.n	8007c1a <_scanf_float+0x3a6>
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	454b      	cmp	r3, r9
 8007be6:	eba3 0209 	sub.w	r2, r3, r9
 8007bea:	d123      	bne.n	8007c34 <_scanf_float+0x3c0>
 8007bec:	2200      	movs	r2, #0
 8007bee:	4659      	mov	r1, fp
 8007bf0:	4640      	mov	r0, r8
 8007bf2:	f000 fe97 	bl	8008924 <_strtod_r>
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	f012 0f02 	tst.w	r2, #2
 8007bfe:	ec57 6b10 	vmov	r6, r7, d0
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	d021      	beq.n	8007c4a <_scanf_float+0x3d6>
 8007c06:	9903      	ldr	r1, [sp, #12]
 8007c08:	1d1a      	adds	r2, r3, #4
 8007c0a:	600a      	str	r2, [r1, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	e9c3 6700 	strd	r6, r7, [r3]
 8007c12:	68e3      	ldr	r3, [r4, #12]
 8007c14:	3301      	adds	r3, #1
 8007c16:	60e3      	str	r3, [r4, #12]
 8007c18:	e66d      	b.n	80078f6 <_scanf_float+0x82>
 8007c1a:	9b04      	ldr	r3, [sp, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d0e5      	beq.n	8007bec <_scanf_float+0x378>
 8007c20:	9905      	ldr	r1, [sp, #20]
 8007c22:	230a      	movs	r3, #10
 8007c24:	462a      	mov	r2, r5
 8007c26:	3101      	adds	r1, #1
 8007c28:	4640      	mov	r0, r8
 8007c2a:	f000 ff03 	bl	8008a34 <_strtol_r>
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	9e05      	ldr	r6, [sp, #20]
 8007c32:	1ac2      	subs	r2, r0, r3
 8007c34:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	bf28      	it	cs
 8007c3c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007c40:	4912      	ldr	r1, [pc, #72]	; (8007c8c <_scanf_float+0x418>)
 8007c42:	4630      	mov	r0, r6
 8007c44:	f000 f82c 	bl	8007ca0 <siprintf>
 8007c48:	e7d0      	b.n	8007bec <_scanf_float+0x378>
 8007c4a:	9903      	ldr	r1, [sp, #12]
 8007c4c:	f012 0f04 	tst.w	r2, #4
 8007c50:	f103 0204 	add.w	r2, r3, #4
 8007c54:	600a      	str	r2, [r1, #0]
 8007c56:	d1d9      	bne.n	8007c0c <_scanf_float+0x398>
 8007c58:	f8d3 8000 	ldr.w	r8, [r3]
 8007c5c:	ee10 2a10 	vmov	r2, s0
 8007c60:	ee10 0a10 	vmov	r0, s0
 8007c64:	463b      	mov	r3, r7
 8007c66:	4639      	mov	r1, r7
 8007c68:	f7f8 ff68 	bl	8000b3c <__aeabi_dcmpun>
 8007c6c:	b128      	cbz	r0, 8007c7a <_scanf_float+0x406>
 8007c6e:	4808      	ldr	r0, [pc, #32]	; (8007c90 <_scanf_float+0x41c>)
 8007c70:	f000 f810 	bl	8007c94 <nanf>
 8007c74:	ed88 0a00 	vstr	s0, [r8]
 8007c78:	e7cb      	b.n	8007c12 <_scanf_float+0x39e>
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	f7f8 ffbb 	bl	8000bf8 <__aeabi_d2f>
 8007c82:	f8c8 0000 	str.w	r0, [r8]
 8007c86:	e7c4      	b.n	8007c12 <_scanf_float+0x39e>
 8007c88:	2500      	movs	r5, #0
 8007c8a:	e634      	b.n	80078f6 <_scanf_float+0x82>
 8007c8c:	0800d2dc 	.word	0x0800d2dc
 8007c90:	0800d6e8 	.word	0x0800d6e8

08007c94 <nanf>:
 8007c94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c9c <nanf+0x8>
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	7fc00000 	.word	0x7fc00000

08007ca0 <siprintf>:
 8007ca0:	b40e      	push	{r1, r2, r3}
 8007ca2:	b500      	push	{lr}
 8007ca4:	b09c      	sub	sp, #112	; 0x70
 8007ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ca8:	9002      	str	r0, [sp, #8]
 8007caa:	9006      	str	r0, [sp, #24]
 8007cac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cb0:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <siprintf+0x38>)
 8007cb2:	9107      	str	r1, [sp, #28]
 8007cb4:	9104      	str	r1, [sp, #16]
 8007cb6:	4909      	ldr	r1, [pc, #36]	; (8007cdc <siprintf+0x3c>)
 8007cb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbc:	9105      	str	r1, [sp, #20]
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	a902      	add	r1, sp, #8
 8007cc4:	f002 fee2 	bl	800aa8c <_svfiprintf_r>
 8007cc8:	9b02      	ldr	r3, [sp, #8]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	b01c      	add	sp, #112	; 0x70
 8007cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd4:	b003      	add	sp, #12
 8007cd6:	4770      	bx	lr
 8007cd8:	20000020 	.word	0x20000020
 8007cdc:	ffff0208 	.word	0xffff0208

08007ce0 <sulp>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	460d      	mov	r5, r1
 8007ce6:	ec45 4b10 	vmov	d0, r4, r5
 8007cea:	4616      	mov	r6, r2
 8007cec:	f002 fc2c 	bl	800a548 <__ulp>
 8007cf0:	ec51 0b10 	vmov	r0, r1, d0
 8007cf4:	b17e      	cbz	r6, 8007d16 <sulp+0x36>
 8007cf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	dd09      	ble.n	8007d16 <sulp+0x36>
 8007d02:	051b      	lsls	r3, r3, #20
 8007d04:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d08:	2400      	movs	r4, #0
 8007d0a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d0e:	4622      	mov	r2, r4
 8007d10:	462b      	mov	r3, r5
 8007d12:	f7f8 fc79 	bl	8000608 <__aeabi_dmul>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}

08007d18 <_strtod_l>:
 8007d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1c:	ed2d 8b02 	vpush	{d8}
 8007d20:	b09d      	sub	sp, #116	; 0x74
 8007d22:	461f      	mov	r7, r3
 8007d24:	2300      	movs	r3, #0
 8007d26:	9318      	str	r3, [sp, #96]	; 0x60
 8007d28:	4ba2      	ldr	r3, [pc, #648]	; (8007fb4 <_strtod_l+0x29c>)
 8007d2a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	9305      	str	r3, [sp, #20]
 8007d30:	4604      	mov	r4, r0
 8007d32:	4618      	mov	r0, r3
 8007d34:	4688      	mov	r8, r1
 8007d36:	f7f8 fa53 	bl	80001e0 <strlen>
 8007d3a:	f04f 0a00 	mov.w	sl, #0
 8007d3e:	4605      	mov	r5, r0
 8007d40:	f04f 0b00 	mov.w	fp, #0
 8007d44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d4a:	781a      	ldrb	r2, [r3, #0]
 8007d4c:	2a2b      	cmp	r2, #43	; 0x2b
 8007d4e:	d04e      	beq.n	8007dee <_strtod_l+0xd6>
 8007d50:	d83b      	bhi.n	8007dca <_strtod_l+0xb2>
 8007d52:	2a0d      	cmp	r2, #13
 8007d54:	d834      	bhi.n	8007dc0 <_strtod_l+0xa8>
 8007d56:	2a08      	cmp	r2, #8
 8007d58:	d834      	bhi.n	8007dc4 <_strtod_l+0xac>
 8007d5a:	2a00      	cmp	r2, #0
 8007d5c:	d03e      	beq.n	8007ddc <_strtod_l+0xc4>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	930a      	str	r3, [sp, #40]	; 0x28
 8007d62:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007d64:	7833      	ldrb	r3, [r6, #0]
 8007d66:	2b30      	cmp	r3, #48	; 0x30
 8007d68:	f040 80b0 	bne.w	8007ecc <_strtod_l+0x1b4>
 8007d6c:	7873      	ldrb	r3, [r6, #1]
 8007d6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007d72:	2b58      	cmp	r3, #88	; 0x58
 8007d74:	d168      	bne.n	8007e48 <_strtod_l+0x130>
 8007d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d78:	9301      	str	r3, [sp, #4]
 8007d7a:	ab18      	add	r3, sp, #96	; 0x60
 8007d7c:	9702      	str	r7, [sp, #8]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	4a8d      	ldr	r2, [pc, #564]	; (8007fb8 <_strtod_l+0x2a0>)
 8007d82:	ab19      	add	r3, sp, #100	; 0x64
 8007d84:	a917      	add	r1, sp, #92	; 0x5c
 8007d86:	4620      	mov	r0, r4
 8007d88:	f001 fd38 	bl	80097fc <__gethex>
 8007d8c:	f010 0707 	ands.w	r7, r0, #7
 8007d90:	4605      	mov	r5, r0
 8007d92:	d005      	beq.n	8007da0 <_strtod_l+0x88>
 8007d94:	2f06      	cmp	r7, #6
 8007d96:	d12c      	bne.n	8007df2 <_strtod_l+0xda>
 8007d98:	3601      	adds	r6, #1
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8007da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f040 8590 	bne.w	80088c8 <_strtod_l+0xbb0>
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	b1eb      	cbz	r3, 8007de8 <_strtod_l+0xd0>
 8007dac:	4652      	mov	r2, sl
 8007dae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007db2:	ec43 2b10 	vmov	d0, r2, r3
 8007db6:	b01d      	add	sp, #116	; 0x74
 8007db8:	ecbd 8b02 	vpop	{d8}
 8007dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc0:	2a20      	cmp	r2, #32
 8007dc2:	d1cc      	bne.n	8007d5e <_strtod_l+0x46>
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007dc8:	e7be      	b.n	8007d48 <_strtod_l+0x30>
 8007dca:	2a2d      	cmp	r2, #45	; 0x2d
 8007dcc:	d1c7      	bne.n	8007d5e <_strtod_l+0x46>
 8007dce:	2201      	movs	r2, #1
 8007dd0:	920a      	str	r2, [sp, #40]	; 0x28
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dd6:	785b      	ldrb	r3, [r3, #1]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1c2      	bne.n	8007d62 <_strtod_l+0x4a>
 8007ddc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007dde:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f040 856e 	bne.w	80088c4 <_strtod_l+0xbac>
 8007de8:	4652      	mov	r2, sl
 8007dea:	465b      	mov	r3, fp
 8007dec:	e7e1      	b.n	8007db2 <_strtod_l+0x9a>
 8007dee:	2200      	movs	r2, #0
 8007df0:	e7ee      	b.n	8007dd0 <_strtod_l+0xb8>
 8007df2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007df4:	b13a      	cbz	r2, 8007e06 <_strtod_l+0xee>
 8007df6:	2135      	movs	r1, #53	; 0x35
 8007df8:	a81a      	add	r0, sp, #104	; 0x68
 8007dfa:	f002 fcb0 	bl	800a75e <__copybits>
 8007dfe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e00:	4620      	mov	r0, r4
 8007e02:	f002 f86f 	bl	8009ee4 <_Bfree>
 8007e06:	3f01      	subs	r7, #1
 8007e08:	2f04      	cmp	r7, #4
 8007e0a:	d806      	bhi.n	8007e1a <_strtod_l+0x102>
 8007e0c:	e8df f007 	tbb	[pc, r7]
 8007e10:	1714030a 	.word	0x1714030a
 8007e14:	0a          	.byte	0x0a
 8007e15:	00          	.byte	0x00
 8007e16:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007e1a:	0728      	lsls	r0, r5, #28
 8007e1c:	d5c0      	bpl.n	8007da0 <_strtod_l+0x88>
 8007e1e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007e22:	e7bd      	b.n	8007da0 <_strtod_l+0x88>
 8007e24:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007e28:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e2a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007e2e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007e32:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007e36:	e7f0      	b.n	8007e1a <_strtod_l+0x102>
 8007e38:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007fbc <_strtod_l+0x2a4>
 8007e3c:	e7ed      	b.n	8007e1a <_strtod_l+0x102>
 8007e3e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007e42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007e46:	e7e8      	b.n	8007e1a <_strtod_l+0x102>
 8007e48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e4e:	785b      	ldrb	r3, [r3, #1]
 8007e50:	2b30      	cmp	r3, #48	; 0x30
 8007e52:	d0f9      	beq.n	8007e48 <_strtod_l+0x130>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0a3      	beq.n	8007da0 <_strtod_l+0x88>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f04f 0900 	mov.w	r9, #0
 8007e5e:	9304      	str	r3, [sp, #16]
 8007e60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e62:	9308      	str	r3, [sp, #32]
 8007e64:	f8cd 901c 	str.w	r9, [sp, #28]
 8007e68:	464f      	mov	r7, r9
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007e6e:	7806      	ldrb	r6, [r0, #0]
 8007e70:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007e74:	b2d9      	uxtb	r1, r3
 8007e76:	2909      	cmp	r1, #9
 8007e78:	d92a      	bls.n	8007ed0 <_strtod_l+0x1b8>
 8007e7a:	9905      	ldr	r1, [sp, #20]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	f002 ff1f 	bl	800acc0 <strncmp>
 8007e82:	b398      	cbz	r0, 8007eec <_strtod_l+0x1d4>
 8007e84:	2000      	movs	r0, #0
 8007e86:	4632      	mov	r2, r6
 8007e88:	463d      	mov	r5, r7
 8007e8a:	9005      	str	r0, [sp, #20]
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2a65      	cmp	r2, #101	; 0x65
 8007e90:	d001      	beq.n	8007e96 <_strtod_l+0x17e>
 8007e92:	2a45      	cmp	r2, #69	; 0x45
 8007e94:	d118      	bne.n	8007ec8 <_strtod_l+0x1b0>
 8007e96:	b91d      	cbnz	r5, 8007ea0 <_strtod_l+0x188>
 8007e98:	9a04      	ldr	r2, [sp, #16]
 8007e9a:	4302      	orrs	r2, r0
 8007e9c:	d09e      	beq.n	8007ddc <_strtod_l+0xc4>
 8007e9e:	2500      	movs	r5, #0
 8007ea0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007ea4:	f108 0201 	add.w	r2, r8, #1
 8007ea8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007eaa:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007eae:	2a2b      	cmp	r2, #43	; 0x2b
 8007eb0:	d075      	beq.n	8007f9e <_strtod_l+0x286>
 8007eb2:	2a2d      	cmp	r2, #45	; 0x2d
 8007eb4:	d07b      	beq.n	8007fae <_strtod_l+0x296>
 8007eb6:	f04f 0c00 	mov.w	ip, #0
 8007eba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007ebe:	2909      	cmp	r1, #9
 8007ec0:	f240 8082 	bls.w	8007fc8 <_strtod_l+0x2b0>
 8007ec4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007ec8:	2600      	movs	r6, #0
 8007eca:	e09d      	b.n	8008008 <_strtod_l+0x2f0>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	e7c4      	b.n	8007e5a <_strtod_l+0x142>
 8007ed0:	2f08      	cmp	r7, #8
 8007ed2:	bfd8      	it	le
 8007ed4:	9907      	ldrle	r1, [sp, #28]
 8007ed6:	f100 0001 	add.w	r0, r0, #1
 8007eda:	bfda      	itte	le
 8007edc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ee0:	9307      	strle	r3, [sp, #28]
 8007ee2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007ee6:	3701      	adds	r7, #1
 8007ee8:	9017      	str	r0, [sp, #92]	; 0x5c
 8007eea:	e7bf      	b.n	8007e6c <_strtod_l+0x154>
 8007eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eee:	195a      	adds	r2, r3, r5
 8007ef0:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ef2:	5d5a      	ldrb	r2, [r3, r5]
 8007ef4:	2f00      	cmp	r7, #0
 8007ef6:	d037      	beq.n	8007f68 <_strtod_l+0x250>
 8007ef8:	9005      	str	r0, [sp, #20]
 8007efa:	463d      	mov	r5, r7
 8007efc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d912      	bls.n	8007f2a <_strtod_l+0x212>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e7c2      	b.n	8007e8e <_strtod_l+0x176>
 8007f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f0a:	1c5a      	adds	r2, r3, #1
 8007f0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f0e:	785a      	ldrb	r2, [r3, #1]
 8007f10:	3001      	adds	r0, #1
 8007f12:	2a30      	cmp	r2, #48	; 0x30
 8007f14:	d0f8      	beq.n	8007f08 <_strtod_l+0x1f0>
 8007f16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f1a:	2b08      	cmp	r3, #8
 8007f1c:	f200 84d9 	bhi.w	80088d2 <_strtod_l+0xbba>
 8007f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f22:	9005      	str	r0, [sp, #20]
 8007f24:	2000      	movs	r0, #0
 8007f26:	9308      	str	r3, [sp, #32]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	3a30      	subs	r2, #48	; 0x30
 8007f2c:	f100 0301 	add.w	r3, r0, #1
 8007f30:	d014      	beq.n	8007f5c <_strtod_l+0x244>
 8007f32:	9905      	ldr	r1, [sp, #20]
 8007f34:	4419      	add	r1, r3
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	462b      	mov	r3, r5
 8007f3a:	eb00 0e05 	add.w	lr, r0, r5
 8007f3e:	210a      	movs	r1, #10
 8007f40:	4573      	cmp	r3, lr
 8007f42:	d113      	bne.n	8007f6c <_strtod_l+0x254>
 8007f44:	182b      	adds	r3, r5, r0
 8007f46:	2b08      	cmp	r3, #8
 8007f48:	f105 0501 	add.w	r5, r5, #1
 8007f4c:	4405      	add	r5, r0
 8007f4e:	dc1c      	bgt.n	8007f8a <_strtod_l+0x272>
 8007f50:	9907      	ldr	r1, [sp, #28]
 8007f52:	230a      	movs	r3, #10
 8007f54:	fb03 2301 	mla	r3, r3, r1, r2
 8007f58:	9307      	str	r3, [sp, #28]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f5e:	1c51      	adds	r1, r2, #1
 8007f60:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f62:	7852      	ldrb	r2, [r2, #1]
 8007f64:	4618      	mov	r0, r3
 8007f66:	e7c9      	b.n	8007efc <_strtod_l+0x1e4>
 8007f68:	4638      	mov	r0, r7
 8007f6a:	e7d2      	b.n	8007f12 <_strtod_l+0x1fa>
 8007f6c:	2b08      	cmp	r3, #8
 8007f6e:	dc04      	bgt.n	8007f7a <_strtod_l+0x262>
 8007f70:	9e07      	ldr	r6, [sp, #28]
 8007f72:	434e      	muls	r6, r1
 8007f74:	9607      	str	r6, [sp, #28]
 8007f76:	3301      	adds	r3, #1
 8007f78:	e7e2      	b.n	8007f40 <_strtod_l+0x228>
 8007f7a:	f103 0c01 	add.w	ip, r3, #1
 8007f7e:	f1bc 0f10 	cmp.w	ip, #16
 8007f82:	bfd8      	it	le
 8007f84:	fb01 f909 	mulle.w	r9, r1, r9
 8007f88:	e7f5      	b.n	8007f76 <_strtod_l+0x25e>
 8007f8a:	2d10      	cmp	r5, #16
 8007f8c:	bfdc      	itt	le
 8007f8e:	230a      	movle	r3, #10
 8007f90:	fb03 2909 	mlale	r9, r3, r9, r2
 8007f94:	e7e1      	b.n	8007f5a <_strtod_l+0x242>
 8007f96:	2300      	movs	r3, #0
 8007f98:	9305      	str	r3, [sp, #20]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e77c      	b.n	8007e98 <_strtod_l+0x180>
 8007f9e:	f04f 0c00 	mov.w	ip, #0
 8007fa2:	f108 0202 	add.w	r2, r8, #2
 8007fa6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007fa8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007fac:	e785      	b.n	8007eba <_strtod_l+0x1a2>
 8007fae:	f04f 0c01 	mov.w	ip, #1
 8007fb2:	e7f6      	b.n	8007fa2 <_strtod_l+0x28a>
 8007fb4:	0800d530 	.word	0x0800d530
 8007fb8:	0800d2e4 	.word	0x0800d2e4
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fc2:	1c51      	adds	r1, r2, #1
 8007fc4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fc6:	7852      	ldrb	r2, [r2, #1]
 8007fc8:	2a30      	cmp	r2, #48	; 0x30
 8007fca:	d0f9      	beq.n	8007fc0 <_strtod_l+0x2a8>
 8007fcc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007fd0:	2908      	cmp	r1, #8
 8007fd2:	f63f af79 	bhi.w	8007ec8 <_strtod_l+0x1b0>
 8007fd6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007fda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fdc:	9206      	str	r2, [sp, #24]
 8007fde:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fe0:	1c51      	adds	r1, r2, #1
 8007fe2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fe4:	7852      	ldrb	r2, [r2, #1]
 8007fe6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007fea:	2e09      	cmp	r6, #9
 8007fec:	d937      	bls.n	800805e <_strtod_l+0x346>
 8007fee:	9e06      	ldr	r6, [sp, #24]
 8007ff0:	1b89      	subs	r1, r1, r6
 8007ff2:	2908      	cmp	r1, #8
 8007ff4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007ff8:	dc02      	bgt.n	8008000 <_strtod_l+0x2e8>
 8007ffa:	4576      	cmp	r6, lr
 8007ffc:	bfa8      	it	ge
 8007ffe:	4676      	movge	r6, lr
 8008000:	f1bc 0f00 	cmp.w	ip, #0
 8008004:	d000      	beq.n	8008008 <_strtod_l+0x2f0>
 8008006:	4276      	negs	r6, r6
 8008008:	2d00      	cmp	r5, #0
 800800a:	d14d      	bne.n	80080a8 <_strtod_l+0x390>
 800800c:	9904      	ldr	r1, [sp, #16]
 800800e:	4301      	orrs	r1, r0
 8008010:	f47f aec6 	bne.w	8007da0 <_strtod_l+0x88>
 8008014:	2b00      	cmp	r3, #0
 8008016:	f47f aee1 	bne.w	8007ddc <_strtod_l+0xc4>
 800801a:	2a69      	cmp	r2, #105	; 0x69
 800801c:	d027      	beq.n	800806e <_strtod_l+0x356>
 800801e:	dc24      	bgt.n	800806a <_strtod_l+0x352>
 8008020:	2a49      	cmp	r2, #73	; 0x49
 8008022:	d024      	beq.n	800806e <_strtod_l+0x356>
 8008024:	2a4e      	cmp	r2, #78	; 0x4e
 8008026:	f47f aed9 	bne.w	8007ddc <_strtod_l+0xc4>
 800802a:	499f      	ldr	r1, [pc, #636]	; (80082a8 <_strtod_l+0x590>)
 800802c:	a817      	add	r0, sp, #92	; 0x5c
 800802e:	f001 fe3d 	bl	8009cac <__match>
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f aed2 	beq.w	8007ddc <_strtod_l+0xc4>
 8008038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b28      	cmp	r3, #40	; 0x28
 800803e:	d12d      	bne.n	800809c <_strtod_l+0x384>
 8008040:	499a      	ldr	r1, [pc, #616]	; (80082ac <_strtod_l+0x594>)
 8008042:	aa1a      	add	r2, sp, #104	; 0x68
 8008044:	a817      	add	r0, sp, #92	; 0x5c
 8008046:	f001 fe45 	bl	8009cd4 <__hexnan>
 800804a:	2805      	cmp	r0, #5
 800804c:	d126      	bne.n	800809c <_strtod_l+0x384>
 800804e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008050:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008054:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008058:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800805c:	e6a0      	b.n	8007da0 <_strtod_l+0x88>
 800805e:	210a      	movs	r1, #10
 8008060:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008064:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008068:	e7b9      	b.n	8007fde <_strtod_l+0x2c6>
 800806a:	2a6e      	cmp	r2, #110	; 0x6e
 800806c:	e7db      	b.n	8008026 <_strtod_l+0x30e>
 800806e:	4990      	ldr	r1, [pc, #576]	; (80082b0 <_strtod_l+0x598>)
 8008070:	a817      	add	r0, sp, #92	; 0x5c
 8008072:	f001 fe1b 	bl	8009cac <__match>
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f aeb0 	beq.w	8007ddc <_strtod_l+0xc4>
 800807c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800807e:	498d      	ldr	r1, [pc, #564]	; (80082b4 <_strtod_l+0x59c>)
 8008080:	3b01      	subs	r3, #1
 8008082:	a817      	add	r0, sp, #92	; 0x5c
 8008084:	9317      	str	r3, [sp, #92]	; 0x5c
 8008086:	f001 fe11 	bl	8009cac <__match>
 800808a:	b910      	cbnz	r0, 8008092 <_strtod_l+0x37a>
 800808c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800808e:	3301      	adds	r3, #1
 8008090:	9317      	str	r3, [sp, #92]	; 0x5c
 8008092:	f8df b230 	ldr.w	fp, [pc, #560]	; 80082c4 <_strtod_l+0x5ac>
 8008096:	f04f 0a00 	mov.w	sl, #0
 800809a:	e681      	b.n	8007da0 <_strtod_l+0x88>
 800809c:	4886      	ldr	r0, [pc, #536]	; (80082b8 <_strtod_l+0x5a0>)
 800809e:	f002 fdf7 	bl	800ac90 <nan>
 80080a2:	ec5b ab10 	vmov	sl, fp, d0
 80080a6:	e67b      	b.n	8007da0 <_strtod_l+0x88>
 80080a8:	9b05      	ldr	r3, [sp, #20]
 80080aa:	9807      	ldr	r0, [sp, #28]
 80080ac:	1af3      	subs	r3, r6, r3
 80080ae:	2f00      	cmp	r7, #0
 80080b0:	bf08      	it	eq
 80080b2:	462f      	moveq	r7, r5
 80080b4:	2d10      	cmp	r5, #16
 80080b6:	9306      	str	r3, [sp, #24]
 80080b8:	46a8      	mov	r8, r5
 80080ba:	bfa8      	it	ge
 80080bc:	f04f 0810 	movge.w	r8, #16
 80080c0:	f7f8 fa28 	bl	8000514 <__aeabi_ui2d>
 80080c4:	2d09      	cmp	r5, #9
 80080c6:	4682      	mov	sl, r0
 80080c8:	468b      	mov	fp, r1
 80080ca:	dd13      	ble.n	80080f4 <_strtod_l+0x3dc>
 80080cc:	4b7b      	ldr	r3, [pc, #492]	; (80082bc <_strtod_l+0x5a4>)
 80080ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80080d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80080d6:	f7f8 fa97 	bl	8000608 <__aeabi_dmul>
 80080da:	4682      	mov	sl, r0
 80080dc:	4648      	mov	r0, r9
 80080de:	468b      	mov	fp, r1
 80080e0:	f7f8 fa18 	bl	8000514 <__aeabi_ui2d>
 80080e4:	4602      	mov	r2, r0
 80080e6:	460b      	mov	r3, r1
 80080e8:	4650      	mov	r0, sl
 80080ea:	4659      	mov	r1, fp
 80080ec:	f7f8 f8d6 	bl	800029c <__adddf3>
 80080f0:	4682      	mov	sl, r0
 80080f2:	468b      	mov	fp, r1
 80080f4:	2d0f      	cmp	r5, #15
 80080f6:	dc38      	bgt.n	800816a <_strtod_l+0x452>
 80080f8:	9b06      	ldr	r3, [sp, #24]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f43f ae50 	beq.w	8007da0 <_strtod_l+0x88>
 8008100:	dd24      	ble.n	800814c <_strtod_l+0x434>
 8008102:	2b16      	cmp	r3, #22
 8008104:	dc0b      	bgt.n	800811e <_strtod_l+0x406>
 8008106:	496d      	ldr	r1, [pc, #436]	; (80082bc <_strtod_l+0x5a4>)
 8008108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800810c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008110:	4652      	mov	r2, sl
 8008112:	465b      	mov	r3, fp
 8008114:	f7f8 fa78 	bl	8000608 <__aeabi_dmul>
 8008118:	4682      	mov	sl, r0
 800811a:	468b      	mov	fp, r1
 800811c:	e640      	b.n	8007da0 <_strtod_l+0x88>
 800811e:	9a06      	ldr	r2, [sp, #24]
 8008120:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008124:	4293      	cmp	r3, r2
 8008126:	db20      	blt.n	800816a <_strtod_l+0x452>
 8008128:	4c64      	ldr	r4, [pc, #400]	; (80082bc <_strtod_l+0x5a4>)
 800812a:	f1c5 050f 	rsb	r5, r5, #15
 800812e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008132:	4652      	mov	r2, sl
 8008134:	465b      	mov	r3, fp
 8008136:	e9d1 0100 	ldrd	r0, r1, [r1]
 800813a:	f7f8 fa65 	bl	8000608 <__aeabi_dmul>
 800813e:	9b06      	ldr	r3, [sp, #24]
 8008140:	1b5d      	subs	r5, r3, r5
 8008142:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008146:	e9d4 2300 	ldrd	r2, r3, [r4]
 800814a:	e7e3      	b.n	8008114 <_strtod_l+0x3fc>
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	3316      	adds	r3, #22
 8008150:	db0b      	blt.n	800816a <_strtod_l+0x452>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	1b9e      	subs	r6, r3, r6
 8008156:	4b59      	ldr	r3, [pc, #356]	; (80082bc <_strtod_l+0x5a4>)
 8008158:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800815c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008160:	4650      	mov	r0, sl
 8008162:	4659      	mov	r1, fp
 8008164:	f7f8 fb7a 	bl	800085c <__aeabi_ddiv>
 8008168:	e7d6      	b.n	8008118 <_strtod_l+0x400>
 800816a:	9b06      	ldr	r3, [sp, #24]
 800816c:	eba5 0808 	sub.w	r8, r5, r8
 8008170:	4498      	add	r8, r3
 8008172:	f1b8 0f00 	cmp.w	r8, #0
 8008176:	dd74      	ble.n	8008262 <_strtod_l+0x54a>
 8008178:	f018 030f 	ands.w	r3, r8, #15
 800817c:	d00a      	beq.n	8008194 <_strtod_l+0x47c>
 800817e:	494f      	ldr	r1, [pc, #316]	; (80082bc <_strtod_l+0x5a4>)
 8008180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008184:	4652      	mov	r2, sl
 8008186:	465b      	mov	r3, fp
 8008188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800818c:	f7f8 fa3c 	bl	8000608 <__aeabi_dmul>
 8008190:	4682      	mov	sl, r0
 8008192:	468b      	mov	fp, r1
 8008194:	f038 080f 	bics.w	r8, r8, #15
 8008198:	d04f      	beq.n	800823a <_strtod_l+0x522>
 800819a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800819e:	dd22      	ble.n	80081e6 <_strtod_l+0x4ce>
 80081a0:	2500      	movs	r5, #0
 80081a2:	462e      	mov	r6, r5
 80081a4:	9507      	str	r5, [sp, #28]
 80081a6:	9505      	str	r5, [sp, #20]
 80081a8:	2322      	movs	r3, #34	; 0x22
 80081aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80082c4 <_strtod_l+0x5ac>
 80081ae:	6023      	str	r3, [r4, #0]
 80081b0:	f04f 0a00 	mov.w	sl, #0
 80081b4:	9b07      	ldr	r3, [sp, #28]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f43f adf2 	beq.w	8007da0 <_strtod_l+0x88>
 80081bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081be:	4620      	mov	r0, r4
 80081c0:	f001 fe90 	bl	8009ee4 <_Bfree>
 80081c4:	9905      	ldr	r1, [sp, #20]
 80081c6:	4620      	mov	r0, r4
 80081c8:	f001 fe8c 	bl	8009ee4 <_Bfree>
 80081cc:	4631      	mov	r1, r6
 80081ce:	4620      	mov	r0, r4
 80081d0:	f001 fe88 	bl	8009ee4 <_Bfree>
 80081d4:	9907      	ldr	r1, [sp, #28]
 80081d6:	4620      	mov	r0, r4
 80081d8:	f001 fe84 	bl	8009ee4 <_Bfree>
 80081dc:	4629      	mov	r1, r5
 80081de:	4620      	mov	r0, r4
 80081e0:	f001 fe80 	bl	8009ee4 <_Bfree>
 80081e4:	e5dc      	b.n	8007da0 <_strtod_l+0x88>
 80081e6:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <_strtod_l+0x5a8>)
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	2300      	movs	r3, #0
 80081ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80081f0:	4650      	mov	r0, sl
 80081f2:	4659      	mov	r1, fp
 80081f4:	4699      	mov	r9, r3
 80081f6:	f1b8 0f01 	cmp.w	r8, #1
 80081fa:	dc21      	bgt.n	8008240 <_strtod_l+0x528>
 80081fc:	b10b      	cbz	r3, 8008202 <_strtod_l+0x4ea>
 80081fe:	4682      	mov	sl, r0
 8008200:	468b      	mov	fp, r1
 8008202:	4b2f      	ldr	r3, [pc, #188]	; (80082c0 <_strtod_l+0x5a8>)
 8008204:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008208:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800820c:	4652      	mov	r2, sl
 800820e:	465b      	mov	r3, fp
 8008210:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008214:	f7f8 f9f8 	bl	8000608 <__aeabi_dmul>
 8008218:	4b2a      	ldr	r3, [pc, #168]	; (80082c4 <_strtod_l+0x5ac>)
 800821a:	460a      	mov	r2, r1
 800821c:	400b      	ands	r3, r1
 800821e:	492a      	ldr	r1, [pc, #168]	; (80082c8 <_strtod_l+0x5b0>)
 8008220:	428b      	cmp	r3, r1
 8008222:	4682      	mov	sl, r0
 8008224:	d8bc      	bhi.n	80081a0 <_strtod_l+0x488>
 8008226:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800822a:	428b      	cmp	r3, r1
 800822c:	bf86      	itte	hi
 800822e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80082cc <_strtod_l+0x5b4>
 8008232:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8008236:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800823a:	2300      	movs	r3, #0
 800823c:	9304      	str	r3, [sp, #16]
 800823e:	e084      	b.n	800834a <_strtod_l+0x632>
 8008240:	f018 0f01 	tst.w	r8, #1
 8008244:	d005      	beq.n	8008252 <_strtod_l+0x53a>
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f9dc 	bl	8000608 <__aeabi_dmul>
 8008250:	2301      	movs	r3, #1
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	3208      	adds	r2, #8
 8008256:	f109 0901 	add.w	r9, r9, #1
 800825a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800825e:	9204      	str	r2, [sp, #16]
 8008260:	e7c9      	b.n	80081f6 <_strtod_l+0x4de>
 8008262:	d0ea      	beq.n	800823a <_strtod_l+0x522>
 8008264:	f1c8 0800 	rsb	r8, r8, #0
 8008268:	f018 020f 	ands.w	r2, r8, #15
 800826c:	d00a      	beq.n	8008284 <_strtod_l+0x56c>
 800826e:	4b13      	ldr	r3, [pc, #76]	; (80082bc <_strtod_l+0x5a4>)
 8008270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827c:	f7f8 faee 	bl	800085c <__aeabi_ddiv>
 8008280:	4682      	mov	sl, r0
 8008282:	468b      	mov	fp, r1
 8008284:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008288:	d0d7      	beq.n	800823a <_strtod_l+0x522>
 800828a:	f1b8 0f1f 	cmp.w	r8, #31
 800828e:	dd1f      	ble.n	80082d0 <_strtod_l+0x5b8>
 8008290:	2500      	movs	r5, #0
 8008292:	462e      	mov	r6, r5
 8008294:	9507      	str	r5, [sp, #28]
 8008296:	9505      	str	r5, [sp, #20]
 8008298:	2322      	movs	r3, #34	; 0x22
 800829a:	f04f 0a00 	mov.w	sl, #0
 800829e:	f04f 0b00 	mov.w	fp, #0
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	e786      	b.n	80081b4 <_strtod_l+0x49c>
 80082a6:	bf00      	nop
 80082a8:	0800d2b5 	.word	0x0800d2b5
 80082ac:	0800d2f8 	.word	0x0800d2f8
 80082b0:	0800d2ad 	.word	0x0800d2ad
 80082b4:	0800d43c 	.word	0x0800d43c
 80082b8:	0800d6e8 	.word	0x0800d6e8
 80082bc:	0800d5c8 	.word	0x0800d5c8
 80082c0:	0800d5a0 	.word	0x0800d5a0
 80082c4:	7ff00000 	.word	0x7ff00000
 80082c8:	7ca00000 	.word	0x7ca00000
 80082cc:	7fefffff 	.word	0x7fefffff
 80082d0:	f018 0310 	ands.w	r3, r8, #16
 80082d4:	bf18      	it	ne
 80082d6:	236a      	movne	r3, #106	; 0x6a
 80082d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008688 <_strtod_l+0x970>
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	4650      	mov	r0, sl
 80082e0:	4659      	mov	r1, fp
 80082e2:	2300      	movs	r3, #0
 80082e4:	f018 0f01 	tst.w	r8, #1
 80082e8:	d004      	beq.n	80082f4 <_strtod_l+0x5dc>
 80082ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082ee:	f7f8 f98b 	bl	8000608 <__aeabi_dmul>
 80082f2:	2301      	movs	r3, #1
 80082f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80082f8:	f109 0908 	add.w	r9, r9, #8
 80082fc:	d1f2      	bne.n	80082e4 <_strtod_l+0x5cc>
 80082fe:	b10b      	cbz	r3, 8008304 <_strtod_l+0x5ec>
 8008300:	4682      	mov	sl, r0
 8008302:	468b      	mov	fp, r1
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	b1c3      	cbz	r3, 800833a <_strtod_l+0x622>
 8008308:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800830c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008310:	2b00      	cmp	r3, #0
 8008312:	4659      	mov	r1, fp
 8008314:	dd11      	ble.n	800833a <_strtod_l+0x622>
 8008316:	2b1f      	cmp	r3, #31
 8008318:	f340 8124 	ble.w	8008564 <_strtod_l+0x84c>
 800831c:	2b34      	cmp	r3, #52	; 0x34
 800831e:	bfde      	ittt	le
 8008320:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008324:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8008328:	fa03 f202 	lslle.w	r2, r3, r2
 800832c:	f04f 0a00 	mov.w	sl, #0
 8008330:	bfcc      	ite	gt
 8008332:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008336:	ea02 0b01 	andle.w	fp, r2, r1
 800833a:	2200      	movs	r2, #0
 800833c:	2300      	movs	r3, #0
 800833e:	4650      	mov	r0, sl
 8008340:	4659      	mov	r1, fp
 8008342:	f7f8 fbc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008346:	2800      	cmp	r0, #0
 8008348:	d1a2      	bne.n	8008290 <_strtod_l+0x578>
 800834a:	9b07      	ldr	r3, [sp, #28]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	9908      	ldr	r1, [sp, #32]
 8008350:	462b      	mov	r3, r5
 8008352:	463a      	mov	r2, r7
 8008354:	4620      	mov	r0, r4
 8008356:	f001 fe2d 	bl	8009fb4 <__s2b>
 800835a:	9007      	str	r0, [sp, #28]
 800835c:	2800      	cmp	r0, #0
 800835e:	f43f af1f 	beq.w	80081a0 <_strtod_l+0x488>
 8008362:	9b05      	ldr	r3, [sp, #20]
 8008364:	1b9e      	subs	r6, r3, r6
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	2b00      	cmp	r3, #0
 800836a:	bfb4      	ite	lt
 800836c:	4633      	movlt	r3, r6
 800836e:	2300      	movge	r3, #0
 8008370:	930c      	str	r3, [sp, #48]	; 0x30
 8008372:	9b06      	ldr	r3, [sp, #24]
 8008374:	2500      	movs	r5, #0
 8008376:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800837a:	9312      	str	r3, [sp, #72]	; 0x48
 800837c:	462e      	mov	r6, r5
 800837e:	9b07      	ldr	r3, [sp, #28]
 8008380:	4620      	mov	r0, r4
 8008382:	6859      	ldr	r1, [r3, #4]
 8008384:	f001 fd6e 	bl	8009e64 <_Balloc>
 8008388:	9005      	str	r0, [sp, #20]
 800838a:	2800      	cmp	r0, #0
 800838c:	f43f af0c 	beq.w	80081a8 <_strtod_l+0x490>
 8008390:	9b07      	ldr	r3, [sp, #28]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	3202      	adds	r2, #2
 8008396:	f103 010c 	add.w	r1, r3, #12
 800839a:	0092      	lsls	r2, r2, #2
 800839c:	300c      	adds	r0, #12
 800839e:	f001 fd53 	bl	8009e48 <memcpy>
 80083a2:	ec4b ab10 	vmov	d0, sl, fp
 80083a6:	aa1a      	add	r2, sp, #104	; 0x68
 80083a8:	a919      	add	r1, sp, #100	; 0x64
 80083aa:	4620      	mov	r0, r4
 80083ac:	f002 f948 	bl	800a640 <__d2b>
 80083b0:	ec4b ab18 	vmov	d8, sl, fp
 80083b4:	9018      	str	r0, [sp, #96]	; 0x60
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f43f aef6 	beq.w	80081a8 <_strtod_l+0x490>
 80083bc:	2101      	movs	r1, #1
 80083be:	4620      	mov	r0, r4
 80083c0:	f001 fe92 	bl	800a0e8 <__i2b>
 80083c4:	4606      	mov	r6, r0
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f aeee 	beq.w	80081a8 <_strtod_l+0x490>
 80083cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80083ce:	9904      	ldr	r1, [sp, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bfab      	itete	ge
 80083d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80083d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80083d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80083da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80083de:	bfac      	ite	ge
 80083e0:	eb03 0902 	addge.w	r9, r3, r2
 80083e4:	1ad7      	sublt	r7, r2, r3
 80083e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80083e8:	eba3 0801 	sub.w	r8, r3, r1
 80083ec:	4490      	add	r8, r2
 80083ee:	4ba1      	ldr	r3, [pc, #644]	; (8008674 <_strtod_l+0x95c>)
 80083f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80083f4:	4598      	cmp	r8, r3
 80083f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80083fa:	f280 80c7 	bge.w	800858c <_strtod_l+0x874>
 80083fe:	eba3 0308 	sub.w	r3, r3, r8
 8008402:	2b1f      	cmp	r3, #31
 8008404:	eba2 0203 	sub.w	r2, r2, r3
 8008408:	f04f 0101 	mov.w	r1, #1
 800840c:	f300 80b1 	bgt.w	8008572 <_strtod_l+0x85a>
 8008410:	fa01 f303 	lsl.w	r3, r1, r3
 8008414:	930d      	str	r3, [sp, #52]	; 0x34
 8008416:	2300      	movs	r3, #0
 8008418:	9308      	str	r3, [sp, #32]
 800841a:	eb09 0802 	add.w	r8, r9, r2
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	45c1      	cmp	r9, r8
 8008422:	4417      	add	r7, r2
 8008424:	441f      	add	r7, r3
 8008426:	464b      	mov	r3, r9
 8008428:	bfa8      	it	ge
 800842a:	4643      	movge	r3, r8
 800842c:	42bb      	cmp	r3, r7
 800842e:	bfa8      	it	ge
 8008430:	463b      	movge	r3, r7
 8008432:	2b00      	cmp	r3, #0
 8008434:	bfc2      	ittt	gt
 8008436:	eba8 0803 	subgt.w	r8, r8, r3
 800843a:	1aff      	subgt	r7, r7, r3
 800843c:	eba9 0903 	subgt.w	r9, r9, r3
 8008440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008442:	2b00      	cmp	r3, #0
 8008444:	dd17      	ble.n	8008476 <_strtod_l+0x75e>
 8008446:	4631      	mov	r1, r6
 8008448:	461a      	mov	r2, r3
 800844a:	4620      	mov	r0, r4
 800844c:	f001 ff0c 	bl	800a268 <__pow5mult>
 8008450:	4606      	mov	r6, r0
 8008452:	2800      	cmp	r0, #0
 8008454:	f43f aea8 	beq.w	80081a8 <_strtod_l+0x490>
 8008458:	4601      	mov	r1, r0
 800845a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800845c:	4620      	mov	r0, r4
 800845e:	f001 fe59 	bl	800a114 <__multiply>
 8008462:	900b      	str	r0, [sp, #44]	; 0x2c
 8008464:	2800      	cmp	r0, #0
 8008466:	f43f ae9f 	beq.w	80081a8 <_strtod_l+0x490>
 800846a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800846c:	4620      	mov	r0, r4
 800846e:	f001 fd39 	bl	8009ee4 <_Bfree>
 8008472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008474:	9318      	str	r3, [sp, #96]	; 0x60
 8008476:	f1b8 0f00 	cmp.w	r8, #0
 800847a:	f300 808c 	bgt.w	8008596 <_strtod_l+0x87e>
 800847e:	9b06      	ldr	r3, [sp, #24]
 8008480:	2b00      	cmp	r3, #0
 8008482:	dd08      	ble.n	8008496 <_strtod_l+0x77e>
 8008484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008486:	9905      	ldr	r1, [sp, #20]
 8008488:	4620      	mov	r0, r4
 800848a:	f001 feed 	bl	800a268 <__pow5mult>
 800848e:	9005      	str	r0, [sp, #20]
 8008490:	2800      	cmp	r0, #0
 8008492:	f43f ae89 	beq.w	80081a8 <_strtod_l+0x490>
 8008496:	2f00      	cmp	r7, #0
 8008498:	dd08      	ble.n	80084ac <_strtod_l+0x794>
 800849a:	9905      	ldr	r1, [sp, #20]
 800849c:	463a      	mov	r2, r7
 800849e:	4620      	mov	r0, r4
 80084a0:	f001 ff3c 	bl	800a31c <__lshift>
 80084a4:	9005      	str	r0, [sp, #20]
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f ae7e 	beq.w	80081a8 <_strtod_l+0x490>
 80084ac:	f1b9 0f00 	cmp.w	r9, #0
 80084b0:	dd08      	ble.n	80084c4 <_strtod_l+0x7ac>
 80084b2:	4631      	mov	r1, r6
 80084b4:	464a      	mov	r2, r9
 80084b6:	4620      	mov	r0, r4
 80084b8:	f001 ff30 	bl	800a31c <__lshift>
 80084bc:	4606      	mov	r6, r0
 80084be:	2800      	cmp	r0, #0
 80084c0:	f43f ae72 	beq.w	80081a8 <_strtod_l+0x490>
 80084c4:	9a05      	ldr	r2, [sp, #20]
 80084c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084c8:	4620      	mov	r0, r4
 80084ca:	f001 ffb3 	bl	800a434 <__mdiff>
 80084ce:	4605      	mov	r5, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f43f ae69 	beq.w	80081a8 <_strtod_l+0x490>
 80084d6:	68c3      	ldr	r3, [r0, #12]
 80084d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80084da:	2300      	movs	r3, #0
 80084dc:	60c3      	str	r3, [r0, #12]
 80084de:	4631      	mov	r1, r6
 80084e0:	f001 ff8c 	bl	800a3fc <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	da60      	bge.n	80085aa <_strtod_l+0x892>
 80084e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ea:	ea53 030a 	orrs.w	r3, r3, sl
 80084ee:	f040 8082 	bne.w	80085f6 <_strtod_l+0x8de>
 80084f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d17d      	bne.n	80085f6 <_strtod_l+0x8de>
 80084fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084fe:	0d1b      	lsrs	r3, r3, #20
 8008500:	051b      	lsls	r3, r3, #20
 8008502:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008506:	d976      	bls.n	80085f6 <_strtod_l+0x8de>
 8008508:	696b      	ldr	r3, [r5, #20]
 800850a:	b913      	cbnz	r3, 8008512 <_strtod_l+0x7fa>
 800850c:	692b      	ldr	r3, [r5, #16]
 800850e:	2b01      	cmp	r3, #1
 8008510:	dd71      	ble.n	80085f6 <_strtod_l+0x8de>
 8008512:	4629      	mov	r1, r5
 8008514:	2201      	movs	r2, #1
 8008516:	4620      	mov	r0, r4
 8008518:	f001 ff00 	bl	800a31c <__lshift>
 800851c:	4631      	mov	r1, r6
 800851e:	4605      	mov	r5, r0
 8008520:	f001 ff6c 	bl	800a3fc <__mcmp>
 8008524:	2800      	cmp	r0, #0
 8008526:	dd66      	ble.n	80085f6 <_strtod_l+0x8de>
 8008528:	9904      	ldr	r1, [sp, #16]
 800852a:	4a53      	ldr	r2, [pc, #332]	; (8008678 <_strtod_l+0x960>)
 800852c:	465b      	mov	r3, fp
 800852e:	2900      	cmp	r1, #0
 8008530:	f000 8081 	beq.w	8008636 <_strtod_l+0x91e>
 8008534:	ea02 010b 	and.w	r1, r2, fp
 8008538:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800853c:	dc7b      	bgt.n	8008636 <_strtod_l+0x91e>
 800853e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008542:	f77f aea9 	ble.w	8008298 <_strtod_l+0x580>
 8008546:	4b4d      	ldr	r3, [pc, #308]	; (800867c <_strtod_l+0x964>)
 8008548:	4650      	mov	r0, sl
 800854a:	4659      	mov	r1, fp
 800854c:	2200      	movs	r2, #0
 800854e:	f7f8 f85b 	bl	8000608 <__aeabi_dmul>
 8008552:	460b      	mov	r3, r1
 8008554:	4303      	orrs	r3, r0
 8008556:	bf08      	it	eq
 8008558:	2322      	moveq	r3, #34	; 0x22
 800855a:	4682      	mov	sl, r0
 800855c:	468b      	mov	fp, r1
 800855e:	bf08      	it	eq
 8008560:	6023      	streq	r3, [r4, #0]
 8008562:	e62b      	b.n	80081bc <_strtod_l+0x4a4>
 8008564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	ea03 0a0a 	and.w	sl, r3, sl
 8008570:	e6e3      	b.n	800833a <_strtod_l+0x622>
 8008572:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008576:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800857a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800857e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008582:	fa01 f308 	lsl.w	r3, r1, r8
 8008586:	9308      	str	r3, [sp, #32]
 8008588:	910d      	str	r1, [sp, #52]	; 0x34
 800858a:	e746      	b.n	800841a <_strtod_l+0x702>
 800858c:	2300      	movs	r3, #0
 800858e:	9308      	str	r3, [sp, #32]
 8008590:	2301      	movs	r3, #1
 8008592:	930d      	str	r3, [sp, #52]	; 0x34
 8008594:	e741      	b.n	800841a <_strtod_l+0x702>
 8008596:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008598:	4642      	mov	r2, r8
 800859a:	4620      	mov	r0, r4
 800859c:	f001 febe 	bl	800a31c <__lshift>
 80085a0:	9018      	str	r0, [sp, #96]	; 0x60
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f47f af6b 	bne.w	800847e <_strtod_l+0x766>
 80085a8:	e5fe      	b.n	80081a8 <_strtod_l+0x490>
 80085aa:	465f      	mov	r7, fp
 80085ac:	d16e      	bne.n	800868c <_strtod_l+0x974>
 80085ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80085b4:	b342      	cbz	r2, 8008608 <_strtod_l+0x8f0>
 80085b6:	4a32      	ldr	r2, [pc, #200]	; (8008680 <_strtod_l+0x968>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d128      	bne.n	800860e <_strtod_l+0x8f6>
 80085bc:	9b04      	ldr	r3, [sp, #16]
 80085be:	4651      	mov	r1, sl
 80085c0:	b1eb      	cbz	r3, 80085fe <_strtod_l+0x8e6>
 80085c2:	4b2d      	ldr	r3, [pc, #180]	; (8008678 <_strtod_l+0x960>)
 80085c4:	403b      	ands	r3, r7
 80085c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80085ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085ce:	d819      	bhi.n	8008604 <_strtod_l+0x8ec>
 80085d0:	0d1b      	lsrs	r3, r3, #20
 80085d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085d6:	fa02 f303 	lsl.w	r3, r2, r3
 80085da:	4299      	cmp	r1, r3
 80085dc:	d117      	bne.n	800860e <_strtod_l+0x8f6>
 80085de:	4b29      	ldr	r3, [pc, #164]	; (8008684 <_strtod_l+0x96c>)
 80085e0:	429f      	cmp	r7, r3
 80085e2:	d102      	bne.n	80085ea <_strtod_l+0x8d2>
 80085e4:	3101      	adds	r1, #1
 80085e6:	f43f addf 	beq.w	80081a8 <_strtod_l+0x490>
 80085ea:	4b23      	ldr	r3, [pc, #140]	; (8008678 <_strtod_l+0x960>)
 80085ec:	403b      	ands	r3, r7
 80085ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80085f2:	f04f 0a00 	mov.w	sl, #0
 80085f6:	9b04      	ldr	r3, [sp, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1a4      	bne.n	8008546 <_strtod_l+0x82e>
 80085fc:	e5de      	b.n	80081bc <_strtod_l+0x4a4>
 80085fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008602:	e7ea      	b.n	80085da <_strtod_l+0x8c2>
 8008604:	4613      	mov	r3, r2
 8008606:	e7e8      	b.n	80085da <_strtod_l+0x8c2>
 8008608:	ea53 030a 	orrs.w	r3, r3, sl
 800860c:	d08c      	beq.n	8008528 <_strtod_l+0x810>
 800860e:	9b08      	ldr	r3, [sp, #32]
 8008610:	b1db      	cbz	r3, 800864a <_strtod_l+0x932>
 8008612:	423b      	tst	r3, r7
 8008614:	d0ef      	beq.n	80085f6 <_strtod_l+0x8de>
 8008616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	4650      	mov	r0, sl
 800861c:	4659      	mov	r1, fp
 800861e:	b1c3      	cbz	r3, 8008652 <_strtod_l+0x93a>
 8008620:	f7ff fb5e 	bl	8007ce0 <sulp>
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	ec51 0b18 	vmov	r0, r1, d8
 800862c:	f7f7 fe36 	bl	800029c <__adddf3>
 8008630:	4682      	mov	sl, r0
 8008632:	468b      	mov	fp, r1
 8008634:	e7df      	b.n	80085f6 <_strtod_l+0x8de>
 8008636:	4013      	ands	r3, r2
 8008638:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800863c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008640:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008644:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008648:	e7d5      	b.n	80085f6 <_strtod_l+0x8de>
 800864a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864c:	ea13 0f0a 	tst.w	r3, sl
 8008650:	e7e0      	b.n	8008614 <_strtod_l+0x8fc>
 8008652:	f7ff fb45 	bl	8007ce0 <sulp>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	ec51 0b18 	vmov	r0, r1, d8
 800865e:	f7f7 fe1b 	bl	8000298 <__aeabi_dsub>
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	f7f8 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800866e:	2800      	cmp	r0, #0
 8008670:	d0c1      	beq.n	80085f6 <_strtod_l+0x8de>
 8008672:	e611      	b.n	8008298 <_strtod_l+0x580>
 8008674:	fffffc02 	.word	0xfffffc02
 8008678:	7ff00000 	.word	0x7ff00000
 800867c:	39500000 	.word	0x39500000
 8008680:	000fffff 	.word	0x000fffff
 8008684:	7fefffff 	.word	0x7fefffff
 8008688:	0800d310 	.word	0x0800d310
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	f002 f832 	bl	800a6f8 <__ratio>
 8008694:	ec59 8b10 	vmov	r8, r9, d0
 8008698:	ee10 0a10 	vmov	r0, s0
 800869c:	2200      	movs	r2, #0
 800869e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80086a2:	4649      	mov	r1, r9
 80086a4:	f7f8 fa2c 	bl	8000b00 <__aeabi_dcmple>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d07a      	beq.n	80087a2 <_strtod_l+0xa8a>
 80086ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d04a      	beq.n	8008748 <_strtod_l+0xa30>
 80086b2:	4b95      	ldr	r3, [pc, #596]	; (8008908 <_strtod_l+0xbf0>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008908 <_strtod_l+0xbf0>
 80086be:	f04f 0800 	mov.w	r8, #0
 80086c2:	4b92      	ldr	r3, [pc, #584]	; (800890c <_strtod_l+0xbf4>)
 80086c4:	403b      	ands	r3, r7
 80086c6:	930d      	str	r3, [sp, #52]	; 0x34
 80086c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086ca:	4b91      	ldr	r3, [pc, #580]	; (8008910 <_strtod_l+0xbf8>)
 80086cc:	429a      	cmp	r2, r3
 80086ce:	f040 80b0 	bne.w	8008832 <_strtod_l+0xb1a>
 80086d2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086d6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80086da:	ec4b ab10 	vmov	d0, sl, fp
 80086de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086e2:	f001 ff31 	bl	800a548 <__ulp>
 80086e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80086ea:	ec53 2b10 	vmov	r2, r3, d0
 80086ee:	f7f7 ff8b 	bl	8000608 <__aeabi_dmul>
 80086f2:	4652      	mov	r2, sl
 80086f4:	465b      	mov	r3, fp
 80086f6:	f7f7 fdd1 	bl	800029c <__adddf3>
 80086fa:	460b      	mov	r3, r1
 80086fc:	4983      	ldr	r1, [pc, #524]	; (800890c <_strtod_l+0xbf4>)
 80086fe:	4a85      	ldr	r2, [pc, #532]	; (8008914 <_strtod_l+0xbfc>)
 8008700:	4019      	ands	r1, r3
 8008702:	4291      	cmp	r1, r2
 8008704:	4682      	mov	sl, r0
 8008706:	d960      	bls.n	80087ca <_strtod_l+0xab2>
 8008708:	ee18 3a90 	vmov	r3, s17
 800870c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008710:	4293      	cmp	r3, r2
 8008712:	d104      	bne.n	800871e <_strtod_l+0xa06>
 8008714:	ee18 3a10 	vmov	r3, s16
 8008718:	3301      	adds	r3, #1
 800871a:	f43f ad45 	beq.w	80081a8 <_strtod_l+0x490>
 800871e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008920 <_strtod_l+0xc08>
 8008722:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008726:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008728:	4620      	mov	r0, r4
 800872a:	f001 fbdb 	bl	8009ee4 <_Bfree>
 800872e:	9905      	ldr	r1, [sp, #20]
 8008730:	4620      	mov	r0, r4
 8008732:	f001 fbd7 	bl	8009ee4 <_Bfree>
 8008736:	4631      	mov	r1, r6
 8008738:	4620      	mov	r0, r4
 800873a:	f001 fbd3 	bl	8009ee4 <_Bfree>
 800873e:	4629      	mov	r1, r5
 8008740:	4620      	mov	r0, r4
 8008742:	f001 fbcf 	bl	8009ee4 <_Bfree>
 8008746:	e61a      	b.n	800837e <_strtod_l+0x666>
 8008748:	f1ba 0f00 	cmp.w	sl, #0
 800874c:	d11b      	bne.n	8008786 <_strtod_l+0xa6e>
 800874e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008752:	b9f3      	cbnz	r3, 8008792 <_strtod_l+0xa7a>
 8008754:	4b6c      	ldr	r3, [pc, #432]	; (8008908 <_strtod_l+0xbf0>)
 8008756:	2200      	movs	r2, #0
 8008758:	4640      	mov	r0, r8
 800875a:	4649      	mov	r1, r9
 800875c:	f7f8 f9c6 	bl	8000aec <__aeabi_dcmplt>
 8008760:	b9d0      	cbnz	r0, 8008798 <_strtod_l+0xa80>
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	4b6c      	ldr	r3, [pc, #432]	; (8008918 <_strtod_l+0xc00>)
 8008768:	2200      	movs	r2, #0
 800876a:	f7f7 ff4d 	bl	8000608 <__aeabi_dmul>
 800876e:	4680      	mov	r8, r0
 8008770:	4689      	mov	r9, r1
 8008772:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008776:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800877a:	9315      	str	r3, [sp, #84]	; 0x54
 800877c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008784:	e79d      	b.n	80086c2 <_strtod_l+0x9aa>
 8008786:	f1ba 0f01 	cmp.w	sl, #1
 800878a:	d102      	bne.n	8008792 <_strtod_l+0xa7a>
 800878c:	2f00      	cmp	r7, #0
 800878e:	f43f ad83 	beq.w	8008298 <_strtod_l+0x580>
 8008792:	4b62      	ldr	r3, [pc, #392]	; (800891c <_strtod_l+0xc04>)
 8008794:	2200      	movs	r2, #0
 8008796:	e78e      	b.n	80086b6 <_strtod_l+0x99e>
 8008798:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008918 <_strtod_l+0xc00>
 800879c:	f04f 0800 	mov.w	r8, #0
 80087a0:	e7e7      	b.n	8008772 <_strtod_l+0xa5a>
 80087a2:	4b5d      	ldr	r3, [pc, #372]	; (8008918 <_strtod_l+0xc00>)
 80087a4:	4640      	mov	r0, r8
 80087a6:	4649      	mov	r1, r9
 80087a8:	2200      	movs	r2, #0
 80087aa:	f7f7 ff2d 	bl	8000608 <__aeabi_dmul>
 80087ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b0:	4680      	mov	r8, r0
 80087b2:	4689      	mov	r9, r1
 80087b4:	b933      	cbnz	r3, 80087c4 <_strtod_l+0xaac>
 80087b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ba:	900e      	str	r0, [sp, #56]	; 0x38
 80087bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80087be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80087c2:	e7dd      	b.n	8008780 <_strtod_l+0xa68>
 80087c4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80087c8:	e7f9      	b.n	80087be <_strtod_l+0xaa6>
 80087ca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80087ce:	9b04      	ldr	r3, [sp, #16]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1a8      	bne.n	8008726 <_strtod_l+0xa0e>
 80087d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087da:	0d1b      	lsrs	r3, r3, #20
 80087dc:	051b      	lsls	r3, r3, #20
 80087de:	429a      	cmp	r2, r3
 80087e0:	d1a1      	bne.n	8008726 <_strtod_l+0xa0e>
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f8 fa6f 	bl	8000cc8 <__aeabi_d2lz>
 80087ea:	f7f7 fedf 	bl	80005ac <__aeabi_l2d>
 80087ee:	4602      	mov	r2, r0
 80087f0:	460b      	mov	r3, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f7f7 fd4f 	bl	8000298 <__aeabi_dsub>
 80087fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80087fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008800:	ea43 030a 	orr.w	r3, r3, sl
 8008804:	4313      	orrs	r3, r2
 8008806:	4680      	mov	r8, r0
 8008808:	4689      	mov	r9, r1
 800880a:	d055      	beq.n	80088b8 <_strtod_l+0xba0>
 800880c:	a336      	add	r3, pc, #216	; (adr r3, 80088e8 <_strtod_l+0xbd0>)
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f7f8 f96b 	bl	8000aec <__aeabi_dcmplt>
 8008816:	2800      	cmp	r0, #0
 8008818:	f47f acd0 	bne.w	80081bc <_strtod_l+0x4a4>
 800881c:	a334      	add	r3, pc, #208	; (adr r3, 80088f0 <_strtod_l+0xbd8>)
 800881e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008822:	4640      	mov	r0, r8
 8008824:	4649      	mov	r1, r9
 8008826:	f7f8 f97f 	bl	8000b28 <__aeabi_dcmpgt>
 800882a:	2800      	cmp	r0, #0
 800882c:	f43f af7b 	beq.w	8008726 <_strtod_l+0xa0e>
 8008830:	e4c4      	b.n	80081bc <_strtod_l+0x4a4>
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	b333      	cbz	r3, 8008884 <_strtod_l+0xb6c>
 8008836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008838:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800883c:	d822      	bhi.n	8008884 <_strtod_l+0xb6c>
 800883e:	a32e      	add	r3, pc, #184	; (adr r3, 80088f8 <_strtod_l+0xbe0>)
 8008840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008844:	4640      	mov	r0, r8
 8008846:	4649      	mov	r1, r9
 8008848:	f7f8 f95a 	bl	8000b00 <__aeabi_dcmple>
 800884c:	b1a0      	cbz	r0, 8008878 <_strtod_l+0xb60>
 800884e:	4649      	mov	r1, r9
 8008850:	4640      	mov	r0, r8
 8008852:	f7f8 f9b1 	bl	8000bb8 <__aeabi_d2uiz>
 8008856:	2801      	cmp	r0, #1
 8008858:	bf38      	it	cc
 800885a:	2001      	movcc	r0, #1
 800885c:	f7f7 fe5a 	bl	8000514 <__aeabi_ui2d>
 8008860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008862:	4680      	mov	r8, r0
 8008864:	4689      	mov	r9, r1
 8008866:	bb23      	cbnz	r3, 80088b2 <_strtod_l+0xb9a>
 8008868:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800886c:	9010      	str	r0, [sp, #64]	; 0x40
 800886e:	9311      	str	r3, [sp, #68]	; 0x44
 8008870:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008874:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800887c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008880:	1a9b      	subs	r3, r3, r2
 8008882:	9309      	str	r3, [sp, #36]	; 0x24
 8008884:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008888:	eeb0 0a48 	vmov.f32	s0, s16
 800888c:	eef0 0a68 	vmov.f32	s1, s17
 8008890:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008894:	f001 fe58 	bl	800a548 <__ulp>
 8008898:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800889c:	ec53 2b10 	vmov	r2, r3, d0
 80088a0:	f7f7 feb2 	bl	8000608 <__aeabi_dmul>
 80088a4:	ec53 2b18 	vmov	r2, r3, d8
 80088a8:	f7f7 fcf8 	bl	800029c <__adddf3>
 80088ac:	4682      	mov	sl, r0
 80088ae:	468b      	mov	fp, r1
 80088b0:	e78d      	b.n	80087ce <_strtod_l+0xab6>
 80088b2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80088b6:	e7db      	b.n	8008870 <_strtod_l+0xb58>
 80088b8:	a311      	add	r3, pc, #68	; (adr r3, 8008900 <_strtod_l+0xbe8>)
 80088ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088be:	f7f8 f915 	bl	8000aec <__aeabi_dcmplt>
 80088c2:	e7b2      	b.n	800882a <_strtod_l+0xb12>
 80088c4:	2300      	movs	r3, #0
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80088ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	f7ff ba6b 	b.w	8007da8 <_strtod_l+0x90>
 80088d2:	2a65      	cmp	r2, #101	; 0x65
 80088d4:	f43f ab5f 	beq.w	8007f96 <_strtod_l+0x27e>
 80088d8:	2a45      	cmp	r2, #69	; 0x45
 80088da:	f43f ab5c 	beq.w	8007f96 <_strtod_l+0x27e>
 80088de:	2301      	movs	r3, #1
 80088e0:	f7ff bb94 	b.w	800800c <_strtod_l+0x2f4>
 80088e4:	f3af 8000 	nop.w
 80088e8:	94a03595 	.word	0x94a03595
 80088ec:	3fdfffff 	.word	0x3fdfffff
 80088f0:	35afe535 	.word	0x35afe535
 80088f4:	3fe00000 	.word	0x3fe00000
 80088f8:	ffc00000 	.word	0xffc00000
 80088fc:	41dfffff 	.word	0x41dfffff
 8008900:	94a03595 	.word	0x94a03595
 8008904:	3fcfffff 	.word	0x3fcfffff
 8008908:	3ff00000 	.word	0x3ff00000
 800890c:	7ff00000 	.word	0x7ff00000
 8008910:	7fe00000 	.word	0x7fe00000
 8008914:	7c9fffff 	.word	0x7c9fffff
 8008918:	3fe00000 	.word	0x3fe00000
 800891c:	bff00000 	.word	0xbff00000
 8008920:	7fefffff 	.word	0x7fefffff

08008924 <_strtod_r>:
 8008924:	4b01      	ldr	r3, [pc, #4]	; (800892c <_strtod_r+0x8>)
 8008926:	f7ff b9f7 	b.w	8007d18 <_strtod_l>
 800892a:	bf00      	nop
 800892c:	20000088 	.word	0x20000088

08008930 <_strtol_l.constprop.0>:
 8008930:	2b01      	cmp	r3, #1
 8008932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008936:	d001      	beq.n	800893c <_strtol_l.constprop.0+0xc>
 8008938:	2b24      	cmp	r3, #36	; 0x24
 800893a:	d906      	bls.n	800894a <_strtol_l.constprop.0+0x1a>
 800893c:	f7fe fafe 	bl	8006f3c <__errno>
 8008940:	2316      	movs	r3, #22
 8008942:	6003      	str	r3, [r0, #0]
 8008944:	2000      	movs	r0, #0
 8008946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008a30 <_strtol_l.constprop.0+0x100>
 800894e:	460d      	mov	r5, r1
 8008950:	462e      	mov	r6, r5
 8008952:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008956:	f814 700c 	ldrb.w	r7, [r4, ip]
 800895a:	f017 0708 	ands.w	r7, r7, #8
 800895e:	d1f7      	bne.n	8008950 <_strtol_l.constprop.0+0x20>
 8008960:	2c2d      	cmp	r4, #45	; 0x2d
 8008962:	d132      	bne.n	80089ca <_strtol_l.constprop.0+0x9a>
 8008964:	782c      	ldrb	r4, [r5, #0]
 8008966:	2701      	movs	r7, #1
 8008968:	1cb5      	adds	r5, r6, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d05b      	beq.n	8008a26 <_strtol_l.constprop.0+0xf6>
 800896e:	2b10      	cmp	r3, #16
 8008970:	d109      	bne.n	8008986 <_strtol_l.constprop.0+0x56>
 8008972:	2c30      	cmp	r4, #48	; 0x30
 8008974:	d107      	bne.n	8008986 <_strtol_l.constprop.0+0x56>
 8008976:	782c      	ldrb	r4, [r5, #0]
 8008978:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800897c:	2c58      	cmp	r4, #88	; 0x58
 800897e:	d14d      	bne.n	8008a1c <_strtol_l.constprop.0+0xec>
 8008980:	786c      	ldrb	r4, [r5, #1]
 8008982:	2310      	movs	r3, #16
 8008984:	3502      	adds	r5, #2
 8008986:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800898a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800898e:	f04f 0c00 	mov.w	ip, #0
 8008992:	fbb8 f9f3 	udiv	r9, r8, r3
 8008996:	4666      	mov	r6, ip
 8008998:	fb03 8a19 	mls	sl, r3, r9, r8
 800899c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80089a0:	f1be 0f09 	cmp.w	lr, #9
 80089a4:	d816      	bhi.n	80089d4 <_strtol_l.constprop.0+0xa4>
 80089a6:	4674      	mov	r4, lr
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	dd24      	ble.n	80089f6 <_strtol_l.constprop.0+0xc6>
 80089ac:	f1bc 0f00 	cmp.w	ip, #0
 80089b0:	db1e      	blt.n	80089f0 <_strtol_l.constprop.0+0xc0>
 80089b2:	45b1      	cmp	r9, r6
 80089b4:	d31c      	bcc.n	80089f0 <_strtol_l.constprop.0+0xc0>
 80089b6:	d101      	bne.n	80089bc <_strtol_l.constprop.0+0x8c>
 80089b8:	45a2      	cmp	sl, r4
 80089ba:	db19      	blt.n	80089f0 <_strtol_l.constprop.0+0xc0>
 80089bc:	fb06 4603 	mla	r6, r6, r3, r4
 80089c0:	f04f 0c01 	mov.w	ip, #1
 80089c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089c8:	e7e8      	b.n	800899c <_strtol_l.constprop.0+0x6c>
 80089ca:	2c2b      	cmp	r4, #43	; 0x2b
 80089cc:	bf04      	itt	eq
 80089ce:	782c      	ldrbeq	r4, [r5, #0]
 80089d0:	1cb5      	addeq	r5, r6, #2
 80089d2:	e7ca      	b.n	800896a <_strtol_l.constprop.0+0x3a>
 80089d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80089d8:	f1be 0f19 	cmp.w	lr, #25
 80089dc:	d801      	bhi.n	80089e2 <_strtol_l.constprop.0+0xb2>
 80089de:	3c37      	subs	r4, #55	; 0x37
 80089e0:	e7e2      	b.n	80089a8 <_strtol_l.constprop.0+0x78>
 80089e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80089e6:	f1be 0f19 	cmp.w	lr, #25
 80089ea:	d804      	bhi.n	80089f6 <_strtol_l.constprop.0+0xc6>
 80089ec:	3c57      	subs	r4, #87	; 0x57
 80089ee:	e7db      	b.n	80089a8 <_strtol_l.constprop.0+0x78>
 80089f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80089f4:	e7e6      	b.n	80089c4 <_strtol_l.constprop.0+0x94>
 80089f6:	f1bc 0f00 	cmp.w	ip, #0
 80089fa:	da05      	bge.n	8008a08 <_strtol_l.constprop.0+0xd8>
 80089fc:	2322      	movs	r3, #34	; 0x22
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	4646      	mov	r6, r8
 8008a02:	b942      	cbnz	r2, 8008a16 <_strtol_l.constprop.0+0xe6>
 8008a04:	4630      	mov	r0, r6
 8008a06:	e79e      	b.n	8008946 <_strtol_l.constprop.0+0x16>
 8008a08:	b107      	cbz	r7, 8008a0c <_strtol_l.constprop.0+0xdc>
 8008a0a:	4276      	negs	r6, r6
 8008a0c:	2a00      	cmp	r2, #0
 8008a0e:	d0f9      	beq.n	8008a04 <_strtol_l.constprop.0+0xd4>
 8008a10:	f1bc 0f00 	cmp.w	ip, #0
 8008a14:	d000      	beq.n	8008a18 <_strtol_l.constprop.0+0xe8>
 8008a16:	1e69      	subs	r1, r5, #1
 8008a18:	6011      	str	r1, [r2, #0]
 8008a1a:	e7f3      	b.n	8008a04 <_strtol_l.constprop.0+0xd4>
 8008a1c:	2430      	movs	r4, #48	; 0x30
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1b1      	bne.n	8008986 <_strtol_l.constprop.0+0x56>
 8008a22:	2308      	movs	r3, #8
 8008a24:	e7af      	b.n	8008986 <_strtol_l.constprop.0+0x56>
 8008a26:	2c30      	cmp	r4, #48	; 0x30
 8008a28:	d0a5      	beq.n	8008976 <_strtol_l.constprop.0+0x46>
 8008a2a:	230a      	movs	r3, #10
 8008a2c:	e7ab      	b.n	8008986 <_strtol_l.constprop.0+0x56>
 8008a2e:	bf00      	nop
 8008a30:	0800d339 	.word	0x0800d339

08008a34 <_strtol_r>:
 8008a34:	f7ff bf7c 	b.w	8008930 <_strtol_l.constprop.0>

08008a38 <quorem>:
 8008a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3c:	6903      	ldr	r3, [r0, #16]
 8008a3e:	690c      	ldr	r4, [r1, #16]
 8008a40:	42a3      	cmp	r3, r4
 8008a42:	4607      	mov	r7, r0
 8008a44:	f2c0 8081 	blt.w	8008b4a <quorem+0x112>
 8008a48:	3c01      	subs	r4, #1
 8008a4a:	f101 0814 	add.w	r8, r1, #20
 8008a4e:	f100 0514 	add.w	r5, r0, #20
 8008a52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a60:	3301      	adds	r3, #1
 8008a62:	429a      	cmp	r2, r3
 8008a64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a6c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a70:	d331      	bcc.n	8008ad6 <quorem+0x9e>
 8008a72:	f04f 0e00 	mov.w	lr, #0
 8008a76:	4640      	mov	r0, r8
 8008a78:	46ac      	mov	ip, r5
 8008a7a:	46f2      	mov	sl, lr
 8008a7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a80:	b293      	uxth	r3, r2
 8008a82:	fb06 e303 	mla	r3, r6, r3, lr
 8008a86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	ebaa 0303 	sub.w	r3, sl, r3
 8008a90:	f8dc a000 	ldr.w	sl, [ip]
 8008a94:	0c12      	lsrs	r2, r2, #16
 8008a96:	fa13 f38a 	uxtah	r3, r3, sl
 8008a9a:	fb06 e202 	mla	r2, r6, r2, lr
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	9b00      	ldr	r3, [sp, #0]
 8008aa2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008aa6:	b292      	uxth	r2, r2
 8008aa8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008aac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ab0:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ab4:	4581      	cmp	r9, r0
 8008ab6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aba:	f84c 3b04 	str.w	r3, [ip], #4
 8008abe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ac2:	d2db      	bcs.n	8008a7c <quorem+0x44>
 8008ac4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ac8:	b92b      	cbnz	r3, 8008ad6 <quorem+0x9e>
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	3b04      	subs	r3, #4
 8008ace:	429d      	cmp	r5, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	d32e      	bcc.n	8008b32 <quorem+0xfa>
 8008ad4:	613c      	str	r4, [r7, #16]
 8008ad6:	4638      	mov	r0, r7
 8008ad8:	f001 fc90 	bl	800a3fc <__mcmp>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	db24      	blt.n	8008b2a <quorem+0xf2>
 8008ae0:	3601      	adds	r6, #1
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f04f 0c00 	mov.w	ip, #0
 8008ae8:	f858 2b04 	ldr.w	r2, [r8], #4
 8008aec:	f8d0 e000 	ldr.w	lr, [r0]
 8008af0:	b293      	uxth	r3, r2
 8008af2:	ebac 0303 	sub.w	r3, ip, r3
 8008af6:	0c12      	lsrs	r2, r2, #16
 8008af8:	fa13 f38e 	uxtah	r3, r3, lr
 8008afc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b0a:	45c1      	cmp	r9, r8
 8008b0c:	f840 3b04 	str.w	r3, [r0], #4
 8008b10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b14:	d2e8      	bcs.n	8008ae8 <quorem+0xb0>
 8008b16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b1e:	b922      	cbnz	r2, 8008b2a <quorem+0xf2>
 8008b20:	3b04      	subs	r3, #4
 8008b22:	429d      	cmp	r5, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	d30a      	bcc.n	8008b3e <quorem+0x106>
 8008b28:	613c      	str	r4, [r7, #16]
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	b003      	add	sp, #12
 8008b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b32:	6812      	ldr	r2, [r2, #0]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	2a00      	cmp	r2, #0
 8008b38:	d1cc      	bne.n	8008ad4 <quorem+0x9c>
 8008b3a:	3c01      	subs	r4, #1
 8008b3c:	e7c7      	b.n	8008ace <quorem+0x96>
 8008b3e:	6812      	ldr	r2, [r2, #0]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	2a00      	cmp	r2, #0
 8008b44:	d1f0      	bne.n	8008b28 <quorem+0xf0>
 8008b46:	3c01      	subs	r4, #1
 8008b48:	e7eb      	b.n	8008b22 <quorem+0xea>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e7ee      	b.n	8008b2c <quorem+0xf4>
	...

08008b50 <_dtoa_r>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	ed2d 8b04 	vpush	{d8-d9}
 8008b58:	ec57 6b10 	vmov	r6, r7, d0
 8008b5c:	b093      	sub	sp, #76	; 0x4c
 8008b5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b64:	9106      	str	r1, [sp, #24]
 8008b66:	ee10 aa10 	vmov	sl, s0
 8008b6a:	4604      	mov	r4, r0
 8008b6c:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6e:	930c      	str	r3, [sp, #48]	; 0x30
 8008b70:	46bb      	mov	fp, r7
 8008b72:	b975      	cbnz	r5, 8008b92 <_dtoa_r+0x42>
 8008b74:	2010      	movs	r0, #16
 8008b76:	f001 f94d 	bl	8009e14 <malloc>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b7e:	b920      	cbnz	r0, 8008b8a <_dtoa_r+0x3a>
 8008b80:	4ba7      	ldr	r3, [pc, #668]	; (8008e20 <_dtoa_r+0x2d0>)
 8008b82:	21ea      	movs	r1, #234	; 0xea
 8008b84:	48a7      	ldr	r0, [pc, #668]	; (8008e24 <_dtoa_r+0x2d4>)
 8008b86:	f002 f8bd 	bl	800ad04 <__assert_func>
 8008b8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b8e:	6005      	str	r5, [r0, #0]
 8008b90:	60c5      	str	r5, [r0, #12]
 8008b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b94:	6819      	ldr	r1, [r3, #0]
 8008b96:	b151      	cbz	r1, 8008bae <_dtoa_r+0x5e>
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	604a      	str	r2, [r1, #4]
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	4093      	lsls	r3, r2
 8008ba0:	608b      	str	r3, [r1, #8]
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	f001 f99e 	bl	8009ee4 <_Bfree>
 8008ba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	1e3b      	subs	r3, r7, #0
 8008bb0:	bfaa      	itet	ge
 8008bb2:	2300      	movge	r3, #0
 8008bb4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008bb8:	f8c8 3000 	strge.w	r3, [r8]
 8008bbc:	4b9a      	ldr	r3, [pc, #616]	; (8008e28 <_dtoa_r+0x2d8>)
 8008bbe:	bfbc      	itt	lt
 8008bc0:	2201      	movlt	r2, #1
 8008bc2:	f8c8 2000 	strlt.w	r2, [r8]
 8008bc6:	ea33 030b 	bics.w	r3, r3, fp
 8008bca:	d11b      	bne.n	8008c04 <_dtoa_r+0xb4>
 8008bcc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bce:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bd2:	6013      	str	r3, [r2, #0]
 8008bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bd8:	4333      	orrs	r3, r6
 8008bda:	f000 8592 	beq.w	8009702 <_dtoa_r+0xbb2>
 8008bde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be0:	b963      	cbnz	r3, 8008bfc <_dtoa_r+0xac>
 8008be2:	4b92      	ldr	r3, [pc, #584]	; (8008e2c <_dtoa_r+0x2dc>)
 8008be4:	e022      	b.n	8008c2c <_dtoa_r+0xdc>
 8008be6:	4b92      	ldr	r3, [pc, #584]	; (8008e30 <_dtoa_r+0x2e0>)
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	3308      	adds	r3, #8
 8008bec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bee:	6013      	str	r3, [r2, #0]
 8008bf0:	9801      	ldr	r0, [sp, #4]
 8008bf2:	b013      	add	sp, #76	; 0x4c
 8008bf4:	ecbd 8b04 	vpop	{d8-d9}
 8008bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfc:	4b8b      	ldr	r3, [pc, #556]	; (8008e2c <_dtoa_r+0x2dc>)
 8008bfe:	9301      	str	r3, [sp, #4]
 8008c00:	3303      	adds	r3, #3
 8008c02:	e7f3      	b.n	8008bec <_dtoa_r+0x9c>
 8008c04:	2200      	movs	r2, #0
 8008c06:	2300      	movs	r3, #0
 8008c08:	4650      	mov	r0, sl
 8008c0a:	4659      	mov	r1, fp
 8008c0c:	f7f7 ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c10:	ec4b ab19 	vmov	d9, sl, fp
 8008c14:	4680      	mov	r8, r0
 8008c16:	b158      	cbz	r0, 8008c30 <_dtoa_r+0xe0>
 8008c18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 856b 	beq.w	80096fc <_dtoa_r+0xbac>
 8008c26:	4883      	ldr	r0, [pc, #524]	; (8008e34 <_dtoa_r+0x2e4>)
 8008c28:	6018      	str	r0, [r3, #0]
 8008c2a:	1e43      	subs	r3, r0, #1
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	e7df      	b.n	8008bf0 <_dtoa_r+0xa0>
 8008c30:	ec4b ab10 	vmov	d0, sl, fp
 8008c34:	aa10      	add	r2, sp, #64	; 0x40
 8008c36:	a911      	add	r1, sp, #68	; 0x44
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f001 fd01 	bl	800a640 <__d2b>
 8008c3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008c42:	ee08 0a10 	vmov	s16, r0
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	f000 8084 	beq.w	8008d54 <_dtoa_r+0x204>
 8008c4c:	ee19 3a90 	vmov	r3, s19
 8008c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008c58:	4656      	mov	r6, sl
 8008c5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008c5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008c66:	4b74      	ldr	r3, [pc, #464]	; (8008e38 <_dtoa_r+0x2e8>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	4639      	mov	r1, r7
 8008c6e:	f7f7 fb13 	bl	8000298 <__aeabi_dsub>
 8008c72:	a365      	add	r3, pc, #404	; (adr r3, 8008e08 <_dtoa_r+0x2b8>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fcc6 	bl	8000608 <__aeabi_dmul>
 8008c7c:	a364      	add	r3, pc, #400	; (adr r3, 8008e10 <_dtoa_r+0x2c0>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fb0b 	bl	800029c <__adddf3>
 8008c86:	4606      	mov	r6, r0
 8008c88:	4628      	mov	r0, r5
 8008c8a:	460f      	mov	r7, r1
 8008c8c:	f7f7 fc52 	bl	8000534 <__aeabi_i2d>
 8008c90:	a361      	add	r3, pc, #388	; (adr r3, 8008e18 <_dtoa_r+0x2c8>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fcb7 	bl	8000608 <__aeabi_dmul>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4630      	mov	r0, r6
 8008ca0:	4639      	mov	r1, r7
 8008ca2:	f7f7 fafb 	bl	800029c <__adddf3>
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460f      	mov	r7, r1
 8008caa:	f7f7 ff5d 	bl	8000b68 <__aeabi_d2iz>
 8008cae:	2200      	movs	r2, #0
 8008cb0:	9000      	str	r0, [sp, #0]
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	4639      	mov	r1, r7
 8008cb8:	f7f7 ff18 	bl	8000aec <__aeabi_dcmplt>
 8008cbc:	b150      	cbz	r0, 8008cd4 <_dtoa_r+0x184>
 8008cbe:	9800      	ldr	r0, [sp, #0]
 8008cc0:	f7f7 fc38 	bl	8000534 <__aeabi_i2d>
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	f7f7 ff06 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ccc:	b910      	cbnz	r0, 8008cd4 <_dtoa_r+0x184>
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	9b00      	ldr	r3, [sp, #0]
 8008cd6:	2b16      	cmp	r3, #22
 8008cd8:	d85a      	bhi.n	8008d90 <_dtoa_r+0x240>
 8008cda:	9a00      	ldr	r2, [sp, #0]
 8008cdc:	4b57      	ldr	r3, [pc, #348]	; (8008e3c <_dtoa_r+0x2ec>)
 8008cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	ec51 0b19 	vmov	r0, r1, d9
 8008cea:	f7f7 feff 	bl	8000aec <__aeabi_dcmplt>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d050      	beq.n	8008d94 <_dtoa_r+0x244>
 8008cf2:	9b00      	ldr	r3, [sp, #0]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cfe:	1b5d      	subs	r5, r3, r5
 8008d00:	1e6b      	subs	r3, r5, #1
 8008d02:	9305      	str	r3, [sp, #20]
 8008d04:	bf45      	ittet	mi
 8008d06:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d0a:	9304      	strmi	r3, [sp, #16]
 8008d0c:	2300      	movpl	r3, #0
 8008d0e:	2300      	movmi	r3, #0
 8008d10:	bf4c      	ite	mi
 8008d12:	9305      	strmi	r3, [sp, #20]
 8008d14:	9304      	strpl	r3, [sp, #16]
 8008d16:	9b00      	ldr	r3, [sp, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	db3d      	blt.n	8008d98 <_dtoa_r+0x248>
 8008d1c:	9b05      	ldr	r3, [sp, #20]
 8008d1e:	9a00      	ldr	r2, [sp, #0]
 8008d20:	920a      	str	r2, [sp, #40]	; 0x28
 8008d22:	4413      	add	r3, r2
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	2300      	movs	r3, #0
 8008d28:	9307      	str	r3, [sp, #28]
 8008d2a:	9b06      	ldr	r3, [sp, #24]
 8008d2c:	2b09      	cmp	r3, #9
 8008d2e:	f200 8089 	bhi.w	8008e44 <_dtoa_r+0x2f4>
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	bfc4      	itt	gt
 8008d36:	3b04      	subgt	r3, #4
 8008d38:	9306      	strgt	r3, [sp, #24]
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8008d40:	bfcc      	ite	gt
 8008d42:	2500      	movgt	r5, #0
 8008d44:	2501      	movle	r5, #1
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	f200 8087 	bhi.w	8008e5a <_dtoa_r+0x30a>
 8008d4c:	e8df f003 	tbb	[pc, r3]
 8008d50:	59383a2d 	.word	0x59383a2d
 8008d54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d58:	441d      	add	r5, r3
 8008d5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d5e:	2b20      	cmp	r3, #32
 8008d60:	bfc1      	itttt	gt
 8008d62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008d6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8008d6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008d72:	bfda      	itte	le
 8008d74:	f1c3 0320 	rsble	r3, r3, #32
 8008d78:	fa06 f003 	lslle.w	r0, r6, r3
 8008d7c:	4318      	orrgt	r0, r3
 8008d7e:	f7f7 fbc9 	bl	8000514 <__aeabi_ui2d>
 8008d82:	2301      	movs	r3, #1
 8008d84:	4606      	mov	r6, r0
 8008d86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008d8a:	3d01      	subs	r5, #1
 8008d8c:	930e      	str	r3, [sp, #56]	; 0x38
 8008d8e:	e76a      	b.n	8008c66 <_dtoa_r+0x116>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e7b2      	b.n	8008cfa <_dtoa_r+0x1aa>
 8008d94:	900b      	str	r0, [sp, #44]	; 0x2c
 8008d96:	e7b1      	b.n	8008cfc <_dtoa_r+0x1ac>
 8008d98:	9b04      	ldr	r3, [sp, #16]
 8008d9a:	9a00      	ldr	r2, [sp, #0]
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	9304      	str	r3, [sp, #16]
 8008da0:	4253      	negs	r3, r2
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	2300      	movs	r3, #0
 8008da6:	930a      	str	r3, [sp, #40]	; 0x28
 8008da8:	e7bf      	b.n	8008d2a <_dtoa_r+0x1da>
 8008daa:	2300      	movs	r3, #0
 8008dac:	9308      	str	r3, [sp, #32]
 8008dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dc55      	bgt.n	8008e60 <_dtoa_r+0x310>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbe:	e00c      	b.n	8008dda <_dtoa_r+0x28a>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e7f3      	b.n	8008dac <_dtoa_r+0x25c>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dc8:	9308      	str	r3, [sp, #32]
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	4413      	add	r3, r2
 8008dce:	9302      	str	r3, [sp, #8]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	9303      	str	r3, [sp, #12]
 8008dd6:	bfb8      	it	lt
 8008dd8:	2301      	movlt	r3, #1
 8008dda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ddc:	2200      	movs	r2, #0
 8008dde:	6042      	str	r2, [r0, #4]
 8008de0:	2204      	movs	r2, #4
 8008de2:	f102 0614 	add.w	r6, r2, #20
 8008de6:	429e      	cmp	r6, r3
 8008de8:	6841      	ldr	r1, [r0, #4]
 8008dea:	d93d      	bls.n	8008e68 <_dtoa_r+0x318>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f001 f839 	bl	8009e64 <_Balloc>
 8008df2:	9001      	str	r0, [sp, #4]
 8008df4:	2800      	cmp	r0, #0
 8008df6:	d13b      	bne.n	8008e70 <_dtoa_r+0x320>
 8008df8:	4b11      	ldr	r3, [pc, #68]	; (8008e40 <_dtoa_r+0x2f0>)
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e00:	e6c0      	b.n	8008b84 <_dtoa_r+0x34>
 8008e02:	2301      	movs	r3, #1
 8008e04:	e7df      	b.n	8008dc6 <_dtoa_r+0x276>
 8008e06:	bf00      	nop
 8008e08:	636f4361 	.word	0x636f4361
 8008e0c:	3fd287a7 	.word	0x3fd287a7
 8008e10:	8b60c8b3 	.word	0x8b60c8b3
 8008e14:	3fc68a28 	.word	0x3fc68a28
 8008e18:	509f79fb 	.word	0x509f79fb
 8008e1c:	3fd34413 	.word	0x3fd34413
 8008e20:	0800d446 	.word	0x0800d446
 8008e24:	0800d45d 	.word	0x0800d45d
 8008e28:	7ff00000 	.word	0x7ff00000
 8008e2c:	0800d442 	.word	0x0800d442
 8008e30:	0800d439 	.word	0x0800d439
 8008e34:	0800d2b9 	.word	0x0800d2b9
 8008e38:	3ff80000 	.word	0x3ff80000
 8008e3c:	0800d5c8 	.word	0x0800d5c8
 8008e40:	0800d4b8 	.word	0x0800d4b8
 8008e44:	2501      	movs	r5, #1
 8008e46:	2300      	movs	r3, #0
 8008e48:	9306      	str	r3, [sp, #24]
 8008e4a:	9508      	str	r5, [sp, #32]
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	2312      	movs	r3, #18
 8008e58:	e7b0      	b.n	8008dbc <_dtoa_r+0x26c>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	9308      	str	r3, [sp, #32]
 8008e5e:	e7f5      	b.n	8008e4c <_dtoa_r+0x2fc>
 8008e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e66:	e7b8      	b.n	8008dda <_dtoa_r+0x28a>
 8008e68:	3101      	adds	r1, #1
 8008e6a:	6041      	str	r1, [r0, #4]
 8008e6c:	0052      	lsls	r2, r2, #1
 8008e6e:	e7b8      	b.n	8008de2 <_dtoa_r+0x292>
 8008e70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e72:	9a01      	ldr	r2, [sp, #4]
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	9b03      	ldr	r3, [sp, #12]
 8008e78:	2b0e      	cmp	r3, #14
 8008e7a:	f200 809d 	bhi.w	8008fb8 <_dtoa_r+0x468>
 8008e7e:	2d00      	cmp	r5, #0
 8008e80:	f000 809a 	beq.w	8008fb8 <_dtoa_r+0x468>
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	dd32      	ble.n	8008ef0 <_dtoa_r+0x3a0>
 8008e8a:	4ab7      	ldr	r2, [pc, #732]	; (8009168 <_dtoa_r+0x618>)
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e98:	9b00      	ldr	r3, [sp, #0]
 8008e9a:	05d8      	lsls	r0, r3, #23
 8008e9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008ea0:	d516      	bpl.n	8008ed0 <_dtoa_r+0x380>
 8008ea2:	4bb2      	ldr	r3, [pc, #712]	; (800916c <_dtoa_r+0x61c>)
 8008ea4:	ec51 0b19 	vmov	r0, r1, d9
 8008ea8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008eac:	f7f7 fcd6 	bl	800085c <__aeabi_ddiv>
 8008eb0:	f007 070f 	and.w	r7, r7, #15
 8008eb4:	4682      	mov	sl, r0
 8008eb6:	468b      	mov	fp, r1
 8008eb8:	2503      	movs	r5, #3
 8008eba:	4eac      	ldr	r6, [pc, #688]	; (800916c <_dtoa_r+0x61c>)
 8008ebc:	b957      	cbnz	r7, 8008ed4 <_dtoa_r+0x384>
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	f7f7 fcc9 	bl	800085c <__aeabi_ddiv>
 8008eca:	4682      	mov	sl, r0
 8008ecc:	468b      	mov	fp, r1
 8008ece:	e028      	b.n	8008f22 <_dtoa_r+0x3d2>
 8008ed0:	2502      	movs	r5, #2
 8008ed2:	e7f2      	b.n	8008eba <_dtoa_r+0x36a>
 8008ed4:	07f9      	lsls	r1, r7, #31
 8008ed6:	d508      	bpl.n	8008eea <_dtoa_r+0x39a>
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ee0:	f7f7 fb92 	bl	8000608 <__aeabi_dmul>
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	4689      	mov	r9, r1
 8008eea:	107f      	asrs	r7, r7, #1
 8008eec:	3608      	adds	r6, #8
 8008eee:	e7e5      	b.n	8008ebc <_dtoa_r+0x36c>
 8008ef0:	f000 809b 	beq.w	800902a <_dtoa_r+0x4da>
 8008ef4:	9b00      	ldr	r3, [sp, #0]
 8008ef6:	4f9d      	ldr	r7, [pc, #628]	; (800916c <_dtoa_r+0x61c>)
 8008ef8:	425e      	negs	r6, r3
 8008efa:	4b9b      	ldr	r3, [pc, #620]	; (8009168 <_dtoa_r+0x618>)
 8008efc:	f006 020f 	and.w	r2, r6, #15
 8008f00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	ec51 0b19 	vmov	r0, r1, d9
 8008f0c:	f7f7 fb7c 	bl	8000608 <__aeabi_dmul>
 8008f10:	1136      	asrs	r6, r6, #4
 8008f12:	4682      	mov	sl, r0
 8008f14:	468b      	mov	fp, r1
 8008f16:	2300      	movs	r3, #0
 8008f18:	2502      	movs	r5, #2
 8008f1a:	2e00      	cmp	r6, #0
 8008f1c:	d17a      	bne.n	8009014 <_dtoa_r+0x4c4>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1d3      	bne.n	8008eca <_dtoa_r+0x37a>
 8008f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8082 	beq.w	800902e <_dtoa_r+0x4de>
 8008f2a:	4b91      	ldr	r3, [pc, #580]	; (8009170 <_dtoa_r+0x620>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4650      	mov	r0, sl
 8008f30:	4659      	mov	r1, fp
 8008f32:	f7f7 fddb 	bl	8000aec <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d079      	beq.n	800902e <_dtoa_r+0x4de>
 8008f3a:	9b03      	ldr	r3, [sp, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d076      	beq.n	800902e <_dtoa_r+0x4de>
 8008f40:	9b02      	ldr	r3, [sp, #8]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dd36      	ble.n	8008fb4 <_dtoa_r+0x464>
 8008f46:	9b00      	ldr	r3, [sp, #0]
 8008f48:	4650      	mov	r0, sl
 8008f4a:	4659      	mov	r1, fp
 8008f4c:	1e5f      	subs	r7, r3, #1
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4b88      	ldr	r3, [pc, #544]	; (8009174 <_dtoa_r+0x624>)
 8008f52:	f7f7 fb59 	bl	8000608 <__aeabi_dmul>
 8008f56:	9e02      	ldr	r6, [sp, #8]
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f7f7 fae8 	bl	8000534 <__aeabi_i2d>
 8008f64:	4652      	mov	r2, sl
 8008f66:	465b      	mov	r3, fp
 8008f68:	f7f7 fb4e 	bl	8000608 <__aeabi_dmul>
 8008f6c:	4b82      	ldr	r3, [pc, #520]	; (8009178 <_dtoa_r+0x628>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f7f7 f994 	bl	800029c <__adddf3>
 8008f74:	46d0      	mov	r8, sl
 8008f76:	46d9      	mov	r9, fp
 8008f78:	4682      	mov	sl, r0
 8008f7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008f7e:	2e00      	cmp	r6, #0
 8008f80:	d158      	bne.n	8009034 <_dtoa_r+0x4e4>
 8008f82:	4b7e      	ldr	r3, [pc, #504]	; (800917c <_dtoa_r+0x62c>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	4640      	mov	r0, r8
 8008f88:	4649      	mov	r1, r9
 8008f8a:	f7f7 f985 	bl	8000298 <__aeabi_dsub>
 8008f8e:	4652      	mov	r2, sl
 8008f90:	465b      	mov	r3, fp
 8008f92:	4680      	mov	r8, r0
 8008f94:	4689      	mov	r9, r1
 8008f96:	f7f7 fdc7 	bl	8000b28 <__aeabi_dcmpgt>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	f040 8295 	bne.w	80094ca <_dtoa_r+0x97a>
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4649      	mov	r1, r9
 8008faa:	f7f7 fd9f 	bl	8000aec <__aeabi_dcmplt>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f040 8289 	bne.w	80094c6 <_dtoa_r+0x976>
 8008fb4:	ec5b ab19 	vmov	sl, fp, d9
 8008fb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f2c0 8148 	blt.w	8009250 <_dtoa_r+0x700>
 8008fc0:	9a00      	ldr	r2, [sp, #0]
 8008fc2:	2a0e      	cmp	r2, #14
 8008fc4:	f300 8144 	bgt.w	8009250 <_dtoa_r+0x700>
 8008fc8:	4b67      	ldr	r3, [pc, #412]	; (8009168 <_dtoa_r+0x618>)
 8008fca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f280 80d5 	bge.w	8009184 <_dtoa_r+0x634>
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f300 80d1 	bgt.w	8009184 <_dtoa_r+0x634>
 8008fe2:	f040 826f 	bne.w	80094c4 <_dtoa_r+0x974>
 8008fe6:	4b65      	ldr	r3, [pc, #404]	; (800917c <_dtoa_r+0x62c>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 fb0b 	bl	8000608 <__aeabi_dmul>
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	465b      	mov	r3, fp
 8008ff6:	f7f7 fd8d 	bl	8000b14 <__aeabi_dcmpge>
 8008ffa:	9e03      	ldr	r6, [sp, #12]
 8008ffc:	4637      	mov	r7, r6
 8008ffe:	2800      	cmp	r0, #0
 8009000:	f040 8245 	bne.w	800948e <_dtoa_r+0x93e>
 8009004:	9d01      	ldr	r5, [sp, #4]
 8009006:	2331      	movs	r3, #49	; 0x31
 8009008:	f805 3b01 	strb.w	r3, [r5], #1
 800900c:	9b00      	ldr	r3, [sp, #0]
 800900e:	3301      	adds	r3, #1
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	e240      	b.n	8009496 <_dtoa_r+0x946>
 8009014:	07f2      	lsls	r2, r6, #31
 8009016:	d505      	bpl.n	8009024 <_dtoa_r+0x4d4>
 8009018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901c:	f7f7 faf4 	bl	8000608 <__aeabi_dmul>
 8009020:	3501      	adds	r5, #1
 8009022:	2301      	movs	r3, #1
 8009024:	1076      	asrs	r6, r6, #1
 8009026:	3708      	adds	r7, #8
 8009028:	e777      	b.n	8008f1a <_dtoa_r+0x3ca>
 800902a:	2502      	movs	r5, #2
 800902c:	e779      	b.n	8008f22 <_dtoa_r+0x3d2>
 800902e:	9f00      	ldr	r7, [sp, #0]
 8009030:	9e03      	ldr	r6, [sp, #12]
 8009032:	e794      	b.n	8008f5e <_dtoa_r+0x40e>
 8009034:	9901      	ldr	r1, [sp, #4]
 8009036:	4b4c      	ldr	r3, [pc, #304]	; (8009168 <_dtoa_r+0x618>)
 8009038:	4431      	add	r1, r6
 800903a:	910d      	str	r1, [sp, #52]	; 0x34
 800903c:	9908      	ldr	r1, [sp, #32]
 800903e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009042:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009046:	2900      	cmp	r1, #0
 8009048:	d043      	beq.n	80090d2 <_dtoa_r+0x582>
 800904a:	494d      	ldr	r1, [pc, #308]	; (8009180 <_dtoa_r+0x630>)
 800904c:	2000      	movs	r0, #0
 800904e:	f7f7 fc05 	bl	800085c <__aeabi_ddiv>
 8009052:	4652      	mov	r2, sl
 8009054:	465b      	mov	r3, fp
 8009056:	f7f7 f91f 	bl	8000298 <__aeabi_dsub>
 800905a:	9d01      	ldr	r5, [sp, #4]
 800905c:	4682      	mov	sl, r0
 800905e:	468b      	mov	fp, r1
 8009060:	4649      	mov	r1, r9
 8009062:	4640      	mov	r0, r8
 8009064:	f7f7 fd80 	bl	8000b68 <__aeabi_d2iz>
 8009068:	4606      	mov	r6, r0
 800906a:	f7f7 fa63 	bl	8000534 <__aeabi_i2d>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4640      	mov	r0, r8
 8009074:	4649      	mov	r1, r9
 8009076:	f7f7 f90f 	bl	8000298 <__aeabi_dsub>
 800907a:	3630      	adds	r6, #48	; 0x30
 800907c:	f805 6b01 	strb.w	r6, [r5], #1
 8009080:	4652      	mov	r2, sl
 8009082:	465b      	mov	r3, fp
 8009084:	4680      	mov	r8, r0
 8009086:	4689      	mov	r9, r1
 8009088:	f7f7 fd30 	bl	8000aec <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	d163      	bne.n	8009158 <_dtoa_r+0x608>
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	4936      	ldr	r1, [pc, #216]	; (8009170 <_dtoa_r+0x620>)
 8009096:	2000      	movs	r0, #0
 8009098:	f7f7 f8fe 	bl	8000298 <__aeabi_dsub>
 800909c:	4652      	mov	r2, sl
 800909e:	465b      	mov	r3, fp
 80090a0:	f7f7 fd24 	bl	8000aec <__aeabi_dcmplt>
 80090a4:	2800      	cmp	r0, #0
 80090a6:	f040 80b5 	bne.w	8009214 <_dtoa_r+0x6c4>
 80090aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090ac:	429d      	cmp	r5, r3
 80090ae:	d081      	beq.n	8008fb4 <_dtoa_r+0x464>
 80090b0:	4b30      	ldr	r3, [pc, #192]	; (8009174 <_dtoa_r+0x624>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	4650      	mov	r0, sl
 80090b6:	4659      	mov	r1, fp
 80090b8:	f7f7 faa6 	bl	8000608 <__aeabi_dmul>
 80090bc:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <_dtoa_r+0x624>)
 80090be:	4682      	mov	sl, r0
 80090c0:	468b      	mov	fp, r1
 80090c2:	4640      	mov	r0, r8
 80090c4:	4649      	mov	r1, r9
 80090c6:	2200      	movs	r2, #0
 80090c8:	f7f7 fa9e 	bl	8000608 <__aeabi_dmul>
 80090cc:	4680      	mov	r8, r0
 80090ce:	4689      	mov	r9, r1
 80090d0:	e7c6      	b.n	8009060 <_dtoa_r+0x510>
 80090d2:	4650      	mov	r0, sl
 80090d4:	4659      	mov	r1, fp
 80090d6:	f7f7 fa97 	bl	8000608 <__aeabi_dmul>
 80090da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090dc:	9d01      	ldr	r5, [sp, #4]
 80090de:	930f      	str	r3, [sp, #60]	; 0x3c
 80090e0:	4682      	mov	sl, r0
 80090e2:	468b      	mov	fp, r1
 80090e4:	4649      	mov	r1, r9
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7f7 fd3e 	bl	8000b68 <__aeabi_d2iz>
 80090ec:	4606      	mov	r6, r0
 80090ee:	f7f7 fa21 	bl	8000534 <__aeabi_i2d>
 80090f2:	3630      	adds	r6, #48	; 0x30
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4640      	mov	r0, r8
 80090fa:	4649      	mov	r1, r9
 80090fc:	f7f7 f8cc 	bl	8000298 <__aeabi_dsub>
 8009100:	f805 6b01 	strb.w	r6, [r5], #1
 8009104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009106:	429d      	cmp	r5, r3
 8009108:	4680      	mov	r8, r0
 800910a:	4689      	mov	r9, r1
 800910c:	f04f 0200 	mov.w	r2, #0
 8009110:	d124      	bne.n	800915c <_dtoa_r+0x60c>
 8009112:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <_dtoa_r+0x630>)
 8009114:	4650      	mov	r0, sl
 8009116:	4659      	mov	r1, fp
 8009118:	f7f7 f8c0 	bl	800029c <__adddf3>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4640      	mov	r0, r8
 8009122:	4649      	mov	r1, r9
 8009124:	f7f7 fd00 	bl	8000b28 <__aeabi_dcmpgt>
 8009128:	2800      	cmp	r0, #0
 800912a:	d173      	bne.n	8009214 <_dtoa_r+0x6c4>
 800912c:	4652      	mov	r2, sl
 800912e:	465b      	mov	r3, fp
 8009130:	4913      	ldr	r1, [pc, #76]	; (8009180 <_dtoa_r+0x630>)
 8009132:	2000      	movs	r0, #0
 8009134:	f7f7 f8b0 	bl	8000298 <__aeabi_dsub>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	4640      	mov	r0, r8
 800913e:	4649      	mov	r1, r9
 8009140:	f7f7 fcd4 	bl	8000aec <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	f43f af35 	beq.w	8008fb4 <_dtoa_r+0x464>
 800914a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800914c:	1e6b      	subs	r3, r5, #1
 800914e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009150:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009154:	2b30      	cmp	r3, #48	; 0x30
 8009156:	d0f8      	beq.n	800914a <_dtoa_r+0x5fa>
 8009158:	9700      	str	r7, [sp, #0]
 800915a:	e049      	b.n	80091f0 <_dtoa_r+0x6a0>
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <_dtoa_r+0x624>)
 800915e:	f7f7 fa53 	bl	8000608 <__aeabi_dmul>
 8009162:	4680      	mov	r8, r0
 8009164:	4689      	mov	r9, r1
 8009166:	e7bd      	b.n	80090e4 <_dtoa_r+0x594>
 8009168:	0800d5c8 	.word	0x0800d5c8
 800916c:	0800d5a0 	.word	0x0800d5a0
 8009170:	3ff00000 	.word	0x3ff00000
 8009174:	40240000 	.word	0x40240000
 8009178:	401c0000 	.word	0x401c0000
 800917c:	40140000 	.word	0x40140000
 8009180:	3fe00000 	.word	0x3fe00000
 8009184:	9d01      	ldr	r5, [sp, #4]
 8009186:	4656      	mov	r6, sl
 8009188:	465f      	mov	r7, fp
 800918a:	4642      	mov	r2, r8
 800918c:	464b      	mov	r3, r9
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fb63 	bl	800085c <__aeabi_ddiv>
 8009196:	f7f7 fce7 	bl	8000b68 <__aeabi_d2iz>
 800919a:	4682      	mov	sl, r0
 800919c:	f7f7 f9ca 	bl	8000534 <__aeabi_i2d>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	f7f7 fa30 	bl	8000608 <__aeabi_dmul>
 80091a8:	4602      	mov	r2, r0
 80091aa:	460b      	mov	r3, r1
 80091ac:	4630      	mov	r0, r6
 80091ae:	4639      	mov	r1, r7
 80091b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80091b4:	f7f7 f870 	bl	8000298 <__aeabi_dsub>
 80091b8:	f805 6b01 	strb.w	r6, [r5], #1
 80091bc:	9e01      	ldr	r6, [sp, #4]
 80091be:	9f03      	ldr	r7, [sp, #12]
 80091c0:	1bae      	subs	r6, r5, r6
 80091c2:	42b7      	cmp	r7, r6
 80091c4:	4602      	mov	r2, r0
 80091c6:	460b      	mov	r3, r1
 80091c8:	d135      	bne.n	8009236 <_dtoa_r+0x6e6>
 80091ca:	f7f7 f867 	bl	800029c <__adddf3>
 80091ce:	4642      	mov	r2, r8
 80091d0:	464b      	mov	r3, r9
 80091d2:	4606      	mov	r6, r0
 80091d4:	460f      	mov	r7, r1
 80091d6:	f7f7 fca7 	bl	8000b28 <__aeabi_dcmpgt>
 80091da:	b9d0      	cbnz	r0, 8009212 <_dtoa_r+0x6c2>
 80091dc:	4642      	mov	r2, r8
 80091de:	464b      	mov	r3, r9
 80091e0:	4630      	mov	r0, r6
 80091e2:	4639      	mov	r1, r7
 80091e4:	f7f7 fc78 	bl	8000ad8 <__aeabi_dcmpeq>
 80091e8:	b110      	cbz	r0, 80091f0 <_dtoa_r+0x6a0>
 80091ea:	f01a 0f01 	tst.w	sl, #1
 80091ee:	d110      	bne.n	8009212 <_dtoa_r+0x6c2>
 80091f0:	4620      	mov	r0, r4
 80091f2:	ee18 1a10 	vmov	r1, s16
 80091f6:	f000 fe75 	bl	8009ee4 <_Bfree>
 80091fa:	2300      	movs	r3, #0
 80091fc:	9800      	ldr	r0, [sp, #0]
 80091fe:	702b      	strb	r3, [r5, #0]
 8009200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009202:	3001      	adds	r0, #1
 8009204:	6018      	str	r0, [r3, #0]
 8009206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009208:	2b00      	cmp	r3, #0
 800920a:	f43f acf1 	beq.w	8008bf0 <_dtoa_r+0xa0>
 800920e:	601d      	str	r5, [r3, #0]
 8009210:	e4ee      	b.n	8008bf0 <_dtoa_r+0xa0>
 8009212:	9f00      	ldr	r7, [sp, #0]
 8009214:	462b      	mov	r3, r5
 8009216:	461d      	mov	r5, r3
 8009218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800921c:	2a39      	cmp	r2, #57	; 0x39
 800921e:	d106      	bne.n	800922e <_dtoa_r+0x6de>
 8009220:	9a01      	ldr	r2, [sp, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d1f7      	bne.n	8009216 <_dtoa_r+0x6c6>
 8009226:	9901      	ldr	r1, [sp, #4]
 8009228:	2230      	movs	r2, #48	; 0x30
 800922a:	3701      	adds	r7, #1
 800922c:	700a      	strb	r2, [r1, #0]
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	3201      	adds	r2, #1
 8009232:	701a      	strb	r2, [r3, #0]
 8009234:	e790      	b.n	8009158 <_dtoa_r+0x608>
 8009236:	4ba6      	ldr	r3, [pc, #664]	; (80094d0 <_dtoa_r+0x980>)
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f9e5 	bl	8000608 <__aeabi_dmul>
 800923e:	2200      	movs	r2, #0
 8009240:	2300      	movs	r3, #0
 8009242:	4606      	mov	r6, r0
 8009244:	460f      	mov	r7, r1
 8009246:	f7f7 fc47 	bl	8000ad8 <__aeabi_dcmpeq>
 800924a:	2800      	cmp	r0, #0
 800924c:	d09d      	beq.n	800918a <_dtoa_r+0x63a>
 800924e:	e7cf      	b.n	80091f0 <_dtoa_r+0x6a0>
 8009250:	9a08      	ldr	r2, [sp, #32]
 8009252:	2a00      	cmp	r2, #0
 8009254:	f000 80d7 	beq.w	8009406 <_dtoa_r+0x8b6>
 8009258:	9a06      	ldr	r2, [sp, #24]
 800925a:	2a01      	cmp	r2, #1
 800925c:	f300 80ba 	bgt.w	80093d4 <_dtoa_r+0x884>
 8009260:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009262:	2a00      	cmp	r2, #0
 8009264:	f000 80b2 	beq.w	80093cc <_dtoa_r+0x87c>
 8009268:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800926c:	9e07      	ldr	r6, [sp, #28]
 800926e:	9d04      	ldr	r5, [sp, #16]
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	441a      	add	r2, r3
 8009274:	9204      	str	r2, [sp, #16]
 8009276:	9a05      	ldr	r2, [sp, #20]
 8009278:	2101      	movs	r1, #1
 800927a:	441a      	add	r2, r3
 800927c:	4620      	mov	r0, r4
 800927e:	9205      	str	r2, [sp, #20]
 8009280:	f000 ff32 	bl	800a0e8 <__i2b>
 8009284:	4607      	mov	r7, r0
 8009286:	2d00      	cmp	r5, #0
 8009288:	dd0c      	ble.n	80092a4 <_dtoa_r+0x754>
 800928a:	9b05      	ldr	r3, [sp, #20]
 800928c:	2b00      	cmp	r3, #0
 800928e:	dd09      	ble.n	80092a4 <_dtoa_r+0x754>
 8009290:	42ab      	cmp	r3, r5
 8009292:	9a04      	ldr	r2, [sp, #16]
 8009294:	bfa8      	it	ge
 8009296:	462b      	movge	r3, r5
 8009298:	1ad2      	subs	r2, r2, r3
 800929a:	9204      	str	r2, [sp, #16]
 800929c:	9a05      	ldr	r2, [sp, #20]
 800929e:	1aed      	subs	r5, r5, r3
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	9305      	str	r3, [sp, #20]
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	b31b      	cbz	r3, 80092f0 <_dtoa_r+0x7a0>
 80092a8:	9b08      	ldr	r3, [sp, #32]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 80af 	beq.w	800940e <_dtoa_r+0x8be>
 80092b0:	2e00      	cmp	r6, #0
 80092b2:	dd13      	ble.n	80092dc <_dtoa_r+0x78c>
 80092b4:	4639      	mov	r1, r7
 80092b6:	4632      	mov	r2, r6
 80092b8:	4620      	mov	r0, r4
 80092ba:	f000 ffd5 	bl	800a268 <__pow5mult>
 80092be:	ee18 2a10 	vmov	r2, s16
 80092c2:	4601      	mov	r1, r0
 80092c4:	4607      	mov	r7, r0
 80092c6:	4620      	mov	r0, r4
 80092c8:	f000 ff24 	bl	800a114 <__multiply>
 80092cc:	ee18 1a10 	vmov	r1, s16
 80092d0:	4680      	mov	r8, r0
 80092d2:	4620      	mov	r0, r4
 80092d4:	f000 fe06 	bl	8009ee4 <_Bfree>
 80092d8:	ee08 8a10 	vmov	s16, r8
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	1b9a      	subs	r2, r3, r6
 80092e0:	d006      	beq.n	80092f0 <_dtoa_r+0x7a0>
 80092e2:	ee18 1a10 	vmov	r1, s16
 80092e6:	4620      	mov	r0, r4
 80092e8:	f000 ffbe 	bl	800a268 <__pow5mult>
 80092ec:	ee08 0a10 	vmov	s16, r0
 80092f0:	2101      	movs	r1, #1
 80092f2:	4620      	mov	r0, r4
 80092f4:	f000 fef8 	bl	800a0e8 <__i2b>
 80092f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	4606      	mov	r6, r0
 80092fe:	f340 8088 	ble.w	8009412 <_dtoa_r+0x8c2>
 8009302:	461a      	mov	r2, r3
 8009304:	4601      	mov	r1, r0
 8009306:	4620      	mov	r0, r4
 8009308:	f000 ffae 	bl	800a268 <__pow5mult>
 800930c:	9b06      	ldr	r3, [sp, #24]
 800930e:	2b01      	cmp	r3, #1
 8009310:	4606      	mov	r6, r0
 8009312:	f340 8081 	ble.w	8009418 <_dtoa_r+0x8c8>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	6933      	ldr	r3, [r6, #16]
 800931c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009320:	6918      	ldr	r0, [r3, #16]
 8009322:	f000 fe91 	bl	800a048 <__hi0bits>
 8009326:	f1c0 0020 	rsb	r0, r0, #32
 800932a:	9b05      	ldr	r3, [sp, #20]
 800932c:	4418      	add	r0, r3
 800932e:	f010 001f 	ands.w	r0, r0, #31
 8009332:	f000 8092 	beq.w	800945a <_dtoa_r+0x90a>
 8009336:	f1c0 0320 	rsb	r3, r0, #32
 800933a:	2b04      	cmp	r3, #4
 800933c:	f340 808a 	ble.w	8009454 <_dtoa_r+0x904>
 8009340:	f1c0 001c 	rsb	r0, r0, #28
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	4403      	add	r3, r0
 8009348:	9304      	str	r3, [sp, #16]
 800934a:	9b05      	ldr	r3, [sp, #20]
 800934c:	4403      	add	r3, r0
 800934e:	4405      	add	r5, r0
 8009350:	9305      	str	r3, [sp, #20]
 8009352:	9b04      	ldr	r3, [sp, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	dd07      	ble.n	8009368 <_dtoa_r+0x818>
 8009358:	ee18 1a10 	vmov	r1, s16
 800935c:	461a      	mov	r2, r3
 800935e:	4620      	mov	r0, r4
 8009360:	f000 ffdc 	bl	800a31c <__lshift>
 8009364:	ee08 0a10 	vmov	s16, r0
 8009368:	9b05      	ldr	r3, [sp, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	dd05      	ble.n	800937a <_dtoa_r+0x82a>
 800936e:	4631      	mov	r1, r6
 8009370:	461a      	mov	r2, r3
 8009372:	4620      	mov	r0, r4
 8009374:	f000 ffd2 	bl	800a31c <__lshift>
 8009378:	4606      	mov	r6, r0
 800937a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d06e      	beq.n	800945e <_dtoa_r+0x90e>
 8009380:	ee18 0a10 	vmov	r0, s16
 8009384:	4631      	mov	r1, r6
 8009386:	f001 f839 	bl	800a3fc <__mcmp>
 800938a:	2800      	cmp	r0, #0
 800938c:	da67      	bge.n	800945e <_dtoa_r+0x90e>
 800938e:	9b00      	ldr	r3, [sp, #0]
 8009390:	3b01      	subs	r3, #1
 8009392:	ee18 1a10 	vmov	r1, s16
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	220a      	movs	r2, #10
 800939a:	2300      	movs	r3, #0
 800939c:	4620      	mov	r0, r4
 800939e:	f000 fdc3 	bl	8009f28 <__multadd>
 80093a2:	9b08      	ldr	r3, [sp, #32]
 80093a4:	ee08 0a10 	vmov	s16, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	f000 81b1 	beq.w	8009710 <_dtoa_r+0xbc0>
 80093ae:	2300      	movs	r3, #0
 80093b0:	4639      	mov	r1, r7
 80093b2:	220a      	movs	r2, #10
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 fdb7 	bl	8009f28 <__multadd>
 80093ba:	9b02      	ldr	r3, [sp, #8]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	4607      	mov	r7, r0
 80093c0:	f300 808e 	bgt.w	80094e0 <_dtoa_r+0x990>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	dc51      	bgt.n	800946e <_dtoa_r+0x91e>
 80093ca:	e089      	b.n	80094e0 <_dtoa_r+0x990>
 80093cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093d2:	e74b      	b.n	800926c <_dtoa_r+0x71c>
 80093d4:	9b03      	ldr	r3, [sp, #12]
 80093d6:	1e5e      	subs	r6, r3, #1
 80093d8:	9b07      	ldr	r3, [sp, #28]
 80093da:	42b3      	cmp	r3, r6
 80093dc:	bfbf      	itttt	lt
 80093de:	9b07      	ldrlt	r3, [sp, #28]
 80093e0:	9607      	strlt	r6, [sp, #28]
 80093e2:	1af2      	sublt	r2, r6, r3
 80093e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80093e6:	bfb6      	itet	lt
 80093e8:	189b      	addlt	r3, r3, r2
 80093ea:	1b9e      	subge	r6, r3, r6
 80093ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	bfb8      	it	lt
 80093f2:	2600      	movlt	r6, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	bfb7      	itett	lt
 80093f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80093fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009400:	1a9d      	sublt	r5, r3, r2
 8009402:	2300      	movlt	r3, #0
 8009404:	e734      	b.n	8009270 <_dtoa_r+0x720>
 8009406:	9e07      	ldr	r6, [sp, #28]
 8009408:	9d04      	ldr	r5, [sp, #16]
 800940a:	9f08      	ldr	r7, [sp, #32]
 800940c:	e73b      	b.n	8009286 <_dtoa_r+0x736>
 800940e:	9a07      	ldr	r2, [sp, #28]
 8009410:	e767      	b.n	80092e2 <_dtoa_r+0x792>
 8009412:	9b06      	ldr	r3, [sp, #24]
 8009414:	2b01      	cmp	r3, #1
 8009416:	dc18      	bgt.n	800944a <_dtoa_r+0x8fa>
 8009418:	f1ba 0f00 	cmp.w	sl, #0
 800941c:	d115      	bne.n	800944a <_dtoa_r+0x8fa>
 800941e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009422:	b993      	cbnz	r3, 800944a <_dtoa_r+0x8fa>
 8009424:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009428:	0d1b      	lsrs	r3, r3, #20
 800942a:	051b      	lsls	r3, r3, #20
 800942c:	b183      	cbz	r3, 8009450 <_dtoa_r+0x900>
 800942e:	9b04      	ldr	r3, [sp, #16]
 8009430:	3301      	adds	r3, #1
 8009432:	9304      	str	r3, [sp, #16]
 8009434:	9b05      	ldr	r3, [sp, #20]
 8009436:	3301      	adds	r3, #1
 8009438:	9305      	str	r3, [sp, #20]
 800943a:	f04f 0801 	mov.w	r8, #1
 800943e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009440:	2b00      	cmp	r3, #0
 8009442:	f47f af6a 	bne.w	800931a <_dtoa_r+0x7ca>
 8009446:	2001      	movs	r0, #1
 8009448:	e76f      	b.n	800932a <_dtoa_r+0x7da>
 800944a:	f04f 0800 	mov.w	r8, #0
 800944e:	e7f6      	b.n	800943e <_dtoa_r+0x8ee>
 8009450:	4698      	mov	r8, r3
 8009452:	e7f4      	b.n	800943e <_dtoa_r+0x8ee>
 8009454:	f43f af7d 	beq.w	8009352 <_dtoa_r+0x802>
 8009458:	4618      	mov	r0, r3
 800945a:	301c      	adds	r0, #28
 800945c:	e772      	b.n	8009344 <_dtoa_r+0x7f4>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	dc37      	bgt.n	80094d4 <_dtoa_r+0x984>
 8009464:	9b06      	ldr	r3, [sp, #24]
 8009466:	2b02      	cmp	r3, #2
 8009468:	dd34      	ble.n	80094d4 <_dtoa_r+0x984>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	9302      	str	r3, [sp, #8]
 800946e:	9b02      	ldr	r3, [sp, #8]
 8009470:	b96b      	cbnz	r3, 800948e <_dtoa_r+0x93e>
 8009472:	4631      	mov	r1, r6
 8009474:	2205      	movs	r2, #5
 8009476:	4620      	mov	r0, r4
 8009478:	f000 fd56 	bl	8009f28 <__multadd>
 800947c:	4601      	mov	r1, r0
 800947e:	4606      	mov	r6, r0
 8009480:	ee18 0a10 	vmov	r0, s16
 8009484:	f000 ffba 	bl	800a3fc <__mcmp>
 8009488:	2800      	cmp	r0, #0
 800948a:	f73f adbb 	bgt.w	8009004 <_dtoa_r+0x4b4>
 800948e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009490:	9d01      	ldr	r5, [sp, #4]
 8009492:	43db      	mvns	r3, r3
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	4631      	mov	r1, r6
 800949c:	4620      	mov	r0, r4
 800949e:	f000 fd21 	bl	8009ee4 <_Bfree>
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	f43f aea4 	beq.w	80091f0 <_dtoa_r+0x6a0>
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d005      	beq.n	80094ba <_dtoa_r+0x96a>
 80094ae:	45b8      	cmp	r8, r7
 80094b0:	d003      	beq.n	80094ba <_dtoa_r+0x96a>
 80094b2:	4641      	mov	r1, r8
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 fd15 	bl	8009ee4 <_Bfree>
 80094ba:	4639      	mov	r1, r7
 80094bc:	4620      	mov	r0, r4
 80094be:	f000 fd11 	bl	8009ee4 <_Bfree>
 80094c2:	e695      	b.n	80091f0 <_dtoa_r+0x6a0>
 80094c4:	2600      	movs	r6, #0
 80094c6:	4637      	mov	r7, r6
 80094c8:	e7e1      	b.n	800948e <_dtoa_r+0x93e>
 80094ca:	9700      	str	r7, [sp, #0]
 80094cc:	4637      	mov	r7, r6
 80094ce:	e599      	b.n	8009004 <_dtoa_r+0x4b4>
 80094d0:	40240000 	.word	0x40240000
 80094d4:	9b08      	ldr	r3, [sp, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80ca 	beq.w	8009670 <_dtoa_r+0xb20>
 80094dc:	9b03      	ldr	r3, [sp, #12]
 80094de:	9302      	str	r3, [sp, #8]
 80094e0:	2d00      	cmp	r5, #0
 80094e2:	dd05      	ble.n	80094f0 <_dtoa_r+0x9a0>
 80094e4:	4639      	mov	r1, r7
 80094e6:	462a      	mov	r2, r5
 80094e8:	4620      	mov	r0, r4
 80094ea:	f000 ff17 	bl	800a31c <__lshift>
 80094ee:	4607      	mov	r7, r0
 80094f0:	f1b8 0f00 	cmp.w	r8, #0
 80094f4:	d05b      	beq.n	80095ae <_dtoa_r+0xa5e>
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 fcb3 	bl	8009e64 <_Balloc>
 80094fe:	4605      	mov	r5, r0
 8009500:	b928      	cbnz	r0, 800950e <_dtoa_r+0x9be>
 8009502:	4b87      	ldr	r3, [pc, #540]	; (8009720 <_dtoa_r+0xbd0>)
 8009504:	4602      	mov	r2, r0
 8009506:	f240 21ea 	movw	r1, #746	; 0x2ea
 800950a:	f7ff bb3b 	b.w	8008b84 <_dtoa_r+0x34>
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	3202      	adds	r2, #2
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	f107 010c 	add.w	r1, r7, #12
 8009518:	300c      	adds	r0, #12
 800951a:	f000 fc95 	bl	8009e48 <memcpy>
 800951e:	2201      	movs	r2, #1
 8009520:	4629      	mov	r1, r5
 8009522:	4620      	mov	r0, r4
 8009524:	f000 fefa 	bl	800a31c <__lshift>
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	f103 0901 	add.w	r9, r3, #1
 800952e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009532:	4413      	add	r3, r2
 8009534:	9305      	str	r3, [sp, #20]
 8009536:	f00a 0301 	and.w	r3, sl, #1
 800953a:	46b8      	mov	r8, r7
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	4607      	mov	r7, r0
 8009540:	4631      	mov	r1, r6
 8009542:	ee18 0a10 	vmov	r0, s16
 8009546:	f7ff fa77 	bl	8008a38 <quorem>
 800954a:	4641      	mov	r1, r8
 800954c:	9002      	str	r0, [sp, #8]
 800954e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009552:	ee18 0a10 	vmov	r0, s16
 8009556:	f000 ff51 	bl	800a3fc <__mcmp>
 800955a:	463a      	mov	r2, r7
 800955c:	9003      	str	r0, [sp, #12]
 800955e:	4631      	mov	r1, r6
 8009560:	4620      	mov	r0, r4
 8009562:	f000 ff67 	bl	800a434 <__mdiff>
 8009566:	68c2      	ldr	r2, [r0, #12]
 8009568:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800956c:	4605      	mov	r5, r0
 800956e:	bb02      	cbnz	r2, 80095b2 <_dtoa_r+0xa62>
 8009570:	4601      	mov	r1, r0
 8009572:	ee18 0a10 	vmov	r0, s16
 8009576:	f000 ff41 	bl	800a3fc <__mcmp>
 800957a:	4602      	mov	r2, r0
 800957c:	4629      	mov	r1, r5
 800957e:	4620      	mov	r0, r4
 8009580:	9207      	str	r2, [sp, #28]
 8009582:	f000 fcaf 	bl	8009ee4 <_Bfree>
 8009586:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800958a:	ea43 0102 	orr.w	r1, r3, r2
 800958e:	9b04      	ldr	r3, [sp, #16]
 8009590:	430b      	orrs	r3, r1
 8009592:	464d      	mov	r5, r9
 8009594:	d10f      	bne.n	80095b6 <_dtoa_r+0xa66>
 8009596:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800959a:	d02a      	beq.n	80095f2 <_dtoa_r+0xaa2>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	dd02      	ble.n	80095a8 <_dtoa_r+0xa58>
 80095a2:	9b02      	ldr	r3, [sp, #8]
 80095a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80095a8:	f88b a000 	strb.w	sl, [fp]
 80095ac:	e775      	b.n	800949a <_dtoa_r+0x94a>
 80095ae:	4638      	mov	r0, r7
 80095b0:	e7ba      	b.n	8009528 <_dtoa_r+0x9d8>
 80095b2:	2201      	movs	r2, #1
 80095b4:	e7e2      	b.n	800957c <_dtoa_r+0xa2c>
 80095b6:	9b03      	ldr	r3, [sp, #12]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	db04      	blt.n	80095c6 <_dtoa_r+0xa76>
 80095bc:	9906      	ldr	r1, [sp, #24]
 80095be:	430b      	orrs	r3, r1
 80095c0:	9904      	ldr	r1, [sp, #16]
 80095c2:	430b      	orrs	r3, r1
 80095c4:	d122      	bne.n	800960c <_dtoa_r+0xabc>
 80095c6:	2a00      	cmp	r2, #0
 80095c8:	ddee      	ble.n	80095a8 <_dtoa_r+0xa58>
 80095ca:	ee18 1a10 	vmov	r1, s16
 80095ce:	2201      	movs	r2, #1
 80095d0:	4620      	mov	r0, r4
 80095d2:	f000 fea3 	bl	800a31c <__lshift>
 80095d6:	4631      	mov	r1, r6
 80095d8:	ee08 0a10 	vmov	s16, r0
 80095dc:	f000 ff0e 	bl	800a3fc <__mcmp>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	dc03      	bgt.n	80095ec <_dtoa_r+0xa9c>
 80095e4:	d1e0      	bne.n	80095a8 <_dtoa_r+0xa58>
 80095e6:	f01a 0f01 	tst.w	sl, #1
 80095ea:	d0dd      	beq.n	80095a8 <_dtoa_r+0xa58>
 80095ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80095f0:	d1d7      	bne.n	80095a2 <_dtoa_r+0xa52>
 80095f2:	2339      	movs	r3, #57	; 0x39
 80095f4:	f88b 3000 	strb.w	r3, [fp]
 80095f8:	462b      	mov	r3, r5
 80095fa:	461d      	mov	r5, r3
 80095fc:	3b01      	subs	r3, #1
 80095fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009602:	2a39      	cmp	r2, #57	; 0x39
 8009604:	d071      	beq.n	80096ea <_dtoa_r+0xb9a>
 8009606:	3201      	adds	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
 800960a:	e746      	b.n	800949a <_dtoa_r+0x94a>
 800960c:	2a00      	cmp	r2, #0
 800960e:	dd07      	ble.n	8009620 <_dtoa_r+0xad0>
 8009610:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009614:	d0ed      	beq.n	80095f2 <_dtoa_r+0xaa2>
 8009616:	f10a 0301 	add.w	r3, sl, #1
 800961a:	f88b 3000 	strb.w	r3, [fp]
 800961e:	e73c      	b.n	800949a <_dtoa_r+0x94a>
 8009620:	9b05      	ldr	r3, [sp, #20]
 8009622:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009626:	4599      	cmp	r9, r3
 8009628:	d047      	beq.n	80096ba <_dtoa_r+0xb6a>
 800962a:	ee18 1a10 	vmov	r1, s16
 800962e:	2300      	movs	r3, #0
 8009630:	220a      	movs	r2, #10
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fc78 	bl	8009f28 <__multadd>
 8009638:	45b8      	cmp	r8, r7
 800963a:	ee08 0a10 	vmov	s16, r0
 800963e:	f04f 0300 	mov.w	r3, #0
 8009642:	f04f 020a 	mov.w	r2, #10
 8009646:	4641      	mov	r1, r8
 8009648:	4620      	mov	r0, r4
 800964a:	d106      	bne.n	800965a <_dtoa_r+0xb0a>
 800964c:	f000 fc6c 	bl	8009f28 <__multadd>
 8009650:	4680      	mov	r8, r0
 8009652:	4607      	mov	r7, r0
 8009654:	f109 0901 	add.w	r9, r9, #1
 8009658:	e772      	b.n	8009540 <_dtoa_r+0x9f0>
 800965a:	f000 fc65 	bl	8009f28 <__multadd>
 800965e:	4639      	mov	r1, r7
 8009660:	4680      	mov	r8, r0
 8009662:	2300      	movs	r3, #0
 8009664:	220a      	movs	r2, #10
 8009666:	4620      	mov	r0, r4
 8009668:	f000 fc5e 	bl	8009f28 <__multadd>
 800966c:	4607      	mov	r7, r0
 800966e:	e7f1      	b.n	8009654 <_dtoa_r+0xb04>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	9302      	str	r3, [sp, #8]
 8009674:	9d01      	ldr	r5, [sp, #4]
 8009676:	ee18 0a10 	vmov	r0, s16
 800967a:	4631      	mov	r1, r6
 800967c:	f7ff f9dc 	bl	8008a38 <quorem>
 8009680:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	f805 ab01 	strb.w	sl, [r5], #1
 800968a:	1aea      	subs	r2, r5, r3
 800968c:	9b02      	ldr	r3, [sp, #8]
 800968e:	4293      	cmp	r3, r2
 8009690:	dd09      	ble.n	80096a6 <_dtoa_r+0xb56>
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fc44 	bl	8009f28 <__multadd>
 80096a0:	ee08 0a10 	vmov	s16, r0
 80096a4:	e7e7      	b.n	8009676 <_dtoa_r+0xb26>
 80096a6:	9b02      	ldr	r3, [sp, #8]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	bfc8      	it	gt
 80096ac:	461d      	movgt	r5, r3
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	bfd8      	it	le
 80096b2:	2501      	movle	r5, #1
 80096b4:	441d      	add	r5, r3
 80096b6:	f04f 0800 	mov.w	r8, #0
 80096ba:	ee18 1a10 	vmov	r1, s16
 80096be:	2201      	movs	r2, #1
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fe2b 	bl	800a31c <__lshift>
 80096c6:	4631      	mov	r1, r6
 80096c8:	ee08 0a10 	vmov	s16, r0
 80096cc:	f000 fe96 	bl	800a3fc <__mcmp>
 80096d0:	2800      	cmp	r0, #0
 80096d2:	dc91      	bgt.n	80095f8 <_dtoa_r+0xaa8>
 80096d4:	d102      	bne.n	80096dc <_dtoa_r+0xb8c>
 80096d6:	f01a 0f01 	tst.w	sl, #1
 80096da:	d18d      	bne.n	80095f8 <_dtoa_r+0xaa8>
 80096dc:	462b      	mov	r3, r5
 80096de:	461d      	mov	r5, r3
 80096e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096e4:	2a30      	cmp	r2, #48	; 0x30
 80096e6:	d0fa      	beq.n	80096de <_dtoa_r+0xb8e>
 80096e8:	e6d7      	b.n	800949a <_dtoa_r+0x94a>
 80096ea:	9a01      	ldr	r2, [sp, #4]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d184      	bne.n	80095fa <_dtoa_r+0xaaa>
 80096f0:	9b00      	ldr	r3, [sp, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	2331      	movs	r3, #49	; 0x31
 80096f8:	7013      	strb	r3, [r2, #0]
 80096fa:	e6ce      	b.n	800949a <_dtoa_r+0x94a>
 80096fc:	4b09      	ldr	r3, [pc, #36]	; (8009724 <_dtoa_r+0xbd4>)
 80096fe:	f7ff ba95 	b.w	8008c2c <_dtoa_r+0xdc>
 8009702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009704:	2b00      	cmp	r3, #0
 8009706:	f47f aa6e 	bne.w	8008be6 <_dtoa_r+0x96>
 800970a:	4b07      	ldr	r3, [pc, #28]	; (8009728 <_dtoa_r+0xbd8>)
 800970c:	f7ff ba8e 	b.w	8008c2c <_dtoa_r+0xdc>
 8009710:	9b02      	ldr	r3, [sp, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	dcae      	bgt.n	8009674 <_dtoa_r+0xb24>
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	2b02      	cmp	r3, #2
 800971a:	f73f aea8 	bgt.w	800946e <_dtoa_r+0x91e>
 800971e:	e7a9      	b.n	8009674 <_dtoa_r+0xb24>
 8009720:	0800d4b8 	.word	0x0800d4b8
 8009724:	0800d2b8 	.word	0x0800d2b8
 8009728:	0800d439 	.word	0x0800d439

0800972c <rshift>:
 800972c:	6903      	ldr	r3, [r0, #16]
 800972e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009732:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009736:	ea4f 1261 	mov.w	r2, r1, asr #5
 800973a:	f100 0414 	add.w	r4, r0, #20
 800973e:	dd45      	ble.n	80097cc <rshift+0xa0>
 8009740:	f011 011f 	ands.w	r1, r1, #31
 8009744:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009748:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800974c:	d10c      	bne.n	8009768 <rshift+0x3c>
 800974e:	f100 0710 	add.w	r7, r0, #16
 8009752:	4629      	mov	r1, r5
 8009754:	42b1      	cmp	r1, r6
 8009756:	d334      	bcc.n	80097c2 <rshift+0x96>
 8009758:	1a9b      	subs	r3, r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	1eea      	subs	r2, r5, #3
 800975e:	4296      	cmp	r6, r2
 8009760:	bf38      	it	cc
 8009762:	2300      	movcc	r3, #0
 8009764:	4423      	add	r3, r4
 8009766:	e015      	b.n	8009794 <rshift+0x68>
 8009768:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800976c:	f1c1 0820 	rsb	r8, r1, #32
 8009770:	40cf      	lsrs	r7, r1
 8009772:	f105 0e04 	add.w	lr, r5, #4
 8009776:	46a1      	mov	r9, r4
 8009778:	4576      	cmp	r6, lr
 800977a:	46f4      	mov	ip, lr
 800977c:	d815      	bhi.n	80097aa <rshift+0x7e>
 800977e:	1a9a      	subs	r2, r3, r2
 8009780:	0092      	lsls	r2, r2, #2
 8009782:	3a04      	subs	r2, #4
 8009784:	3501      	adds	r5, #1
 8009786:	42ae      	cmp	r6, r5
 8009788:	bf38      	it	cc
 800978a:	2200      	movcc	r2, #0
 800978c:	18a3      	adds	r3, r4, r2
 800978e:	50a7      	str	r7, [r4, r2]
 8009790:	b107      	cbz	r7, 8009794 <rshift+0x68>
 8009792:	3304      	adds	r3, #4
 8009794:	1b1a      	subs	r2, r3, r4
 8009796:	42a3      	cmp	r3, r4
 8009798:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800979c:	bf08      	it	eq
 800979e:	2300      	moveq	r3, #0
 80097a0:	6102      	str	r2, [r0, #16]
 80097a2:	bf08      	it	eq
 80097a4:	6143      	streq	r3, [r0, #20]
 80097a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097aa:	f8dc c000 	ldr.w	ip, [ip]
 80097ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80097b2:	ea4c 0707 	orr.w	r7, ip, r7
 80097b6:	f849 7b04 	str.w	r7, [r9], #4
 80097ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80097be:	40cf      	lsrs	r7, r1
 80097c0:	e7da      	b.n	8009778 <rshift+0x4c>
 80097c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80097c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80097ca:	e7c3      	b.n	8009754 <rshift+0x28>
 80097cc:	4623      	mov	r3, r4
 80097ce:	e7e1      	b.n	8009794 <rshift+0x68>

080097d0 <__hexdig_fun>:
 80097d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80097d4:	2b09      	cmp	r3, #9
 80097d6:	d802      	bhi.n	80097de <__hexdig_fun+0xe>
 80097d8:	3820      	subs	r0, #32
 80097da:	b2c0      	uxtb	r0, r0
 80097dc:	4770      	bx	lr
 80097de:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	d801      	bhi.n	80097ea <__hexdig_fun+0x1a>
 80097e6:	3847      	subs	r0, #71	; 0x47
 80097e8:	e7f7      	b.n	80097da <__hexdig_fun+0xa>
 80097ea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80097ee:	2b05      	cmp	r3, #5
 80097f0:	d801      	bhi.n	80097f6 <__hexdig_fun+0x26>
 80097f2:	3827      	subs	r0, #39	; 0x27
 80097f4:	e7f1      	b.n	80097da <__hexdig_fun+0xa>
 80097f6:	2000      	movs	r0, #0
 80097f8:	4770      	bx	lr
	...

080097fc <__gethex>:
 80097fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009800:	ed2d 8b02 	vpush	{d8}
 8009804:	b089      	sub	sp, #36	; 0x24
 8009806:	ee08 0a10 	vmov	s16, r0
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	4bb4      	ldr	r3, [pc, #720]	; (8009ae0 <__gethex+0x2e4>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	4618      	mov	r0, r3
 8009814:	468b      	mov	fp, r1
 8009816:	4690      	mov	r8, r2
 8009818:	f7f6 fce2 	bl	80001e0 <strlen>
 800981c:	9b01      	ldr	r3, [sp, #4]
 800981e:	f8db 2000 	ldr.w	r2, [fp]
 8009822:	4403      	add	r3, r0
 8009824:	4682      	mov	sl, r0
 8009826:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800982a:	9305      	str	r3, [sp, #20]
 800982c:	1c93      	adds	r3, r2, #2
 800982e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009832:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009836:	32fe      	adds	r2, #254	; 0xfe
 8009838:	18d1      	adds	r1, r2, r3
 800983a:	461f      	mov	r7, r3
 800983c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009840:	9100      	str	r1, [sp, #0]
 8009842:	2830      	cmp	r0, #48	; 0x30
 8009844:	d0f8      	beq.n	8009838 <__gethex+0x3c>
 8009846:	f7ff ffc3 	bl	80097d0 <__hexdig_fun>
 800984a:	4604      	mov	r4, r0
 800984c:	2800      	cmp	r0, #0
 800984e:	d13a      	bne.n	80098c6 <__gethex+0xca>
 8009850:	9901      	ldr	r1, [sp, #4]
 8009852:	4652      	mov	r2, sl
 8009854:	4638      	mov	r0, r7
 8009856:	f001 fa33 	bl	800acc0 <strncmp>
 800985a:	4605      	mov	r5, r0
 800985c:	2800      	cmp	r0, #0
 800985e:	d168      	bne.n	8009932 <__gethex+0x136>
 8009860:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009864:	eb07 060a 	add.w	r6, r7, sl
 8009868:	f7ff ffb2 	bl	80097d0 <__hexdig_fun>
 800986c:	2800      	cmp	r0, #0
 800986e:	d062      	beq.n	8009936 <__gethex+0x13a>
 8009870:	4633      	mov	r3, r6
 8009872:	7818      	ldrb	r0, [r3, #0]
 8009874:	2830      	cmp	r0, #48	; 0x30
 8009876:	461f      	mov	r7, r3
 8009878:	f103 0301 	add.w	r3, r3, #1
 800987c:	d0f9      	beq.n	8009872 <__gethex+0x76>
 800987e:	f7ff ffa7 	bl	80097d0 <__hexdig_fun>
 8009882:	2301      	movs	r3, #1
 8009884:	fab0 f480 	clz	r4, r0
 8009888:	0964      	lsrs	r4, r4, #5
 800988a:	4635      	mov	r5, r6
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	463a      	mov	r2, r7
 8009890:	4616      	mov	r6, r2
 8009892:	3201      	adds	r2, #1
 8009894:	7830      	ldrb	r0, [r6, #0]
 8009896:	f7ff ff9b 	bl	80097d0 <__hexdig_fun>
 800989a:	2800      	cmp	r0, #0
 800989c:	d1f8      	bne.n	8009890 <__gethex+0x94>
 800989e:	9901      	ldr	r1, [sp, #4]
 80098a0:	4652      	mov	r2, sl
 80098a2:	4630      	mov	r0, r6
 80098a4:	f001 fa0c 	bl	800acc0 <strncmp>
 80098a8:	b980      	cbnz	r0, 80098cc <__gethex+0xd0>
 80098aa:	b94d      	cbnz	r5, 80098c0 <__gethex+0xc4>
 80098ac:	eb06 050a 	add.w	r5, r6, sl
 80098b0:	462a      	mov	r2, r5
 80098b2:	4616      	mov	r6, r2
 80098b4:	3201      	adds	r2, #1
 80098b6:	7830      	ldrb	r0, [r6, #0]
 80098b8:	f7ff ff8a 	bl	80097d0 <__hexdig_fun>
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1f8      	bne.n	80098b2 <__gethex+0xb6>
 80098c0:	1bad      	subs	r5, r5, r6
 80098c2:	00ad      	lsls	r5, r5, #2
 80098c4:	e004      	b.n	80098d0 <__gethex+0xd4>
 80098c6:	2400      	movs	r4, #0
 80098c8:	4625      	mov	r5, r4
 80098ca:	e7e0      	b.n	800988e <__gethex+0x92>
 80098cc:	2d00      	cmp	r5, #0
 80098ce:	d1f7      	bne.n	80098c0 <__gethex+0xc4>
 80098d0:	7833      	ldrb	r3, [r6, #0]
 80098d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098d6:	2b50      	cmp	r3, #80	; 0x50
 80098d8:	d13b      	bne.n	8009952 <__gethex+0x156>
 80098da:	7873      	ldrb	r3, [r6, #1]
 80098dc:	2b2b      	cmp	r3, #43	; 0x2b
 80098de:	d02c      	beq.n	800993a <__gethex+0x13e>
 80098e0:	2b2d      	cmp	r3, #45	; 0x2d
 80098e2:	d02e      	beq.n	8009942 <__gethex+0x146>
 80098e4:	1c71      	adds	r1, r6, #1
 80098e6:	f04f 0900 	mov.w	r9, #0
 80098ea:	7808      	ldrb	r0, [r1, #0]
 80098ec:	f7ff ff70 	bl	80097d0 <__hexdig_fun>
 80098f0:	1e43      	subs	r3, r0, #1
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	2b18      	cmp	r3, #24
 80098f6:	d82c      	bhi.n	8009952 <__gethex+0x156>
 80098f8:	f1a0 0210 	sub.w	r2, r0, #16
 80098fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009900:	f7ff ff66 	bl	80097d0 <__hexdig_fun>
 8009904:	1e43      	subs	r3, r0, #1
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b18      	cmp	r3, #24
 800990a:	d91d      	bls.n	8009948 <__gethex+0x14c>
 800990c:	f1b9 0f00 	cmp.w	r9, #0
 8009910:	d000      	beq.n	8009914 <__gethex+0x118>
 8009912:	4252      	negs	r2, r2
 8009914:	4415      	add	r5, r2
 8009916:	f8cb 1000 	str.w	r1, [fp]
 800991a:	b1e4      	cbz	r4, 8009956 <__gethex+0x15a>
 800991c:	9b00      	ldr	r3, [sp, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	2700      	movne	r7, #0
 8009924:	2706      	moveq	r7, #6
 8009926:	4638      	mov	r0, r7
 8009928:	b009      	add	sp, #36	; 0x24
 800992a:	ecbd 8b02 	vpop	{d8}
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	463e      	mov	r6, r7
 8009934:	4625      	mov	r5, r4
 8009936:	2401      	movs	r4, #1
 8009938:	e7ca      	b.n	80098d0 <__gethex+0xd4>
 800993a:	f04f 0900 	mov.w	r9, #0
 800993e:	1cb1      	adds	r1, r6, #2
 8009940:	e7d3      	b.n	80098ea <__gethex+0xee>
 8009942:	f04f 0901 	mov.w	r9, #1
 8009946:	e7fa      	b.n	800993e <__gethex+0x142>
 8009948:	230a      	movs	r3, #10
 800994a:	fb03 0202 	mla	r2, r3, r2, r0
 800994e:	3a10      	subs	r2, #16
 8009950:	e7d4      	b.n	80098fc <__gethex+0x100>
 8009952:	4631      	mov	r1, r6
 8009954:	e7df      	b.n	8009916 <__gethex+0x11a>
 8009956:	1bf3      	subs	r3, r6, r7
 8009958:	3b01      	subs	r3, #1
 800995a:	4621      	mov	r1, r4
 800995c:	2b07      	cmp	r3, #7
 800995e:	dc0b      	bgt.n	8009978 <__gethex+0x17c>
 8009960:	ee18 0a10 	vmov	r0, s16
 8009964:	f000 fa7e 	bl	8009e64 <_Balloc>
 8009968:	4604      	mov	r4, r0
 800996a:	b940      	cbnz	r0, 800997e <__gethex+0x182>
 800996c:	4b5d      	ldr	r3, [pc, #372]	; (8009ae4 <__gethex+0x2e8>)
 800996e:	4602      	mov	r2, r0
 8009970:	21de      	movs	r1, #222	; 0xde
 8009972:	485d      	ldr	r0, [pc, #372]	; (8009ae8 <__gethex+0x2ec>)
 8009974:	f001 f9c6 	bl	800ad04 <__assert_func>
 8009978:	3101      	adds	r1, #1
 800997a:	105b      	asrs	r3, r3, #1
 800997c:	e7ee      	b.n	800995c <__gethex+0x160>
 800997e:	f100 0914 	add.w	r9, r0, #20
 8009982:	f04f 0b00 	mov.w	fp, #0
 8009986:	f1ca 0301 	rsb	r3, sl, #1
 800998a:	f8cd 9008 	str.w	r9, [sp, #8]
 800998e:	f8cd b000 	str.w	fp, [sp]
 8009992:	9306      	str	r3, [sp, #24]
 8009994:	42b7      	cmp	r7, r6
 8009996:	d340      	bcc.n	8009a1a <__gethex+0x21e>
 8009998:	9802      	ldr	r0, [sp, #8]
 800999a:	9b00      	ldr	r3, [sp, #0]
 800999c:	f840 3b04 	str.w	r3, [r0], #4
 80099a0:	eba0 0009 	sub.w	r0, r0, r9
 80099a4:	1080      	asrs	r0, r0, #2
 80099a6:	0146      	lsls	r6, r0, #5
 80099a8:	6120      	str	r0, [r4, #16]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fb4c 	bl	800a048 <__hi0bits>
 80099b0:	1a30      	subs	r0, r6, r0
 80099b2:	f8d8 6000 	ldr.w	r6, [r8]
 80099b6:	42b0      	cmp	r0, r6
 80099b8:	dd63      	ble.n	8009a82 <__gethex+0x286>
 80099ba:	1b87      	subs	r7, r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 fef0 	bl	800a7a4 <__any_on>
 80099c4:	4682      	mov	sl, r0
 80099c6:	b1a8      	cbz	r0, 80099f4 <__gethex+0x1f8>
 80099c8:	1e7b      	subs	r3, r7, #1
 80099ca:	1159      	asrs	r1, r3, #5
 80099cc:	f003 021f 	and.w	r2, r3, #31
 80099d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80099d4:	f04f 0a01 	mov.w	sl, #1
 80099d8:	fa0a f202 	lsl.w	r2, sl, r2
 80099dc:	420a      	tst	r2, r1
 80099de:	d009      	beq.n	80099f4 <__gethex+0x1f8>
 80099e0:	4553      	cmp	r3, sl
 80099e2:	dd05      	ble.n	80099f0 <__gethex+0x1f4>
 80099e4:	1eb9      	subs	r1, r7, #2
 80099e6:	4620      	mov	r0, r4
 80099e8:	f000 fedc 	bl	800a7a4 <__any_on>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d145      	bne.n	8009a7c <__gethex+0x280>
 80099f0:	f04f 0a02 	mov.w	sl, #2
 80099f4:	4639      	mov	r1, r7
 80099f6:	4620      	mov	r0, r4
 80099f8:	f7ff fe98 	bl	800972c <rshift>
 80099fc:	443d      	add	r5, r7
 80099fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a02:	42ab      	cmp	r3, r5
 8009a04:	da4c      	bge.n	8009aa0 <__gethex+0x2a4>
 8009a06:	ee18 0a10 	vmov	r0, s16
 8009a0a:	4621      	mov	r1, r4
 8009a0c:	f000 fa6a 	bl	8009ee4 <_Bfree>
 8009a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a12:	2300      	movs	r3, #0
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	27a3      	movs	r7, #163	; 0xa3
 8009a18:	e785      	b.n	8009926 <__gethex+0x12a>
 8009a1a:	1e73      	subs	r3, r6, #1
 8009a1c:	9a05      	ldr	r2, [sp, #20]
 8009a1e:	9303      	str	r3, [sp, #12]
 8009a20:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d019      	beq.n	8009a5c <__gethex+0x260>
 8009a28:	f1bb 0f20 	cmp.w	fp, #32
 8009a2c:	d107      	bne.n	8009a3e <__gethex+0x242>
 8009a2e:	9b02      	ldr	r3, [sp, #8]
 8009a30:	9a00      	ldr	r2, [sp, #0]
 8009a32:	f843 2b04 	str.w	r2, [r3], #4
 8009a36:	9302      	str	r3, [sp, #8]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	469b      	mov	fp, r3
 8009a3e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009a42:	f7ff fec5 	bl	80097d0 <__hexdig_fun>
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	f000 000f 	and.w	r0, r0, #15
 8009a4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009a50:	4303      	orrs	r3, r0
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	f10b 0b04 	add.w	fp, fp, #4
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	e00d      	b.n	8009a78 <__gethex+0x27c>
 8009a5c:	9b03      	ldr	r3, [sp, #12]
 8009a5e:	9a06      	ldr	r2, [sp, #24]
 8009a60:	4413      	add	r3, r2
 8009a62:	42bb      	cmp	r3, r7
 8009a64:	d3e0      	bcc.n	8009a28 <__gethex+0x22c>
 8009a66:	4618      	mov	r0, r3
 8009a68:	9901      	ldr	r1, [sp, #4]
 8009a6a:	9307      	str	r3, [sp, #28]
 8009a6c:	4652      	mov	r2, sl
 8009a6e:	f001 f927 	bl	800acc0 <strncmp>
 8009a72:	9b07      	ldr	r3, [sp, #28]
 8009a74:	2800      	cmp	r0, #0
 8009a76:	d1d7      	bne.n	8009a28 <__gethex+0x22c>
 8009a78:	461e      	mov	r6, r3
 8009a7a:	e78b      	b.n	8009994 <__gethex+0x198>
 8009a7c:	f04f 0a03 	mov.w	sl, #3
 8009a80:	e7b8      	b.n	80099f4 <__gethex+0x1f8>
 8009a82:	da0a      	bge.n	8009a9a <__gethex+0x29e>
 8009a84:	1a37      	subs	r7, r6, r0
 8009a86:	4621      	mov	r1, r4
 8009a88:	ee18 0a10 	vmov	r0, s16
 8009a8c:	463a      	mov	r2, r7
 8009a8e:	f000 fc45 	bl	800a31c <__lshift>
 8009a92:	1bed      	subs	r5, r5, r7
 8009a94:	4604      	mov	r4, r0
 8009a96:	f100 0914 	add.w	r9, r0, #20
 8009a9a:	f04f 0a00 	mov.w	sl, #0
 8009a9e:	e7ae      	b.n	80099fe <__gethex+0x202>
 8009aa0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009aa4:	42a8      	cmp	r0, r5
 8009aa6:	dd72      	ble.n	8009b8e <__gethex+0x392>
 8009aa8:	1b45      	subs	r5, r0, r5
 8009aaa:	42ae      	cmp	r6, r5
 8009aac:	dc36      	bgt.n	8009b1c <__gethex+0x320>
 8009aae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d02a      	beq.n	8009b0c <__gethex+0x310>
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d02c      	beq.n	8009b14 <__gethex+0x318>
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d11c      	bne.n	8009af8 <__gethex+0x2fc>
 8009abe:	42ae      	cmp	r6, r5
 8009ac0:	d11a      	bne.n	8009af8 <__gethex+0x2fc>
 8009ac2:	2e01      	cmp	r6, #1
 8009ac4:	d112      	bne.n	8009aec <__gethex+0x2f0>
 8009ac6:	9a04      	ldr	r2, [sp, #16]
 8009ac8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009acc:	6013      	str	r3, [r2, #0]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	f8c9 3000 	str.w	r3, [r9]
 8009ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad8:	2762      	movs	r7, #98	; 0x62
 8009ada:	601c      	str	r4, [r3, #0]
 8009adc:	e723      	b.n	8009926 <__gethex+0x12a>
 8009ade:	bf00      	nop
 8009ae0:	0800d530 	.word	0x0800d530
 8009ae4:	0800d4b8 	.word	0x0800d4b8
 8009ae8:	0800d4c9 	.word	0x0800d4c9
 8009aec:	1e71      	subs	r1, r6, #1
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 fe58 	bl	800a7a4 <__any_on>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d1e6      	bne.n	8009ac6 <__gethex+0x2ca>
 8009af8:	ee18 0a10 	vmov	r0, s16
 8009afc:	4621      	mov	r1, r4
 8009afe:	f000 f9f1 	bl	8009ee4 <_Bfree>
 8009b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b04:	2300      	movs	r3, #0
 8009b06:	6013      	str	r3, [r2, #0]
 8009b08:	2750      	movs	r7, #80	; 0x50
 8009b0a:	e70c      	b.n	8009926 <__gethex+0x12a>
 8009b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f2      	bne.n	8009af8 <__gethex+0x2fc>
 8009b12:	e7d8      	b.n	8009ac6 <__gethex+0x2ca>
 8009b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1d5      	bne.n	8009ac6 <__gethex+0x2ca>
 8009b1a:	e7ed      	b.n	8009af8 <__gethex+0x2fc>
 8009b1c:	1e6f      	subs	r7, r5, #1
 8009b1e:	f1ba 0f00 	cmp.w	sl, #0
 8009b22:	d131      	bne.n	8009b88 <__gethex+0x38c>
 8009b24:	b127      	cbz	r7, 8009b30 <__gethex+0x334>
 8009b26:	4639      	mov	r1, r7
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f000 fe3b 	bl	800a7a4 <__any_on>
 8009b2e:	4682      	mov	sl, r0
 8009b30:	117b      	asrs	r3, r7, #5
 8009b32:	2101      	movs	r1, #1
 8009b34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009b38:	f007 071f 	and.w	r7, r7, #31
 8009b3c:	fa01 f707 	lsl.w	r7, r1, r7
 8009b40:	421f      	tst	r7, r3
 8009b42:	4629      	mov	r1, r5
 8009b44:	4620      	mov	r0, r4
 8009b46:	bf18      	it	ne
 8009b48:	f04a 0a02 	orrne.w	sl, sl, #2
 8009b4c:	1b76      	subs	r6, r6, r5
 8009b4e:	f7ff fded 	bl	800972c <rshift>
 8009b52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009b56:	2702      	movs	r7, #2
 8009b58:	f1ba 0f00 	cmp.w	sl, #0
 8009b5c:	d048      	beq.n	8009bf0 <__gethex+0x3f4>
 8009b5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d015      	beq.n	8009b92 <__gethex+0x396>
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d017      	beq.n	8009b9a <__gethex+0x39e>
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d109      	bne.n	8009b82 <__gethex+0x386>
 8009b6e:	f01a 0f02 	tst.w	sl, #2
 8009b72:	d006      	beq.n	8009b82 <__gethex+0x386>
 8009b74:	f8d9 0000 	ldr.w	r0, [r9]
 8009b78:	ea4a 0a00 	orr.w	sl, sl, r0
 8009b7c:	f01a 0f01 	tst.w	sl, #1
 8009b80:	d10e      	bne.n	8009ba0 <__gethex+0x3a4>
 8009b82:	f047 0710 	orr.w	r7, r7, #16
 8009b86:	e033      	b.n	8009bf0 <__gethex+0x3f4>
 8009b88:	f04f 0a01 	mov.w	sl, #1
 8009b8c:	e7d0      	b.n	8009b30 <__gethex+0x334>
 8009b8e:	2701      	movs	r7, #1
 8009b90:	e7e2      	b.n	8009b58 <__gethex+0x35c>
 8009b92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b94:	f1c3 0301 	rsb	r3, r3, #1
 8009b98:	9315      	str	r3, [sp, #84]	; 0x54
 8009b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0f0      	beq.n	8009b82 <__gethex+0x386>
 8009ba0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009ba4:	f104 0314 	add.w	r3, r4, #20
 8009ba8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009bac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009bb0:	f04f 0c00 	mov.w	ip, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8009bbe:	d01c      	beq.n	8009bfa <__gethex+0x3fe>
 8009bc0:	3201      	adds	r2, #1
 8009bc2:	6002      	str	r2, [r0, #0]
 8009bc4:	2f02      	cmp	r7, #2
 8009bc6:	f104 0314 	add.w	r3, r4, #20
 8009bca:	d13f      	bne.n	8009c4c <__gethex+0x450>
 8009bcc:	f8d8 2000 	ldr.w	r2, [r8]
 8009bd0:	3a01      	subs	r2, #1
 8009bd2:	42b2      	cmp	r2, r6
 8009bd4:	d10a      	bne.n	8009bec <__gethex+0x3f0>
 8009bd6:	1171      	asrs	r1, r6, #5
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009bde:	f006 061f 	and.w	r6, r6, #31
 8009be2:	fa02 f606 	lsl.w	r6, r2, r6
 8009be6:	421e      	tst	r6, r3
 8009be8:	bf18      	it	ne
 8009bea:	4617      	movne	r7, r2
 8009bec:	f047 0720 	orr.w	r7, r7, #32
 8009bf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bf2:	601c      	str	r4, [r3, #0]
 8009bf4:	9b04      	ldr	r3, [sp, #16]
 8009bf6:	601d      	str	r5, [r3, #0]
 8009bf8:	e695      	b.n	8009926 <__gethex+0x12a>
 8009bfa:	4299      	cmp	r1, r3
 8009bfc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009c00:	d8d8      	bhi.n	8009bb4 <__gethex+0x3b8>
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	459b      	cmp	fp, r3
 8009c06:	db19      	blt.n	8009c3c <__gethex+0x440>
 8009c08:	6861      	ldr	r1, [r4, #4]
 8009c0a:	ee18 0a10 	vmov	r0, s16
 8009c0e:	3101      	adds	r1, #1
 8009c10:	f000 f928 	bl	8009e64 <_Balloc>
 8009c14:	4681      	mov	r9, r0
 8009c16:	b918      	cbnz	r0, 8009c20 <__gethex+0x424>
 8009c18:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <__gethex+0x488>)
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	2184      	movs	r1, #132	; 0x84
 8009c1e:	e6a8      	b.n	8009972 <__gethex+0x176>
 8009c20:	6922      	ldr	r2, [r4, #16]
 8009c22:	3202      	adds	r2, #2
 8009c24:	f104 010c 	add.w	r1, r4, #12
 8009c28:	0092      	lsls	r2, r2, #2
 8009c2a:	300c      	adds	r0, #12
 8009c2c:	f000 f90c 	bl	8009e48 <memcpy>
 8009c30:	4621      	mov	r1, r4
 8009c32:	ee18 0a10 	vmov	r0, s16
 8009c36:	f000 f955 	bl	8009ee4 <_Bfree>
 8009c3a:	464c      	mov	r4, r9
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c44:	6122      	str	r2, [r4, #16]
 8009c46:	2201      	movs	r2, #1
 8009c48:	615a      	str	r2, [r3, #20]
 8009c4a:	e7bb      	b.n	8009bc4 <__gethex+0x3c8>
 8009c4c:	6922      	ldr	r2, [r4, #16]
 8009c4e:	455a      	cmp	r2, fp
 8009c50:	dd0b      	ble.n	8009c6a <__gethex+0x46e>
 8009c52:	2101      	movs	r1, #1
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff fd69 	bl	800972c <rshift>
 8009c5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c5e:	3501      	adds	r5, #1
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	f6ff aed0 	blt.w	8009a06 <__gethex+0x20a>
 8009c66:	2701      	movs	r7, #1
 8009c68:	e7c0      	b.n	8009bec <__gethex+0x3f0>
 8009c6a:	f016 061f 	ands.w	r6, r6, #31
 8009c6e:	d0fa      	beq.n	8009c66 <__gethex+0x46a>
 8009c70:	4453      	add	r3, sl
 8009c72:	f1c6 0620 	rsb	r6, r6, #32
 8009c76:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009c7a:	f000 f9e5 	bl	800a048 <__hi0bits>
 8009c7e:	42b0      	cmp	r0, r6
 8009c80:	dbe7      	blt.n	8009c52 <__gethex+0x456>
 8009c82:	e7f0      	b.n	8009c66 <__gethex+0x46a>
 8009c84:	0800d4b8 	.word	0x0800d4b8

08009c88 <L_shift>:
 8009c88:	f1c2 0208 	rsb	r2, r2, #8
 8009c8c:	0092      	lsls	r2, r2, #2
 8009c8e:	b570      	push	{r4, r5, r6, lr}
 8009c90:	f1c2 0620 	rsb	r6, r2, #32
 8009c94:	6843      	ldr	r3, [r0, #4]
 8009c96:	6804      	ldr	r4, [r0, #0]
 8009c98:	fa03 f506 	lsl.w	r5, r3, r6
 8009c9c:	432c      	orrs	r4, r5
 8009c9e:	40d3      	lsrs	r3, r2
 8009ca0:	6004      	str	r4, [r0, #0]
 8009ca2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ca6:	4288      	cmp	r0, r1
 8009ca8:	d3f4      	bcc.n	8009c94 <L_shift+0xc>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}

08009cac <__match>:
 8009cac:	b530      	push	{r4, r5, lr}
 8009cae:	6803      	ldr	r3, [r0, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cb6:	b914      	cbnz	r4, 8009cbe <__match+0x12>
 8009cb8:	6003      	str	r3, [r0, #0]
 8009cba:	2001      	movs	r0, #1
 8009cbc:	bd30      	pop	{r4, r5, pc}
 8009cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009cc6:	2d19      	cmp	r5, #25
 8009cc8:	bf98      	it	ls
 8009cca:	3220      	addls	r2, #32
 8009ccc:	42a2      	cmp	r2, r4
 8009cce:	d0f0      	beq.n	8009cb2 <__match+0x6>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7f3      	b.n	8009cbc <__match+0x10>

08009cd4 <__hexnan>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	680b      	ldr	r3, [r1, #0]
 8009cda:	115e      	asrs	r6, r3, #5
 8009cdc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ce0:	f013 031f 	ands.w	r3, r3, #31
 8009ce4:	b087      	sub	sp, #28
 8009ce6:	bf18      	it	ne
 8009ce8:	3604      	addne	r6, #4
 8009cea:	2500      	movs	r5, #0
 8009cec:	1f37      	subs	r7, r6, #4
 8009cee:	4690      	mov	r8, r2
 8009cf0:	6802      	ldr	r2, [r0, #0]
 8009cf2:	9301      	str	r3, [sp, #4]
 8009cf4:	4682      	mov	sl, r0
 8009cf6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009cfa:	46b9      	mov	r9, r7
 8009cfc:	463c      	mov	r4, r7
 8009cfe:	9502      	str	r5, [sp, #8]
 8009d00:	46ab      	mov	fp, r5
 8009d02:	7851      	ldrb	r1, [r2, #1]
 8009d04:	1c53      	adds	r3, r2, #1
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	b341      	cbz	r1, 8009d5c <__hexnan+0x88>
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	9205      	str	r2, [sp, #20]
 8009d0e:	9104      	str	r1, [sp, #16]
 8009d10:	f7ff fd5e 	bl	80097d0 <__hexdig_fun>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d14f      	bne.n	8009db8 <__hexnan+0xe4>
 8009d18:	9904      	ldr	r1, [sp, #16]
 8009d1a:	9a05      	ldr	r2, [sp, #20]
 8009d1c:	2920      	cmp	r1, #32
 8009d1e:	d818      	bhi.n	8009d52 <__hexnan+0x7e>
 8009d20:	9b02      	ldr	r3, [sp, #8]
 8009d22:	459b      	cmp	fp, r3
 8009d24:	dd13      	ble.n	8009d4e <__hexnan+0x7a>
 8009d26:	454c      	cmp	r4, r9
 8009d28:	d206      	bcs.n	8009d38 <__hexnan+0x64>
 8009d2a:	2d07      	cmp	r5, #7
 8009d2c:	dc04      	bgt.n	8009d38 <__hexnan+0x64>
 8009d2e:	462a      	mov	r2, r5
 8009d30:	4649      	mov	r1, r9
 8009d32:	4620      	mov	r0, r4
 8009d34:	f7ff ffa8 	bl	8009c88 <L_shift>
 8009d38:	4544      	cmp	r4, r8
 8009d3a:	d950      	bls.n	8009dde <__hexnan+0x10a>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	f1a4 0904 	sub.w	r9, r4, #4
 8009d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8009d46:	f8cd b008 	str.w	fp, [sp, #8]
 8009d4a:	464c      	mov	r4, r9
 8009d4c:	461d      	mov	r5, r3
 8009d4e:	9a03      	ldr	r2, [sp, #12]
 8009d50:	e7d7      	b.n	8009d02 <__hexnan+0x2e>
 8009d52:	2929      	cmp	r1, #41	; 0x29
 8009d54:	d156      	bne.n	8009e04 <__hexnan+0x130>
 8009d56:	3202      	adds	r2, #2
 8009d58:	f8ca 2000 	str.w	r2, [sl]
 8009d5c:	f1bb 0f00 	cmp.w	fp, #0
 8009d60:	d050      	beq.n	8009e04 <__hexnan+0x130>
 8009d62:	454c      	cmp	r4, r9
 8009d64:	d206      	bcs.n	8009d74 <__hexnan+0xa0>
 8009d66:	2d07      	cmp	r5, #7
 8009d68:	dc04      	bgt.n	8009d74 <__hexnan+0xa0>
 8009d6a:	462a      	mov	r2, r5
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f7ff ff8a 	bl	8009c88 <L_shift>
 8009d74:	4544      	cmp	r4, r8
 8009d76:	d934      	bls.n	8009de2 <__hexnan+0x10e>
 8009d78:	f1a8 0204 	sub.w	r2, r8, #4
 8009d7c:	4623      	mov	r3, r4
 8009d7e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009d82:	f842 1f04 	str.w	r1, [r2, #4]!
 8009d86:	429f      	cmp	r7, r3
 8009d88:	d2f9      	bcs.n	8009d7e <__hexnan+0xaa>
 8009d8a:	1b3b      	subs	r3, r7, r4
 8009d8c:	f023 0303 	bic.w	r3, r3, #3
 8009d90:	3304      	adds	r3, #4
 8009d92:	3401      	adds	r4, #1
 8009d94:	3e03      	subs	r6, #3
 8009d96:	42b4      	cmp	r4, r6
 8009d98:	bf88      	it	hi
 8009d9a:	2304      	movhi	r3, #4
 8009d9c:	4443      	add	r3, r8
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f843 2b04 	str.w	r2, [r3], #4
 8009da4:	429f      	cmp	r7, r3
 8009da6:	d2fb      	bcs.n	8009da0 <__hexnan+0xcc>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	b91b      	cbnz	r3, 8009db4 <__hexnan+0xe0>
 8009dac:	4547      	cmp	r7, r8
 8009dae:	d127      	bne.n	8009e00 <__hexnan+0x12c>
 8009db0:	2301      	movs	r3, #1
 8009db2:	603b      	str	r3, [r7, #0]
 8009db4:	2005      	movs	r0, #5
 8009db6:	e026      	b.n	8009e06 <__hexnan+0x132>
 8009db8:	3501      	adds	r5, #1
 8009dba:	2d08      	cmp	r5, #8
 8009dbc:	f10b 0b01 	add.w	fp, fp, #1
 8009dc0:	dd06      	ble.n	8009dd0 <__hexnan+0xfc>
 8009dc2:	4544      	cmp	r4, r8
 8009dc4:	d9c3      	bls.n	8009d4e <__hexnan+0x7a>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	f844 3c04 	str.w	r3, [r4, #-4]
 8009dcc:	2501      	movs	r5, #1
 8009dce:	3c04      	subs	r4, #4
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	f000 000f 	and.w	r0, r0, #15
 8009dd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009dda:	6022      	str	r2, [r4, #0]
 8009ddc:	e7b7      	b.n	8009d4e <__hexnan+0x7a>
 8009dde:	2508      	movs	r5, #8
 8009de0:	e7b5      	b.n	8009d4e <__hexnan+0x7a>
 8009de2:	9b01      	ldr	r3, [sp, #4]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d0df      	beq.n	8009da8 <__hexnan+0xd4>
 8009de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dec:	f1c3 0320 	rsb	r3, r3, #32
 8009df0:	fa22 f303 	lsr.w	r3, r2, r3
 8009df4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009df8:	401a      	ands	r2, r3
 8009dfa:	f846 2c04 	str.w	r2, [r6, #-4]
 8009dfe:	e7d3      	b.n	8009da8 <__hexnan+0xd4>
 8009e00:	3f04      	subs	r7, #4
 8009e02:	e7d1      	b.n	8009da8 <__hexnan+0xd4>
 8009e04:	2004      	movs	r0, #4
 8009e06:	b007      	add	sp, #28
 8009e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e0c <_localeconv_r>:
 8009e0c:	4800      	ldr	r0, [pc, #0]	; (8009e10 <_localeconv_r+0x4>)
 8009e0e:	4770      	bx	lr
 8009e10:	20000178 	.word	0x20000178

08009e14 <malloc>:
 8009e14:	4b02      	ldr	r3, [pc, #8]	; (8009e20 <malloc+0xc>)
 8009e16:	4601      	mov	r1, r0
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	f000 bd67 	b.w	800a8ec <_malloc_r>
 8009e1e:	bf00      	nop
 8009e20:	20000020 	.word	0x20000020

08009e24 <__ascii_mbtowc>:
 8009e24:	b082      	sub	sp, #8
 8009e26:	b901      	cbnz	r1, 8009e2a <__ascii_mbtowc+0x6>
 8009e28:	a901      	add	r1, sp, #4
 8009e2a:	b142      	cbz	r2, 8009e3e <__ascii_mbtowc+0x1a>
 8009e2c:	b14b      	cbz	r3, 8009e42 <__ascii_mbtowc+0x1e>
 8009e2e:	7813      	ldrb	r3, [r2, #0]
 8009e30:	600b      	str	r3, [r1, #0]
 8009e32:	7812      	ldrb	r2, [r2, #0]
 8009e34:	1e10      	subs	r0, r2, #0
 8009e36:	bf18      	it	ne
 8009e38:	2001      	movne	r0, #1
 8009e3a:	b002      	add	sp, #8
 8009e3c:	4770      	bx	lr
 8009e3e:	4610      	mov	r0, r2
 8009e40:	e7fb      	b.n	8009e3a <__ascii_mbtowc+0x16>
 8009e42:	f06f 0001 	mvn.w	r0, #1
 8009e46:	e7f8      	b.n	8009e3a <__ascii_mbtowc+0x16>

08009e48 <memcpy>:
 8009e48:	440a      	add	r2, r1
 8009e4a:	4291      	cmp	r1, r2
 8009e4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e50:	d100      	bne.n	8009e54 <memcpy+0xc>
 8009e52:	4770      	bx	lr
 8009e54:	b510      	push	{r4, lr}
 8009e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e5e:	4291      	cmp	r1, r2
 8009e60:	d1f9      	bne.n	8009e56 <memcpy+0xe>
 8009e62:	bd10      	pop	{r4, pc}

08009e64 <_Balloc>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009e68:	4604      	mov	r4, r0
 8009e6a:	460d      	mov	r5, r1
 8009e6c:	b976      	cbnz	r6, 8009e8c <_Balloc+0x28>
 8009e6e:	2010      	movs	r0, #16
 8009e70:	f7ff ffd0 	bl	8009e14 <malloc>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6260      	str	r0, [r4, #36]	; 0x24
 8009e78:	b920      	cbnz	r0, 8009e84 <_Balloc+0x20>
 8009e7a:	4b18      	ldr	r3, [pc, #96]	; (8009edc <_Balloc+0x78>)
 8009e7c:	4818      	ldr	r0, [pc, #96]	; (8009ee0 <_Balloc+0x7c>)
 8009e7e:	2166      	movs	r1, #102	; 0x66
 8009e80:	f000 ff40 	bl	800ad04 <__assert_func>
 8009e84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e88:	6006      	str	r6, [r0, #0]
 8009e8a:	60c6      	str	r6, [r0, #12]
 8009e8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009e8e:	68f3      	ldr	r3, [r6, #12]
 8009e90:	b183      	cbz	r3, 8009eb4 <_Balloc+0x50>
 8009e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e94:	68db      	ldr	r3, [r3, #12]
 8009e96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e9a:	b9b8      	cbnz	r0, 8009ecc <_Balloc+0x68>
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	fa01 f605 	lsl.w	r6, r1, r5
 8009ea2:	1d72      	adds	r2, r6, #5
 8009ea4:	0092      	lsls	r2, r2, #2
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fc9d 	bl	800a7e6 <_calloc_r>
 8009eac:	b160      	cbz	r0, 8009ec8 <_Balloc+0x64>
 8009eae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009eb2:	e00e      	b.n	8009ed2 <_Balloc+0x6e>
 8009eb4:	2221      	movs	r2, #33	; 0x21
 8009eb6:	2104      	movs	r1, #4
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f000 fc94 	bl	800a7e6 <_calloc_r>
 8009ebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ec0:	60f0      	str	r0, [r6, #12]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1e4      	bne.n	8009e92 <_Balloc+0x2e>
 8009ec8:	2000      	movs	r0, #0
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	6802      	ldr	r2, [r0, #0]
 8009ece:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ed8:	e7f7      	b.n	8009eca <_Balloc+0x66>
 8009eda:	bf00      	nop
 8009edc:	0800d446 	.word	0x0800d446
 8009ee0:	0800d544 	.word	0x0800d544

08009ee4 <_Bfree>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009ee8:	4605      	mov	r5, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b976      	cbnz	r6, 8009f0c <_Bfree+0x28>
 8009eee:	2010      	movs	r0, #16
 8009ef0:	f7ff ff90 	bl	8009e14 <malloc>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	6268      	str	r0, [r5, #36]	; 0x24
 8009ef8:	b920      	cbnz	r0, 8009f04 <_Bfree+0x20>
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <_Bfree+0x3c>)
 8009efc:	4809      	ldr	r0, [pc, #36]	; (8009f24 <_Bfree+0x40>)
 8009efe:	218a      	movs	r1, #138	; 0x8a
 8009f00:	f000 ff00 	bl	800ad04 <__assert_func>
 8009f04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f08:	6006      	str	r6, [r0, #0]
 8009f0a:	60c6      	str	r6, [r0, #12]
 8009f0c:	b13c      	cbz	r4, 8009f1e <_Bfree+0x3a>
 8009f0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009f10:	6862      	ldr	r2, [r4, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f18:	6021      	str	r1, [r4, #0]
 8009f1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	0800d446 	.word	0x0800d446
 8009f24:	0800d544 	.word	0x0800d544

08009f28 <__multadd>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	690d      	ldr	r5, [r1, #16]
 8009f2e:	4607      	mov	r7, r0
 8009f30:	460c      	mov	r4, r1
 8009f32:	461e      	mov	r6, r3
 8009f34:	f101 0c14 	add.w	ip, r1, #20
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f3e:	b299      	uxth	r1, r3
 8009f40:	fb02 6101 	mla	r1, r2, r1, r6
 8009f44:	0c1e      	lsrs	r6, r3, #16
 8009f46:	0c0b      	lsrs	r3, r1, #16
 8009f48:	fb02 3306 	mla	r3, r2, r6, r3
 8009f4c:	b289      	uxth	r1, r1
 8009f4e:	3001      	adds	r0, #1
 8009f50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009f54:	4285      	cmp	r5, r0
 8009f56:	f84c 1b04 	str.w	r1, [ip], #4
 8009f5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009f5e:	dcec      	bgt.n	8009f3a <__multadd+0x12>
 8009f60:	b30e      	cbz	r6, 8009fa6 <__multadd+0x7e>
 8009f62:	68a3      	ldr	r3, [r4, #8]
 8009f64:	42ab      	cmp	r3, r5
 8009f66:	dc19      	bgt.n	8009f9c <__multadd+0x74>
 8009f68:	6861      	ldr	r1, [r4, #4]
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	f7ff ff79 	bl	8009e64 <_Balloc>
 8009f72:	4680      	mov	r8, r0
 8009f74:	b928      	cbnz	r0, 8009f82 <__multadd+0x5a>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b0c      	ldr	r3, [pc, #48]	; (8009fac <__multadd+0x84>)
 8009f7a:	480d      	ldr	r0, [pc, #52]	; (8009fb0 <__multadd+0x88>)
 8009f7c:	21b5      	movs	r1, #181	; 0xb5
 8009f7e:	f000 fec1 	bl	800ad04 <__assert_func>
 8009f82:	6922      	ldr	r2, [r4, #16]
 8009f84:	3202      	adds	r2, #2
 8009f86:	f104 010c 	add.w	r1, r4, #12
 8009f8a:	0092      	lsls	r2, r2, #2
 8009f8c:	300c      	adds	r0, #12
 8009f8e:	f7ff ff5b 	bl	8009e48 <memcpy>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4638      	mov	r0, r7
 8009f96:	f7ff ffa5 	bl	8009ee4 <_Bfree>
 8009f9a:	4644      	mov	r4, r8
 8009f9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009fa0:	3501      	adds	r5, #1
 8009fa2:	615e      	str	r6, [r3, #20]
 8009fa4:	6125      	str	r5, [r4, #16]
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	0800d4b8 	.word	0x0800d4b8
 8009fb0:	0800d544 	.word	0x0800d544

08009fb4 <__s2b>:
 8009fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fb8:	460c      	mov	r4, r1
 8009fba:	4615      	mov	r5, r2
 8009fbc:	461f      	mov	r7, r3
 8009fbe:	2209      	movs	r2, #9
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	4606      	mov	r6, r0
 8009fc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fc8:	2100      	movs	r1, #0
 8009fca:	2201      	movs	r2, #1
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	db09      	blt.n	8009fe4 <__s2b+0x30>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff ff47 	bl	8009e64 <_Balloc>
 8009fd6:	b940      	cbnz	r0, 8009fea <__s2b+0x36>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	4b19      	ldr	r3, [pc, #100]	; (800a040 <__s2b+0x8c>)
 8009fdc:	4819      	ldr	r0, [pc, #100]	; (800a044 <__s2b+0x90>)
 8009fde:	21ce      	movs	r1, #206	; 0xce
 8009fe0:	f000 fe90 	bl	800ad04 <__assert_func>
 8009fe4:	0052      	lsls	r2, r2, #1
 8009fe6:	3101      	adds	r1, #1
 8009fe8:	e7f0      	b.n	8009fcc <__s2b+0x18>
 8009fea:	9b08      	ldr	r3, [sp, #32]
 8009fec:	6143      	str	r3, [r0, #20]
 8009fee:	2d09      	cmp	r5, #9
 8009ff0:	f04f 0301 	mov.w	r3, #1
 8009ff4:	6103      	str	r3, [r0, #16]
 8009ff6:	dd16      	ble.n	800a026 <__s2b+0x72>
 8009ff8:	f104 0909 	add.w	r9, r4, #9
 8009ffc:	46c8      	mov	r8, r9
 8009ffe:	442c      	add	r4, r5
 800a000:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a004:	4601      	mov	r1, r0
 800a006:	3b30      	subs	r3, #48	; 0x30
 800a008:	220a      	movs	r2, #10
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff8c 	bl	8009f28 <__multadd>
 800a010:	45a0      	cmp	r8, r4
 800a012:	d1f5      	bne.n	800a000 <__s2b+0x4c>
 800a014:	f1a5 0408 	sub.w	r4, r5, #8
 800a018:	444c      	add	r4, r9
 800a01a:	1b2d      	subs	r5, r5, r4
 800a01c:	1963      	adds	r3, r4, r5
 800a01e:	42bb      	cmp	r3, r7
 800a020:	db04      	blt.n	800a02c <__s2b+0x78>
 800a022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a026:	340a      	adds	r4, #10
 800a028:	2509      	movs	r5, #9
 800a02a:	e7f6      	b.n	800a01a <__s2b+0x66>
 800a02c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a030:	4601      	mov	r1, r0
 800a032:	3b30      	subs	r3, #48	; 0x30
 800a034:	220a      	movs	r2, #10
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff76 	bl	8009f28 <__multadd>
 800a03c:	e7ee      	b.n	800a01c <__s2b+0x68>
 800a03e:	bf00      	nop
 800a040:	0800d4b8 	.word	0x0800d4b8
 800a044:	0800d544 	.word	0x0800d544

0800a048 <__hi0bits>:
 800a048:	0c03      	lsrs	r3, r0, #16
 800a04a:	041b      	lsls	r3, r3, #16
 800a04c:	b9d3      	cbnz	r3, 800a084 <__hi0bits+0x3c>
 800a04e:	0400      	lsls	r0, r0, #16
 800a050:	2310      	movs	r3, #16
 800a052:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a056:	bf04      	itt	eq
 800a058:	0200      	lsleq	r0, r0, #8
 800a05a:	3308      	addeq	r3, #8
 800a05c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a060:	bf04      	itt	eq
 800a062:	0100      	lsleq	r0, r0, #4
 800a064:	3304      	addeq	r3, #4
 800a066:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a06a:	bf04      	itt	eq
 800a06c:	0080      	lsleq	r0, r0, #2
 800a06e:	3302      	addeq	r3, #2
 800a070:	2800      	cmp	r0, #0
 800a072:	db05      	blt.n	800a080 <__hi0bits+0x38>
 800a074:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a078:	f103 0301 	add.w	r3, r3, #1
 800a07c:	bf08      	it	eq
 800a07e:	2320      	moveq	r3, #32
 800a080:	4618      	mov	r0, r3
 800a082:	4770      	bx	lr
 800a084:	2300      	movs	r3, #0
 800a086:	e7e4      	b.n	800a052 <__hi0bits+0xa>

0800a088 <__lo0bits>:
 800a088:	6803      	ldr	r3, [r0, #0]
 800a08a:	f013 0207 	ands.w	r2, r3, #7
 800a08e:	4601      	mov	r1, r0
 800a090:	d00b      	beq.n	800a0aa <__lo0bits+0x22>
 800a092:	07da      	lsls	r2, r3, #31
 800a094:	d423      	bmi.n	800a0de <__lo0bits+0x56>
 800a096:	0798      	lsls	r0, r3, #30
 800a098:	bf49      	itett	mi
 800a09a:	085b      	lsrmi	r3, r3, #1
 800a09c:	089b      	lsrpl	r3, r3, #2
 800a09e:	2001      	movmi	r0, #1
 800a0a0:	600b      	strmi	r3, [r1, #0]
 800a0a2:	bf5c      	itt	pl
 800a0a4:	600b      	strpl	r3, [r1, #0]
 800a0a6:	2002      	movpl	r0, #2
 800a0a8:	4770      	bx	lr
 800a0aa:	b298      	uxth	r0, r3
 800a0ac:	b9a8      	cbnz	r0, 800a0da <__lo0bits+0x52>
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	2010      	movs	r0, #16
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	b90a      	cbnz	r2, 800a0ba <__lo0bits+0x32>
 800a0b6:	3008      	adds	r0, #8
 800a0b8:	0a1b      	lsrs	r3, r3, #8
 800a0ba:	071a      	lsls	r2, r3, #28
 800a0bc:	bf04      	itt	eq
 800a0be:	091b      	lsreq	r3, r3, #4
 800a0c0:	3004      	addeq	r0, #4
 800a0c2:	079a      	lsls	r2, r3, #30
 800a0c4:	bf04      	itt	eq
 800a0c6:	089b      	lsreq	r3, r3, #2
 800a0c8:	3002      	addeq	r0, #2
 800a0ca:	07da      	lsls	r2, r3, #31
 800a0cc:	d403      	bmi.n	800a0d6 <__lo0bits+0x4e>
 800a0ce:	085b      	lsrs	r3, r3, #1
 800a0d0:	f100 0001 	add.w	r0, r0, #1
 800a0d4:	d005      	beq.n	800a0e2 <__lo0bits+0x5a>
 800a0d6:	600b      	str	r3, [r1, #0]
 800a0d8:	4770      	bx	lr
 800a0da:	4610      	mov	r0, r2
 800a0dc:	e7e9      	b.n	800a0b2 <__lo0bits+0x2a>
 800a0de:	2000      	movs	r0, #0
 800a0e0:	4770      	bx	lr
 800a0e2:	2020      	movs	r0, #32
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <__i2b>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	f7ff feb9 	bl	8009e64 <_Balloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <__i2b+0x1a>
 800a0f6:	4b05      	ldr	r3, [pc, #20]	; (800a10c <__i2b+0x24>)
 800a0f8:	4805      	ldr	r0, [pc, #20]	; (800a110 <__i2b+0x28>)
 800a0fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a0fe:	f000 fe01 	bl	800ad04 <__assert_func>
 800a102:	2301      	movs	r3, #1
 800a104:	6144      	str	r4, [r0, #20]
 800a106:	6103      	str	r3, [r0, #16]
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	bf00      	nop
 800a10c:	0800d4b8 	.word	0x0800d4b8
 800a110:	0800d544 	.word	0x0800d544

0800a114 <__multiply>:
 800a114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	4691      	mov	r9, r2
 800a11a:	690a      	ldr	r2, [r1, #16]
 800a11c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a120:	429a      	cmp	r2, r3
 800a122:	bfb8      	it	lt
 800a124:	460b      	movlt	r3, r1
 800a126:	460c      	mov	r4, r1
 800a128:	bfbc      	itt	lt
 800a12a:	464c      	movlt	r4, r9
 800a12c:	4699      	movlt	r9, r3
 800a12e:	6927      	ldr	r7, [r4, #16]
 800a130:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a134:	68a3      	ldr	r3, [r4, #8]
 800a136:	6861      	ldr	r1, [r4, #4]
 800a138:	eb07 060a 	add.w	r6, r7, sl
 800a13c:	42b3      	cmp	r3, r6
 800a13e:	b085      	sub	sp, #20
 800a140:	bfb8      	it	lt
 800a142:	3101      	addlt	r1, #1
 800a144:	f7ff fe8e 	bl	8009e64 <_Balloc>
 800a148:	b930      	cbnz	r0, 800a158 <__multiply+0x44>
 800a14a:	4602      	mov	r2, r0
 800a14c:	4b44      	ldr	r3, [pc, #272]	; (800a260 <__multiply+0x14c>)
 800a14e:	4845      	ldr	r0, [pc, #276]	; (800a264 <__multiply+0x150>)
 800a150:	f240 115d 	movw	r1, #349	; 0x15d
 800a154:	f000 fdd6 	bl	800ad04 <__assert_func>
 800a158:	f100 0514 	add.w	r5, r0, #20
 800a15c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a160:	462b      	mov	r3, r5
 800a162:	2200      	movs	r2, #0
 800a164:	4543      	cmp	r3, r8
 800a166:	d321      	bcc.n	800a1ac <__multiply+0x98>
 800a168:	f104 0314 	add.w	r3, r4, #20
 800a16c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a170:	f109 0314 	add.w	r3, r9, #20
 800a174:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a178:	9202      	str	r2, [sp, #8]
 800a17a:	1b3a      	subs	r2, r7, r4
 800a17c:	3a15      	subs	r2, #21
 800a17e:	f022 0203 	bic.w	r2, r2, #3
 800a182:	3204      	adds	r2, #4
 800a184:	f104 0115 	add.w	r1, r4, #21
 800a188:	428f      	cmp	r7, r1
 800a18a:	bf38      	it	cc
 800a18c:	2204      	movcc	r2, #4
 800a18e:	9201      	str	r2, [sp, #4]
 800a190:	9a02      	ldr	r2, [sp, #8]
 800a192:	9303      	str	r3, [sp, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d80c      	bhi.n	800a1b2 <__multiply+0x9e>
 800a198:	2e00      	cmp	r6, #0
 800a19a:	dd03      	ble.n	800a1a4 <__multiply+0x90>
 800a19c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d05a      	beq.n	800a25a <__multiply+0x146>
 800a1a4:	6106      	str	r6, [r0, #16]
 800a1a6:	b005      	add	sp, #20
 800a1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ac:	f843 2b04 	str.w	r2, [r3], #4
 800a1b0:	e7d8      	b.n	800a164 <__multiply+0x50>
 800a1b2:	f8b3 a000 	ldrh.w	sl, [r3]
 800a1b6:	f1ba 0f00 	cmp.w	sl, #0
 800a1ba:	d024      	beq.n	800a206 <__multiply+0xf2>
 800a1bc:	f104 0e14 	add.w	lr, r4, #20
 800a1c0:	46a9      	mov	r9, r5
 800a1c2:	f04f 0c00 	mov.w	ip, #0
 800a1c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a1ca:	f8d9 1000 	ldr.w	r1, [r9]
 800a1ce:	fa1f fb82 	uxth.w	fp, r2
 800a1d2:	b289      	uxth	r1, r1
 800a1d4:	fb0a 110b 	mla	r1, sl, fp, r1
 800a1d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a1dc:	f8d9 2000 	ldr.w	r2, [r9]
 800a1e0:	4461      	add	r1, ip
 800a1e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1e6:	fb0a c20b 	mla	r2, sl, fp, ip
 800a1ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1ee:	b289      	uxth	r1, r1
 800a1f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a1f4:	4577      	cmp	r7, lr
 800a1f6:	f849 1b04 	str.w	r1, [r9], #4
 800a1fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a1fe:	d8e2      	bhi.n	800a1c6 <__multiply+0xb2>
 800a200:	9a01      	ldr	r2, [sp, #4]
 800a202:	f845 c002 	str.w	ip, [r5, r2]
 800a206:	9a03      	ldr	r2, [sp, #12]
 800a208:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a20c:	3304      	adds	r3, #4
 800a20e:	f1b9 0f00 	cmp.w	r9, #0
 800a212:	d020      	beq.n	800a256 <__multiply+0x142>
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	f104 0c14 	add.w	ip, r4, #20
 800a21a:	46ae      	mov	lr, r5
 800a21c:	f04f 0a00 	mov.w	sl, #0
 800a220:	f8bc b000 	ldrh.w	fp, [ip]
 800a224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a228:	fb09 220b 	mla	r2, r9, fp, r2
 800a22c:	4492      	add	sl, r2
 800a22e:	b289      	uxth	r1, r1
 800a230:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a234:	f84e 1b04 	str.w	r1, [lr], #4
 800a238:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a23c:	f8be 1000 	ldrh.w	r1, [lr]
 800a240:	0c12      	lsrs	r2, r2, #16
 800a242:	fb09 1102 	mla	r1, r9, r2, r1
 800a246:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a24a:	4567      	cmp	r7, ip
 800a24c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a250:	d8e6      	bhi.n	800a220 <__multiply+0x10c>
 800a252:	9a01      	ldr	r2, [sp, #4]
 800a254:	50a9      	str	r1, [r5, r2]
 800a256:	3504      	adds	r5, #4
 800a258:	e79a      	b.n	800a190 <__multiply+0x7c>
 800a25a:	3e01      	subs	r6, #1
 800a25c:	e79c      	b.n	800a198 <__multiply+0x84>
 800a25e:	bf00      	nop
 800a260:	0800d4b8 	.word	0x0800d4b8
 800a264:	0800d544 	.word	0x0800d544

0800a268 <__pow5mult>:
 800a268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a26c:	4615      	mov	r5, r2
 800a26e:	f012 0203 	ands.w	r2, r2, #3
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	d007      	beq.n	800a288 <__pow5mult+0x20>
 800a278:	4c25      	ldr	r4, [pc, #148]	; (800a310 <__pow5mult+0xa8>)
 800a27a:	3a01      	subs	r2, #1
 800a27c:	2300      	movs	r3, #0
 800a27e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a282:	f7ff fe51 	bl	8009f28 <__multadd>
 800a286:	4607      	mov	r7, r0
 800a288:	10ad      	asrs	r5, r5, #2
 800a28a:	d03d      	beq.n	800a308 <__pow5mult+0xa0>
 800a28c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a28e:	b97c      	cbnz	r4, 800a2b0 <__pow5mult+0x48>
 800a290:	2010      	movs	r0, #16
 800a292:	f7ff fdbf 	bl	8009e14 <malloc>
 800a296:	4602      	mov	r2, r0
 800a298:	6270      	str	r0, [r6, #36]	; 0x24
 800a29a:	b928      	cbnz	r0, 800a2a8 <__pow5mult+0x40>
 800a29c:	4b1d      	ldr	r3, [pc, #116]	; (800a314 <__pow5mult+0xac>)
 800a29e:	481e      	ldr	r0, [pc, #120]	; (800a318 <__pow5mult+0xb0>)
 800a2a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a2a4:	f000 fd2e 	bl	800ad04 <__assert_func>
 800a2a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a2ac:	6004      	str	r4, [r0, #0]
 800a2ae:	60c4      	str	r4, [r0, #12]
 800a2b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a2b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2b8:	b94c      	cbnz	r4, 800a2ce <__pow5mult+0x66>
 800a2ba:	f240 2171 	movw	r1, #625	; 0x271
 800a2be:	4630      	mov	r0, r6
 800a2c0:	f7ff ff12 	bl	800a0e8 <__i2b>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	6003      	str	r3, [r0, #0]
 800a2ce:	f04f 0900 	mov.w	r9, #0
 800a2d2:	07eb      	lsls	r3, r5, #31
 800a2d4:	d50a      	bpl.n	800a2ec <__pow5mult+0x84>
 800a2d6:	4639      	mov	r1, r7
 800a2d8:	4622      	mov	r2, r4
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff1a 	bl	800a114 <__multiply>
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4680      	mov	r8, r0
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff fdfd 	bl	8009ee4 <_Bfree>
 800a2ea:	4647      	mov	r7, r8
 800a2ec:	106d      	asrs	r5, r5, #1
 800a2ee:	d00b      	beq.n	800a308 <__pow5mult+0xa0>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	b938      	cbnz	r0, 800a304 <__pow5mult+0x9c>
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ff0b 	bl	800a114 <__multiply>
 800a2fe:	6020      	str	r0, [r4, #0]
 800a300:	f8c0 9000 	str.w	r9, [r0]
 800a304:	4604      	mov	r4, r0
 800a306:	e7e4      	b.n	800a2d2 <__pow5mult+0x6a>
 800a308:	4638      	mov	r0, r7
 800a30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30e:	bf00      	nop
 800a310:	0800d690 	.word	0x0800d690
 800a314:	0800d446 	.word	0x0800d446
 800a318:	0800d544 	.word	0x0800d544

0800a31c <__lshift>:
 800a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	6849      	ldr	r1, [r1, #4]
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a32a:	68a3      	ldr	r3, [r4, #8]
 800a32c:	4607      	mov	r7, r0
 800a32e:	4691      	mov	r9, r2
 800a330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a334:	f108 0601 	add.w	r6, r8, #1
 800a338:	42b3      	cmp	r3, r6
 800a33a:	db0b      	blt.n	800a354 <__lshift+0x38>
 800a33c:	4638      	mov	r0, r7
 800a33e:	f7ff fd91 	bl	8009e64 <_Balloc>
 800a342:	4605      	mov	r5, r0
 800a344:	b948      	cbnz	r0, 800a35a <__lshift+0x3e>
 800a346:	4602      	mov	r2, r0
 800a348:	4b2a      	ldr	r3, [pc, #168]	; (800a3f4 <__lshift+0xd8>)
 800a34a:	482b      	ldr	r0, [pc, #172]	; (800a3f8 <__lshift+0xdc>)
 800a34c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a350:	f000 fcd8 	bl	800ad04 <__assert_func>
 800a354:	3101      	adds	r1, #1
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	e7ee      	b.n	800a338 <__lshift+0x1c>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f100 0114 	add.w	r1, r0, #20
 800a360:	f100 0210 	add.w	r2, r0, #16
 800a364:	4618      	mov	r0, r3
 800a366:	4553      	cmp	r3, sl
 800a368:	db37      	blt.n	800a3da <__lshift+0xbe>
 800a36a:	6920      	ldr	r0, [r4, #16]
 800a36c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a370:	f104 0314 	add.w	r3, r4, #20
 800a374:	f019 091f 	ands.w	r9, r9, #31
 800a378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a37c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a380:	d02f      	beq.n	800a3e2 <__lshift+0xc6>
 800a382:	f1c9 0e20 	rsb	lr, r9, #32
 800a386:	468a      	mov	sl, r1
 800a388:	f04f 0c00 	mov.w	ip, #0
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	fa02 f209 	lsl.w	r2, r2, r9
 800a392:	ea42 020c 	orr.w	r2, r2, ip
 800a396:	f84a 2b04 	str.w	r2, [sl], #4
 800a39a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39e:	4298      	cmp	r0, r3
 800a3a0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a3a4:	d8f2      	bhi.n	800a38c <__lshift+0x70>
 800a3a6:	1b03      	subs	r3, r0, r4
 800a3a8:	3b15      	subs	r3, #21
 800a3aa:	f023 0303 	bic.w	r3, r3, #3
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	f104 0215 	add.w	r2, r4, #21
 800a3b4:	4290      	cmp	r0, r2
 800a3b6:	bf38      	it	cc
 800a3b8:	2304      	movcc	r3, #4
 800a3ba:	f841 c003 	str.w	ip, [r1, r3]
 800a3be:	f1bc 0f00 	cmp.w	ip, #0
 800a3c2:	d001      	beq.n	800a3c8 <__lshift+0xac>
 800a3c4:	f108 0602 	add.w	r6, r8, #2
 800a3c8:	3e01      	subs	r6, #1
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	612e      	str	r6, [r5, #16]
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f7ff fd88 	bl	8009ee4 <_Bfree>
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3da:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3de:	3301      	adds	r3, #1
 800a3e0:	e7c1      	b.n	800a366 <__lshift+0x4a>
 800a3e2:	3904      	subs	r1, #4
 800a3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3ec:	4298      	cmp	r0, r3
 800a3ee:	d8f9      	bhi.n	800a3e4 <__lshift+0xc8>
 800a3f0:	e7ea      	b.n	800a3c8 <__lshift+0xac>
 800a3f2:	bf00      	nop
 800a3f4:	0800d4b8 	.word	0x0800d4b8
 800a3f8:	0800d544 	.word	0x0800d544

0800a3fc <__mcmp>:
 800a3fc:	b530      	push	{r4, r5, lr}
 800a3fe:	6902      	ldr	r2, [r0, #16]
 800a400:	690c      	ldr	r4, [r1, #16]
 800a402:	1b12      	subs	r2, r2, r4
 800a404:	d10e      	bne.n	800a424 <__mcmp+0x28>
 800a406:	f100 0314 	add.w	r3, r0, #20
 800a40a:	3114      	adds	r1, #20
 800a40c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a410:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a414:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a418:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a41c:	42a5      	cmp	r5, r4
 800a41e:	d003      	beq.n	800a428 <__mcmp+0x2c>
 800a420:	d305      	bcc.n	800a42e <__mcmp+0x32>
 800a422:	2201      	movs	r2, #1
 800a424:	4610      	mov	r0, r2
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	4283      	cmp	r3, r0
 800a42a:	d3f3      	bcc.n	800a414 <__mcmp+0x18>
 800a42c:	e7fa      	b.n	800a424 <__mcmp+0x28>
 800a42e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a432:	e7f7      	b.n	800a424 <__mcmp+0x28>

0800a434 <__mdiff>:
 800a434:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a438:	460c      	mov	r4, r1
 800a43a:	4606      	mov	r6, r0
 800a43c:	4611      	mov	r1, r2
 800a43e:	4620      	mov	r0, r4
 800a440:	4690      	mov	r8, r2
 800a442:	f7ff ffdb 	bl	800a3fc <__mcmp>
 800a446:	1e05      	subs	r5, r0, #0
 800a448:	d110      	bne.n	800a46c <__mdiff+0x38>
 800a44a:	4629      	mov	r1, r5
 800a44c:	4630      	mov	r0, r6
 800a44e:	f7ff fd09 	bl	8009e64 <_Balloc>
 800a452:	b930      	cbnz	r0, 800a462 <__mdiff+0x2e>
 800a454:	4b3a      	ldr	r3, [pc, #232]	; (800a540 <__mdiff+0x10c>)
 800a456:	4602      	mov	r2, r0
 800a458:	f240 2132 	movw	r1, #562	; 0x232
 800a45c:	4839      	ldr	r0, [pc, #228]	; (800a544 <__mdiff+0x110>)
 800a45e:	f000 fc51 	bl	800ad04 <__assert_func>
 800a462:	2301      	movs	r3, #1
 800a464:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46c:	bfa4      	itt	ge
 800a46e:	4643      	movge	r3, r8
 800a470:	46a0      	movge	r8, r4
 800a472:	4630      	mov	r0, r6
 800a474:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a478:	bfa6      	itte	ge
 800a47a:	461c      	movge	r4, r3
 800a47c:	2500      	movge	r5, #0
 800a47e:	2501      	movlt	r5, #1
 800a480:	f7ff fcf0 	bl	8009e64 <_Balloc>
 800a484:	b920      	cbnz	r0, 800a490 <__mdiff+0x5c>
 800a486:	4b2e      	ldr	r3, [pc, #184]	; (800a540 <__mdiff+0x10c>)
 800a488:	4602      	mov	r2, r0
 800a48a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a48e:	e7e5      	b.n	800a45c <__mdiff+0x28>
 800a490:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a494:	6926      	ldr	r6, [r4, #16]
 800a496:	60c5      	str	r5, [r0, #12]
 800a498:	f104 0914 	add.w	r9, r4, #20
 800a49c:	f108 0514 	add.w	r5, r8, #20
 800a4a0:	f100 0e14 	add.w	lr, r0, #20
 800a4a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a4a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a4ac:	f108 0210 	add.w	r2, r8, #16
 800a4b0:	46f2      	mov	sl, lr
 800a4b2:	2100      	movs	r1, #0
 800a4b4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a4b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a4bc:	fa1f f883 	uxth.w	r8, r3
 800a4c0:	fa11 f18b 	uxtah	r1, r1, fp
 800a4c4:	0c1b      	lsrs	r3, r3, #16
 800a4c6:	eba1 0808 	sub.w	r8, r1, r8
 800a4ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a4ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a4d2:	fa1f f888 	uxth.w	r8, r8
 800a4d6:	1419      	asrs	r1, r3, #16
 800a4d8:	454e      	cmp	r6, r9
 800a4da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a4de:	f84a 3b04 	str.w	r3, [sl], #4
 800a4e2:	d8e7      	bhi.n	800a4b4 <__mdiff+0x80>
 800a4e4:	1b33      	subs	r3, r6, r4
 800a4e6:	3b15      	subs	r3, #21
 800a4e8:	f023 0303 	bic.w	r3, r3, #3
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	3415      	adds	r4, #21
 800a4f0:	42a6      	cmp	r6, r4
 800a4f2:	bf38      	it	cc
 800a4f4:	2304      	movcc	r3, #4
 800a4f6:	441d      	add	r5, r3
 800a4f8:	4473      	add	r3, lr
 800a4fa:	469e      	mov	lr, r3
 800a4fc:	462e      	mov	r6, r5
 800a4fe:	4566      	cmp	r6, ip
 800a500:	d30e      	bcc.n	800a520 <__mdiff+0xec>
 800a502:	f10c 0203 	add.w	r2, ip, #3
 800a506:	1b52      	subs	r2, r2, r5
 800a508:	f022 0203 	bic.w	r2, r2, #3
 800a50c:	3d03      	subs	r5, #3
 800a50e:	45ac      	cmp	ip, r5
 800a510:	bf38      	it	cc
 800a512:	2200      	movcc	r2, #0
 800a514:	441a      	add	r2, r3
 800a516:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a51a:	b17b      	cbz	r3, 800a53c <__mdiff+0x108>
 800a51c:	6107      	str	r7, [r0, #16]
 800a51e:	e7a3      	b.n	800a468 <__mdiff+0x34>
 800a520:	f856 8b04 	ldr.w	r8, [r6], #4
 800a524:	fa11 f288 	uxtah	r2, r1, r8
 800a528:	1414      	asrs	r4, r2, #16
 800a52a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a52e:	b292      	uxth	r2, r2
 800a530:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a534:	f84e 2b04 	str.w	r2, [lr], #4
 800a538:	1421      	asrs	r1, r4, #16
 800a53a:	e7e0      	b.n	800a4fe <__mdiff+0xca>
 800a53c:	3f01      	subs	r7, #1
 800a53e:	e7ea      	b.n	800a516 <__mdiff+0xe2>
 800a540:	0800d4b8 	.word	0x0800d4b8
 800a544:	0800d544 	.word	0x0800d544

0800a548 <__ulp>:
 800a548:	b082      	sub	sp, #8
 800a54a:	ed8d 0b00 	vstr	d0, [sp]
 800a54e:	9b01      	ldr	r3, [sp, #4]
 800a550:	4912      	ldr	r1, [pc, #72]	; (800a59c <__ulp+0x54>)
 800a552:	4019      	ands	r1, r3
 800a554:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a558:	2900      	cmp	r1, #0
 800a55a:	dd05      	ble.n	800a568 <__ulp+0x20>
 800a55c:	2200      	movs	r2, #0
 800a55e:	460b      	mov	r3, r1
 800a560:	ec43 2b10 	vmov	d0, r2, r3
 800a564:	b002      	add	sp, #8
 800a566:	4770      	bx	lr
 800a568:	4249      	negs	r1, r1
 800a56a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a56e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	f04f 0300 	mov.w	r3, #0
 800a57a:	da04      	bge.n	800a586 <__ulp+0x3e>
 800a57c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a580:	fa41 f300 	asr.w	r3, r1, r0
 800a584:	e7ec      	b.n	800a560 <__ulp+0x18>
 800a586:	f1a0 0114 	sub.w	r1, r0, #20
 800a58a:	291e      	cmp	r1, #30
 800a58c:	bfda      	itte	le
 800a58e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a592:	fa20 f101 	lsrle.w	r1, r0, r1
 800a596:	2101      	movgt	r1, #1
 800a598:	460a      	mov	r2, r1
 800a59a:	e7e1      	b.n	800a560 <__ulp+0x18>
 800a59c:	7ff00000 	.word	0x7ff00000

0800a5a0 <__b2d>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	6905      	ldr	r5, [r0, #16]
 800a5a4:	f100 0714 	add.w	r7, r0, #20
 800a5a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a5ac:	1f2e      	subs	r6, r5, #4
 800a5ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f7ff fd48 	bl	800a048 <__hi0bits>
 800a5b8:	f1c0 0320 	rsb	r3, r0, #32
 800a5bc:	280a      	cmp	r0, #10
 800a5be:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a63c <__b2d+0x9c>
 800a5c2:	600b      	str	r3, [r1, #0]
 800a5c4:	dc14      	bgt.n	800a5f0 <__b2d+0x50>
 800a5c6:	f1c0 0e0b 	rsb	lr, r0, #11
 800a5ca:	fa24 f10e 	lsr.w	r1, r4, lr
 800a5ce:	42b7      	cmp	r7, r6
 800a5d0:	ea41 030c 	orr.w	r3, r1, ip
 800a5d4:	bf34      	ite	cc
 800a5d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5da:	2100      	movcs	r1, #0
 800a5dc:	3015      	adds	r0, #21
 800a5de:	fa04 f000 	lsl.w	r0, r4, r0
 800a5e2:	fa21 f10e 	lsr.w	r1, r1, lr
 800a5e6:	ea40 0201 	orr.w	r2, r0, r1
 800a5ea:	ec43 2b10 	vmov	d0, r2, r3
 800a5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f0:	42b7      	cmp	r7, r6
 800a5f2:	bf3a      	itte	cc
 800a5f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a5f8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a5fc:	2100      	movcs	r1, #0
 800a5fe:	380b      	subs	r0, #11
 800a600:	d017      	beq.n	800a632 <__b2d+0x92>
 800a602:	f1c0 0c20 	rsb	ip, r0, #32
 800a606:	fa04 f500 	lsl.w	r5, r4, r0
 800a60a:	42be      	cmp	r6, r7
 800a60c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a610:	ea45 0504 	orr.w	r5, r5, r4
 800a614:	bf8c      	ite	hi
 800a616:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a61a:	2400      	movls	r4, #0
 800a61c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a620:	fa01 f000 	lsl.w	r0, r1, r0
 800a624:	fa24 f40c 	lsr.w	r4, r4, ip
 800a628:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a62c:	ea40 0204 	orr.w	r2, r0, r4
 800a630:	e7db      	b.n	800a5ea <__b2d+0x4a>
 800a632:	ea44 030c 	orr.w	r3, r4, ip
 800a636:	460a      	mov	r2, r1
 800a638:	e7d7      	b.n	800a5ea <__b2d+0x4a>
 800a63a:	bf00      	nop
 800a63c:	3ff00000 	.word	0x3ff00000

0800a640 <__d2b>:
 800a640:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a644:	4689      	mov	r9, r1
 800a646:	2101      	movs	r1, #1
 800a648:	ec57 6b10 	vmov	r6, r7, d0
 800a64c:	4690      	mov	r8, r2
 800a64e:	f7ff fc09 	bl	8009e64 <_Balloc>
 800a652:	4604      	mov	r4, r0
 800a654:	b930      	cbnz	r0, 800a664 <__d2b+0x24>
 800a656:	4602      	mov	r2, r0
 800a658:	4b25      	ldr	r3, [pc, #148]	; (800a6f0 <__d2b+0xb0>)
 800a65a:	4826      	ldr	r0, [pc, #152]	; (800a6f4 <__d2b+0xb4>)
 800a65c:	f240 310a 	movw	r1, #778	; 0x30a
 800a660:	f000 fb50 	bl	800ad04 <__assert_func>
 800a664:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a66c:	bb35      	cbnz	r5, 800a6bc <__d2b+0x7c>
 800a66e:	2e00      	cmp	r6, #0
 800a670:	9301      	str	r3, [sp, #4]
 800a672:	d028      	beq.n	800a6c6 <__d2b+0x86>
 800a674:	4668      	mov	r0, sp
 800a676:	9600      	str	r6, [sp, #0]
 800a678:	f7ff fd06 	bl	800a088 <__lo0bits>
 800a67c:	9900      	ldr	r1, [sp, #0]
 800a67e:	b300      	cbz	r0, 800a6c2 <__d2b+0x82>
 800a680:	9a01      	ldr	r2, [sp, #4]
 800a682:	f1c0 0320 	rsb	r3, r0, #32
 800a686:	fa02 f303 	lsl.w	r3, r2, r3
 800a68a:	430b      	orrs	r3, r1
 800a68c:	40c2      	lsrs	r2, r0
 800a68e:	6163      	str	r3, [r4, #20]
 800a690:	9201      	str	r2, [sp, #4]
 800a692:	9b01      	ldr	r3, [sp, #4]
 800a694:	61a3      	str	r3, [r4, #24]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bf14      	ite	ne
 800a69a:	2202      	movne	r2, #2
 800a69c:	2201      	moveq	r2, #1
 800a69e:	6122      	str	r2, [r4, #16]
 800a6a0:	b1d5      	cbz	r5, 800a6d8 <__d2b+0x98>
 800a6a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a6a6:	4405      	add	r5, r0
 800a6a8:	f8c9 5000 	str.w	r5, [r9]
 800a6ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a6b0:	f8c8 0000 	str.w	r0, [r8]
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	b003      	add	sp, #12
 800a6b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6c0:	e7d5      	b.n	800a66e <__d2b+0x2e>
 800a6c2:	6161      	str	r1, [r4, #20]
 800a6c4:	e7e5      	b.n	800a692 <__d2b+0x52>
 800a6c6:	a801      	add	r0, sp, #4
 800a6c8:	f7ff fcde 	bl	800a088 <__lo0bits>
 800a6cc:	9b01      	ldr	r3, [sp, #4]
 800a6ce:	6163      	str	r3, [r4, #20]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	6122      	str	r2, [r4, #16]
 800a6d4:	3020      	adds	r0, #32
 800a6d6:	e7e3      	b.n	800a6a0 <__d2b+0x60>
 800a6d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a6dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a6e0:	f8c9 0000 	str.w	r0, [r9]
 800a6e4:	6918      	ldr	r0, [r3, #16]
 800a6e6:	f7ff fcaf 	bl	800a048 <__hi0bits>
 800a6ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6ee:	e7df      	b.n	800a6b0 <__d2b+0x70>
 800a6f0:	0800d4b8 	.word	0x0800d4b8
 800a6f4:	0800d544 	.word	0x0800d544

0800a6f8 <__ratio>:
 800a6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	4688      	mov	r8, r1
 800a6fe:	4669      	mov	r1, sp
 800a700:	4681      	mov	r9, r0
 800a702:	f7ff ff4d 	bl	800a5a0 <__b2d>
 800a706:	a901      	add	r1, sp, #4
 800a708:	4640      	mov	r0, r8
 800a70a:	ec55 4b10 	vmov	r4, r5, d0
 800a70e:	f7ff ff47 	bl	800a5a0 <__b2d>
 800a712:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a716:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a71a:	eba3 0c02 	sub.w	ip, r3, r2
 800a71e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a728:	ec51 0b10 	vmov	r0, r1, d0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfd6      	itet	le
 800a730:	460a      	movle	r2, r1
 800a732:	462a      	movgt	r2, r5
 800a734:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a738:	468b      	mov	fp, r1
 800a73a:	462f      	mov	r7, r5
 800a73c:	bfd4      	ite	le
 800a73e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a742:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a746:	4620      	mov	r0, r4
 800a748:	ee10 2a10 	vmov	r2, s0
 800a74c:	465b      	mov	r3, fp
 800a74e:	4639      	mov	r1, r7
 800a750:	f7f6 f884 	bl	800085c <__aeabi_ddiv>
 800a754:	ec41 0b10 	vmov	d0, r0, r1
 800a758:	b003      	add	sp, #12
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a75e <__copybits>:
 800a75e:	3901      	subs	r1, #1
 800a760:	b570      	push	{r4, r5, r6, lr}
 800a762:	1149      	asrs	r1, r1, #5
 800a764:	6914      	ldr	r4, [r2, #16]
 800a766:	3101      	adds	r1, #1
 800a768:	f102 0314 	add.w	r3, r2, #20
 800a76c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a770:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a774:	1f05      	subs	r5, r0, #4
 800a776:	42a3      	cmp	r3, r4
 800a778:	d30c      	bcc.n	800a794 <__copybits+0x36>
 800a77a:	1aa3      	subs	r3, r4, r2
 800a77c:	3b11      	subs	r3, #17
 800a77e:	f023 0303 	bic.w	r3, r3, #3
 800a782:	3211      	adds	r2, #17
 800a784:	42a2      	cmp	r2, r4
 800a786:	bf88      	it	hi
 800a788:	2300      	movhi	r3, #0
 800a78a:	4418      	add	r0, r3
 800a78c:	2300      	movs	r3, #0
 800a78e:	4288      	cmp	r0, r1
 800a790:	d305      	bcc.n	800a79e <__copybits+0x40>
 800a792:	bd70      	pop	{r4, r5, r6, pc}
 800a794:	f853 6b04 	ldr.w	r6, [r3], #4
 800a798:	f845 6f04 	str.w	r6, [r5, #4]!
 800a79c:	e7eb      	b.n	800a776 <__copybits+0x18>
 800a79e:	f840 3b04 	str.w	r3, [r0], #4
 800a7a2:	e7f4      	b.n	800a78e <__copybits+0x30>

0800a7a4 <__any_on>:
 800a7a4:	f100 0214 	add.w	r2, r0, #20
 800a7a8:	6900      	ldr	r0, [r0, #16]
 800a7aa:	114b      	asrs	r3, r1, #5
 800a7ac:	4298      	cmp	r0, r3
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	db11      	blt.n	800a7d6 <__any_on+0x32>
 800a7b2:	dd0a      	ble.n	800a7ca <__any_on+0x26>
 800a7b4:	f011 011f 	ands.w	r1, r1, #31
 800a7b8:	d007      	beq.n	800a7ca <__any_on+0x26>
 800a7ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a7be:	fa24 f001 	lsr.w	r0, r4, r1
 800a7c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a7c6:	428c      	cmp	r4, r1
 800a7c8:	d10b      	bne.n	800a7e2 <__any_on+0x3e>
 800a7ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d803      	bhi.n	800a7da <__any_on+0x36>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	e7f7      	b.n	800a7ca <__any_on+0x26>
 800a7da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7de:	2900      	cmp	r1, #0
 800a7e0:	d0f5      	beq.n	800a7ce <__any_on+0x2a>
 800a7e2:	2001      	movs	r0, #1
 800a7e4:	e7f6      	b.n	800a7d4 <__any_on+0x30>

0800a7e6 <_calloc_r>:
 800a7e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7e8:	fba1 2402 	umull	r2, r4, r1, r2
 800a7ec:	b94c      	cbnz	r4, 800a802 <_calloc_r+0x1c>
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	f000 f87b 	bl	800a8ec <_malloc_r>
 800a7f6:	9a01      	ldr	r2, [sp, #4]
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	b930      	cbnz	r0, 800a80a <_calloc_r+0x24>
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	b003      	add	sp, #12
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	220c      	movs	r2, #12
 800a804:	6002      	str	r2, [r0, #0]
 800a806:	2500      	movs	r5, #0
 800a808:	e7f8      	b.n	800a7fc <_calloc_r+0x16>
 800a80a:	4621      	mov	r1, r4
 800a80c:	f7fc fbc0 	bl	8006f90 <memset>
 800a810:	e7f4      	b.n	800a7fc <_calloc_r+0x16>
	...

0800a814 <_free_r>:
 800a814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a816:	2900      	cmp	r1, #0
 800a818:	d044      	beq.n	800a8a4 <_free_r+0x90>
 800a81a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81e:	9001      	str	r0, [sp, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	f1a1 0404 	sub.w	r4, r1, #4
 800a826:	bfb8      	it	lt
 800a828:	18e4      	addlt	r4, r4, r3
 800a82a:	f000 fab5 	bl	800ad98 <__malloc_lock>
 800a82e:	4a1e      	ldr	r2, [pc, #120]	; (800a8a8 <_free_r+0x94>)
 800a830:	9801      	ldr	r0, [sp, #4]
 800a832:	6813      	ldr	r3, [r2, #0]
 800a834:	b933      	cbnz	r3, 800a844 <_free_r+0x30>
 800a836:	6063      	str	r3, [r4, #4]
 800a838:	6014      	str	r4, [r2, #0]
 800a83a:	b003      	add	sp, #12
 800a83c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a840:	f000 bab0 	b.w	800ada4 <__malloc_unlock>
 800a844:	42a3      	cmp	r3, r4
 800a846:	d908      	bls.n	800a85a <_free_r+0x46>
 800a848:	6825      	ldr	r5, [r4, #0]
 800a84a:	1961      	adds	r1, r4, r5
 800a84c:	428b      	cmp	r3, r1
 800a84e:	bf01      	itttt	eq
 800a850:	6819      	ldreq	r1, [r3, #0]
 800a852:	685b      	ldreq	r3, [r3, #4]
 800a854:	1949      	addeq	r1, r1, r5
 800a856:	6021      	streq	r1, [r4, #0]
 800a858:	e7ed      	b.n	800a836 <_free_r+0x22>
 800a85a:	461a      	mov	r2, r3
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	b10b      	cbz	r3, 800a864 <_free_r+0x50>
 800a860:	42a3      	cmp	r3, r4
 800a862:	d9fa      	bls.n	800a85a <_free_r+0x46>
 800a864:	6811      	ldr	r1, [r2, #0]
 800a866:	1855      	adds	r5, r2, r1
 800a868:	42a5      	cmp	r5, r4
 800a86a:	d10b      	bne.n	800a884 <_free_r+0x70>
 800a86c:	6824      	ldr	r4, [r4, #0]
 800a86e:	4421      	add	r1, r4
 800a870:	1854      	adds	r4, r2, r1
 800a872:	42a3      	cmp	r3, r4
 800a874:	6011      	str	r1, [r2, #0]
 800a876:	d1e0      	bne.n	800a83a <_free_r+0x26>
 800a878:	681c      	ldr	r4, [r3, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	6053      	str	r3, [r2, #4]
 800a87e:	4421      	add	r1, r4
 800a880:	6011      	str	r1, [r2, #0]
 800a882:	e7da      	b.n	800a83a <_free_r+0x26>
 800a884:	d902      	bls.n	800a88c <_free_r+0x78>
 800a886:	230c      	movs	r3, #12
 800a888:	6003      	str	r3, [r0, #0]
 800a88a:	e7d6      	b.n	800a83a <_free_r+0x26>
 800a88c:	6825      	ldr	r5, [r4, #0]
 800a88e:	1961      	adds	r1, r4, r5
 800a890:	428b      	cmp	r3, r1
 800a892:	bf04      	itt	eq
 800a894:	6819      	ldreq	r1, [r3, #0]
 800a896:	685b      	ldreq	r3, [r3, #4]
 800a898:	6063      	str	r3, [r4, #4]
 800a89a:	bf04      	itt	eq
 800a89c:	1949      	addeq	r1, r1, r5
 800a89e:	6021      	streq	r1, [r4, #0]
 800a8a0:	6054      	str	r4, [r2, #4]
 800a8a2:	e7ca      	b.n	800a83a <_free_r+0x26>
 800a8a4:	b003      	add	sp, #12
 800a8a6:	bd30      	pop	{r4, r5, pc}
 800a8a8:	20000258 	.word	0x20000258

0800a8ac <sbrk_aligned>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	4e0e      	ldr	r6, [pc, #56]	; (800a8e8 <sbrk_aligned+0x3c>)
 800a8b0:	460c      	mov	r4, r1
 800a8b2:	6831      	ldr	r1, [r6, #0]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	b911      	cbnz	r1, 800a8be <sbrk_aligned+0x12>
 800a8b8:	f000 f9f2 	bl	800aca0 <_sbrk_r>
 800a8bc:	6030      	str	r0, [r6, #0]
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 f9ed 	bl	800aca0 <_sbrk_r>
 800a8c6:	1c43      	adds	r3, r0, #1
 800a8c8:	d00a      	beq.n	800a8e0 <sbrk_aligned+0x34>
 800a8ca:	1cc4      	adds	r4, r0, #3
 800a8cc:	f024 0403 	bic.w	r4, r4, #3
 800a8d0:	42a0      	cmp	r0, r4
 800a8d2:	d007      	beq.n	800a8e4 <sbrk_aligned+0x38>
 800a8d4:	1a21      	subs	r1, r4, r0
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 f9e2 	bl	800aca0 <_sbrk_r>
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d101      	bne.n	800a8e4 <sbrk_aligned+0x38>
 800a8e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	2000025c 	.word	0x2000025c

0800a8ec <_malloc_r>:
 800a8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f0:	1ccd      	adds	r5, r1, #3
 800a8f2:	f025 0503 	bic.w	r5, r5, #3
 800a8f6:	3508      	adds	r5, #8
 800a8f8:	2d0c      	cmp	r5, #12
 800a8fa:	bf38      	it	cc
 800a8fc:	250c      	movcc	r5, #12
 800a8fe:	2d00      	cmp	r5, #0
 800a900:	4607      	mov	r7, r0
 800a902:	db01      	blt.n	800a908 <_malloc_r+0x1c>
 800a904:	42a9      	cmp	r1, r5
 800a906:	d905      	bls.n	800a914 <_malloc_r+0x28>
 800a908:	230c      	movs	r3, #12
 800a90a:	603b      	str	r3, [r7, #0]
 800a90c:	2600      	movs	r6, #0
 800a90e:	4630      	mov	r0, r6
 800a910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a914:	4e2e      	ldr	r6, [pc, #184]	; (800a9d0 <_malloc_r+0xe4>)
 800a916:	f000 fa3f 	bl	800ad98 <__malloc_lock>
 800a91a:	6833      	ldr	r3, [r6, #0]
 800a91c:	461c      	mov	r4, r3
 800a91e:	bb34      	cbnz	r4, 800a96e <_malloc_r+0x82>
 800a920:	4629      	mov	r1, r5
 800a922:	4638      	mov	r0, r7
 800a924:	f7ff ffc2 	bl	800a8ac <sbrk_aligned>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	4604      	mov	r4, r0
 800a92c:	d14d      	bne.n	800a9ca <_malloc_r+0xde>
 800a92e:	6834      	ldr	r4, [r6, #0]
 800a930:	4626      	mov	r6, r4
 800a932:	2e00      	cmp	r6, #0
 800a934:	d140      	bne.n	800a9b8 <_malloc_r+0xcc>
 800a936:	6823      	ldr	r3, [r4, #0]
 800a938:	4631      	mov	r1, r6
 800a93a:	4638      	mov	r0, r7
 800a93c:	eb04 0803 	add.w	r8, r4, r3
 800a940:	f000 f9ae 	bl	800aca0 <_sbrk_r>
 800a944:	4580      	cmp	r8, r0
 800a946:	d13a      	bne.n	800a9be <_malloc_r+0xd2>
 800a948:	6821      	ldr	r1, [r4, #0]
 800a94a:	3503      	adds	r5, #3
 800a94c:	1a6d      	subs	r5, r5, r1
 800a94e:	f025 0503 	bic.w	r5, r5, #3
 800a952:	3508      	adds	r5, #8
 800a954:	2d0c      	cmp	r5, #12
 800a956:	bf38      	it	cc
 800a958:	250c      	movcc	r5, #12
 800a95a:	4629      	mov	r1, r5
 800a95c:	4638      	mov	r0, r7
 800a95e:	f7ff ffa5 	bl	800a8ac <sbrk_aligned>
 800a962:	3001      	adds	r0, #1
 800a964:	d02b      	beq.n	800a9be <_malloc_r+0xd2>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	442b      	add	r3, r5
 800a96a:	6023      	str	r3, [r4, #0]
 800a96c:	e00e      	b.n	800a98c <_malloc_r+0xa0>
 800a96e:	6822      	ldr	r2, [r4, #0]
 800a970:	1b52      	subs	r2, r2, r5
 800a972:	d41e      	bmi.n	800a9b2 <_malloc_r+0xc6>
 800a974:	2a0b      	cmp	r2, #11
 800a976:	d916      	bls.n	800a9a6 <_malloc_r+0xba>
 800a978:	1961      	adds	r1, r4, r5
 800a97a:	42a3      	cmp	r3, r4
 800a97c:	6025      	str	r5, [r4, #0]
 800a97e:	bf18      	it	ne
 800a980:	6059      	strne	r1, [r3, #4]
 800a982:	6863      	ldr	r3, [r4, #4]
 800a984:	bf08      	it	eq
 800a986:	6031      	streq	r1, [r6, #0]
 800a988:	5162      	str	r2, [r4, r5]
 800a98a:	604b      	str	r3, [r1, #4]
 800a98c:	4638      	mov	r0, r7
 800a98e:	f104 060b 	add.w	r6, r4, #11
 800a992:	f000 fa07 	bl	800ada4 <__malloc_unlock>
 800a996:	f026 0607 	bic.w	r6, r6, #7
 800a99a:	1d23      	adds	r3, r4, #4
 800a99c:	1af2      	subs	r2, r6, r3
 800a99e:	d0b6      	beq.n	800a90e <_malloc_r+0x22>
 800a9a0:	1b9b      	subs	r3, r3, r6
 800a9a2:	50a3      	str	r3, [r4, r2]
 800a9a4:	e7b3      	b.n	800a90e <_malloc_r+0x22>
 800a9a6:	6862      	ldr	r2, [r4, #4]
 800a9a8:	42a3      	cmp	r3, r4
 800a9aa:	bf0c      	ite	eq
 800a9ac:	6032      	streq	r2, [r6, #0]
 800a9ae:	605a      	strne	r2, [r3, #4]
 800a9b0:	e7ec      	b.n	800a98c <_malloc_r+0xa0>
 800a9b2:	4623      	mov	r3, r4
 800a9b4:	6864      	ldr	r4, [r4, #4]
 800a9b6:	e7b2      	b.n	800a91e <_malloc_r+0x32>
 800a9b8:	4634      	mov	r4, r6
 800a9ba:	6876      	ldr	r6, [r6, #4]
 800a9bc:	e7b9      	b.n	800a932 <_malloc_r+0x46>
 800a9be:	230c      	movs	r3, #12
 800a9c0:	603b      	str	r3, [r7, #0]
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	f000 f9ee 	bl	800ada4 <__malloc_unlock>
 800a9c8:	e7a1      	b.n	800a90e <_malloc_r+0x22>
 800a9ca:	6025      	str	r5, [r4, #0]
 800a9cc:	e7de      	b.n	800a98c <_malloc_r+0xa0>
 800a9ce:	bf00      	nop
 800a9d0:	20000258 	.word	0x20000258

0800a9d4 <__ssputs_r>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	688e      	ldr	r6, [r1, #8]
 800a9da:	429e      	cmp	r6, r3
 800a9dc:	4682      	mov	sl, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	4690      	mov	r8, r2
 800a9e2:	461f      	mov	r7, r3
 800a9e4:	d838      	bhi.n	800aa58 <__ssputs_r+0x84>
 800a9e6:	898a      	ldrh	r2, [r1, #12]
 800a9e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9ec:	d032      	beq.n	800aa54 <__ssputs_r+0x80>
 800a9ee:	6825      	ldr	r5, [r4, #0]
 800a9f0:	6909      	ldr	r1, [r1, #16]
 800a9f2:	eba5 0901 	sub.w	r9, r5, r1
 800a9f6:	6965      	ldr	r5, [r4, #20]
 800a9f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa00:	3301      	adds	r3, #1
 800aa02:	444b      	add	r3, r9
 800aa04:	106d      	asrs	r5, r5, #1
 800aa06:	429d      	cmp	r5, r3
 800aa08:	bf38      	it	cc
 800aa0a:	461d      	movcc	r5, r3
 800aa0c:	0553      	lsls	r3, r2, #21
 800aa0e:	d531      	bpl.n	800aa74 <__ssputs_r+0xa0>
 800aa10:	4629      	mov	r1, r5
 800aa12:	f7ff ff6b 	bl	800a8ec <_malloc_r>
 800aa16:	4606      	mov	r6, r0
 800aa18:	b950      	cbnz	r0, 800aa30 <__ssputs_r+0x5c>
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	f8ca 3000 	str.w	r3, [sl]
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa30:	6921      	ldr	r1, [r4, #16]
 800aa32:	464a      	mov	r2, r9
 800aa34:	f7ff fa08 	bl	8009e48 <memcpy>
 800aa38:	89a3      	ldrh	r3, [r4, #12]
 800aa3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa42:	81a3      	strh	r3, [r4, #12]
 800aa44:	6126      	str	r6, [r4, #16]
 800aa46:	6165      	str	r5, [r4, #20]
 800aa48:	444e      	add	r6, r9
 800aa4a:	eba5 0509 	sub.w	r5, r5, r9
 800aa4e:	6026      	str	r6, [r4, #0]
 800aa50:	60a5      	str	r5, [r4, #8]
 800aa52:	463e      	mov	r6, r7
 800aa54:	42be      	cmp	r6, r7
 800aa56:	d900      	bls.n	800aa5a <__ssputs_r+0x86>
 800aa58:	463e      	mov	r6, r7
 800aa5a:	6820      	ldr	r0, [r4, #0]
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4641      	mov	r1, r8
 800aa60:	f000 f980 	bl	800ad64 <memmove>
 800aa64:	68a3      	ldr	r3, [r4, #8]
 800aa66:	1b9b      	subs	r3, r3, r6
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	4433      	add	r3, r6
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	2000      	movs	r0, #0
 800aa72:	e7db      	b.n	800aa2c <__ssputs_r+0x58>
 800aa74:	462a      	mov	r2, r5
 800aa76:	f000 f99b 	bl	800adb0 <_realloc_r>
 800aa7a:	4606      	mov	r6, r0
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1e1      	bne.n	800aa44 <__ssputs_r+0x70>
 800aa80:	6921      	ldr	r1, [r4, #16]
 800aa82:	4650      	mov	r0, sl
 800aa84:	f7ff fec6 	bl	800a814 <_free_r>
 800aa88:	e7c7      	b.n	800aa1a <__ssputs_r+0x46>
	...

0800aa8c <_svfiprintf_r>:
 800aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa90:	4698      	mov	r8, r3
 800aa92:	898b      	ldrh	r3, [r1, #12]
 800aa94:	061b      	lsls	r3, r3, #24
 800aa96:	b09d      	sub	sp, #116	; 0x74
 800aa98:	4607      	mov	r7, r0
 800aa9a:	460d      	mov	r5, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	d50e      	bpl.n	800aabe <_svfiprintf_r+0x32>
 800aaa0:	690b      	ldr	r3, [r1, #16]
 800aaa2:	b963      	cbnz	r3, 800aabe <_svfiprintf_r+0x32>
 800aaa4:	2140      	movs	r1, #64	; 0x40
 800aaa6:	f7ff ff21 	bl	800a8ec <_malloc_r>
 800aaaa:	6028      	str	r0, [r5, #0]
 800aaac:	6128      	str	r0, [r5, #16]
 800aaae:	b920      	cbnz	r0, 800aaba <_svfiprintf_r+0x2e>
 800aab0:	230c      	movs	r3, #12
 800aab2:	603b      	str	r3, [r7, #0]
 800aab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aab8:	e0d1      	b.n	800ac5e <_svfiprintf_r+0x1d2>
 800aaba:	2340      	movs	r3, #64	; 0x40
 800aabc:	616b      	str	r3, [r5, #20]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9309      	str	r3, [sp, #36]	; 0x24
 800aac2:	2320      	movs	r3, #32
 800aac4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aac8:	f8cd 800c 	str.w	r8, [sp, #12]
 800aacc:	2330      	movs	r3, #48	; 0x30
 800aace:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ac78 <_svfiprintf_r+0x1ec>
 800aad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aad6:	f04f 0901 	mov.w	r9, #1
 800aada:	4623      	mov	r3, r4
 800aadc:	469a      	mov	sl, r3
 800aade:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae2:	b10a      	cbz	r2, 800aae8 <_svfiprintf_r+0x5c>
 800aae4:	2a25      	cmp	r2, #37	; 0x25
 800aae6:	d1f9      	bne.n	800aadc <_svfiprintf_r+0x50>
 800aae8:	ebba 0b04 	subs.w	fp, sl, r4
 800aaec:	d00b      	beq.n	800ab06 <_svfiprintf_r+0x7a>
 800aaee:	465b      	mov	r3, fp
 800aaf0:	4622      	mov	r2, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f7ff ff6d 	bl	800a9d4 <__ssputs_r>
 800aafa:	3001      	adds	r0, #1
 800aafc:	f000 80aa 	beq.w	800ac54 <_svfiprintf_r+0x1c8>
 800ab00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab02:	445a      	add	r2, fp
 800ab04:	9209      	str	r2, [sp, #36]	; 0x24
 800ab06:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	f000 80a2 	beq.w	800ac54 <_svfiprintf_r+0x1c8>
 800ab10:	2300      	movs	r3, #0
 800ab12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1a:	f10a 0a01 	add.w	sl, sl, #1
 800ab1e:	9304      	str	r3, [sp, #16]
 800ab20:	9307      	str	r3, [sp, #28]
 800ab22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab26:	931a      	str	r3, [sp, #104]	; 0x68
 800ab28:	4654      	mov	r4, sl
 800ab2a:	2205      	movs	r2, #5
 800ab2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab30:	4851      	ldr	r0, [pc, #324]	; (800ac78 <_svfiprintf_r+0x1ec>)
 800ab32:	f7f5 fb5d 	bl	80001f0 <memchr>
 800ab36:	9a04      	ldr	r2, [sp, #16]
 800ab38:	b9d8      	cbnz	r0, 800ab72 <_svfiprintf_r+0xe6>
 800ab3a:	06d0      	lsls	r0, r2, #27
 800ab3c:	bf44      	itt	mi
 800ab3e:	2320      	movmi	r3, #32
 800ab40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab44:	0711      	lsls	r1, r2, #28
 800ab46:	bf44      	itt	mi
 800ab48:	232b      	movmi	r3, #43	; 0x2b
 800ab4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab52:	2b2a      	cmp	r3, #42	; 0x2a
 800ab54:	d015      	beq.n	800ab82 <_svfiprintf_r+0xf6>
 800ab56:	9a07      	ldr	r2, [sp, #28]
 800ab58:	4654      	mov	r4, sl
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f04f 0c0a 	mov.w	ip, #10
 800ab60:	4621      	mov	r1, r4
 800ab62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab66:	3b30      	subs	r3, #48	; 0x30
 800ab68:	2b09      	cmp	r3, #9
 800ab6a:	d94e      	bls.n	800ac0a <_svfiprintf_r+0x17e>
 800ab6c:	b1b0      	cbz	r0, 800ab9c <_svfiprintf_r+0x110>
 800ab6e:	9207      	str	r2, [sp, #28]
 800ab70:	e014      	b.n	800ab9c <_svfiprintf_r+0x110>
 800ab72:	eba0 0308 	sub.w	r3, r0, r8
 800ab76:	fa09 f303 	lsl.w	r3, r9, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	46a2      	mov	sl, r4
 800ab80:	e7d2      	b.n	800ab28 <_svfiprintf_r+0x9c>
 800ab82:	9b03      	ldr	r3, [sp, #12]
 800ab84:	1d19      	adds	r1, r3, #4
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	9103      	str	r1, [sp, #12]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bfbb      	ittet	lt
 800ab8e:	425b      	neglt	r3, r3
 800ab90:	f042 0202 	orrlt.w	r2, r2, #2
 800ab94:	9307      	strge	r3, [sp, #28]
 800ab96:	9307      	strlt	r3, [sp, #28]
 800ab98:	bfb8      	it	lt
 800ab9a:	9204      	strlt	r2, [sp, #16]
 800ab9c:	7823      	ldrb	r3, [r4, #0]
 800ab9e:	2b2e      	cmp	r3, #46	; 0x2e
 800aba0:	d10c      	bne.n	800abbc <_svfiprintf_r+0x130>
 800aba2:	7863      	ldrb	r3, [r4, #1]
 800aba4:	2b2a      	cmp	r3, #42	; 0x2a
 800aba6:	d135      	bne.n	800ac14 <_svfiprintf_r+0x188>
 800aba8:	9b03      	ldr	r3, [sp, #12]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	9203      	str	r2, [sp, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	bfb8      	it	lt
 800abb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abb8:	3402      	adds	r4, #2
 800abba:	9305      	str	r3, [sp, #20]
 800abbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac88 <_svfiprintf_r+0x1fc>
 800abc0:	7821      	ldrb	r1, [r4, #0]
 800abc2:	2203      	movs	r2, #3
 800abc4:	4650      	mov	r0, sl
 800abc6:	f7f5 fb13 	bl	80001f0 <memchr>
 800abca:	b140      	cbz	r0, 800abde <_svfiprintf_r+0x152>
 800abcc:	2340      	movs	r3, #64	; 0x40
 800abce:	eba0 000a 	sub.w	r0, r0, sl
 800abd2:	fa03 f000 	lsl.w	r0, r3, r0
 800abd6:	9b04      	ldr	r3, [sp, #16]
 800abd8:	4303      	orrs	r3, r0
 800abda:	3401      	adds	r4, #1
 800abdc:	9304      	str	r3, [sp, #16]
 800abde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe2:	4826      	ldr	r0, [pc, #152]	; (800ac7c <_svfiprintf_r+0x1f0>)
 800abe4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abe8:	2206      	movs	r2, #6
 800abea:	f7f5 fb01 	bl	80001f0 <memchr>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d038      	beq.n	800ac64 <_svfiprintf_r+0x1d8>
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <_svfiprintf_r+0x1f4>)
 800abf4:	bb1b      	cbnz	r3, 800ac3e <_svfiprintf_r+0x1b2>
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	3307      	adds	r3, #7
 800abfa:	f023 0307 	bic.w	r3, r3, #7
 800abfe:	3308      	adds	r3, #8
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac04:	4433      	add	r3, r6
 800ac06:	9309      	str	r3, [sp, #36]	; 0x24
 800ac08:	e767      	b.n	800aada <_svfiprintf_r+0x4e>
 800ac0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac0e:	460c      	mov	r4, r1
 800ac10:	2001      	movs	r0, #1
 800ac12:	e7a5      	b.n	800ab60 <_svfiprintf_r+0xd4>
 800ac14:	2300      	movs	r3, #0
 800ac16:	3401      	adds	r4, #1
 800ac18:	9305      	str	r3, [sp, #20]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f04f 0c0a 	mov.w	ip, #10
 800ac20:	4620      	mov	r0, r4
 800ac22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac26:	3a30      	subs	r2, #48	; 0x30
 800ac28:	2a09      	cmp	r2, #9
 800ac2a:	d903      	bls.n	800ac34 <_svfiprintf_r+0x1a8>
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0c5      	beq.n	800abbc <_svfiprintf_r+0x130>
 800ac30:	9105      	str	r1, [sp, #20]
 800ac32:	e7c3      	b.n	800abbc <_svfiprintf_r+0x130>
 800ac34:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac38:	4604      	mov	r4, r0
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e7f0      	b.n	800ac20 <_svfiprintf_r+0x194>
 800ac3e:	ab03      	add	r3, sp, #12
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	462a      	mov	r2, r5
 800ac44:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <_svfiprintf_r+0x1f8>)
 800ac46:	a904      	add	r1, sp, #16
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f7fc fa49 	bl	80070e0 <_printf_float>
 800ac4e:	1c42      	adds	r2, r0, #1
 800ac50:	4606      	mov	r6, r0
 800ac52:	d1d6      	bne.n	800ac02 <_svfiprintf_r+0x176>
 800ac54:	89ab      	ldrh	r3, [r5, #12]
 800ac56:	065b      	lsls	r3, r3, #25
 800ac58:	f53f af2c 	bmi.w	800aab4 <_svfiprintf_r+0x28>
 800ac5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac5e:	b01d      	add	sp, #116	; 0x74
 800ac60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac64:	ab03      	add	r3, sp, #12
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	462a      	mov	r2, r5
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <_svfiprintf_r+0x1f8>)
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	4638      	mov	r0, r7
 800ac70:	f7fc fcda 	bl	8007628 <_printf_i>
 800ac74:	e7eb      	b.n	800ac4e <_svfiprintf_r+0x1c2>
 800ac76:	bf00      	nop
 800ac78:	0800d69c 	.word	0x0800d69c
 800ac7c:	0800d6a6 	.word	0x0800d6a6
 800ac80:	080070e1 	.word	0x080070e1
 800ac84:	0800a9d5 	.word	0x0800a9d5
 800ac88:	0800d6a2 	.word	0x0800d6a2
 800ac8c:	00000000 	.word	0x00000000

0800ac90 <nan>:
 800ac90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ac98 <nan+0x8>
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	00000000 	.word	0x00000000
 800ac9c:	7ff80000 	.word	0x7ff80000

0800aca0 <_sbrk_r>:
 800aca0:	b538      	push	{r3, r4, r5, lr}
 800aca2:	4d06      	ldr	r5, [pc, #24]	; (800acbc <_sbrk_r+0x1c>)
 800aca4:	2300      	movs	r3, #0
 800aca6:	4604      	mov	r4, r0
 800aca8:	4608      	mov	r0, r1
 800acaa:	602b      	str	r3, [r5, #0]
 800acac:	f7f9 fcda 	bl	8004664 <_sbrk>
 800acb0:	1c43      	adds	r3, r0, #1
 800acb2:	d102      	bne.n	800acba <_sbrk_r+0x1a>
 800acb4:	682b      	ldr	r3, [r5, #0]
 800acb6:	b103      	cbz	r3, 800acba <_sbrk_r+0x1a>
 800acb8:	6023      	str	r3, [r4, #0]
 800acba:	bd38      	pop	{r3, r4, r5, pc}
 800acbc:	20000260 	.word	0x20000260

0800acc0 <strncmp>:
 800acc0:	b510      	push	{r4, lr}
 800acc2:	b17a      	cbz	r2, 800ace4 <strncmp+0x24>
 800acc4:	4603      	mov	r3, r0
 800acc6:	3901      	subs	r1, #1
 800acc8:	1884      	adds	r4, r0, r2
 800acca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800acce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800acd2:	4290      	cmp	r0, r2
 800acd4:	d101      	bne.n	800acda <strncmp+0x1a>
 800acd6:	42a3      	cmp	r3, r4
 800acd8:	d101      	bne.n	800acde <strncmp+0x1e>
 800acda:	1a80      	subs	r0, r0, r2
 800acdc:	bd10      	pop	{r4, pc}
 800acde:	2800      	cmp	r0, #0
 800ace0:	d1f3      	bne.n	800acca <strncmp+0xa>
 800ace2:	e7fa      	b.n	800acda <strncmp+0x1a>
 800ace4:	4610      	mov	r0, r2
 800ace6:	e7f9      	b.n	800acdc <strncmp+0x1c>

0800ace8 <__ascii_wctomb>:
 800ace8:	b149      	cbz	r1, 800acfe <__ascii_wctomb+0x16>
 800acea:	2aff      	cmp	r2, #255	; 0xff
 800acec:	bf85      	ittet	hi
 800acee:	238a      	movhi	r3, #138	; 0x8a
 800acf0:	6003      	strhi	r3, [r0, #0]
 800acf2:	700a      	strbls	r2, [r1, #0]
 800acf4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800acf8:	bf98      	it	ls
 800acfa:	2001      	movls	r0, #1
 800acfc:	4770      	bx	lr
 800acfe:	4608      	mov	r0, r1
 800ad00:	4770      	bx	lr
	...

0800ad04 <__assert_func>:
 800ad04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad06:	4614      	mov	r4, r2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4b09      	ldr	r3, [pc, #36]	; (800ad30 <__assert_func+0x2c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4605      	mov	r5, r0
 800ad10:	68d8      	ldr	r0, [r3, #12]
 800ad12:	b14c      	cbz	r4, 800ad28 <__assert_func+0x24>
 800ad14:	4b07      	ldr	r3, [pc, #28]	; (800ad34 <__assert_func+0x30>)
 800ad16:	9100      	str	r1, [sp, #0]
 800ad18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad1c:	4906      	ldr	r1, [pc, #24]	; (800ad38 <__assert_func+0x34>)
 800ad1e:	462b      	mov	r3, r5
 800ad20:	f000 f80e 	bl	800ad40 <fiprintf>
 800ad24:	f000 fa8c 	bl	800b240 <abort>
 800ad28:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <__assert_func+0x38>)
 800ad2a:	461c      	mov	r4, r3
 800ad2c:	e7f3      	b.n	800ad16 <__assert_func+0x12>
 800ad2e:	bf00      	nop
 800ad30:	20000020 	.word	0x20000020
 800ad34:	0800d6ad 	.word	0x0800d6ad
 800ad38:	0800d6ba 	.word	0x0800d6ba
 800ad3c:	0800d6e8 	.word	0x0800d6e8

0800ad40 <fiprintf>:
 800ad40:	b40e      	push	{r1, r2, r3}
 800ad42:	b503      	push	{r0, r1, lr}
 800ad44:	4601      	mov	r1, r0
 800ad46:	ab03      	add	r3, sp, #12
 800ad48:	4805      	ldr	r0, [pc, #20]	; (800ad60 <fiprintf+0x20>)
 800ad4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad4e:	6800      	ldr	r0, [r0, #0]
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	f000 f885 	bl	800ae60 <_vfiprintf_r>
 800ad56:	b002      	add	sp, #8
 800ad58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad5c:	b003      	add	sp, #12
 800ad5e:	4770      	bx	lr
 800ad60:	20000020 	.word	0x20000020

0800ad64 <memmove>:
 800ad64:	4288      	cmp	r0, r1
 800ad66:	b510      	push	{r4, lr}
 800ad68:	eb01 0402 	add.w	r4, r1, r2
 800ad6c:	d902      	bls.n	800ad74 <memmove+0x10>
 800ad6e:	4284      	cmp	r4, r0
 800ad70:	4623      	mov	r3, r4
 800ad72:	d807      	bhi.n	800ad84 <memmove+0x20>
 800ad74:	1e43      	subs	r3, r0, #1
 800ad76:	42a1      	cmp	r1, r4
 800ad78:	d008      	beq.n	800ad8c <memmove+0x28>
 800ad7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad82:	e7f8      	b.n	800ad76 <memmove+0x12>
 800ad84:	4402      	add	r2, r0
 800ad86:	4601      	mov	r1, r0
 800ad88:	428a      	cmp	r2, r1
 800ad8a:	d100      	bne.n	800ad8e <memmove+0x2a>
 800ad8c:	bd10      	pop	{r4, pc}
 800ad8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad96:	e7f7      	b.n	800ad88 <memmove+0x24>

0800ad98 <__malloc_lock>:
 800ad98:	4801      	ldr	r0, [pc, #4]	; (800ada0 <__malloc_lock+0x8>)
 800ad9a:	f000 bc11 	b.w	800b5c0 <__retarget_lock_acquire_recursive>
 800ad9e:	bf00      	nop
 800ada0:	20000264 	.word	0x20000264

0800ada4 <__malloc_unlock>:
 800ada4:	4801      	ldr	r0, [pc, #4]	; (800adac <__malloc_unlock+0x8>)
 800ada6:	f000 bc0c 	b.w	800b5c2 <__retarget_lock_release_recursive>
 800adaa:	bf00      	nop
 800adac:	20000264 	.word	0x20000264

0800adb0 <_realloc_r>:
 800adb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adb4:	4680      	mov	r8, r0
 800adb6:	4614      	mov	r4, r2
 800adb8:	460e      	mov	r6, r1
 800adba:	b921      	cbnz	r1, 800adc6 <_realloc_r+0x16>
 800adbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adc0:	4611      	mov	r1, r2
 800adc2:	f7ff bd93 	b.w	800a8ec <_malloc_r>
 800adc6:	b92a      	cbnz	r2, 800add4 <_realloc_r+0x24>
 800adc8:	f7ff fd24 	bl	800a814 <_free_r>
 800adcc:	4625      	mov	r5, r4
 800adce:	4628      	mov	r0, r5
 800add0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add4:	f000 fc5c 	bl	800b690 <_malloc_usable_size_r>
 800add8:	4284      	cmp	r4, r0
 800adda:	4607      	mov	r7, r0
 800addc:	d802      	bhi.n	800ade4 <_realloc_r+0x34>
 800adde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ade2:	d812      	bhi.n	800ae0a <_realloc_r+0x5a>
 800ade4:	4621      	mov	r1, r4
 800ade6:	4640      	mov	r0, r8
 800ade8:	f7ff fd80 	bl	800a8ec <_malloc_r>
 800adec:	4605      	mov	r5, r0
 800adee:	2800      	cmp	r0, #0
 800adf0:	d0ed      	beq.n	800adce <_realloc_r+0x1e>
 800adf2:	42bc      	cmp	r4, r7
 800adf4:	4622      	mov	r2, r4
 800adf6:	4631      	mov	r1, r6
 800adf8:	bf28      	it	cs
 800adfa:	463a      	movcs	r2, r7
 800adfc:	f7ff f824 	bl	8009e48 <memcpy>
 800ae00:	4631      	mov	r1, r6
 800ae02:	4640      	mov	r0, r8
 800ae04:	f7ff fd06 	bl	800a814 <_free_r>
 800ae08:	e7e1      	b.n	800adce <_realloc_r+0x1e>
 800ae0a:	4635      	mov	r5, r6
 800ae0c:	e7df      	b.n	800adce <_realloc_r+0x1e>

0800ae0e <__sfputc_r>:
 800ae0e:	6893      	ldr	r3, [r2, #8]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	b410      	push	{r4}
 800ae16:	6093      	str	r3, [r2, #8]
 800ae18:	da08      	bge.n	800ae2c <__sfputc_r+0x1e>
 800ae1a:	6994      	ldr	r4, [r2, #24]
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	db01      	blt.n	800ae24 <__sfputc_r+0x16>
 800ae20:	290a      	cmp	r1, #10
 800ae22:	d103      	bne.n	800ae2c <__sfputc_r+0x1e>
 800ae24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae28:	f000 b94a 	b.w	800b0c0 <__swbuf_r>
 800ae2c:	6813      	ldr	r3, [r2, #0]
 800ae2e:	1c58      	adds	r0, r3, #1
 800ae30:	6010      	str	r0, [r2, #0]
 800ae32:	7019      	strb	r1, [r3, #0]
 800ae34:	4608      	mov	r0, r1
 800ae36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <__sfputs_r>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	4614      	mov	r4, r2
 800ae44:	18d5      	adds	r5, r2, r3
 800ae46:	42ac      	cmp	r4, r5
 800ae48:	d101      	bne.n	800ae4e <__sfputs_r+0x12>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	e007      	b.n	800ae5e <__sfputs_r+0x22>
 800ae4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae52:	463a      	mov	r2, r7
 800ae54:	4630      	mov	r0, r6
 800ae56:	f7ff ffda 	bl	800ae0e <__sfputc_r>
 800ae5a:	1c43      	adds	r3, r0, #1
 800ae5c:	d1f3      	bne.n	800ae46 <__sfputs_r+0xa>
 800ae5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae60 <_vfiprintf_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	460d      	mov	r5, r1
 800ae66:	b09d      	sub	sp, #116	; 0x74
 800ae68:	4614      	mov	r4, r2
 800ae6a:	4698      	mov	r8, r3
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	b118      	cbz	r0, 800ae78 <_vfiprintf_r+0x18>
 800ae70:	6983      	ldr	r3, [r0, #24]
 800ae72:	b90b      	cbnz	r3, 800ae78 <_vfiprintf_r+0x18>
 800ae74:	f000 fb06 	bl	800b484 <__sinit>
 800ae78:	4b89      	ldr	r3, [pc, #548]	; (800b0a0 <_vfiprintf_r+0x240>)
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	d11b      	bne.n	800aeb6 <_vfiprintf_r+0x56>
 800ae7e:	6875      	ldr	r5, [r6, #4]
 800ae80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae82:	07d9      	lsls	r1, r3, #31
 800ae84:	d405      	bmi.n	800ae92 <_vfiprintf_r+0x32>
 800ae86:	89ab      	ldrh	r3, [r5, #12]
 800ae88:	059a      	lsls	r2, r3, #22
 800ae8a:	d402      	bmi.n	800ae92 <_vfiprintf_r+0x32>
 800ae8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae8e:	f000 fb97 	bl	800b5c0 <__retarget_lock_acquire_recursive>
 800ae92:	89ab      	ldrh	r3, [r5, #12]
 800ae94:	071b      	lsls	r3, r3, #28
 800ae96:	d501      	bpl.n	800ae9c <_vfiprintf_r+0x3c>
 800ae98:	692b      	ldr	r3, [r5, #16]
 800ae9a:	b9eb      	cbnz	r3, 800aed8 <_vfiprintf_r+0x78>
 800ae9c:	4629      	mov	r1, r5
 800ae9e:	4630      	mov	r0, r6
 800aea0:	f000 f960 	bl	800b164 <__swsetup_r>
 800aea4:	b1c0      	cbz	r0, 800aed8 <_vfiprintf_r+0x78>
 800aea6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea8:	07dc      	lsls	r4, r3, #31
 800aeaa:	d50e      	bpl.n	800aeca <_vfiprintf_r+0x6a>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	b01d      	add	sp, #116	; 0x74
 800aeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb6:	4b7b      	ldr	r3, [pc, #492]	; (800b0a4 <_vfiprintf_r+0x244>)
 800aeb8:	429d      	cmp	r5, r3
 800aeba:	d101      	bne.n	800aec0 <_vfiprintf_r+0x60>
 800aebc:	68b5      	ldr	r5, [r6, #8]
 800aebe:	e7df      	b.n	800ae80 <_vfiprintf_r+0x20>
 800aec0:	4b79      	ldr	r3, [pc, #484]	; (800b0a8 <_vfiprintf_r+0x248>)
 800aec2:	429d      	cmp	r5, r3
 800aec4:	bf08      	it	eq
 800aec6:	68f5      	ldreq	r5, [r6, #12]
 800aec8:	e7da      	b.n	800ae80 <_vfiprintf_r+0x20>
 800aeca:	89ab      	ldrh	r3, [r5, #12]
 800aecc:	0598      	lsls	r0, r3, #22
 800aece:	d4ed      	bmi.n	800aeac <_vfiprintf_r+0x4c>
 800aed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aed2:	f000 fb76 	bl	800b5c2 <__retarget_lock_release_recursive>
 800aed6:	e7e9      	b.n	800aeac <_vfiprintf_r+0x4c>
 800aed8:	2300      	movs	r3, #0
 800aeda:	9309      	str	r3, [sp, #36]	; 0x24
 800aedc:	2320      	movs	r3, #32
 800aede:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aee2:	f8cd 800c 	str.w	r8, [sp, #12]
 800aee6:	2330      	movs	r3, #48	; 0x30
 800aee8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0ac <_vfiprintf_r+0x24c>
 800aeec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aef0:	f04f 0901 	mov.w	r9, #1
 800aef4:	4623      	mov	r3, r4
 800aef6:	469a      	mov	sl, r3
 800aef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aefc:	b10a      	cbz	r2, 800af02 <_vfiprintf_r+0xa2>
 800aefe:	2a25      	cmp	r2, #37	; 0x25
 800af00:	d1f9      	bne.n	800aef6 <_vfiprintf_r+0x96>
 800af02:	ebba 0b04 	subs.w	fp, sl, r4
 800af06:	d00b      	beq.n	800af20 <_vfiprintf_r+0xc0>
 800af08:	465b      	mov	r3, fp
 800af0a:	4622      	mov	r2, r4
 800af0c:	4629      	mov	r1, r5
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff94 	bl	800ae3c <__sfputs_r>
 800af14:	3001      	adds	r0, #1
 800af16:	f000 80aa 	beq.w	800b06e <_vfiprintf_r+0x20e>
 800af1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af1c:	445a      	add	r2, fp
 800af1e:	9209      	str	r2, [sp, #36]	; 0x24
 800af20:	f89a 3000 	ldrb.w	r3, [sl]
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 80a2 	beq.w	800b06e <_vfiprintf_r+0x20e>
 800af2a:	2300      	movs	r3, #0
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af34:	f10a 0a01 	add.w	sl, sl, #1
 800af38:	9304      	str	r3, [sp, #16]
 800af3a:	9307      	str	r3, [sp, #28]
 800af3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af40:	931a      	str	r3, [sp, #104]	; 0x68
 800af42:	4654      	mov	r4, sl
 800af44:	2205      	movs	r2, #5
 800af46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af4a:	4858      	ldr	r0, [pc, #352]	; (800b0ac <_vfiprintf_r+0x24c>)
 800af4c:	f7f5 f950 	bl	80001f0 <memchr>
 800af50:	9a04      	ldr	r2, [sp, #16]
 800af52:	b9d8      	cbnz	r0, 800af8c <_vfiprintf_r+0x12c>
 800af54:	06d1      	lsls	r1, r2, #27
 800af56:	bf44      	itt	mi
 800af58:	2320      	movmi	r3, #32
 800af5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af5e:	0713      	lsls	r3, r2, #28
 800af60:	bf44      	itt	mi
 800af62:	232b      	movmi	r3, #43	; 0x2b
 800af64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af68:	f89a 3000 	ldrb.w	r3, [sl]
 800af6c:	2b2a      	cmp	r3, #42	; 0x2a
 800af6e:	d015      	beq.n	800af9c <_vfiprintf_r+0x13c>
 800af70:	9a07      	ldr	r2, [sp, #28]
 800af72:	4654      	mov	r4, sl
 800af74:	2000      	movs	r0, #0
 800af76:	f04f 0c0a 	mov.w	ip, #10
 800af7a:	4621      	mov	r1, r4
 800af7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af80:	3b30      	subs	r3, #48	; 0x30
 800af82:	2b09      	cmp	r3, #9
 800af84:	d94e      	bls.n	800b024 <_vfiprintf_r+0x1c4>
 800af86:	b1b0      	cbz	r0, 800afb6 <_vfiprintf_r+0x156>
 800af88:	9207      	str	r2, [sp, #28]
 800af8a:	e014      	b.n	800afb6 <_vfiprintf_r+0x156>
 800af8c:	eba0 0308 	sub.w	r3, r0, r8
 800af90:	fa09 f303 	lsl.w	r3, r9, r3
 800af94:	4313      	orrs	r3, r2
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	46a2      	mov	sl, r4
 800af9a:	e7d2      	b.n	800af42 <_vfiprintf_r+0xe2>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	1d19      	adds	r1, r3, #4
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	9103      	str	r1, [sp, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfbb      	ittet	lt
 800afa8:	425b      	neglt	r3, r3
 800afaa:	f042 0202 	orrlt.w	r2, r2, #2
 800afae:	9307      	strge	r3, [sp, #28]
 800afb0:	9307      	strlt	r3, [sp, #28]
 800afb2:	bfb8      	it	lt
 800afb4:	9204      	strlt	r2, [sp, #16]
 800afb6:	7823      	ldrb	r3, [r4, #0]
 800afb8:	2b2e      	cmp	r3, #46	; 0x2e
 800afba:	d10c      	bne.n	800afd6 <_vfiprintf_r+0x176>
 800afbc:	7863      	ldrb	r3, [r4, #1]
 800afbe:	2b2a      	cmp	r3, #42	; 0x2a
 800afc0:	d135      	bne.n	800b02e <_vfiprintf_r+0x1ce>
 800afc2:	9b03      	ldr	r3, [sp, #12]
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	9203      	str	r2, [sp, #12]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	bfb8      	it	lt
 800afce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afd2:	3402      	adds	r4, #2
 800afd4:	9305      	str	r3, [sp, #20]
 800afd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0bc <_vfiprintf_r+0x25c>
 800afda:	7821      	ldrb	r1, [r4, #0]
 800afdc:	2203      	movs	r2, #3
 800afde:	4650      	mov	r0, sl
 800afe0:	f7f5 f906 	bl	80001f0 <memchr>
 800afe4:	b140      	cbz	r0, 800aff8 <_vfiprintf_r+0x198>
 800afe6:	2340      	movs	r3, #64	; 0x40
 800afe8:	eba0 000a 	sub.w	r0, r0, sl
 800afec:	fa03 f000 	lsl.w	r0, r3, r0
 800aff0:	9b04      	ldr	r3, [sp, #16]
 800aff2:	4303      	orrs	r3, r0
 800aff4:	3401      	adds	r4, #1
 800aff6:	9304      	str	r3, [sp, #16]
 800aff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800affc:	482c      	ldr	r0, [pc, #176]	; (800b0b0 <_vfiprintf_r+0x250>)
 800affe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b002:	2206      	movs	r2, #6
 800b004:	f7f5 f8f4 	bl	80001f0 <memchr>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d03f      	beq.n	800b08c <_vfiprintf_r+0x22c>
 800b00c:	4b29      	ldr	r3, [pc, #164]	; (800b0b4 <_vfiprintf_r+0x254>)
 800b00e:	bb1b      	cbnz	r3, 800b058 <_vfiprintf_r+0x1f8>
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	3307      	adds	r3, #7
 800b014:	f023 0307 	bic.w	r3, r3, #7
 800b018:	3308      	adds	r3, #8
 800b01a:	9303      	str	r3, [sp, #12]
 800b01c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b01e:	443b      	add	r3, r7
 800b020:	9309      	str	r3, [sp, #36]	; 0x24
 800b022:	e767      	b.n	800aef4 <_vfiprintf_r+0x94>
 800b024:	fb0c 3202 	mla	r2, ip, r2, r3
 800b028:	460c      	mov	r4, r1
 800b02a:	2001      	movs	r0, #1
 800b02c:	e7a5      	b.n	800af7a <_vfiprintf_r+0x11a>
 800b02e:	2300      	movs	r3, #0
 800b030:	3401      	adds	r4, #1
 800b032:	9305      	str	r3, [sp, #20]
 800b034:	4619      	mov	r1, r3
 800b036:	f04f 0c0a 	mov.w	ip, #10
 800b03a:	4620      	mov	r0, r4
 800b03c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b040:	3a30      	subs	r2, #48	; 0x30
 800b042:	2a09      	cmp	r2, #9
 800b044:	d903      	bls.n	800b04e <_vfiprintf_r+0x1ee>
 800b046:	2b00      	cmp	r3, #0
 800b048:	d0c5      	beq.n	800afd6 <_vfiprintf_r+0x176>
 800b04a:	9105      	str	r1, [sp, #20]
 800b04c:	e7c3      	b.n	800afd6 <_vfiprintf_r+0x176>
 800b04e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b052:	4604      	mov	r4, r0
 800b054:	2301      	movs	r3, #1
 800b056:	e7f0      	b.n	800b03a <_vfiprintf_r+0x1da>
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	462a      	mov	r2, r5
 800b05e:	4b16      	ldr	r3, [pc, #88]	; (800b0b8 <_vfiprintf_r+0x258>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4630      	mov	r0, r6
 800b064:	f7fc f83c 	bl	80070e0 <_printf_float>
 800b068:	4607      	mov	r7, r0
 800b06a:	1c78      	adds	r0, r7, #1
 800b06c:	d1d6      	bne.n	800b01c <_vfiprintf_r+0x1bc>
 800b06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b070:	07d9      	lsls	r1, r3, #31
 800b072:	d405      	bmi.n	800b080 <_vfiprintf_r+0x220>
 800b074:	89ab      	ldrh	r3, [r5, #12]
 800b076:	059a      	lsls	r2, r3, #22
 800b078:	d402      	bmi.n	800b080 <_vfiprintf_r+0x220>
 800b07a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b07c:	f000 faa1 	bl	800b5c2 <__retarget_lock_release_recursive>
 800b080:	89ab      	ldrh	r3, [r5, #12]
 800b082:	065b      	lsls	r3, r3, #25
 800b084:	f53f af12 	bmi.w	800aeac <_vfiprintf_r+0x4c>
 800b088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b08a:	e711      	b.n	800aeb0 <_vfiprintf_r+0x50>
 800b08c:	ab03      	add	r3, sp, #12
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	462a      	mov	r2, r5
 800b092:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <_vfiprintf_r+0x258>)
 800b094:	a904      	add	r1, sp, #16
 800b096:	4630      	mov	r0, r6
 800b098:	f7fc fac6 	bl	8007628 <_printf_i>
 800b09c:	e7e4      	b.n	800b068 <_vfiprintf_r+0x208>
 800b09e:	bf00      	nop
 800b0a0:	0800d70c 	.word	0x0800d70c
 800b0a4:	0800d72c 	.word	0x0800d72c
 800b0a8:	0800d6ec 	.word	0x0800d6ec
 800b0ac:	0800d69c 	.word	0x0800d69c
 800b0b0:	0800d6a6 	.word	0x0800d6a6
 800b0b4:	080070e1 	.word	0x080070e1
 800b0b8:	0800ae3d 	.word	0x0800ae3d
 800b0bc:	0800d6a2 	.word	0x0800d6a2

0800b0c0 <__swbuf_r>:
 800b0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c2:	460e      	mov	r6, r1
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	b118      	cbz	r0, 800b0d2 <__swbuf_r+0x12>
 800b0ca:	6983      	ldr	r3, [r0, #24]
 800b0cc:	b90b      	cbnz	r3, 800b0d2 <__swbuf_r+0x12>
 800b0ce:	f000 f9d9 	bl	800b484 <__sinit>
 800b0d2:	4b21      	ldr	r3, [pc, #132]	; (800b158 <__swbuf_r+0x98>)
 800b0d4:	429c      	cmp	r4, r3
 800b0d6:	d12b      	bne.n	800b130 <__swbuf_r+0x70>
 800b0d8:	686c      	ldr	r4, [r5, #4]
 800b0da:	69a3      	ldr	r3, [r4, #24]
 800b0dc:	60a3      	str	r3, [r4, #8]
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	071a      	lsls	r2, r3, #28
 800b0e2:	d52f      	bpl.n	800b144 <__swbuf_r+0x84>
 800b0e4:	6923      	ldr	r3, [r4, #16]
 800b0e6:	b36b      	cbz	r3, 800b144 <__swbuf_r+0x84>
 800b0e8:	6923      	ldr	r3, [r4, #16]
 800b0ea:	6820      	ldr	r0, [r4, #0]
 800b0ec:	1ac0      	subs	r0, r0, r3
 800b0ee:	6963      	ldr	r3, [r4, #20]
 800b0f0:	b2f6      	uxtb	r6, r6
 800b0f2:	4283      	cmp	r3, r0
 800b0f4:	4637      	mov	r7, r6
 800b0f6:	dc04      	bgt.n	800b102 <__swbuf_r+0x42>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 f92e 	bl	800b35c <_fflush_r>
 800b100:	bb30      	cbnz	r0, 800b150 <__swbuf_r+0x90>
 800b102:	68a3      	ldr	r3, [r4, #8]
 800b104:	3b01      	subs	r3, #1
 800b106:	60a3      	str	r3, [r4, #8]
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	6022      	str	r2, [r4, #0]
 800b10e:	701e      	strb	r6, [r3, #0]
 800b110:	6963      	ldr	r3, [r4, #20]
 800b112:	3001      	adds	r0, #1
 800b114:	4283      	cmp	r3, r0
 800b116:	d004      	beq.n	800b122 <__swbuf_r+0x62>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	07db      	lsls	r3, r3, #31
 800b11c:	d506      	bpl.n	800b12c <__swbuf_r+0x6c>
 800b11e:	2e0a      	cmp	r6, #10
 800b120:	d104      	bne.n	800b12c <__swbuf_r+0x6c>
 800b122:	4621      	mov	r1, r4
 800b124:	4628      	mov	r0, r5
 800b126:	f000 f919 	bl	800b35c <_fflush_r>
 800b12a:	b988      	cbnz	r0, 800b150 <__swbuf_r+0x90>
 800b12c:	4638      	mov	r0, r7
 800b12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <__swbuf_r+0x9c>)
 800b132:	429c      	cmp	r4, r3
 800b134:	d101      	bne.n	800b13a <__swbuf_r+0x7a>
 800b136:	68ac      	ldr	r4, [r5, #8]
 800b138:	e7cf      	b.n	800b0da <__swbuf_r+0x1a>
 800b13a:	4b09      	ldr	r3, [pc, #36]	; (800b160 <__swbuf_r+0xa0>)
 800b13c:	429c      	cmp	r4, r3
 800b13e:	bf08      	it	eq
 800b140:	68ec      	ldreq	r4, [r5, #12]
 800b142:	e7ca      	b.n	800b0da <__swbuf_r+0x1a>
 800b144:	4621      	mov	r1, r4
 800b146:	4628      	mov	r0, r5
 800b148:	f000 f80c 	bl	800b164 <__swsetup_r>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d0cb      	beq.n	800b0e8 <__swbuf_r+0x28>
 800b150:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b154:	e7ea      	b.n	800b12c <__swbuf_r+0x6c>
 800b156:	bf00      	nop
 800b158:	0800d70c 	.word	0x0800d70c
 800b15c:	0800d72c 	.word	0x0800d72c
 800b160:	0800d6ec 	.word	0x0800d6ec

0800b164 <__swsetup_r>:
 800b164:	4b32      	ldr	r3, [pc, #200]	; (800b230 <__swsetup_r+0xcc>)
 800b166:	b570      	push	{r4, r5, r6, lr}
 800b168:	681d      	ldr	r5, [r3, #0]
 800b16a:	4606      	mov	r6, r0
 800b16c:	460c      	mov	r4, r1
 800b16e:	b125      	cbz	r5, 800b17a <__swsetup_r+0x16>
 800b170:	69ab      	ldr	r3, [r5, #24]
 800b172:	b913      	cbnz	r3, 800b17a <__swsetup_r+0x16>
 800b174:	4628      	mov	r0, r5
 800b176:	f000 f985 	bl	800b484 <__sinit>
 800b17a:	4b2e      	ldr	r3, [pc, #184]	; (800b234 <__swsetup_r+0xd0>)
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d10f      	bne.n	800b1a0 <__swsetup_r+0x3c>
 800b180:	686c      	ldr	r4, [r5, #4]
 800b182:	89a3      	ldrh	r3, [r4, #12]
 800b184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b188:	0719      	lsls	r1, r3, #28
 800b18a:	d42c      	bmi.n	800b1e6 <__swsetup_r+0x82>
 800b18c:	06dd      	lsls	r5, r3, #27
 800b18e:	d411      	bmi.n	800b1b4 <__swsetup_r+0x50>
 800b190:	2309      	movs	r3, #9
 800b192:	6033      	str	r3, [r6, #0]
 800b194:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b19e:	e03e      	b.n	800b21e <__swsetup_r+0xba>
 800b1a0:	4b25      	ldr	r3, [pc, #148]	; (800b238 <__swsetup_r+0xd4>)
 800b1a2:	429c      	cmp	r4, r3
 800b1a4:	d101      	bne.n	800b1aa <__swsetup_r+0x46>
 800b1a6:	68ac      	ldr	r4, [r5, #8]
 800b1a8:	e7eb      	b.n	800b182 <__swsetup_r+0x1e>
 800b1aa:	4b24      	ldr	r3, [pc, #144]	; (800b23c <__swsetup_r+0xd8>)
 800b1ac:	429c      	cmp	r4, r3
 800b1ae:	bf08      	it	eq
 800b1b0:	68ec      	ldreq	r4, [r5, #12]
 800b1b2:	e7e6      	b.n	800b182 <__swsetup_r+0x1e>
 800b1b4:	0758      	lsls	r0, r3, #29
 800b1b6:	d512      	bpl.n	800b1de <__swsetup_r+0x7a>
 800b1b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b1ba:	b141      	cbz	r1, 800b1ce <__swsetup_r+0x6a>
 800b1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	d002      	beq.n	800b1ca <__swsetup_r+0x66>
 800b1c4:	4630      	mov	r0, r6
 800b1c6:	f7ff fb25 	bl	800a814 <_free_r>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6363      	str	r3, [r4, #52]	; 0x34
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6063      	str	r3, [r4, #4]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	f043 0308 	orr.w	r3, r3, #8
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	b94b      	cbnz	r3, 800b1fe <__swsetup_r+0x9a>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b1f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1f4:	d003      	beq.n	800b1fe <__swsetup_r+0x9a>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f000 fa09 	bl	800b610 <__smakebuf_r>
 800b1fe:	89a0      	ldrh	r0, [r4, #12]
 800b200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b204:	f010 0301 	ands.w	r3, r0, #1
 800b208:	d00a      	beq.n	800b220 <__swsetup_r+0xbc>
 800b20a:	2300      	movs	r3, #0
 800b20c:	60a3      	str	r3, [r4, #8]
 800b20e:	6963      	ldr	r3, [r4, #20]
 800b210:	425b      	negs	r3, r3
 800b212:	61a3      	str	r3, [r4, #24]
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	b943      	cbnz	r3, 800b22a <__swsetup_r+0xc6>
 800b218:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b21c:	d1ba      	bne.n	800b194 <__swsetup_r+0x30>
 800b21e:	bd70      	pop	{r4, r5, r6, pc}
 800b220:	0781      	lsls	r1, r0, #30
 800b222:	bf58      	it	pl
 800b224:	6963      	ldrpl	r3, [r4, #20]
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	e7f4      	b.n	800b214 <__swsetup_r+0xb0>
 800b22a:	2000      	movs	r0, #0
 800b22c:	e7f7      	b.n	800b21e <__swsetup_r+0xba>
 800b22e:	bf00      	nop
 800b230:	20000020 	.word	0x20000020
 800b234:	0800d70c 	.word	0x0800d70c
 800b238:	0800d72c 	.word	0x0800d72c
 800b23c:	0800d6ec 	.word	0x0800d6ec

0800b240 <abort>:
 800b240:	b508      	push	{r3, lr}
 800b242:	2006      	movs	r0, #6
 800b244:	f000 fa54 	bl	800b6f0 <raise>
 800b248:	2001      	movs	r0, #1
 800b24a:	f7f9 f993 	bl	8004574 <_exit>
	...

0800b250 <__sflush_r>:
 800b250:	898a      	ldrh	r2, [r1, #12]
 800b252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b256:	4605      	mov	r5, r0
 800b258:	0710      	lsls	r0, r2, #28
 800b25a:	460c      	mov	r4, r1
 800b25c:	d458      	bmi.n	800b310 <__sflush_r+0xc0>
 800b25e:	684b      	ldr	r3, [r1, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc05      	bgt.n	800b270 <__sflush_r+0x20>
 800b264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	dc02      	bgt.n	800b270 <__sflush_r+0x20>
 800b26a:	2000      	movs	r0, #0
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b272:	2e00      	cmp	r6, #0
 800b274:	d0f9      	beq.n	800b26a <__sflush_r+0x1a>
 800b276:	2300      	movs	r3, #0
 800b278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b27c:	682f      	ldr	r7, [r5, #0]
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	d032      	beq.n	800b2e8 <__sflush_r+0x98>
 800b282:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b284:	89a3      	ldrh	r3, [r4, #12]
 800b286:	075a      	lsls	r2, r3, #29
 800b288:	d505      	bpl.n	800b296 <__sflush_r+0x46>
 800b28a:	6863      	ldr	r3, [r4, #4]
 800b28c:	1ac0      	subs	r0, r0, r3
 800b28e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b290:	b10b      	cbz	r3, 800b296 <__sflush_r+0x46>
 800b292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b294:	1ac0      	subs	r0, r0, r3
 800b296:	2300      	movs	r3, #0
 800b298:	4602      	mov	r2, r0
 800b29a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b29c:	6a21      	ldr	r1, [r4, #32]
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b0      	blx	r6
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	89a3      	ldrh	r3, [r4, #12]
 800b2a6:	d106      	bne.n	800b2b6 <__sflush_r+0x66>
 800b2a8:	6829      	ldr	r1, [r5, #0]
 800b2aa:	291d      	cmp	r1, #29
 800b2ac:	d82c      	bhi.n	800b308 <__sflush_r+0xb8>
 800b2ae:	4a2a      	ldr	r2, [pc, #168]	; (800b358 <__sflush_r+0x108>)
 800b2b0:	40ca      	lsrs	r2, r1
 800b2b2:	07d6      	lsls	r6, r2, #31
 800b2b4:	d528      	bpl.n	800b308 <__sflush_r+0xb8>
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	6062      	str	r2, [r4, #4]
 800b2ba:	04d9      	lsls	r1, r3, #19
 800b2bc:	6922      	ldr	r2, [r4, #16]
 800b2be:	6022      	str	r2, [r4, #0]
 800b2c0:	d504      	bpl.n	800b2cc <__sflush_r+0x7c>
 800b2c2:	1c42      	adds	r2, r0, #1
 800b2c4:	d101      	bne.n	800b2ca <__sflush_r+0x7a>
 800b2c6:	682b      	ldr	r3, [r5, #0]
 800b2c8:	b903      	cbnz	r3, 800b2cc <__sflush_r+0x7c>
 800b2ca:	6560      	str	r0, [r4, #84]	; 0x54
 800b2cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2ce:	602f      	str	r7, [r5, #0]
 800b2d0:	2900      	cmp	r1, #0
 800b2d2:	d0ca      	beq.n	800b26a <__sflush_r+0x1a>
 800b2d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2d8:	4299      	cmp	r1, r3
 800b2da:	d002      	beq.n	800b2e2 <__sflush_r+0x92>
 800b2dc:	4628      	mov	r0, r5
 800b2de:	f7ff fa99 	bl	800a814 <_free_r>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	6360      	str	r0, [r4, #52]	; 0x34
 800b2e6:	e7c1      	b.n	800b26c <__sflush_r+0x1c>
 800b2e8:	6a21      	ldr	r1, [r4, #32]
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	47b0      	blx	r6
 800b2f0:	1c41      	adds	r1, r0, #1
 800b2f2:	d1c7      	bne.n	800b284 <__sflush_r+0x34>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0c4      	beq.n	800b284 <__sflush_r+0x34>
 800b2fa:	2b1d      	cmp	r3, #29
 800b2fc:	d001      	beq.n	800b302 <__sflush_r+0xb2>
 800b2fe:	2b16      	cmp	r3, #22
 800b300:	d101      	bne.n	800b306 <__sflush_r+0xb6>
 800b302:	602f      	str	r7, [r5, #0]
 800b304:	e7b1      	b.n	800b26a <__sflush_r+0x1a>
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30c:	81a3      	strh	r3, [r4, #12]
 800b30e:	e7ad      	b.n	800b26c <__sflush_r+0x1c>
 800b310:	690f      	ldr	r7, [r1, #16]
 800b312:	2f00      	cmp	r7, #0
 800b314:	d0a9      	beq.n	800b26a <__sflush_r+0x1a>
 800b316:	0793      	lsls	r3, r2, #30
 800b318:	680e      	ldr	r6, [r1, #0]
 800b31a:	bf08      	it	eq
 800b31c:	694b      	ldreq	r3, [r1, #20]
 800b31e:	600f      	str	r7, [r1, #0]
 800b320:	bf18      	it	ne
 800b322:	2300      	movne	r3, #0
 800b324:	eba6 0807 	sub.w	r8, r6, r7
 800b328:	608b      	str	r3, [r1, #8]
 800b32a:	f1b8 0f00 	cmp.w	r8, #0
 800b32e:	dd9c      	ble.n	800b26a <__sflush_r+0x1a>
 800b330:	6a21      	ldr	r1, [r4, #32]
 800b332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b334:	4643      	mov	r3, r8
 800b336:	463a      	mov	r2, r7
 800b338:	4628      	mov	r0, r5
 800b33a:	47b0      	blx	r6
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dc06      	bgt.n	800b34e <__sflush_r+0xfe>
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b34c:	e78e      	b.n	800b26c <__sflush_r+0x1c>
 800b34e:	4407      	add	r7, r0
 800b350:	eba8 0800 	sub.w	r8, r8, r0
 800b354:	e7e9      	b.n	800b32a <__sflush_r+0xda>
 800b356:	bf00      	nop
 800b358:	20400001 	.word	0x20400001

0800b35c <_fflush_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	690b      	ldr	r3, [r1, #16]
 800b360:	4605      	mov	r5, r0
 800b362:	460c      	mov	r4, r1
 800b364:	b913      	cbnz	r3, 800b36c <_fflush_r+0x10>
 800b366:	2500      	movs	r5, #0
 800b368:	4628      	mov	r0, r5
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	b118      	cbz	r0, 800b376 <_fflush_r+0x1a>
 800b36e:	6983      	ldr	r3, [r0, #24]
 800b370:	b90b      	cbnz	r3, 800b376 <_fflush_r+0x1a>
 800b372:	f000 f887 	bl	800b484 <__sinit>
 800b376:	4b14      	ldr	r3, [pc, #80]	; (800b3c8 <_fflush_r+0x6c>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	d11b      	bne.n	800b3b4 <_fflush_r+0x58>
 800b37c:	686c      	ldr	r4, [r5, #4]
 800b37e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0ef      	beq.n	800b366 <_fflush_r+0xa>
 800b386:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b388:	07d0      	lsls	r0, r2, #31
 800b38a:	d404      	bmi.n	800b396 <_fflush_r+0x3a>
 800b38c:	0599      	lsls	r1, r3, #22
 800b38e:	d402      	bmi.n	800b396 <_fflush_r+0x3a>
 800b390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b392:	f000 f915 	bl	800b5c0 <__retarget_lock_acquire_recursive>
 800b396:	4628      	mov	r0, r5
 800b398:	4621      	mov	r1, r4
 800b39a:	f7ff ff59 	bl	800b250 <__sflush_r>
 800b39e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3a0:	07da      	lsls	r2, r3, #31
 800b3a2:	4605      	mov	r5, r0
 800b3a4:	d4e0      	bmi.n	800b368 <_fflush_r+0xc>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	059b      	lsls	r3, r3, #22
 800b3aa:	d4dd      	bmi.n	800b368 <_fflush_r+0xc>
 800b3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ae:	f000 f908 	bl	800b5c2 <__retarget_lock_release_recursive>
 800b3b2:	e7d9      	b.n	800b368 <_fflush_r+0xc>
 800b3b4:	4b05      	ldr	r3, [pc, #20]	; (800b3cc <_fflush_r+0x70>)
 800b3b6:	429c      	cmp	r4, r3
 800b3b8:	d101      	bne.n	800b3be <_fflush_r+0x62>
 800b3ba:	68ac      	ldr	r4, [r5, #8]
 800b3bc:	e7df      	b.n	800b37e <_fflush_r+0x22>
 800b3be:	4b04      	ldr	r3, [pc, #16]	; (800b3d0 <_fflush_r+0x74>)
 800b3c0:	429c      	cmp	r4, r3
 800b3c2:	bf08      	it	eq
 800b3c4:	68ec      	ldreq	r4, [r5, #12]
 800b3c6:	e7da      	b.n	800b37e <_fflush_r+0x22>
 800b3c8:	0800d70c 	.word	0x0800d70c
 800b3cc:	0800d72c 	.word	0x0800d72c
 800b3d0:	0800d6ec 	.word	0x0800d6ec

0800b3d4 <std>:
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	b510      	push	{r4, lr}
 800b3d8:	4604      	mov	r4, r0
 800b3da:	e9c0 3300 	strd	r3, r3, [r0]
 800b3de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3e2:	6083      	str	r3, [r0, #8]
 800b3e4:	8181      	strh	r1, [r0, #12]
 800b3e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b3e8:	81c2      	strh	r2, [r0, #14]
 800b3ea:	6183      	str	r3, [r0, #24]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	2208      	movs	r2, #8
 800b3f0:	305c      	adds	r0, #92	; 0x5c
 800b3f2:	f7fb fdcd 	bl	8006f90 <memset>
 800b3f6:	4b05      	ldr	r3, [pc, #20]	; (800b40c <std+0x38>)
 800b3f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b3fa:	4b05      	ldr	r3, [pc, #20]	; (800b410 <std+0x3c>)
 800b3fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b3fe:	4b05      	ldr	r3, [pc, #20]	; (800b414 <std+0x40>)
 800b400:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b402:	4b05      	ldr	r3, [pc, #20]	; (800b418 <std+0x44>)
 800b404:	6224      	str	r4, [r4, #32]
 800b406:	6323      	str	r3, [r4, #48]	; 0x30
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	bf00      	nop
 800b40c:	0800b729 	.word	0x0800b729
 800b410:	0800b74b 	.word	0x0800b74b
 800b414:	0800b783 	.word	0x0800b783
 800b418:	0800b7a7 	.word	0x0800b7a7

0800b41c <_cleanup_r>:
 800b41c:	4901      	ldr	r1, [pc, #4]	; (800b424 <_cleanup_r+0x8>)
 800b41e:	f000 b8af 	b.w	800b580 <_fwalk_reent>
 800b422:	bf00      	nop
 800b424:	0800b35d 	.word	0x0800b35d

0800b428 <__sfmoreglue>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	2268      	movs	r2, #104	; 0x68
 800b42c:	1e4d      	subs	r5, r1, #1
 800b42e:	4355      	muls	r5, r2
 800b430:	460e      	mov	r6, r1
 800b432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b436:	f7ff fa59 	bl	800a8ec <_malloc_r>
 800b43a:	4604      	mov	r4, r0
 800b43c:	b140      	cbz	r0, 800b450 <__sfmoreglue+0x28>
 800b43e:	2100      	movs	r1, #0
 800b440:	e9c0 1600 	strd	r1, r6, [r0]
 800b444:	300c      	adds	r0, #12
 800b446:	60a0      	str	r0, [r4, #8]
 800b448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b44c:	f7fb fda0 	bl	8006f90 <memset>
 800b450:	4620      	mov	r0, r4
 800b452:	bd70      	pop	{r4, r5, r6, pc}

0800b454 <__sfp_lock_acquire>:
 800b454:	4801      	ldr	r0, [pc, #4]	; (800b45c <__sfp_lock_acquire+0x8>)
 800b456:	f000 b8b3 	b.w	800b5c0 <__retarget_lock_acquire_recursive>
 800b45a:	bf00      	nop
 800b45c:	20000265 	.word	0x20000265

0800b460 <__sfp_lock_release>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__sfp_lock_release+0x8>)
 800b462:	f000 b8ae 	b.w	800b5c2 <__retarget_lock_release_recursive>
 800b466:	bf00      	nop
 800b468:	20000265 	.word	0x20000265

0800b46c <__sinit_lock_acquire>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__sinit_lock_acquire+0x8>)
 800b46e:	f000 b8a7 	b.w	800b5c0 <__retarget_lock_acquire_recursive>
 800b472:	bf00      	nop
 800b474:	20000266 	.word	0x20000266

0800b478 <__sinit_lock_release>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__sinit_lock_release+0x8>)
 800b47a:	f000 b8a2 	b.w	800b5c2 <__retarget_lock_release_recursive>
 800b47e:	bf00      	nop
 800b480:	20000266 	.word	0x20000266

0800b484 <__sinit>:
 800b484:	b510      	push	{r4, lr}
 800b486:	4604      	mov	r4, r0
 800b488:	f7ff fff0 	bl	800b46c <__sinit_lock_acquire>
 800b48c:	69a3      	ldr	r3, [r4, #24]
 800b48e:	b11b      	cbz	r3, 800b498 <__sinit+0x14>
 800b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b494:	f7ff bff0 	b.w	800b478 <__sinit_lock_release>
 800b498:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b49c:	6523      	str	r3, [r4, #80]	; 0x50
 800b49e:	4b13      	ldr	r3, [pc, #76]	; (800b4ec <__sinit+0x68>)
 800b4a0:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <__sinit+0x6c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4a6:	42a3      	cmp	r3, r4
 800b4a8:	bf04      	itt	eq
 800b4aa:	2301      	moveq	r3, #1
 800b4ac:	61a3      	streq	r3, [r4, #24]
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f000 f820 	bl	800b4f4 <__sfp>
 800b4b4:	6060      	str	r0, [r4, #4]
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f000 f81c 	bl	800b4f4 <__sfp>
 800b4bc:	60a0      	str	r0, [r4, #8]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f000 f818 	bl	800b4f4 <__sfp>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	60e0      	str	r0, [r4, #12]
 800b4c8:	2104      	movs	r1, #4
 800b4ca:	6860      	ldr	r0, [r4, #4]
 800b4cc:	f7ff ff82 	bl	800b3d4 <std>
 800b4d0:	68a0      	ldr	r0, [r4, #8]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	2109      	movs	r1, #9
 800b4d6:	f7ff ff7d 	bl	800b3d4 <std>
 800b4da:	68e0      	ldr	r0, [r4, #12]
 800b4dc:	2202      	movs	r2, #2
 800b4de:	2112      	movs	r1, #18
 800b4e0:	f7ff ff78 	bl	800b3d4 <std>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	61a3      	str	r3, [r4, #24]
 800b4e8:	e7d2      	b.n	800b490 <__sinit+0xc>
 800b4ea:	bf00      	nop
 800b4ec:	0800d2a4 	.word	0x0800d2a4
 800b4f0:	0800b41d 	.word	0x0800b41d

0800b4f4 <__sfp>:
 800b4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4f6:	4607      	mov	r7, r0
 800b4f8:	f7ff ffac 	bl	800b454 <__sfp_lock_acquire>
 800b4fc:	4b1e      	ldr	r3, [pc, #120]	; (800b578 <__sfp+0x84>)
 800b4fe:	681e      	ldr	r6, [r3, #0]
 800b500:	69b3      	ldr	r3, [r6, #24]
 800b502:	b913      	cbnz	r3, 800b50a <__sfp+0x16>
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff ffbd 	bl	800b484 <__sinit>
 800b50a:	3648      	adds	r6, #72	; 0x48
 800b50c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b510:	3b01      	subs	r3, #1
 800b512:	d503      	bpl.n	800b51c <__sfp+0x28>
 800b514:	6833      	ldr	r3, [r6, #0]
 800b516:	b30b      	cbz	r3, 800b55c <__sfp+0x68>
 800b518:	6836      	ldr	r6, [r6, #0]
 800b51a:	e7f7      	b.n	800b50c <__sfp+0x18>
 800b51c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b520:	b9d5      	cbnz	r5, 800b558 <__sfp+0x64>
 800b522:	4b16      	ldr	r3, [pc, #88]	; (800b57c <__sfp+0x88>)
 800b524:	60e3      	str	r3, [r4, #12]
 800b526:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b52a:	6665      	str	r5, [r4, #100]	; 0x64
 800b52c:	f000 f847 	bl	800b5be <__retarget_lock_init_recursive>
 800b530:	f7ff ff96 	bl	800b460 <__sfp_lock_release>
 800b534:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b538:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b53c:	6025      	str	r5, [r4, #0]
 800b53e:	61a5      	str	r5, [r4, #24]
 800b540:	2208      	movs	r2, #8
 800b542:	4629      	mov	r1, r5
 800b544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b548:	f7fb fd22 	bl	8006f90 <memset>
 800b54c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b554:	4620      	mov	r0, r4
 800b556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b558:	3468      	adds	r4, #104	; 0x68
 800b55a:	e7d9      	b.n	800b510 <__sfp+0x1c>
 800b55c:	2104      	movs	r1, #4
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ff62 	bl	800b428 <__sfmoreglue>
 800b564:	4604      	mov	r4, r0
 800b566:	6030      	str	r0, [r6, #0]
 800b568:	2800      	cmp	r0, #0
 800b56a:	d1d5      	bne.n	800b518 <__sfp+0x24>
 800b56c:	f7ff ff78 	bl	800b460 <__sfp_lock_release>
 800b570:	230c      	movs	r3, #12
 800b572:	603b      	str	r3, [r7, #0]
 800b574:	e7ee      	b.n	800b554 <__sfp+0x60>
 800b576:	bf00      	nop
 800b578:	0800d2a4 	.word	0x0800d2a4
 800b57c:	ffff0001 	.word	0xffff0001

0800b580 <_fwalk_reent>:
 800b580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b584:	4606      	mov	r6, r0
 800b586:	4688      	mov	r8, r1
 800b588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b58c:	2700      	movs	r7, #0
 800b58e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b592:	f1b9 0901 	subs.w	r9, r9, #1
 800b596:	d505      	bpl.n	800b5a4 <_fwalk_reent+0x24>
 800b598:	6824      	ldr	r4, [r4, #0]
 800b59a:	2c00      	cmp	r4, #0
 800b59c:	d1f7      	bne.n	800b58e <_fwalk_reent+0xe>
 800b59e:	4638      	mov	r0, r7
 800b5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5a4:	89ab      	ldrh	r3, [r5, #12]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d907      	bls.n	800b5ba <_fwalk_reent+0x3a>
 800b5aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	d003      	beq.n	800b5ba <_fwalk_reent+0x3a>
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	4630      	mov	r0, r6
 800b5b6:	47c0      	blx	r8
 800b5b8:	4307      	orrs	r7, r0
 800b5ba:	3568      	adds	r5, #104	; 0x68
 800b5bc:	e7e9      	b.n	800b592 <_fwalk_reent+0x12>

0800b5be <__retarget_lock_init_recursive>:
 800b5be:	4770      	bx	lr

0800b5c0 <__retarget_lock_acquire_recursive>:
 800b5c0:	4770      	bx	lr

0800b5c2 <__retarget_lock_release_recursive>:
 800b5c2:	4770      	bx	lr

0800b5c4 <__swhatbuf_r>:
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	460e      	mov	r6, r1
 800b5c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5cc:	2900      	cmp	r1, #0
 800b5ce:	b096      	sub	sp, #88	; 0x58
 800b5d0:	4614      	mov	r4, r2
 800b5d2:	461d      	mov	r5, r3
 800b5d4:	da08      	bge.n	800b5e8 <__swhatbuf_r+0x24>
 800b5d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	602a      	str	r2, [r5, #0]
 800b5de:	061a      	lsls	r2, r3, #24
 800b5e0:	d410      	bmi.n	800b604 <__swhatbuf_r+0x40>
 800b5e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b5e6:	e00e      	b.n	800b606 <__swhatbuf_r+0x42>
 800b5e8:	466a      	mov	r2, sp
 800b5ea:	f000 f903 	bl	800b7f4 <_fstat_r>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	dbf1      	blt.n	800b5d6 <__swhatbuf_r+0x12>
 800b5f2:	9a01      	ldr	r2, [sp, #4]
 800b5f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b5f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b5fc:	425a      	negs	r2, r3
 800b5fe:	415a      	adcs	r2, r3
 800b600:	602a      	str	r2, [r5, #0]
 800b602:	e7ee      	b.n	800b5e2 <__swhatbuf_r+0x1e>
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	2000      	movs	r0, #0
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	b016      	add	sp, #88	; 0x58
 800b60c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b610 <__smakebuf_r>:
 800b610:	898b      	ldrh	r3, [r1, #12]
 800b612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b614:	079d      	lsls	r5, r3, #30
 800b616:	4606      	mov	r6, r0
 800b618:	460c      	mov	r4, r1
 800b61a:	d507      	bpl.n	800b62c <__smakebuf_r+0x1c>
 800b61c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	6123      	str	r3, [r4, #16]
 800b624:	2301      	movs	r3, #1
 800b626:	6163      	str	r3, [r4, #20]
 800b628:	b002      	add	sp, #8
 800b62a:	bd70      	pop	{r4, r5, r6, pc}
 800b62c:	ab01      	add	r3, sp, #4
 800b62e:	466a      	mov	r2, sp
 800b630:	f7ff ffc8 	bl	800b5c4 <__swhatbuf_r>
 800b634:	9900      	ldr	r1, [sp, #0]
 800b636:	4605      	mov	r5, r0
 800b638:	4630      	mov	r0, r6
 800b63a:	f7ff f957 	bl	800a8ec <_malloc_r>
 800b63e:	b948      	cbnz	r0, 800b654 <__smakebuf_r+0x44>
 800b640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b644:	059a      	lsls	r2, r3, #22
 800b646:	d4ef      	bmi.n	800b628 <__smakebuf_r+0x18>
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	f043 0302 	orr.w	r3, r3, #2
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	e7e3      	b.n	800b61c <__smakebuf_r+0xc>
 800b654:	4b0d      	ldr	r3, [pc, #52]	; (800b68c <__smakebuf_r+0x7c>)
 800b656:	62b3      	str	r3, [r6, #40]	; 0x28
 800b658:	89a3      	ldrh	r3, [r4, #12]
 800b65a:	6020      	str	r0, [r4, #0]
 800b65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b660:	81a3      	strh	r3, [r4, #12]
 800b662:	9b00      	ldr	r3, [sp, #0]
 800b664:	6163      	str	r3, [r4, #20]
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	6120      	str	r0, [r4, #16]
 800b66a:	b15b      	cbz	r3, 800b684 <__smakebuf_r+0x74>
 800b66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b670:	4630      	mov	r0, r6
 800b672:	f000 f8d1 	bl	800b818 <_isatty_r>
 800b676:	b128      	cbz	r0, 800b684 <__smakebuf_r+0x74>
 800b678:	89a3      	ldrh	r3, [r4, #12]
 800b67a:	f023 0303 	bic.w	r3, r3, #3
 800b67e:	f043 0301 	orr.w	r3, r3, #1
 800b682:	81a3      	strh	r3, [r4, #12]
 800b684:	89a0      	ldrh	r0, [r4, #12]
 800b686:	4305      	orrs	r5, r0
 800b688:	81a5      	strh	r5, [r4, #12]
 800b68a:	e7cd      	b.n	800b628 <__smakebuf_r+0x18>
 800b68c:	0800b41d 	.word	0x0800b41d

0800b690 <_malloc_usable_size_r>:
 800b690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b694:	1f18      	subs	r0, r3, #4
 800b696:	2b00      	cmp	r3, #0
 800b698:	bfbc      	itt	lt
 800b69a:	580b      	ldrlt	r3, [r1, r0]
 800b69c:	18c0      	addlt	r0, r0, r3
 800b69e:	4770      	bx	lr

0800b6a0 <_raise_r>:
 800b6a0:	291f      	cmp	r1, #31
 800b6a2:	b538      	push	{r3, r4, r5, lr}
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	460d      	mov	r5, r1
 800b6a8:	d904      	bls.n	800b6b4 <_raise_r+0x14>
 800b6aa:	2316      	movs	r3, #22
 800b6ac:	6003      	str	r3, [r0, #0]
 800b6ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6b2:	bd38      	pop	{r3, r4, r5, pc}
 800b6b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6b6:	b112      	cbz	r2, 800b6be <_raise_r+0x1e>
 800b6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6bc:	b94b      	cbnz	r3, 800b6d2 <_raise_r+0x32>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 f830 	bl	800b724 <_getpid_r>
 800b6c4:	462a      	mov	r2, r5
 800b6c6:	4601      	mov	r1, r0
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6ce:	f000 b817 	b.w	800b700 <_kill_r>
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d00a      	beq.n	800b6ec <_raise_r+0x4c>
 800b6d6:	1c59      	adds	r1, r3, #1
 800b6d8:	d103      	bne.n	800b6e2 <_raise_r+0x42>
 800b6da:	2316      	movs	r3, #22
 800b6dc:	6003      	str	r3, [r0, #0]
 800b6de:	2001      	movs	r0, #1
 800b6e0:	e7e7      	b.n	800b6b2 <_raise_r+0x12>
 800b6e2:	2400      	movs	r4, #0
 800b6e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	4798      	blx	r3
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	e7e0      	b.n	800b6b2 <_raise_r+0x12>

0800b6f0 <raise>:
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <raise+0xc>)
 800b6f2:	4601      	mov	r1, r0
 800b6f4:	6818      	ldr	r0, [r3, #0]
 800b6f6:	f7ff bfd3 	b.w	800b6a0 <_raise_r>
 800b6fa:	bf00      	nop
 800b6fc:	20000020 	.word	0x20000020

0800b700 <_kill_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	; (800b720 <_kill_r+0x20>)
 800b704:	2300      	movs	r3, #0
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	f7f8 ff21 	bl	8004554 <_kill>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d102      	bne.n	800b71c <_kill_r+0x1c>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	b103      	cbz	r3, 800b71c <_kill_r+0x1c>
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	bf00      	nop
 800b720:	20000260 	.word	0x20000260

0800b724 <_getpid_r>:
 800b724:	f7f8 bf0e 	b.w	8004544 <_getpid>

0800b728 <__sread>:
 800b728:	b510      	push	{r4, lr}
 800b72a:	460c      	mov	r4, r1
 800b72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b730:	f000 f894 	bl	800b85c <_read_r>
 800b734:	2800      	cmp	r0, #0
 800b736:	bfab      	itete	ge
 800b738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b73a:	89a3      	ldrhlt	r3, [r4, #12]
 800b73c:	181b      	addge	r3, r3, r0
 800b73e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b742:	bfac      	ite	ge
 800b744:	6563      	strge	r3, [r4, #84]	; 0x54
 800b746:	81a3      	strhlt	r3, [r4, #12]
 800b748:	bd10      	pop	{r4, pc}

0800b74a <__swrite>:
 800b74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b74e:	461f      	mov	r7, r3
 800b750:	898b      	ldrh	r3, [r1, #12]
 800b752:	05db      	lsls	r3, r3, #23
 800b754:	4605      	mov	r5, r0
 800b756:	460c      	mov	r4, r1
 800b758:	4616      	mov	r6, r2
 800b75a:	d505      	bpl.n	800b768 <__swrite+0x1e>
 800b75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b760:	2302      	movs	r3, #2
 800b762:	2200      	movs	r2, #0
 800b764:	f000 f868 	bl	800b838 <_lseek_r>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b76e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	4628      	mov	r0, r5
 800b77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b77e:	f000 b817 	b.w	800b7b0 <_write_r>

0800b782 <__sseek>:
 800b782:	b510      	push	{r4, lr}
 800b784:	460c      	mov	r4, r1
 800b786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b78a:	f000 f855 	bl	800b838 <_lseek_r>
 800b78e:	1c43      	adds	r3, r0, #1
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	bf15      	itete	ne
 800b794:	6560      	strne	r0, [r4, #84]	; 0x54
 800b796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b79a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b79e:	81a3      	strheq	r3, [r4, #12]
 800b7a0:	bf18      	it	ne
 800b7a2:	81a3      	strhne	r3, [r4, #12]
 800b7a4:	bd10      	pop	{r4, pc}

0800b7a6 <__sclose>:
 800b7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7aa:	f000 b813 	b.w	800b7d4 <_close_r>
	...

0800b7b0 <_write_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d07      	ldr	r5, [pc, #28]	; (800b7d0 <_write_r+0x20>)
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	4608      	mov	r0, r1
 800b7b8:	4611      	mov	r1, r2
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	602a      	str	r2, [r5, #0]
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f7f8 feff 	bl	80045c2 <_write>
 800b7c4:	1c43      	adds	r3, r0, #1
 800b7c6:	d102      	bne.n	800b7ce <_write_r+0x1e>
 800b7c8:	682b      	ldr	r3, [r5, #0]
 800b7ca:	b103      	cbz	r3, 800b7ce <_write_r+0x1e>
 800b7cc:	6023      	str	r3, [r4, #0]
 800b7ce:	bd38      	pop	{r3, r4, r5, pc}
 800b7d0:	20000260 	.word	0x20000260

0800b7d4 <_close_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4d06      	ldr	r5, [pc, #24]	; (800b7f0 <_close_r+0x1c>)
 800b7d8:	2300      	movs	r3, #0
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	602b      	str	r3, [r5, #0]
 800b7e0:	f7f8 ff0b 	bl	80045fa <_close>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_close_r+0x1a>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_close_r+0x1a>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20000260 	.word	0x20000260

0800b7f4 <_fstat_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	; (800b814 <_fstat_r+0x20>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	f7f8 ff06 	bl	8004612 <_fstat>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	d102      	bne.n	800b810 <_fstat_r+0x1c>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b103      	cbz	r3, 800b810 <_fstat_r+0x1c>
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	bf00      	nop
 800b814:	20000260 	.word	0x20000260

0800b818 <_isatty_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d06      	ldr	r5, [pc, #24]	; (800b834 <_isatty_r+0x1c>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f8 ff05 	bl	8004632 <_isatty>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_isatty_r+0x1a>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_isatty_r+0x1a>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	20000260 	.word	0x20000260

0800b838 <_lseek_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d07      	ldr	r5, [pc, #28]	; (800b858 <_lseek_r+0x20>)
 800b83c:	4604      	mov	r4, r0
 800b83e:	4608      	mov	r0, r1
 800b840:	4611      	mov	r1, r2
 800b842:	2200      	movs	r2, #0
 800b844:	602a      	str	r2, [r5, #0]
 800b846:	461a      	mov	r2, r3
 800b848:	f7f8 fefe 	bl	8004648 <_lseek>
 800b84c:	1c43      	adds	r3, r0, #1
 800b84e:	d102      	bne.n	800b856 <_lseek_r+0x1e>
 800b850:	682b      	ldr	r3, [r5, #0]
 800b852:	b103      	cbz	r3, 800b856 <_lseek_r+0x1e>
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	20000260 	.word	0x20000260

0800b85c <_read_r>:
 800b85c:	b538      	push	{r3, r4, r5, lr}
 800b85e:	4d07      	ldr	r5, [pc, #28]	; (800b87c <_read_r+0x20>)
 800b860:	4604      	mov	r4, r0
 800b862:	4608      	mov	r0, r1
 800b864:	4611      	mov	r1, r2
 800b866:	2200      	movs	r2, #0
 800b868:	602a      	str	r2, [r5, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	f7f8 fe8c 	bl	8004588 <_read>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_read_r+0x1e>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_read_r+0x1e>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	20000260 	.word	0x20000260

0800b880 <cos>:
 800b880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b882:	ec53 2b10 	vmov	r2, r3, d0
 800b886:	4826      	ldr	r0, [pc, #152]	; (800b920 <cos+0xa0>)
 800b888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b88c:	4281      	cmp	r1, r0
 800b88e:	dc06      	bgt.n	800b89e <cos+0x1e>
 800b890:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b918 <cos+0x98>
 800b894:	b005      	add	sp, #20
 800b896:	f85d eb04 	ldr.w	lr, [sp], #4
 800b89a:	f000 bab5 	b.w	800be08 <__kernel_cos>
 800b89e:	4821      	ldr	r0, [pc, #132]	; (800b924 <cos+0xa4>)
 800b8a0:	4281      	cmp	r1, r0
 800b8a2:	dd09      	ble.n	800b8b8 <cos+0x38>
 800b8a4:	ee10 0a10 	vmov	r0, s0
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f7f4 fcf5 	bl	8000298 <__aeabi_dsub>
 800b8ae:	ec41 0b10 	vmov	d0, r0, r1
 800b8b2:	b005      	add	sp, #20
 800b8b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8b8:	4668      	mov	r0, sp
 800b8ba:	f000 f899 	bl	800b9f0 <__ieee754_rem_pio2>
 800b8be:	f000 0003 	and.w	r0, r0, #3
 800b8c2:	2801      	cmp	r0, #1
 800b8c4:	d00b      	beq.n	800b8de <cos+0x5e>
 800b8c6:	2802      	cmp	r0, #2
 800b8c8:	d016      	beq.n	800b8f8 <cos+0x78>
 800b8ca:	b9e0      	cbnz	r0, 800b906 <cos+0x86>
 800b8cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8d0:	ed9d 0b00 	vldr	d0, [sp]
 800b8d4:	f000 fa98 	bl	800be08 <__kernel_cos>
 800b8d8:	ec51 0b10 	vmov	r0, r1, d0
 800b8dc:	e7e7      	b.n	800b8ae <cos+0x2e>
 800b8de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8e2:	ed9d 0b00 	vldr	d0, [sp]
 800b8e6:	f000 fea7 	bl	800c638 <__kernel_sin>
 800b8ea:	ec53 2b10 	vmov	r2, r3, d0
 800b8ee:	ee10 0a10 	vmov	r0, s0
 800b8f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b8f6:	e7da      	b.n	800b8ae <cos+0x2e>
 800b8f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b8fc:	ed9d 0b00 	vldr	d0, [sp]
 800b900:	f000 fa82 	bl	800be08 <__kernel_cos>
 800b904:	e7f1      	b.n	800b8ea <cos+0x6a>
 800b906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b90a:	ed9d 0b00 	vldr	d0, [sp]
 800b90e:	2001      	movs	r0, #1
 800b910:	f000 fe92 	bl	800c638 <__kernel_sin>
 800b914:	e7e0      	b.n	800b8d8 <cos+0x58>
 800b916:	bf00      	nop
	...
 800b920:	3fe921fb 	.word	0x3fe921fb
 800b924:	7fefffff 	.word	0x7fefffff

0800b928 <fabs>:
 800b928:	ec51 0b10 	vmov	r0, r1, d0
 800b92c:	ee10 2a10 	vmov	r2, s0
 800b930:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b934:	ec43 2b10 	vmov	d0, r2, r3
 800b938:	4770      	bx	lr
 800b93a:	0000      	movs	r0, r0
 800b93c:	0000      	movs	r0, r0
	...

0800b940 <sin>:
 800b940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b942:	ec53 2b10 	vmov	r2, r3, d0
 800b946:	4828      	ldr	r0, [pc, #160]	; (800b9e8 <sin+0xa8>)
 800b948:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b94c:	4281      	cmp	r1, r0
 800b94e:	dc07      	bgt.n	800b960 <sin+0x20>
 800b950:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b9e0 <sin+0xa0>
 800b954:	2000      	movs	r0, #0
 800b956:	b005      	add	sp, #20
 800b958:	f85d eb04 	ldr.w	lr, [sp], #4
 800b95c:	f000 be6c 	b.w	800c638 <__kernel_sin>
 800b960:	4822      	ldr	r0, [pc, #136]	; (800b9ec <sin+0xac>)
 800b962:	4281      	cmp	r1, r0
 800b964:	dd09      	ble.n	800b97a <sin+0x3a>
 800b966:	ee10 0a10 	vmov	r0, s0
 800b96a:	4619      	mov	r1, r3
 800b96c:	f7f4 fc94 	bl	8000298 <__aeabi_dsub>
 800b970:	ec41 0b10 	vmov	d0, r0, r1
 800b974:	b005      	add	sp, #20
 800b976:	f85d fb04 	ldr.w	pc, [sp], #4
 800b97a:	4668      	mov	r0, sp
 800b97c:	f000 f838 	bl	800b9f0 <__ieee754_rem_pio2>
 800b980:	f000 0003 	and.w	r0, r0, #3
 800b984:	2801      	cmp	r0, #1
 800b986:	d00c      	beq.n	800b9a2 <sin+0x62>
 800b988:	2802      	cmp	r0, #2
 800b98a:	d011      	beq.n	800b9b0 <sin+0x70>
 800b98c:	b9f0      	cbnz	r0, 800b9cc <sin+0x8c>
 800b98e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b992:	ed9d 0b00 	vldr	d0, [sp]
 800b996:	2001      	movs	r0, #1
 800b998:	f000 fe4e 	bl	800c638 <__kernel_sin>
 800b99c:	ec51 0b10 	vmov	r0, r1, d0
 800b9a0:	e7e6      	b.n	800b970 <sin+0x30>
 800b9a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9a6:	ed9d 0b00 	vldr	d0, [sp]
 800b9aa:	f000 fa2d 	bl	800be08 <__kernel_cos>
 800b9ae:	e7f5      	b.n	800b99c <sin+0x5c>
 800b9b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9b4:	ed9d 0b00 	vldr	d0, [sp]
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f000 fe3d 	bl	800c638 <__kernel_sin>
 800b9be:	ec53 2b10 	vmov	r2, r3, d0
 800b9c2:	ee10 0a10 	vmov	r0, s0
 800b9c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9ca:	e7d1      	b.n	800b970 <sin+0x30>
 800b9cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b9d0:	ed9d 0b00 	vldr	d0, [sp]
 800b9d4:	f000 fa18 	bl	800be08 <__kernel_cos>
 800b9d8:	e7f1      	b.n	800b9be <sin+0x7e>
 800b9da:	bf00      	nop
 800b9dc:	f3af 8000 	nop.w
	...
 800b9e8:	3fe921fb 	.word	0x3fe921fb
 800b9ec:	7fefffff 	.word	0x7fefffff

0800b9f0 <__ieee754_rem_pio2>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	ed2d 8b02 	vpush	{d8}
 800b9f8:	ec55 4b10 	vmov	r4, r5, d0
 800b9fc:	4bca      	ldr	r3, [pc, #808]	; (800bd28 <__ieee754_rem_pio2+0x338>)
 800b9fe:	b08b      	sub	sp, #44	; 0x2c
 800ba00:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ba04:	4598      	cmp	r8, r3
 800ba06:	4682      	mov	sl, r0
 800ba08:	9502      	str	r5, [sp, #8]
 800ba0a:	dc08      	bgt.n	800ba1e <__ieee754_rem_pio2+0x2e>
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	ed80 0b00 	vstr	d0, [r0]
 800ba14:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ba18:	f04f 0b00 	mov.w	fp, #0
 800ba1c:	e028      	b.n	800ba70 <__ieee754_rem_pio2+0x80>
 800ba1e:	4bc3      	ldr	r3, [pc, #780]	; (800bd2c <__ieee754_rem_pio2+0x33c>)
 800ba20:	4598      	cmp	r8, r3
 800ba22:	dc78      	bgt.n	800bb16 <__ieee754_rem_pio2+0x126>
 800ba24:	9b02      	ldr	r3, [sp, #8]
 800ba26:	4ec2      	ldr	r6, [pc, #776]	; (800bd30 <__ieee754_rem_pio2+0x340>)
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	ee10 0a10 	vmov	r0, s0
 800ba2e:	a3b0      	add	r3, pc, #704	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x300>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	4629      	mov	r1, r5
 800ba36:	dd39      	ble.n	800baac <__ieee754_rem_pio2+0xbc>
 800ba38:	f7f4 fc2e 	bl	8000298 <__aeabi_dsub>
 800ba3c:	45b0      	cmp	r8, r6
 800ba3e:	4604      	mov	r4, r0
 800ba40:	460d      	mov	r5, r1
 800ba42:	d01b      	beq.n	800ba7c <__ieee754_rem_pio2+0x8c>
 800ba44:	a3ac      	add	r3, pc, #688	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x308>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	f7f4 fc25 	bl	8000298 <__aeabi_dsub>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	460b      	mov	r3, r1
 800ba52:	e9ca 2300 	strd	r2, r3, [sl]
 800ba56:	4620      	mov	r0, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	f7f4 fc1d 	bl	8000298 <__aeabi_dsub>
 800ba5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x308>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f7f4 fc18 	bl	8000298 <__aeabi_dsub>
 800ba68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba6c:	f04f 0b01 	mov.w	fp, #1
 800ba70:	4658      	mov	r0, fp
 800ba72:	b00b      	add	sp, #44	; 0x2c
 800ba74:	ecbd 8b02 	vpop	{d8}
 800ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x310>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	f7f4 fc09 	bl	8000298 <__aeabi_dsub>
 800ba86:	a3a0      	add	r3, pc, #640	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x318>)
 800ba88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	f7f4 fc02 	bl	8000298 <__aeabi_dsub>
 800ba94:	4602      	mov	r2, r0
 800ba96:	460b      	mov	r3, r1
 800ba98:	e9ca 2300 	strd	r2, r3, [sl]
 800ba9c:	4620      	mov	r0, r4
 800ba9e:	4629      	mov	r1, r5
 800baa0:	f7f4 fbfa 	bl	8000298 <__aeabi_dsub>
 800baa4:	a398      	add	r3, pc, #608	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x318>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	e7db      	b.n	800ba64 <__ieee754_rem_pio2+0x74>
 800baac:	f7f4 fbf6 	bl	800029c <__adddf3>
 800bab0:	45b0      	cmp	r8, r6
 800bab2:	4604      	mov	r4, r0
 800bab4:	460d      	mov	r5, r1
 800bab6:	d016      	beq.n	800bae6 <__ieee754_rem_pio2+0xf6>
 800bab8:	a38f      	add	r3, pc, #572	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x308>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fbed 	bl	800029c <__adddf3>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	e9ca 2300 	strd	r2, r3, [sl]
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f4 fbe3 	bl	8000298 <__aeabi_dsub>
 800bad2:	a389      	add	r3, pc, #548	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x308>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fbe0 	bl	800029c <__adddf3>
 800badc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800bae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bae4:	e7c4      	b.n	800ba70 <__ieee754_rem_pio2+0x80>
 800bae6:	a386      	add	r3, pc, #536	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x310>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fbd6 	bl	800029c <__adddf3>
 800baf0:	a385      	add	r3, pc, #532	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x318>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	4604      	mov	r4, r0
 800baf8:	460d      	mov	r5, r1
 800bafa:	f7f4 fbcf 	bl	800029c <__adddf3>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	e9ca 2300 	strd	r2, r3, [sl]
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fbc5 	bl	8000298 <__aeabi_dsub>
 800bb0e:	a37e      	add	r3, pc, #504	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x318>)
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	e7e0      	b.n	800bad8 <__ieee754_rem_pio2+0xe8>
 800bb16:	4b87      	ldr	r3, [pc, #540]	; (800bd34 <__ieee754_rem_pio2+0x344>)
 800bb18:	4598      	cmp	r8, r3
 800bb1a:	f300 80d9 	bgt.w	800bcd0 <__ieee754_rem_pio2+0x2e0>
 800bb1e:	f7ff ff03 	bl	800b928 <fabs>
 800bb22:	ec55 4b10 	vmov	r4, r5, d0
 800bb26:	ee10 0a10 	vmov	r0, s0
 800bb2a:	a379      	add	r3, pc, #484	; (adr r3, 800bd10 <__ieee754_rem_pio2+0x320>)
 800bb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb30:	4629      	mov	r1, r5
 800bb32:	f7f4 fd69 	bl	8000608 <__aeabi_dmul>
 800bb36:	4b80      	ldr	r3, [pc, #512]	; (800bd38 <__ieee754_rem_pio2+0x348>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f7f4 fbaf 	bl	800029c <__adddf3>
 800bb3e:	f7f5 f813 	bl	8000b68 <__aeabi_d2iz>
 800bb42:	4683      	mov	fp, r0
 800bb44:	f7f4 fcf6 	bl	8000534 <__aeabi_i2d>
 800bb48:	4602      	mov	r2, r0
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	ec43 2b18 	vmov	d8, r2, r3
 800bb50:	a367      	add	r3, pc, #412	; (adr r3, 800bcf0 <__ieee754_rem_pio2+0x300>)
 800bb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb56:	f7f4 fd57 	bl	8000608 <__aeabi_dmul>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4620      	mov	r0, r4
 800bb60:	4629      	mov	r1, r5
 800bb62:	f7f4 fb99 	bl	8000298 <__aeabi_dsub>
 800bb66:	a364      	add	r3, pc, #400	; (adr r3, 800bcf8 <__ieee754_rem_pio2+0x308>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	ec51 0b18 	vmov	r0, r1, d8
 800bb74:	f7f4 fd48 	bl	8000608 <__aeabi_dmul>
 800bb78:	f1bb 0f1f 	cmp.w	fp, #31
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	dc0d      	bgt.n	800bb9e <__ieee754_rem_pio2+0x1ae>
 800bb82:	4b6e      	ldr	r3, [pc, #440]	; (800bd3c <__ieee754_rem_pio2+0x34c>)
 800bb84:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800bb88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb8c:	4543      	cmp	r3, r8
 800bb8e:	d006      	beq.n	800bb9e <__ieee754_rem_pio2+0x1ae>
 800bb90:	4622      	mov	r2, r4
 800bb92:	462b      	mov	r3, r5
 800bb94:	4630      	mov	r0, r6
 800bb96:	4639      	mov	r1, r7
 800bb98:	f7f4 fb7e 	bl	8000298 <__aeabi_dsub>
 800bb9c:	e00f      	b.n	800bbbe <__ieee754_rem_pio2+0x1ce>
 800bb9e:	462b      	mov	r3, r5
 800bba0:	4622      	mov	r2, r4
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fb77 	bl	8000298 <__aeabi_dsub>
 800bbaa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bbae:	9303      	str	r3, [sp, #12]
 800bbb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbb4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bbb8:	f1b8 0f10 	cmp.w	r8, #16
 800bbbc:	dc02      	bgt.n	800bbc4 <__ieee754_rem_pio2+0x1d4>
 800bbbe:	e9ca 0100 	strd	r0, r1, [sl]
 800bbc2:	e039      	b.n	800bc38 <__ieee754_rem_pio2+0x248>
 800bbc4:	a34e      	add	r3, pc, #312	; (adr r3, 800bd00 <__ieee754_rem_pio2+0x310>)
 800bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbca:	ec51 0b18 	vmov	r0, r1, d8
 800bbce:	f7f4 fd1b 	bl	8000608 <__aeabi_dmul>
 800bbd2:	4604      	mov	r4, r0
 800bbd4:	460d      	mov	r5, r1
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	460b      	mov	r3, r1
 800bbda:	4630      	mov	r0, r6
 800bbdc:	4639      	mov	r1, r7
 800bbde:	f7f4 fb5b 	bl	8000298 <__aeabi_dsub>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	4689      	mov	r9, r1
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	f7f4 fb53 	bl	8000298 <__aeabi_dsub>
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	462b      	mov	r3, r5
 800bbf6:	f7f4 fb4f 	bl	8000298 <__aeabi_dsub>
 800bbfa:	a343      	add	r3, pc, #268	; (adr r3, 800bd08 <__ieee754_rem_pio2+0x318>)
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	ec51 0b18 	vmov	r0, r1, d8
 800bc08:	f7f4 fcfe 	bl	8000608 <__aeabi_dmul>
 800bc0c:	4622      	mov	r2, r4
 800bc0e:	462b      	mov	r3, r5
 800bc10:	f7f4 fb42 	bl	8000298 <__aeabi_dsub>
 800bc14:	4602      	mov	r2, r0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4604      	mov	r4, r0
 800bc1a:	460d      	mov	r5, r1
 800bc1c:	4640      	mov	r0, r8
 800bc1e:	4649      	mov	r1, r9
 800bc20:	f7f4 fb3a 	bl	8000298 <__aeabi_dsub>
 800bc24:	9a03      	ldr	r2, [sp, #12]
 800bc26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b31      	cmp	r3, #49	; 0x31
 800bc2e:	dc24      	bgt.n	800bc7a <__ieee754_rem_pio2+0x28a>
 800bc30:	e9ca 0100 	strd	r0, r1, [sl]
 800bc34:	4646      	mov	r6, r8
 800bc36:	464f      	mov	r7, r9
 800bc38:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4642      	mov	r2, r8
 800bc40:	464b      	mov	r3, r9
 800bc42:	4639      	mov	r1, r7
 800bc44:	f7f4 fb28 	bl	8000298 <__aeabi_dsub>
 800bc48:	462b      	mov	r3, r5
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	f7f4 fb24 	bl	8000298 <__aeabi_dsub>
 800bc50:	9b02      	ldr	r3, [sp, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc58:	f6bf af0a 	bge.w	800ba70 <__ieee754_rem_pio2+0x80>
 800bc5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc60:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc68:	f8ca 8000 	str.w	r8, [sl]
 800bc6c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc70:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc74:	f1cb 0b00 	rsb	fp, fp, #0
 800bc78:	e6fa      	b.n	800ba70 <__ieee754_rem_pio2+0x80>
 800bc7a:	a327      	add	r3, pc, #156	; (adr r3, 800bd18 <__ieee754_rem_pio2+0x328>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	ec51 0b18 	vmov	r0, r1, d8
 800bc84:	f7f4 fcc0 	bl	8000608 <__aeabi_dmul>
 800bc88:	4604      	mov	r4, r0
 800bc8a:	460d      	mov	r5, r1
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4640      	mov	r0, r8
 800bc92:	4649      	mov	r1, r9
 800bc94:	f7f4 fb00 	bl	8000298 <__aeabi_dsub>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	460f      	mov	r7, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 faf8 	bl	8000298 <__aeabi_dsub>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	f7f4 faf4 	bl	8000298 <__aeabi_dsub>
 800bcb0:	a31b      	add	r3, pc, #108	; (adr r3, 800bd20 <__ieee754_rem_pio2+0x330>)
 800bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb6:	4604      	mov	r4, r0
 800bcb8:	460d      	mov	r5, r1
 800bcba:	ec51 0b18 	vmov	r0, r1, d8
 800bcbe:	f7f4 fca3 	bl	8000608 <__aeabi_dmul>
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	462b      	mov	r3, r5
 800bcc6:	f7f4 fae7 	bl	8000298 <__aeabi_dsub>
 800bcca:	4604      	mov	r4, r0
 800bccc:	460d      	mov	r5, r1
 800bcce:	e75f      	b.n	800bb90 <__ieee754_rem_pio2+0x1a0>
 800bcd0:	4b1b      	ldr	r3, [pc, #108]	; (800bd40 <__ieee754_rem_pio2+0x350>)
 800bcd2:	4598      	cmp	r8, r3
 800bcd4:	dd36      	ble.n	800bd44 <__ieee754_rem_pio2+0x354>
 800bcd6:	ee10 2a10 	vmov	r2, s0
 800bcda:	462b      	mov	r3, r5
 800bcdc:	4620      	mov	r0, r4
 800bcde:	4629      	mov	r1, r5
 800bce0:	f7f4 fada 	bl	8000298 <__aeabi_dsub>
 800bce4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bce8:	e9ca 0100 	strd	r0, r1, [sl]
 800bcec:	e694      	b.n	800ba18 <__ieee754_rem_pio2+0x28>
 800bcee:	bf00      	nop
 800bcf0:	54400000 	.word	0x54400000
 800bcf4:	3ff921fb 	.word	0x3ff921fb
 800bcf8:	1a626331 	.word	0x1a626331
 800bcfc:	3dd0b461 	.word	0x3dd0b461
 800bd00:	1a600000 	.word	0x1a600000
 800bd04:	3dd0b461 	.word	0x3dd0b461
 800bd08:	2e037073 	.word	0x2e037073
 800bd0c:	3ba3198a 	.word	0x3ba3198a
 800bd10:	6dc9c883 	.word	0x6dc9c883
 800bd14:	3fe45f30 	.word	0x3fe45f30
 800bd18:	2e000000 	.word	0x2e000000
 800bd1c:	3ba3198a 	.word	0x3ba3198a
 800bd20:	252049c1 	.word	0x252049c1
 800bd24:	397b839a 	.word	0x397b839a
 800bd28:	3fe921fb 	.word	0x3fe921fb
 800bd2c:	4002d97b 	.word	0x4002d97b
 800bd30:	3ff921fb 	.word	0x3ff921fb
 800bd34:	413921fb 	.word	0x413921fb
 800bd38:	3fe00000 	.word	0x3fe00000
 800bd3c:	0800d74c 	.word	0x0800d74c
 800bd40:	7fefffff 	.word	0x7fefffff
 800bd44:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd4c:	ee10 0a10 	vmov	r0, s0
 800bd50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd54:	ee10 6a10 	vmov	r6, s0
 800bd58:	460f      	mov	r7, r1
 800bd5a:	f7f4 ff05 	bl	8000b68 <__aeabi_d2iz>
 800bd5e:	f7f4 fbe9 	bl	8000534 <__aeabi_i2d>
 800bd62:	4602      	mov	r2, r0
 800bd64:	460b      	mov	r3, r1
 800bd66:	4630      	mov	r0, r6
 800bd68:	4639      	mov	r1, r7
 800bd6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd6e:	f7f4 fa93 	bl	8000298 <__aeabi_dsub>
 800bd72:	4b23      	ldr	r3, [pc, #140]	; (800be00 <__ieee754_rem_pio2+0x410>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	f7f4 fc47 	bl	8000608 <__aeabi_dmul>
 800bd7a:	460f      	mov	r7, r1
 800bd7c:	4606      	mov	r6, r0
 800bd7e:	f7f4 fef3 	bl	8000b68 <__aeabi_d2iz>
 800bd82:	f7f4 fbd7 	bl	8000534 <__aeabi_i2d>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4630      	mov	r0, r6
 800bd8c:	4639      	mov	r1, r7
 800bd8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd92:	f7f4 fa81 	bl	8000298 <__aeabi_dsub>
 800bd96:	4b1a      	ldr	r3, [pc, #104]	; (800be00 <__ieee754_rem_pio2+0x410>)
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f7f4 fc35 	bl	8000608 <__aeabi_dmul>
 800bd9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bda2:	ad04      	add	r5, sp, #16
 800bda4:	f04f 0803 	mov.w	r8, #3
 800bda8:	46a9      	mov	r9, r5
 800bdaa:	2600      	movs	r6, #0
 800bdac:	2700      	movs	r7, #0
 800bdae:	4632      	mov	r2, r6
 800bdb0:	463b      	mov	r3, r7
 800bdb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bdb6:	46c3      	mov	fp, r8
 800bdb8:	3d08      	subs	r5, #8
 800bdba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bdbe:	f7f4 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d1f3      	bne.n	800bdae <__ieee754_rem_pio2+0x3be>
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <__ieee754_rem_pio2+0x414>)
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	2302      	movs	r3, #2
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4622      	mov	r2, r4
 800bdd0:	465b      	mov	r3, fp
 800bdd2:	4651      	mov	r1, sl
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	f000 f8df 	bl	800bf98 <__kernel_rem_pio2>
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	4683      	mov	fp, r0
 800bde0:	f6bf ae46 	bge.w	800ba70 <__ieee754_rem_pio2+0x80>
 800bde4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bde8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdec:	e9ca 2300 	strd	r2, r3, [sl]
 800bdf0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bdf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdf8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bdfc:	e73a      	b.n	800bc74 <__ieee754_rem_pio2+0x284>
 800bdfe:	bf00      	nop
 800be00:	41700000 	.word	0x41700000
 800be04:	0800d7cc 	.word	0x0800d7cc

0800be08 <__kernel_cos>:
 800be08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0c:	ec57 6b10 	vmov	r6, r7, d0
 800be10:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800be14:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800be18:	ed8d 1b00 	vstr	d1, [sp]
 800be1c:	da07      	bge.n	800be2e <__kernel_cos+0x26>
 800be1e:	ee10 0a10 	vmov	r0, s0
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 fea0 	bl	8000b68 <__aeabi_d2iz>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f000 8088 	beq.w	800bf3e <__kernel_cos+0x136>
 800be2e:	4632      	mov	r2, r6
 800be30:	463b      	mov	r3, r7
 800be32:	4630      	mov	r0, r6
 800be34:	4639      	mov	r1, r7
 800be36:	f7f4 fbe7 	bl	8000608 <__aeabi_dmul>
 800be3a:	4b51      	ldr	r3, [pc, #324]	; (800bf80 <__kernel_cos+0x178>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	460d      	mov	r5, r1
 800be42:	f7f4 fbe1 	bl	8000608 <__aeabi_dmul>
 800be46:	a340      	add	r3, pc, #256	; (adr r3, 800bf48 <__kernel_cos+0x140>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	4682      	mov	sl, r0
 800be4e:	468b      	mov	fp, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fbd8 	bl	8000608 <__aeabi_dmul>
 800be58:	a33d      	add	r3, pc, #244	; (adr r3, 800bf50 <__kernel_cos+0x148>)
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f7f4 fa1d 	bl	800029c <__adddf3>
 800be62:	4622      	mov	r2, r4
 800be64:	462b      	mov	r3, r5
 800be66:	f7f4 fbcf 	bl	8000608 <__aeabi_dmul>
 800be6a:	a33b      	add	r3, pc, #236	; (adr r3, 800bf58 <__kernel_cos+0x150>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	f7f4 fa12 	bl	8000298 <__aeabi_dsub>
 800be74:	4622      	mov	r2, r4
 800be76:	462b      	mov	r3, r5
 800be78:	f7f4 fbc6 	bl	8000608 <__aeabi_dmul>
 800be7c:	a338      	add	r3, pc, #224	; (adr r3, 800bf60 <__kernel_cos+0x158>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fa0b 	bl	800029c <__adddf3>
 800be86:	4622      	mov	r2, r4
 800be88:	462b      	mov	r3, r5
 800be8a:	f7f4 fbbd 	bl	8000608 <__aeabi_dmul>
 800be8e:	a336      	add	r3, pc, #216	; (adr r3, 800bf68 <__kernel_cos+0x160>)
 800be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be94:	f7f4 fa00 	bl	8000298 <__aeabi_dsub>
 800be98:	4622      	mov	r2, r4
 800be9a:	462b      	mov	r3, r5
 800be9c:	f7f4 fbb4 	bl	8000608 <__aeabi_dmul>
 800bea0:	a333      	add	r3, pc, #204	; (adr r3, 800bf70 <__kernel_cos+0x168>)
 800bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea6:	f7f4 f9f9 	bl	800029c <__adddf3>
 800beaa:	4622      	mov	r2, r4
 800beac:	462b      	mov	r3, r5
 800beae:	f7f4 fbab 	bl	8000608 <__aeabi_dmul>
 800beb2:	4622      	mov	r2, r4
 800beb4:	462b      	mov	r3, r5
 800beb6:	f7f4 fba7 	bl	8000608 <__aeabi_dmul>
 800beba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bebe:	4604      	mov	r4, r0
 800bec0:	460d      	mov	r5, r1
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7f4 fb9f 	bl	8000608 <__aeabi_dmul>
 800beca:	460b      	mov	r3, r1
 800becc:	4602      	mov	r2, r0
 800bece:	4629      	mov	r1, r5
 800bed0:	4620      	mov	r0, r4
 800bed2:	f7f4 f9e1 	bl	8000298 <__aeabi_dsub>
 800bed6:	4b2b      	ldr	r3, [pc, #172]	; (800bf84 <__kernel_cos+0x17c>)
 800bed8:	4598      	cmp	r8, r3
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	dc10      	bgt.n	800bf02 <__kernel_cos+0xfa>
 800bee0:	4602      	mov	r2, r0
 800bee2:	460b      	mov	r3, r1
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f9d6 	bl	8000298 <__aeabi_dsub>
 800beec:	460b      	mov	r3, r1
 800beee:	4926      	ldr	r1, [pc, #152]	; (800bf88 <__kernel_cos+0x180>)
 800bef0:	4602      	mov	r2, r0
 800bef2:	2000      	movs	r0, #0
 800bef4:	f7f4 f9d0 	bl	8000298 <__aeabi_dsub>
 800bef8:	ec41 0b10 	vmov	d0, r0, r1
 800befc:	b003      	add	sp, #12
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	4b22      	ldr	r3, [pc, #136]	; (800bf8c <__kernel_cos+0x184>)
 800bf04:	4920      	ldr	r1, [pc, #128]	; (800bf88 <__kernel_cos+0x180>)
 800bf06:	4598      	cmp	r8, r3
 800bf08:	bfcc      	ite	gt
 800bf0a:	4d21      	ldrgt	r5, [pc, #132]	; (800bf90 <__kernel_cos+0x188>)
 800bf0c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800bf10:	2400      	movs	r4, #0
 800bf12:	4622      	mov	r2, r4
 800bf14:	462b      	mov	r3, r5
 800bf16:	2000      	movs	r0, #0
 800bf18:	f7f4 f9be 	bl	8000298 <__aeabi_dsub>
 800bf1c:	4622      	mov	r2, r4
 800bf1e:	4680      	mov	r8, r0
 800bf20:	4689      	mov	r9, r1
 800bf22:	462b      	mov	r3, r5
 800bf24:	4650      	mov	r0, sl
 800bf26:	4659      	mov	r1, fp
 800bf28:	f7f4 f9b6 	bl	8000298 <__aeabi_dsub>
 800bf2c:	4632      	mov	r2, r6
 800bf2e:	463b      	mov	r3, r7
 800bf30:	f7f4 f9b2 	bl	8000298 <__aeabi_dsub>
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	e7da      	b.n	800bef4 <__kernel_cos+0xec>
 800bf3e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800bf78 <__kernel_cos+0x170>
 800bf42:	e7db      	b.n	800befc <__kernel_cos+0xf4>
 800bf44:	f3af 8000 	nop.w
 800bf48:	be8838d4 	.word	0xbe8838d4
 800bf4c:	bda8fae9 	.word	0xbda8fae9
 800bf50:	bdb4b1c4 	.word	0xbdb4b1c4
 800bf54:	3e21ee9e 	.word	0x3e21ee9e
 800bf58:	809c52ad 	.word	0x809c52ad
 800bf5c:	3e927e4f 	.word	0x3e927e4f
 800bf60:	19cb1590 	.word	0x19cb1590
 800bf64:	3efa01a0 	.word	0x3efa01a0
 800bf68:	16c15177 	.word	0x16c15177
 800bf6c:	3f56c16c 	.word	0x3f56c16c
 800bf70:	5555554c 	.word	0x5555554c
 800bf74:	3fa55555 	.word	0x3fa55555
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	3ff00000 	.word	0x3ff00000
 800bf80:	3fe00000 	.word	0x3fe00000
 800bf84:	3fd33332 	.word	0x3fd33332
 800bf88:	3ff00000 	.word	0x3ff00000
 800bf8c:	3fe90000 	.word	0x3fe90000
 800bf90:	3fd20000 	.word	0x3fd20000
 800bf94:	00000000 	.word	0x00000000

0800bf98 <__kernel_rem_pio2>:
 800bf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9c:	ed2d 8b02 	vpush	{d8}
 800bfa0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800bfa4:	f112 0f14 	cmn.w	r2, #20
 800bfa8:	9308      	str	r3, [sp, #32]
 800bfaa:	9101      	str	r1, [sp, #4]
 800bfac:	4bc4      	ldr	r3, [pc, #784]	; (800c2c0 <__kernel_rem_pio2+0x328>)
 800bfae:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800bfb0:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	9b08      	ldr	r3, [sp, #32]
 800bfba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bfbe:	bfa8      	it	ge
 800bfc0:	1ed4      	subge	r4, r2, #3
 800bfc2:	9306      	str	r3, [sp, #24]
 800bfc4:	bfb2      	itee	lt
 800bfc6:	2400      	movlt	r4, #0
 800bfc8:	2318      	movge	r3, #24
 800bfca:	fb94 f4f3 	sdivge	r4, r4, r3
 800bfce:	f06f 0317 	mvn.w	r3, #23
 800bfd2:	fb04 3303 	mla	r3, r4, r3, r3
 800bfd6:	eb03 0a02 	add.w	sl, r3, r2
 800bfda:	9b02      	ldr	r3, [sp, #8]
 800bfdc:	9a06      	ldr	r2, [sp, #24]
 800bfde:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c2b0 <__kernel_rem_pio2+0x318>
 800bfe2:	eb03 0802 	add.w	r8, r3, r2
 800bfe6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800bfe8:	1aa7      	subs	r7, r4, r2
 800bfea:	ae22      	add	r6, sp, #136	; 0x88
 800bfec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bff0:	2500      	movs	r5, #0
 800bff2:	4545      	cmp	r5, r8
 800bff4:	dd13      	ble.n	800c01e <__kernel_rem_pio2+0x86>
 800bff6:	9b08      	ldr	r3, [sp, #32]
 800bff8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c2b0 <__kernel_rem_pio2+0x318>
 800bffc:	aa22      	add	r2, sp, #136	; 0x88
 800bffe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c002:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c006:	f04f 0800 	mov.w	r8, #0
 800c00a:	9b02      	ldr	r3, [sp, #8]
 800c00c:	4598      	cmp	r8, r3
 800c00e:	dc2f      	bgt.n	800c070 <__kernel_rem_pio2+0xd8>
 800c010:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c014:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c018:	462f      	mov	r7, r5
 800c01a:	2600      	movs	r6, #0
 800c01c:	e01b      	b.n	800c056 <__kernel_rem_pio2+0xbe>
 800c01e:	42ef      	cmn	r7, r5
 800c020:	d407      	bmi.n	800c032 <__kernel_rem_pio2+0x9a>
 800c022:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c026:	f7f4 fa85 	bl	8000534 <__aeabi_i2d>
 800c02a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c02e:	3501      	adds	r5, #1
 800c030:	e7df      	b.n	800bff2 <__kernel_rem_pio2+0x5a>
 800c032:	ec51 0b18 	vmov	r0, r1, d8
 800c036:	e7f8      	b.n	800c02a <__kernel_rem_pio2+0x92>
 800c038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c03c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c040:	f7f4 fae2 	bl	8000608 <__aeabi_dmul>
 800c044:	4602      	mov	r2, r0
 800c046:	460b      	mov	r3, r1
 800c048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c054:	3601      	adds	r6, #1
 800c056:	9b06      	ldr	r3, [sp, #24]
 800c058:	429e      	cmp	r6, r3
 800c05a:	f1a7 0708 	sub.w	r7, r7, #8
 800c05e:	ddeb      	ble.n	800c038 <__kernel_rem_pio2+0xa0>
 800c060:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c064:	f108 0801 	add.w	r8, r8, #1
 800c068:	ecab 7b02 	vstmia	fp!, {d7}
 800c06c:	3508      	adds	r5, #8
 800c06e:	e7cc      	b.n	800c00a <__kernel_rem_pio2+0x72>
 800c070:	9b02      	ldr	r3, [sp, #8]
 800c072:	aa0e      	add	r2, sp, #56	; 0x38
 800c074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c078:	930d      	str	r3, [sp, #52]	; 0x34
 800c07a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c07c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c080:	9c02      	ldr	r4, [sp, #8]
 800c082:	930c      	str	r3, [sp, #48]	; 0x30
 800c084:	00e3      	lsls	r3, r4, #3
 800c086:	930a      	str	r3, [sp, #40]	; 0x28
 800c088:	ab9a      	add	r3, sp, #616	; 0x268
 800c08a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c08e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c092:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c096:	ab72      	add	r3, sp, #456	; 0x1c8
 800c098:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c09c:	46c3      	mov	fp, r8
 800c09e:	46a1      	mov	r9, r4
 800c0a0:	f1b9 0f00 	cmp.w	r9, #0
 800c0a4:	f1a5 0508 	sub.w	r5, r5, #8
 800c0a8:	dc77      	bgt.n	800c19a <__kernel_rem_pio2+0x202>
 800c0aa:	ec47 6b10 	vmov	d0, r6, r7
 800c0ae:	4650      	mov	r0, sl
 800c0b0:	f000 fc02 	bl	800c8b8 <scalbn>
 800c0b4:	ec57 6b10 	vmov	r6, r7, d0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c0be:	ee10 0a10 	vmov	r0, s0
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 faa0 	bl	8000608 <__aeabi_dmul>
 800c0c8:	ec41 0b10 	vmov	d0, r0, r1
 800c0cc:	f000 fb74 	bl	800c7b8 <floor>
 800c0d0:	4b7c      	ldr	r3, [pc, #496]	; (800c2c4 <__kernel_rem_pio2+0x32c>)
 800c0d2:	ec51 0b10 	vmov	r0, r1, d0
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f7f4 fa96 	bl	8000608 <__aeabi_dmul>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4630      	mov	r0, r6
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 f8d8 	bl	8000298 <__aeabi_dsub>
 800c0e8:	460f      	mov	r7, r1
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	f7f4 fd3c 	bl	8000b68 <__aeabi_d2iz>
 800c0f0:	9004      	str	r0, [sp, #16]
 800c0f2:	f7f4 fa1f 	bl	8000534 <__aeabi_i2d>
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	f7f4 f8cb 	bl	8000298 <__aeabi_dsub>
 800c102:	f1ba 0f00 	cmp.w	sl, #0
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	dd6d      	ble.n	800c1e8 <__kernel_rem_pio2+0x250>
 800c10c:	1e62      	subs	r2, r4, #1
 800c10e:	ab0e      	add	r3, sp, #56	; 0x38
 800c110:	9d04      	ldr	r5, [sp, #16]
 800c112:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c116:	f1ca 0118 	rsb	r1, sl, #24
 800c11a:	fa40 f301 	asr.w	r3, r0, r1
 800c11e:	441d      	add	r5, r3
 800c120:	408b      	lsls	r3, r1
 800c122:	1ac0      	subs	r0, r0, r3
 800c124:	ab0e      	add	r3, sp, #56	; 0x38
 800c126:	9504      	str	r5, [sp, #16]
 800c128:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c12c:	f1ca 0317 	rsb	r3, sl, #23
 800c130:	fa40 fb03 	asr.w	fp, r0, r3
 800c134:	f1bb 0f00 	cmp.w	fp, #0
 800c138:	dd65      	ble.n	800c206 <__kernel_rem_pio2+0x26e>
 800c13a:	9b04      	ldr	r3, [sp, #16]
 800c13c:	2200      	movs	r2, #0
 800c13e:	3301      	adds	r3, #1
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	4615      	mov	r5, r2
 800c144:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c148:	4294      	cmp	r4, r2
 800c14a:	f300 809c 	bgt.w	800c286 <__kernel_rem_pio2+0x2ee>
 800c14e:	f1ba 0f00 	cmp.w	sl, #0
 800c152:	dd07      	ble.n	800c164 <__kernel_rem_pio2+0x1cc>
 800c154:	f1ba 0f01 	cmp.w	sl, #1
 800c158:	f000 80c0 	beq.w	800c2dc <__kernel_rem_pio2+0x344>
 800c15c:	f1ba 0f02 	cmp.w	sl, #2
 800c160:	f000 80c6 	beq.w	800c2f0 <__kernel_rem_pio2+0x358>
 800c164:	f1bb 0f02 	cmp.w	fp, #2
 800c168:	d14d      	bne.n	800c206 <__kernel_rem_pio2+0x26e>
 800c16a:	4632      	mov	r2, r6
 800c16c:	463b      	mov	r3, r7
 800c16e:	4956      	ldr	r1, [pc, #344]	; (800c2c8 <__kernel_rem_pio2+0x330>)
 800c170:	2000      	movs	r0, #0
 800c172:	f7f4 f891 	bl	8000298 <__aeabi_dsub>
 800c176:	4606      	mov	r6, r0
 800c178:	460f      	mov	r7, r1
 800c17a:	2d00      	cmp	r5, #0
 800c17c:	d043      	beq.n	800c206 <__kernel_rem_pio2+0x26e>
 800c17e:	4650      	mov	r0, sl
 800c180:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c2b8 <__kernel_rem_pio2+0x320>
 800c184:	f000 fb98 	bl	800c8b8 <scalbn>
 800c188:	4630      	mov	r0, r6
 800c18a:	4639      	mov	r1, r7
 800c18c:	ec53 2b10 	vmov	r2, r3, d0
 800c190:	f7f4 f882 	bl	8000298 <__aeabi_dsub>
 800c194:	4606      	mov	r6, r0
 800c196:	460f      	mov	r7, r1
 800c198:	e035      	b.n	800c206 <__kernel_rem_pio2+0x26e>
 800c19a:	4b4c      	ldr	r3, [pc, #304]	; (800c2cc <__kernel_rem_pio2+0x334>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	f7f4 fa31 	bl	8000608 <__aeabi_dmul>
 800c1a6:	f7f4 fcdf 	bl	8000b68 <__aeabi_d2iz>
 800c1aa:	f7f4 f9c3 	bl	8000534 <__aeabi_i2d>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	ec43 2b18 	vmov	d8, r2, r3
 800c1b6:	4b46      	ldr	r3, [pc, #280]	; (800c2d0 <__kernel_rem_pio2+0x338>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f7f4 fa25 	bl	8000608 <__aeabi_dmul>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	f7f4 f867 	bl	8000298 <__aeabi_dsub>
 800c1ca:	f7f4 fccd 	bl	8000b68 <__aeabi_d2iz>
 800c1ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1d2:	f84b 0b04 	str.w	r0, [fp], #4
 800c1d6:	ec51 0b18 	vmov	r0, r1, d8
 800c1da:	f7f4 f85f 	bl	800029c <__adddf3>
 800c1de:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c1e2:	4606      	mov	r6, r0
 800c1e4:	460f      	mov	r7, r1
 800c1e6:	e75b      	b.n	800c0a0 <__kernel_rem_pio2+0x108>
 800c1e8:	d106      	bne.n	800c1f8 <__kernel_rem_pio2+0x260>
 800c1ea:	1e63      	subs	r3, r4, #1
 800c1ec:	aa0e      	add	r2, sp, #56	; 0x38
 800c1ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c1f2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c1f6:	e79d      	b.n	800c134 <__kernel_rem_pio2+0x19c>
 800c1f8:	4b36      	ldr	r3, [pc, #216]	; (800c2d4 <__kernel_rem_pio2+0x33c>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f7f4 fc8a 	bl	8000b14 <__aeabi_dcmpge>
 800c200:	2800      	cmp	r0, #0
 800c202:	d13d      	bne.n	800c280 <__kernel_rem_pio2+0x2e8>
 800c204:	4683      	mov	fp, r0
 800c206:	2200      	movs	r2, #0
 800c208:	2300      	movs	r3, #0
 800c20a:	4630      	mov	r0, r6
 800c20c:	4639      	mov	r1, r7
 800c20e:	f7f4 fc63 	bl	8000ad8 <__aeabi_dcmpeq>
 800c212:	2800      	cmp	r0, #0
 800c214:	f000 80c0 	beq.w	800c398 <__kernel_rem_pio2+0x400>
 800c218:	1e65      	subs	r5, r4, #1
 800c21a:	462b      	mov	r3, r5
 800c21c:	2200      	movs	r2, #0
 800c21e:	9902      	ldr	r1, [sp, #8]
 800c220:	428b      	cmp	r3, r1
 800c222:	da6c      	bge.n	800c2fe <__kernel_rem_pio2+0x366>
 800c224:	2a00      	cmp	r2, #0
 800c226:	f000 8089 	beq.w	800c33c <__kernel_rem_pio2+0x3a4>
 800c22a:	ab0e      	add	r3, sp, #56	; 0x38
 800c22c:	f1aa 0a18 	sub.w	sl, sl, #24
 800c230:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 80ad 	beq.w	800c394 <__kernel_rem_pio2+0x3fc>
 800c23a:	4650      	mov	r0, sl
 800c23c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c2b8 <__kernel_rem_pio2+0x320>
 800c240:	f000 fb3a 	bl	800c8b8 <scalbn>
 800c244:	ab9a      	add	r3, sp, #616	; 0x268
 800c246:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c24a:	ec57 6b10 	vmov	r6, r7, d0
 800c24e:	00ec      	lsls	r4, r5, #3
 800c250:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c254:	46aa      	mov	sl, r5
 800c256:	f1ba 0f00 	cmp.w	sl, #0
 800c25a:	f280 80d6 	bge.w	800c40a <__kernel_rem_pio2+0x472>
 800c25e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c2b0 <__kernel_rem_pio2+0x318>
 800c262:	462e      	mov	r6, r5
 800c264:	2e00      	cmp	r6, #0
 800c266:	f2c0 8104 	blt.w	800c472 <__kernel_rem_pio2+0x4da>
 800c26a:	ab72      	add	r3, sp, #456	; 0x1c8
 800c26c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c270:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c2d8 <__kernel_rem_pio2+0x340>
 800c274:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c278:	f04f 0800 	mov.w	r8, #0
 800c27c:	1baf      	subs	r7, r5, r6
 800c27e:	e0ea      	b.n	800c456 <__kernel_rem_pio2+0x4be>
 800c280:	f04f 0b02 	mov.w	fp, #2
 800c284:	e759      	b.n	800c13a <__kernel_rem_pio2+0x1a2>
 800c286:	f8d8 3000 	ldr.w	r3, [r8]
 800c28a:	b955      	cbnz	r5, 800c2a2 <__kernel_rem_pio2+0x30a>
 800c28c:	b123      	cbz	r3, 800c298 <__kernel_rem_pio2+0x300>
 800c28e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c292:	f8c8 3000 	str.w	r3, [r8]
 800c296:	2301      	movs	r3, #1
 800c298:	3201      	adds	r2, #1
 800c29a:	f108 0804 	add.w	r8, r8, #4
 800c29e:	461d      	mov	r5, r3
 800c2a0:	e752      	b.n	800c148 <__kernel_rem_pio2+0x1b0>
 800c2a2:	1acb      	subs	r3, r1, r3
 800c2a4:	f8c8 3000 	str.w	r3, [r8]
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	e7f5      	b.n	800c298 <__kernel_rem_pio2+0x300>
 800c2ac:	f3af 8000 	nop.w
	...
 800c2bc:	3ff00000 	.word	0x3ff00000
 800c2c0:	0800d918 	.word	0x0800d918
 800c2c4:	40200000 	.word	0x40200000
 800c2c8:	3ff00000 	.word	0x3ff00000
 800c2cc:	3e700000 	.word	0x3e700000
 800c2d0:	41700000 	.word	0x41700000
 800c2d4:	3fe00000 	.word	0x3fe00000
 800c2d8:	0800d8d8 	.word	0x0800d8d8
 800c2dc:	1e62      	subs	r2, r4, #1
 800c2de:	ab0e      	add	r3, sp, #56	; 0x38
 800c2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c2e8:	a90e      	add	r1, sp, #56	; 0x38
 800c2ea:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c2ee:	e739      	b.n	800c164 <__kernel_rem_pio2+0x1cc>
 800c2f0:	1e62      	subs	r2, r4, #1
 800c2f2:	ab0e      	add	r3, sp, #56	; 0x38
 800c2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c2fc:	e7f4      	b.n	800c2e8 <__kernel_rem_pio2+0x350>
 800c2fe:	a90e      	add	r1, sp, #56	; 0x38
 800c300:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c304:	3b01      	subs	r3, #1
 800c306:	430a      	orrs	r2, r1
 800c308:	e789      	b.n	800c21e <__kernel_rem_pio2+0x286>
 800c30a:	3301      	adds	r3, #1
 800c30c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c310:	2900      	cmp	r1, #0
 800c312:	d0fa      	beq.n	800c30a <__kernel_rem_pio2+0x372>
 800c314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c316:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c31a:	446a      	add	r2, sp
 800c31c:	3a98      	subs	r2, #152	; 0x98
 800c31e:	920a      	str	r2, [sp, #40]	; 0x28
 800c320:	9a08      	ldr	r2, [sp, #32]
 800c322:	18e3      	adds	r3, r4, r3
 800c324:	18a5      	adds	r5, r4, r2
 800c326:	aa22      	add	r2, sp, #136	; 0x88
 800c328:	f104 0801 	add.w	r8, r4, #1
 800c32c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c330:	9304      	str	r3, [sp, #16]
 800c332:	9b04      	ldr	r3, [sp, #16]
 800c334:	4543      	cmp	r3, r8
 800c336:	da04      	bge.n	800c342 <__kernel_rem_pio2+0x3aa>
 800c338:	461c      	mov	r4, r3
 800c33a:	e6a3      	b.n	800c084 <__kernel_rem_pio2+0xec>
 800c33c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c33e:	2301      	movs	r3, #1
 800c340:	e7e4      	b.n	800c30c <__kernel_rem_pio2+0x374>
 800c342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c344:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c348:	f7f4 f8f4 	bl	8000534 <__aeabi_i2d>
 800c34c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c352:	46ab      	mov	fp, r5
 800c354:	461c      	mov	r4, r3
 800c356:	f04f 0900 	mov.w	r9, #0
 800c35a:	2600      	movs	r6, #0
 800c35c:	2700      	movs	r7, #0
 800c35e:	9b06      	ldr	r3, [sp, #24]
 800c360:	4599      	cmp	r9, r3
 800c362:	dd06      	ble.n	800c372 <__kernel_rem_pio2+0x3da>
 800c364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c366:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c36a:	f108 0801 	add.w	r8, r8, #1
 800c36e:	930a      	str	r3, [sp, #40]	; 0x28
 800c370:	e7df      	b.n	800c332 <__kernel_rem_pio2+0x39a>
 800c372:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c376:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c37a:	f7f4 f945 	bl	8000608 <__aeabi_dmul>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4630      	mov	r0, r6
 800c384:	4639      	mov	r1, r7
 800c386:	f7f3 ff89 	bl	800029c <__adddf3>
 800c38a:	f109 0901 	add.w	r9, r9, #1
 800c38e:	4606      	mov	r6, r0
 800c390:	460f      	mov	r7, r1
 800c392:	e7e4      	b.n	800c35e <__kernel_rem_pio2+0x3c6>
 800c394:	3d01      	subs	r5, #1
 800c396:	e748      	b.n	800c22a <__kernel_rem_pio2+0x292>
 800c398:	ec47 6b10 	vmov	d0, r6, r7
 800c39c:	f1ca 0000 	rsb	r0, sl, #0
 800c3a0:	f000 fa8a 	bl	800c8b8 <scalbn>
 800c3a4:	ec57 6b10 	vmov	r6, r7, d0
 800c3a8:	4ba0      	ldr	r3, [pc, #640]	; (800c62c <__kernel_rem_pio2+0x694>)
 800c3aa:	ee10 0a10 	vmov	r0, s0
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	f7f4 fbaf 	bl	8000b14 <__aeabi_dcmpge>
 800c3b6:	b1f8      	cbz	r0, 800c3f8 <__kernel_rem_pio2+0x460>
 800c3b8:	4b9d      	ldr	r3, [pc, #628]	; (800c630 <__kernel_rem_pio2+0x698>)
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	4630      	mov	r0, r6
 800c3be:	4639      	mov	r1, r7
 800c3c0:	f7f4 f922 	bl	8000608 <__aeabi_dmul>
 800c3c4:	f7f4 fbd0 	bl	8000b68 <__aeabi_d2iz>
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	f7f4 f8b3 	bl	8000534 <__aeabi_i2d>
 800c3ce:	4b97      	ldr	r3, [pc, #604]	; (800c62c <__kernel_rem_pio2+0x694>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f7f4 f919 	bl	8000608 <__aeabi_dmul>
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4602      	mov	r2, r0
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4630      	mov	r0, r6
 800c3de:	f7f3 ff5b 	bl	8000298 <__aeabi_dsub>
 800c3e2:	f7f4 fbc1 	bl	8000b68 <__aeabi_d2iz>
 800c3e6:	1c65      	adds	r5, r4, #1
 800c3e8:	ab0e      	add	r3, sp, #56	; 0x38
 800c3ea:	f10a 0a18 	add.w	sl, sl, #24
 800c3ee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c3f2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c3f6:	e720      	b.n	800c23a <__kernel_rem_pio2+0x2a2>
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fbb4 	bl	8000b68 <__aeabi_d2iz>
 800c400:	ab0e      	add	r3, sp, #56	; 0x38
 800c402:	4625      	mov	r5, r4
 800c404:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c408:	e717      	b.n	800c23a <__kernel_rem_pio2+0x2a2>
 800c40a:	ab0e      	add	r3, sp, #56	; 0x38
 800c40c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c410:	f7f4 f890 	bl	8000534 <__aeabi_i2d>
 800c414:	4632      	mov	r2, r6
 800c416:	463b      	mov	r3, r7
 800c418:	f7f4 f8f6 	bl	8000608 <__aeabi_dmul>
 800c41c:	4b84      	ldr	r3, [pc, #528]	; (800c630 <__kernel_rem_pio2+0x698>)
 800c41e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c422:	2200      	movs	r2, #0
 800c424:	4630      	mov	r0, r6
 800c426:	4639      	mov	r1, r7
 800c428:	f7f4 f8ee 	bl	8000608 <__aeabi_dmul>
 800c42c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c430:	4606      	mov	r6, r0
 800c432:	460f      	mov	r7, r1
 800c434:	e70f      	b.n	800c256 <__kernel_rem_pio2+0x2be>
 800c436:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c43a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c43e:	f7f4 f8e3 	bl	8000608 <__aeabi_dmul>
 800c442:	4602      	mov	r2, r0
 800c444:	460b      	mov	r3, r1
 800c446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c44a:	f7f3 ff27 	bl	800029c <__adddf3>
 800c44e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c452:	f108 0801 	add.w	r8, r8, #1
 800c456:	9b02      	ldr	r3, [sp, #8]
 800c458:	4598      	cmp	r8, r3
 800c45a:	dc01      	bgt.n	800c460 <__kernel_rem_pio2+0x4c8>
 800c45c:	45b8      	cmp	r8, r7
 800c45e:	ddea      	ble.n	800c436 <__kernel_rem_pio2+0x49e>
 800c460:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c464:	ab4a      	add	r3, sp, #296	; 0x128
 800c466:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c46a:	ed87 7b00 	vstr	d7, [r7]
 800c46e:	3e01      	subs	r6, #1
 800c470:	e6f8      	b.n	800c264 <__kernel_rem_pio2+0x2cc>
 800c472:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c474:	2b02      	cmp	r3, #2
 800c476:	dc0b      	bgt.n	800c490 <__kernel_rem_pio2+0x4f8>
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dc35      	bgt.n	800c4e8 <__kernel_rem_pio2+0x550>
 800c47c:	d059      	beq.n	800c532 <__kernel_rem_pio2+0x59a>
 800c47e:	9b04      	ldr	r3, [sp, #16]
 800c480:	f003 0007 	and.w	r0, r3, #7
 800c484:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c488:	ecbd 8b02 	vpop	{d8}
 800c48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c490:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c492:	2b03      	cmp	r3, #3
 800c494:	d1f3      	bne.n	800c47e <__kernel_rem_pio2+0x4e6>
 800c496:	ab4a      	add	r3, sp, #296	; 0x128
 800c498:	4423      	add	r3, r4
 800c49a:	9306      	str	r3, [sp, #24]
 800c49c:	461c      	mov	r4, r3
 800c49e:	469a      	mov	sl, r3
 800c4a0:	9502      	str	r5, [sp, #8]
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f1aa 0a08 	sub.w	sl, sl, #8
 800c4aa:	dc6b      	bgt.n	800c584 <__kernel_rem_pio2+0x5ec>
 800c4ac:	46aa      	mov	sl, r5
 800c4ae:	f1ba 0f01 	cmp.w	sl, #1
 800c4b2:	f1a4 0408 	sub.w	r4, r4, #8
 800c4b6:	f300 8085 	bgt.w	800c5c4 <__kernel_rem_pio2+0x62c>
 800c4ba:	9c06      	ldr	r4, [sp, #24]
 800c4bc:	2000      	movs	r0, #0
 800c4be:	3408      	adds	r4, #8
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	2d01      	cmp	r5, #1
 800c4c4:	f300 809d 	bgt.w	800c602 <__kernel_rem_pio2+0x66a>
 800c4c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c4cc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c4d0:	f1bb 0f00 	cmp.w	fp, #0
 800c4d4:	f040 809b 	bne.w	800c60e <__kernel_rem_pio2+0x676>
 800c4d8:	9b01      	ldr	r3, [sp, #4]
 800c4da:	e9c3 5600 	strd	r5, r6, [r3]
 800c4de:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c4e2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c4e6:	e7ca      	b.n	800c47e <__kernel_rem_pio2+0x4e6>
 800c4e8:	3408      	adds	r4, #8
 800c4ea:	ab4a      	add	r3, sp, #296	; 0x128
 800c4ec:	441c      	add	r4, r3
 800c4ee:	462e      	mov	r6, r5
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	2e00      	cmp	r6, #0
 800c4f6:	da36      	bge.n	800c566 <__kernel_rem_pio2+0x5ce>
 800c4f8:	f1bb 0f00 	cmp.w	fp, #0
 800c4fc:	d039      	beq.n	800c572 <__kernel_rem_pio2+0x5da>
 800c4fe:	4602      	mov	r2, r0
 800c500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c504:	9c01      	ldr	r4, [sp, #4]
 800c506:	e9c4 2300 	strd	r2, r3, [r4]
 800c50a:	4602      	mov	r2, r0
 800c50c:	460b      	mov	r3, r1
 800c50e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c512:	f7f3 fec1 	bl	8000298 <__aeabi_dsub>
 800c516:	ae4c      	add	r6, sp, #304	; 0x130
 800c518:	2401      	movs	r4, #1
 800c51a:	42a5      	cmp	r5, r4
 800c51c:	da2c      	bge.n	800c578 <__kernel_rem_pio2+0x5e0>
 800c51e:	f1bb 0f00 	cmp.w	fp, #0
 800c522:	d002      	beq.n	800c52a <__kernel_rem_pio2+0x592>
 800c524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c528:	4619      	mov	r1, r3
 800c52a:	9b01      	ldr	r3, [sp, #4]
 800c52c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c530:	e7a5      	b.n	800c47e <__kernel_rem_pio2+0x4e6>
 800c532:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c536:	eb0d 0403 	add.w	r4, sp, r3
 800c53a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c53e:	2000      	movs	r0, #0
 800c540:	2100      	movs	r1, #0
 800c542:	2d00      	cmp	r5, #0
 800c544:	da09      	bge.n	800c55a <__kernel_rem_pio2+0x5c2>
 800c546:	f1bb 0f00 	cmp.w	fp, #0
 800c54a:	d002      	beq.n	800c552 <__kernel_rem_pio2+0x5ba>
 800c54c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c550:	4619      	mov	r1, r3
 800c552:	9b01      	ldr	r3, [sp, #4]
 800c554:	e9c3 0100 	strd	r0, r1, [r3]
 800c558:	e791      	b.n	800c47e <__kernel_rem_pio2+0x4e6>
 800c55a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c55e:	f7f3 fe9d 	bl	800029c <__adddf3>
 800c562:	3d01      	subs	r5, #1
 800c564:	e7ed      	b.n	800c542 <__kernel_rem_pio2+0x5aa>
 800c566:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c56a:	f7f3 fe97 	bl	800029c <__adddf3>
 800c56e:	3e01      	subs	r6, #1
 800c570:	e7c0      	b.n	800c4f4 <__kernel_rem_pio2+0x55c>
 800c572:	4602      	mov	r2, r0
 800c574:	460b      	mov	r3, r1
 800c576:	e7c5      	b.n	800c504 <__kernel_rem_pio2+0x56c>
 800c578:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c57c:	f7f3 fe8e 	bl	800029c <__adddf3>
 800c580:	3401      	adds	r4, #1
 800c582:	e7ca      	b.n	800c51a <__kernel_rem_pio2+0x582>
 800c584:	e9da 8900 	ldrd	r8, r9, [sl]
 800c588:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c58c:	9b02      	ldr	r3, [sp, #8]
 800c58e:	3b01      	subs	r3, #1
 800c590:	9302      	str	r3, [sp, #8]
 800c592:	4632      	mov	r2, r6
 800c594:	463b      	mov	r3, r7
 800c596:	4640      	mov	r0, r8
 800c598:	4649      	mov	r1, r9
 800c59a:	f7f3 fe7f 	bl	800029c <__adddf3>
 800c59e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	f7f3 fe75 	bl	8000298 <__aeabi_dsub>
 800c5ae:	4632      	mov	r2, r6
 800c5b0:	463b      	mov	r3, r7
 800c5b2:	f7f3 fe73 	bl	800029c <__adddf3>
 800c5b6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c5ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c5be:	ed8a 7b00 	vstr	d7, [sl]
 800c5c2:	e76e      	b.n	800c4a2 <__kernel_rem_pio2+0x50a>
 800c5c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c5c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c5cc:	4640      	mov	r0, r8
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	4649      	mov	r1, r9
 800c5d4:	f7f3 fe62 	bl	800029c <__adddf3>
 800c5d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5dc:	4602      	mov	r2, r0
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4640      	mov	r0, r8
 800c5e2:	4649      	mov	r1, r9
 800c5e4:	f7f3 fe58 	bl	8000298 <__aeabi_dsub>
 800c5e8:	4632      	mov	r2, r6
 800c5ea:	463b      	mov	r3, r7
 800c5ec:	f7f3 fe56 	bl	800029c <__adddf3>
 800c5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c5f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5f8:	ed84 7b00 	vstr	d7, [r4]
 800c5fc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c600:	e755      	b.n	800c4ae <__kernel_rem_pio2+0x516>
 800c602:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c606:	f7f3 fe49 	bl	800029c <__adddf3>
 800c60a:	3d01      	subs	r5, #1
 800c60c:	e759      	b.n	800c4c2 <__kernel_rem_pio2+0x52a>
 800c60e:	9b01      	ldr	r3, [sp, #4]
 800c610:	9a01      	ldr	r2, [sp, #4]
 800c612:	601d      	str	r5, [r3, #0]
 800c614:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c618:	605c      	str	r4, [r3, #4]
 800c61a:	609f      	str	r7, [r3, #8]
 800c61c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c620:	60d3      	str	r3, [r2, #12]
 800c622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c626:	6110      	str	r0, [r2, #16]
 800c628:	6153      	str	r3, [r2, #20]
 800c62a:	e728      	b.n	800c47e <__kernel_rem_pio2+0x4e6>
 800c62c:	41700000 	.word	0x41700000
 800c630:	3e700000 	.word	0x3e700000
 800c634:	00000000 	.word	0x00000000

0800c638 <__kernel_sin>:
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	ed2d 8b04 	vpush	{d8-d9}
 800c640:	eeb0 8a41 	vmov.f32	s16, s2
 800c644:	eef0 8a61 	vmov.f32	s17, s3
 800c648:	ec55 4b10 	vmov	r4, r5, d0
 800c64c:	b083      	sub	sp, #12
 800c64e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c652:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c656:	9001      	str	r0, [sp, #4]
 800c658:	da06      	bge.n	800c668 <__kernel_sin+0x30>
 800c65a:	ee10 0a10 	vmov	r0, s0
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f4 fa82 	bl	8000b68 <__aeabi_d2iz>
 800c664:	2800      	cmp	r0, #0
 800c666:	d051      	beq.n	800c70c <__kernel_sin+0xd4>
 800c668:	4622      	mov	r2, r4
 800c66a:	462b      	mov	r3, r5
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	4682      	mov	sl, r0
 800c676:	468b      	mov	fp, r1
 800c678:	4602      	mov	r2, r0
 800c67a:	460b      	mov	r3, r1
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffc2 	bl	8000608 <__aeabi_dmul>
 800c684:	a341      	add	r3, pc, #260	; (adr r3, 800c78c <__kernel_sin+0x154>)
 800c686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c68a:	4680      	mov	r8, r0
 800c68c:	4689      	mov	r9, r1
 800c68e:	4650      	mov	r0, sl
 800c690:	4659      	mov	r1, fp
 800c692:	f7f3 ffb9 	bl	8000608 <__aeabi_dmul>
 800c696:	a33f      	add	r3, pc, #252	; (adr r3, 800c794 <__kernel_sin+0x15c>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f7f3 fdfc 	bl	8000298 <__aeabi_dsub>
 800c6a0:	4652      	mov	r2, sl
 800c6a2:	465b      	mov	r3, fp
 800c6a4:	f7f3 ffb0 	bl	8000608 <__aeabi_dmul>
 800c6a8:	a33c      	add	r3, pc, #240	; (adr r3, 800c79c <__kernel_sin+0x164>)
 800c6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ae:	f7f3 fdf5 	bl	800029c <__adddf3>
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	465b      	mov	r3, fp
 800c6b6:	f7f3 ffa7 	bl	8000608 <__aeabi_dmul>
 800c6ba:	a33a      	add	r3, pc, #232	; (adr r3, 800c7a4 <__kernel_sin+0x16c>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 fdea 	bl	8000298 <__aeabi_dsub>
 800c6c4:	4652      	mov	r2, sl
 800c6c6:	465b      	mov	r3, fp
 800c6c8:	f7f3 ff9e 	bl	8000608 <__aeabi_dmul>
 800c6cc:	a337      	add	r3, pc, #220	; (adr r3, 800c7ac <__kernel_sin+0x174>)
 800c6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d2:	f7f3 fde3 	bl	800029c <__adddf3>
 800c6d6:	9b01      	ldr	r3, [sp, #4]
 800c6d8:	4606      	mov	r6, r0
 800c6da:	460f      	mov	r7, r1
 800c6dc:	b9eb      	cbnz	r3, 800c71a <__kernel_sin+0xe2>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4650      	mov	r0, sl
 800c6e4:	4659      	mov	r1, fp
 800c6e6:	f7f3 ff8f 	bl	8000608 <__aeabi_dmul>
 800c6ea:	a325      	add	r3, pc, #148	; (adr r3, 800c780 <__kernel_sin+0x148>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fdd2 	bl	8000298 <__aeabi_dsub>
 800c6f4:	4642      	mov	r2, r8
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	f7f3 ff86 	bl	8000608 <__aeabi_dmul>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	4620      	mov	r0, r4
 800c702:	4629      	mov	r1, r5
 800c704:	f7f3 fdca 	bl	800029c <__adddf3>
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	ec45 4b10 	vmov	d0, r4, r5
 800c710:	b003      	add	sp, #12
 800c712:	ecbd 8b04 	vpop	{d8-d9}
 800c716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71a:	4b1b      	ldr	r3, [pc, #108]	; (800c788 <__kernel_sin+0x150>)
 800c71c:	ec51 0b18 	vmov	r0, r1, d8
 800c720:	2200      	movs	r2, #0
 800c722:	f7f3 ff71 	bl	8000608 <__aeabi_dmul>
 800c726:	4632      	mov	r2, r6
 800c728:	ec41 0b19 	vmov	d9, r0, r1
 800c72c:	463b      	mov	r3, r7
 800c72e:	4640      	mov	r0, r8
 800c730:	4649      	mov	r1, r9
 800c732:	f7f3 ff69 	bl	8000608 <__aeabi_dmul>
 800c736:	4602      	mov	r2, r0
 800c738:	460b      	mov	r3, r1
 800c73a:	ec51 0b19 	vmov	r0, r1, d9
 800c73e:	f7f3 fdab 	bl	8000298 <__aeabi_dsub>
 800c742:	4652      	mov	r2, sl
 800c744:	465b      	mov	r3, fp
 800c746:	f7f3 ff5f 	bl	8000608 <__aeabi_dmul>
 800c74a:	ec53 2b18 	vmov	r2, r3, d8
 800c74e:	f7f3 fda3 	bl	8000298 <__aeabi_dsub>
 800c752:	a30b      	add	r3, pc, #44	; (adr r3, 800c780 <__kernel_sin+0x148>)
 800c754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c758:	4606      	mov	r6, r0
 800c75a:	460f      	mov	r7, r1
 800c75c:	4640      	mov	r0, r8
 800c75e:	4649      	mov	r1, r9
 800c760:	f7f3 ff52 	bl	8000608 <__aeabi_dmul>
 800c764:	4602      	mov	r2, r0
 800c766:	460b      	mov	r3, r1
 800c768:	4630      	mov	r0, r6
 800c76a:	4639      	mov	r1, r7
 800c76c:	f7f3 fd96 	bl	800029c <__adddf3>
 800c770:	4602      	mov	r2, r0
 800c772:	460b      	mov	r3, r1
 800c774:	4620      	mov	r0, r4
 800c776:	4629      	mov	r1, r5
 800c778:	f7f3 fd8e 	bl	8000298 <__aeabi_dsub>
 800c77c:	e7c4      	b.n	800c708 <__kernel_sin+0xd0>
 800c77e:	bf00      	nop
 800c780:	55555549 	.word	0x55555549
 800c784:	3fc55555 	.word	0x3fc55555
 800c788:	3fe00000 	.word	0x3fe00000
 800c78c:	5acfd57c 	.word	0x5acfd57c
 800c790:	3de5d93a 	.word	0x3de5d93a
 800c794:	8a2b9ceb 	.word	0x8a2b9ceb
 800c798:	3e5ae5e6 	.word	0x3e5ae5e6
 800c79c:	57b1fe7d 	.word	0x57b1fe7d
 800c7a0:	3ec71de3 	.word	0x3ec71de3
 800c7a4:	19c161d5 	.word	0x19c161d5
 800c7a8:	3f2a01a0 	.word	0x3f2a01a0
 800c7ac:	1110f8a6 	.word	0x1110f8a6
 800c7b0:	3f811111 	.word	0x3f811111
 800c7b4:	00000000 	.word	0x00000000

0800c7b8 <floor>:
 800c7b8:	ec51 0b10 	vmov	r0, r1, d0
 800c7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c7c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c7c8:	2e13      	cmp	r6, #19
 800c7ca:	ee10 5a10 	vmov	r5, s0
 800c7ce:	ee10 8a10 	vmov	r8, s0
 800c7d2:	460c      	mov	r4, r1
 800c7d4:	dc32      	bgt.n	800c83c <floor+0x84>
 800c7d6:	2e00      	cmp	r6, #0
 800c7d8:	da14      	bge.n	800c804 <floor+0x4c>
 800c7da:	a333      	add	r3, pc, #204	; (adr r3, 800c8a8 <floor+0xf0>)
 800c7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e0:	f7f3 fd5c 	bl	800029c <__adddf3>
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	f7f4 f99e 	bl	8000b28 <__aeabi_dcmpgt>
 800c7ec:	b138      	cbz	r0, 800c7fe <floor+0x46>
 800c7ee:	2c00      	cmp	r4, #0
 800c7f0:	da57      	bge.n	800c8a2 <floor+0xea>
 800c7f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c7f6:	431d      	orrs	r5, r3
 800c7f8:	d001      	beq.n	800c7fe <floor+0x46>
 800c7fa:	4c2d      	ldr	r4, [pc, #180]	; (800c8b0 <floor+0xf8>)
 800c7fc:	2500      	movs	r5, #0
 800c7fe:	4621      	mov	r1, r4
 800c800:	4628      	mov	r0, r5
 800c802:	e025      	b.n	800c850 <floor+0x98>
 800c804:	4f2b      	ldr	r7, [pc, #172]	; (800c8b4 <floor+0xfc>)
 800c806:	4137      	asrs	r7, r6
 800c808:	ea01 0307 	and.w	r3, r1, r7
 800c80c:	4303      	orrs	r3, r0
 800c80e:	d01f      	beq.n	800c850 <floor+0x98>
 800c810:	a325      	add	r3, pc, #148	; (adr r3, 800c8a8 <floor+0xf0>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f3 fd41 	bl	800029c <__adddf3>
 800c81a:	2200      	movs	r2, #0
 800c81c:	2300      	movs	r3, #0
 800c81e:	f7f4 f983 	bl	8000b28 <__aeabi_dcmpgt>
 800c822:	2800      	cmp	r0, #0
 800c824:	d0eb      	beq.n	800c7fe <floor+0x46>
 800c826:	2c00      	cmp	r4, #0
 800c828:	bfbe      	ittt	lt
 800c82a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c82e:	fa43 f606 	asrlt.w	r6, r3, r6
 800c832:	19a4      	addlt	r4, r4, r6
 800c834:	ea24 0407 	bic.w	r4, r4, r7
 800c838:	2500      	movs	r5, #0
 800c83a:	e7e0      	b.n	800c7fe <floor+0x46>
 800c83c:	2e33      	cmp	r6, #51	; 0x33
 800c83e:	dd0b      	ble.n	800c858 <floor+0xa0>
 800c840:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c844:	d104      	bne.n	800c850 <floor+0x98>
 800c846:	ee10 2a10 	vmov	r2, s0
 800c84a:	460b      	mov	r3, r1
 800c84c:	f7f3 fd26 	bl	800029c <__adddf3>
 800c850:	ec41 0b10 	vmov	d0, r0, r1
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c85c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c860:	fa23 f707 	lsr.w	r7, r3, r7
 800c864:	4207      	tst	r7, r0
 800c866:	d0f3      	beq.n	800c850 <floor+0x98>
 800c868:	a30f      	add	r3, pc, #60	; (adr r3, 800c8a8 <floor+0xf0>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f7f3 fd15 	bl	800029c <__adddf3>
 800c872:	2200      	movs	r2, #0
 800c874:	2300      	movs	r3, #0
 800c876:	f7f4 f957 	bl	8000b28 <__aeabi_dcmpgt>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d0bf      	beq.n	800c7fe <floor+0x46>
 800c87e:	2c00      	cmp	r4, #0
 800c880:	da02      	bge.n	800c888 <floor+0xd0>
 800c882:	2e14      	cmp	r6, #20
 800c884:	d103      	bne.n	800c88e <floor+0xd6>
 800c886:	3401      	adds	r4, #1
 800c888:	ea25 0507 	bic.w	r5, r5, r7
 800c88c:	e7b7      	b.n	800c7fe <floor+0x46>
 800c88e:	2301      	movs	r3, #1
 800c890:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c894:	fa03 f606 	lsl.w	r6, r3, r6
 800c898:	4435      	add	r5, r6
 800c89a:	4545      	cmp	r5, r8
 800c89c:	bf38      	it	cc
 800c89e:	18e4      	addcc	r4, r4, r3
 800c8a0:	e7f2      	b.n	800c888 <floor+0xd0>
 800c8a2:	2500      	movs	r5, #0
 800c8a4:	462c      	mov	r4, r5
 800c8a6:	e7aa      	b.n	800c7fe <floor+0x46>
 800c8a8:	8800759c 	.word	0x8800759c
 800c8ac:	7e37e43c 	.word	0x7e37e43c
 800c8b0:	bff00000 	.word	0xbff00000
 800c8b4:	000fffff 	.word	0x000fffff

0800c8b8 <scalbn>:
 800c8b8:	b570      	push	{r4, r5, r6, lr}
 800c8ba:	ec55 4b10 	vmov	r4, r5, d0
 800c8be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c8c2:	4606      	mov	r6, r0
 800c8c4:	462b      	mov	r3, r5
 800c8c6:	b99a      	cbnz	r2, 800c8f0 <scalbn+0x38>
 800c8c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c8cc:	4323      	orrs	r3, r4
 800c8ce:	d036      	beq.n	800c93e <scalbn+0x86>
 800c8d0:	4b39      	ldr	r3, [pc, #228]	; (800c9b8 <scalbn+0x100>)
 800c8d2:	4629      	mov	r1, r5
 800c8d4:	ee10 0a10 	vmov	r0, s0
 800c8d8:	2200      	movs	r2, #0
 800c8da:	f7f3 fe95 	bl	8000608 <__aeabi_dmul>
 800c8de:	4b37      	ldr	r3, [pc, #220]	; (800c9bc <scalbn+0x104>)
 800c8e0:	429e      	cmp	r6, r3
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	da10      	bge.n	800c90a <scalbn+0x52>
 800c8e8:	a32b      	add	r3, pc, #172	; (adr r3, 800c998 <scalbn+0xe0>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	e03a      	b.n	800c966 <scalbn+0xae>
 800c8f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c8f4:	428a      	cmp	r2, r1
 800c8f6:	d10c      	bne.n	800c912 <scalbn+0x5a>
 800c8f8:	ee10 2a10 	vmov	r2, s0
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	f7f3 fccc 	bl	800029c <__adddf3>
 800c904:	4604      	mov	r4, r0
 800c906:	460d      	mov	r5, r1
 800c908:	e019      	b.n	800c93e <scalbn+0x86>
 800c90a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c90e:	460b      	mov	r3, r1
 800c910:	3a36      	subs	r2, #54	; 0x36
 800c912:	4432      	add	r2, r6
 800c914:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c918:	428a      	cmp	r2, r1
 800c91a:	dd08      	ble.n	800c92e <scalbn+0x76>
 800c91c:	2d00      	cmp	r5, #0
 800c91e:	a120      	add	r1, pc, #128	; (adr r1, 800c9a0 <scalbn+0xe8>)
 800c920:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c924:	da1c      	bge.n	800c960 <scalbn+0xa8>
 800c926:	a120      	add	r1, pc, #128	; (adr r1, 800c9a8 <scalbn+0xf0>)
 800c928:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c92c:	e018      	b.n	800c960 <scalbn+0xa8>
 800c92e:	2a00      	cmp	r2, #0
 800c930:	dd08      	ble.n	800c944 <scalbn+0x8c>
 800c932:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c936:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c93a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c93e:	ec45 4b10 	vmov	d0, r4, r5
 800c942:	bd70      	pop	{r4, r5, r6, pc}
 800c944:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c948:	da19      	bge.n	800c97e <scalbn+0xc6>
 800c94a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c94e:	429e      	cmp	r6, r3
 800c950:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c954:	dd0a      	ble.n	800c96c <scalbn+0xb4>
 800c956:	a112      	add	r1, pc, #72	; (adr r1, 800c9a0 <scalbn+0xe8>)
 800c958:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1e2      	bne.n	800c926 <scalbn+0x6e>
 800c960:	a30f      	add	r3, pc, #60	; (adr r3, 800c9a0 <scalbn+0xe8>)
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	f7f3 fe4f 	bl	8000608 <__aeabi_dmul>
 800c96a:	e7cb      	b.n	800c904 <scalbn+0x4c>
 800c96c:	a10a      	add	r1, pc, #40	; (adr r1, 800c998 <scalbn+0xe0>)
 800c96e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0b8      	beq.n	800c8e8 <scalbn+0x30>
 800c976:	a10e      	add	r1, pc, #56	; (adr r1, 800c9b0 <scalbn+0xf8>)
 800c978:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97c:	e7b4      	b.n	800c8e8 <scalbn+0x30>
 800c97e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c982:	3236      	adds	r2, #54	; 0x36
 800c984:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c988:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c98c:	4620      	mov	r0, r4
 800c98e:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <scalbn+0x108>)
 800c990:	2200      	movs	r2, #0
 800c992:	e7e8      	b.n	800c966 <scalbn+0xae>
 800c994:	f3af 8000 	nop.w
 800c998:	c2f8f359 	.word	0xc2f8f359
 800c99c:	01a56e1f 	.word	0x01a56e1f
 800c9a0:	8800759c 	.word	0x8800759c
 800c9a4:	7e37e43c 	.word	0x7e37e43c
 800c9a8:	8800759c 	.word	0x8800759c
 800c9ac:	fe37e43c 	.word	0xfe37e43c
 800c9b0:	c2f8f359 	.word	0xc2f8f359
 800c9b4:	81a56e1f 	.word	0x81a56e1f
 800c9b8:	43500000 	.word	0x43500000
 800c9bc:	ffff3cb0 	.word	0xffff3cb0
 800c9c0:	3c900000 	.word	0x3c900000

0800c9c4 <_init>:
 800c9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c6:	bf00      	nop
 800c9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ca:	bc08      	pop	{r3}
 800c9cc:	469e      	mov	lr, r3
 800c9ce:	4770      	bx	lr

0800c9d0 <_fini>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	bf00      	nop
 800c9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9d6:	bc08      	pop	{r3}
 800c9d8:	469e      	mov	lr, r3
 800c9da:	4770      	bx	lr
