
StepperAxis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  08008fb8  08008fb8  00018fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c28  08009c28  00020568  2**0
                  CONTENTS
  4 .ARM          00000008  08009c28  08009c28  00019c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c30  08009c30  00020568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000568  20000000  08009c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000568  0800a1a0  00020568  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000710  0800a1a0  00020710  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020568  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009be3  00000000  00000000  00020598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf0  00000000  00000000  0002a17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  0002be70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000101c7  00000000  00000000  0002cf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008201  00000000  00000000  0003d13f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00057600  00000000  00000000  00045340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009c940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  0009c990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a0384  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a0450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000568 	.word	0x20000568
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f9c 	.word	0x08008f9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000056c 	.word	0x2000056c
 80001dc:	08008f9c 	.word	0x08008f9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <i2cActivate>:
// Init hardware



void i2cActivate()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <i2cActivate+0x70>)
 8000ec4:	607b      	str	r3, [r7, #4]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <i2cActivate+0x74>)
 8000ec8:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f003 f9ca 	bl	8004264 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f002 feb7 	bl	8003c44 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	2108      	movs	r1, #8
 8000eda:	6838      	ldr	r0, [r7, #0]
 8000edc:	f002 ff78 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8000ee0:	2204      	movs	r2, #4
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	6838      	ldr	r0, [r7, #0]
 8000ee6:	f003 f815 	bl	8003f14 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8000eea:	2202      	movs	r2, #2
 8000eec:	2109      	movs	r1, #9
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f002 ff6e 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	2109      	movs	r1, #9
 8000ef8:	6838      	ldr	r0, [r7, #0]
 8000efa:	f003 f80b 	bl	8003f14 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 8000efe:	2201      	movs	r2, #1
 8000f00:	2108      	movs	r1, #8
 8000f02:	6838      	ldr	r0, [r7, #0]
 8000f04:	f003 f86f 	bl	8003fe6 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2109      	movs	r1, #9
 8000f0c:	6838      	ldr	r0, [r7, #0]
 8000f0e:	f003 f86a 	bl	8003fe6 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
 8000f12:	2300      	movs	r3, #0
 8000f14:	2211      	movs	r2, #17
 8000f16:	2100      	movs	r1, #0
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f003 fa5b 	bl	80043d4 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f003 fb68 	bl	80045f4 <i2cEnableDevice>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, I2C_DUTY_CYCLE_2, 17, I2C_CLOCK_50);
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
#endif /* BALA2024 */
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	40020400 	.word	0x40020400

08000f34 <ledActivate>:




void ledActivate(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8000f38:	481e      	ldr	r0, [pc, #120]	; (8000fb4 <ledActivate+0x80>)
 8000f3a:	f002 fee5 	bl	8003d08 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2103      	movs	r1, #3
 8000f42:	481c      	ldr	r0, [pc, #112]	; (8000fb4 <ledActivate+0x80>)
 8000f44:	f002 ff44 	bl	8003dd0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2103      	movs	r1, #3
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <ledActivate+0x80>)
 8000f4e:	f003 f84a 	bl	8003fe6 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2103      	movs	r1, #3
 8000f56:	4817      	ldr	r0, [pc, #92]	; (8000fb4 <ledActivate+0x80>)
 8000f58:	f003 f88e 	bl	8004078 <gpioSelectPushPullMode>
    LED_red_off;
 8000f5c:	2103      	movs	r1, #3
 8000f5e:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <ledActivate+0x80>)
 8000f60:	f002 ff81 	bl	8003e66 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2104      	movs	r1, #4
 8000f68:	4812      	ldr	r0, [pc, #72]	; (8000fb4 <ledActivate+0x80>)
 8000f6a:	f002 ff31 	bl	8003dd0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2104      	movs	r1, #4
 8000f72:	4810      	ldr	r0, [pc, #64]	; (8000fb4 <ledActivate+0x80>)
 8000f74:	f003 f837 	bl	8003fe6 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <ledActivate+0x80>)
 8000f7e:	f003 f87b 	bl	8004078 <gpioSelectPushPullMode>
    LED_green_off;
 8000f82:	2104      	movs	r1, #4
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <ledActivate+0x80>)
 8000f86:	f002 ff6e 	bl	8003e66 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	210a      	movs	r1, #10
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <ledActivate+0x80>)
 8000f90:	f002 ff1e 	bl	8003dd0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8000f94:	2200      	movs	r2, #0
 8000f96:	210a      	movs	r1, #10
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <ledActivate+0x80>)
 8000f9a:	f003 f824 	bl	8003fe6 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	210a      	movs	r1, #10
 8000fa2:	4804      	ldr	r0, [pc, #16]	; (8000fb4 <ledActivate+0x80>)
 8000fa4:	f003 f868 	bl	8004078 <gpioSelectPushPullMode>
    LED_blue_off;
 8000fa8:	210a      	movs	r1, #10
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <ledActivate+0x80>)
 8000fac:	f002 ff5b 	bl	8003e66 <gpioSetPin>
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <BALOsetup>:

void BALOsetup(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
    // Configuration LED Pin

   ledActivate();
 8000fbc:	f7ff ffba 	bl	8000f34 <ledActivate>
   i2cActivate();
 8000fc0:	f7ff ff7c 	bl	8000ebc <i2cActivate>
#define 	ADC_GPIO		GPIOA
#define 	PA0				PIN0
    gpioSelectPort(ADC_GPIO);
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <BALOsetup+0x20>)
 8000fc6:	f002 fe9f 	bl	8003d08 <gpioSelectPort>
    gpioSelectPinMode(ADC_GPIO, PA0, ANALOG); // PA0 : Analog-Modus
 8000fca:	2203      	movs	r2, #3
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <BALOsetup+0x20>)
 8000fd0:	f002 fefe 	bl	8003dd0 <gpioSelectPinMode>

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40020000 	.word	0x40020000

08000fdc <AlBeOszi>:



uint16_t AlBeOszi(float *AlphaBeta)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 8000fe4:	f641 1323 	movw	r3, #6435	; 0x1923
 8000fe8:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 8000fea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000fee:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 8000ff0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000ff4:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001008:	dd03      	ble.n	8001012 <AlBeOszi+0x36>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001010:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a00 	vldr	s15, [r3]
 8001018:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800101c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	d502      	bpl.n	800102c <AlBeOszi+0x50>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <AlBeOszi+0x1cc>)
 800102a:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3304      	adds	r3, #4
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001038:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001040:	dd04      	ble.n	800104c <AlBeOszi+0x70>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3304      	adds	r3, #4
 8001046:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800104a:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3304      	adds	r3, #4
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d503      	bpl.n	800106a <AlBeOszi+0x8e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3304      	adds	r3, #4
 8001066:	4a50      	ldr	r2, [pc, #320]	; (80011a8 <AlBeOszi+0x1cc>)
 8001068:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 800106a:	4b50      	ldr	r3, [pc, #320]	; (80011ac <AlBeOszi+0x1d0>)
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b4e      	ldr	r3, [pc, #312]	; (80011ac <AlBeOszi+0x1d0>)
 8001074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001078:	3b01      	subs	r3, #1
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001090:	ee17 3a90 	vmov	r3, s15
 8001094:	b21b      	sxth	r3, r3
 8001096:	b29b      	uxth	r3, r3
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 800109e:	4b43      	ldr	r3, [pc, #268]	; (80011ac <AlBeOszi+0x1d0>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <AlBeOszi+0x1d0>)
 80010a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	3304      	adds	r3, #4
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c6:	ee17 3a90 	vmov	r3, s15
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <AlBeOszi+0x1d0>)
 80010d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	b29b      	uxth	r3, r3
 80010e0:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 80010e2:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <AlBeOszi+0x1d4>)
 80010e4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80010e8:	4b30      	ldr	r3, [pc, #192]	; (80011ac <AlBeOszi+0x1d0>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <AlBeOszi+0x1d0>)
 80010f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	b219      	sxth	r1, r3
 80010fe:	8afb      	ldrh	r3, [r7, #22]
 8001100:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001104:	f000 fca8 	bl	8001a58 <tftDrawFastVLine>
	if (Ya == Yb)
 8001108:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800110c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001110:	429a      	cmp	r2, r3
 8001112:	d10a      	bne.n	800112a <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <AlBeOszi+0x1d4>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800111e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fbda 	bl	80018dc <tftDrawPixel>
 8001128:	e011      	b.n	800114e <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <AlBeOszi+0x1d4>)
 800112c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001130:	8aba      	ldrh	r2, [r7, #20]
 8001132:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fbd0 	bl	80018dc <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <AlBeOszi+0x1d4>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	8a7a      	ldrh	r2, [r7, #18]
 8001144:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fbc7 	bl	80018dc <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <AlBeOszi+0x1d4>)
 8001150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001154:	b29b      	uxth	r3, r3
 8001156:	3301      	adds	r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <AlBeOszi+0x1d4>)
 800115e:	801a      	strh	r2, [r3, #0]
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <AlBeOszi+0x1d4>)
 8001162:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <AlBeOszi+0x1d0>)
 8001168:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	dd02      	ble.n	8001176 <AlBeOszi+0x19a>
	{
		timepos = 0;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <AlBeOszi+0x1d4>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <AlBeOszi+0x1d4>)
 8001178:	f9b3 0000 	ldrsh.w	r0, [r3]
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <AlBeOszi+0x1d0>)
 800117e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <AlBeOszi+0x1d0>)
 8001184:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001188:	0fda      	lsrs	r2, r3, #31
 800118a:	4413      	add	r3, r2
 800118c:	105b      	asrs	r3, r3, #1
 800118e:	b21a      	sxth	r2, r3
 8001190:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001194:	f000 fc60 	bl	8001a58 <tftDrawFastVLine>
	return timepos;
 8001198:	4b05      	ldr	r3, [pc, #20]	; (80011b0 <AlBeOszi+0x1d4>)
 800119a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119e:	b29b      	uxth	r3, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	bf800000 	.word	0xbf800000
 80011ac:	08009014 	.word	0x08009014
 80011b0:	20000584 	.word	0x20000584

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80011f4:	482b      	ldr	r0, [pc, #172]	; (80012a4 <initRotaryPushButton+0xb4>)
 80011f6:	f002 fd25 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOB);
 80011fa:	482b      	ldr	r0, [pc, #172]	; (80012a8 <initRotaryPushButton+0xb8>)
 80011fc:	f002 fd22 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOC);
 8001200:	482a      	ldr	r0, [pc, #168]	; (80012ac <initRotaryPushButton+0xbc>)
 8001202:	f002 fd1f 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOD);
 8001206:	482a      	ldr	r0, [pc, #168]	; (80012b0 <initRotaryPushButton+0xc0>)
 8001208:	f002 fd1c 	bl	8003c44 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <initRotaryPushButton+0xc4>)
 8001212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001214:	4a27      	ldr	r2, [pc, #156]	; (80012b4 <initRotaryPushButton+0xc4>)
 8001216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 800121c:	2200      	movs	r2, #0
 800121e:	2101      	movs	r1, #1
 8001220:	4822      	ldr	r0, [pc, #136]	; (80012ac <initRotaryPushButton+0xbc>)
 8001222:	f002 fdd5 	bl	8003dd0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8001226:	2201      	movs	r2, #1
 8001228:	2101      	movs	r1, #1
 800122a:	4820      	ldr	r0, [pc, #128]	; (80012ac <initRotaryPushButton+0xbc>)
 800122c:	f002 ff24 	bl	8004078 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	481d      	ldr	r0, [pc, #116]	; (80012ac <initRotaryPushButton+0xbc>)
 8001236:	f002 fdcb 	bl	8003dd0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 800123a:	2201      	movs	r2, #1
 800123c:	2100      	movs	r1, #0
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <initRotaryPushButton+0xbc>)
 8001240:	f002 ff1a 	bl	8004078 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8001244:	2200      	movs	r2, #0
 8001246:	210a      	movs	r1, #10
 8001248:	4816      	ldr	r0, [pc, #88]	; (80012a4 <initRotaryPushButton+0xb4>)
 800124a:	f002 fdc1 	bl	8003dd0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800124e:	2201      	movs	r2, #1
 8001250:	210a      	movs	r1, #10
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <initRotaryPushButton+0xb4>)
 8001254:	f002 ff10 	bl	8004078 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8001258:	f002 fa9e 	bl	8003798 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 800125c:	2101      	movs	r1, #1
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <initRotaryPushButton+0xbc>)
 8001260:	f002 fab6 	bl	80037d0 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 8001264:	210a      	movs	r1, #10
 8001266:	480f      	ldr	r0, [pc, #60]	; (80012a4 <initRotaryPushButton+0xb4>)
 8001268:	f002 fab2 	bl	80037d0 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 800126c:	2001      	movs	r0, #1
 800126e:	f002 fb63 	bl	8003938 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 8001272:	200a      	movs	r0, #10
 8001274:	f002 fb60 	bl	8003938 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8001278:	2101      	movs	r1, #1
 800127a:	2001      	movs	r0, #1
 800127c:	f002 fb7e 	bl	800397c <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 8001280:	2100      	movs	r1, #0
 8001282:	200a      	movs	r0, #10
 8001284:	f002 fb7a 	bl	800397c <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8001288:	2007      	movs	r0, #7
 800128a:	f7ff ff93 	bl	80011b4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 800128e:	2028      	movs	r0, #40	; 0x28
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001294:	b662      	cpsie	i
}
 8001296:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <initRotaryPushButton+0xc8>)
 800129a:	2201      	movs	r2, #1
 800129c:	701a      	strb	r2, [r3, #0]
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40023800 	.word	0x40023800
 80012b8:	2000058d 	.word	0x2000058d

080012bc <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80012c0:	4815      	ldr	r0, [pc, #84]	; (8001318 <initRotaryPushButtonLED+0x5c>)
 80012c2:	f002 fcbf 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOB);
 80012c6:	4815      	ldr	r0, [pc, #84]	; (800131c <initRotaryPushButtonLED+0x60>)
 80012c8:	f002 fcbc 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOC);
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <initRotaryPushButtonLED+0x64>)
 80012ce:	f002 fcb9 	bl	8003c44 <gpioInitPort>
	gpioInitPort(GPIOD);
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <initRotaryPushButtonLED+0x68>)
 80012d4:	f002 fcb6 	bl	8003c44 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 80012d8:	2201      	movs	r2, #1
 80012da:	2103      	movs	r1, #3
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <initRotaryPushButtonLED+0x60>)
 80012de:	f002 fd77 	bl	8003dd0 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 80012e2:	2201      	movs	r2, #1
 80012e4:	2104      	movs	r1, #4
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <initRotaryPushButtonLED+0x60>)
 80012e8:	f002 fd72 	bl	8003dd0 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80012ec:	2201      	movs	r2, #1
 80012ee:	210a      	movs	r1, #10
 80012f0:	480a      	ldr	r0, [pc, #40]	; (800131c <initRotaryPushButtonLED+0x60>)
 80012f2:	f002 fd6d 	bl	8003dd0 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80012f6:	2103      	movs	r1, #3
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <initRotaryPushButtonLED+0x60>)
 80012fa:	f002 fdb4 	bl	8003e66 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80012fe:	2104      	movs	r1, #4
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <initRotaryPushButtonLED+0x60>)
 8001302:	f002 fdb0 	bl	8003e66 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 8001306:	210a      	movs	r1, #10
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <initRotaryPushButtonLED+0x60>)
 800130a:	f002 fdac 	bl	8003e66 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <initRotaryPushButtonLED+0x6c>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40020000 	.word	0x40020000
 800131c:	40020400 	.word	0x40020400
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00
 8001328:	2000058e 	.word	0x2000058e

0800132c <setRotaryColor>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setRotaryColor(LED_COLOR_t color)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <setRotaryColor+0x120>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	f083 0301 	eor.w	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <setRotaryColor+0x1c>
	{
		initRotaryPushButtonLED();
 8001344:	f7ff ffba 	bl	80012bc <initRotaryPushButtonLED>
	}

	switch(color)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d87a      	bhi.n	8001444 <setRotaryColor+0x118>
 800134e:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <setRotaryColor+0x28>)
 8001350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001354:	08001375 	.word	0x08001375
 8001358:	0800138f 	.word	0x0800138f
 800135c:	080013a9 	.word	0x080013a9
 8001360:	080013c3 	.word	0x080013c3
 8001364:	080013dd 	.word	0x080013dd
 8001368:	080013f7 	.word	0x080013f7
 800136c:	08001411 	.word	0x08001411
 8001370:	0800142b 	.word	0x0800142b
	{
		/* Set LED color to BLACK */
		case LED_BLACK:
			gpioSetPin(LED_RED_ADR);
 8001374:	2103      	movs	r1, #3
 8001376:	4836      	ldr	r0, [pc, #216]	; (8001450 <setRotaryColor+0x124>)
 8001378:	f002 fd75 	bl	8003e66 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 800137c:	2104      	movs	r1, #4
 800137e:	4834      	ldr	r0, [pc, #208]	; (8001450 <setRotaryColor+0x124>)
 8001380:	f002 fd71 	bl	8003e66 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001384:	210a      	movs	r1, #10
 8001386:	4832      	ldr	r0, [pc, #200]	; (8001450 <setRotaryColor+0x124>)
 8001388:	f002 fd6d 	bl	8003e66 <gpioSetPin>
			break;
 800138c:	e05a      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to RED */
		case LED_RED:
			gpioResetPin(LED_RED_ADR);
 800138e:	2103      	movs	r1, #3
 8001390:	482f      	ldr	r0, [pc, #188]	; (8001450 <setRotaryColor+0x124>)
 8001392:	f002 fd93 	bl	8003ebc <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 8001396:	2104      	movs	r1, #4
 8001398:	482d      	ldr	r0, [pc, #180]	; (8001450 <setRotaryColor+0x124>)
 800139a:	f002 fd64 	bl	8003e66 <gpioSetPin>
			gpioSetPin(LED_BLUE_ADR);
 800139e:	210a      	movs	r1, #10
 80013a0:	482b      	ldr	r0, [pc, #172]	; (8001450 <setRotaryColor+0x124>)
 80013a2:	f002 fd60 	bl	8003e66 <gpioSetPin>
			break;
 80013a6:	e04d      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to GREEN */
		case LED_GREEN:
			gpioSetPin(LED_RED_ADR);
 80013a8:	2103      	movs	r1, #3
 80013aa:	4829      	ldr	r0, [pc, #164]	; (8001450 <setRotaryColor+0x124>)
 80013ac:	f002 fd5b 	bl	8003e66 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 80013b0:	2104      	movs	r1, #4
 80013b2:	4827      	ldr	r0, [pc, #156]	; (8001450 <setRotaryColor+0x124>)
 80013b4:	f002 fd82 	bl	8003ebc <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 80013b8:	210a      	movs	r1, #10
 80013ba:	4825      	ldr	r0, [pc, #148]	; (8001450 <setRotaryColor+0x124>)
 80013bc:	f002 fd53 	bl	8003e66 <gpioSetPin>
			break;
 80013c0:	e040      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to BLUE */
		case LED_BLUE:
			gpioSetPin(LED_RED_ADR);
 80013c2:	2103      	movs	r1, #3
 80013c4:	4822      	ldr	r0, [pc, #136]	; (8001450 <setRotaryColor+0x124>)
 80013c6:	f002 fd4e 	bl	8003e66 <gpioSetPin>
			gpioSetPin(LED_GREEN_ADR);
 80013ca:	2104      	movs	r1, #4
 80013cc:	4820      	ldr	r0, [pc, #128]	; (8001450 <setRotaryColor+0x124>)
 80013ce:	f002 fd4a 	bl	8003e66 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80013d2:	210a      	movs	r1, #10
 80013d4:	481e      	ldr	r0, [pc, #120]	; (8001450 <setRotaryColor+0x124>)
 80013d6:	f002 fd71 	bl	8003ebc <gpioResetPin>
			break;
 80013da:	e033      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to MAGENTA */
		case LED_MAGENTA:
			gpioResetPin(LED_RED_ADR);
 80013dc:	2103      	movs	r1, #3
 80013de:	481c      	ldr	r0, [pc, #112]	; (8001450 <setRotaryColor+0x124>)
 80013e0:	f002 fd6c 	bl	8003ebc <gpioResetPin>
			gpioSetPin(LED_GREEN_ADR);
 80013e4:	2104      	movs	r1, #4
 80013e6:	481a      	ldr	r0, [pc, #104]	; (8001450 <setRotaryColor+0x124>)
 80013e8:	f002 fd3d 	bl	8003e66 <gpioSetPin>
			gpioResetPin(LED_BLUE_ADR);
 80013ec:	210a      	movs	r1, #10
 80013ee:	4818      	ldr	r0, [pc, #96]	; (8001450 <setRotaryColor+0x124>)
 80013f0:	f002 fd64 	bl	8003ebc <gpioResetPin>
			break;
 80013f4:	e026      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to CYAN */
		case LED_CYAN:
			gpioSetPin(LED_RED_ADR);
 80013f6:	2103      	movs	r1, #3
 80013f8:	4815      	ldr	r0, [pc, #84]	; (8001450 <setRotaryColor+0x124>)
 80013fa:	f002 fd34 	bl	8003e66 <gpioSetPin>
			gpioResetPin(LED_GREEN_ADR);
 80013fe:	2104      	movs	r1, #4
 8001400:	4813      	ldr	r0, [pc, #76]	; (8001450 <setRotaryColor+0x124>)
 8001402:	f002 fd5b 	bl	8003ebc <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 8001406:	210a      	movs	r1, #10
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <setRotaryColor+0x124>)
 800140a:	f002 fd57 	bl	8003ebc <gpioResetPin>
			break;
 800140e:	e019      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to YELLOW */
		case LED_YELLOW:
			gpioResetPin(LED_RED_ADR);
 8001410:	2103      	movs	r1, #3
 8001412:	480f      	ldr	r0, [pc, #60]	; (8001450 <setRotaryColor+0x124>)
 8001414:	f002 fd52 	bl	8003ebc <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001418:	2104      	movs	r1, #4
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <setRotaryColor+0x124>)
 800141c:	f002 fd4e 	bl	8003ebc <gpioResetPin>
			gpioSetPin(LED_BLUE_ADR);
 8001420:	210a      	movs	r1, #10
 8001422:	480b      	ldr	r0, [pc, #44]	; (8001450 <setRotaryColor+0x124>)
 8001424:	f002 fd1f 	bl	8003e66 <gpioSetPin>
			break;
 8001428:	e00c      	b.n	8001444 <setRotaryColor+0x118>

		/* Set LED color to WHITE */
		case LED_WHITE:
			gpioResetPin(LED_RED_ADR);
 800142a:	2103      	movs	r1, #3
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <setRotaryColor+0x124>)
 800142e:	f002 fd45 	bl	8003ebc <gpioResetPin>
			gpioResetPin(LED_GREEN_ADR);
 8001432:	2104      	movs	r1, #4
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <setRotaryColor+0x124>)
 8001436:	f002 fd41 	bl	8003ebc <gpioResetPin>
			gpioResetPin(LED_BLUE_ADR);
 800143a:	210a      	movs	r1, #10
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <setRotaryColor+0x124>)
 800143e:	f002 fd3d 	bl	8003ebc <gpioResetPin>
			break;
 8001442:	bf00      	nop
	}
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000058e 	.word	0x2000058e
 8001450:	40020400 	.word	0x40020400

08001454 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800145a:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <getRotaryPushButton+0x3c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 8001468:	f7ff fec2 	bl	80011f0 <initRotaryPushButton>
		return ERROR_VALUE;
 800146c:	2301      	movs	r3, #1
 800146e:	e00a      	b.n	8001486 <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <getRotaryPushButton+0x40>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <getRotaryPushButton+0x40>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <getRotaryPushButton+0x40>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8001484:	687b      	ldr	r3, [r7, #4]
}
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000058d 	.word	0x2000058d
 8001494:	2000058c 	.word	0x2000058c

08001498 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <getRotaryPosition+0x24>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f083 0301 	eor.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e001      	b.n	80014b2 <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <getRotaryPosition+0x28>)
 80014b0:	681b      	ldr	r3, [r3, #0]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000058d 	.word	0x2000058d
 80014c0:	20000588 	.word	0x20000588

080014c4 <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <setRotaryPosition+0x30>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0301 	eor.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 80014da:	2301      	movs	r3, #1
 80014dc:	e003      	b.n	80014e6 <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 80014de:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <setRotaryPosition+0x34>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]

	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	2000058d 	.word	0x2000058d
 80014f8:	20000588 	.word	0x20000588

080014fc <EXTI1_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8001500:	2100      	movs	r1, #0
 8001502:	480f      	ldr	r0, [pc, #60]	; (8001540 <EXTI1_IRQHandler+0x44>)
 8001504:	f002 fe15 	bl	8004132 <gpioGetPinState>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d005      	beq.n	800151a <EXTI1_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <EXTI1_IRQHandler+0x48>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	3301      	adds	r3, #1
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <EXTI1_IRQHandler+0x48>)
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e004      	b.n	8001524 <EXTI1_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <EXTI1_IRQHandler+0x48>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	4a08      	ldr	r2, [pc, #32]	; (8001544 <EXTI1_IRQHandler+0x48>)
 8001522:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <EXTI1_IRQHandler+0x4c>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <EXTI1_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <EXTI1_IRQHandler+0x4c>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <EXTI1_IRQHandler+0x4c>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	6153      	str	r3, [r2, #20]
	}
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40020800 	.word	0x40020800
 8001544:	20000588 	.word	0x20000588
 8001548:	40013c00 	.word	0x40013c00

0800154c <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <EXTI15_10_IRQHandler+0x2c>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <EXTI15_10_IRQHandler+0x30>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155e:	2b00      	cmp	r3, #0
 8001560:	d005      	beq.n	800156e <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <EXTI15_10_IRQHandler+0x30>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <EXTI15_10_IRQHandler+0x30>)
 8001568:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156c:	6153      	str	r3, [r2, #20]
	}
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	2000058c 	.word	0x2000058c
 800157c:	40013c00 	.word	0x40013c00

08001580 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <delayms+0x18>)
 800158c:	f003 fce4 	bl	8004f58 <systickDelay>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200006e4 	.word	0x200006e4

0800159c <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 80015a6:	4b05      	ldr	r3, [pc, #20]	; (80015bc <tftSPISenddata+0x20>)
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2206      	movs	r2, #6
 80015ae:	4904      	ldr	r1, [pc, #16]	; (80015c0 <tftSPISenddata+0x24>)
 80015b0:	f003 fbc3 	bl	8004d3a <spiWriteByte>
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000004 	.word	0x20000004
 80015c0:	40020400 	.word	0x40020400

080015c4 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80015ce:	2107      	movs	r1, #7
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <tftSendCmd+0x24>)
 80015d2:	f002 fc73 	bl	8003ebc <gpioResetPin>
    tftSPISenddata(cmd);
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ffdf 	bl	800159c <tftSPISenddata>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40020800 	.word	0x40020800

080015ec <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80015f6:	2107      	movs	r1, #7
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <tftSendData+0x24>)
 80015fa:	f002 fc34 	bl	8003e66 <gpioSetPin>
    tftSPISenddata(data);
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ffcb 	bl	800159c <tftSPISenddata>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40020800 	.word	0x40020800

08001614 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 800161a:	4825      	ldr	r0, [pc, #148]	; (80016b0 <spiInit+0x9c>)
 800161c:	f002 fb74 	bl	8003d08 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8001620:	2201      	movs	r2, #1
 8001622:	2109      	movs	r1, #9
 8001624:	4822      	ldr	r0, [pc, #136]	; (80016b0 <spiInit+0x9c>)
 8001626:	f002 fbd3 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 800162a:	4822      	ldr	r0, [pc, #136]	; (80016b4 <spiInit+0xa0>)
 800162c:	f002 fb6c 	bl	8003d08 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8001630:	2201      	movs	r2, #1
 8001632:	2107      	movs	r1, #7
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <spiInit+0xa0>)
 8001636:	f002 fbcb 	bl	8003dd0 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 800163a:	481f      	ldr	r0, [pc, #124]	; (80016b8 <spiInit+0xa4>)
 800163c:	f002 fb02 	bl	8003c44 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8001640:	2201      	movs	r2, #1
 8001642:	2106      	movs	r1, #6
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <spiInit+0xa4>)
 8001646:	f002 fbc3 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 800164a:	2201      	movs	r2, #1
 800164c:	2106      	movs	r1, #6
 800164e:	481a      	ldr	r0, [pc, #104]	; (80016b8 <spiInit+0xa4>)
 8001650:	f002 fd12 	bl	8004078 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8001654:	4816      	ldr	r0, [pc, #88]	; (80016b0 <spiInit+0x9c>)
 8001656:	f002 faf5 	bl	8003c44 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 800165a:	2202      	movs	r2, #2
 800165c:	2105      	movs	r1, #5
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <spiInit+0x9c>)
 8001660:	f002 fbb6 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8001664:	2205      	movs	r2, #5
 8001666:	2105      	movs	r1, #5
 8001668:	4811      	ldr	r0, [pc, #68]	; (80016b0 <spiInit+0x9c>)
 800166a:	f002 fc53 	bl	8003f14 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 800166e:	2202      	movs	r2, #2
 8001670:	2107      	movs	r1, #7
 8001672:	480f      	ldr	r0, [pc, #60]	; (80016b0 <spiInit+0x9c>)
 8001674:	f002 fbac 	bl	8003dd0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8001678:	2205      	movs	r2, #5
 800167a:	2107      	movs	r1, #7
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <spiInit+0x9c>)
 800167e:	f002 fc49 	bl	8003f14 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <spiInit+0xa8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f003 fafc 	bl	8004c84 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <spiInit+0xa8>)
 800168e:	6818      	ldr	r0, [r3, #0]
 8001690:	2300      	movs	r3, #0
 8001692:	9303      	str	r3, [sp, #12]
 8001694:	2300      	movs	r3, #0
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2300      	movs	r3, #0
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	2200      	movs	r2, #0
 80016a4:	2103      	movs	r1, #3
 80016a6:	f003 f9ff 	bl	8004aa8 <spiInitSPI>

}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40020000 	.word	0x40020000
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020400 	.word	0x40020400
 80016bc:	20000004 	.word	0x20000004

080016c0 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80016d2:	e033      	b.n	800173c <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff71 	bl	80015c4 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	1c5a      	adds	r2, r3, #1
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f4:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016fc:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80016fe:	e006      	b.n	800170e <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff6f 	bl	80015ec <tftSendData>
		while(numArgs--) {                   //   For each argument...
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	1e5a      	subs	r2, r3, #1
 8001712:	73ba      	strb	r2, [r7, #14]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f3      	bne.n	8001700 <commandList+0x40>
		}

		if(ms) {
 8001718:	89bb      	ldrh	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00e      	beq.n	800173c <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001728:	89bb      	ldrh	r3, [r7, #12]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d102      	bne.n	8001734 <commandList+0x74>
 800172e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001732:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8001734:	89bb      	ldrh	r3, [r7, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff22 	bl	8001580 <delayms>
	while(numCommands--) {                 // For each command...
 800173c:	7bfb      	ldrb	r3, [r7, #15]
 800173e:	1e5a      	subs	r2, r3, #1
 8001740:	73fa      	strb	r2, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1c6      	bne.n	80016d4 <commandList+0x14>
		}
	}
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8001758:	2106      	movs	r1, #6
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <commonInit+0x3c>)
 800175c:	f002 fbae 	bl	8003ebc <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8001760:	2109      	movs	r1, #9
 8001762:	480b      	ldr	r0, [pc, #44]	; (8001790 <commonInit+0x40>)
 8001764:	f002 fbaa 	bl	8003ebc <gpioResetPin>
	delayms(50);  //default value 500
 8001768:	2032      	movs	r0, #50	; 0x32
 800176a:	f7ff ff09 	bl	8001580 <delayms>
	ST7735_RST1;
 800176e:	2109      	movs	r1, #9
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <commonInit+0x40>)
 8001772:	f002 fb78 	bl	8003e66 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <commonInit+0x32>
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff9f 	bl	80016c0 <commandList>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40020400 	.word	0x40020400
 8001790:	40020000 	.word	0x40020000

08001794 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 800179e:	2032      	movs	r0, #50	; 0x32
 80017a0:	f7ff feee 	bl	8001580 <delayms>
	commonInit(Rcmd1);
 80017a4:	4811      	ldr	r0, [pc, #68]	; (80017ec <tftInitR+0x58>)
 80017a6:	f7ff ffd3 	bl	8001750 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d109      	bne.n	80017c4 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <tftInitR+0x5c>)
 80017b2:	f7ff ff85 	bl	80016c0 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <tftInitR+0x60>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80017bc:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <tftInitR+0x64>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	e002      	b.n	80017ca <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <tftInitR+0x68>)
 80017c6:	f7ff ff7b 	bl	80016c0 <commandList>
	}
	commandList(Rcmd3);
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <tftInitR+0x6c>)
 80017cc:	f7ff ff78 	bl	80016c0 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d105      	bne.n	80017e2 <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80017d6:	2036      	movs	r0, #54	; 0x36
 80017d8:	f7ff fef4 	bl	80015c4 <tftSendCmd>
		tftSendData(0xC0);
 80017dc:	20c0      	movs	r0, #192	; 0xc0
 80017de:	f7ff ff05 	bl	80015ec <tftSendData>
	}

	//  tabcolor = options;
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	08009494 	.word	0x08009494
 80017f0:	080094d0 	.word	0x080094d0
 80017f4:	20000590 	.word	0x20000590
 80017f8:	20000594 	.word	0x20000594
 80017fc:	080094e0 	.word	0x080094e0
 8001800:	080094f0 	.word	0x080094f0

08001804 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	4611      	mov	r1, r2
 8001810:	461a      	mov	r2, r3
 8001812:	4623      	mov	r3, r4
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	4603      	mov	r3, r0
 8001818:	71bb      	strb	r3, [r7, #6]
 800181a:	460b      	mov	r3, r1
 800181c:	717b      	strb	r3, [r7, #5]
 800181e:	4613      	mov	r3, r2
 8001820:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8001822:	202a      	movs	r0, #42	; 0x2a
 8001824:	f7ff fece 	bl	80015c4 <tftSendCmd>
	tftSendData(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fedf 	bl	80015ec <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <tftSetAddrWindow+0x98>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4413      	add	r3, r2
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fed6 	bl	80015ec <tftSendData>
	tftSendData(0x00);
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff fed3 	bl	80015ec <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <tftSetAddrWindow+0x98>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	797b      	ldrb	r3, [r7, #5]
 800184e:	4413      	add	r3, r2
 8001850:	b2db      	uxtb	r3, r3
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff feca 	bl	80015ec <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001858:	202b      	movs	r0, #43	; 0x2b
 800185a:	f7ff feb3 	bl	80015c4 <tftSendCmd>
	tftSendData(0x00);
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fec4 	bl	80015ec <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <tftSetAddrWindow+0x9c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	79bb      	ldrb	r3, [r7, #6]
 800186c:	4413      	add	r3, r2
 800186e:	b2db      	uxtb	r3, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff febb 	bl	80015ec <tftSendData>
	tftSendData(0x00);
 8001876:	2000      	movs	r0, #0
 8001878:	f7ff feb8 	bl	80015ec <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <tftSetAddrWindow+0x9c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	793b      	ldrb	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	b2db      	uxtb	r3, r3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff feaf 	bl	80015ec <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 800188e:	202c      	movs	r0, #44	; 0x2c
 8001890:	f7ff fe98 	bl	80015c4 <tftSendCmd>
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	20000590 	.word	0x20000590
 80018a0:	20000594 	.word	0x20000594

080018a4 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 80018ae:	2107      	movs	r1, #7
 80018b0:	4809      	ldr	r0, [pc, #36]	; (80018d8 <tftPushColor+0x34>)
 80018b2:	f002 fad8 	bl	8003e66 <gpioSetPin>
	putpix(color);
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff fe6c 	bl	800159c <tftSPISenddata>
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fe67 	bl	800159c <tftSPISenddata>
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40020800 	.word	0x40020800

080018dc <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	460b      	mov	r3, r1
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db22      	blt.n	800193c <tftDrawPixel+0x60>
 80018f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <tftDrawPixel+0x68>)
 80018fc:	8812      	ldrh	r2, [r2, #0]
 80018fe:	4293      	cmp	r3, r2
 8001900:	da1c      	bge.n	800193c <tftDrawPixel+0x60>
 8001902:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db18      	blt.n	800193c <tftDrawPixel+0x60>
 800190a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190e:	4a0e      	ldr	r2, [pc, #56]	; (8001948 <tftDrawPixel+0x6c>)
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	4293      	cmp	r3, r2
 8001914:	da12      	bge.n	800193c <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	b2d8      	uxtb	r0, r3
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	b2d9      	uxtb	r1, r3
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	3301      	adds	r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	88bb      	ldrh	r3, [r7, #4]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3301      	adds	r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f7ff ff69 	bl	8001804 <tftSetAddrWindow>
	tftPushColor(color);
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ffb5 	bl	80018a4 <tftPushColor>
 800193a:	e000      	b.n	800193e <tftDrawPixel+0x62>
		return;
 800193c:	bf00      	nop
}
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000000 	.word	0x20000000
 8001948:	20000002 	.word	0x20000002

0800194c <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4604      	mov	r4, r0
 8001954:	4608      	mov	r0, r1
 8001956:	4611      	mov	r1, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4623      	mov	r3, r4
 800195c:	80fb      	strh	r3, [r7, #6]
 800195e:	4603      	mov	r3, r0
 8001960:	80bb      	strh	r3, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	807b      	strh	r3, [r7, #2]
 8001966:	4613      	mov	r3, r2
 8001968:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 800196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800196e:	4a37      	ldr	r2, [pc, #220]	; (8001a4c <tftFillRect+0x100>)
 8001970:	8812      	ldrh	r2, [r2, #0]
 8001972:	4293      	cmp	r3, r2
 8001974:	da65      	bge.n	8001a42 <tftFillRect+0xf6>
 8001976:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800197a:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <tftFillRect+0x104>)
 800197c:	8812      	ldrh	r2, [r2, #0]
 800197e:	4293      	cmp	r3, r2
 8001980:	da5f      	bge.n	8001a42 <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 8001982:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001986:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800198a:	4413      	add	r3, r2
 800198c:	4a2f      	ldr	r2, [pc, #188]	; (8001a4c <tftFillRect+0x100>)
 800198e:	8812      	ldrh	r2, [r2, #0]
 8001990:	4293      	cmp	r3, r2
 8001992:	dd05      	ble.n	80019a0 <tftFillRect+0x54>
		{
		w = width  - x;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <tftFillRect+0x100>)
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	b29b      	uxth	r3, r3
 800199e:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 80019a0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <tftFillRect+0x104>)
 80019ac:	8812      	ldrh	r2, [r2, #0]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	dd05      	ble.n	80019be <tftFillRect+0x72>
		{
		h = height - y;
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <tftFillRect+0x104>)
 80019b4:	881a      	ldrh	r2, [r3, #0]
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	b2d8      	uxtb	r0, r3
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	b2d9      	uxtb	r1, r3
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b2dc      	uxtb	r4, r3
 80019d6:	88bb      	ldrh	r3, [r7, #4]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	883b      	ldrh	r3, [r7, #0]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	3b01      	subs	r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	4622      	mov	r2, r4
 80019e8:	f7ff ff0c 	bl	8001804 <tftSetAddrWindow>

	ST7735_DC1;
 80019ec:	2107      	movs	r1, #7
 80019ee:	4819      	ldr	r0, [pc, #100]	; (8001a54 <tftFillRect+0x108>)
 80019f0:	f002 fa39 	bl	8003e66 <gpioSetPin>
	for(y=h; y>0; y--)
 80019f4:	883b      	ldrh	r3, [r7, #0]
 80019f6:	80bb      	strh	r3, [r7, #4]
 80019f8:	e01e      	b.n	8001a38 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	80fb      	strh	r3, [r7, #6]
 80019fe:	e011      	b.n	8001a24 <tftFillRect+0xd8>
		{
			putpix(color);
 8001a00:	8b3b      	ldrh	r3, [r7, #24]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fdc7 	bl	800159c <tftSPISenddata>
 8001a0e:	8b3b      	ldrh	r3, [r7, #24]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff fdc2 	bl	800159c <tftSPISenddata>
		for(x=w; x>0; x--)
 8001a18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	80fb      	strh	r3, [r7, #6]
 8001a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	dce9      	bgt.n	8001a00 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8001a2c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	80bb      	strh	r3, [r7, #4]
 8001a38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	dcdc      	bgt.n	80019fa <tftFillRect+0xae>
 8001a40:	e000      	b.n	8001a44 <tftFillRect+0xf8>
		return;
 8001a42:	bf00      	nop
		}
	}
}
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd90      	pop	{r4, r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000002 	.word	0x20000002
 8001a54:	40020800 	.word	0x40020800

08001a58 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	80fb      	strh	r3, [r7, #6]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80bb      	strh	r3, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
 8001a72:	4613      	mov	r3, r2
 8001a74:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8001a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <tftDrawFastVLine+0xb4>)
 8001a7c:	8812      	ldrh	r2, [r2, #0]
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	da3f      	bge.n	8001b02 <tftDrawFastVLine+0xaa>
 8001a82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <tftDrawFastVLine+0xb8>)
 8001a88:	8812      	ldrh	r2, [r2, #0]
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	da39      	bge.n	8001b02 <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8001a8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <tftDrawFastVLine+0xb8>)
 8001a9a:	8812      	ldrh	r2, [r2, #0]
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	dd05      	ble.n	8001aac <tftDrawFastVLine+0x54>
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <tftDrawFastVLine+0xb8>)
 8001aa2:	881a      	ldrh	r2, [r3, #0]
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	b2d8      	uxtb	r0, r3
 8001ab0:	88bb      	ldrh	r3, [r7, #4]
 8001ab2:	b2d9      	uxtb	r1, r3
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	b2dc      	uxtb	r4, r3
 8001ab8:	88bb      	ldrh	r3, [r7, #4]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	887b      	ldrh	r3, [r7, #2]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	4622      	mov	r2, r4
 8001aca:	f7ff fe9b 	bl	8001804 <tftSetAddrWindow>

	ST7735_DC1;
 8001ace:	2107      	movs	r1, #7
 8001ad0:	4810      	ldr	r0, [pc, #64]	; (8001b14 <tftDrawFastVLine+0xbc>)
 8001ad2:	f002 f9c8 	bl	8003e66 <gpioSetPin>
	while (h--) {
 8001ad6:	e00b      	b.n	8001af0 <tftDrawFastVLine+0x98>
		putpix(color);
 8001ad8:	883b      	ldrh	r3, [r7, #0]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fd5b 	bl	800159c <tftSPISenddata>
 8001ae6:	883b      	ldrh	r3, [r7, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd56 	bl	800159c <tftSPISenddata>
	while (h--) {
 8001af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	3a01      	subs	r2, #1
 8001af8:	b292      	uxth	r2, r2
 8001afa:	807a      	strh	r2, [r7, #2]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1eb      	bne.n	8001ad8 <tftDrawFastVLine+0x80>
 8001b00:	e000      	b.n	8001b04 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8001b02:	bf00      	nop
	}
}
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000002 	.word	0x20000002
 8001b14:	40020800 	.word	0x40020800

08001b18 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <tftSetFont+0x40>)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <tftSetFont+0x40>)
 8001b2c:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	785a      	ldrb	r2, [r3, #1]
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <tftSetFont+0x40>)
 8001b34:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	789a      	ldrb	r2, [r3, #2]
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <tftSetFont+0x40>)
 8001b3c:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3303      	adds	r3, #3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <tftSetFont+0x40>)
 8001b48:	811a      	strh	r2, [r3, #8]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000059c 	.word	0x2000059c

08001b5c <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	; 0x24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001b6a:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <tftPrintChar+0x1e0>)
 8001b6c:	791b      	ldrb	r3, [r3, #4]
 8001b6e:	2b07      	cmp	r3, #7
 8001b70:	d803      	bhi.n	8001b7a <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001b72:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <tftPrintChar+0x1e0>)
 8001b74:	791b      	ldrb	r3, [r3, #4]
 8001b76:	77bb      	strb	r3, [r7, #30]
 8001b78:	e003      	b.n	8001b82 <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <tftPrintChar+0x1e0>)
 8001b7c:	791b      	ldrb	r3, [r3, #4]
 8001b7e:	08db      	lsrs	r3, r3, #3
 8001b80:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001b82:	4b6f      	ldr	r3, [pc, #444]	; (8001d40 <tftPrintChar+0x1e4>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d15e      	bne.n	8001c48 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	b2d8      	uxtb	r0, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	b2d9      	uxtb	r1, r3
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <tftPrintChar+0x1e0>)
 8001b94:	791a      	ldrb	r2, [r3, #4]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b2dc      	uxtb	r4, r3
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <tftPrintChar+0x1e0>)
 8001ba4:	795a      	ldrb	r2, [r3, #5]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4622      	mov	r2, r4
 8001bb4:	f7ff fe26 	bl	8001804 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <tftPrintChar+0x1e0>)
 8001bbc:	7992      	ldrb	r2, [r2, #6]
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	7fbb      	ldrb	r3, [r7, #30]
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <tftPrintChar+0x1e0>)
 8001bc8:	795b      	ldrb	r3, [r3, #5]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	fb11 f303 	smulbb	r3, r1, r3
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	fb12 f303 	smulbb	r3, r2, r3
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3304      	adds	r3, #4
 8001bda:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	83bb      	strh	r3, [r7, #28]
 8001be0:	e029      	b.n	8001c36 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001be2:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <tftPrintChar+0x1e0>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	8b7b      	ldrh	r3, [r7, #26]
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	77fb      	strb	r3, [r7, #31]
 8001bf2:	e017      	b.n	8001c24 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001bf4:	7cfa      	ldrb	r2, [r7, #19]
 8001bf6:	7ffb      	ldrb	r3, [r7, #31]
 8001bf8:	f1c3 0307 	rsb	r3, r3, #7
 8001bfc:	fa42 f303 	asr.w	r3, r2, r3
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001c08:	4b4e      	ldr	r3, [pc, #312]	; (8001d44 <tftPrintChar+0x1e8>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff fe49 	bl	80018a4 <tftPushColor>
 8001c12:	e004      	b.n	8001c1e <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001c14:	4b4c      	ldr	r3, [pc, #304]	; (8001d48 <tftPrintChar+0x1ec>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff fe43 	bl	80018a4 <tftPushColor>
			for(i=0;i<8;i++)
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	3301      	adds	r3, #1
 8001c22:	77fb      	strb	r3, [r7, #31]
 8001c24:	7ffb      	ldrb	r3, [r7, #31]
 8001c26:	2b07      	cmp	r3, #7
 8001c28:	d9e4      	bls.n	8001bf4 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001c2a:	8b7b      	ldrh	r3, [r7, #26]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001c30:	8bbb      	ldrh	r3, [r7, #28]
 8001c32:	3301      	adds	r3, #1
 8001c34:	83bb      	strh	r3, [r7, #28]
 8001c36:	8bba      	ldrh	r2, [r7, #28]
 8001c38:	7fbb      	ldrb	r3, [r7, #30]
 8001c3a:	4940      	ldr	r1, [pc, #256]	; (8001d3c <tftPrintChar+0x1e0>)
 8001c3c:	7949      	ldrb	r1, [r1, #5]
 8001c3e:	fb01 f303 	mul.w	r3, r1, r3
 8001c42:	429a      	cmp	r2, r3
 8001c44:	dbcd      	blt.n	8001be2 <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001c46:	e075      	b.n	8001d34 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	4a3c      	ldr	r2, [pc, #240]	; (8001d3c <tftPrintChar+0x1e0>)
 8001c4c:	7992      	ldrb	r2, [r2, #6]
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	7fbb      	ldrb	r3, [r7, #30]
 8001c54:	b299      	uxth	r1, r3
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <tftPrintChar+0x1e0>)
 8001c58:	795b      	ldrb	r3, [r3, #5]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	fb11 f303 	smulbb	r3, r1, r3
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	fb12 f303 	smulbb	r3, r2, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3304      	adds	r3, #4
 8001c6a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	83bb      	strh	r3, [r7, #28]
 8001c70:	e05a      	b.n	8001d28 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e04b      	b.n	8001d10 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <tftPrintChar+0x1e0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	8b79      	ldrh	r1, [r7, #26]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	440a      	add	r2, r1
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
 8001c8c:	e03a      	b.n	8001d04 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	7ffb      	ldrb	r3, [r7, #31]
 8001c94:	4413      	add	r3, r2
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b2d8      	uxtb	r0, r3
 8001ca4:	8bbb      	ldrh	r3, [r7, #28]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	4413      	add	r3, r2
 8001cae:	b2d9      	uxtb	r1, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2dc      	uxtb	r4, r3
 8001cca:	8bbb      	ldrh	r3, [r7, #28]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4622      	mov	r2, r4
 8001cdc:	f7ff fd92 	bl	8001804 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001ce0:	7cfa      	ldrb	r2, [r7, #19]
 8001ce2:	7ffb      	ldrb	r3, [r7, #31]
 8001ce4:	f1c3 0307 	rsb	r3, r3, #7
 8001ce8:	fa42 f303 	asr.w	r3, r2, r3
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d004      	beq.n	8001cfe <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <tftPrintChar+0x1e8>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fdd3 	bl	80018a4 <tftPushColor>
				for(i=0;i<8;i++)
 8001cfe:	7ffb      	ldrb	r3, [r7, #31]
 8001d00:	3301      	adds	r3, #1
 8001d02:	77fb      	strb	r3, [r7, #31]
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
 8001d06:	2b07      	cmp	r3, #7
 8001d08:	d9c1      	bls.n	8001c8e <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	7fbb      	ldrb	r3, [r7, #30]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbaf      	blt.n	8001c78 <tftPrintChar+0x11c>
			temp+=(fz);
 8001d18:	7fbb      	ldrb	r3, [r7, #30]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	8b7b      	ldrh	r3, [r7, #26]
 8001d1e:	4413      	add	r3, r2
 8001d20:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001d22:	8bbb      	ldrh	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	83bb      	strh	r3, [r7, #28]
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <tftPrintChar+0x1e0>)
 8001d2a:	795b      	ldrb	r3, [r3, #5]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	8bba      	ldrh	r2, [r7, #28]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d39e      	bcc.n	8001c72 <tftPrintChar+0x116>
}
 8001d34:	bf00      	nop
 8001d36:	3724      	adds	r7, #36	; 0x24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	2000059c 	.word	0x2000059c
 8001d40:	200005a8 	.word	0x200005a8
 8001d44:	20000008 	.word	0x20000008
 8001d48:	200005aa 	.word	0x200005aa
 8001d4c:	00000000 	.word	0x00000000

08001d50 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d54:	b08e      	sub	sp, #56	; 0x38
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	4603      	mov	r3, r0
 8001d60:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001d62:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001d64:	f7fe fbe6 	bl	8000534 <__aeabi_i2d>
 8001d68:	a395      	add	r3, pc, #596	; (adr r3, 8001fc0 <tftRotateChar+0x270>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fc4b 	bl	8000608 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001d7a:	4b8d      	ldr	r3, [pc, #564]	; (8001fb0 <tftRotateChar+0x260>)
 8001d7c:	791b      	ldrb	r3, [r3, #4]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d804      	bhi.n	8001d8c <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001d82:	4b8b      	ldr	r3, [pc, #556]	; (8001fb0 <tftRotateChar+0x260>)
 8001d84:	791b      	ldrb	r3, [r3, #4]
 8001d86:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001d8a:	e017      	b.n	8001dbc <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001d8c:	4b88      	ldr	r3, [pc, #544]	; (8001fb0 <tftRotateChar+0x260>)
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	08db      	lsrs	r3, r3, #3
 8001d92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	4a85      	ldr	r2, [pc, #532]	; (8001fb0 <tftRotateChar+0x260>)
 8001d9a:	7992      	ldrb	r2, [r2, #6]
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001da4:	b299      	uxth	r1, r3
 8001da6:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <tftRotateChar+0x260>)
 8001da8:	795b      	ldrb	r3, [r3, #5]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	fb11 f303 	smulbb	r3, r1, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	fb12 f303 	smulbb	r3, r2, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3304      	adds	r3, #4
 8001dba:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001dc2:	e0e6      	b.n	8001f92 <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dc8:	e0d2      	b.n	8001f70 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001dca:	4b79      	ldr	r3, [pc, #484]	; (8001fb0 <tftRotateChar+0x260>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd2:	440a      	add	r2, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001de0:	e0be      	b.n	8001f60 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001de2:	68b8      	ldr	r0, [r7, #8]
 8001de4:	f7fe fba6 	bl	8000534 <__aeabi_i2d>
 8001de8:	4604      	mov	r4, r0
 8001dea:	460d      	mov	r5, r1
 8001dec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	441a      	add	r2, r3
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <tftRotateChar+0x260>)
 8001df8:	791b      	ldrb	r3, [r3, #4]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	fb01 f303 	mul.w	r3, r1, r3
 8001e02:	4413      	add	r3, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb95 	bl	8000534 <__aeabi_i2d>
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e12:	f005 ffd5 	bl	8007dc0 <cos>
 8001e16:	ec53 2b10 	vmov	r2, r3, d0
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	4649      	mov	r1, r9
 8001e1e:	f7fe fbf3 	bl	8000608 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4692      	mov	sl, r2
 8001e28:	469b      	mov	fp, r3
 8001e2a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb80 	bl	8000534 <__aeabi_i2d>
 8001e34:	4680      	mov	r8, r0
 8001e36:	4689      	mov	r9, r1
 8001e38:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e3c:	f006 f814 	bl	8007e68 <sin>
 8001e40:	ec53 2b10 	vmov	r2, r3, d0
 8001e44:	4640      	mov	r0, r8
 8001e46:	4649      	mov	r1, r9
 8001e48:	f7fe fbde 	bl	8000608 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4650      	mov	r0, sl
 8001e52:	4659      	mov	r1, fp
 8001e54:	f7fe fa20 	bl	8000298 <__aeabi_dsub>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7fe fa1c 	bl	800029c <__adddf3>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f7fe fe7c 	bl	8000b68 <__aeabi_d2iz>
 8001e70:	4603      	mov	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7fe fb5d 	bl	8000534 <__aeabi_i2d>
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	460d      	mov	r5, r1
 8001e7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb56 	bl	8000534 <__aeabi_i2d>
 8001e88:	4680      	mov	r8, r0
 8001e8a:	4689      	mov	r9, r1
 8001e8c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001e90:	f005 ff96 	bl	8007dc0 <cos>
 8001e94:	ec53 2b10 	vmov	r2, r3, d0
 8001e98:	4640      	mov	r0, r8
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	f7fe fbb4 	bl	8000608 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4692      	mov	sl, r2
 8001ea6:	469b      	mov	fp, r3
 8001ea8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	441a      	add	r2, r3
 8001eb2:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <tftRotateChar+0x260>)
 8001eb4:	791b      	ldrb	r3, [r3, #4]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fb37 	bl	8000534 <__aeabi_i2d>
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	4689      	mov	r9, r1
 8001eca:	ed97 0b08 	vldr	d0, [r7, #32]
 8001ece:	f005 ffcb 	bl	8007e68 <sin>
 8001ed2:	ec53 2b10 	vmov	r2, r3, d0
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	4649      	mov	r1, r9
 8001eda:	f7fe fb95 	bl	8000608 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4650      	mov	r0, sl
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	f7fe f9d9 	bl	800029c <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe f9d3 	bl	800029c <__adddf3>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe33 	bl	8000b68 <__aeabi_d2iz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	b2d8      	uxtb	r0, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	b2d9      	uxtb	r1, r3
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f7ff fc71 	bl	8001804 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8001f22:	7ffa      	ldrb	r2, [r7, #31]
 8001f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f28:	f1c3 0307 	rsb	r3, r3, #7
 8001f2c:	fa42 f303 	asr.w	r3, r2, r3
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <tftRotateChar+0x264>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fcb1 	bl	80018a4 <tftPushColor>
 8001f42:	e008      	b.n	8001f56 <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8001f44:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <tftRotateChar+0x268>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d104      	bne.n	8001f56 <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <tftRotateChar+0x26c>)
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fca7 	bl	80018a4 <tftPushColor>
			for(i=0;i<8;i++)
 8001f56:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f64:	2b07      	cmp	r3, #7
 8001f66:	f67f af3c 	bls.w	8001de2 <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8001f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f70:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f76:	429a      	cmp	r2, r3
 8001f78:	f6ff af27 	blt.w	8001dca <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8001f7c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f84:	4413      	add	r3, r2
 8001f86:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8001f88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001f92:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <tftRotateChar+0x260>)
 8001f94:	795b      	ldrb	r3, [r3, #5]
 8001f96:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	f4ff af12 	bcc.w	8001dc4 <tftRotateChar+0x74>
	}
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3738      	adds	r7, #56	; 0x38
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fac:	f3af 8000 	nop.w
 8001fb0:	2000059c 	.word	0x2000059c
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	200005a8 	.word	0x200005a8
 8001fbc:	200005aa 	.word	0x200005aa
 8001fc0:	1eb851ec 	.word	0x1eb851ec
 8001fc4:	3f91eb85 	.word	0x3f91eb85

08001fc8 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08c      	sub	sp, #48	; 0x30
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f7fe f8fc 	bl	80001e0 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f113 0f02 	cmn.w	r3, #2
 8001ff2:	d10a      	bne.n	800200a <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 8001ff4:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <tftPrint+0x128>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <tftPrint+0x12c>)
 8001ffc:	791b      	ldrb	r3, [r3, #4]
 8001ffe:	4619      	mov	r1, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fb01 f303 	mul.w	r3, r1, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002010:	d10d      	bne.n	800202e <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8002012:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <tftPrint+0x130>)
 8002014:	881b      	ldrh	r3, [r3, #0]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <tftPrint+0x12c>)
 800201a:	791b      	ldrb	r3, [r3, #4]
 800201c:	4619      	mov	r1, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	0fda      	lsrs	r2, r3, #31
 8002028:	4413      	add	r3, r2
 800202a:	105b      	asrs	r3, r3, #1
 800202c:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
 8002032:	e053      	b.n	80020dc <tftPrint+0x114>
	{
		lettercount++;
 8002034:	6a3b      	ldr	r3, [r7, #32]
 8002036:	3301      	adds	r3, #1
 8002038:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d112      	bne.n	8002066 <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1c5a      	adds	r2, r3, #1
 8002044:	60fa      	str	r2, [r7, #12]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fd85 	bl	8001b5c <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <tftPrint+0x12c>)
 8002054:	791b      	ldrb	r3, [r3, #4]
 8002056:	461a      	mov	r2, r3
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	e00a      	b.n	800207c <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1c5a      	adds	r2, r3, #1
 800206a:	60fa      	str	r2, [r7, #12]
 800206c:	7818      	ldrb	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	f7ff fe6a 	bl	8001d50 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 800207c:	f000 f8c4 	bl	8002208 <tftGetWidth>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <tftPrint+0x12c>)
 8002086:	791b      	ldrb	r3, [r3, #4]
 8002088:	fbb2 f3f3 	udiv	r3, r2, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	4293      	cmp	r3, r2
 8002094:	db1f      	blt.n	80020d6 <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <tftPrint+0x12c>)
 80020a0:	795b      	ldrb	r3, [r3, #5]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 80020aa:	f000 f8b9 	bl	8002220 <tftGetHeight>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <tftPrint+0x12c>)
 80020b4:	795b      	ldrb	r3, [r3, #5]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	dd09      	ble.n	80020d2 <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80020be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020c2:	f7ff fa5d 	bl	8001580 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80020c6:	2000      	movs	r0, #0
 80020c8:	f000 f834 	bl	8002134 <tftFillScreen>
				y=0; // start at top left of new Page
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	e001      	b.n	80020d6 <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dba7      	blt.n	8002034 <tftPrint+0x6c>
			}

		}

	}
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	; 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000000 	.word	0x20000000
 80020f4:	2000059c 	.word	0x2000059c
 80020f8:	20000002 	.word	0x20000002

080020fc <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <tftPrintColor+0x34>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8002110:	4a07      	ldr	r2, [pc, #28]	; (8002130 <tftPrintColor+0x34>)
 8002112:	887b      	ldrh	r3, [r7, #2]
 8002114:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 8002116:	2300      	movs	r3, #0
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7ff ff53 	bl	8001fc8 <tftPrint>
	_fg = _fg_old;
 8002122:	4a03      	ldr	r2, [pc, #12]	; (8002130 <tftPrintColor+0x34>)
 8002124:	8afb      	ldrh	r3, [r7, #22]
 8002126:	8013      	strh	r3, [r2, #0]
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20000008 	.word	0x20000008

08002134 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af02      	add	r7, sp, #8
 800213a:	4603      	mov	r3, r0
 800213c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <tftFillScreen+0x2c>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b21a      	sxth	r2, r3
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <tftFillScreen+0x30>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b219      	sxth	r1, r3
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	460b      	mov	r3, r1
 8002150:	2100      	movs	r1, #0
 8002152:	2000      	movs	r0, #0
 8002154:	f7ff fbfa 	bl	800194c <tftFillRect>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000000 	.word	0x20000000
 8002164:	20000002 	.word	0x20000002

08002168 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 0303 	and.w	r3, r3, #3
 8002178:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800217a:	2036      	movs	r0, #54	; 0x36
 800217c:	f7ff fa22 	bl	80015c4 <tftSendCmd>

	switch (rotation)
 8002180:	7bfb      	ldrb	r3, [r7, #15]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d836      	bhi.n	80021f4 <tftSetRotation+0x8c>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <tftSetRotation+0x24>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	0800219d 	.word	0x0800219d
 8002190:	080021b1 	.word	0x080021b1
 8002194:	080021c5 	.word	0x080021c5
 8002198:	080021d9 	.word	0x080021d9
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800219c:	20c0      	movs	r0, #192	; 0xc0
 800219e:	f7ff fa25 	bl	80015ec <tftSendData>
		width  = ST7735_TFTWIDTH;
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <tftSetRotation+0x94>)
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <tftSetRotation+0x98>)
 80021aa:	22a0      	movs	r2, #160	; 0xa0
 80021ac:	801a      	strh	r2, [r3, #0]
		break;
 80021ae:	e01d      	b.n	80021ec <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80021b0:	20a0      	movs	r0, #160	; 0xa0
 80021b2:	f7ff fa1b 	bl	80015ec <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <tftSetRotation+0x94>)
 80021b8:	22a0      	movs	r2, #160	; 0xa0
 80021ba:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80021bc:	4b10      	ldr	r3, [pc, #64]	; (8002200 <tftSetRotation+0x98>)
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	801a      	strh	r2, [r3, #0]
		   break;
 80021c2:	e013      	b.n	80021ec <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff fa11 	bl	80015ec <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <tftSetRotation+0x94>)
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <tftSetRotation+0x98>)
 80021d2:	22a0      	movs	r2, #160	; 0xa0
 80021d4:	801a      	strh	r2, [r3, #0]
		   break;
 80021d6:	e009      	b.n	80021ec <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80021d8:	2060      	movs	r0, #96	; 0x60
 80021da:	f7ff fa07 	bl	80015ec <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <tftSetRotation+0x94>)
 80021e0:	22a0      	movs	r2, #160	; 0xa0
 80021e2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <tftSetRotation+0x98>)
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	801a      	strh	r2, [r3, #0]
		   break;
 80021ea:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <tftSetRotation+0x9c>)
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	7013      	strb	r3, [r2, #0]
 80021f2:	e000      	b.n	80021f6 <tftSetRotation+0x8e>
		   return;
 80021f4:	bf00      	nop
}
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000000 	.word	0x20000000
 8002200:	20000002 	.word	0x20000002
 8002204:	20000598 	.word	0x20000598

08002208 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <tftGetWidth+0x14>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	20000000 	.word	0x20000000

08002220 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <tftGetHeight+0x14>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	20000002 	.word	0x20000002

08002238 <setI2CBus>:
 * set the i2c bus of the stepper inside the struct
 * @param Stepper_t* stepper - the instance of the stepper
 * @param I2C_TypeDef i2c - the i2c bus the stepper is connected to
 */
void setI2CBus(Stepper_t* stepper, I2C_TypeDef* i2c)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
	stepper->i2cBus.i2c = i2c;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <getI2CBus>:
 * get the i2c bus of the stepper
 * @param Stepper_t* stepper - the instance of the stepper
 * @returns I2C_TypeDef - the i2c bus the stepper is connected to
 */
I2C_TypeDef* getI2CBus(Stepper_t* stepper)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	return stepper->i2cBus.i2c;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <setI2CAddress>:
 * set the i2c address of the stepper inside the struct
 * @param Stepper_t* stepper - the instance of the stepper
 * @param uint8_t addr - the i2c address of the stepper
 */
void setI2CAddress(Stepper_t* stepper, uint8_t addr)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	70fb      	strb	r3, [r7, #3]
	stepper->i2cAddress.value = addr;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	751a      	strb	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <getI2CAddress>:
 * get the i2c address of the stepper
 * @param Stepper_t* stepper - the instance of the stepper
 * @returns uint8_t - the i2c address of the stepper
 */
uint8_t getI2CAddress(Stepper_t* stepper)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	return stepper->i2cAddress.value;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7d1b      	ldrb	r3, [r3, #20]
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <getFullStatus1>:
 * read the data of the first system register of the stepper
 * @param Stepper_t* stepper - the stepper to read the data from
 * @returns void
 */
void getFullStatus1(Stepper_t* stepper, uint8_t readArray[8])
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
	I2C_TypeDef   *i2c;
	uint8_t addr;
	i2c = stepper->i2cBus.i2c;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]
	addr = stepper->i2cAddress.value;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7d1b      	ldrb	r3, [r3, #20]
 80022b6:	72fb      	strb	r3, [r7, #11]
	uint8_t befehl = (uint8_t) 0x81; // 0x81 is the command to get the FullStatus1
 80022b8:	2381      	movs	r3, #129	; 0x81
 80022ba:	72bb      	strb	r3, [r7, #10]
	i2cBurstWrite(i2c, addr, &befehl, 1);
 80022bc:	f107 020a 	add.w	r2, r7, #10
 80022c0:	7af9      	ldrb	r1, [r7, #11]
 80022c2:	2301      	movs	r3, #1
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f002 f8cf 	bl	8004468 <i2cBurstWrite>
	//for(int i = 0; i<10000; i++){;}		// small delay
	i2cBurstRead(i2c, addr, readArray, 8);
 80022ca:	7af9      	ldrb	r1, [r7, #11]
 80022cc:	2308      	movs	r3, #8
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f002 f926 	bl	8004522 <i2cBurstRead>
}
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <getFullStatus2>:
 * read the data of the second system register of the stepper
 * @param Stepper_t* stepper - the stepper to read the data from
 * @returns void
 */
void getFullStatus2(Stepper_t* stepper, uint8_t readArray[8])
{ // abspeichern als einzelne parameter im struct
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
	uint8_t befehl = (uint8_t) 0xFC; // 0xFc is the command to get the FullStatus2
 80022e8:	23fc      	movs	r3, #252	; 0xfc
 80022ea:	72bb      	strb	r3, [r7, #10]
	I2C_TypeDef   *i2c;
	uint8_t addr;
	i2c = stepper->i2cBus.i2c;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60fb      	str	r3, [r7, #12]
	addr = stepper->i2cAddress.value;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	7d1b      	ldrb	r3, [r3, #20]
 80022f6:	72fb      	strb	r3, [r7, #11]
	i2cBurstWrite(i2c, addr, &befehl, 1);
 80022f8:	f107 020a 	add.w	r2, r7, #10
 80022fc:	7af9      	ldrb	r1, [r7, #11]
 80022fe:	2301      	movs	r3, #1
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f002 f8b1 	bl	8004468 <i2cBurstWrite>
	i2cBurstRead(i2c, addr, readArray, 8);
 8002306:	7af9      	ldrb	r1, [r7, #11]
 8002308:	2308      	movs	r3, #8
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f002 f908 	bl	8004522 <i2cBurstRead>
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <setMotorParam>:
 * @param uint8_t addr - 8bit Address of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
void setMotorParam(Stepper_t* stepper)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7d1b      	ldrb	r3, [r3, #20]
 8002326:	77fb      	strb	r3, [r7, #31]
	i2c = stepper->i2cBus.i2c;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
	uint8_t befehl = (uint8_t) 0x89;
 800232e:	2389      	movs	r3, #137	; 0x89
 8002330:	75fb      	strb	r3, [r7, #23]
	uint8_t data[8];

	data[0] = befehl;
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	733b      	strb	r3, [r7, #12]
	data[1] = 0xFF;
 8002336:	23ff      	movs	r3, #255	; 0xff
 8002338:	737b      	strb	r3, [r7, #13]
	data[2] = 0xFF;
 800233a:	23ff      	movs	r3, #255	; 0xff
 800233c:	73bb      	strb	r3, [r7, #14]
	data[3] = (stepper->iRun.value << 4) | (stepper->iHold.value);		// uint8_t xxxx|yyyy x=iRun y=iHold
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	b25a      	sxtb	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234e:	b25b      	sxtb	r3, r3
 8002350:	4313      	orrs	r3, r2
 8002352:	b25b      	sxtb	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	73fb      	strb	r3, [r7, #15]
	data[4] = (stepper->vMax.value << 4) | (stepper->vMin.value);			// uint8_t xxxx|yyyy x=vMax y=vMin
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	b25a      	sxtb	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002368:	b25b      	sxtb	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b25b      	sxtb	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	743b      	strb	r3, [r7, #16]
	data[5] = (stepper->securePosition.value >> 3) | (stepper->rotationDirection.value << 4) | stepper->acceleration.value;		// uint8_t xxx|y|zzzz   x=securePosition(10:8) y=rotationDirection z=acceleration(3:0)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	b29b      	uxth	r3, r3
 800237c:	b25a      	sxtb	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	b25b      	sxtb	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b25a      	sxtb	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002392:	b25b      	sxtb	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b25b      	sxtb	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	747b      	strb	r3, [r7, #17]
	data[6] = (uint8_t) stepper->securePosition.value;					// =securePosition(7:0)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	74bb      	strb	r3, [r7, #18]
	// this line for set Stall Param 0x96
	data[7] = 0b10100010 | ((stepper->pwmFrequency.value) << 6) | ((stepper->accelerationShape.value) << 4) | ((stepper->stepMode.value) << 2) | (stepper->pwmJitter.value);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	b25b      	sxtb	r3, r3
 80023b0:	f063 035d 	orn	r3, r3, #93	; 0x5d
 80023b4:	b25a      	sxtb	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	4313      	orrs	r3, r2
 80023c2:	b25a      	sxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	4313      	orrs	r3, r2
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	74fb      	strb	r3, [r7, #19]
								// uint8_t 1|w|1|x|yy|1|z  w=pwmFrequency x=accelerationShape y=stepMode z=pwmJitter

	i2cBurstWrite(i2c, Addr, data, 8);
 80023e2:	f107 020c 	add.w	r2, r7, #12
 80023e6:	7ff9      	ldrb	r1, [r7, #31]
 80023e8:	2308      	movs	r3, #8
 80023ea:	69b8      	ldr	r0, [r7, #24]
 80023ec:	f002 f83c 	bl	8004468 <i2cBurstWrite>
}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <setStallParam5>:
void setStallParam5(Stepper_t* stepper)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7d1b      	ldrb	r3, [r3, #20]
 8002404:	75fb      	strb	r3, [r7, #23]
	i2c = stepper->i2cBus.i2c;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	613b      	str	r3, [r7, #16]
	uint8_t befehl = (uint8_t) 0x96;
 800240c:	2396      	movs	r3, #150	; 0x96
 800240e:	73fb      	strb	r3, [r7, #15]
	uint8_t data[6];

	data[0] = befehl;
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	723b      	strb	r3, [r7, #8]
	data[1] = 0xFF;
 8002414:	23ff      	movs	r3, #255	; 0xff
 8002416:	727b      	strb	r3, [r7, #9]
	data[2] = 0xFF;
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	72bb      	strb	r3, [r7, #10]
	data[3] = (stepper->iRun.value << 4) | (stepper->iHold.value);		// uint8_t xxxx|yyyy x=iRun y=iHold
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	b25a      	sxtb	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	b25b      	sxtb	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b25b      	sxtb	r3, r3
 8002432:	b2db      	uxtb	r3, r3
 8002434:	72fb      	strb	r3, [r7, #11]
	data[4] = (stepper->vMax.value << 4) | (stepper->vMin.value);			// uint8_t xxxx|yyyy x=vMax y=vMin
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	b25a      	sxtb	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4313      	orrs	r3, r2
 800244a:	b25b      	sxtb	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	733b      	strb	r3, [r7, #12]
	data[5] = ((stepper->securePosition.value >> 3)& 0b1110000) | ((stepper->rotationDirection.value & 0b1)<< 4) | (stepper->acceleration.value);		// uint8_t xxx|y|zzzz   XXXXXXX  z=acceleration(3:0)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8002456:	08db      	lsrs	r3, r3, #3
 8002458:	b29b      	uxth	r3, r3
 800245a:	b25b      	sxtb	r3, r3
 800245c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002460:	b25a      	sxtb	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	b25b      	sxtb	r3, r3
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	b25b      	sxtb	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b25a      	sxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800247c:	b25b      	sxtb	r3, r3
 800247e:	4313      	orrs	r3, r2
 8002480:	b25b      	sxtb	r3, r3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	737b      	strb	r3, [r7, #13]
	i2cBurstWrite(i2c, Addr, data, 6);
 8002486:	f107 0208 	add.w	r2, r7, #8
 800248a:	7df9      	ldrb	r1, [r7, #23]
 800248c:	2306      	movs	r3, #6
 800248e:	6938      	ldr	r0, [r7, #16]
 8002490:	f001 ffea 	bl	8004468 <i2cBurstWrite>
}
 8002494:	bf00      	nop
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <setStallParam>:
void setStallParam(Stepper_t* stepper)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	7d1b      	ldrb	r3, [r3, #20]
 80024a8:	75fb      	strb	r3, [r7, #23]
	i2c = stepper->i2cBus.i2c;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	613b      	str	r3, [r7, #16]
	uint8_t befehl = (uint8_t) 0x96;
 80024b0:	2396      	movs	r3, #150	; 0x96
 80024b2:	73fb      	strb	r3, [r7, #15]
	uint8_t data[4];

	data[0] = befehl;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	723b      	strb	r3, [r7, #8]
	data[1] = 0xFF;
 80024b8:	23ff      	movs	r3, #255	; 0xff
 80024ba:	727b      	strb	r3, [r7, #9]
	data[2] = 0xFF;
 80024bc:	23ff      	movs	r3, #255	; 0xff
 80024be:	72bb      	strb	r3, [r7, #10]
	data[3] = (stepper->iRun.value << 4) | (stepper->iHold.value);		// uint8_t xxxx|yyyy x=iRun y=iHold
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	b25a      	sxtb	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	72fb      	strb	r3, [r7, #11]
	data[4] = (stepper->vMax.value << 4) | (stepper->vMin.value);			// uint8_t xxxx|yyyy x=vMax y=vMin
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	b25a      	sxtb	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	733b      	strb	r3, [r7, #12]
	data[5] = ((stepper->securePosition.value >> 3)& 0b1110000) | ((stepper->rotationDirection.value & 0b1)<< 4) | (stepper->acceleration.value);		// uint8_t xxx|y|zzzz   XXXXXXX  z=acceleration(3:0)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 80024fa:	08db      	lsrs	r3, r3, #3
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002504:	b25a      	sxtb	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	b25b      	sxtb	r3, r3
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4313      	orrs	r3, r2
 8002518:	b25a      	sxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002520:	b25b      	sxtb	r3, r3
 8002522:	4313      	orrs	r3, r2
 8002524:	b25b      	sxtb	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	737b      	strb	r3, [r7, #13]
	data[6] = (uint8_t) stepper->securePosition.value;					// =securePosition(7:0)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 8002530:	b2db      	uxtb	r3, r3
 8002532:	73bb      	strb	r3, [r7, #14]
	// this line for set Stall Param 0x96
	data[7] = 0b10100010 | (stepper->pwmFrequency.value << 6) | (stepper->accelerationShape.value << 4) | (stepper->stepMode.value << 2) | stepper->pwmJitter.value;	// uint8_t ooo|x|yy|d|z  o=FS2Stall x=accelerationShape y=stepMode d =DC100SfEn z=pwmJitter
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800253a:	019b      	lsls	r3, r3, #6
 800253c:	b25b      	sxtb	r3, r3
 800253e:	f063 035d 	orn	r3, r3, #93	; 0x5d
 8002542:	b25a      	sxtb	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	b25b      	sxtb	r3, r3
 800254e:	4313      	orrs	r3, r2
 8002550:	b25a      	sxtb	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	b25b      	sxtb	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	b25a      	sxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8002566:	b25b      	sxtb	r3, r3
 8002568:	4313      	orrs	r3, r2
 800256a:	b25b      	sxtb	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	73fb      	strb	r3, [r7, #15]
	//data[7]=0b00001100;				// xxx|y|zz|xx  x=N/A y=AccShape z=stepMode
	i2cBurstWrite(i2c, Addr, data, 4);
 8002570:	f107 0208 	add.w	r2, r7, #8
 8002574:	7df9      	ldrb	r1, [r7, #23]
 8002576:	2304      	movs	r3, #4
 8002578:	6938      	ldr	r0, [r7, #16]
 800257a:	f001 ff75 	bl	8004468 <i2cBurstWrite>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <setIRun>:



void setIRun(Stepper_t* stepper, uint8_t value)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	70fb      	strb	r3, [r7, #3]
	stepper->iRun.value = value;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	setStallParam5(stepper);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff2c 	bl	80023f8 <setStallParam5>
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <getIRun>:
 * get the currently set operating current
 * @param Stepper_t* stepper - the instance of the stepper
 * @returns uint8_t - the currently set operating current
 */
uint8_t getIRun(Stepper_t* stepper)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	4619      	mov	r1, r3
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff fe73 	bl	80022a2 <getFullStatus1>
	stepper->iRun.value = data[1] >> 4; // iRun is in the second register
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ui_ret = stepper->iRun.value;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80025ce:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 80025d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3718      	adds	r7, #24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <setIHold>:
 * @param Stepper_t* stepper - the stepper to set the holding current
 * @param uint8_t value - the new holding current
 * @returns void
 */
void setIHold(Stepper_t* stepper, uint8_t value)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	70fb      	strb	r3, [r7, #3]
	stepper->iHold.value = value;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	setMotorParam(stepper);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff fe93 	bl	800231a <setMotorParam>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <getIHold>:
 * get the currently set holding current
 * @param Stepper_t* stepper - the stepper to read the current from
 * @returns uint8_t - the currently set holding current
 */
uint8_t getIHold(Stepper_t* stepper)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	4619      	mov	r1, r3
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fe49 	bl	80022a2 <getFullStatus1>
	stepper->iHold.value = data[1] & (uint8_t) 0b00001111;
 8002610:	7b7b      	ldrb	r3, [r7, #13]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ui_ret = stepper->iHold.value;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002624:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <setVMin>:
 * @param Stepper_t* stepper - the stepper to set the minimum speed
 * @param uint8_t value - the new minimum speed
 * @returns void
 */
void setVMin(Stepper_t* stepper, uint8_t value)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
	stepper->vMin.value = value;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	setStallParam5(stepper);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff fed7 	bl	80023f8 <setStallParam5>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <getVMin>:
 * get the currently set minimum speed
 * @param Stepper_t* stepper - the stepper to read the current from
 * @returns uint8_t - the currently set minimum speed
 */
uint8_t getVMin(Stepper_t* stepper)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	4619      	mov	r1, r3
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fe1e 	bl	80022a2 <getFullStatus1>
	stepper->vMin.value = data[2] & (uint8_t) 0b00001111;
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ui_ret = stepper->vMin.value;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 800267c:	7dfb      	ldrb	r3, [r7, #23]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <setVMax>:
 * @param Stepper_t* stepper - the stepper to set the maximum speed
 * @param uint8_t value - the new maximum speed
 * @returns void
 */
void setVMax(Stepper_t* stepper, uint8_t value)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
	stepper->vMax.value = value;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	setStallParam5(stepper);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff feac 	bl	80023f8 <setStallParam5>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <getVMax>:
 * get the maximum speed
 * @param Stepper_t* stepper - the stepper to read the maximum speed from
 * @returns uint8_t - the currently set maximum speed
 */
uint8_t getVMax(Stepper_t* stepper)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 80026b0:	f107 030c 	add.w	r3, r7, #12
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fdf3 	bl	80022a2 <getFullStatus1>
	stepper->vMax.value = data[2] >> 4;
 80026bc:	7bbb      	ldrb	r3, [r7, #14]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	ui_ret = stepper->vMax.value;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80026ce:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 80026d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <setStepMode>:
 * @param Stepper_t* stepper - the stepper to set the stepping mode
 * @param uint8_t value `0x0` .. `0x3` - for more information view data sheet 
 * @returns void
 */
void setStepMode(Stepper_t* stepper, uint8_t value)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	460b      	mov	r3, r1
 80026e4:	70fb      	strb	r3, [r7, #3]
	stepper->stepMode.value = value;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	setStallParam(stepper);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fed4 	bl	800249c <setStallParam>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <getStepMode>:
 *
 * @param Stepper_t* stepper - the stepper to read the stepping mode from
 * @returns uint8_t - `0x0` .. `0x3`
 */
uint8_t getStepMode(Stepper_t* stepper)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff fdc9 	bl	80022a2 <getFullStatus1>
	stepper->stepMode.value = data[3] >> 5;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	b2da      	uxtb	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	ui_ret = stepper->stepMode.value;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002722:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 8002724:	7dfb      	ldrb	r3, [r7, #23]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <setRotDir>:
 * @param Stepper_t* stepper - the stepper to set the rotation direction
 * @param uint8_t value - 0x0 / 0x1, this translates to cw or ccw - for more information view data sheet
 * @returns void
 */
void setRotDir(Stepper_t* stepper, uint8_t value)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	460b      	mov	r3, r1
 8002738:	70fb      	strb	r3, [r7, #3]
	stepper->rotationDirection.value = value;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	setStallParam5(stepper);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fe58 	bl	80023f8 <setStallParam5>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <getRotDir>:
 * get the currently set rotation direction cw / ccw
 * @param Stepper_t* stepper - the stepper to read the rotation direction from
 * @returns uint8_t - returns 0 or 1
 */
uint8_t getRotDir(Stepper_t* stepper)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4619      	mov	r1, r3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff fd9f 	bl	80022a2 <getFullStatus1>
	stepper->rotationDirection.value = data[3] >> 4;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	091b      	lsrs	r3, r3, #4
 8002768:	b2da      	uxtb	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	stepper->rotationDirection.value = stepper->rotationDirection.value & 0b00000001;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	b2da      	uxtb	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	ui_ret = stepper->rotationDirection.value;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002788:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 800278a:	7dfb      	ldrb	r3, [r7, #23]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <setAccel>:
 * @param Stepper_t* stepper - the stepper to set the acceleration
 * @param uint32_t value - the acceleration value
 * @returns void
 */
void setAccel(Stepper_t* stepper, uint8_t value)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
	stepper->acceleration.value = value;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	setStallParam5(stepper);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff fe25 	bl	80023f8 <setStallParam5>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <getAccel>:
 * get the acceleration
 * @param Stepper_t* stepper - the stepper to read the acceleration from
 * @returns uint8_t - the acceleration value: 0x0 .. 0xF, 49Full−step/s^2 .. 40047Full−step/s^2 - for more information view data sheet
 */
uint8_t getAccel(Stepper_t* stepper)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b086      	sub	sp, #24
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	4619      	mov	r1, r3
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff fd6c 	bl	80022a2 <getFullStatus1>
	stepper->acceleration.value = data[3] & (uint8_t) 0b00001111;
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	f003 030f 	and.w	r3, r3, #15
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	ui_ret =stepper->acceleration.value;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80027de:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 80027e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <setSecPos>:
 * @param Stepper_t* stepper - the stepper to set the secure position
 * @param uint8_t value - the shaft value
 * @returns void
 */
void setSecPos(Stepper_t* stepper, uint16_t value)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	807b      	strh	r3, [r7, #2]
	stepper->securePosition.value = value;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	887a      	ldrh	r2, [r7, #2]
 80027fa:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	setStallParam(stepper);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff fe4c 	bl	800249c <setStallParam>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <getSecPos>:
 * 
 * @param Stepper_t* stepper - the stepper to read the secure position from
 * @returns uint32_t - the secure position of the stepper 
 */
uint16_t getSecPos(Stepper_t* stepper)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus2(stepper, data);
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	4619      	mov	r1, r3
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fd5f 	bl	80022de <getFullStatus2>
	stepper->securePosition.value = ((uint16_t)data[6] << 8) + (uint16_t)data[5];
 8002820:	7cbb      	ldrb	r3, [r7, #18]
 8002822:	b29b      	uxth	r3, r3
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	b29a      	uxth	r2, r3
 8002828:	7c7b      	ldrb	r3, [r7, #17]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4413      	add	r3, r2
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	stepper->securePosition.value &= (uint16_t) 0x01FF;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 800283c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002840:	b29a      	uxth	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	ui_ret = stepper->securePosition.value;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 800284e:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	b29b      	uxth	r3, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <setAccelShape>:
 * @param Stepper_t* stepper - the stepper to set the acceleration shape
 * @param uint8_t value - 0x0 / 0x1, `0`: normal acceleration from vMin to vMax, `1`: motion at vMin without acceleration - for more information view data sheet 
 * @returns void
 */
void setAccelShape(Stepper_t* stepper, uint8_t value)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	70fb      	strb	r3, [r7, #3]
	stepper->accelerationShape.value = value;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	setStallParam(stepper);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff fe13 	bl	800249c <setStallParam>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <getAccelShape>:
 * 
 * @param Stepper_t* stepper - the stepper to read the acceleration shape from
 * @returns uint8_t `0`: normal acceleration from vMin to vMax, `1`: motion at vMin without acceleration
 */
uint8_t getAccelShape(Stepper_t* stepper)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
	uint8_t data[8], ui_ret;
	getFullStatus1(stepper, data);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	4619      	mov	r1, r3
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff fd08 	bl	80022a2 <getFullStatus1>
	stepper->accelerationShape.value = data[3] >> 7;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	09db      	lsrs	r3, r3, #7
 8002896:	b2da      	uxtb	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	ui_ret = stepper->accelerationShape.value;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80028a4:	75fb      	strb	r3, [r7, #23]
	return ui_ret;
 80028a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <StepperGetPos>:
 *
 * @param Stepper_t* stepper - the stepper to read the acceleration shape from
 * @returns uint16_t 16bit integer `-30000` .. `+30000`
 */
int16_t StepperGetPos(Stepper_t* stepper)
{ // was getActualPosition
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	// it takes at 100KHz I2C Clock 1,16ms
	uint8_t data[8];
	int16_t i_ret;
	uint8_t befehl = (uint8_t) 0xFC; // 0xFc is the command to get the FullStatus2
 80028b8:	23fc      	movs	r3, #252	; 0xfc
 80028ba:	73fb      	strb	r3, [r7, #15]
	I2C_TypeDef   *i2c;
	uint8_t addr;
	i2c = stepper->i2cBus.i2c;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61fb      	str	r3, [r7, #28]
	addr = stepper->i2cAddress.value;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	7d1b      	ldrb	r3, [r3, #20]
 80028c6:	76fb      	strb	r3, [r7, #27]
	i2cBurstWrite(i2c, addr, &befehl, 1);
 80028c8:	f107 020f 	add.w	r2, r7, #15
 80028cc:	7ef9      	ldrb	r1, [r7, #27]
 80028ce:	2301      	movs	r3, #1
 80028d0:	69f8      	ldr	r0, [r7, #28]
 80028d2:	f001 fdc9 	bl	8004468 <i2cBurstWrite>
	i2cBurstRead(i2c, addr, data, 3);
 80028d6:	f107 0210 	add.w	r2, r7, #16
 80028da:	7ef9      	ldrb	r1, [r7, #27]
 80028dc:	2303      	movs	r3, #3
 80028de:	69f8      	ldr	r0, [r7, #28]
 80028e0:	f001 fe1f 	bl	8004522 <i2cBurstRead>


	stepper->position.value = (int16_t) ((((uint16_t) data[1]) << 8) | (uint16_t) data[2]);
 80028e4:	7c7b      	ldrb	r3, [r7, #17]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	b21a      	sxth	r2, r3
 80028ea:	7cbb      	ldrb	r3, [r7, #18]
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	4313      	orrs	r3, r2
 80028f0:	b21a      	sxth	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	i_ret = stepper->position.value;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 80028fe:	833b      	strh	r3, [r7, #24]
	return i_ret;
 8002900:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3720      	adds	r7, #32
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <StepperSetPos>:
 * @param Stepper_t* stepper - the stepper to set the position
 * @param int step - the step the stepper shall go to - for more information view data sheet 
 * @returns void
 */
void StepperSetPos(Stepper_t* stepper, int16_t value)
{ // was setPosition
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	807b      	strh	r3, [r7, #2]
	// it takes at 100KHz I2C Clock 1,18ms
	stepper->position.value = value;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	uint8_t befehl = (uint8_t) 0x8B;
 8002920:	238b      	movs	r3, #139	; 0x8b
 8002922:	75fb      	strb	r3, [r7, #23]
	uint8_t data[5];
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7d1b      	ldrb	r3, [r3, #20]
 8002928:	75bb      	strb	r3, [r7, #22]
	i2c = stepper->i2cBus.i2c;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	613b      	str	r3, [r7, #16]

	data[0] = befehl; 		// first byte is the 'SetMotorParam' command
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	723b      	strb	r3, [r7, #8]
	data[1] = 0xFF; 		// second byte is 0xFF
 8002934:	23ff      	movs	r3, #255	; 0xff
 8002936:	727b      	strb	r3, [r7, #9]
	data[2] = 0xFF; 		// third byte is 0xFF
 8002938:	23ff      	movs	r3, #255	; 0xff
 800293a:	72bb      	strb	r3, [r7, #10]
	data[3] = (uint8_t) (stepper->position.value >> 8); 						// forth byte is the first 8 bits of the data
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002942:	121b      	asrs	r3, r3, #8
 8002944:	b21b      	sxth	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	72fb      	strb	r3, [r7, #11]
	data[4] = (uint8_t) (stepper->position.value & 0b0000000011111111); 		// fifth byte is the last 8 bits of the data
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f9b3 30c8 	ldrsh.w	r3, [r3, #200]	; 0xc8
 8002950:	b2db      	uxtb	r3, r3
 8002952:	733b      	strb	r3, [r7, #12]
	i2cBurstWrite(i2c, Addr, data, 5); 	// send the data to the stepper
 8002954:	f107 0208 	add.w	r2, r7, #8
 8002958:	7db9      	ldrb	r1, [r7, #22]
 800295a:	2305      	movs	r3, #5
 800295c:	6938      	ldr	r0, [r7, #16]
 800295e:	f001 fd83 	bl	8004468 <i2cBurstWrite>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <setPWMFrequency>:
 * set the PWM frequency
 * @param Stepper_t* stepper - the stepper to set the PWM frequency
 * @param uint8_t value - the new PWM frequency: default 0x0 = 22kHz; 0x1 = 44kHz no more annoying motor sound - for more information view data sheet
*/
void setPWMFrequency(Stepper_t* stepper, uint8_t value)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	70fb      	strb	r3, [r7, #3]
	stepper->pwmFrequency.value = value;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	setMotorParam(stepper);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fccb 	bl	800231a <setMotorParam>
	data[5] = (stepper->securePosition.value >> 3) | (stepper->rotationDirection.value << 4) | stepper->acceleration.value; 	// sixth byte is securePosition(10:8), rotationDirection and acceleration
	data[6] = (uint8_t)(stepper->securePosition.value); 	// seventh byte is securePosition(7:0)
	data[7] = 0x10100010 | (stepper->pwmFrequency.value << 6) | (value << 4) | (stepper->stepMode.value) | stepper->pwmJitter.value;	// pwmFrequency, AccShape, stepMode, pwmJitter
	i2cBurstWrite(i2c, Addr, data, 8); 	// send the data to the stepper
	*/
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <getPWMJitter>:
/**
 * get the PWM Jitter
 * @param Stepper_t* stepper - the stepper to read the PWM Jitter from
 * @returns uint8_t - the currently set PWM Jitter
*/
uint8_t getPWMJitter(Stepper_t* stepper) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	getFullStatus2(stepper, data);
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fc9f 	bl	80022de <getFullStatus2>
	stepper->pwmJitter.value = data[7] & (uint8_t) 0x0000001F;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	return stepper->pwmJitter.value;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <setPWMJitter>:
 * set the PWM Jitter
 * @param Stepper_t* stepper - the stepper to set the PWM Jitter
 * @param uint8_t value - the new PWM Jitter: 0x0 / 0x1 - for more information view data sheet
*/
void setPWMJitter(Stepper_t* stepper, uint8_t value)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
	stepper->pwmJitter.value = value;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
	setMotorParam(stepper);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fca2 	bl	800231a <setMotorParam>
	data[5] = (stepper->securePosition.value >> 3) | (stepper->rotationDirection.value << 4) | stepper->acceleration.value; 	// sixth byte is securePosition(10:8), rotationDirection and acceleration
	data[6] = (uint8_t)(stepper->securePosition.value); 	// seventh byte is securePosition(7:0)
	data[7] = 0b10100010 | (stepper->pwmFrequency.value << 6) | (	stepper->accelerationShape.value << 4) | (stepper->stepMode.value << 2) | stepper->pwmJitter.value;	// 1|w|1|x|yy|1|z  w = pwmFrequency, x = accelerationShape, y = stepMode, z = pwmJitter
	i2cBurstWrite(i2c, Addr, data, 8); 	// send the data to the stepper
*/
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <getRelativeMotionThreshold>:
 * get the current relative motion threshold
 * 
 * @param Stepper_t* stepper - the stepper to read the relative motion threshold from
 * @returns uint8_t - the currently set relative motion threshold
 */
uint8_t getRelativeMotionThreshold(Stepper_t* stepper) {
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
	uint8_t data[8];
	getFullStatus1(stepper, data);
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	4619      	mov	r1, r3
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fc58 	bl	80022a2 <getFullStatus1>
	stepper->relativeMotionThreshold.value = data[7] & (uint8_t) 0x00001111;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	f003 0311 	and.w	r3, r3, #17
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	return stepper->relativeMotionThreshold.value;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <setRelativeMotionThreshold>:
 * @param Stepper_t* stepper - the stepper to set the relative motion threshold
 * @param uint8_t value - the new relative motion threshold
 * @returns void
 */
void setRelativeMotionThreshold(Stepper_t* stepper, uint8_t value)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	70fb      	strb	r3, [r7, #3]
	stepper->relativeMotionThreshold.value = value;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
	uint8_t befehl = (uint8_t) 0x96;
 8002a22:	2396      	movs	r3, #150	; 0x96
 8002a24:	75fb      	strb	r3, [r7, #23]
	uint8_t data[8];
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7d1b      	ldrb	r3, [r3, #20]
 8002a2a:	75bb      	strb	r3, [r7, #22]
	i2c = stepper->i2cBus.i2c;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	613b      	str	r3, [r7, #16]

	data[0] = befehl; 		// first byte is the 'SetStallParam' command
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
 8002a34:	723b      	strb	r3, [r7, #8]
	data[1] = 0xFF; 		// second byte is 0xFF
 8002a36:	23ff      	movs	r3, #255	; 0xff
 8002a38:	727b      	strb	r3, [r7, #9]
	data[2] = 0xFF; 		// third byte is 0xFF
 8002a3a:	23ff      	movs	r3, #255	; 0xff
 8002a3c:	72bb      	strb	r3, [r7, #10]
	data[3] = (stepper->iRun.value << 4) | stepper->iHold.value; 	// forth byte is iRun and iHold
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	b25a      	sxtb	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a4e:	b25b      	sxtb	r3, r3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b25b      	sxtb	r3, r3
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	72fb      	strb	r3, [r7, #11]
	data[4] = (stepper->vMax.value << 4) | stepper->vMin.value; 	// fifth byte is vMax and vMin
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	b25a      	sxtb	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a68:	b25b      	sxtb	r3, r3
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	733b      	strb	r3, [r7, #12]
	data[5] = (stepper->rotationDirection.value << 4) | stepper->acceleration.value; 	// xxx|y|zzzz x = MinSamples (default = 000), y = rotationDirection, z = acceleration
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	b25a      	sxtb	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002a82:	b25b      	sxtb	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b25b      	sxtb	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	737b      	strb	r3, [r7, #13]
	data[6] = 0b00001111 & stepper->relativeMotionThreshold.value; 	// xxxx|yyyy x = absolute motion threshold (use 0), y = relative motion threshold
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	73bb      	strb	r3, [r7, #14]
	data[7] = (stepper->accelerationShape.value << 4) | (stepper->stepMode.value << 2) | stepper->pwmJitter.value;	// vvv|w|xx|y|z    v = FS2StallEn (use 0), w = accelerationShape, x = stepMode, y = DC100StEn (default = 0), z = pwmJitter
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	b25a      	sxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	b25a      	sxtb	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	4313      	orrs	r3, r2
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c, Addr, data, 8); 	// send the data to the stepper
 8002ac2:	f107 0208 	add.w	r2, r7, #8
 8002ac6:	7db9      	ldrb	r1, [r7, #22]
 8002ac8:	2308      	movs	r3, #8
 8002aca:	6938      	ldr	r0, [r7, #16]
 8002acc:	f001 fccc 	bl	8004468 <i2cBurstWrite>
}
 8002ad0:	bf00      	nop
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <StepperResetPosition>:
 *
 * @param Stepper_t* stepper - the stepper instance
 * @returns void
 */
void StepperResetPosition(Stepper_t* stepper)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	7d1b      	ldrb	r3, [r3, #20]
 8002ae4:	75fb      	strb	r3, [r7, #23]
	i2c = stepper->i2cBus.i2c;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	613b      	str	r3, [r7, #16]
	uint8_t befehl = (uint8_t) 0x86;
 8002aec:	2386      	movs	r3, #134	; 0x86
 8002aee:	73fb      	strb	r3, [r7, #15]
	i2cBurstWrite(i2c, Addr, &befehl, 1);
 8002af0:	f107 020f 	add.w	r2, r7, #15
 8002af4:	7df9      	ldrb	r1, [r7, #23]
 8002af6:	2301      	movs	r3, #1
 8002af8:	6938      	ldr	r0, [r7, #16]
 8002afa:	f001 fcb5 	bl	8004468 <i2cBurstWrite>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <StepperSoftStop>:
 *
 * @param Stepper_t* stepper - the stepper instance
 * @returns void
 */
void StepperSoftStop (Stepper_t* stepper)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	uint8_t befehl = (uint8_t) 0x8F;
 8002b0e:	238f      	movs	r3, #143	; 0x8f
 8002b10:	73fb      	strb	r3, [r7, #15]
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7d1b      	ldrb	r3, [r3, #20]
 8002b16:	75fb      	strb	r3, [r7, #23]
	i2c = stepper->i2cBus.i2c;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	613b      	str	r3, [r7, #16]
	i2cBurstWrite(i2c, Addr, &befehl, 1);
 8002b1e:	f107 020f 	add.w	r2, r7, #15
 8002b22:	7df9      	ldrb	r1, [r7, #23]
 8002b24:	2301      	movs	r3, #1
 8002b26:	6938      	ldr	r0, [r7, #16]
 8002b28:	f001 fc9e 	bl	8004468 <i2cBurstWrite>
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <StepperSetDualPosition>:
 * @param uint16_t pos1 - the first target step - for more information view data sheet
 * @param uint16_t pos2 - the second target step - for more information view data sheet
 * @returns void
 */
void StepperSetDualPosition(Stepper_t* stepper, uint16_t pos1, uint16_t pos2)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	803b      	strh	r3, [r7, #0]
	uint8_t befehl = (uint8_t) 0x88;
 8002b44:	2388      	movs	r3, #136	; 0x88
 8002b46:	75fb      	strb	r3, [r7, #23]
	uint8_t data[8];
	I2C_TypeDef   *i2c;
	uint8_t Addr = stepper->i2cAddress.value;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7d1b      	ldrb	r3, [r3, #20]
 8002b4c:	75bb      	strb	r3, [r7, #22]
	i2c = stepper->i2cBus.i2c;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	613b      	str	r3, [r7, #16]
	data[0] = befehl; 		// first byte is the 'setDualPosition' command
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	723b      	strb	r3, [r7, #8]
	data[1] = 0xFF; 		// second byte is 0xFF
 8002b58:	23ff      	movs	r3, #255	; 0xff
 8002b5a:	727b      	strb	r3, [r7, #9]
	data[2] = 0xFF;			// third byte is 0xFF
 8002b5c:	23ff      	movs	r3, #255	; 0xff
 8002b5e:	72bb      	strb	r3, [r7, #10]
	data[3] = (stepper->vMax.value << 4) | stepper->vMin.value; // forth byte is xxxx|yyyy x=vMax and y=vMin
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	b25a      	sxtb	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b70:	b25b      	sxtb	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	72fb      	strb	r3, [r7, #11]
	data[4] = (uint8_t) (pos1 >> 8); 						// fifth byte is the first 8 bits of pos1
 8002b7a:	887b      	ldrh	r3, [r7, #2]
 8002b7c:	0a1b      	lsrs	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	733b      	strb	r3, [r7, #12]
	data[5] = (uint8_t) (pos1 & (uint16_t) 0b0000000011111111); 	// sixth byte is the last 8 bits of pos1
 8002b84:	887b      	ldrh	r3, [r7, #2]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	737b      	strb	r3, [r7, #13]
	data[6] = (uint8_t) (pos2 >> 8); 						// seventh byte is the first 8 bits of pos2
 8002b8a:	883b      	ldrh	r3, [r7, #0]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	73bb      	strb	r3, [r7, #14]
	data[7] = (uint8_t) (pos2 & (uint16_t) 0b0000000011111111); 	// eighth byte is the last 8 bits of pos2
 8002b94:	883b      	ldrh	r3, [r7, #0]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	73fb      	strb	r3, [r7, #15]

	i2cBurstWrite(i2c, Addr, data, 8);
 8002b9a:	f107 0208 	add.w	r2, r7, #8
 8002b9e:	7db9      	ldrb	r1, [r7, #22]
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	6938      	ldr	r0, [r7, #16]
 8002ba4:	f001 fc60 	bl	8004468 <i2cBurstWrite>
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <StepperInit>:
 * @param uint8_t mot_addr - 8bit Address of the stepper
 * @param uint8_t rotdir - `TRUE` / `FALSE`
 * @returns void
 */
void StepperInit(Stepper_t* stepper, I2C_TypeDef* i2cBus, uint8_t i2cAddress, uint8_t iRun, uint8_t iHold, uint8_t vMin, uint8_t vMax, uint8_t stepMode, uint8_t rotationDirection, uint8_t acceleration, uint16_t securePosition)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	71bb      	strb	r3, [r7, #6]
	stepper->i2cBus.i2c = i2cBus;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	601a      	str	r2, [r3, #0]
	stepper->i2cAddress.value = i2cAddress;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	79fa      	ldrb	r2, [r7, #7]
 8002bd0:	751a      	strb	r2, [r3, #20]
	stepper->iRun.value = iRun;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	79ba      	ldrb	r2, [r7, #6]
 8002bd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	stepper->iHold.value = iHold;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	stepper->vMin.value = vMin;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper->vMax.value = vMax;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002bf4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	stepper->stepMode.value = stepMode;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	stepper->rotationDirection.value = rotationDirection;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002c08:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	stepper->acceleration.value = acceleration;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	stepper->securePosition.value = securePosition;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002c1a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	stepper->rotationDirection.set(stepper, rotationDirection);
	stepper->acceleration.set(stepper, acceleration);
	stepper->securePosition.set(stepper, securePosition);*/

	uint8_t data[8];
	getFullStatus1(stepper, data);
 8002c1e:	f107 0310 	add.w	r3, r7, #16
 8002c22:	4619      	mov	r1, r3
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fb3c 	bl	80022a2 <getFullStatus1>
	getFullStatus2(stepper, data);
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4619      	mov	r1, r3
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff fb54 	bl	80022de <getFullStatus2>
	setMotorParam(stepper);
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff fb6f 	bl	800231a <setMotorParam>

	StepperResetPosition(stepper); 			/*
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f7ff ff4b 	bl	8002ad8 <StepperResetPosition>
												 * reset stepper Position wird auf 0
												 * so that position cannot be the same as that of `runInit(...)`
												 * if the positions are the same --> DEADLOCK!
												 */

	StepperSetDualPosition(stepper, 0x02,0x01); 	// set the target position to pos1 and pos2
 8002c42:	2201      	movs	r2, #1
 8002c44:	2102      	movs	r1, #2
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f7ff ff74 	bl	8002b34 <StepperSetDualPosition>
}
 8002c4c:	bf00      	nop
 8002c4e:	3718      	adds	r7, #24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <setStepper>:
 * set the motor parameters to the values of the stepper
 * 
 * @param Stepper_t* stepper - the stepper to set the motor parameters
 * @returns void
 */
void setStepper(Stepper_t* stepper, Stepper_t* stepper1) {
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
	stepper->i2cBus.i2c = stepper1->i2cBus.i2c;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	601a      	str	r2, [r3, #0]
	stepper->i2cAddress.value = stepper1->i2cAddress.value;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	7d1a      	ldrb	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	751a      	strb	r2, [r3, #20]
	stepper->iRun.value = stepper1->iRun.value;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	stepper->iHold.value = stepper1->iHold.value;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	stepper->vMin.value = stepper1->vMin.value;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	stepper->vMax.value = stepper1->vMax.value;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	stepper->stepMode.value = stepper1->stepMode.value;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	stepper->rotationDirection.value = stepper1->rotationDirection.value;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <getStepper>:
/**
 * get the motor parameters of the stepper
 * @param Stepper_t* stepper - the stepper to get the motor parameters
 * @returns Stepper_t* - the stepper with the motor parameters
 */
Stepper_t* getStepper(Stepper_t* stepper) {
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
	return stepper;
 8002cca:	687b      	ldr	r3, [r7, #4]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <adcMeas>:
uint32_t	Timer1 = 0UL;
uint32_t    ST7735_Timer = 0UL;
uint32_t    Timer100ms = 0UL;

float adcMeas(ADC_TypeDef   *adc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

	static float adcValue = 0;
	const uint16_t adcMax = 4095;
 8002ce0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002ce4:	83fb      	strh	r3, [r7, #30]
	const float kFilt = 0.05;
 8002ce6:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <adcMeas+0xc0>)
 8002ce8:	61bb      	str	r3, [r7, #24]
	uint16_t adcRaw;
	char strT[8];

	if (adcIsConversionFinished(adc))
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fcda 	bl	80036a4 <adcIsConversionFinished>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02d      	beq.n	8002d52 <adcMeas+0x7a>
		{
			adcRaw = adcGetConversionResult(adc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fbbb 	bl	8003472 <adcGetConversionResult>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	82fb      	strh	r3, [r7, #22]
			adcStartConversion(adc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fcbf 	bl	8003684 <adcStartConversion>
			adcValue *= (1-kFilt);
 8002d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002d0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d12:	4b22      	ldr	r3, [pc, #136]	; (8002d9c <adcMeas+0xc4>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1c:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <adcMeas+0xc4>)
 8002d1e:	edc3 7a00 	vstr	s15, [r3]
			adcValue += ((float)adcRaw * kFilt/ adcMax);
 8002d22:	8afb      	ldrh	r3, [r7, #22]
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d30:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d34:	8bfb      	ldrh	r3, [r7, #30]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <adcMeas+0xc4>)
 8002d44:	edd3 7a00 	vldr	s15, [r3]
 8002d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4c:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <adcMeas+0xc4>)
 8002d4e:	edc3 7a00 	vstr	s15, [r3]
		}
		//sprintf(strT, "%3.2f", adcValue);
		sprintf(strT, "%2.0f%%", 100*adcValue);
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <adcMeas+0xc4>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002da0 <adcMeas+0xc8>
 8002d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d60:	ee17 0a90 	vmov	r0, s15
 8002d64:	f7fd fbf8 	bl	8000558 <__aeabi_f2d>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	f107 000c 	add.w	r0, r7, #12
 8002d70:	490c      	ldr	r1, [pc, #48]	; (8002da4 <adcMeas+0xcc>)
 8002d72:	f002 fdab 	bl	80058cc <siprintf>
		tftPrintColor((char *)strT,78,0,tft_YELLOW);
 8002d76:	f107 000c 	add.w	r0, r7, #12
 8002d7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002d7e:	2200      	movs	r2, #0
 8002d80:	214e      	movs	r1, #78	; 0x4e
 8002d82:	f7ff f9bb 	bl	80020fc <tftPrintColor>
		return(adcValue);
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <adcMeas+0xc4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	ee07 3a90 	vmov	s15, r3
}
 8002d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	3d4ccccd 	.word	0x3d4ccccd
 8002d9c:	200006ec 	.word	0x200006ec
 8002da0:	42c80000 	.word	0x42c80000
 8002da4:	08008fb8 	.word	0x08008fb8

08002da8 <Task100ms>:
// TaskRoutine with 100ms cycletime
TaskModus Task100ms(TaskModus RunMode)
{
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b09b      	sub	sp, #108	; 0x6c
 8002dac:	af08      	add	r7, sp, #32
 8002dae:	4603      	mov	r3, r0
 8002db0:	73fb      	strb	r3, [r7, #15]

	static float ADC_offset = 0;
	ADC_TypeDef   *adc    = ADC1;
 8002db2:	4bbe      	ldr	r3, [pc, #760]	; (80030ac <Task100ms+0x304>)
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
	const int16_t minStepPos = -32000;
 8002db6:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8002dba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	const int16_t secPos = 00;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	const int16_t manStep = 800;			// viertel Umdrehung
 8002dc4:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002dc8:	87fb      	strh	r3, [r7, #62]	; 0x3e
	const float maxStep = 32000;
 8002dca:	4bb9      	ldr	r3, [pc, #740]	; (80030b0 <Task100ms+0x308>)
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
	char strT[16];
	static int texty =1;
	static uint8_t i2cAddr = i2cAddr_mot;
	float ADC_0;
	float AlphaBeta[2];  // Wertepaar
	uint8_t foundAddr = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	switch (RunMode)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	f200 81ef 	bhi.w	80031ba <Task100ms+0x412>
 8002ddc:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <Task100ms+0x3c>)
 8002dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de2:	bf00      	nop
 8002de4:	08002dfd 	.word	0x08002dfd
 8002de8:	08002e31 	.word	0x08002e31
 8002dec:	08002f61 	.word	0x08002f61
 8002df0:	08002f87 	.word	0x08002f87
 8002df4:	08002fe1 	.word	0x08002fe1
 8002df8:	080030e9 	.word	0x080030e9
    {
   	   case ParamInit:  //ADC Init
   	   {

   		   setRotaryColor(LED_BLUE);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f7fe fa95 	bl	800132c <setRotaryColor>
   		   ADC_CHANNEL_t chnList[] = { ADC_CHN_0 };
 8002e02:	2300      	movs	r3, #0
 8002e04:	743b      	strb	r3, [r7, #16]

   		    // Anzahl der Listenelemente berechnen
   		    size_t         listSize = sizeof(chnList) / sizeof(chnList[0]);
 8002e06:	2301      	movs	r3, #1
 8002e08:	62fb      	str	r3, [r7, #44]	; 0x2c

   		    adcSelectADC(adc);                     // ADC1: Bustakt aktivieren
 8002e0a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e0c:	f000 fb06 	bl	800341c <adcSelectADC>

   		    // Konfiguration der Sequenz und Eintrag der Laenge von chnList[]
   		    adcSetChannelSequence(adc, chnList, listSize);
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e1a:	f000 fb37 	bl	800348c <adcSetChannelSequence>
   		    adcEnableADC(adc);
 8002e1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e20:	f000 fb16 	bl	8003450 <adcEnableADC>
   		    adcStartConversion(adc);
 8002e24:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e26:	f000 fc2d 	bl	8003684 <adcStartConversion>
   			RunMode = I2C_Scan;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
   	   }
   	   break;
 8002e2e:	e1c4      	b.n	80031ba <Task100ms+0x412>
   	   case I2C_Scan:
   	   {
   		   foundAddr = i2cFindSlaveAddr(i2c, i2cAddr);
 8002e30:	4ba0      	ldr	r3, [pc, #640]	; (80030b4 <Task100ms+0x30c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4aa0      	ldr	r2, [pc, #640]	; (80030b8 <Task100ms+0x310>)
 8002e36:	7812      	ldrb	r2, [r2, #0]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbeb 	bl	8004616 <i2cFindSlaveAddr>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   		   if ((foundAddr == i2cAddr_mot)||( foundAddr == i2cAddr_mot1))
 8002e46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e4a:	2b60      	cmp	r3, #96	; 0x60
 8002e4c:	d003      	beq.n	8002e56 <Task100ms+0xae>
 8002e4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e52:	2b61      	cmp	r3, #97	; 0x61
 8002e54:	d138      	bne.n	8002ec8 <Task100ms+0x120>
   		   {
   			   tftPrint((char *)"Active\0",110,0,0);
 8002e56:	2300      	movs	r3, #0
 8002e58:	2200      	movs	r2, #0
 8002e5a:	216e      	movs	r1, #110	; 0x6e
 8002e5c:	4897      	ldr	r0, [pc, #604]	; (80030bc <Task100ms+0x314>)
 8002e5e:	f7ff f8b3 	bl	8001fc8 <tftPrint>
   			   //StepL.init(... 						iRun,	iHold, 	vMin,  	vMax, 	stepMode, 							rotDir, acceleration, securePosition)
   			   StepperInit(&Step, i2c, i2cAddr,StepPaValue[0], StepPaValue[1], StepPaValue[2],StepPaValue[3],stepMode,(uint8_t)!stepRotDir,StepPaValue[4], secPos);
 8002e62:	4b94      	ldr	r3, [pc, #592]	; (80030b4 <Task100ms+0x30c>)
 8002e64:	681d      	ldr	r5, [r3, #0]
 8002e66:	4b94      	ldr	r3, [pc, #592]	; (80030b8 <Task100ms+0x310>)
 8002e68:	781e      	ldrb	r6, [r3, #0]
 8002e6a:	4b95      	ldr	r3, [pc, #596]	; (80030c0 <Task100ms+0x318>)
 8002e6c:	f893 c000 	ldrb.w	ip, [r3]
 8002e70:	4b93      	ldr	r3, [pc, #588]	; (80030c0 <Task100ms+0x318>)
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	4a92      	ldr	r2, [pc, #584]	; (80030c0 <Task100ms+0x318>)
 8002e76:	7892      	ldrb	r2, [r2, #2]
 8002e78:	4991      	ldr	r1, [pc, #580]	; (80030c0 <Task100ms+0x318>)
 8002e7a:	78c9      	ldrb	r1, [r1, #3]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	60b8      	str	r0, [r7, #8]
 8002e80:	2001      	movs	r0, #1
 8002e82:	f080 0001 	eor.w	r0, r0, #1
 8002e86:	b2c0      	uxtb	r0, r0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	488d      	ldr	r0, [pc, #564]	; (80030c0 <Task100ms+0x318>)
 8002e8c:	7900      	ldrb	r0, [r0, #4]
 8002e8e:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
 8002e92:	9406      	str	r4, [sp, #24]
 8002e94:	9005      	str	r0, [sp, #20]
 8002e96:	687c      	ldr	r4, [r7, #4]
 8002e98:	9404      	str	r4, [sp, #16]
 8002e9a:	68b8      	ldr	r0, [r7, #8]
 8002e9c:	9003      	str	r0, [sp, #12]
 8002e9e:	9102      	str	r1, [sp, #8]
 8002ea0:	9201      	str	r2, [sp, #4]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4663      	mov	r3, ip
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	4629      	mov	r1, r5
 8002eaa:	4886      	ldr	r0, [pc, #536]	; (80030c4 <Task100ms+0x31c>)
 8002eac:	f7ff fe80 	bl	8002bb0 <StepperInit>
   			   stepper.pwmFrequency.set(&Step, 0);
 8002eb0:	4b85      	ldr	r3, [pc, #532]	; (80030c8 <Task100ms+0x320>)
 8002eb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	4882      	ldr	r0, [pc, #520]	; (80030c4 <Task100ms+0x31c>)
 8002eba:	4798      	blx	r3

   			RunMode = ResetPos;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	73fb      	strb	r3, [r7, #15]
   			setRotaryColor(LED_YELLOW);
 8002ec0:	2006      	movs	r0, #6
 8002ec2:	f7fe fa33 	bl	800132c <setRotaryColor>
   				tftPrintColor((char *)strT,0,10*texty++,tft_GREEN);
  			  }
   			  if (++i2cAddr > 0x7f) { i2cAddr = 0; texty = 1;}
   		   }
   	   }
   	   break;
 8002ec6:	e175      	b.n	80031b4 <Task100ms+0x40c>
   			  setRotaryColor(LED_CYAN);
 8002ec8:	2005      	movs	r0, #5
 8002eca:	f7fe fa2f 	bl	800132c <setRotaryColor>
   			  if  ( foundAddr == 0 )
 8002ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d117      	bne.n	8002f06 <Task100ms+0x15e>
   				sprintf(strT, "missed I2C %3x", i2cAddr);
 8002ed6:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <Task100ms+0x310>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	497a      	ldr	r1, [pc, #488]	; (80030cc <Task100ms+0x324>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fcf2 	bl	80058cc <siprintf>
   				tftPrintColor((char *)strT,0,10*texty,tft_CYAN);
 8002ee8:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <Task100ms+0x328>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f107 001c 	add.w	r0, r7, #28
 8002efa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002efe:	2100      	movs	r1, #0
 8002f00:	f7ff f8fc 	bl	80020fc <tftPrintColor>
 8002f04:	e019      	b.n	8002f3a <Task100ms+0x192>
   				sprintf(strT, ">found I2C %3x", i2cAddr);
 8002f06:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <Task100ms+0x310>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f107 031c 	add.w	r3, r7, #28
 8002f10:	4970      	ldr	r1, [pc, #448]	; (80030d4 <Task100ms+0x32c>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 fcda 	bl	80058cc <siprintf>
   				tftPrintColor((char *)strT,0,10*texty++,tft_GREEN);
 8002f18:	4b6d      	ldr	r3, [pc, #436]	; (80030d0 <Task100ms+0x328>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	1c53      	adds	r3, r2, #1
 8002f1e:	496c      	ldr	r1, [pc, #432]	; (80030d0 <Task100ms+0x328>)
 8002f20:	600b      	str	r3, [r1, #0]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f107 001c 	add.w	r0, r7, #28
 8002f30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002f34:	2100      	movs	r1, #0
 8002f36:	f7ff f8e1 	bl	80020fc <tftPrintColor>
   			  if (++i2cAddr > 0x7f) { i2cAddr = 0; texty = 1;}
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <Task100ms+0x310>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <Task100ms+0x310>)
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	4b5c      	ldr	r3, [pc, #368]	; (80030b8 <Task100ms+0x310>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f280 8131 	bge.w	80031b4 <Task100ms+0x40c>
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <Task100ms+0x310>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <Task100ms+0x328>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
   	   break;
 8002f5e:	e129      	b.n	80031b4 <Task100ms+0x40c>
   	   case ResetPos: // Set Motorpos from ADC
	   {
			StepperSetPos(&Step, minStepPos);
 8002f60:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8002f64:	4619      	mov	r1, r3
 8002f66:	4857      	ldr	r0, [pc, #348]	; (80030c4 <Task100ms+0x31c>)
 8002f68:	f7ff fcd0 	bl	800290c <StepperSetPos>
			RunMode = InitRun;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	73fb      	strb	r3, [r7, #15]
			setRotaryColor(LED_RED);
 8002f70:	2001      	movs	r0, #1
 8002f72:	f7fe f9db 	bl	800132c <setRotaryColor>
			tftPrintColor("INIT  \0",110,0,tft_RED);
 8002f76:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	216e      	movs	r1, #110	; 0x6e
 8002f7e:	4856      	ldr	r0, [pc, #344]	; (80030d8 <Task100ms+0x330>)
 8002f80:	f7ff f8bc 	bl	80020fc <tftPrintColor>

	   }
	   break;
 8002f84:	e119      	b.n	80031ba <Task100ms+0x412>
	   case InitRun: // Set MotorPos to minimal Pos. for calibration run
	   {
			if (getRotaryPushButton() != 0)
 8002f86:	f7fe fa65 	bl	8001454 <getRotaryPushButton>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d011      	beq.n	8002fb4 <Task100ms+0x20c>
			{
				setRotaryPosition(0);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fe fa97 	bl	80014c4 <setRotaryPosition>
				setRotaryColor(LED_MAGENTA);
 8002f96:	2004      	movs	r0, #4
 8002f98:	f7fe f9c8 	bl	800132c <setRotaryColor>
				tftPrintColor("Manual\0",110,0,tft_MAGENTA);
 8002f9c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	216e      	movs	r1, #110	; 0x6e
 8002fa4:	484d      	ldr	r0, [pc, #308]	; (80030dc <Task100ms+0x334>)
 8002fa6:	f7ff f8a9 	bl	80020fc <tftPrintColor>
				StepperSoftStop (&Step);
 8002faa:	4846      	ldr	r0, [pc, #280]	; (80030c4 <Task100ms+0x31c>)
 8002fac:	f7ff fdab 	bl	8002b06 <StepperSoftStop>
				//StepperResetPosition(&Step);
				RunMode = ManualRun;
 8002fb0:	2305      	movs	r3, #5
 8002fb2:	73fb      	strb	r3, [r7, #15]

			}
			if (StepperGetPos(&Step) == minStepPos)
 8002fb4:	4843      	ldr	r0, [pc, #268]	; (80030c4 <Task100ms+0x31c>)
 8002fb6:	f7ff fc7b 	bl	80028b0 <StepperGetPos>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	f040 80f8 	bne.w	80031b8 <Task100ms+0x410>
			{
				setRotaryColor(LED_GREEN);
 8002fc8:	2002      	movs	r0, #2
 8002fca:	f7fe f9af 	bl	800132c <setRotaryColor>
				tftPrint((char *)"Active\0",110,0,0);
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	216e      	movs	r1, #110	; 0x6e
 8002fd4:	4839      	ldr	r0, [pc, #228]	; (80030bc <Task100ms+0x314>)
 8002fd6:	f7fe fff7 	bl	8001fc8 <tftPrint>
				RunMode = AutoRun;
 8002fda:	2304      	movs	r3, #4
 8002fdc:	73fb      	strb	r3, [r7, #15]
			}
	   }
	   break;
 8002fde:	e0eb      	b.n	80031b8 <Task100ms+0x410>

   	   case AutoRun: // Set Motoraxis-position from ADC (Range 0..4095) from minStepPos to maxStep
	   {
			if (getRotaryPushButton() != 0)
 8002fe0:	f7fe fa38 	bl	8001454 <getRotaryPushButton>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <Task100ms+0x270>
			{
			  setRotaryPosition((int16_t)setPos/manStep);
 8002fea:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <Task100ms+0x338>)
 8002fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fa62 	bl	80014c4 <setRotaryPosition>
			  setRotaryColor(LED_MAGENTA);
 8003000:	2004      	movs	r0, #4
 8003002:	f7fe f993 	bl	800132c <setRotaryColor>
			  tftPrintColor("Manual\0",110,0,tft_MAGENTA);
 8003006:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800300a:	2200      	movs	r2, #0
 800300c:	216e      	movs	r1, #110	; 0x6e
 800300e:	4833      	ldr	r0, [pc, #204]	; (80030dc <Task100ms+0x334>)
 8003010:	f7ff f874 	bl	80020fc <tftPrintColor>
			  RunMode = ManualRun;
 8003014:	2305      	movs	r3, #5
 8003016:	73fb      	strb	r3, [r7, #15]
			}

			ADC_0 = adcMeas(adc);
 8003018:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800301a:	f7ff fe5d 	bl	8002cd8 <adcMeas>
 800301e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
			setPos = (int16_t)((ADC_0-ADC_offset)*(maxStep-minStepPos))+minStepPos;
 8003022:	4b30      	ldr	r3, [pc, #192]	; (80030e4 <Task100ms+0x33c>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800302c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003030:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003040:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003044:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800304c:	ee17 3a90 	vmov	r3, s15
 8003050:	b21b      	sxth	r3, r3
 8003052:	b29a      	uxth	r2, r3
 8003054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003058:	4413      	add	r3, r2
 800305a:	b29b      	uxth	r3, r3
 800305c:	b21a      	sxth	r2, r3
 800305e:	4b20      	ldr	r3, [pc, #128]	; (80030e0 <Task100ms+0x338>)
 8003060:	801a      	strh	r2, [r3, #0]
			StepperSetPos(&Step, setPos);
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <Task100ms+0x338>)
 8003064:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003068:	4619      	mov	r1, r3
 800306a:	4816      	ldr	r0, [pc, #88]	; (80030c4 <Task100ms+0x31c>)
 800306c:	f7ff fc4e 	bl	800290c <StepperSetPos>
			AlphaBeta[0] = ADC_0*2-1;			// AD Value ist display form Minimim -1 till Max +1 OSzi
 8003070:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003074:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800307c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003080:	edc7 7a05 	vstr	s15, [r7, #20]
			AlphaBeta[1] = (float)StepperGetPos(&Step)/maxStep;
 8003084:	480f      	ldr	r0, [pc, #60]	; (80030c4 <Task100ms+0x31c>)
 8003086:	f7ff fc13 	bl	80028b0 <StepperGetPos>
 800308a:	4603      	mov	r3, r0
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003094:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800309c:	edc7 7a06 	vstr	s15, [r7, #24]
			AlBeOszi(AlphaBeta);
 80030a0:	f107 0314 	add.w	r3, r7, #20
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd ff99 	bl	8000fdc <AlBeOszi>
	   }
	   break;
 80030aa:	e086      	b.n	80031ba <Task100ms+0x412>
 80030ac:	40012000 	.word	0x40012000
 80030b0:	46fa0000 	.word	0x46fa0000
 80030b4:	20000384 	.word	0x20000384
 80030b8:	2000038d 	.word	0x2000038d
 80030bc:	08008fc0 	.word	0x08008fc0
 80030c0:	20000388 	.word	0x20000388
 80030c4:	200005ac 	.word	0x200005ac
 80030c8:	0800951c 	.word	0x0800951c
 80030cc:	08008fc8 	.word	0x08008fc8
 80030d0:	20000390 	.word	0x20000390
 80030d4:	08008fd8 	.word	0x08008fd8
 80030d8:	08008fe8 	.word	0x08008fe8
 80030dc:	08008ff0 	.word	0x08008ff0
 80030e0:	200006f0 	.word	0x200006f0
 80030e4:	200006f4 	.word	0x200006f4

   	   case ManualRun: // Reset Motorpos with Manual Rot
   	   {
			if (getRotaryPushButton() != 0)
 80030e8:	f7fe f9b4 	bl	8001454 <getRotaryPushButton>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <Task100ms+0x360>
			{
			  tftPrint((char *)"Active\0",110,0,0);
 80030f2:	2300      	movs	r3, #0
 80030f4:	2200      	movs	r2, #0
 80030f6:	216e      	movs	r1, #110	; 0x6e
 80030f8:	4832      	ldr	r0, [pc, #200]	; (80031c4 <Task100ms+0x41c>)
 80030fa:	f7fe ff65 	bl	8001fc8 <tftPrint>
			  setRotaryColor(LED_GREEN);
 80030fe:	2002      	movs	r0, #2
 8003100:	f7fe f914 	bl	800132c <setRotaryColor>
			  RunMode = AutoRun;
 8003104:	2304      	movs	r3, #4
 8003106:	73fb      	strb	r3, [r7, #15]

			}
			setPos = (int16_t)getRotaryPosition()*manStep;
 8003108:	f7fe f9c6 	bl	8001498 <getRotaryPosition>
 800310c:	4603      	mov	r3, r0
 800310e:	b29a      	uxth	r2, r3
 8003110:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003112:	fb12 f303 	smulbb	r3, r2, r3
 8003116:	b29b      	uxth	r3, r3
 8003118:	b21a      	sxth	r2, r3
 800311a:	4b2b      	ldr	r3, [pc, #172]	; (80031c8 <Task100ms+0x420>)
 800311c:	801a      	strh	r2, [r3, #0]
			if (setPos != setPosOld)
 800311e:	4b2a      	ldr	r3, [pc, #168]	; (80031c8 <Task100ms+0x420>)
 8003120:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003124:	4b29      	ldr	r3, [pc, #164]	; (80031cc <Task100ms+0x424>)
 8003126:	f9b3 3000 	ldrsh.w	r3, [r3]
 800312a:	429a      	cmp	r2, r3
 800312c:	d01d      	beq.n	800316a <Task100ms+0x3c2>
			{
				StepperSetPos(&Step, setPos);
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <Task100ms+0x420>)
 8003130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003134:	4619      	mov	r1, r3
 8003136:	4826      	ldr	r0, [pc, #152]	; (80031d0 <Task100ms+0x428>)
 8003138:	f7ff fbe8 	bl	800290c <StepperSetPos>
				setPosOld = setPos;
 800313c:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <Task100ms+0x420>)
 800313e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003142:	4b22      	ldr	r3, [pc, #136]	; (80031cc <Task100ms+0x424>)
 8003144:	801a      	strh	r2, [r3, #0]
				sprintf(strT, "%+6i", setPos);
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <Task100ms+0x420>)
 8003148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800314c:	461a      	mov	r2, r3
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4920      	ldr	r1, [pc, #128]	; (80031d4 <Task100ms+0x42c>)
 8003154:	4618      	mov	r0, r3
 8003156:	f002 fbb9 	bl	80058cc <siprintf>
				tftPrintColor((char *)strT,110,0,tft_MAGENTA);
 800315a:	f107 001c 	add.w	r0, r7, #28
 800315e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8003162:	2200      	movs	r2, #0
 8003164:	216e      	movs	r1, #110	; 0x6e
 8003166:	f7fe ffc9 	bl	80020fc <tftPrintColor>
				//tftPrintLong(setPos, 80, 0, 0);
			}
			ADC_0 = adcMeas(adc);
 800316a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800316c:	f7ff fdb4 	bl	8002cd8 <adcMeas>
 8003170:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

			AlphaBeta[0] = (float)getRotaryPosition()/40;
 8003174:	f7fe f990 	bl	8001498 <getRotaryPosition>
 8003178:	ee07 0a90 	vmov	s15, r0
 800317c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003180:	eddf 6a15 	vldr	s13, [pc, #84]	; 80031d8 <Task100ms+0x430>
 8003184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003188:	edc7 7a05 	vstr	s15, [r7, #20]
			AlphaBeta[1] = (float)StepperGetPos(&Step)/maxStep;
 800318c:	4810      	ldr	r0, [pc, #64]	; (80031d0 <Task100ms+0x428>)
 800318e:	f7ff fb8f 	bl	80028b0 <StepperGetPos>
 8003192:	4603      	mov	r3, r0
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800319c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80031a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a4:	edc7 7a06 	vstr	s15, [r7, #24]
			AlBeOszi(AlphaBeta);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd ff15 	bl	8000fdc <AlBeOszi>

	   }
   	   break;
 80031b2:	e002      	b.n	80031ba <Task100ms+0x412>
   	   break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <Task100ms+0x412>
	   break;
 80031b8:	bf00      	nop

	   }


    }
    return(RunMode);
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80031bc:	4618      	mov	r0, r3
 80031be:	374c      	adds	r7, #76	; 0x4c
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c4:	08008fc0 	.word	0x08008fc0
 80031c8:	200006f0 	.word	0x200006f0
 80031cc:	200006f8 	.word	0x200006f8
 80031d0:	200005ac 	.word	0x200005ac
 80031d4:	08008ff8 	.word	0x08008ff8
 80031d8:	42200000 	.word	0x42200000

080031dc <main>:


int main(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0

		uint8_t        scanAddr = 0x7F;  //7Bit Adresse
		I2C_TypeDef   *i2c  = I2C1;
		I2C_TypeDef   *i2c2  = I2C2;
	*/
	uint32_t   TaskTime100ms = 100UL;
 80031e2:	2364      	movs	r3, #100	; 0x64
 80031e4:	613b      	str	r3, [r7, #16]
	int RunMode = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]



	// This is the Array, of all Timer-Variables
    uint32_t *timerList[] = { &Timer100ms, &ST7735_Timer /*, additional timer */ };
 80031ea:	4a28      	ldr	r2, [pc, #160]	; (800328c <main+0xb0>)
 80031ec:	1d3b      	adds	r3, r7, #4
 80031ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80031f2:	e883 0003 	stmia.w	r3, {r0, r1}
	// size of the array  are calculated
	size_t    arraySize = sizeof(timerList)/sizeof(timerList[0]);
 80031f6:	2302      	movs	r3, #2
 80031f8:	60fb      	str	r3, [r7, #12]

	    BALOsetup();
 80031fa:	f7fd fedd 	bl	8000fb8 <BALOsetup>
	    LED_red_on;
 80031fe:	2103      	movs	r1, #3
 8003200:	4823      	ldr	r0, [pc, #140]	; (8003290 <main+0xb4>)
 8003202:	f000 fe5b 	bl	8003ebc <gpioResetPin>
	   // struct PIDContr PID_Pos;


		// Inits needed for TFT Display
	    // Initialisiert den Systick-Timer
		systickInit(SYSTICK_1MS);
 8003206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800320a:	f001 fe23 	bl	8004e54 <systickInit>
		spiInit();
 800320e:	f7fe fa01 	bl	8001614 <spiInit>
		tftInitR(INITR_REDTAB);
 8003212:	2001      	movs	r0, #1
 8003214:	f7fe fabe 	bl	8001794 <tftInitR>

		//display setup
	    tftSetRotation(LANDSCAPE);
 8003218:	2001      	movs	r0, #1
 800321a:	f7fe ffa5 	bl	8002168 <tftSetRotation>
	    tftSetFont((uint8_t *)&SmallFont[0]);
 800321e:	481d      	ldr	r0, [pc, #116]	; (8003294 <main+0xb8>)
 8003220:	f7fe fc7a 	bl	8001b18 <tftSetFont>
	    tftFillScreen(tft_BLACK);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fe ff85 	bl	8002134 <tftFillScreen>

	    /* initialize the rotary push button module */
	    initRotaryPushButton();
 800322a:	f7fd ffe1 	bl	80011f0 <initRotaryPushButton>

	    systickSetMillis(&Timer100ms, TaskTime100ms);
 800322e:	6939      	ldr	r1, [r7, #16]
 8003230:	4819      	ldr	r0, [pc, #100]	; (8003298 <main+0xbc>)
 8003232:	f001 fe01 	bl	8004e38 <systickSetMillis>

	    LED_red_off;
 8003236:	2103      	movs	r1, #3
 8003238:	4815      	ldr	r0, [pc, #84]	; (8003290 <main+0xb4>)
 800323a:	f000 fe14 	bl	8003e66 <gpioSetPin>
	    tftPrintColor((char *)SWVerTxt,0,0,tft_RED);
 800323e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	4815      	ldr	r0, [pc, #84]	; (800329c <main+0xc0>)
 8003248:	f7fe ff58 	bl	80020fc <tftPrintColor>

	    //initPID(&PID_Pos, 0.5, 0.5, 0.1, (float)0.0001*i2cTaskTime);  // Init der PID-Koeffizienten des Positions-Regler

	    while (1)
	    {
		   if (true == timerTrigger)
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <main+0xc4>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <main+0x86>
		   {
				systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fe51 	bl	8004f04 <systickUpdateTimerList>
		   }
		   if (isSystickExpired(Timer100ms))
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <main+0xbc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f001 fe16 	bl	8004e98 <isSystickExpired>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0ec      	beq.n	800324c <main+0x70>
		   {
			   systickSetTicktime(&Timer100ms, TaskTime100ms);
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	4808      	ldr	r0, [pc, #32]	; (8003298 <main+0xbc>)
 8003276:	f001 fe01 	bl	8004e7c <systickSetTicktime>
			   RunMode= Task100ms(RunMode);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fd92 	bl	8002da8 <Task100ms>
 8003284:	4603      	mov	r3, r0
 8003286:	617b      	str	r3, [r7, #20]
		   if (true == timerTrigger)
 8003288:	e7e0      	b.n	800324c <main+0x70>
 800328a:	bf00      	nop
 800328c:	0800900c 	.word	0x0800900c
 8003290:	40020400 	.word	0x40020400
 8003294:	0800901c 	.word	0x0800901c
 8003298:	200006e8 	.word	0x200006e8
 800329c:	08009000 	.word	0x08009000
 80032a0:	200006e0 	.word	0x200006e0

080032a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <SystemInit+0x20>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <SystemInit+0x20>)
 80032b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	2302      	movs	r3, #2
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	2302      	movs	r3, #2
 80032e0:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d011      	beq.n	8003316 <SystemCoreClockUpdate+0x4e>
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d844      	bhi.n	8003382 <SystemCoreClockUpdate+0xba>
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <SystemCoreClockUpdate+0x3e>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d004      	beq.n	800330e <SystemCoreClockUpdate+0x46>
 8003304:	e03d      	b.n	8003382 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003306:	4b2c      	ldr	r3, [pc, #176]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 8003308:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <SystemCoreClockUpdate+0xf4>)
 800330a:	601a      	str	r2, [r3, #0]
      break;
 800330c:	e03d      	b.n	800338a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 8003310:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <SystemCoreClockUpdate+0xf8>)
 8003312:	601a      	str	r2, [r3, #0]
      break;
 8003314:	e039      	b.n	800338a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	0d9b      	lsrs	r3, r3, #22
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800332a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003332:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <SystemCoreClockUpdate+0xf8>)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	fbb2 f3f3 	udiv	r3, r2, r3
 800333a:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 800333c:	6852      	ldr	r2, [r2, #4]
 800333e:	0992      	lsrs	r2, r2, #6
 8003340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003344:	fb02 f303 	mul.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e00b      	b.n	8003364 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <SystemCoreClockUpdate+0xf4>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 8003356:	6852      	ldr	r2, [r2, #4]
 8003358:	0992      	lsrs	r2, r2, #6
 800335a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003364:	4b13      	ldr	r3, [pc, #76]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	3301      	adds	r3, #1
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 800337e:	6013      	str	r3, [r2, #0]
      break;
 8003380:	e003      	b.n	800338a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <SystemCoreClockUpdate+0xf4>)
 8003386:	601a      	str	r2, [r3, #0]
      break;
 8003388:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800338a:	4b0a      	ldr	r3, [pc, #40]	; (80033b4 <SystemCoreClockUpdate+0xec>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4a0b      	ldr	r2, [pc, #44]	; (80033c4 <SystemCoreClockUpdate+0xfc>)
 8003396:	5cd3      	ldrb	r3, [r2, r3]
 8003398:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800339a:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <SystemCoreClockUpdate+0xf0>)
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	40023800 	.word	0x40023800
 80033b8:	20000394 	.word	0x20000394
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	08009650 	.word	0x08009650

080033c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c8:	480d      	ldr	r0, [pc, #52]	; (8003400 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033cc:	f7ff ff6a 	bl	80032a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033d0:	480c      	ldr	r0, [pc, #48]	; (8003404 <LoopForever+0x6>)
  ldr r1, =_edata
 80033d2:	490d      	ldr	r1, [pc, #52]	; (8003408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <LoopForever+0xe>)
  movs r3, #0
 80033d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033d8:	e002      	b.n	80033e0 <LoopCopyDataInit>

080033da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033de:	3304      	adds	r3, #4

080033e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033e4:	d3f9      	bcc.n	80033da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <LoopForever+0x16>)
  movs r3, #0
 80033ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ec:	e001      	b.n	80033f2 <LoopFillZerobss>

080033ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033f0:	3204      	adds	r2, #4

080033f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033f4:	d3fb      	bcc.n	80033ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033f6:	f001 fdd3 	bl	8004fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033fa:	f7ff feef 	bl	80031dc <main>

080033fe <LoopForever>:

LoopForever:
  b LoopForever
 80033fe:	e7fe      	b.n	80033fe <LoopForever>
  ldr   r0, =_estack
 8003400:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003408:	20000568 	.word	0x20000568
  ldr r2, =_sidata
 800340c:	08009c38 	.word	0x08009c38
  ldr r2, =_sbss
 8003410:	20000568 	.word	0x20000568
  ldr r4, =_ebss
 8003414:	20000710 	.word	0x20000710

08003418 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003418:	e7fe      	b.n	8003418 <ADC_IRQHandler>
	...

0800341c <adcSelectADC>:
 *          <td rowspan="1">10...8</td>
 *      </tr>
 * </table>
 */
ADC_RETURN_CODE_t adcSelectADC(ADC_TypeDef *adc)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
    if (ADC1 == adc)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a08      	ldr	r2, [pc, #32]	; (8003448 <adcSelectADC+0x2c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d105      	bne.n	8003438 <adcSelectADC+0x1c>
    {
        RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800342c:	4b07      	ldr	r3, [pc, #28]	; (800344c <adcSelectADC+0x30>)
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	4a06      	ldr	r2, [pc, #24]	; (800344c <adcSelectADC+0x30>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6453      	str	r3, [r2, #68]	; 0x44
    }
    return ADC_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40012000 	.word	0x40012000
 800344c:	40023800 	.word	0x40023800

08003450 <adcEnableADC>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
ADC_RETURN_CODE_t adcEnableADC(ADC_TypeDef *adc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
    adc->CR2 |= ADC_CR2_ADON;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f043 0201 	orr.w	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]
    return ADC_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <adcGetConversionResult>:
 *          <td rowspan="1">Reads conversion result from DR</td>
 *      </tr>
 * </table>
 */
uint16_t adcGetConversionResult(ADC_TypeDef *adc)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
    return (adc->DR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800347e:	b29b      	uxth	r3, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <adcSetChannelSequence>:
 *
 * @note
 * The sequence starts always at position 0 in the sequence list.
 */
ADC_RETURN_CODE_t adcSetChannelSequence(ADC_TypeDef *adc, ADC_CHANNEL_t *chnList, size_t seqLen)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
     uint8_t i = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	75fb      	strb	r3, [r7, #23]

     if (seqLen > 16)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b10      	cmp	r3, #16
 80034a0:	d902      	bls.n	80034a8 <adcSetChannelSequence+0x1c>
     {
         return ADC_INVALID_SEQUENCE_LENGTH;
 80034a2:	f06f 037b 	mvn.w	r3, #123	; 0x7b
 80034a6:	e0e7      	b.n	8003678 <adcSetChannelSequence+0x1ec>
     }

     adc->SQR1 |= ((seqLen - 1) << ADC_SQR1_L_Pos);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	051b      	lsls	r3, r3, #20
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	62da      	str	r2, [r3, #44]	; 0x2c

     for (i = 0; i < seqLen; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	75fb      	strb	r3, [r7, #23]
 80034bc:	e0d6      	b.n	800366c <adcSetChannelSequence+0x1e0>
     {
         switch (i)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	f200 80d0 	bhi.w	8003666 <adcSetChannelSequence+0x1da>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <adcSetChannelSequence+0x40>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	0800350d 	.word	0x0800350d
 80034d0:	08003521 	.word	0x08003521
 80034d4:	08003537 	.word	0x08003537
 80034d8:	0800354d 	.word	0x0800354d
 80034dc:	08003563 	.word	0x08003563
 80034e0:	08003579 	.word	0x08003579
 80034e4:	0800358f 	.word	0x0800358f
 80034e8:	080035a3 	.word	0x080035a3
 80034ec:	080035b9 	.word	0x080035b9
 80034f0:	080035cf 	.word	0x080035cf
 80034f4:	080035e5 	.word	0x080035e5
 80034f8:	080035fb 	.word	0x080035fb
 80034fc:	08003611 	.word	0x08003611
 8003500:	08003625 	.word	0x08003625
 8003504:	0800363b 	.word	0x0800363b
 8003508:	08003651 	.word	0x08003651
         {
             case 0:                                            // This is ADC Input Channel #1
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ1_Pos);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003510:	7dfa      	ldrb	r2, [r7, #23]
 8003512:	68b9      	ldr	r1, [r7, #8]
 8003514:	440a      	add	r2, r1
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 800351e:	e0a2      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 1:                                            // This is ADC Input Channel #2
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ2_Pos);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	7dfa      	ldrb	r2, [r7, #23]
 8003526:	68b9      	ldr	r1, [r7, #8]
 8003528:	440a      	add	r2, r1
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	0152      	lsls	r2, r2, #5
 800352e:	431a      	orrs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 8003534:	e097      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 2:                                            // This is ADC Input Channel #3
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ3_Pos);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	7dfa      	ldrb	r2, [r7, #23]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	440a      	add	r2, r1
 8003540:	7812      	ldrb	r2, [r2, #0]
 8003542:	0292      	lsls	r2, r2, #10
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 800354a:	e08c      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 3:                                            // This is ADC Input Channel #4
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ4_Pos);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	7dfa      	ldrb	r2, [r7, #23]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	440a      	add	r2, r1
 8003556:	7812      	ldrb	r2, [r2, #0]
 8003558:	03d2      	lsls	r2, r2, #15
 800355a:	431a      	orrs	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 8003560:	e081      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 4:                                            // This is ADC Input Channel #5
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ5_Pos);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	7dfa      	ldrb	r2, [r7, #23]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	440a      	add	r2, r1
 800356c:	7812      	ldrb	r2, [r2, #0]
 800356e:	0512      	lsls	r2, r2, #20
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 8003576:	e076      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 5:                                            // This is ADC Input Channel #6
                 adc->SQR3 |= (chnList[i] << ADC_SQR3_SQ6_Pos);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	7dfa      	ldrb	r2, [r7, #23]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	440a      	add	r2, r1
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	0652      	lsls	r2, r2, #25
 8003586:	431a      	orrs	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	635a      	str	r2, [r3, #52]	; 0x34
                 break;
 800358c:	e06b      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 6:                                            // This is ADC Input Channel #7
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ7_Pos);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	7dfa      	ldrb	r2, [r7, #23]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	440a      	add	r2, r1
 8003598:	7812      	ldrb	r2, [r2, #0]
 800359a:	431a      	orrs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 80035a0:	e061      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 7:                                            // This is ADC Input Channel #8
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ8_Pos);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	7dfa      	ldrb	r2, [r7, #23]
 80035a8:	68b9      	ldr	r1, [r7, #8]
 80035aa:	440a      	add	r2, r1
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	0152      	lsls	r2, r2, #5
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 80035b6:	e056      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 8:                                            // This is ADC Input Channel #9
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ9_Pos);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035bc:	7dfa      	ldrb	r2, [r7, #23]
 80035be:	68b9      	ldr	r1, [r7, #8]
 80035c0:	440a      	add	r2, r1
 80035c2:	7812      	ldrb	r2, [r2, #0]
 80035c4:	0292      	lsls	r2, r2, #10
 80035c6:	431a      	orrs	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 80035cc:	e04b      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 9:                                            // This is ADC Input Channel #10
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ10_Pos);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	7dfa      	ldrb	r2, [r7, #23]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	440a      	add	r2, r1
 80035d8:	7812      	ldrb	r2, [r2, #0]
 80035da:	03d2      	lsls	r2, r2, #15
 80035dc:	431a      	orrs	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 80035e2:	e040      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 10:                                            // This is ADC Input Channel #11
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ11_Pos);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	7dfa      	ldrb	r2, [r7, #23]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	440a      	add	r2, r1
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	0512      	lsls	r2, r2, #20
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 80035f8:	e035      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 11:                                            // This is ADC Input Channel #12
                 adc->SQR2 |= (chnList[i] << ADC_SQR2_SQ12_Pos);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	7dfa      	ldrb	r2, [r7, #23]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	440a      	add	r2, r1
 8003604:	7812      	ldrb	r2, [r2, #0]
 8003606:	0652      	lsls	r2, r2, #25
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
                 break;
 800360e:	e02a      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 12:                                            // This is ADC Input Channel #13
                 adc->SQR1 |= (chnList[i] << ADC_SQR1_SQ13_Pos);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	7dfa      	ldrb	r2, [r7, #23]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	440a      	add	r2, r1
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	62da      	str	r2, [r3, #44]	; 0x2c
                 break;
 8003622:	e020      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 13:                                            // This is ADC Input Channel #14
                 adc->SQR1 |= (chnList[i] << ADC_SQR1_SQ14_Pos);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	7dfa      	ldrb	r2, [r7, #23]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	440a      	add	r2, r1
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	0152      	lsls	r2, r2, #5
 8003632:	431a      	orrs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	62da      	str	r2, [r3, #44]	; 0x2c
                 break;
 8003638:	e015      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 14:                                            // This is ADC Input Channel #15
                 adc->SQR1 |= (chnList[i] << ADC_SQR1_SQ15_Pos);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	7dfa      	ldrb	r2, [r7, #23]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	440a      	add	r2, r1
 8003644:	7812      	ldrb	r2, [r2, #0]
 8003646:	0292      	lsls	r2, r2, #10
 8003648:	431a      	orrs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	62da      	str	r2, [r3, #44]	; 0x2c
                 break;
 800364e:	e00a      	b.n	8003666 <adcSetChannelSequence+0x1da>

             case 15:                                            // This is ADC Input Channel #16
                 adc->SQR1 |= (chnList[i] << ADC_SQR1_SQ16_Pos);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	7dfa      	ldrb	r2, [r7, #23]
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	440a      	add	r2, r1
 800365a:	7812      	ldrb	r2, [r2, #0]
 800365c:	03d2      	lsls	r2, r2, #15
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
                 break;
 8003664:	bf00      	nop
     for (i = 0; i < seqLen; i++)
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	3301      	adds	r3, #1
 800366a:	75fb      	strb	r3, [r7, #23]
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	f63f af24 	bhi.w	80034be <adcSetChannelSequence+0x32>
         }
     }

     return ADC_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	371c      	adds	r7, #28
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <adcStartConversion>:
 *
 * @note
 * The sequence starts always at position 0 in the sequence list.
 */
void adcStartConversion(ADC_TypeDef *adc)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
    adc->CR2 |= ADC_CR2_SWSTART;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	609a      	str	r2, [r3, #8]
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <adcIsConversionFinished>:
 *
 * @note
 * The sequence starts always at position 0 in the sequence list.
 */
bool adcIsConversionFinished(ADC_TypeDef *adc)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    return (adc->SR & ADC_SR_EOC);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf14      	ite	ne
 80036b8:	2301      	movne	r3, #1
 80036ba:	2300      	moveq	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	4603      	mov	r3, r0
 80036d2:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03e      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d03b      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d038      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d035      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d032      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d02f      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d02c      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b07      	cmp	r3, #7
 8003702:	d029      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	2b08      	cmp	r3, #8
 8003708:	d026      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b09      	cmp	r3, #9
 800370e:	d023      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	2b0a      	cmp	r3, #10
 8003714:	d020      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b0b      	cmp	r3, #11
 800371a:	d01d      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 800371c:	79fb      	ldrb	r3, [r7, #7]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d01a      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	2b0d      	cmp	r3, #13
 8003726:	d017      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	2b0e      	cmp	r3, #14
 800372c:	d014      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	2b0f      	cmp	r3, #15
 8003732:	d011      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	2b10      	cmp	r3, #16
 8003738:	d00e      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	2b11      	cmp	r3, #17
 800373e:	d00b      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	2b12      	cmp	r3, #18
 8003744:	d008      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	2b14      	cmp	r3, #20
 800374a:	d005      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b15      	cmp	r3, #21
 8003750:	d002      	beq.n	8003758 <extiVerifyIrqNum+0x8e>
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	2b16      	cmp	r3, #22
 8003756:	d101      	bne.n	800375c <extiVerifyIrqNum+0x92>
    {
        return true;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <extiVerifyIrqNum+0x94>
    }
    return false;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <extiVerifyTrigger+0x1c>
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d002      	beq.n	8003786 <extiVerifyTrigger+0x1c>
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d101      	bne.n	800378a <extiVerifyTrigger+0x20>
    {
        return true;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <extiVerifyTrigger+0x22>
    }
    return false;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 800379e:	2300      	movs	r3, #0
 80037a0:	71fb      	strb	r3, [r7, #7]
 80037a2:	e008      	b.n	80037b6 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 80037a4:	4a09      	ldr	r2, [pc, #36]	; (80037cc <extiInit+0x34>)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	3302      	adds	r3, #2
 80037aa:	2100      	movs	r1, #0
 80037ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	3301      	adds	r3, #1
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d9f3      	bls.n	80037a4 <extiInit+0xc>
    }
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40013800 	.word	0x40013800

080037d0 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f937 	bl	8003a5c <gpioVerifyPort>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f083 0301 	eor.w	r3, r3, #1
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 80037fa:	23ff      	movs	r3, #255	; 0xff
 80037fc:	e08a      	b.n	8003914 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 80037fe:	78fb      	ldrb	r3, [r7, #3]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 f95d 	bl	8003ac0 <gpioVerifyPin>
 8003806:	4603      	mov	r3, r0
 8003808:	f083 0301 	eor.w	r3, r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8003812:	23fe      	movs	r3, #254	; 0xfe
 8003814:	e07e      	b.n	8003914 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d841      	bhi.n	80038a0 <extiConfigIrq+0xd0>
 800381c:	a201      	add	r2, pc, #4	; (adr r2, 8003824 <extiConfigIrq+0x54>)
 800381e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003822:	bf00      	nop
 8003824:	08003865 	.word	0x08003865
 8003828:	08003865 	.word	0x08003865
 800382c:	08003865 	.word	0x08003865
 8003830:	08003865 	.word	0x08003865
 8003834:	08003871 	.word	0x08003871
 8003838:	08003871 	.word	0x08003871
 800383c:	08003871 	.word	0x08003871
 8003840:	08003871 	.word	0x08003871
 8003844:	08003881 	.word	0x08003881
 8003848:	08003881 	.word	0x08003881
 800384c:	08003881 	.word	0x08003881
 8003850:	08003881 	.word	0x08003881
 8003854:	08003891 	.word	0x08003891
 8003858:	08003891 	.word	0x08003891
 800385c:	08003891 	.word	0x08003891
 8003860:	08003891 	.word	0x08003891
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
            break;
 800386e:	e017      	b.n	80038a0 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	3b04      	subs	r3, #4
 8003874:	b2db      	uxtb	r3, r3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	73bb      	strb	r3, [r7, #14]
            index = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
            break;
 800387e:	e00f      	b.n	80038a0 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	3b08      	subs	r3, #8
 8003884:	b2db      	uxtb	r3, r3
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	73bb      	strb	r3, [r7, #14]
            index = 2;
 800388a:	2302      	movs	r3, #2
 800388c:	73fb      	strb	r3, [r7, #15]
            break;
 800388e:	e007      	b.n	80038a0 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	3b0c      	subs	r3, #12
 8003894:	b2db      	uxtb	r3, r3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	73bb      	strb	r3, [r7, #14]
            index = 3;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
            break;
 800389e:	bf00      	nop
    }

    if (GPIOA == port)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <extiConfigIrq+0x14c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d102      	bne.n	80038ae <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 80038a8:	2300      	movs	r3, #0
 80038aa:	737b      	strb	r3, [r7, #13]
 80038ac:	e021      	b.n	80038f2 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a1b      	ldr	r2, [pc, #108]	; (8003920 <extiConfigIrq+0x150>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d102      	bne.n	80038bc <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 80038b6:	2301      	movs	r3, #1
 80038b8:	737b      	strb	r3, [r7, #13]
 80038ba:	e01a      	b.n	80038f2 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <extiConfigIrq+0x154>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d102      	bne.n	80038ca <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 80038c4:	2302      	movs	r3, #2
 80038c6:	737b      	strb	r3, [r7, #13]
 80038c8:	e013      	b.n	80038f2 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a16      	ldr	r2, [pc, #88]	; (8003928 <extiConfigIrq+0x158>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d102      	bne.n	80038d8 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 80038d2:	2303      	movs	r3, #3
 80038d4:	737b      	strb	r3, [r7, #13]
 80038d6:	e00c      	b.n	80038f2 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a14      	ldr	r2, [pc, #80]	; (800392c <extiConfigIrq+0x15c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d102      	bne.n	80038e6 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80038e0:	2304      	movs	r3, #4
 80038e2:	737b      	strb	r3, [r7, #13]
 80038e4:	e005      	b.n	80038f2 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a11      	ldr	r2, [pc, #68]	; (8003930 <extiConfigIrq+0x160>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d101      	bne.n	80038f2 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80038ee:	2307      	movs	r3, #7
 80038f0:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 80038f2:	4a10      	ldr	r2, [pc, #64]	; (8003934 <extiConfigIrq+0x164>)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038fc:	7b79      	ldrb	r1, [r7, #13]
 80038fe:	7bbb      	ldrb	r3, [r7, #14]
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	4618      	mov	r0, r3
 8003906:	490b      	ldr	r1, [pc, #44]	; (8003934 <extiConfigIrq+0x164>)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	4302      	orrs	r2, r0
 800390c:	3302      	adds	r3, #2
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40020000 	.word	0x40020000
 8003920:	40020400 	.word	0x40020400
 8003924:	40020800 	.word	0x40020800
 8003928:	40020c00 	.word	0x40020c00
 800392c:	40021000 	.word	0x40021000
 8003930:	40021c00 	.word	0x40021c00
 8003934:	40013800 	.word	0x40013800

08003938 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fec0 	bl	80036ca <extiVerifyIrqNum>
 800394a:	4603      	mov	r3, r0
 800394c:	f083 0301 	eor.w	r3, r3, #1
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8003956:	23d8      	movs	r3, #216	; 0xd8
 8003958:	e00a      	b.n	8003970 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 800395a:	4b07      	ldr	r3, [pc, #28]	; (8003978 <extiEnableIrq+0x40>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	79fa      	ldrb	r2, [r7, #7]
 8003960:	2101      	movs	r1, #1
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	4611      	mov	r1, r2
 8003968:	4a03      	ldr	r2, [pc, #12]	; (8003978 <extiEnableIrq+0x40>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40013c00 	.word	0x40013c00

0800397c <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	460a      	mov	r2, r1
 8003986:	71fb      	strb	r3, [r7, #7]
 8003988:	4613      	mov	r3, r2
 800398a:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fe9b 	bl	80036ca <extiVerifyIrqNum>
 8003994:	4603      	mov	r3, r0
 8003996:	f083 0301 	eor.w	r3, r3, #1
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 80039a0:	23d8      	movs	r3, #216	; 0xd8
 80039a2:	e055      	b.n	8003a50 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff fedf 	bl	800376a <extiVerifyTrigger>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 80039b8:	23d7      	movs	r3, #215	; 0xd7
 80039ba:	e049      	b.n	8003a50 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 80039bc:	79bb      	ldrb	r3, [r7, #6]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d115      	bne.n	80039ee <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	79fa      	ldrb	r2, [r7, #7]
 80039c8:	2101      	movs	r1, #1
 80039ca:	fa01 f202 	lsl.w	r2, r1, r2
 80039ce:	4611      	mov	r1, r2
 80039d0:	4a21      	ldr	r2, [pc, #132]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 80039d2:	430b      	orrs	r3, r1
 80039d4:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	79fa      	ldrb	r2, [r7, #7]
 80039dc:	2101      	movs	r1, #1
 80039de:	fa01 f202 	lsl.w	r2, r1, r2
 80039e2:	43d2      	mvns	r2, r2
 80039e4:	4611      	mov	r1, r2
 80039e6:	4a1c      	ldr	r2, [pc, #112]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	60d3      	str	r3, [r2, #12]
 80039ec:	e02f      	b.n	8003a4e <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80039ee:	79bb      	ldrb	r3, [r7, #6]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d115      	bne.n	8003a20 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80039f4:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	79fa      	ldrb	r2, [r7, #7]
 80039fa:	2101      	movs	r1, #1
 80039fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	79fa      	ldrb	r2, [r7, #7]
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f202 	lsl.w	r2, r1, r2
 8003a14:	43d2      	mvns	r2, r2
 8003a16:	4611      	mov	r1, r2
 8003a18:	4a0f      	ldr	r2, [pc, #60]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	6093      	str	r3, [r2, #8]
 8003a1e:	e016      	b.n	8003a4e <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8003a20:	79bb      	ldrb	r3, [r7, #6]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d113      	bne.n	8003a4e <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8003a26:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a32:	4611      	mov	r1, r2
 8003a34:	4a08      	ldr	r2, [pc, #32]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	79fa      	ldrb	r2, [r7, #7]
 8003a40:	2101      	movs	r1, #1
 8003a42:	fa01 f202 	lsl.w	r2, r1, r2
 8003a46:	4611      	mov	r1, r2
 8003a48:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <extiSetTriggerEdge+0xdc>)
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40013c00 	.word	0x40013c00

08003a5c <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a10      	ldr	r2, [pc, #64]	; (8003aa8 <gpioVerifyPort+0x4c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <gpioVerifyPort+0x38>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a0f      	ldr	r2, [pc, #60]	; (8003aac <gpioVerifyPort+0x50>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <gpioVerifyPort+0x38>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a0e      	ldr	r2, [pc, #56]	; (8003ab0 <gpioVerifyPort+0x54>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <gpioVerifyPort+0x38>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a0d      	ldr	r2, [pc, #52]	; (8003ab4 <gpioVerifyPort+0x58>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0c      	ldr	r2, [pc, #48]	; (8003ab8 <gpioVerifyPort+0x5c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <gpioVerifyPort+0x38>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	; (8003abc <gpioVerifyPort+0x60>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <gpioVerifyPort+0x3c>
    {
        return true;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <gpioVerifyPort+0x3e>
    }
    return false;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40020000 	.word	0x40020000
 8003aac:	40020400 	.word	0x40020400
 8003ab0:	40020800 	.word	0x40020800
 8003ab4:	40020c00 	.word	0x40020c00
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40021c00 	.word	0x40021c00

08003ac0 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02c      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d029      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d026      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d023      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d020      	beq.n	8003b2a <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	2b05      	cmp	r3, #5
 8003aec:	d01d      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	2b06      	cmp	r3, #6
 8003af2:	d01a      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003af4:	79fb      	ldrb	r3, [r7, #7]
 8003af6:	2b07      	cmp	r3, #7
 8003af8:	d017      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d014      	beq.n	8003b2a <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	d011      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	2b0a      	cmp	r3, #10
 8003b0a:	d00e      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	2b0b      	cmp	r3, #11
 8003b10:	d00b      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	2b0c      	cmp	r3, #12
 8003b16:	d008      	beq.n	8003b2a <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	2b0d      	cmp	r3, #13
 8003b1c:	d005      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b0e      	cmp	r3, #14
 8003b22:	d002      	beq.n	8003b2a <gpioVerifyPin+0x6a>
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	d101      	bne.n	8003b2e <gpioVerifyPin+0x6e>
    {
        return true;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <gpioVerifyPin+0x70>
    }
    return false;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d02c      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d029      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d026      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b58:	79fb      	ldrb	r3, [r7, #7]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d023      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d020      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d01d      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	2b06      	cmp	r3, #6
 8003b6e:	d01a      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	2b07      	cmp	r3, #7
 8003b74:	d017      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d014      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	2b09      	cmp	r3, #9
 8003b80:	d011      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	2b0a      	cmp	r3, #10
 8003b86:	d00e      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	2b0b      	cmp	r3, #11
 8003b8c:	d00b      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	d008      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b94:	79fb      	ldrb	r3, [r7, #7]
 8003b96:	2b0d      	cmp	r3, #13
 8003b98:	d005      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	2b0e      	cmp	r3, #14
 8003b9e:	d002      	beq.n	8003ba6 <gpioVerifyAltFunc+0x6a>
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d101      	bne.n	8003baa <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <gpioVerifyAltFunc+0x70>
    }

    return false;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <gpioVerifyPinMode+0x22>
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d005      	beq.n	8003bda <gpioVerifyPinMode+0x22>
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d002      	beq.n	8003bda <gpioVerifyPinMode+0x22>
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d101      	bne.n	8003bde <gpioVerifyPinMode+0x26>
    {
        return true;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <gpioVerifyPinMode+0x28>
    }

    return false;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <gpioVerifyOutputType+0x16>
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d005      	beq.n	8003c30 <gpioVerifyPushPullMode+0x1c>
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d002      	beq.n	8003c30 <gpioVerifyPushPullMode+0x1c>
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d101      	bne.n	8003c34 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f7ff ff05 	bl	8003a5c <gpioVerifyPort>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d042      	beq.n	8003cde <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a24      	ldr	r2, [pc, #144]	; (8003cec <gpioInitPort+0xa8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d106      	bne.n	8003c6e <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <gpioInitPort+0xac>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <gpioInitPort+0xac>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6c:	e035      	b.n	8003cda <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <gpioInitPort+0xb0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d106      	bne.n	8003c84 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <gpioInitPort+0xac>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <gpioInitPort+0xac>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	; 0x30
 8003c82:	e02a      	b.n	8003cda <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <gpioInitPort+0xb4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d106      	bne.n	8003c9a <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003c8c:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <gpioInitPort+0xac>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c90:	4a17      	ldr	r2, [pc, #92]	; (8003cf0 <gpioInitPort+0xac>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6313      	str	r3, [r2, #48]	; 0x30
 8003c98:	e01f      	b.n	8003cda <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	; (8003cfc <gpioInitPort+0xb8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d106      	bne.n	8003cb0 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <gpioInitPort+0xac>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <gpioInitPort+0xac>)
 8003ca8:	f043 0308 	orr.w	r3, r3, #8
 8003cac:	6313      	str	r3, [r2, #48]	; 0x30
 8003cae:	e014      	b.n	8003cda <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <gpioInitPort+0xbc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d106      	bne.n	8003cc6 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	; (8003cf0 <gpioInitPort+0xac>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <gpioInitPort+0xac>)
 8003cbe:	f043 0310 	orr.w	r3, r3, #16
 8003cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc4:	e009      	b.n	8003cda <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a0e      	ldr	r2, [pc, #56]	; (8003d04 <gpioInitPort+0xc0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d105      	bne.n	8003cda <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003cce:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <gpioInitPort+0xac>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a07      	ldr	r2, [pc, #28]	; (8003cf0 <gpioInitPort+0xac>)
 8003cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e001      	b.n	8003ce2 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40020000 	.word	0x40020000
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020400 	.word	0x40020400
 8003cf8:	40020800 	.word	0x40020800
 8003cfc:	40020c00 	.word	0x40020c00
 8003d00:	40021000 	.word	0x40021000
 8003d04:	40021c00 	.word	0x40021c00

08003d08 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fea3 	bl	8003a5c <gpioVerifyPort>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f083 0301 	eor.w	r3, r3, #1
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8003d22:	f04f 33ff 	mov.w	r3, #4294967295
 8003d26:	e041      	b.n	8003dac <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a22      	ldr	r2, [pc, #136]	; (8003db4 <gpioSelectPort+0xac>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d106      	bne.n	8003d3e <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003d30:	4b21      	ldr	r3, [pc, #132]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3c:	e035      	b.n	8003daa <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1e      	ldr	r2, [pc, #120]	; (8003dbc <gpioSelectPort+0xb4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d106      	bne.n	8003d54 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8003d46:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6313      	str	r3, [r2, #48]	; 0x30
 8003d52:	e02a      	b.n	8003daa <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <gpioSelectPort+0xb8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d106      	bne.n	8003d6a <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4a15      	ldr	r2, [pc, #84]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6313      	str	r3, [r2, #48]	; 0x30
 8003d68:	e01f      	b.n	8003daa <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a15      	ldr	r2, [pc, #84]	; (8003dc4 <gpioSelectPort+0xbc>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d106      	bne.n	8003d80 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d78:	f043 0308 	orr.w	r3, r3, #8
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	e014      	b.n	8003daa <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <gpioSelectPort+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d106      	bne.n	8003d96 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8003d88:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <gpioSelectPort+0xb0>)
 8003d8e:	f043 0310 	orr.w	r3, r3, #16
 8003d92:	6313      	str	r3, [r2, #48]	; 0x30
 8003d94:	e009      	b.n	8003daa <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <gpioSelectPort+0xc4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d105      	bne.n	8003daa <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003d9e:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <gpioSelectPort+0xb0>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <gpioSelectPort+0xb0>)
 8003da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da8:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3708      	adds	r7, #8
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40020000 	.word	0x40020000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020400 	.word	0x40020400
 8003dc0:	40020800 	.word	0x40020800
 8003dc4:	40020c00 	.word	0x40020c00
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40021c00 	.word	0x40021c00

08003dd0 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7ff fe3b 	bl	8003a5c <gpioVerifyPort>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f083 0301 	eor.w	r3, r3, #1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
 8003df6:	e032      	b.n	8003e5e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fe60 	bl	8003ac0 <gpioVerifyPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f083 0301 	eor.w	r3, r3, #1
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003e0c:	f06f 0301 	mvn.w	r3, #1
 8003e10:	e025      	b.n	8003e5e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8003e12:	78bb      	ldrb	r3, [r7, #2]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff fecf 	bl	8003bb8 <gpioVerifyPinMode>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f083 0301 	eor.w	r3, r3, #1
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8003e26:	f06f 0305 	mvn.w	r3, #5
 8003e2a:	e018      	b.n	8003e5e <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	0052      	lsls	r2, r2, #1
 8003e34:	2103      	movs	r1, #3
 8003e36:	fa01 f202 	lsl.w	r2, r1, r2
 8003e3a:	43d2      	mvns	r2, r2
 8003e3c:	401a      	ands	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8003e42:	78bb      	ldrb	r3, [r7, #2]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	78b9      	ldrb	r1, [r7, #2]
 8003e4e:	78fa      	ldrb	r2, [r7, #3]
 8003e50:	0052      	lsls	r2, r2, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7ff fdf2 	bl	8003a5c <gpioVerifyPort>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	e014      	b.n	8003eb4 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff fe17 	bl	8003ac0 <gpioVerifyPin>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003e9e:	f06f 0301 	mvn.w	r3, #1
 8003ea2:	e007      	b.n	8003eb4 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fdc7 	bl	8003a5c <gpioVerifyPort>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f083 0301 	eor.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003eda:	f04f 33ff 	mov.w	r3, #4294967295
 8003ede:	e015      	b.n	8003f0c <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fdec 	bl	8003ac0 <gpioVerifyPin>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003ef4:	f06f 0301 	mvn.w	r3, #1
 8003ef8:	e008      	b.n	8003f0c <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	3310      	adds	r3, #16
 8003efe:	2201      	movs	r2, #1
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
 8003f20:	4613      	mov	r3, r2
 8003f22:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff fd99 	bl	8003a5c <gpioVerifyPort>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f083 0301 	eor.w	r3, r3, #1
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	e050      	b.n	8003fde <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff fdbe 	bl	8003ac0 <gpioVerifyPin>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f083 0301 	eor.w	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d002      	beq.n	8003f56 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8003f50:	f06f 0301 	mvn.w	r3, #1
 8003f54:	e043      	b.n	8003fde <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8003f56:	78bb      	ldrb	r3, [r7, #2]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff fdef 	bl	8003b3c <gpioVerifyAltFunc>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	f083 0301 	eor.w	r3, r3, #1
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8003f6a:	f06f 0302 	mvn.w	r3, #2
 8003f6e:	e036      	b.n	8003fde <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	2202      	movs	r2, #2
 8003f74:	4619      	mov	r1, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ff2a 	bl	8003dd0 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	2b07      	cmp	r3, #7
 8003f80:	d815      	bhi.n	8003fae <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f90:	43d2      	mvns	r2, r2
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	78b9      	ldrb	r1, [r7, #2]
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	0092      	lsls	r2, r2, #2
 8003fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]
 8003fac:	e016      	b.n	8003fdc <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	3a08      	subs	r2, #8
 8003fb6:	0092      	lsls	r2, r2, #2
 8003fb8:	210f      	movs	r1, #15
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	43d2      	mvns	r2, r2
 8003fc0:	401a      	ands	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	78b9      	ldrb	r1, [r7, #2]
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	3a08      	subs	r2, #8
 8003fd0:	0092      	lsls	r2, r2, #2
 8003fd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	70fb      	strb	r3, [r7, #3]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fd30 	bl	8003a5c <gpioVerifyPort>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f083 0301 	eor.w	r3, r3, #1
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	e030      	b.n	8004070 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fd55 	bl	8003ac0 <gpioVerifyPin>
 8004016:	4603      	mov	r3, r0
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8004022:	f06f 0301 	mvn.w	r3, #1
 8004026:	e023      	b.n	8004070 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8004028:	78bb      	ldrb	r3, [r7, #2]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fdde 	bl	8003bec <gpioVerifyOutputType>
 8004030:	4603      	mov	r3, r0
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 800403c:	f06f 0303 	mvn.w	r3, #3
 8004040:	e016      	b.n	8004070 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	2101      	movs	r1, #1
 800404a:	fa01 f202 	lsl.w	r2, r1, r2
 800404e:	43d2      	mvns	r2, r2
 8004050:	401a      	ands	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8004056:	78bb      	ldrb	r3, [r7, #2]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d108      	bne.n	800406e <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	78fa      	ldrb	r2, [r7, #3]
 8004062:	2101      	movs	r1, #1
 8004064:	fa01 f202 	lsl.w	r2, r1, r2
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
 8004084:	4613      	mov	r3, r2
 8004086:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fce7 	bl	8003a5c <gpioVerifyPort>
 800408e:	4603      	mov	r3, r0
 8004090:	f083 0301 	eor.w	r3, r3, #1
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	e044      	b.n	800412a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fd0c 	bl	8003ac0 <gpioVerifyPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f083 0301 	eor.w	r3, r3, #1
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80040b4:	f06f 0301 	mvn.w	r3, #1
 80040b8:	e037      	b.n	800412a <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 80040ba:	78bb      	ldrb	r3, [r7, #2]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fda9 	bl	8003c14 <gpioVerifyPushPullMode>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f083 0301 	eor.w	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d002      	beq.n	80040d4 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 80040ce:	f06f 0306 	mvn.w	r3, #6
 80040d2:	e02a      	b.n	800412a <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	0052      	lsls	r2, r2, #1
 80040dc:	2103      	movs	r1, #3
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	43d2      	mvns	r2, r2
 80040e4:	401a      	ands	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11a      	bne.n	8004128 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 80040f2:	78bb      	ldrb	r3, [r7, #2]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d10a      	bne.n	800410e <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	0052      	lsls	r2, r2, #1
 8004100:	2101      	movs	r1, #1
 8004102:	fa01 f202 	lsl.w	r2, r1, r2
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e00c      	b.n	8004128 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 800410e:	78bb      	ldrb	r3, [r7, #2]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d109      	bne.n	8004128 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	0052      	lsls	r2, r2, #1
 800411c:	2102      	movs	r1, #2
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	4013      	ands	r3, r2
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	2101      	movs	r1, #1
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	4293      	cmp	r3, r2
 8004156:	bf0c      	ite	eq
 8004158:	2301      	moveq	r3, #1
 800415a:	2300      	movne	r3, #0
 800415c:	b2db      	uxtb	r3, r3
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 800417e:	bf00      	nop
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f9      	beq.n	8004180 <__i2c_start+0x16>
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 80041ae:	bf00      	nop
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f9      	beq.n	80041b0 <__i2c_stop+0x16>
 }
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 80041d2:	bf00      	nop
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bf0c      	ite	eq
 80041ea:	2301      	moveq	r3, #1
 80041ec:	2300      	movne	r3, #0
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4313      	orrs	r3, r2
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ed      	bne.n	80041d4 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8004206:	b480      	push	{r7}
 8004208:	b085      	sub	sp, #20
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 800420e:	bf00      	nop
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f9      	beq.n	8004210 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e002      	b.n	8004228 <__i2c_Chk_TX_empty+0x22>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3301      	adds	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b13      	cmp	r3, #19
 800422c:	d9f9      	bls.n	8004222 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <i2cVerifyDutyCycle+0x16>
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a13      	ldr	r2, [pc, #76]	; (80042bc <i2cSelectI2C+0x58>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d106      	bne.n	8004282 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8004274:	4b12      	ldr	r3, [pc, #72]	; (80042c0 <i2cSelectI2C+0x5c>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <i2cSelectI2C+0x5c>)
 800427a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800427e:	6413      	str	r3, [r2, #64]	; 0x40
 8004280:	e014      	b.n	80042ac <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <i2cSelectI2C+0x60>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d106      	bne.n	8004298 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800428a:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <i2cSelectI2C+0x5c>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a0c      	ldr	r2, [pc, #48]	; (80042c0 <i2cSelectI2C+0x5c>)
 8004290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
 8004296:	e009      	b.n	80042ac <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <i2cSelectI2C+0x64>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d105      	bne.n	80042ac <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <i2cSelectI2C+0x5c>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <i2cSelectI2C+0x5c>)
 80042a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40005400 	.word	0x40005400
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40005800 	.word	0x40005800
 80042c8:	40005c00 	.word	0x40005c00

080042cc <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00b      	beq.n	80042f6 <i2cSetClkSpd+0x2a>
 80042de:	78fb      	ldrb	r3, [r7, #3]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d008      	beq.n	80042f6 <i2cSetClkSpd+0x2a>
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d005      	beq.n	80042f6 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d002      	beq.n	80042f6 <i2cSetClkSpd+0x2a>
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d166      	bne.n	80043c4 <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 80042f6:	bf00      	nop
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1f9      	bne.n	80042f8 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004312:	f023 030f 	bic.w	r3, r3, #15
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8004326:	78fb      	ldrb	r3, [r7, #3]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d836      	bhi.n	800439a <i2cSetClkSpd+0xce>
 800432c:	a201      	add	r2, pc, #4	; (adr r2, 8004334 <i2cSetClkSpd+0x68>)
 800432e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004332:	bf00      	nop
 8004334:	08004349 	.word	0x08004349
 8004338:	08004357 	.word	0x08004357
 800433c:	08004365 	.word	0x08004365
 8004340:	08004373 	.word	0x08004373
 8004344:	08004381 	.word	0x08004381
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	61da      	str	r2, [r3, #28]
				break;
 8004354:	e02e      	b.n	80043b4 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	61da      	str	r2, [r3, #28]
    			break;
 8004362:	e027      	b.n	80043b4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	61da      	str	r2, [r3, #28]
    				break;
 8004370:	e020      	b.n	80043b4 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f043 0214 	orr.w	r2, r3, #20
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	61da      	str	r2, [r3, #28]
    			break;
 800437e:	e019      	b.n	80043b4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	f043 0205 	orr.w	r2, r3, #5
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	61da      	str	r2, [r3, #28]
				break;
 8004398:	e00c      	b.n	80043b4 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	61da      	str	r2, [r3, #28]
    			break;
 80043b2:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	e001      	b.n	80043c8 <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 80043c4:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	70fb      	strb	r3, [r7, #3]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70bb      	strb	r3, [r7, #2]
 80043ea:	4613      	mov	r3, r2
 80043ec:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ff23 	bl	800423c <i2cVerifyDutyCycle>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8004402:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8004406:	e029      	b.n	800445c <i2cInitI2C+0x88>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800440e:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8004422:	f000 fa55 	bl	80048d0 <rccGetPclk1Freq>
 8004426:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a0e      	ldr	r2, [pc, #56]	; (8004464 <i2cInitI2C+0x90>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	0c9a      	lsrs	r2, r3, #18
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 8004436:	78ba      	ldrb	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8004450:	787b      	ldrb	r3, [r7, #1]
 8004452:	4619      	mov	r1, r3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff39 	bl	80042cc <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    return I2C_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	431bde83 	.word	0x431bde83

08004468 <i2cBurstWrite>:
 * @note
 * Failure handling is not yet implemented
 *
*/
I2C_RETURN_CODE_t i2cBurstWrite(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t len)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	461a      	mov	r2, r3
 8004474:	460b      	mov	r3, r1
 8004476:	72fb      	strb	r3, [r7, #11]
 8004478:	4613      	mov	r3, r2
 800447a:	72bb      	strb	r3, [r7, #10]
    uint8_t numBytes = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	75fb      	strb	r3, [r7, #23]

    I2C_WAIT_BUSY(i2c);                 // Check whether the I2C bus is busy
 8004480:	bf00      	nop
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f9      	bne.n	8004482 <i2cBurstWrite+0x1a>
    I2C_RESET_POS(i2c);                 // May only be active in 16-bit mode
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	601a      	str	r2, [r3, #0]
    __i2c_start(i2c);					 // send start condition
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff fe65 	bl	800416a <__i2c_start>

    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80044a0:	bf00      	nop
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f9      	beq.n	80044a2 <i2cBurstWrite+0x3a>

    i2c->DR = saddr<<1;                 // Send 7Bit slave address
 80044ae:	7afb      	ldrb	r3, [r7, #11]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80044b8:	bf00      	nop
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f9      	beq.n	80044ba <i2cBurstWrite+0x52>

    while (numBytes < len)
 80044c6:	e016      	b.n	80044f6 <i2cBurstWrite+0x8e>
    {
        __i2c_Chk_TX_empty(i2c);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fe9c 	bl	8004206 <__i2c_Chk_TX_empty>
        __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fe7b 	bl	80041ca <__i2c_dummy_read_SR1_SR2>
        i2c->DR = *data++;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	611a      	str	r2, [r3, #16]
        I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 80044e2:	bf00      	nop
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f9      	beq.n	80044e4 <i2cBurstWrite+0x7c>

        numBytes++;
 80044f0:	7dfb      	ldrb	r3, [r7, #23]
 80044f2:	3301      	adds	r3, #1
 80044f4:	75fb      	strb	r3, [r7, #23]
    while (numBytes < len)
 80044f6:	7dfa      	ldrb	r2, [r7, #23]
 80044f8:	7abb      	ldrb	r3, [r7, #10]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3e4      	bcc.n	80044c8 <i2cBurstWrite+0x60>
    }

    I2C_BYTE_TRANSFER_FINISHED(i2c);   // Wait until BTF Flag is set
 80044fe:	bf00      	nop
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f9      	beq.n	8004500 <i2cBurstWrite+0x98>
    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f7ff fe5c 	bl	80041ca <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);					  // send stop condition
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff fe41 	bl	800419a <__i2c_stop>

    return I2C_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <i2cBurstRead>:

    return I2C_OK;
}

I2C_RETURN_CODE_t i2cBurstRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t *data, uint8_t num)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	60f8      	str	r0, [r7, #12]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	461a      	mov	r2, r3
 800452e:	460b      	mov	r3, r1
 8004530:	72fb      	strb	r3, [r7, #11]
 8004532:	4613      	mov	r3, r2
 8004534:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8004536:	bf00      	nop
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f9      	bne.n	8004538 <i2cBurstRead+0x16>
    I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	601a      	str	r2, [r3, #0]

    __i2c_start(i2c);					 // send start condition
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff fe0a 	bl	800416a <__i2c_start>

    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	461a      	mov	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8004564:	bf00      	nop
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0f9      	beq.n	8004566 <i2cBurstRead+0x44>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fe29 	bl	80041ca <__i2c_dummy_read_SR1_SR2>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8004584:	e02e      	b.n	80045e4 <i2cBurstRead+0xc2>
    {
        if (num == 1U)                      // If there is only one byte left...
 8004586:	7abb      	ldrb	r3, [r7, #10]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d11a      	bne.n	80045c2 <i2cBurstRead+0xa0>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fe16 	bl	80041ca <__i2c_dummy_read_SR1_SR2>
            __i2c_stop(i2c);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff fdfb 	bl	800419a <__i2c_stop>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80045a4:	bf00      	nop
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f9      	beq.n	80045a6 <i2cBurstRead+0x84>
            *data++ = i2c->DR;              // Read data from data register
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6919      	ldr	r1, [r3, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	1c5a      	adds	r2, r3, #1
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	b2ca      	uxtb	r2, r1
 80045be:	701a      	strb	r2, [r3, #0]
            break;
 80045c0:	e013      	b.n	80045ea <i2cBurstRead+0xc8>
        }
        else                                // More than one byte left
        {
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80045c2:	bf00      	nop
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f9      	beq.n	80045c4 <i2cBurstRead+0xa2>
            (*data++) = i2c->DR;            // Read data from data register
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6919      	ldr	r1, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	b2ca      	uxtb	r2, r1
 80045dc:	701a      	strb	r2, [r3, #0]
            num--;
 80045de:	7abb      	ldrb	r3, [r7, #10]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	72bb      	strb	r3, [r7, #10]
    while (num > 0)                          // Start reading multiple values
 80045e4:	7abb      	ldrb	r3, [r7, #10]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cd      	bne.n	8004586 <i2cBurstRead+0x64>
        }
    }

    return I2C_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f043 0201 	orr.w	r2, r3, #1
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fda1 	bl	800416a <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8004628:	78fb      	ldrb	r3, [r7, #3]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7ff fdc9 	bl	80041ca <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	e002      	b.n	8004650 <i2cFindSlaveAddr+0x3a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	3301      	adds	r3, #1
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004656:	d3f8      	bcc.n	800464a <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	e000      	b.n	800466a <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8004668:	2300      	movs	r3, #0
    }
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b094      	sub	sp, #80	; 0x50
 800467a:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 800467c:	2300      	movs	r3, #0
 800467e:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8004680:	2300      	movs	r3, #0
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8004684:	2300      	movs	r3, #0
 8004686:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8004688:	2300      	movs	r3, #0
 800468a:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <rccGetSysClock+0x200>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00d      	beq.n	80046b4 <rccGetSysClock+0x40>
 8004698:	2b08      	cmp	r3, #8
 800469a:	f200 80e1 	bhi.w	8004860 <rccGetSysClock+0x1ec>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <rccGetSysClock+0x34>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <rccGetSysClock+0x3a>
 80046a6:	e0db      	b.n	8004860 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80046a8:	4b73      	ldr	r3, [pc, #460]	; (8004878 <rccGetSysClock+0x204>)
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80046ac:	e0db      	b.n	8004866 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80046ae:	4b73      	ldr	r3, [pc, #460]	; (800487c <rccGetSysClock+0x208>)
 80046b0:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80046b2:	e0d8      	b.n	8004866 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b4:	4b6f      	ldr	r3, [pc, #444]	; (8004874 <rccGetSysClock+0x200>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046bc:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <rccGetSysClock+0x200>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <rccGetSysClock+0x200>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046dc:	633b      	str	r3, [r7, #48]	; 0x30
 80046de:	2300      	movs	r3, #0
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
 80046e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046e6:	4622      	mov	r2, r4
 80046e8:	462b      	mov	r3, r5
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0159      	lsls	r1, r3, #5
 80046f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f8:	0150      	lsls	r0, r2, #5
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4621      	mov	r1, r4
 8004700:	1a51      	subs	r1, r2, r1
 8004702:	6139      	str	r1, [r7, #16]
 8004704:	4629      	mov	r1, r5
 8004706:	eb63 0301 	sbc.w	r3, r3, r1
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004718:	4659      	mov	r1, fp
 800471a:	018b      	lsls	r3, r1, #6
 800471c:	4651      	mov	r1, sl
 800471e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004722:	4651      	mov	r1, sl
 8004724:	018a      	lsls	r2, r1, #6
 8004726:	4651      	mov	r1, sl
 8004728:	ebb2 0801 	subs.w	r8, r2, r1
 800472c:	4659      	mov	r1, fp
 800472e:	eb63 0901 	sbc.w	r9, r3, r1
 8004732:	f04f 0200 	mov.w	r2, #0
 8004736:	f04f 0300 	mov.w	r3, #0
 800473a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800473e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004742:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004746:	4690      	mov	r8, r2
 8004748:	4699      	mov	r9, r3
 800474a:	4623      	mov	r3, r4
 800474c:	eb18 0303 	adds.w	r3, r8, r3
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	462b      	mov	r3, r5
 8004754:	eb49 0303 	adc.w	r3, r9, r3
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004766:	4629      	mov	r1, r5
 8004768:	024b      	lsls	r3, r1, #9
 800476a:	4621      	mov	r1, r4
 800476c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004770:	4621      	mov	r1, r4
 8004772:	024a      	lsls	r2, r1, #9
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477a:	2200      	movs	r2, #0
 800477c:	62bb      	str	r3, [r7, #40]	; 0x28
 800477e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004780:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004784:	f7fc fa18 	bl	8000bb8 <__aeabi_uldivmod>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 800478c:	4613      	mov	r3, r2
 800478e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004790:	e058      	b.n	8004844 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8004792:	4b38      	ldr	r3, [pc, #224]	; (8004874 <rccGetSysClock+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	4618      	mov	r0, r3
 800479c:	4611      	mov	r1, r2
 800479e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a2:	623b      	str	r3, [r7, #32]
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	f04f 0000 	mov.w	r0, #0
 80047b4:	f04f 0100 	mov.w	r1, #0
 80047b8:	0159      	lsls	r1, r3, #5
 80047ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047be:	0150      	lsls	r0, r2, #5
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4641      	mov	r1, r8
 80047c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e4:	ebb2 040a 	subs.w	r4, r2, sl
 80047e8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	00eb      	lsls	r3, r5, #3
 80047f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fa:	00e2      	lsls	r2, r4, #3
 80047fc:	4614      	mov	r4, r2
 80047fe:	461d      	mov	r5, r3
 8004800:	4643      	mov	r3, r8
 8004802:	18e3      	adds	r3, r4, r3
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	464b      	mov	r3, r9
 8004808:	eb45 0303 	adc.w	r3, r5, r3
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481a:	4629      	mov	r1, r5
 800481c:	028b      	lsls	r3, r1, #10
 800481e:	4621      	mov	r1, r4
 8004820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004824:	4621      	mov	r1, r4
 8004826:	028a      	lsls	r2, r1, #10
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800482e:	2200      	movs	r2, #0
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	61fa      	str	r2, [r7, #28]
 8004834:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004838:	f7fc f9be 	bl	8000bb8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8004840:	4613      	mov	r3, r2
 8004842:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <rccGetSysClock+0x200>)
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	3301      	adds	r3, #1
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8004854:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800485e:	e002      	b.n	8004866 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <rccGetSysClock+0x204>)
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8004864:	bf00      	nop
    }

    return sysClock;
 8004866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004868:	4618      	mov	r0, r3
 800486a:	3750      	adds	r7, #80	; 0x50
 800486c:	46bd      	mov	sp, r7
 800486e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	00f42400 	.word	0x00f42400
 800487c:	007a1200 	.word	0x007a1200

08004880 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8004886:	f7ff fef5 	bl	8004674 <rccGetSysClock>
 800488a:	4601      	mov	r1, r0
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <rccGetHclkFreq+0x44>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	22f0      	movs	r2, #240	; 0xf0
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	fa92 f2a2 	rbit	r2, r2
 800489e:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	fab2 f282 	clz	r2, r2
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	40d3      	lsrs	r3, r2
 80048aa:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <rccGetHclkFreq+0x48>)
 80048ac:	5cd3      	ldrb	r3, [r2, r3]
 80048ae:	fa21 f303 	lsr.w	r3, r1, r3
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <rccGetHclkFreq+0x4c>)
 80048b4:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <rccGetHclkFreq+0x4c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	08009660 	.word	0x08009660
 80048cc:	20000394 	.word	0x20000394

080048d0 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80048d6:	f7ff ffd3 	bl	8004880 <rccGetHclkFreq>
 80048da:	4601      	mov	r1, r0
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <rccGetPclk1Freq+0x3c>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80048e4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80048e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	fa92 f2a2 	rbit	r2, r2
 80048f0:	603a      	str	r2, [r7, #0]
  return result;
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	fab2 f282 	clz	r2, r2
 80048f8:	b2d2      	uxtb	r2, r2
 80048fa:	40d3      	lsrs	r3, r2
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <rccGetPclk1Freq+0x40>)
 80048fe:	5cd3      	ldrb	r3, [r2, r3]
 8004900:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40023800 	.word	0x40023800
 8004910:	08009660 	.word	0x08009660

08004914 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 800491c:	bf00      	nop
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f9      	beq.n	800491e <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800492a:	2300      	movs	r3, #0
 800492c:	81fb      	strh	r3, [r7, #14]
 800492e:	e002      	b.n	8004936 <__spi_Chk_TX_empty+0x22>
 8004930:	89fb      	ldrh	r3, [r7, #14]
 8004932:	3301      	adds	r3, #1
 8004934:	81fb      	strh	r3, [r7, #14]
 8004936:	89fb      	ldrh	r3, [r7, #14]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d9f9      	bls.n	8004930 <__spi_Chk_TX_empty+0x1c>

}
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8004952:	bf00      	nop
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f9      	bne.n	8004954 <__spi_Chk_notBSY+0xa>
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0c      	ldr	r2, [pc, #48]	; (80049ac <spiVerifySPI+0x3c>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <spiVerifySPI+0x28>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0b      	ldr	r2, [pc, #44]	; (80049b0 <spiVerifySPI+0x40>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <spiVerifySPI+0x28>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0a      	ldr	r2, [pc, #40]	; (80049b4 <spiVerifySPI+0x44>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <spiVerifySPI+0x28>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <spiVerifySPI+0x48>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d101      	bne.n	800499c <spiVerifySPI+0x2c>
    {
        return true;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <spiVerifySPI+0x2e>
    }
    return false;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40013000 	.word	0x40013000
 80049b0:	40003800 	.word	0x40003800
 80049b4:	40003c00 	.word	0x40003c00
 80049b8:	40013400 	.word	0x40013400

080049bc <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d014      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d011      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d00e      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049d8:	79fb      	ldrb	r3, [r7, #7]
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d00b      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d008      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	2b05      	cmp	r3, #5
 80049e8:	d005      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d002      	beq.n	80049f6 <spiVerifyClkDivider+0x3a>
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	2b07      	cmp	r3, #7
 80049f4:	d101      	bne.n	80049fa <spiVerifyClkDivider+0x3e>
    {
        return true;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <spiVerifyClkDivider+0x40>
    }
    return false;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8004a12:	79fb      	ldrb	r3, [r7, #7]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d002      	beq.n	8004a1e <spiVerifySSM+0x16>
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <spiVerifySSM+0x1a>
    {
        return true;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e000      	b.n	8004a24 <spiVerifySSM+0x1c>
    }
    return false;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <spiVerifyOpMode+0x16>
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <spiVerifyOpMode+0x1a>
    {
        return true;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <spiVerifyOpMode+0x1c>
    }
    return false;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <spiVerifyPhase+0x16>
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <spiVerifyPhase+0x1a>
    {
        return true;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <spiVerifyPhase+0x1c>
    }
    return false;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <spiVerifyIdlePolarity+0x16>
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d101      	bne.n	8004a9a <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	4608      	mov	r0, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	70fb      	strb	r3, [r7, #3]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70bb      	strb	r3, [r7, #2]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ff77 	bl	80049bc <spiVerifyClkDivider>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f083 0301 	eor.w	r3, r3, #1
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 8004ada:	f06f 0350 	mvn.w	r3, #80	; 0x50
 8004ade:	e0cc      	b.n	8004c7a <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8004ae0:	787b      	ldrb	r3, [r7, #1]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7ff ff90 	bl	8004a08 <spiVerifySSM>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f083 0301 	eor.w	r3, r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8004af4:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8004af8:	e0bf      	b.n	8004c7a <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 8004afa:	7f3b      	ldrb	r3, [r7, #28]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff ff97 	bl	8004a30 <spiVerifyOpMode>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f083 0301 	eor.w	r3, r3, #1
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 8004b0e:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8004b12:	e0b2      	b.n	8004c7a <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8004b14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff ff9d 	bl	8004a58 <spiVerifyPhase>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f083 0301 	eor.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8004b2a:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8004b2e:	e0a4      	b.n	8004c7a <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8004b30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff ffa3 	bl	8004a80 <spiVerifyIdlePolarity>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f083 0301 	eor.w	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8004b46:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8004b4a:	e096      	b.n	8004c7a <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	2b07      	cmp	r3, #7
 8004b50:	d83a      	bhi.n	8004bc8 <spiInitSPI+0x120>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <spiInitSPI+0xb0>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b79 	.word	0x08004b79
 8004b5c:	08004b83 	.word	0x08004b83
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004b97 	.word	0x08004b97
 8004b68:	08004ba1 	.word	0x08004ba1
 8004b6c:	08004bab 	.word	0x08004bab
 8004b70:	08004bb5 	.word	0x08004bb5
 8004b74:	08004bbf 	.word	0x08004bbf
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004b78:	89fb      	ldrh	r3, [r7, #14]
 8004b7a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8004b7e:	81fb      	strh	r3, [r7, #14]
            break;
 8004b80:	e027      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8004b82:	89fb      	ldrh	r3, [r7, #14]
 8004b84:	f043 0308 	orr.w	r3, r3, #8
 8004b88:	81fb      	strh	r3, [r7, #14]
            break;
 8004b8a:	e022      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8004b8c:	89fb      	ldrh	r3, [r7, #14]
 8004b8e:	f043 0310 	orr.w	r3, r3, #16
 8004b92:	81fb      	strh	r3, [r7, #14]
            break;
 8004b94:	e01d      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	f043 0318 	orr.w	r3, r3, #24
 8004b9c:	81fb      	strh	r3, [r7, #14]
            break;
 8004b9e:	e018      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8004ba0:	89fb      	ldrh	r3, [r7, #14]
 8004ba2:	f043 0320 	orr.w	r3, r3, #32
 8004ba6:	81fb      	strh	r3, [r7, #14]
            break;
 8004ba8:	e013      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8004baa:	89fb      	ldrh	r3, [r7, #14]
 8004bac:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004bb0:	81fb      	strh	r3, [r7, #14]
            break;
 8004bb2:	e00e      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004bba:	81fb      	strh	r3, [r7, #14]
            break;
 8004bbc:	e009      	b.n	8004bd2 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8004bc4:	81fb      	strh	r3, [r7, #14]
            break;
 8004bc6:	e004      	b.n	8004bd2 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004bc8:	89fb      	ldrh	r3, [r7, #14]
 8004bca:	f043 0318 	orr.w	r3, r3, #24
 8004bce:	81fb      	strh	r3, [r7, #14]
            break;
 8004bd0:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8004bd2:	78bb      	ldrb	r3, [r7, #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8004bd8:	89fb      	ldrh	r3, [r7, #14]
 8004bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bde:	81fb      	strh	r3, [r7, #14]
 8004be0:	e003      	b.n	8004bea <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8004be2:	89fb      	ldrh	r3, [r7, #14]
 8004be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004be8:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 8004bea:	787b      	ldrb	r3, [r7, #1]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d110      	bne.n	8004c12 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf6:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8004bf8:	7e3b      	ldrb	r3, [r7, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d104      	bne.n	8004c08 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 8004bfe:	89fb      	ldrh	r3, [r7, #14]
 8004c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c04:	81fb      	strh	r3, [r7, #14]
 8004c06:	e008      	b.n	8004c1a <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0e:	81fb      	strh	r3, [r7, #14]
 8004c10:	e003      	b.n	8004c1a <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c18:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8004c1a:	7f3b      	ldrb	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	f043 0304 	orr.w	r3, r3, #4
 8004c26:	81fb      	strh	r3, [r7, #14]
 8004c28:	e003      	b.n	8004c32 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8004c2a:	89fb      	ldrh	r3, [r7, #14]
 8004c2c:	f023 0304 	bic.w	r3, r3, #4
 8004c30:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8004c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	81fb      	strh	r3, [r7, #14]
 8004c42:	e003      	b.n	8004c4c <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8004c44:	89fb      	ldrh	r3, [r7, #14]
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8004c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d104      	bne.n	8004c5e <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	f023 0302 	bic.w	r3, r3, #2
 8004c5a:	81fb      	strh	r3, [r7, #14]
 8004c5c:	e003      	b.n	8004c66 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8004c5e:	89fb      	ldrh	r3, [r7, #14]
 8004c60:	f043 0302 	orr.w	r3, r3, #2
 8004c64:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8004c66:	89fa      	ldrh	r2, [r7, #14]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f846 	bl	8004d04 <spiEnableSPI>

    return SPI_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop

08004c84 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <spiSelectSPI+0x6c>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d106      	bne.n	8004ca2 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <spiSelectSPI+0x70>)
 8004c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c98:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <spiSelectSPI+0x70>)
 8004c9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c9e:	6453      	str	r3, [r2, #68]	; 0x44
 8004ca0:	e01f      	b.n	8004ce2 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <spiSelectSPI+0x74>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d106      	bne.n	8004cb8 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8004caa:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	4a11      	ldr	r2, [pc, #68]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb6:	e014      	b.n	8004ce2 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <spiSelectSPI+0x78>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d106      	bne.n	8004cce <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	4a0b      	ldr	r2, [pc, #44]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	6413      	str	r3, [r2, #64]	; 0x40
 8004ccc:	e009      	b.n	8004ce2 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	; (8004d00 <spiSelectSPI+0x7c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d105      	bne.n	8004ce2 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cda:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <spiSelectSPI+0x70>)
 8004cdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ce0:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	40013000 	.word	0x40013000
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	40003800 	.word	0x40003800
 8004cfc:	40003c00 	.word	0x40003c00
 8004d00:	40013400 	.word	0x40013400

08004d04 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fe2f 	bl	8004970 <spiVerifySPI>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f083 0301 	eor.w	r3, r3, #1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8004d1e:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8004d22:	e006      	b.n	8004d32 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}

08004d3a <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	60f8      	str	r0, [r7, #12]
 8004d42:	60b9      	str	r1, [r7, #8]
 8004d44:	4611      	mov	r1, r2
 8004d46:	461a      	mov	r2, r3
 8004d48:	460b      	mov	r3, r1
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe feb4 	bl	8003ac0 <gpioVerifyPin>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f083 0301 	eor.w	r3, r3, #1
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8004d64:	f06f 0301 	mvn.w	r3, #1
 8004d68:	e016      	b.n	8004d98 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fdd2 	bl	8004914 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	4619      	mov	r1, r3
 8004d74:	68b8      	ldr	r0, [r7, #8]
 8004d76:	f7ff f8a1 	bl	8003ebc <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8004d7a:	79ba      	ldrb	r2, [r7, #6]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff fdc7 	bl	8004914 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fddf 	bl	800494a <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	68b8      	ldr	r0, [r7, #8]
 8004d92:	f7ff f868 	bl	8003e66 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	6039      	str	r1, [r7, #0]
 8004daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	db0a      	blt.n	8004dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	490c      	ldr	r1, [pc, #48]	; (8004dec <__NVIC_SetPriority+0x4c>)
 8004dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dbe:	0112      	lsls	r2, r2, #4
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dc8:	e00a      	b.n	8004de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	4908      	ldr	r1, [pc, #32]	; (8004df0 <__NVIC_SetPriority+0x50>)
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	3b04      	subs	r3, #4
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	440b      	add	r3, r1
 8004dde:	761a      	strb	r2, [r3, #24]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000e100 	.word	0xe000e100
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e04:	d301      	bcc.n	8004e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e06:	2301      	movs	r3, #1
 8004e08:	e00f      	b.n	8004e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <SysTick_Config+0x40>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e12:	210f      	movs	r1, #15
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	f7ff ffc2 	bl	8004da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <SysTick_Config+0x40>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <SysTick_Config+0x40>)
 8004e24:	2207      	movs	r2, #7
 8004e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	e000e010 	.word	0xe000e010

08004e38 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	601a      	str	r2, [r3, #0]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8004e5c:	f7fe fa34 	bl	80032c8 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <systickInit+0x24>)
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ffc2 	bl	8004df4 <SysTick_Config>
}
 8004e70:	bf00      	nop
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	20000394 	.word	0x20000394

08004e7c <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	601a      	str	r2, [r3, #0]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <isSystickExpired+0x16>
	{
		timerState = true;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <SysTick_Handler+0x14>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	701a      	strb	r2, [r3, #0]
}
 8004ec6:	bf00      	nop
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	200006e0 	.word	0x200006e0

08004ed4 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d004      	beq.n	8004eee <systickUpdateTimer+0x1a>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <systickUpdateTimer+0x2c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	200006e0 	.word	0x200006e0

08004f04 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
 8004f14:	e011      	b.n	8004f3a <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d004      	beq.n	8004f34 <systickUpdateTimerList+0x30>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	1e5a      	subs	r2, r3, #1
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	3301      	adds	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	78fb      	ldrb	r3, [r7, #3]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d3e9      	bcc.n	8004f16 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <systickUpdateTimerList+0x50>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
}
 8004f48:	bf00      	nop
 8004f4a:	3714      	adds	r7, #20
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	200006e0 	.word	0x200006e0

08004f58 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7ff ff67 	bl	8004e38 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8004f6a:	e006      	b.n	8004f7a <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <systickDelay+0x44>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff ffad 	bl	8004ed4 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ff8a 	bl	8004e98 <isSystickExpired>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1ed      	bne.n	8004f6c <systickDelay+0x14>
        }
    }
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200006e0 	.word	0x200006e0

08004fa0 <__libc_init_array>:
 8004fa0:	b570      	push	{r4, r5, r6, lr}
 8004fa2:	4d0d      	ldr	r5, [pc, #52]	; (8004fd8 <__libc_init_array+0x38>)
 8004fa4:	4c0d      	ldr	r4, [pc, #52]	; (8004fdc <__libc_init_array+0x3c>)
 8004fa6:	1b64      	subs	r4, r4, r5
 8004fa8:	10a4      	asrs	r4, r4, #2
 8004faa:	2600      	movs	r6, #0
 8004fac:	42a6      	cmp	r6, r4
 8004fae:	d109      	bne.n	8004fc4 <__libc_init_array+0x24>
 8004fb0:	4d0b      	ldr	r5, [pc, #44]	; (8004fe0 <__libc_init_array+0x40>)
 8004fb2:	4c0c      	ldr	r4, [pc, #48]	; (8004fe4 <__libc_init_array+0x44>)
 8004fb4:	f003 fff2 	bl	8008f9c <_init>
 8004fb8:	1b64      	subs	r4, r4, r5
 8004fba:	10a4      	asrs	r4, r4, #2
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	42a6      	cmp	r6, r4
 8004fc0:	d105      	bne.n	8004fce <__libc_init_array+0x2e>
 8004fc2:	bd70      	pop	{r4, r5, r6, pc}
 8004fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc8:	4798      	blx	r3
 8004fca:	3601      	adds	r6, #1
 8004fcc:	e7ee      	b.n	8004fac <__libc_init_array+0xc>
 8004fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd2:	4798      	blx	r3
 8004fd4:	3601      	adds	r6, #1
 8004fd6:	e7f2      	b.n	8004fbe <__libc_init_array+0x1e>
 8004fd8:	08009c30 	.word	0x08009c30
 8004fdc:	08009c30 	.word	0x08009c30
 8004fe0:	08009c30 	.word	0x08009c30
 8004fe4:	08009c34 	.word	0x08009c34

08004fe8 <memset>:
 8004fe8:	4402      	add	r2, r0
 8004fea:	4603      	mov	r3, r0
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d100      	bne.n	8004ff2 <memset+0xa>
 8004ff0:	4770      	bx	lr
 8004ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ff6:	e7f9      	b.n	8004fec <memset+0x4>

08004ff8 <__cvt>:
 8004ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ffc:	ec55 4b10 	vmov	r4, r5, d0
 8005000:	2d00      	cmp	r5, #0
 8005002:	460e      	mov	r6, r1
 8005004:	4619      	mov	r1, r3
 8005006:	462b      	mov	r3, r5
 8005008:	bfbb      	ittet	lt
 800500a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800500e:	461d      	movlt	r5, r3
 8005010:	2300      	movge	r3, #0
 8005012:	232d      	movlt	r3, #45	; 0x2d
 8005014:	700b      	strb	r3, [r1, #0]
 8005016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800501c:	4691      	mov	r9, r2
 800501e:	f023 0820 	bic.w	r8, r3, #32
 8005022:	bfbc      	itt	lt
 8005024:	4622      	movlt	r2, r4
 8005026:	4614      	movlt	r4, r2
 8005028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800502c:	d005      	beq.n	800503a <__cvt+0x42>
 800502e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005032:	d100      	bne.n	8005036 <__cvt+0x3e>
 8005034:	3601      	adds	r6, #1
 8005036:	2102      	movs	r1, #2
 8005038:	e000      	b.n	800503c <__cvt+0x44>
 800503a:	2103      	movs	r1, #3
 800503c:	ab03      	add	r3, sp, #12
 800503e:	9301      	str	r3, [sp, #4]
 8005040:	ab02      	add	r3, sp, #8
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	ec45 4b10 	vmov	d0, r4, r5
 8005048:	4653      	mov	r3, sl
 800504a:	4632      	mov	r2, r6
 800504c:	f000 fcec 	bl	8005a28 <_dtoa_r>
 8005050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005054:	4607      	mov	r7, r0
 8005056:	d102      	bne.n	800505e <__cvt+0x66>
 8005058:	f019 0f01 	tst.w	r9, #1
 800505c:	d022      	beq.n	80050a4 <__cvt+0xac>
 800505e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005062:	eb07 0906 	add.w	r9, r7, r6
 8005066:	d110      	bne.n	800508a <__cvt+0x92>
 8005068:	783b      	ldrb	r3, [r7, #0]
 800506a:	2b30      	cmp	r3, #48	; 0x30
 800506c:	d10a      	bne.n	8005084 <__cvt+0x8c>
 800506e:	2200      	movs	r2, #0
 8005070:	2300      	movs	r3, #0
 8005072:	4620      	mov	r0, r4
 8005074:	4629      	mov	r1, r5
 8005076:	f7fb fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800507a:	b918      	cbnz	r0, 8005084 <__cvt+0x8c>
 800507c:	f1c6 0601 	rsb	r6, r6, #1
 8005080:	f8ca 6000 	str.w	r6, [sl]
 8005084:	f8da 3000 	ldr.w	r3, [sl]
 8005088:	4499      	add	r9, r3
 800508a:	2200      	movs	r2, #0
 800508c:	2300      	movs	r3, #0
 800508e:	4620      	mov	r0, r4
 8005090:	4629      	mov	r1, r5
 8005092:	f7fb fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8005096:	b108      	cbz	r0, 800509c <__cvt+0xa4>
 8005098:	f8cd 900c 	str.w	r9, [sp, #12]
 800509c:	2230      	movs	r2, #48	; 0x30
 800509e:	9b03      	ldr	r3, [sp, #12]
 80050a0:	454b      	cmp	r3, r9
 80050a2:	d307      	bcc.n	80050b4 <__cvt+0xbc>
 80050a4:	9b03      	ldr	r3, [sp, #12]
 80050a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050a8:	1bdb      	subs	r3, r3, r7
 80050aa:	4638      	mov	r0, r7
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	b004      	add	sp, #16
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	9103      	str	r1, [sp, #12]
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e7f0      	b.n	800509e <__cvt+0xa6>

080050bc <__exponent>:
 80050bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050be:	4603      	mov	r3, r0
 80050c0:	2900      	cmp	r1, #0
 80050c2:	bfb8      	it	lt
 80050c4:	4249      	neglt	r1, r1
 80050c6:	f803 2b02 	strb.w	r2, [r3], #2
 80050ca:	bfb4      	ite	lt
 80050cc:	222d      	movlt	r2, #45	; 0x2d
 80050ce:	222b      	movge	r2, #43	; 0x2b
 80050d0:	2909      	cmp	r1, #9
 80050d2:	7042      	strb	r2, [r0, #1]
 80050d4:	dd2a      	ble.n	800512c <__exponent+0x70>
 80050d6:	f10d 0407 	add.w	r4, sp, #7
 80050da:	46a4      	mov	ip, r4
 80050dc:	270a      	movs	r7, #10
 80050de:	46a6      	mov	lr, r4
 80050e0:	460a      	mov	r2, r1
 80050e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80050e6:	fb07 1516 	mls	r5, r7, r6, r1
 80050ea:	3530      	adds	r5, #48	; 0x30
 80050ec:	2a63      	cmp	r2, #99	; 0x63
 80050ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80050f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80050f6:	4631      	mov	r1, r6
 80050f8:	dcf1      	bgt.n	80050de <__exponent+0x22>
 80050fa:	3130      	adds	r1, #48	; 0x30
 80050fc:	f1ae 0502 	sub.w	r5, lr, #2
 8005100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005104:	1c44      	adds	r4, r0, #1
 8005106:	4629      	mov	r1, r5
 8005108:	4561      	cmp	r1, ip
 800510a:	d30a      	bcc.n	8005122 <__exponent+0x66>
 800510c:	f10d 0209 	add.w	r2, sp, #9
 8005110:	eba2 020e 	sub.w	r2, r2, lr
 8005114:	4565      	cmp	r5, ip
 8005116:	bf88      	it	hi
 8005118:	2200      	movhi	r2, #0
 800511a:	4413      	add	r3, r2
 800511c:	1a18      	subs	r0, r3, r0
 800511e:	b003      	add	sp, #12
 8005120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800512a:	e7ed      	b.n	8005108 <__exponent+0x4c>
 800512c:	2330      	movs	r3, #48	; 0x30
 800512e:	3130      	adds	r1, #48	; 0x30
 8005130:	7083      	strb	r3, [r0, #2]
 8005132:	70c1      	strb	r1, [r0, #3]
 8005134:	1d03      	adds	r3, r0, #4
 8005136:	e7f1      	b.n	800511c <__exponent+0x60>

08005138 <_printf_float>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	ed2d 8b02 	vpush	{d8}
 8005140:	b08d      	sub	sp, #52	; 0x34
 8005142:	460c      	mov	r4, r1
 8005144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005148:	4616      	mov	r6, r2
 800514a:	461f      	mov	r7, r3
 800514c:	4605      	mov	r5, r0
 800514e:	f001 fa59 	bl	8006604 <_localeconv_r>
 8005152:	f8d0 a000 	ldr.w	sl, [r0]
 8005156:	4650      	mov	r0, sl
 8005158:	f7fb f842 	bl	80001e0 <strlen>
 800515c:	2300      	movs	r3, #0
 800515e:	930a      	str	r3, [sp, #40]	; 0x28
 8005160:	6823      	ldr	r3, [r4, #0]
 8005162:	9305      	str	r3, [sp, #20]
 8005164:	f8d8 3000 	ldr.w	r3, [r8]
 8005168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800516c:	3307      	adds	r3, #7
 800516e:	f023 0307 	bic.w	r3, r3, #7
 8005172:	f103 0208 	add.w	r2, r3, #8
 8005176:	f8c8 2000 	str.w	r2, [r8]
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800518a:	9307      	str	r3, [sp, #28]
 800518c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005190:	ee08 0a10 	vmov	s16, r0
 8005194:	4b9f      	ldr	r3, [pc, #636]	; (8005414 <_printf_float+0x2dc>)
 8005196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	f7fb fccd 	bl	8000b3c <__aeabi_dcmpun>
 80051a2:	bb88      	cbnz	r0, 8005208 <_printf_float+0xd0>
 80051a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051a8:	4b9a      	ldr	r3, [pc, #616]	; (8005414 <_printf_float+0x2dc>)
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	f7fb fca7 	bl	8000b00 <__aeabi_dcmple>
 80051b2:	bb48      	cbnz	r0, 8005208 <_printf_float+0xd0>
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb fc96 	bl	8000aec <__aeabi_dcmplt>
 80051c0:	b110      	cbz	r0, 80051c8 <_printf_float+0x90>
 80051c2:	232d      	movs	r3, #45	; 0x2d
 80051c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051c8:	4b93      	ldr	r3, [pc, #588]	; (8005418 <_printf_float+0x2e0>)
 80051ca:	4894      	ldr	r0, [pc, #592]	; (800541c <_printf_float+0x2e4>)
 80051cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80051d0:	bf94      	ite	ls
 80051d2:	4698      	movls	r8, r3
 80051d4:	4680      	movhi	r8, r0
 80051d6:	2303      	movs	r3, #3
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	9b05      	ldr	r3, [sp, #20]
 80051dc:	f023 0204 	bic.w	r2, r3, #4
 80051e0:	6022      	str	r2, [r4, #0]
 80051e2:	f04f 0900 	mov.w	r9, #0
 80051e6:	9700      	str	r7, [sp, #0]
 80051e8:	4633      	mov	r3, r6
 80051ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80051ec:	4621      	mov	r1, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	f000 f9d8 	bl	80055a4 <_printf_common>
 80051f4:	3001      	adds	r0, #1
 80051f6:	f040 8090 	bne.w	800531a <_printf_float+0x1e2>
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295
 80051fe:	b00d      	add	sp, #52	; 0x34
 8005200:	ecbd 8b02 	vpop	{d8}
 8005204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	4640      	mov	r0, r8
 800520e:	4649      	mov	r1, r9
 8005210:	f7fb fc94 	bl	8000b3c <__aeabi_dcmpun>
 8005214:	b140      	cbz	r0, 8005228 <_printf_float+0xf0>
 8005216:	464b      	mov	r3, r9
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfbc      	itt	lt
 800521c:	232d      	movlt	r3, #45	; 0x2d
 800521e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005222:	487f      	ldr	r0, [pc, #508]	; (8005420 <_printf_float+0x2e8>)
 8005224:	4b7f      	ldr	r3, [pc, #508]	; (8005424 <_printf_float+0x2ec>)
 8005226:	e7d1      	b.n	80051cc <_printf_float+0x94>
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800522e:	9206      	str	r2, [sp, #24]
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	d13f      	bne.n	80052b4 <_printf_float+0x17c>
 8005234:	2306      	movs	r3, #6
 8005236:	6063      	str	r3, [r4, #4]
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	6861      	ldr	r1, [r4, #4]
 800523c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005240:	2300      	movs	r3, #0
 8005242:	9303      	str	r3, [sp, #12]
 8005244:	ab0a      	add	r3, sp, #40	; 0x28
 8005246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800524a:	ab09      	add	r3, sp, #36	; 0x24
 800524c:	ec49 8b10 	vmov	d0, r8, r9
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005258:	4628      	mov	r0, r5
 800525a:	f7ff fecd 	bl	8004ff8 <__cvt>
 800525e:	9b06      	ldr	r3, [sp, #24]
 8005260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005262:	2b47      	cmp	r3, #71	; 0x47
 8005264:	4680      	mov	r8, r0
 8005266:	d108      	bne.n	800527a <_printf_float+0x142>
 8005268:	1cc8      	adds	r0, r1, #3
 800526a:	db02      	blt.n	8005272 <_printf_float+0x13a>
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	4299      	cmp	r1, r3
 8005270:	dd41      	ble.n	80052f6 <_printf_float+0x1be>
 8005272:	f1ab 0b02 	sub.w	fp, fp, #2
 8005276:	fa5f fb8b 	uxtb.w	fp, fp
 800527a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800527e:	d820      	bhi.n	80052c2 <_printf_float+0x18a>
 8005280:	3901      	subs	r1, #1
 8005282:	465a      	mov	r2, fp
 8005284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005288:	9109      	str	r1, [sp, #36]	; 0x24
 800528a:	f7ff ff17 	bl	80050bc <__exponent>
 800528e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005290:	1813      	adds	r3, r2, r0
 8005292:	2a01      	cmp	r2, #1
 8005294:	4681      	mov	r9, r0
 8005296:	6123      	str	r3, [r4, #16]
 8005298:	dc02      	bgt.n	80052a0 <_printf_float+0x168>
 800529a:	6822      	ldr	r2, [r4, #0]
 800529c:	07d2      	lsls	r2, r2, #31
 800529e:	d501      	bpl.n	80052a4 <_printf_float+0x16c>
 80052a0:	3301      	adds	r3, #1
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d09c      	beq.n	80051e6 <_printf_float+0xae>
 80052ac:	232d      	movs	r3, #45	; 0x2d
 80052ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b2:	e798      	b.n	80051e6 <_printf_float+0xae>
 80052b4:	9a06      	ldr	r2, [sp, #24]
 80052b6:	2a47      	cmp	r2, #71	; 0x47
 80052b8:	d1be      	bne.n	8005238 <_printf_float+0x100>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1bc      	bne.n	8005238 <_printf_float+0x100>
 80052be:	2301      	movs	r3, #1
 80052c0:	e7b9      	b.n	8005236 <_printf_float+0xfe>
 80052c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80052c6:	d118      	bne.n	80052fa <_printf_float+0x1c2>
 80052c8:	2900      	cmp	r1, #0
 80052ca:	6863      	ldr	r3, [r4, #4]
 80052cc:	dd0b      	ble.n	80052e6 <_printf_float+0x1ae>
 80052ce:	6121      	str	r1, [r4, #16]
 80052d0:	b913      	cbnz	r3, 80052d8 <_printf_float+0x1a0>
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	07d0      	lsls	r0, r2, #31
 80052d6:	d502      	bpl.n	80052de <_printf_float+0x1a6>
 80052d8:	3301      	adds	r3, #1
 80052da:	440b      	add	r3, r1
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	65a1      	str	r1, [r4, #88]	; 0x58
 80052e0:	f04f 0900 	mov.w	r9, #0
 80052e4:	e7de      	b.n	80052a4 <_printf_float+0x16c>
 80052e6:	b913      	cbnz	r3, 80052ee <_printf_float+0x1b6>
 80052e8:	6822      	ldr	r2, [r4, #0]
 80052ea:	07d2      	lsls	r2, r2, #31
 80052ec:	d501      	bpl.n	80052f2 <_printf_float+0x1ba>
 80052ee:	3302      	adds	r3, #2
 80052f0:	e7f4      	b.n	80052dc <_printf_float+0x1a4>
 80052f2:	2301      	movs	r3, #1
 80052f4:	e7f2      	b.n	80052dc <_printf_float+0x1a4>
 80052f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80052fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052fc:	4299      	cmp	r1, r3
 80052fe:	db05      	blt.n	800530c <_printf_float+0x1d4>
 8005300:	6823      	ldr	r3, [r4, #0]
 8005302:	6121      	str	r1, [r4, #16]
 8005304:	07d8      	lsls	r0, r3, #31
 8005306:	d5ea      	bpl.n	80052de <_printf_float+0x1a6>
 8005308:	1c4b      	adds	r3, r1, #1
 800530a:	e7e7      	b.n	80052dc <_printf_float+0x1a4>
 800530c:	2900      	cmp	r1, #0
 800530e:	bfd4      	ite	le
 8005310:	f1c1 0202 	rsble	r2, r1, #2
 8005314:	2201      	movgt	r2, #1
 8005316:	4413      	add	r3, r2
 8005318:	e7e0      	b.n	80052dc <_printf_float+0x1a4>
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	055a      	lsls	r2, r3, #21
 800531e:	d407      	bmi.n	8005330 <_printf_float+0x1f8>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	4642      	mov	r2, r8
 8005324:	4631      	mov	r1, r6
 8005326:	4628      	mov	r0, r5
 8005328:	47b8      	blx	r7
 800532a:	3001      	adds	r0, #1
 800532c:	d12c      	bne.n	8005388 <_printf_float+0x250>
 800532e:	e764      	b.n	80051fa <_printf_float+0xc2>
 8005330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005334:	f240 80e0 	bls.w	80054f8 <_printf_float+0x3c0>
 8005338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800533c:	2200      	movs	r2, #0
 800533e:	2300      	movs	r3, #0
 8005340:	f7fb fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005344:	2800      	cmp	r0, #0
 8005346:	d034      	beq.n	80053b2 <_printf_float+0x27a>
 8005348:	4a37      	ldr	r2, [pc, #220]	; (8005428 <_printf_float+0x2f0>)
 800534a:	2301      	movs	r3, #1
 800534c:	4631      	mov	r1, r6
 800534e:	4628      	mov	r0, r5
 8005350:	47b8      	blx	r7
 8005352:	3001      	adds	r0, #1
 8005354:	f43f af51 	beq.w	80051fa <_printf_float+0xc2>
 8005358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800535c:	429a      	cmp	r2, r3
 800535e:	db02      	blt.n	8005366 <_printf_float+0x22e>
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	07d8      	lsls	r0, r3, #31
 8005364:	d510      	bpl.n	8005388 <_printf_float+0x250>
 8005366:	ee18 3a10 	vmov	r3, s16
 800536a:	4652      	mov	r2, sl
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af41 	beq.w	80051fa <_printf_float+0xc2>
 8005378:	f04f 0800 	mov.w	r8, #0
 800537c:	f104 091a 	add.w	r9, r4, #26
 8005380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	4543      	cmp	r3, r8
 8005386:	dc09      	bgt.n	800539c <_printf_float+0x264>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	079b      	lsls	r3, r3, #30
 800538c:	f100 8105 	bmi.w	800559a <_printf_float+0x462>
 8005390:	68e0      	ldr	r0, [r4, #12]
 8005392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005394:	4298      	cmp	r0, r3
 8005396:	bfb8      	it	lt
 8005398:	4618      	movlt	r0, r3
 800539a:	e730      	b.n	80051fe <_printf_float+0xc6>
 800539c:	2301      	movs	r3, #1
 800539e:	464a      	mov	r2, r9
 80053a0:	4631      	mov	r1, r6
 80053a2:	4628      	mov	r0, r5
 80053a4:	47b8      	blx	r7
 80053a6:	3001      	adds	r0, #1
 80053a8:	f43f af27 	beq.w	80051fa <_printf_float+0xc2>
 80053ac:	f108 0801 	add.w	r8, r8, #1
 80053b0:	e7e6      	b.n	8005380 <_printf_float+0x248>
 80053b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dc39      	bgt.n	800542c <_printf_float+0x2f4>
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <_printf_float+0x2f0>)
 80053ba:	2301      	movs	r3, #1
 80053bc:	4631      	mov	r1, r6
 80053be:	4628      	mov	r0, r5
 80053c0:	47b8      	blx	r7
 80053c2:	3001      	adds	r0, #1
 80053c4:	f43f af19 	beq.w	80051fa <_printf_float+0xc2>
 80053c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053cc:	4313      	orrs	r3, r2
 80053ce:	d102      	bne.n	80053d6 <_printf_float+0x29e>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	07d9      	lsls	r1, r3, #31
 80053d4:	d5d8      	bpl.n	8005388 <_printf_float+0x250>
 80053d6:	ee18 3a10 	vmov	r3, s16
 80053da:	4652      	mov	r2, sl
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f af09 	beq.w	80051fa <_printf_float+0xc2>
 80053e8:	f04f 0900 	mov.w	r9, #0
 80053ec:	f104 0a1a 	add.w	sl, r4, #26
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	425b      	negs	r3, r3
 80053f4:	454b      	cmp	r3, r9
 80053f6:	dc01      	bgt.n	80053fc <_printf_float+0x2c4>
 80053f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053fa:	e792      	b.n	8005322 <_printf_float+0x1ea>
 80053fc:	2301      	movs	r3, #1
 80053fe:	4652      	mov	r2, sl
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f aef7 	beq.w	80051fa <_printf_float+0xc2>
 800540c:	f109 0901 	add.w	r9, r9, #1
 8005410:	e7ee      	b.n	80053f0 <_printf_float+0x2b8>
 8005412:	bf00      	nop
 8005414:	7fefffff 	.word	0x7fefffff
 8005418:	08009674 	.word	0x08009674
 800541c:	08009678 	.word	0x08009678
 8005420:	08009680 	.word	0x08009680
 8005424:	0800967c 	.word	0x0800967c
 8005428:	08009684 	.word	0x08009684
 800542c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005430:	429a      	cmp	r2, r3
 8005432:	bfa8      	it	ge
 8005434:	461a      	movge	r2, r3
 8005436:	2a00      	cmp	r2, #0
 8005438:	4691      	mov	r9, r2
 800543a:	dc37      	bgt.n	80054ac <_printf_float+0x374>
 800543c:	f04f 0b00 	mov.w	fp, #0
 8005440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005444:	f104 021a 	add.w	r2, r4, #26
 8005448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800544a:	9305      	str	r3, [sp, #20]
 800544c:	eba3 0309 	sub.w	r3, r3, r9
 8005450:	455b      	cmp	r3, fp
 8005452:	dc33      	bgt.n	80054bc <_printf_float+0x384>
 8005454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005458:	429a      	cmp	r2, r3
 800545a:	db3b      	blt.n	80054d4 <_printf_float+0x39c>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07da      	lsls	r2, r3, #31
 8005460:	d438      	bmi.n	80054d4 <_printf_float+0x39c>
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	9a05      	ldr	r2, [sp, #20]
 8005466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005468:	1a9a      	subs	r2, r3, r2
 800546a:	eba3 0901 	sub.w	r9, r3, r1
 800546e:	4591      	cmp	r9, r2
 8005470:	bfa8      	it	ge
 8005472:	4691      	movge	r9, r2
 8005474:	f1b9 0f00 	cmp.w	r9, #0
 8005478:	dc35      	bgt.n	80054e6 <_printf_float+0x3ae>
 800547a:	f04f 0800 	mov.w	r8, #0
 800547e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005482:	f104 0a1a 	add.w	sl, r4, #26
 8005486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800548a:	1a9b      	subs	r3, r3, r2
 800548c:	eba3 0309 	sub.w	r3, r3, r9
 8005490:	4543      	cmp	r3, r8
 8005492:	f77f af79 	ble.w	8005388 <_printf_float+0x250>
 8005496:	2301      	movs	r3, #1
 8005498:	4652      	mov	r2, sl
 800549a:	4631      	mov	r1, r6
 800549c:	4628      	mov	r0, r5
 800549e:	47b8      	blx	r7
 80054a0:	3001      	adds	r0, #1
 80054a2:	f43f aeaa 	beq.w	80051fa <_printf_float+0xc2>
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	e7ec      	b.n	8005486 <_printf_float+0x34e>
 80054ac:	4613      	mov	r3, r2
 80054ae:	4631      	mov	r1, r6
 80054b0:	4642      	mov	r2, r8
 80054b2:	4628      	mov	r0, r5
 80054b4:	47b8      	blx	r7
 80054b6:	3001      	adds	r0, #1
 80054b8:	d1c0      	bne.n	800543c <_printf_float+0x304>
 80054ba:	e69e      	b.n	80051fa <_printf_float+0xc2>
 80054bc:	2301      	movs	r3, #1
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	9205      	str	r2, [sp, #20]
 80054c4:	47b8      	blx	r7
 80054c6:	3001      	adds	r0, #1
 80054c8:	f43f ae97 	beq.w	80051fa <_printf_float+0xc2>
 80054cc:	9a05      	ldr	r2, [sp, #20]
 80054ce:	f10b 0b01 	add.w	fp, fp, #1
 80054d2:	e7b9      	b.n	8005448 <_printf_float+0x310>
 80054d4:	ee18 3a10 	vmov	r3, s16
 80054d8:	4652      	mov	r2, sl
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	d1be      	bne.n	8005462 <_printf_float+0x32a>
 80054e4:	e689      	b.n	80051fa <_printf_float+0xc2>
 80054e6:	9a05      	ldr	r2, [sp, #20]
 80054e8:	464b      	mov	r3, r9
 80054ea:	4442      	add	r2, r8
 80054ec:	4631      	mov	r1, r6
 80054ee:	4628      	mov	r0, r5
 80054f0:	47b8      	blx	r7
 80054f2:	3001      	adds	r0, #1
 80054f4:	d1c1      	bne.n	800547a <_printf_float+0x342>
 80054f6:	e680      	b.n	80051fa <_printf_float+0xc2>
 80054f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054fa:	2a01      	cmp	r2, #1
 80054fc:	dc01      	bgt.n	8005502 <_printf_float+0x3ca>
 80054fe:	07db      	lsls	r3, r3, #31
 8005500:	d538      	bpl.n	8005574 <_printf_float+0x43c>
 8005502:	2301      	movs	r3, #1
 8005504:	4642      	mov	r2, r8
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	f43f ae74 	beq.w	80051fa <_printf_float+0xc2>
 8005512:	ee18 3a10 	vmov	r3, s16
 8005516:	4652      	mov	r2, sl
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f ae6b 	beq.w	80051fa <_printf_float+0xc2>
 8005524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005528:	2200      	movs	r2, #0
 800552a:	2300      	movs	r3, #0
 800552c:	f7fb fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005530:	b9d8      	cbnz	r0, 800556a <_printf_float+0x432>
 8005532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005534:	f108 0201 	add.w	r2, r8, #1
 8005538:	3b01      	subs	r3, #1
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	d10e      	bne.n	8005562 <_printf_float+0x42a>
 8005544:	e659      	b.n	80051fa <_printf_float+0xc2>
 8005546:	2301      	movs	r3, #1
 8005548:	4652      	mov	r2, sl
 800554a:	4631      	mov	r1, r6
 800554c:	4628      	mov	r0, r5
 800554e:	47b8      	blx	r7
 8005550:	3001      	adds	r0, #1
 8005552:	f43f ae52 	beq.w	80051fa <_printf_float+0xc2>
 8005556:	f108 0801 	add.w	r8, r8, #1
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	3b01      	subs	r3, #1
 800555e:	4543      	cmp	r3, r8
 8005560:	dcf1      	bgt.n	8005546 <_printf_float+0x40e>
 8005562:	464b      	mov	r3, r9
 8005564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005568:	e6dc      	b.n	8005324 <_printf_float+0x1ec>
 800556a:	f04f 0800 	mov.w	r8, #0
 800556e:	f104 0a1a 	add.w	sl, r4, #26
 8005572:	e7f2      	b.n	800555a <_printf_float+0x422>
 8005574:	2301      	movs	r3, #1
 8005576:	4642      	mov	r2, r8
 8005578:	e7df      	b.n	800553a <_printf_float+0x402>
 800557a:	2301      	movs	r3, #1
 800557c:	464a      	mov	r2, r9
 800557e:	4631      	mov	r1, r6
 8005580:	4628      	mov	r0, r5
 8005582:	47b8      	blx	r7
 8005584:	3001      	adds	r0, #1
 8005586:	f43f ae38 	beq.w	80051fa <_printf_float+0xc2>
 800558a:	f108 0801 	add.w	r8, r8, #1
 800558e:	68e3      	ldr	r3, [r4, #12]
 8005590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005592:	1a5b      	subs	r3, r3, r1
 8005594:	4543      	cmp	r3, r8
 8005596:	dcf0      	bgt.n	800557a <_printf_float+0x442>
 8005598:	e6fa      	b.n	8005390 <_printf_float+0x258>
 800559a:	f04f 0800 	mov.w	r8, #0
 800559e:	f104 0919 	add.w	r9, r4, #25
 80055a2:	e7f4      	b.n	800558e <_printf_float+0x456>

080055a4 <_printf_common>:
 80055a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a8:	4616      	mov	r6, r2
 80055aa:	4699      	mov	r9, r3
 80055ac:	688a      	ldr	r2, [r1, #8]
 80055ae:	690b      	ldr	r3, [r1, #16]
 80055b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	bfb8      	it	lt
 80055b8:	4613      	movlt	r3, r2
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055c0:	4607      	mov	r7, r0
 80055c2:	460c      	mov	r4, r1
 80055c4:	b10a      	cbz	r2, 80055ca <_printf_common+0x26>
 80055c6:	3301      	adds	r3, #1
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	6823      	ldr	r3, [r4, #0]
 80055cc:	0699      	lsls	r1, r3, #26
 80055ce:	bf42      	ittt	mi
 80055d0:	6833      	ldrmi	r3, [r6, #0]
 80055d2:	3302      	addmi	r3, #2
 80055d4:	6033      	strmi	r3, [r6, #0]
 80055d6:	6825      	ldr	r5, [r4, #0]
 80055d8:	f015 0506 	ands.w	r5, r5, #6
 80055dc:	d106      	bne.n	80055ec <_printf_common+0x48>
 80055de:	f104 0a19 	add.w	sl, r4, #25
 80055e2:	68e3      	ldr	r3, [r4, #12]
 80055e4:	6832      	ldr	r2, [r6, #0]
 80055e6:	1a9b      	subs	r3, r3, r2
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	dc26      	bgt.n	800563a <_printf_common+0x96>
 80055ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055f0:	1e13      	subs	r3, r2, #0
 80055f2:	6822      	ldr	r2, [r4, #0]
 80055f4:	bf18      	it	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	0692      	lsls	r2, r2, #26
 80055fa:	d42b      	bmi.n	8005654 <_printf_common+0xb0>
 80055fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d01e      	beq.n	8005648 <_printf_common+0xa4>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	68e5      	ldr	r5, [r4, #12]
 800560e:	6832      	ldr	r2, [r6, #0]
 8005610:	f003 0306 	and.w	r3, r3, #6
 8005614:	2b04      	cmp	r3, #4
 8005616:	bf08      	it	eq
 8005618:	1aad      	subeq	r5, r5, r2
 800561a:	68a3      	ldr	r3, [r4, #8]
 800561c:	6922      	ldr	r2, [r4, #16]
 800561e:	bf0c      	ite	eq
 8005620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005624:	2500      	movne	r5, #0
 8005626:	4293      	cmp	r3, r2
 8005628:	bfc4      	itt	gt
 800562a:	1a9b      	subgt	r3, r3, r2
 800562c:	18ed      	addgt	r5, r5, r3
 800562e:	2600      	movs	r6, #0
 8005630:	341a      	adds	r4, #26
 8005632:	42b5      	cmp	r5, r6
 8005634:	d11a      	bne.n	800566c <_printf_common+0xc8>
 8005636:	2000      	movs	r0, #0
 8005638:	e008      	b.n	800564c <_printf_common+0xa8>
 800563a:	2301      	movs	r3, #1
 800563c:	4652      	mov	r2, sl
 800563e:	4649      	mov	r1, r9
 8005640:	4638      	mov	r0, r7
 8005642:	47c0      	blx	r8
 8005644:	3001      	adds	r0, #1
 8005646:	d103      	bne.n	8005650 <_printf_common+0xac>
 8005648:	f04f 30ff 	mov.w	r0, #4294967295
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005650:	3501      	adds	r5, #1
 8005652:	e7c6      	b.n	80055e2 <_printf_common+0x3e>
 8005654:	18e1      	adds	r1, r4, r3
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	2030      	movs	r0, #48	; 0x30
 800565a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565e:	4422      	add	r2, r4
 8005660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005668:	3302      	adds	r3, #2
 800566a:	e7c7      	b.n	80055fc <_printf_common+0x58>
 800566c:	2301      	movs	r3, #1
 800566e:	4622      	mov	r2, r4
 8005670:	4649      	mov	r1, r9
 8005672:	4638      	mov	r0, r7
 8005674:	47c0      	blx	r8
 8005676:	3001      	adds	r0, #1
 8005678:	d0e6      	beq.n	8005648 <_printf_common+0xa4>
 800567a:	3601      	adds	r6, #1
 800567c:	e7d9      	b.n	8005632 <_printf_common+0x8e>
	...

08005680 <_printf_i>:
 8005680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005684:	7e0f      	ldrb	r7, [r1, #24]
 8005686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005688:	2f78      	cmp	r7, #120	; 0x78
 800568a:	4691      	mov	r9, r2
 800568c:	4680      	mov	r8, r0
 800568e:	460c      	mov	r4, r1
 8005690:	469a      	mov	sl, r3
 8005692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005696:	d807      	bhi.n	80056a8 <_printf_i+0x28>
 8005698:	2f62      	cmp	r7, #98	; 0x62
 800569a:	d80a      	bhi.n	80056b2 <_printf_i+0x32>
 800569c:	2f00      	cmp	r7, #0
 800569e:	f000 80d8 	beq.w	8005852 <_printf_i+0x1d2>
 80056a2:	2f58      	cmp	r7, #88	; 0x58
 80056a4:	f000 80a3 	beq.w	80057ee <_printf_i+0x16e>
 80056a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056b0:	e03a      	b.n	8005728 <_printf_i+0xa8>
 80056b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056b6:	2b15      	cmp	r3, #21
 80056b8:	d8f6      	bhi.n	80056a8 <_printf_i+0x28>
 80056ba:	a101      	add	r1, pc, #4	; (adr r1, 80056c0 <_printf_i+0x40>)
 80056bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c0:	08005719 	.word	0x08005719
 80056c4:	0800572d 	.word	0x0800572d
 80056c8:	080056a9 	.word	0x080056a9
 80056cc:	080056a9 	.word	0x080056a9
 80056d0:	080056a9 	.word	0x080056a9
 80056d4:	080056a9 	.word	0x080056a9
 80056d8:	0800572d 	.word	0x0800572d
 80056dc:	080056a9 	.word	0x080056a9
 80056e0:	080056a9 	.word	0x080056a9
 80056e4:	080056a9 	.word	0x080056a9
 80056e8:	080056a9 	.word	0x080056a9
 80056ec:	08005839 	.word	0x08005839
 80056f0:	0800575d 	.word	0x0800575d
 80056f4:	0800581b 	.word	0x0800581b
 80056f8:	080056a9 	.word	0x080056a9
 80056fc:	080056a9 	.word	0x080056a9
 8005700:	0800585b 	.word	0x0800585b
 8005704:	080056a9 	.word	0x080056a9
 8005708:	0800575d 	.word	0x0800575d
 800570c:	080056a9 	.word	0x080056a9
 8005710:	080056a9 	.word	0x080056a9
 8005714:	08005823 	.word	0x08005823
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	1d1a      	adds	r2, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	602a      	str	r2, [r5, #0]
 8005720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005728:	2301      	movs	r3, #1
 800572a:	e0a3      	b.n	8005874 <_printf_i+0x1f4>
 800572c:	6820      	ldr	r0, [r4, #0]
 800572e:	6829      	ldr	r1, [r5, #0]
 8005730:	0606      	lsls	r6, r0, #24
 8005732:	f101 0304 	add.w	r3, r1, #4
 8005736:	d50a      	bpl.n	800574e <_printf_i+0xce>
 8005738:	680e      	ldr	r6, [r1, #0]
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	2e00      	cmp	r6, #0
 800573e:	da03      	bge.n	8005748 <_printf_i+0xc8>
 8005740:	232d      	movs	r3, #45	; 0x2d
 8005742:	4276      	negs	r6, r6
 8005744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005748:	485e      	ldr	r0, [pc, #376]	; (80058c4 <_printf_i+0x244>)
 800574a:	230a      	movs	r3, #10
 800574c:	e019      	b.n	8005782 <_printf_i+0x102>
 800574e:	680e      	ldr	r6, [r1, #0]
 8005750:	602b      	str	r3, [r5, #0]
 8005752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005756:	bf18      	it	ne
 8005758:	b236      	sxthne	r6, r6
 800575a:	e7ef      	b.n	800573c <_printf_i+0xbc>
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1d19      	adds	r1, r3, #4
 8005762:	6029      	str	r1, [r5, #0]
 8005764:	0601      	lsls	r1, r0, #24
 8005766:	d501      	bpl.n	800576c <_printf_i+0xec>
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	e002      	b.n	8005772 <_printf_i+0xf2>
 800576c:	0646      	lsls	r6, r0, #25
 800576e:	d5fb      	bpl.n	8005768 <_printf_i+0xe8>
 8005770:	881e      	ldrh	r6, [r3, #0]
 8005772:	4854      	ldr	r0, [pc, #336]	; (80058c4 <_printf_i+0x244>)
 8005774:	2f6f      	cmp	r7, #111	; 0x6f
 8005776:	bf0c      	ite	eq
 8005778:	2308      	moveq	r3, #8
 800577a:	230a      	movne	r3, #10
 800577c:	2100      	movs	r1, #0
 800577e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005782:	6865      	ldr	r5, [r4, #4]
 8005784:	60a5      	str	r5, [r4, #8]
 8005786:	2d00      	cmp	r5, #0
 8005788:	bfa2      	ittt	ge
 800578a:	6821      	ldrge	r1, [r4, #0]
 800578c:	f021 0104 	bicge.w	r1, r1, #4
 8005790:	6021      	strge	r1, [r4, #0]
 8005792:	b90e      	cbnz	r6, 8005798 <_printf_i+0x118>
 8005794:	2d00      	cmp	r5, #0
 8005796:	d04d      	beq.n	8005834 <_printf_i+0x1b4>
 8005798:	4615      	mov	r5, r2
 800579a:	fbb6 f1f3 	udiv	r1, r6, r3
 800579e:	fb03 6711 	mls	r7, r3, r1, r6
 80057a2:	5dc7      	ldrb	r7, [r0, r7]
 80057a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057a8:	4637      	mov	r7, r6
 80057aa:	42bb      	cmp	r3, r7
 80057ac:	460e      	mov	r6, r1
 80057ae:	d9f4      	bls.n	800579a <_printf_i+0x11a>
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d10b      	bne.n	80057cc <_printf_i+0x14c>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	07de      	lsls	r6, r3, #31
 80057b8:	d508      	bpl.n	80057cc <_printf_i+0x14c>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	6861      	ldr	r1, [r4, #4]
 80057be:	4299      	cmp	r1, r3
 80057c0:	bfde      	ittt	le
 80057c2:	2330      	movle	r3, #48	; 0x30
 80057c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80057c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80057cc:	1b52      	subs	r2, r2, r5
 80057ce:	6122      	str	r2, [r4, #16]
 80057d0:	f8cd a000 	str.w	sl, [sp]
 80057d4:	464b      	mov	r3, r9
 80057d6:	aa03      	add	r2, sp, #12
 80057d8:	4621      	mov	r1, r4
 80057da:	4640      	mov	r0, r8
 80057dc:	f7ff fee2 	bl	80055a4 <_printf_common>
 80057e0:	3001      	adds	r0, #1
 80057e2:	d14c      	bne.n	800587e <_printf_i+0x1fe>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	b004      	add	sp, #16
 80057ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ee:	4835      	ldr	r0, [pc, #212]	; (80058c4 <_printf_i+0x244>)
 80057f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057f4:	6829      	ldr	r1, [r5, #0]
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80057fc:	6029      	str	r1, [r5, #0]
 80057fe:	061d      	lsls	r5, r3, #24
 8005800:	d514      	bpl.n	800582c <_printf_i+0x1ac>
 8005802:	07df      	lsls	r7, r3, #31
 8005804:	bf44      	itt	mi
 8005806:	f043 0320 	orrmi.w	r3, r3, #32
 800580a:	6023      	strmi	r3, [r4, #0]
 800580c:	b91e      	cbnz	r6, 8005816 <_printf_i+0x196>
 800580e:	6823      	ldr	r3, [r4, #0]
 8005810:	f023 0320 	bic.w	r3, r3, #32
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	2310      	movs	r3, #16
 8005818:	e7b0      	b.n	800577c <_printf_i+0xfc>
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	f043 0320 	orr.w	r3, r3, #32
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	2378      	movs	r3, #120	; 0x78
 8005824:	4828      	ldr	r0, [pc, #160]	; (80058c8 <_printf_i+0x248>)
 8005826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800582a:	e7e3      	b.n	80057f4 <_printf_i+0x174>
 800582c:	0659      	lsls	r1, r3, #25
 800582e:	bf48      	it	mi
 8005830:	b2b6      	uxthmi	r6, r6
 8005832:	e7e6      	b.n	8005802 <_printf_i+0x182>
 8005834:	4615      	mov	r5, r2
 8005836:	e7bb      	b.n	80057b0 <_printf_i+0x130>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	6826      	ldr	r6, [r4, #0]
 800583c:	6961      	ldr	r1, [r4, #20]
 800583e:	1d18      	adds	r0, r3, #4
 8005840:	6028      	str	r0, [r5, #0]
 8005842:	0635      	lsls	r5, r6, #24
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	d501      	bpl.n	800584c <_printf_i+0x1cc>
 8005848:	6019      	str	r1, [r3, #0]
 800584a:	e002      	b.n	8005852 <_printf_i+0x1d2>
 800584c:	0670      	lsls	r0, r6, #25
 800584e:	d5fb      	bpl.n	8005848 <_printf_i+0x1c8>
 8005850:	8019      	strh	r1, [r3, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	6123      	str	r3, [r4, #16]
 8005856:	4615      	mov	r5, r2
 8005858:	e7ba      	b.n	80057d0 <_printf_i+0x150>
 800585a:	682b      	ldr	r3, [r5, #0]
 800585c:	1d1a      	adds	r2, r3, #4
 800585e:	602a      	str	r2, [r5, #0]
 8005860:	681d      	ldr	r5, [r3, #0]
 8005862:	6862      	ldr	r2, [r4, #4]
 8005864:	2100      	movs	r1, #0
 8005866:	4628      	mov	r0, r5
 8005868:	f7fa fcc2 	bl	80001f0 <memchr>
 800586c:	b108      	cbz	r0, 8005872 <_printf_i+0x1f2>
 800586e:	1b40      	subs	r0, r0, r5
 8005870:	6060      	str	r0, [r4, #4]
 8005872:	6863      	ldr	r3, [r4, #4]
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	2300      	movs	r3, #0
 8005878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800587c:	e7a8      	b.n	80057d0 <_printf_i+0x150>
 800587e:	6923      	ldr	r3, [r4, #16]
 8005880:	462a      	mov	r2, r5
 8005882:	4649      	mov	r1, r9
 8005884:	4640      	mov	r0, r8
 8005886:	47d0      	blx	sl
 8005888:	3001      	adds	r0, #1
 800588a:	d0ab      	beq.n	80057e4 <_printf_i+0x164>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	079b      	lsls	r3, r3, #30
 8005890:	d413      	bmi.n	80058ba <_printf_i+0x23a>
 8005892:	68e0      	ldr	r0, [r4, #12]
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	4298      	cmp	r0, r3
 8005898:	bfb8      	it	lt
 800589a:	4618      	movlt	r0, r3
 800589c:	e7a4      	b.n	80057e8 <_printf_i+0x168>
 800589e:	2301      	movs	r3, #1
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d09b      	beq.n	80057e4 <_printf_i+0x164>
 80058ac:	3501      	adds	r5, #1
 80058ae:	68e3      	ldr	r3, [r4, #12]
 80058b0:	9903      	ldr	r1, [sp, #12]
 80058b2:	1a5b      	subs	r3, r3, r1
 80058b4:	42ab      	cmp	r3, r5
 80058b6:	dcf2      	bgt.n	800589e <_printf_i+0x21e>
 80058b8:	e7eb      	b.n	8005892 <_printf_i+0x212>
 80058ba:	2500      	movs	r5, #0
 80058bc:	f104 0619 	add.w	r6, r4, #25
 80058c0:	e7f5      	b.n	80058ae <_printf_i+0x22e>
 80058c2:	bf00      	nop
 80058c4:	08009686 	.word	0x08009686
 80058c8:	08009697 	.word	0x08009697

080058cc <siprintf>:
 80058cc:	b40e      	push	{r1, r2, r3}
 80058ce:	b500      	push	{lr}
 80058d0:	b09c      	sub	sp, #112	; 0x70
 80058d2:	ab1d      	add	r3, sp, #116	; 0x74
 80058d4:	9002      	str	r0, [sp, #8]
 80058d6:	9006      	str	r0, [sp, #24]
 80058d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058dc:	4809      	ldr	r0, [pc, #36]	; (8005904 <siprintf+0x38>)
 80058de:	9107      	str	r1, [sp, #28]
 80058e0:	9104      	str	r1, [sp, #16]
 80058e2:	4909      	ldr	r1, [pc, #36]	; (8005908 <siprintf+0x3c>)
 80058e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e8:	9105      	str	r1, [sp, #20]
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	a902      	add	r1, sp, #8
 80058f0:	f001 fb78 	bl	8006fe4 <_svfiprintf_r>
 80058f4:	9b02      	ldr	r3, [sp, #8]
 80058f6:	2200      	movs	r2, #0
 80058f8:	701a      	strb	r2, [r3, #0]
 80058fa:	b01c      	add	sp, #112	; 0x70
 80058fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005900:	b003      	add	sp, #12
 8005902:	4770      	bx	lr
 8005904:	20000398 	.word	0x20000398
 8005908:	ffff0208 	.word	0xffff0208

0800590c <quorem>:
 800590c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005910:	6903      	ldr	r3, [r0, #16]
 8005912:	690c      	ldr	r4, [r1, #16]
 8005914:	42a3      	cmp	r3, r4
 8005916:	4607      	mov	r7, r0
 8005918:	f2c0 8081 	blt.w	8005a1e <quorem+0x112>
 800591c:	3c01      	subs	r4, #1
 800591e:	f101 0814 	add.w	r8, r1, #20
 8005922:	f100 0514 	add.w	r5, r0, #20
 8005926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800592a:	9301      	str	r3, [sp, #4]
 800592c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005934:	3301      	adds	r3, #1
 8005936:	429a      	cmp	r2, r3
 8005938:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800593c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005940:	fbb2 f6f3 	udiv	r6, r2, r3
 8005944:	d331      	bcc.n	80059aa <quorem+0x9e>
 8005946:	f04f 0e00 	mov.w	lr, #0
 800594a:	4640      	mov	r0, r8
 800594c:	46ac      	mov	ip, r5
 800594e:	46f2      	mov	sl, lr
 8005950:	f850 2b04 	ldr.w	r2, [r0], #4
 8005954:	b293      	uxth	r3, r2
 8005956:	fb06 e303 	mla	r3, r6, r3, lr
 800595a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800595e:	b29b      	uxth	r3, r3
 8005960:	ebaa 0303 	sub.w	r3, sl, r3
 8005964:	f8dc a000 	ldr.w	sl, [ip]
 8005968:	0c12      	lsrs	r2, r2, #16
 800596a:	fa13 f38a 	uxtah	r3, r3, sl
 800596e:	fb06 e202 	mla	r2, r6, r2, lr
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	9b00      	ldr	r3, [sp, #0]
 8005976:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800597a:	b292      	uxth	r2, r2
 800597c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005984:	f8bd 3000 	ldrh.w	r3, [sp]
 8005988:	4581      	cmp	r9, r0
 800598a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800598e:	f84c 3b04 	str.w	r3, [ip], #4
 8005992:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005996:	d2db      	bcs.n	8005950 <quorem+0x44>
 8005998:	f855 300b 	ldr.w	r3, [r5, fp]
 800599c:	b92b      	cbnz	r3, 80059aa <quorem+0x9e>
 800599e:	9b01      	ldr	r3, [sp, #4]
 80059a0:	3b04      	subs	r3, #4
 80059a2:	429d      	cmp	r5, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	d32e      	bcc.n	8005a06 <quorem+0xfa>
 80059a8:	613c      	str	r4, [r7, #16]
 80059aa:	4638      	mov	r0, r7
 80059ac:	f001 f8c6 	bl	8006b3c <__mcmp>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	db24      	blt.n	80059fe <quorem+0xf2>
 80059b4:	3601      	adds	r6, #1
 80059b6:	4628      	mov	r0, r5
 80059b8:	f04f 0c00 	mov.w	ip, #0
 80059bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80059c0:	f8d0 e000 	ldr.w	lr, [r0]
 80059c4:	b293      	uxth	r3, r2
 80059c6:	ebac 0303 	sub.w	r3, ip, r3
 80059ca:	0c12      	lsrs	r2, r2, #16
 80059cc:	fa13 f38e 	uxtah	r3, r3, lr
 80059d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059de:	45c1      	cmp	r9, r8
 80059e0:	f840 3b04 	str.w	r3, [r0], #4
 80059e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059e8:	d2e8      	bcs.n	80059bc <quorem+0xb0>
 80059ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059f2:	b922      	cbnz	r2, 80059fe <quorem+0xf2>
 80059f4:	3b04      	subs	r3, #4
 80059f6:	429d      	cmp	r5, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	d30a      	bcc.n	8005a12 <quorem+0x106>
 80059fc:	613c      	str	r4, [r7, #16]
 80059fe:	4630      	mov	r0, r6
 8005a00:	b003      	add	sp, #12
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	3b04      	subs	r3, #4
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	d1cc      	bne.n	80059a8 <quorem+0x9c>
 8005a0e:	3c01      	subs	r4, #1
 8005a10:	e7c7      	b.n	80059a2 <quorem+0x96>
 8005a12:	6812      	ldr	r2, [r2, #0]
 8005a14:	3b04      	subs	r3, #4
 8005a16:	2a00      	cmp	r2, #0
 8005a18:	d1f0      	bne.n	80059fc <quorem+0xf0>
 8005a1a:	3c01      	subs	r4, #1
 8005a1c:	e7eb      	b.n	80059f6 <quorem+0xea>
 8005a1e:	2000      	movs	r0, #0
 8005a20:	e7ee      	b.n	8005a00 <quorem+0xf4>
 8005a22:	0000      	movs	r0, r0
 8005a24:	0000      	movs	r0, r0
	...

08005a28 <_dtoa_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	ed2d 8b04 	vpush	{d8-d9}
 8005a30:	ec57 6b10 	vmov	r6, r7, d0
 8005a34:	b093      	sub	sp, #76	; 0x4c
 8005a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a3c:	9106      	str	r1, [sp, #24]
 8005a3e:	ee10 aa10 	vmov	sl, s0
 8005a42:	4604      	mov	r4, r0
 8005a44:	9209      	str	r2, [sp, #36]	; 0x24
 8005a46:	930c      	str	r3, [sp, #48]	; 0x30
 8005a48:	46bb      	mov	fp, r7
 8005a4a:	b975      	cbnz	r5, 8005a6a <_dtoa_r+0x42>
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f000 fddd 	bl	800660c <malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6260      	str	r0, [r4, #36]	; 0x24
 8005a56:	b920      	cbnz	r0, 8005a62 <_dtoa_r+0x3a>
 8005a58:	4ba7      	ldr	r3, [pc, #668]	; (8005cf8 <_dtoa_r+0x2d0>)
 8005a5a:	21ea      	movs	r1, #234	; 0xea
 8005a5c:	48a7      	ldr	r0, [pc, #668]	; (8005cfc <_dtoa_r+0x2d4>)
 8005a5e:	f001 fbd1 	bl	8007204 <__assert_func>
 8005a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a66:	6005      	str	r5, [r0, #0]
 8005a68:	60c5      	str	r5, [r0, #12]
 8005a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	b151      	cbz	r1, 8005a86 <_dtoa_r+0x5e>
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	604a      	str	r2, [r1, #4]
 8005a74:	2301      	movs	r3, #1
 8005a76:	4093      	lsls	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 fe1c 	bl	80066b8 <_Bfree>
 8005a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	1e3b      	subs	r3, r7, #0
 8005a88:	bfaa      	itet	ge
 8005a8a:	2300      	movge	r3, #0
 8005a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005a90:	f8c8 3000 	strge.w	r3, [r8]
 8005a94:	4b9a      	ldr	r3, [pc, #616]	; (8005d00 <_dtoa_r+0x2d8>)
 8005a96:	bfbc      	itt	lt
 8005a98:	2201      	movlt	r2, #1
 8005a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8005a9e:	ea33 030b 	bics.w	r3, r3, fp
 8005aa2:	d11b      	bne.n	8005adc <_dtoa_r+0xb4>
 8005aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab0:	4333      	orrs	r3, r6
 8005ab2:	f000 8592 	beq.w	80065da <_dtoa_r+0xbb2>
 8005ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab8:	b963      	cbnz	r3, 8005ad4 <_dtoa_r+0xac>
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <_dtoa_r+0x2dc>)
 8005abc:	e022      	b.n	8005b04 <_dtoa_r+0xdc>
 8005abe:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <_dtoa_r+0x2e0>)
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	9801      	ldr	r0, [sp, #4]
 8005aca:	b013      	add	sp, #76	; 0x4c
 8005acc:	ecbd 8b04 	vpop	{d8-d9}
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	4b8b      	ldr	r3, [pc, #556]	; (8005d04 <_dtoa_r+0x2dc>)
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	e7f3      	b.n	8005ac4 <_dtoa_r+0x9c>
 8005adc:	2200      	movs	r2, #0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	f7fa fff8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae8:	ec4b ab19 	vmov	d9, sl, fp
 8005aec:	4680      	mov	r8, r0
 8005aee:	b158      	cbz	r0, 8005b08 <_dtoa_r+0xe0>
 8005af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af2:	2301      	movs	r3, #1
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 856b 	beq.w	80065d4 <_dtoa_r+0xbac>
 8005afe:	4883      	ldr	r0, [pc, #524]	; (8005d0c <_dtoa_r+0x2e4>)
 8005b00:	6018      	str	r0, [r3, #0]
 8005b02:	1e43      	subs	r3, r0, #1
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	e7df      	b.n	8005ac8 <_dtoa_r+0xa0>
 8005b08:	ec4b ab10 	vmov	d0, sl, fp
 8005b0c:	aa10      	add	r2, sp, #64	; 0x40
 8005b0e:	a911      	add	r1, sp, #68	; 0x44
 8005b10:	4620      	mov	r0, r4
 8005b12:	f001 f8b9 	bl	8006c88 <__d2b>
 8005b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b1a:	ee08 0a10 	vmov	s16, r0
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	f000 8084 	beq.w	8005c2c <_dtoa_r+0x204>
 8005b24:	ee19 3a90 	vmov	r3, s19
 8005b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b30:	4656      	mov	r6, sl
 8005b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b3e:	4b74      	ldr	r3, [pc, #464]	; (8005d10 <_dtoa_r+0x2e8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fba7 	bl	8000298 <__aeabi_dsub>
 8005b4a:	a365      	add	r3, pc, #404	; (adr r3, 8005ce0 <_dtoa_r+0x2b8>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fd5a 	bl	8000608 <__aeabi_dmul>
 8005b54:	a364      	add	r3, pc, #400	; (adr r3, 8005ce8 <_dtoa_r+0x2c0>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f7fa fb9f 	bl	800029c <__adddf3>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	4628      	mov	r0, r5
 8005b62:	460f      	mov	r7, r1
 8005b64:	f7fa fce6 	bl	8000534 <__aeabi_i2d>
 8005b68:	a361      	add	r3, pc, #388	; (adr r3, 8005cf0 <_dtoa_r+0x2c8>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fd4b 	bl	8000608 <__aeabi_dmul>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fb8f 	bl	800029c <__adddf3>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460f      	mov	r7, r1
 8005b82:	f7fa fff1 	bl	8000b68 <__aeabi_d2iz>
 8005b86:	2200      	movs	r2, #0
 8005b88:	9000      	str	r0, [sp, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4639      	mov	r1, r7
 8005b90:	f7fa ffac 	bl	8000aec <__aeabi_dcmplt>
 8005b94:	b150      	cbz	r0, 8005bac <_dtoa_r+0x184>
 8005b96:	9800      	ldr	r0, [sp, #0]
 8005b98:	f7fa fccc 	bl	8000534 <__aeabi_i2d>
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	f7fa ff9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ba4:	b910      	cbnz	r0, 8005bac <_dtoa_r+0x184>
 8005ba6:	9b00      	ldr	r3, [sp, #0]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	9b00      	ldr	r3, [sp, #0]
 8005bae:	2b16      	cmp	r3, #22
 8005bb0:	d85a      	bhi.n	8005c68 <_dtoa_r+0x240>
 8005bb2:	9a00      	ldr	r2, [sp, #0]
 8005bb4:	4b57      	ldr	r3, [pc, #348]	; (8005d14 <_dtoa_r+0x2ec>)
 8005bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	ec51 0b19 	vmov	r0, r1, d9
 8005bc2:	f7fa ff93 	bl	8000aec <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d050      	beq.n	8005c6c <_dtoa_r+0x244>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bd6:	1b5d      	subs	r5, r3, r5
 8005bd8:	1e6b      	subs	r3, r5, #1
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	bf45      	ittet	mi
 8005bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8005be2:	9304      	strmi	r3, [sp, #16]
 8005be4:	2300      	movpl	r3, #0
 8005be6:	2300      	movmi	r3, #0
 8005be8:	bf4c      	ite	mi
 8005bea:	9305      	strmi	r3, [sp, #20]
 8005bec:	9304      	strpl	r3, [sp, #16]
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db3d      	blt.n	8005c70 <_dtoa_r+0x248>
 8005bf4:	9b05      	ldr	r3, [sp, #20]
 8005bf6:	9a00      	ldr	r2, [sp, #0]
 8005bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8005bfa:	4413      	add	r3, r2
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	f200 8089 	bhi.w	8005d1c <_dtoa_r+0x2f4>
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	bfc4      	itt	gt
 8005c0e:	3b04      	subgt	r3, #4
 8005c10:	9306      	strgt	r3, [sp, #24]
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	f1a3 0302 	sub.w	r3, r3, #2
 8005c18:	bfcc      	ite	gt
 8005c1a:	2500      	movgt	r5, #0
 8005c1c:	2501      	movle	r5, #1
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	f200 8087 	bhi.w	8005d32 <_dtoa_r+0x30a>
 8005c24:	e8df f003 	tbb	[pc, r3]
 8005c28:	59383a2d 	.word	0x59383a2d
 8005c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c30:	441d      	add	r5, r3
 8005c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	bfc1      	itttt	gt
 8005c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c4a:	bfda      	itte	le
 8005c4c:	f1c3 0320 	rsble	r3, r3, #32
 8005c50:	fa06 f003 	lslle.w	r0, r6, r3
 8005c54:	4318      	orrgt	r0, r3
 8005c56:	f7fa fc5d 	bl	8000514 <__aeabi_ui2d>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c62:	3d01      	subs	r5, #1
 8005c64:	930e      	str	r3, [sp, #56]	; 0x38
 8005c66:	e76a      	b.n	8005b3e <_dtoa_r+0x116>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e7b2      	b.n	8005bd2 <_dtoa_r+0x1aa>
 8005c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c6e:	e7b1      	b.n	8005bd4 <_dtoa_r+0x1ac>
 8005c70:	9b04      	ldr	r3, [sp, #16]
 8005c72:	9a00      	ldr	r2, [sp, #0]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	4253      	negs	r3, r2
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c80:	e7bf      	b.n	8005c02 <_dtoa_r+0x1da>
 8005c82:	2300      	movs	r3, #0
 8005c84:	9308      	str	r3, [sp, #32]
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc55      	bgt.n	8005d38 <_dtoa_r+0x310>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c92:	461a      	mov	r2, r3
 8005c94:	9209      	str	r2, [sp, #36]	; 0x24
 8005c96:	e00c      	b.n	8005cb2 <_dtoa_r+0x28a>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7f3      	b.n	8005c84 <_dtoa_r+0x25c>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ca0:	9308      	str	r3, [sp, #32]
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	bfb8      	it	lt
 8005cb0:	2301      	movlt	r3, #1
 8005cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	6042      	str	r2, [r0, #4]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	f102 0614 	add.w	r6, r2, #20
 8005cbe:	429e      	cmp	r6, r3
 8005cc0:	6841      	ldr	r1, [r0, #4]
 8005cc2:	d93d      	bls.n	8005d40 <_dtoa_r+0x318>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f000 fcb7 	bl	8006638 <_Balloc>
 8005cca:	9001      	str	r0, [sp, #4]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d13b      	bne.n	8005d48 <_dtoa_r+0x320>
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <_dtoa_r+0x2f0>)
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cd8:	e6c0      	b.n	8005a5c <_dtoa_r+0x34>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7df      	b.n	8005c9e <_dtoa_r+0x276>
 8005cde:	bf00      	nop
 8005ce0:	636f4361 	.word	0x636f4361
 8005ce4:	3fd287a7 	.word	0x3fd287a7
 8005ce8:	8b60c8b3 	.word	0x8b60c8b3
 8005cec:	3fc68a28 	.word	0x3fc68a28
 8005cf0:	509f79fb 	.word	0x509f79fb
 8005cf4:	3fd34413 	.word	0x3fd34413
 8005cf8:	080096b5 	.word	0x080096b5
 8005cfc:	080096cc 	.word	0x080096cc
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	080096b1 	.word	0x080096b1
 8005d08:	080096a8 	.word	0x080096a8
 8005d0c:	08009685 	.word	0x08009685
 8005d10:	3ff80000 	.word	0x3ff80000
 8005d14:	080097c0 	.word	0x080097c0
 8005d18:	08009727 	.word	0x08009727
 8005d1c:	2501      	movs	r5, #1
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9306      	str	r3, [sp, #24]
 8005d22:	9508      	str	r5, [sp, #32]
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295
 8005d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2312      	movs	r3, #18
 8005d30:	e7b0      	b.n	8005c94 <_dtoa_r+0x26c>
 8005d32:	2301      	movs	r3, #1
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	e7f5      	b.n	8005d24 <_dtoa_r+0x2fc>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d3e:	e7b8      	b.n	8005cb2 <_dtoa_r+0x28a>
 8005d40:	3101      	adds	r1, #1
 8005d42:	6041      	str	r1, [r0, #4]
 8005d44:	0052      	lsls	r2, r2, #1
 8005d46:	e7b8      	b.n	8005cba <_dtoa_r+0x292>
 8005d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4a:	9a01      	ldr	r2, [sp, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	2b0e      	cmp	r3, #14
 8005d52:	f200 809d 	bhi.w	8005e90 <_dtoa_r+0x468>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f000 809a 	beq.w	8005e90 <_dtoa_r+0x468>
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dd32      	ble.n	8005dc8 <_dtoa_r+0x3a0>
 8005d62:	4ab7      	ldr	r2, [pc, #732]	; (8006040 <_dtoa_r+0x618>)
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d70:	9b00      	ldr	r3, [sp, #0]
 8005d72:	05d8      	lsls	r0, r3, #23
 8005d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d78:	d516      	bpl.n	8005da8 <_dtoa_r+0x380>
 8005d7a:	4bb2      	ldr	r3, [pc, #712]	; (8006044 <_dtoa_r+0x61c>)
 8005d7c:	ec51 0b19 	vmov	r0, r1, d9
 8005d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d84:	f7fa fd6a 	bl	800085c <__aeabi_ddiv>
 8005d88:	f007 070f 	and.w	r7, r7, #15
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	468b      	mov	fp, r1
 8005d90:	2503      	movs	r5, #3
 8005d92:	4eac      	ldr	r6, [pc, #688]	; (8006044 <_dtoa_r+0x61c>)
 8005d94:	b957      	cbnz	r7, 8005dac <_dtoa_r+0x384>
 8005d96:	4642      	mov	r2, r8
 8005d98:	464b      	mov	r3, r9
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	f7fa fd5d 	bl	800085c <__aeabi_ddiv>
 8005da2:	4682      	mov	sl, r0
 8005da4:	468b      	mov	fp, r1
 8005da6:	e028      	b.n	8005dfa <_dtoa_r+0x3d2>
 8005da8:	2502      	movs	r5, #2
 8005daa:	e7f2      	b.n	8005d92 <_dtoa_r+0x36a>
 8005dac:	07f9      	lsls	r1, r7, #31
 8005dae:	d508      	bpl.n	8005dc2 <_dtoa_r+0x39a>
 8005db0:	4640      	mov	r0, r8
 8005db2:	4649      	mov	r1, r9
 8005db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005db8:	f7fa fc26 	bl	8000608 <__aeabi_dmul>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	107f      	asrs	r7, r7, #1
 8005dc4:	3608      	adds	r6, #8
 8005dc6:	e7e5      	b.n	8005d94 <_dtoa_r+0x36c>
 8005dc8:	f000 809b 	beq.w	8005f02 <_dtoa_r+0x4da>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	4f9d      	ldr	r7, [pc, #628]	; (8006044 <_dtoa_r+0x61c>)
 8005dd0:	425e      	negs	r6, r3
 8005dd2:	4b9b      	ldr	r3, [pc, #620]	; (8006040 <_dtoa_r+0x618>)
 8005dd4:	f006 020f 	and.w	r2, r6, #15
 8005dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	ec51 0b19 	vmov	r0, r1, d9
 8005de4:	f7fa fc10 	bl	8000608 <__aeabi_dmul>
 8005de8:	1136      	asrs	r6, r6, #4
 8005dea:	4682      	mov	sl, r0
 8005dec:	468b      	mov	fp, r1
 8005dee:	2300      	movs	r3, #0
 8005df0:	2502      	movs	r5, #2
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	d17a      	bne.n	8005eec <_dtoa_r+0x4c4>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d3      	bne.n	8005da2 <_dtoa_r+0x37a>
 8005dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8082 	beq.w	8005f06 <_dtoa_r+0x4de>
 8005e02:	4b91      	ldr	r3, [pc, #580]	; (8006048 <_dtoa_r+0x620>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	4650      	mov	r0, sl
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f7fa fe6f 	bl	8000aec <__aeabi_dcmplt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d079      	beq.n	8005f06 <_dtoa_r+0x4de>
 8005e12:	9b03      	ldr	r3, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d076      	beq.n	8005f06 <_dtoa_r+0x4de>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dd36      	ble.n	8005e8c <_dtoa_r+0x464>
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	1e5f      	subs	r7, r3, #1
 8005e26:	2200      	movs	r2, #0
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <_dtoa_r+0x624>)
 8005e2a:	f7fa fbed 	bl	8000608 <__aeabi_dmul>
 8005e2e:	9e02      	ldr	r6, [sp, #8]
 8005e30:	4682      	mov	sl, r0
 8005e32:	468b      	mov	fp, r1
 8005e34:	3501      	adds	r5, #1
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa fb7c 	bl	8000534 <__aeabi_i2d>
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	f7fa fbe2 	bl	8000608 <__aeabi_dmul>
 8005e44:	4b82      	ldr	r3, [pc, #520]	; (8006050 <_dtoa_r+0x628>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	f7fa fa28 	bl	800029c <__adddf3>
 8005e4c:	46d0      	mov	r8, sl
 8005e4e:	46d9      	mov	r9, fp
 8005e50:	4682      	mov	sl, r0
 8005e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d158      	bne.n	8005f0c <_dtoa_r+0x4e4>
 8005e5a:	4b7e      	ldr	r3, [pc, #504]	; (8006054 <_dtoa_r+0x62c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fa19 	bl	8000298 <__aeabi_dsub>
 8005e66:	4652      	mov	r2, sl
 8005e68:	465b      	mov	r3, fp
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4689      	mov	r9, r1
 8005e6e:	f7fa fe5b 	bl	8000b28 <__aeabi_dcmpgt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	f040 8295 	bne.w	80063a2 <_dtoa_r+0x97a>
 8005e78:	4652      	mov	r2, sl
 8005e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fe33 	bl	8000aec <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f040 8289 	bne.w	800639e <_dtoa_r+0x976>
 8005e8c:	ec5b ab19 	vmov	sl, fp, d9
 8005e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f2c0 8148 	blt.w	8006128 <_dtoa_r+0x700>
 8005e98:	9a00      	ldr	r2, [sp, #0]
 8005e9a:	2a0e      	cmp	r2, #14
 8005e9c:	f300 8144 	bgt.w	8006128 <_dtoa_r+0x700>
 8005ea0:	4b67      	ldr	r3, [pc, #412]	; (8006040 <_dtoa_r+0x618>)
 8005ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f280 80d5 	bge.w	800605c <_dtoa_r+0x634>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f300 80d1 	bgt.w	800605c <_dtoa_r+0x634>
 8005eba:	f040 826f 	bne.w	800639c <_dtoa_r+0x974>
 8005ebe:	4b65      	ldr	r3, [pc, #404]	; (8006054 <_dtoa_r+0x62c>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f7fa fb9f 	bl	8000608 <__aeabi_dmul>
 8005eca:	4652      	mov	r2, sl
 8005ecc:	465b      	mov	r3, fp
 8005ece:	f7fa fe21 	bl	8000b14 <__aeabi_dcmpge>
 8005ed2:	9e03      	ldr	r6, [sp, #12]
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f040 8245 	bne.w	8006366 <_dtoa_r+0x93e>
 8005edc:	9d01      	ldr	r5, [sp, #4]
 8005ede:	2331      	movs	r3, #49	; 0x31
 8005ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	e240      	b.n	800636e <_dtoa_r+0x946>
 8005eec:	07f2      	lsls	r2, r6, #31
 8005eee:	d505      	bpl.n	8005efc <_dtoa_r+0x4d4>
 8005ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef4:	f7fa fb88 	bl	8000608 <__aeabi_dmul>
 8005ef8:	3501      	adds	r5, #1
 8005efa:	2301      	movs	r3, #1
 8005efc:	1076      	asrs	r6, r6, #1
 8005efe:	3708      	adds	r7, #8
 8005f00:	e777      	b.n	8005df2 <_dtoa_r+0x3ca>
 8005f02:	2502      	movs	r5, #2
 8005f04:	e779      	b.n	8005dfa <_dtoa_r+0x3d2>
 8005f06:	9f00      	ldr	r7, [sp, #0]
 8005f08:	9e03      	ldr	r6, [sp, #12]
 8005f0a:	e794      	b.n	8005e36 <_dtoa_r+0x40e>
 8005f0c:	9901      	ldr	r1, [sp, #4]
 8005f0e:	4b4c      	ldr	r3, [pc, #304]	; (8006040 <_dtoa_r+0x618>)
 8005f10:	4431      	add	r1, r6
 8005f12:	910d      	str	r1, [sp, #52]	; 0x34
 8005f14:	9908      	ldr	r1, [sp, #32]
 8005f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	d043      	beq.n	8005faa <_dtoa_r+0x582>
 8005f22:	494d      	ldr	r1, [pc, #308]	; (8006058 <_dtoa_r+0x630>)
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7fa fc99 	bl	800085c <__aeabi_ddiv>
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	f7fa f9b3 	bl	8000298 <__aeabi_dsub>
 8005f32:	9d01      	ldr	r5, [sp, #4]
 8005f34:	4682      	mov	sl, r0
 8005f36:	468b      	mov	fp, r1
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f7fa fe14 	bl	8000b68 <__aeabi_d2iz>
 8005f40:	4606      	mov	r6, r0
 8005f42:	f7fa faf7 	bl	8000534 <__aeabi_i2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	f7fa f9a3 	bl	8000298 <__aeabi_dsub>
 8005f52:	3630      	adds	r6, #48	; 0x30
 8005f54:	f805 6b01 	strb.w	r6, [r5], #1
 8005f58:	4652      	mov	r2, sl
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4689      	mov	r9, r1
 8005f60:	f7fa fdc4 	bl	8000aec <__aeabi_dcmplt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d163      	bne.n	8006030 <_dtoa_r+0x608>
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	4936      	ldr	r1, [pc, #216]	; (8006048 <_dtoa_r+0x620>)
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7fa f992 	bl	8000298 <__aeabi_dsub>
 8005f74:	4652      	mov	r2, sl
 8005f76:	465b      	mov	r3, fp
 8005f78:	f7fa fdb8 	bl	8000aec <__aeabi_dcmplt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f040 80b5 	bne.w	80060ec <_dtoa_r+0x6c4>
 8005f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f84:	429d      	cmp	r5, r3
 8005f86:	d081      	beq.n	8005e8c <_dtoa_r+0x464>
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <_dtoa_r+0x624>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	4659      	mov	r1, fp
 8005f90:	f7fa fb3a 	bl	8000608 <__aeabi_dmul>
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <_dtoa_r+0x624>)
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f7fa fb32 	bl	8000608 <__aeabi_dmul>
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	e7c6      	b.n	8005f38 <_dtoa_r+0x510>
 8005faa:	4650      	mov	r0, sl
 8005fac:	4659      	mov	r1, fp
 8005fae:	f7fa fb2b 	bl	8000608 <__aeabi_dmul>
 8005fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb4:	9d01      	ldr	r5, [sp, #4]
 8005fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fb8:	4682      	mov	sl, r0
 8005fba:	468b      	mov	fp, r1
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f7fa fdd2 	bl	8000b68 <__aeabi_d2iz>
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	f7fa fab5 	bl	8000534 <__aeabi_i2d>
 8005fca:	3630      	adds	r6, #48	; 0x30
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa f960 	bl	8000298 <__aeabi_dsub>
 8005fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8005fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fde:	429d      	cmp	r5, r3
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	d124      	bne.n	8006034 <_dtoa_r+0x60c>
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <_dtoa_r+0x630>)
 8005fec:	4650      	mov	r0, sl
 8005fee:	4659      	mov	r1, fp
 8005ff0:	f7fa f954 	bl	800029c <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fd94 	bl	8000b28 <__aeabi_dcmpgt>
 8006000:	2800      	cmp	r0, #0
 8006002:	d173      	bne.n	80060ec <_dtoa_r+0x6c4>
 8006004:	4652      	mov	r2, sl
 8006006:	465b      	mov	r3, fp
 8006008:	4913      	ldr	r1, [pc, #76]	; (8006058 <_dtoa_r+0x630>)
 800600a:	2000      	movs	r0, #0
 800600c:	f7fa f944 	bl	8000298 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4640      	mov	r0, r8
 8006016:	4649      	mov	r1, r9
 8006018:	f7fa fd68 	bl	8000aec <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f af35 	beq.w	8005e8c <_dtoa_r+0x464>
 8006022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006024:	1e6b      	subs	r3, r5, #1
 8006026:	930f      	str	r3, [sp, #60]	; 0x3c
 8006028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d0f8      	beq.n	8006022 <_dtoa_r+0x5fa>
 8006030:	9700      	str	r7, [sp, #0]
 8006032:	e049      	b.n	80060c8 <_dtoa_r+0x6a0>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_dtoa_r+0x624>)
 8006036:	f7fa fae7 	bl	8000608 <__aeabi_dmul>
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	e7bd      	b.n	8005fbc <_dtoa_r+0x594>
 8006040:	080097c0 	.word	0x080097c0
 8006044:	08009798 	.word	0x08009798
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	40240000 	.word	0x40240000
 8006050:	401c0000 	.word	0x401c0000
 8006054:	40140000 	.word	0x40140000
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	9d01      	ldr	r5, [sp, #4]
 800605e:	4656      	mov	r6, sl
 8006060:	465f      	mov	r7, fp
 8006062:	4642      	mov	r2, r8
 8006064:	464b      	mov	r3, r9
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa fbf7 	bl	800085c <__aeabi_ddiv>
 800606e:	f7fa fd7b 	bl	8000b68 <__aeabi_d2iz>
 8006072:	4682      	mov	sl, r0
 8006074:	f7fa fa5e 	bl	8000534 <__aeabi_i2d>
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	f7fa fac4 	bl	8000608 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800608c:	f7fa f904 	bl	8000298 <__aeabi_dsub>
 8006090:	f805 6b01 	strb.w	r6, [r5], #1
 8006094:	9e01      	ldr	r6, [sp, #4]
 8006096:	9f03      	ldr	r7, [sp, #12]
 8006098:	1bae      	subs	r6, r5, r6
 800609a:	42b7      	cmp	r7, r6
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	d135      	bne.n	800610e <_dtoa_r+0x6e6>
 80060a2:	f7fa f8fb 	bl	800029c <__adddf3>
 80060a6:	4642      	mov	r2, r8
 80060a8:	464b      	mov	r3, r9
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	f7fa fd3b 	bl	8000b28 <__aeabi_dcmpgt>
 80060b2:	b9d0      	cbnz	r0, 80060ea <_dtoa_r+0x6c2>
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa fd0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80060c0:	b110      	cbz	r0, 80060c8 <_dtoa_r+0x6a0>
 80060c2:	f01a 0f01 	tst.w	sl, #1
 80060c6:	d110      	bne.n	80060ea <_dtoa_r+0x6c2>
 80060c8:	4620      	mov	r0, r4
 80060ca:	ee18 1a10 	vmov	r1, s16
 80060ce:	f000 faf3 	bl	80066b8 <_Bfree>
 80060d2:	2300      	movs	r3, #0
 80060d4:	9800      	ldr	r0, [sp, #0]
 80060d6:	702b      	strb	r3, [r5, #0]
 80060d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060da:	3001      	adds	r0, #1
 80060dc:	6018      	str	r0, [r3, #0]
 80060de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f43f acf1 	beq.w	8005ac8 <_dtoa_r+0xa0>
 80060e6:	601d      	str	r5, [r3, #0]
 80060e8:	e4ee      	b.n	8005ac8 <_dtoa_r+0xa0>
 80060ea:	9f00      	ldr	r7, [sp, #0]
 80060ec:	462b      	mov	r3, r5
 80060ee:	461d      	mov	r5, r3
 80060f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060f4:	2a39      	cmp	r2, #57	; 0x39
 80060f6:	d106      	bne.n	8006106 <_dtoa_r+0x6de>
 80060f8:	9a01      	ldr	r2, [sp, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d1f7      	bne.n	80060ee <_dtoa_r+0x6c6>
 80060fe:	9901      	ldr	r1, [sp, #4]
 8006100:	2230      	movs	r2, #48	; 0x30
 8006102:	3701      	adds	r7, #1
 8006104:	700a      	strb	r2, [r1, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	3201      	adds	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e790      	b.n	8006030 <_dtoa_r+0x608>
 800610e:	4ba6      	ldr	r3, [pc, #664]	; (80063a8 <_dtoa_r+0x980>)
 8006110:	2200      	movs	r2, #0
 8006112:	f7fa fa79 	bl	8000608 <__aeabi_dmul>
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	4606      	mov	r6, r0
 800611c:	460f      	mov	r7, r1
 800611e:	f7fa fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d09d      	beq.n	8006062 <_dtoa_r+0x63a>
 8006126:	e7cf      	b.n	80060c8 <_dtoa_r+0x6a0>
 8006128:	9a08      	ldr	r2, [sp, #32]
 800612a:	2a00      	cmp	r2, #0
 800612c:	f000 80d7 	beq.w	80062de <_dtoa_r+0x8b6>
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2a01      	cmp	r2, #1
 8006134:	f300 80ba 	bgt.w	80062ac <_dtoa_r+0x884>
 8006138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800613a:	2a00      	cmp	r2, #0
 800613c:	f000 80b2 	beq.w	80062a4 <_dtoa_r+0x87c>
 8006140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006144:	9e07      	ldr	r6, [sp, #28]
 8006146:	9d04      	ldr	r5, [sp, #16]
 8006148:	9a04      	ldr	r2, [sp, #16]
 800614a:	441a      	add	r2, r3
 800614c:	9204      	str	r2, [sp, #16]
 800614e:	9a05      	ldr	r2, [sp, #20]
 8006150:	2101      	movs	r1, #1
 8006152:	441a      	add	r2, r3
 8006154:	4620      	mov	r0, r4
 8006156:	9205      	str	r2, [sp, #20]
 8006158:	f000 fb66 	bl	8006828 <__i2b>
 800615c:	4607      	mov	r7, r0
 800615e:	2d00      	cmp	r5, #0
 8006160:	dd0c      	ble.n	800617c <_dtoa_r+0x754>
 8006162:	9b05      	ldr	r3, [sp, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd09      	ble.n	800617c <_dtoa_r+0x754>
 8006168:	42ab      	cmp	r3, r5
 800616a:	9a04      	ldr	r2, [sp, #16]
 800616c:	bfa8      	it	ge
 800616e:	462b      	movge	r3, r5
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	9204      	str	r2, [sp, #16]
 8006174:	9a05      	ldr	r2, [sp, #20]
 8006176:	1aed      	subs	r5, r5, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	b31b      	cbz	r3, 80061c8 <_dtoa_r+0x7a0>
 8006180:	9b08      	ldr	r3, [sp, #32]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80af 	beq.w	80062e6 <_dtoa_r+0x8be>
 8006188:	2e00      	cmp	r6, #0
 800618a:	dd13      	ble.n	80061b4 <_dtoa_r+0x78c>
 800618c:	4639      	mov	r1, r7
 800618e:	4632      	mov	r2, r6
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fc09 	bl	80069a8 <__pow5mult>
 8006196:	ee18 2a10 	vmov	r2, s16
 800619a:	4601      	mov	r1, r0
 800619c:	4607      	mov	r7, r0
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 fb58 	bl	8006854 <__multiply>
 80061a4:	ee18 1a10 	vmov	r1, s16
 80061a8:	4680      	mov	r8, r0
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fa84 	bl	80066b8 <_Bfree>
 80061b0:	ee08 8a10 	vmov	s16, r8
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	1b9a      	subs	r2, r3, r6
 80061b8:	d006      	beq.n	80061c8 <_dtoa_r+0x7a0>
 80061ba:	ee18 1a10 	vmov	r1, s16
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 fbf2 	bl	80069a8 <__pow5mult>
 80061c4:	ee08 0a10 	vmov	s16, r0
 80061c8:	2101      	movs	r1, #1
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fb2c 	bl	8006828 <__i2b>
 80061d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	4606      	mov	r6, r0
 80061d6:	f340 8088 	ble.w	80062ea <_dtoa_r+0x8c2>
 80061da:	461a      	mov	r2, r3
 80061dc:	4601      	mov	r1, r0
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 fbe2 	bl	80069a8 <__pow5mult>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	4606      	mov	r6, r0
 80061ea:	f340 8081 	ble.w	80062f0 <_dtoa_r+0x8c8>
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	6933      	ldr	r3, [r6, #16]
 80061f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061f8:	6918      	ldr	r0, [r3, #16]
 80061fa:	f000 fac5 	bl	8006788 <__hi0bits>
 80061fe:	f1c0 0020 	rsb	r0, r0, #32
 8006202:	9b05      	ldr	r3, [sp, #20]
 8006204:	4418      	add	r0, r3
 8006206:	f010 001f 	ands.w	r0, r0, #31
 800620a:	f000 8092 	beq.w	8006332 <_dtoa_r+0x90a>
 800620e:	f1c0 0320 	rsb	r3, r0, #32
 8006212:	2b04      	cmp	r3, #4
 8006214:	f340 808a 	ble.w	800632c <_dtoa_r+0x904>
 8006218:	f1c0 001c 	rsb	r0, r0, #28
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	4403      	add	r3, r0
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	4403      	add	r3, r0
 8006226:	4405      	add	r5, r0
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	dd07      	ble.n	8006240 <_dtoa_r+0x818>
 8006230:	ee18 1a10 	vmov	r1, s16
 8006234:	461a      	mov	r2, r3
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fc10 	bl	8006a5c <__lshift>
 800623c:	ee08 0a10 	vmov	s16, r0
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd05      	ble.n	8006252 <_dtoa_r+0x82a>
 8006246:	4631      	mov	r1, r6
 8006248:	461a      	mov	r2, r3
 800624a:	4620      	mov	r0, r4
 800624c:	f000 fc06 	bl	8006a5c <__lshift>
 8006250:	4606      	mov	r6, r0
 8006252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d06e      	beq.n	8006336 <_dtoa_r+0x90e>
 8006258:	ee18 0a10 	vmov	r0, s16
 800625c:	4631      	mov	r1, r6
 800625e:	f000 fc6d 	bl	8006b3c <__mcmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	da67      	bge.n	8006336 <_dtoa_r+0x90e>
 8006266:	9b00      	ldr	r3, [sp, #0]
 8006268:	3b01      	subs	r3, #1
 800626a:	ee18 1a10 	vmov	r1, s16
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	220a      	movs	r2, #10
 8006272:	2300      	movs	r3, #0
 8006274:	4620      	mov	r0, r4
 8006276:	f000 fa41 	bl	80066fc <__multadd>
 800627a:	9b08      	ldr	r3, [sp, #32]
 800627c:	ee08 0a10 	vmov	s16, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 81b1 	beq.w	80065e8 <_dtoa_r+0xbc0>
 8006286:	2300      	movs	r3, #0
 8006288:	4639      	mov	r1, r7
 800628a:	220a      	movs	r2, #10
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fa35 	bl	80066fc <__multadd>
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	4607      	mov	r7, r0
 8006298:	f300 808e 	bgt.w	80063b8 <_dtoa_r+0x990>
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	dc51      	bgt.n	8006346 <_dtoa_r+0x91e>
 80062a2:	e089      	b.n	80063b8 <_dtoa_r+0x990>
 80062a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062aa:	e74b      	b.n	8006144 <_dtoa_r+0x71c>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	1e5e      	subs	r6, r3, #1
 80062b0:	9b07      	ldr	r3, [sp, #28]
 80062b2:	42b3      	cmp	r3, r6
 80062b4:	bfbf      	itttt	lt
 80062b6:	9b07      	ldrlt	r3, [sp, #28]
 80062b8:	9607      	strlt	r6, [sp, #28]
 80062ba:	1af2      	sublt	r2, r6, r3
 80062bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062be:	bfb6      	itet	lt
 80062c0:	189b      	addlt	r3, r3, r2
 80062c2:	1b9e      	subge	r6, r3, r6
 80062c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	bfb8      	it	lt
 80062ca:	2600      	movlt	r6, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bfb7      	itett	lt
 80062d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80062d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80062d8:	1a9d      	sublt	r5, r3, r2
 80062da:	2300      	movlt	r3, #0
 80062dc:	e734      	b.n	8006148 <_dtoa_r+0x720>
 80062de:	9e07      	ldr	r6, [sp, #28]
 80062e0:	9d04      	ldr	r5, [sp, #16]
 80062e2:	9f08      	ldr	r7, [sp, #32]
 80062e4:	e73b      	b.n	800615e <_dtoa_r+0x736>
 80062e6:	9a07      	ldr	r2, [sp, #28]
 80062e8:	e767      	b.n	80061ba <_dtoa_r+0x792>
 80062ea:	9b06      	ldr	r3, [sp, #24]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	dc18      	bgt.n	8006322 <_dtoa_r+0x8fa>
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d115      	bne.n	8006322 <_dtoa_r+0x8fa>
 80062f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062fa:	b993      	cbnz	r3, 8006322 <_dtoa_r+0x8fa>
 80062fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006300:	0d1b      	lsrs	r3, r3, #20
 8006302:	051b      	lsls	r3, r3, #20
 8006304:	b183      	cbz	r3, 8006328 <_dtoa_r+0x900>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	3301      	adds	r3, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	9b05      	ldr	r3, [sp, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	f04f 0801 	mov.w	r8, #1
 8006316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f af6a 	bne.w	80061f2 <_dtoa_r+0x7ca>
 800631e:	2001      	movs	r0, #1
 8006320:	e76f      	b.n	8006202 <_dtoa_r+0x7da>
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	e7f6      	b.n	8006316 <_dtoa_r+0x8ee>
 8006328:	4698      	mov	r8, r3
 800632a:	e7f4      	b.n	8006316 <_dtoa_r+0x8ee>
 800632c:	f43f af7d 	beq.w	800622a <_dtoa_r+0x802>
 8006330:	4618      	mov	r0, r3
 8006332:	301c      	adds	r0, #28
 8006334:	e772      	b.n	800621c <_dtoa_r+0x7f4>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc37      	bgt.n	80063ac <_dtoa_r+0x984>
 800633c:	9b06      	ldr	r3, [sp, #24]
 800633e:	2b02      	cmp	r3, #2
 8006340:	dd34      	ble.n	80063ac <_dtoa_r+0x984>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	9b02      	ldr	r3, [sp, #8]
 8006348:	b96b      	cbnz	r3, 8006366 <_dtoa_r+0x93e>
 800634a:	4631      	mov	r1, r6
 800634c:	2205      	movs	r2, #5
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f9d4 	bl	80066fc <__multadd>
 8006354:	4601      	mov	r1, r0
 8006356:	4606      	mov	r6, r0
 8006358:	ee18 0a10 	vmov	r0, s16
 800635c:	f000 fbee 	bl	8006b3c <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	f73f adbb 	bgt.w	8005edc <_dtoa_r+0x4b4>
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	9d01      	ldr	r5, [sp, #4]
 800636a:	43db      	mvns	r3, r3
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	4631      	mov	r1, r6
 8006374:	4620      	mov	r0, r4
 8006376:	f000 f99f 	bl	80066b8 <_Bfree>
 800637a:	2f00      	cmp	r7, #0
 800637c:	f43f aea4 	beq.w	80060c8 <_dtoa_r+0x6a0>
 8006380:	f1b8 0f00 	cmp.w	r8, #0
 8006384:	d005      	beq.n	8006392 <_dtoa_r+0x96a>
 8006386:	45b8      	cmp	r8, r7
 8006388:	d003      	beq.n	8006392 <_dtoa_r+0x96a>
 800638a:	4641      	mov	r1, r8
 800638c:	4620      	mov	r0, r4
 800638e:	f000 f993 	bl	80066b8 <_Bfree>
 8006392:	4639      	mov	r1, r7
 8006394:	4620      	mov	r0, r4
 8006396:	f000 f98f 	bl	80066b8 <_Bfree>
 800639a:	e695      	b.n	80060c8 <_dtoa_r+0x6a0>
 800639c:	2600      	movs	r6, #0
 800639e:	4637      	mov	r7, r6
 80063a0:	e7e1      	b.n	8006366 <_dtoa_r+0x93e>
 80063a2:	9700      	str	r7, [sp, #0]
 80063a4:	4637      	mov	r7, r6
 80063a6:	e599      	b.n	8005edc <_dtoa_r+0x4b4>
 80063a8:	40240000 	.word	0x40240000
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80ca 	beq.w	8006548 <_dtoa_r+0xb20>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	9302      	str	r3, [sp, #8]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	dd05      	ble.n	80063c8 <_dtoa_r+0x9a0>
 80063bc:	4639      	mov	r1, r7
 80063be:	462a      	mov	r2, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fb4b 	bl	8006a5c <__lshift>
 80063c6:	4607      	mov	r7, r0
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	d05b      	beq.n	8006486 <_dtoa_r+0xa5e>
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 f931 	bl	8006638 <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b928      	cbnz	r0, 80063e6 <_dtoa_r+0x9be>
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <_dtoa_r+0xbd0>)
 80063dc:	4602      	mov	r2, r0
 80063de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063e2:	f7ff bb3b 	b.w	8005a5c <_dtoa_r+0x34>
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	3202      	adds	r2, #2
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	f107 010c 	add.w	r1, r7, #12
 80063f0:	300c      	adds	r0, #12
 80063f2:	f000 f913 	bl	800661c <memcpy>
 80063f6:	2201      	movs	r2, #1
 80063f8:	4629      	mov	r1, r5
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fb2e 	bl	8006a5c <__lshift>
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	f103 0901 	add.w	r9, r3, #1
 8006406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800640a:	4413      	add	r3, r2
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	f00a 0301 	and.w	r3, sl, #1
 8006412:	46b8      	mov	r8, r7
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	4607      	mov	r7, r0
 8006418:	4631      	mov	r1, r6
 800641a:	ee18 0a10 	vmov	r0, s16
 800641e:	f7ff fa75 	bl	800590c <quorem>
 8006422:	4641      	mov	r1, r8
 8006424:	9002      	str	r0, [sp, #8]
 8006426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800642a:	ee18 0a10 	vmov	r0, s16
 800642e:	f000 fb85 	bl	8006b3c <__mcmp>
 8006432:	463a      	mov	r2, r7
 8006434:	9003      	str	r0, [sp, #12]
 8006436:	4631      	mov	r1, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f000 fb9b 	bl	8006b74 <__mdiff>
 800643e:	68c2      	ldr	r2, [r0, #12]
 8006440:	f109 3bff 	add.w	fp, r9, #4294967295
 8006444:	4605      	mov	r5, r0
 8006446:	bb02      	cbnz	r2, 800648a <_dtoa_r+0xa62>
 8006448:	4601      	mov	r1, r0
 800644a:	ee18 0a10 	vmov	r0, s16
 800644e:	f000 fb75 	bl	8006b3c <__mcmp>
 8006452:	4602      	mov	r2, r0
 8006454:	4629      	mov	r1, r5
 8006456:	4620      	mov	r0, r4
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	f000 f92d 	bl	80066b8 <_Bfree>
 800645e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006462:	ea43 0102 	orr.w	r1, r3, r2
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	430b      	orrs	r3, r1
 800646a:	464d      	mov	r5, r9
 800646c:	d10f      	bne.n	800648e <_dtoa_r+0xa66>
 800646e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006472:	d02a      	beq.n	80064ca <_dtoa_r+0xaa2>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd02      	ble.n	8006480 <_dtoa_r+0xa58>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006480:	f88b a000 	strb.w	sl, [fp]
 8006484:	e775      	b.n	8006372 <_dtoa_r+0x94a>
 8006486:	4638      	mov	r0, r7
 8006488:	e7ba      	b.n	8006400 <_dtoa_r+0x9d8>
 800648a:	2201      	movs	r2, #1
 800648c:	e7e2      	b.n	8006454 <_dtoa_r+0xa2c>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	db04      	blt.n	800649e <_dtoa_r+0xa76>
 8006494:	9906      	ldr	r1, [sp, #24]
 8006496:	430b      	orrs	r3, r1
 8006498:	9904      	ldr	r1, [sp, #16]
 800649a:	430b      	orrs	r3, r1
 800649c:	d122      	bne.n	80064e4 <_dtoa_r+0xabc>
 800649e:	2a00      	cmp	r2, #0
 80064a0:	ddee      	ble.n	8006480 <_dtoa_r+0xa58>
 80064a2:	ee18 1a10 	vmov	r1, s16
 80064a6:	2201      	movs	r2, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fad7 	bl	8006a5c <__lshift>
 80064ae:	4631      	mov	r1, r6
 80064b0:	ee08 0a10 	vmov	s16, r0
 80064b4:	f000 fb42 	bl	8006b3c <__mcmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	dc03      	bgt.n	80064c4 <_dtoa_r+0xa9c>
 80064bc:	d1e0      	bne.n	8006480 <_dtoa_r+0xa58>
 80064be:	f01a 0f01 	tst.w	sl, #1
 80064c2:	d0dd      	beq.n	8006480 <_dtoa_r+0xa58>
 80064c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064c8:	d1d7      	bne.n	800647a <_dtoa_r+0xa52>
 80064ca:	2339      	movs	r3, #57	; 0x39
 80064cc:	f88b 3000 	strb.w	r3, [fp]
 80064d0:	462b      	mov	r3, r5
 80064d2:	461d      	mov	r5, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064da:	2a39      	cmp	r2, #57	; 0x39
 80064dc:	d071      	beq.n	80065c2 <_dtoa_r+0xb9a>
 80064de:	3201      	adds	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e746      	b.n	8006372 <_dtoa_r+0x94a>
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	dd07      	ble.n	80064f8 <_dtoa_r+0xad0>
 80064e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064ec:	d0ed      	beq.n	80064ca <_dtoa_r+0xaa2>
 80064ee:	f10a 0301 	add.w	r3, sl, #1
 80064f2:	f88b 3000 	strb.w	r3, [fp]
 80064f6:	e73c      	b.n	8006372 <_dtoa_r+0x94a>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80064fe:	4599      	cmp	r9, r3
 8006500:	d047      	beq.n	8006592 <_dtoa_r+0xb6a>
 8006502:	ee18 1a10 	vmov	r1, s16
 8006506:	2300      	movs	r3, #0
 8006508:	220a      	movs	r2, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f8f6 	bl	80066fc <__multadd>
 8006510:	45b8      	cmp	r8, r7
 8006512:	ee08 0a10 	vmov	s16, r0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	f04f 020a 	mov.w	r2, #10
 800651e:	4641      	mov	r1, r8
 8006520:	4620      	mov	r0, r4
 8006522:	d106      	bne.n	8006532 <_dtoa_r+0xb0a>
 8006524:	f000 f8ea 	bl	80066fc <__multadd>
 8006528:	4680      	mov	r8, r0
 800652a:	4607      	mov	r7, r0
 800652c:	f109 0901 	add.w	r9, r9, #1
 8006530:	e772      	b.n	8006418 <_dtoa_r+0x9f0>
 8006532:	f000 f8e3 	bl	80066fc <__multadd>
 8006536:	4639      	mov	r1, r7
 8006538:	4680      	mov	r8, r0
 800653a:	2300      	movs	r3, #0
 800653c:	220a      	movs	r2, #10
 800653e:	4620      	mov	r0, r4
 8006540:	f000 f8dc 	bl	80066fc <__multadd>
 8006544:	4607      	mov	r7, r0
 8006546:	e7f1      	b.n	800652c <_dtoa_r+0xb04>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	9d01      	ldr	r5, [sp, #4]
 800654e:	ee18 0a10 	vmov	r0, s16
 8006552:	4631      	mov	r1, r6
 8006554:	f7ff f9da 	bl	800590c <quorem>
 8006558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	f805 ab01 	strb.w	sl, [r5], #1
 8006562:	1aea      	subs	r2, r5, r3
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	4293      	cmp	r3, r2
 8006568:	dd09      	ble.n	800657e <_dtoa_r+0xb56>
 800656a:	ee18 1a10 	vmov	r1, s16
 800656e:	2300      	movs	r3, #0
 8006570:	220a      	movs	r2, #10
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f8c2 	bl	80066fc <__multadd>
 8006578:	ee08 0a10 	vmov	s16, r0
 800657c:	e7e7      	b.n	800654e <_dtoa_r+0xb26>
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfc8      	it	gt
 8006584:	461d      	movgt	r5, r3
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	bfd8      	it	le
 800658a:	2501      	movle	r5, #1
 800658c:	441d      	add	r5, r3
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	ee18 1a10 	vmov	r1, s16
 8006596:	2201      	movs	r2, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fa5f 	bl	8006a5c <__lshift>
 800659e:	4631      	mov	r1, r6
 80065a0:	ee08 0a10 	vmov	s16, r0
 80065a4:	f000 faca 	bl	8006b3c <__mcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dc91      	bgt.n	80064d0 <_dtoa_r+0xaa8>
 80065ac:	d102      	bne.n	80065b4 <_dtoa_r+0xb8c>
 80065ae:	f01a 0f01 	tst.w	sl, #1
 80065b2:	d18d      	bne.n	80064d0 <_dtoa_r+0xaa8>
 80065b4:	462b      	mov	r3, r5
 80065b6:	461d      	mov	r5, r3
 80065b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065bc:	2a30      	cmp	r2, #48	; 0x30
 80065be:	d0fa      	beq.n	80065b6 <_dtoa_r+0xb8e>
 80065c0:	e6d7      	b.n	8006372 <_dtoa_r+0x94a>
 80065c2:	9a01      	ldr	r2, [sp, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d184      	bne.n	80064d2 <_dtoa_r+0xaaa>
 80065c8:	9b00      	ldr	r3, [sp, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2331      	movs	r3, #49	; 0x31
 80065d0:	7013      	strb	r3, [r2, #0]
 80065d2:	e6ce      	b.n	8006372 <_dtoa_r+0x94a>
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <_dtoa_r+0xbd4>)
 80065d6:	f7ff ba95 	b.w	8005b04 <_dtoa_r+0xdc>
 80065da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f aa6e 	bne.w	8005abe <_dtoa_r+0x96>
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <_dtoa_r+0xbd8>)
 80065e4:	f7ff ba8e 	b.w	8005b04 <_dtoa_r+0xdc>
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dcae      	bgt.n	800654c <_dtoa_r+0xb24>
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	f73f aea8 	bgt.w	8006346 <_dtoa_r+0x91e>
 80065f6:	e7a9      	b.n	800654c <_dtoa_r+0xb24>
 80065f8:	08009727 	.word	0x08009727
 80065fc:	08009684 	.word	0x08009684
 8006600:	080096a8 	.word	0x080096a8

08006604 <_localeconv_r>:
 8006604:	4800      	ldr	r0, [pc, #0]	; (8006608 <_localeconv_r+0x4>)
 8006606:	4770      	bx	lr
 8006608:	200004ec 	.word	0x200004ec

0800660c <malloc>:
 800660c:	4b02      	ldr	r3, [pc, #8]	; (8006618 <malloc+0xc>)
 800660e:	4601      	mov	r1, r0
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	f000 bc17 	b.w	8006e44 <_malloc_r>
 8006616:	bf00      	nop
 8006618:	20000398 	.word	0x20000398

0800661c <memcpy>:
 800661c:	440a      	add	r2, r1
 800661e:	4291      	cmp	r1, r2
 8006620:	f100 33ff 	add.w	r3, r0, #4294967295
 8006624:	d100      	bne.n	8006628 <memcpy+0xc>
 8006626:	4770      	bx	lr
 8006628:	b510      	push	{r4, lr}
 800662a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800662e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006632:	4291      	cmp	r1, r2
 8006634:	d1f9      	bne.n	800662a <memcpy+0xe>
 8006636:	bd10      	pop	{r4, pc}

08006638 <_Balloc>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800663c:	4604      	mov	r4, r0
 800663e:	460d      	mov	r5, r1
 8006640:	b976      	cbnz	r6, 8006660 <_Balloc+0x28>
 8006642:	2010      	movs	r0, #16
 8006644:	f7ff ffe2 	bl	800660c <malloc>
 8006648:	4602      	mov	r2, r0
 800664a:	6260      	str	r0, [r4, #36]	; 0x24
 800664c:	b920      	cbnz	r0, 8006658 <_Balloc+0x20>
 800664e:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <_Balloc+0x78>)
 8006650:	4818      	ldr	r0, [pc, #96]	; (80066b4 <_Balloc+0x7c>)
 8006652:	2166      	movs	r1, #102	; 0x66
 8006654:	f000 fdd6 	bl	8007204 <__assert_func>
 8006658:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800665c:	6006      	str	r6, [r0, #0]
 800665e:	60c6      	str	r6, [r0, #12]
 8006660:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006662:	68f3      	ldr	r3, [r6, #12]
 8006664:	b183      	cbz	r3, 8006688 <_Balloc+0x50>
 8006666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800666e:	b9b8      	cbnz	r0, 80066a0 <_Balloc+0x68>
 8006670:	2101      	movs	r1, #1
 8006672:	fa01 f605 	lsl.w	r6, r1, r5
 8006676:	1d72      	adds	r2, r6, #5
 8006678:	0092      	lsls	r2, r2, #2
 800667a:	4620      	mov	r0, r4
 800667c:	f000 fb60 	bl	8006d40 <_calloc_r>
 8006680:	b160      	cbz	r0, 800669c <_Balloc+0x64>
 8006682:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006686:	e00e      	b.n	80066a6 <_Balloc+0x6e>
 8006688:	2221      	movs	r2, #33	; 0x21
 800668a:	2104      	movs	r1, #4
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fb57 	bl	8006d40 <_calloc_r>
 8006692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006694:	60f0      	str	r0, [r6, #12]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e4      	bne.n	8006666 <_Balloc+0x2e>
 800669c:	2000      	movs	r0, #0
 800669e:	bd70      	pop	{r4, r5, r6, pc}
 80066a0:	6802      	ldr	r2, [r0, #0]
 80066a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066a6:	2300      	movs	r3, #0
 80066a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066ac:	e7f7      	b.n	800669e <_Balloc+0x66>
 80066ae:	bf00      	nop
 80066b0:	080096b5 	.word	0x080096b5
 80066b4:	08009738 	.word	0x08009738

080066b8 <_Bfree>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066bc:	4605      	mov	r5, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	b976      	cbnz	r6, 80066e0 <_Bfree+0x28>
 80066c2:	2010      	movs	r0, #16
 80066c4:	f7ff ffa2 	bl	800660c <malloc>
 80066c8:	4602      	mov	r2, r0
 80066ca:	6268      	str	r0, [r5, #36]	; 0x24
 80066cc:	b920      	cbnz	r0, 80066d8 <_Bfree+0x20>
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <_Bfree+0x3c>)
 80066d0:	4809      	ldr	r0, [pc, #36]	; (80066f8 <_Bfree+0x40>)
 80066d2:	218a      	movs	r1, #138	; 0x8a
 80066d4:	f000 fd96 	bl	8007204 <__assert_func>
 80066d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066dc:	6006      	str	r6, [r0, #0]
 80066de:	60c6      	str	r6, [r0, #12]
 80066e0:	b13c      	cbz	r4, 80066f2 <_Bfree+0x3a>
 80066e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066e4:	6862      	ldr	r2, [r4, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ec:	6021      	str	r1, [r4, #0]
 80066ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	080096b5 	.word	0x080096b5
 80066f8:	08009738 	.word	0x08009738

080066fc <__multadd>:
 80066fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006700:	690d      	ldr	r5, [r1, #16]
 8006702:	4607      	mov	r7, r0
 8006704:	460c      	mov	r4, r1
 8006706:	461e      	mov	r6, r3
 8006708:	f101 0c14 	add.w	ip, r1, #20
 800670c:	2000      	movs	r0, #0
 800670e:	f8dc 3000 	ldr.w	r3, [ip]
 8006712:	b299      	uxth	r1, r3
 8006714:	fb02 6101 	mla	r1, r2, r1, r6
 8006718:	0c1e      	lsrs	r6, r3, #16
 800671a:	0c0b      	lsrs	r3, r1, #16
 800671c:	fb02 3306 	mla	r3, r2, r6, r3
 8006720:	b289      	uxth	r1, r1
 8006722:	3001      	adds	r0, #1
 8006724:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006728:	4285      	cmp	r5, r0
 800672a:	f84c 1b04 	str.w	r1, [ip], #4
 800672e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006732:	dcec      	bgt.n	800670e <__multadd+0x12>
 8006734:	b30e      	cbz	r6, 800677a <__multadd+0x7e>
 8006736:	68a3      	ldr	r3, [r4, #8]
 8006738:	42ab      	cmp	r3, r5
 800673a:	dc19      	bgt.n	8006770 <__multadd+0x74>
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	4638      	mov	r0, r7
 8006740:	3101      	adds	r1, #1
 8006742:	f7ff ff79 	bl	8006638 <_Balloc>
 8006746:	4680      	mov	r8, r0
 8006748:	b928      	cbnz	r0, 8006756 <__multadd+0x5a>
 800674a:	4602      	mov	r2, r0
 800674c:	4b0c      	ldr	r3, [pc, #48]	; (8006780 <__multadd+0x84>)
 800674e:	480d      	ldr	r0, [pc, #52]	; (8006784 <__multadd+0x88>)
 8006750:	21b5      	movs	r1, #181	; 0xb5
 8006752:	f000 fd57 	bl	8007204 <__assert_func>
 8006756:	6922      	ldr	r2, [r4, #16]
 8006758:	3202      	adds	r2, #2
 800675a:	f104 010c 	add.w	r1, r4, #12
 800675e:	0092      	lsls	r2, r2, #2
 8006760:	300c      	adds	r0, #12
 8006762:	f7ff ff5b 	bl	800661c <memcpy>
 8006766:	4621      	mov	r1, r4
 8006768:	4638      	mov	r0, r7
 800676a:	f7ff ffa5 	bl	80066b8 <_Bfree>
 800676e:	4644      	mov	r4, r8
 8006770:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006774:	3501      	adds	r5, #1
 8006776:	615e      	str	r6, [r3, #20]
 8006778:	6125      	str	r5, [r4, #16]
 800677a:	4620      	mov	r0, r4
 800677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006780:	08009727 	.word	0x08009727
 8006784:	08009738 	.word	0x08009738

08006788 <__hi0bits>:
 8006788:	0c03      	lsrs	r3, r0, #16
 800678a:	041b      	lsls	r3, r3, #16
 800678c:	b9d3      	cbnz	r3, 80067c4 <__hi0bits+0x3c>
 800678e:	0400      	lsls	r0, r0, #16
 8006790:	2310      	movs	r3, #16
 8006792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006796:	bf04      	itt	eq
 8006798:	0200      	lsleq	r0, r0, #8
 800679a:	3308      	addeq	r3, #8
 800679c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80067a0:	bf04      	itt	eq
 80067a2:	0100      	lsleq	r0, r0, #4
 80067a4:	3304      	addeq	r3, #4
 80067a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80067aa:	bf04      	itt	eq
 80067ac:	0080      	lsleq	r0, r0, #2
 80067ae:	3302      	addeq	r3, #2
 80067b0:	2800      	cmp	r0, #0
 80067b2:	db05      	blt.n	80067c0 <__hi0bits+0x38>
 80067b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80067b8:	f103 0301 	add.w	r3, r3, #1
 80067bc:	bf08      	it	eq
 80067be:	2320      	moveq	r3, #32
 80067c0:	4618      	mov	r0, r3
 80067c2:	4770      	bx	lr
 80067c4:	2300      	movs	r3, #0
 80067c6:	e7e4      	b.n	8006792 <__hi0bits+0xa>

080067c8 <__lo0bits>:
 80067c8:	6803      	ldr	r3, [r0, #0]
 80067ca:	f013 0207 	ands.w	r2, r3, #7
 80067ce:	4601      	mov	r1, r0
 80067d0:	d00b      	beq.n	80067ea <__lo0bits+0x22>
 80067d2:	07da      	lsls	r2, r3, #31
 80067d4:	d423      	bmi.n	800681e <__lo0bits+0x56>
 80067d6:	0798      	lsls	r0, r3, #30
 80067d8:	bf49      	itett	mi
 80067da:	085b      	lsrmi	r3, r3, #1
 80067dc:	089b      	lsrpl	r3, r3, #2
 80067de:	2001      	movmi	r0, #1
 80067e0:	600b      	strmi	r3, [r1, #0]
 80067e2:	bf5c      	itt	pl
 80067e4:	600b      	strpl	r3, [r1, #0]
 80067e6:	2002      	movpl	r0, #2
 80067e8:	4770      	bx	lr
 80067ea:	b298      	uxth	r0, r3
 80067ec:	b9a8      	cbnz	r0, 800681a <__lo0bits+0x52>
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	2010      	movs	r0, #16
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	b90a      	cbnz	r2, 80067fa <__lo0bits+0x32>
 80067f6:	3008      	adds	r0, #8
 80067f8:	0a1b      	lsrs	r3, r3, #8
 80067fa:	071a      	lsls	r2, r3, #28
 80067fc:	bf04      	itt	eq
 80067fe:	091b      	lsreq	r3, r3, #4
 8006800:	3004      	addeq	r0, #4
 8006802:	079a      	lsls	r2, r3, #30
 8006804:	bf04      	itt	eq
 8006806:	089b      	lsreq	r3, r3, #2
 8006808:	3002      	addeq	r0, #2
 800680a:	07da      	lsls	r2, r3, #31
 800680c:	d403      	bmi.n	8006816 <__lo0bits+0x4e>
 800680e:	085b      	lsrs	r3, r3, #1
 8006810:	f100 0001 	add.w	r0, r0, #1
 8006814:	d005      	beq.n	8006822 <__lo0bits+0x5a>
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	4770      	bx	lr
 800681a:	4610      	mov	r0, r2
 800681c:	e7e9      	b.n	80067f2 <__lo0bits+0x2a>
 800681e:	2000      	movs	r0, #0
 8006820:	4770      	bx	lr
 8006822:	2020      	movs	r0, #32
 8006824:	4770      	bx	lr
	...

08006828 <__i2b>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	2101      	movs	r1, #1
 800682e:	f7ff ff03 	bl	8006638 <_Balloc>
 8006832:	4602      	mov	r2, r0
 8006834:	b928      	cbnz	r0, 8006842 <__i2b+0x1a>
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <__i2b+0x24>)
 8006838:	4805      	ldr	r0, [pc, #20]	; (8006850 <__i2b+0x28>)
 800683a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800683e:	f000 fce1 	bl	8007204 <__assert_func>
 8006842:	2301      	movs	r3, #1
 8006844:	6144      	str	r4, [r0, #20]
 8006846:	6103      	str	r3, [r0, #16]
 8006848:	bd10      	pop	{r4, pc}
 800684a:	bf00      	nop
 800684c:	08009727 	.word	0x08009727
 8006850:	08009738 	.word	0x08009738

08006854 <__multiply>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4691      	mov	r9, r2
 800685a:	690a      	ldr	r2, [r1, #16]
 800685c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	bfb8      	it	lt
 8006864:	460b      	movlt	r3, r1
 8006866:	460c      	mov	r4, r1
 8006868:	bfbc      	itt	lt
 800686a:	464c      	movlt	r4, r9
 800686c:	4699      	movlt	r9, r3
 800686e:	6927      	ldr	r7, [r4, #16]
 8006870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006874:	68a3      	ldr	r3, [r4, #8]
 8006876:	6861      	ldr	r1, [r4, #4]
 8006878:	eb07 060a 	add.w	r6, r7, sl
 800687c:	42b3      	cmp	r3, r6
 800687e:	b085      	sub	sp, #20
 8006880:	bfb8      	it	lt
 8006882:	3101      	addlt	r1, #1
 8006884:	f7ff fed8 	bl	8006638 <_Balloc>
 8006888:	b930      	cbnz	r0, 8006898 <__multiply+0x44>
 800688a:	4602      	mov	r2, r0
 800688c:	4b44      	ldr	r3, [pc, #272]	; (80069a0 <__multiply+0x14c>)
 800688e:	4845      	ldr	r0, [pc, #276]	; (80069a4 <__multiply+0x150>)
 8006890:	f240 115d 	movw	r1, #349	; 0x15d
 8006894:	f000 fcb6 	bl	8007204 <__assert_func>
 8006898:	f100 0514 	add.w	r5, r0, #20
 800689c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80068a0:	462b      	mov	r3, r5
 80068a2:	2200      	movs	r2, #0
 80068a4:	4543      	cmp	r3, r8
 80068a6:	d321      	bcc.n	80068ec <__multiply+0x98>
 80068a8:	f104 0314 	add.w	r3, r4, #20
 80068ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80068b0:	f109 0314 	add.w	r3, r9, #20
 80068b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80068b8:	9202      	str	r2, [sp, #8]
 80068ba:	1b3a      	subs	r2, r7, r4
 80068bc:	3a15      	subs	r2, #21
 80068be:	f022 0203 	bic.w	r2, r2, #3
 80068c2:	3204      	adds	r2, #4
 80068c4:	f104 0115 	add.w	r1, r4, #21
 80068c8:	428f      	cmp	r7, r1
 80068ca:	bf38      	it	cc
 80068cc:	2204      	movcc	r2, #4
 80068ce:	9201      	str	r2, [sp, #4]
 80068d0:	9a02      	ldr	r2, [sp, #8]
 80068d2:	9303      	str	r3, [sp, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d80c      	bhi.n	80068f2 <__multiply+0x9e>
 80068d8:	2e00      	cmp	r6, #0
 80068da:	dd03      	ble.n	80068e4 <__multiply+0x90>
 80068dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05a      	beq.n	800699a <__multiply+0x146>
 80068e4:	6106      	str	r6, [r0, #16]
 80068e6:	b005      	add	sp, #20
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ec:	f843 2b04 	str.w	r2, [r3], #4
 80068f0:	e7d8      	b.n	80068a4 <__multiply+0x50>
 80068f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80068f6:	f1ba 0f00 	cmp.w	sl, #0
 80068fa:	d024      	beq.n	8006946 <__multiply+0xf2>
 80068fc:	f104 0e14 	add.w	lr, r4, #20
 8006900:	46a9      	mov	r9, r5
 8006902:	f04f 0c00 	mov.w	ip, #0
 8006906:	f85e 2b04 	ldr.w	r2, [lr], #4
 800690a:	f8d9 1000 	ldr.w	r1, [r9]
 800690e:	fa1f fb82 	uxth.w	fp, r2
 8006912:	b289      	uxth	r1, r1
 8006914:	fb0a 110b 	mla	r1, sl, fp, r1
 8006918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800691c:	f8d9 2000 	ldr.w	r2, [r9]
 8006920:	4461      	add	r1, ip
 8006922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006926:	fb0a c20b 	mla	r2, sl, fp, ip
 800692a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800692e:	b289      	uxth	r1, r1
 8006930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006934:	4577      	cmp	r7, lr
 8006936:	f849 1b04 	str.w	r1, [r9], #4
 800693a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800693e:	d8e2      	bhi.n	8006906 <__multiply+0xb2>
 8006940:	9a01      	ldr	r2, [sp, #4]
 8006942:	f845 c002 	str.w	ip, [r5, r2]
 8006946:	9a03      	ldr	r2, [sp, #12]
 8006948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800694c:	3304      	adds	r3, #4
 800694e:	f1b9 0f00 	cmp.w	r9, #0
 8006952:	d020      	beq.n	8006996 <__multiply+0x142>
 8006954:	6829      	ldr	r1, [r5, #0]
 8006956:	f104 0c14 	add.w	ip, r4, #20
 800695a:	46ae      	mov	lr, r5
 800695c:	f04f 0a00 	mov.w	sl, #0
 8006960:	f8bc b000 	ldrh.w	fp, [ip]
 8006964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006968:	fb09 220b 	mla	r2, r9, fp, r2
 800696c:	4492      	add	sl, r2
 800696e:	b289      	uxth	r1, r1
 8006970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006974:	f84e 1b04 	str.w	r1, [lr], #4
 8006978:	f85c 2b04 	ldr.w	r2, [ip], #4
 800697c:	f8be 1000 	ldrh.w	r1, [lr]
 8006980:	0c12      	lsrs	r2, r2, #16
 8006982:	fb09 1102 	mla	r1, r9, r2, r1
 8006986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800698a:	4567      	cmp	r7, ip
 800698c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006990:	d8e6      	bhi.n	8006960 <__multiply+0x10c>
 8006992:	9a01      	ldr	r2, [sp, #4]
 8006994:	50a9      	str	r1, [r5, r2]
 8006996:	3504      	adds	r5, #4
 8006998:	e79a      	b.n	80068d0 <__multiply+0x7c>
 800699a:	3e01      	subs	r6, #1
 800699c:	e79c      	b.n	80068d8 <__multiply+0x84>
 800699e:	bf00      	nop
 80069a0:	08009727 	.word	0x08009727
 80069a4:	08009738 	.word	0x08009738

080069a8 <__pow5mult>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	4615      	mov	r5, r2
 80069ae:	f012 0203 	ands.w	r2, r2, #3
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	d007      	beq.n	80069c8 <__pow5mult+0x20>
 80069b8:	4c25      	ldr	r4, [pc, #148]	; (8006a50 <__pow5mult+0xa8>)
 80069ba:	3a01      	subs	r2, #1
 80069bc:	2300      	movs	r3, #0
 80069be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069c2:	f7ff fe9b 	bl	80066fc <__multadd>
 80069c6:	4607      	mov	r7, r0
 80069c8:	10ad      	asrs	r5, r5, #2
 80069ca:	d03d      	beq.n	8006a48 <__pow5mult+0xa0>
 80069cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069ce:	b97c      	cbnz	r4, 80069f0 <__pow5mult+0x48>
 80069d0:	2010      	movs	r0, #16
 80069d2:	f7ff fe1b 	bl	800660c <malloc>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6270      	str	r0, [r6, #36]	; 0x24
 80069da:	b928      	cbnz	r0, 80069e8 <__pow5mult+0x40>
 80069dc:	4b1d      	ldr	r3, [pc, #116]	; (8006a54 <__pow5mult+0xac>)
 80069de:	481e      	ldr	r0, [pc, #120]	; (8006a58 <__pow5mult+0xb0>)
 80069e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069e4:	f000 fc0e 	bl	8007204 <__assert_func>
 80069e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069ec:	6004      	str	r4, [r0, #0]
 80069ee:	60c4      	str	r4, [r0, #12]
 80069f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069f8:	b94c      	cbnz	r4, 8006a0e <__pow5mult+0x66>
 80069fa:	f240 2171 	movw	r1, #625	; 0x271
 80069fe:	4630      	mov	r0, r6
 8006a00:	f7ff ff12 	bl	8006828 <__i2b>
 8006a04:	2300      	movs	r3, #0
 8006a06:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	6003      	str	r3, [r0, #0]
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	07eb      	lsls	r3, r5, #31
 8006a14:	d50a      	bpl.n	8006a2c <__pow5mult+0x84>
 8006a16:	4639      	mov	r1, r7
 8006a18:	4622      	mov	r2, r4
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff ff1a 	bl	8006854 <__multiply>
 8006a20:	4639      	mov	r1, r7
 8006a22:	4680      	mov	r8, r0
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7ff fe47 	bl	80066b8 <_Bfree>
 8006a2a:	4647      	mov	r7, r8
 8006a2c:	106d      	asrs	r5, r5, #1
 8006a2e:	d00b      	beq.n	8006a48 <__pow5mult+0xa0>
 8006a30:	6820      	ldr	r0, [r4, #0]
 8006a32:	b938      	cbnz	r0, 8006a44 <__pow5mult+0x9c>
 8006a34:	4622      	mov	r2, r4
 8006a36:	4621      	mov	r1, r4
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff ff0b 	bl	8006854 <__multiply>
 8006a3e:	6020      	str	r0, [r4, #0]
 8006a40:	f8c0 9000 	str.w	r9, [r0]
 8006a44:	4604      	mov	r4, r0
 8006a46:	e7e4      	b.n	8006a12 <__pow5mult+0x6a>
 8006a48:	4638      	mov	r0, r7
 8006a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a4e:	bf00      	nop
 8006a50:	08009888 	.word	0x08009888
 8006a54:	080096b5 	.word	0x080096b5
 8006a58:	08009738 	.word	0x08009738

08006a5c <__lshift>:
 8006a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a60:	460c      	mov	r4, r1
 8006a62:	6849      	ldr	r1, [r1, #4]
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a6a:	68a3      	ldr	r3, [r4, #8]
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	4691      	mov	r9, r2
 8006a70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a74:	f108 0601 	add.w	r6, r8, #1
 8006a78:	42b3      	cmp	r3, r6
 8006a7a:	db0b      	blt.n	8006a94 <__lshift+0x38>
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f7ff fddb 	bl	8006638 <_Balloc>
 8006a82:	4605      	mov	r5, r0
 8006a84:	b948      	cbnz	r0, 8006a9a <__lshift+0x3e>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b2a      	ldr	r3, [pc, #168]	; (8006b34 <__lshift+0xd8>)
 8006a8a:	482b      	ldr	r0, [pc, #172]	; (8006b38 <__lshift+0xdc>)
 8006a8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a90:	f000 fbb8 	bl	8007204 <__assert_func>
 8006a94:	3101      	adds	r1, #1
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	e7ee      	b.n	8006a78 <__lshift+0x1c>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f100 0114 	add.w	r1, r0, #20
 8006aa0:	f100 0210 	add.w	r2, r0, #16
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	4553      	cmp	r3, sl
 8006aa8:	db37      	blt.n	8006b1a <__lshift+0xbe>
 8006aaa:	6920      	ldr	r0, [r4, #16]
 8006aac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ab0:	f104 0314 	add.w	r3, r4, #20
 8006ab4:	f019 091f 	ands.w	r9, r9, #31
 8006ab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006abc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ac0:	d02f      	beq.n	8006b22 <__lshift+0xc6>
 8006ac2:	f1c9 0e20 	rsb	lr, r9, #32
 8006ac6:	468a      	mov	sl, r1
 8006ac8:	f04f 0c00 	mov.w	ip, #0
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	fa02 f209 	lsl.w	r2, r2, r9
 8006ad2:	ea42 020c 	orr.w	r2, r2, ip
 8006ad6:	f84a 2b04 	str.w	r2, [sl], #4
 8006ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ade:	4298      	cmp	r0, r3
 8006ae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ae4:	d8f2      	bhi.n	8006acc <__lshift+0x70>
 8006ae6:	1b03      	subs	r3, r0, r4
 8006ae8:	3b15      	subs	r3, #21
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	3304      	adds	r3, #4
 8006af0:	f104 0215 	add.w	r2, r4, #21
 8006af4:	4290      	cmp	r0, r2
 8006af6:	bf38      	it	cc
 8006af8:	2304      	movcc	r3, #4
 8006afa:	f841 c003 	str.w	ip, [r1, r3]
 8006afe:	f1bc 0f00 	cmp.w	ip, #0
 8006b02:	d001      	beq.n	8006b08 <__lshift+0xac>
 8006b04:	f108 0602 	add.w	r6, r8, #2
 8006b08:	3e01      	subs	r6, #1
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	612e      	str	r6, [r5, #16]
 8006b0e:	4621      	mov	r1, r4
 8006b10:	f7ff fdd2 	bl	80066b8 <_Bfree>
 8006b14:	4628      	mov	r0, r5
 8006b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b1e:	3301      	adds	r3, #1
 8006b20:	e7c1      	b.n	8006aa6 <__lshift+0x4a>
 8006b22:	3904      	subs	r1, #4
 8006b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b28:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b2c:	4298      	cmp	r0, r3
 8006b2e:	d8f9      	bhi.n	8006b24 <__lshift+0xc8>
 8006b30:	e7ea      	b.n	8006b08 <__lshift+0xac>
 8006b32:	bf00      	nop
 8006b34:	08009727 	.word	0x08009727
 8006b38:	08009738 	.word	0x08009738

08006b3c <__mcmp>:
 8006b3c:	b530      	push	{r4, r5, lr}
 8006b3e:	6902      	ldr	r2, [r0, #16]
 8006b40:	690c      	ldr	r4, [r1, #16]
 8006b42:	1b12      	subs	r2, r2, r4
 8006b44:	d10e      	bne.n	8006b64 <__mcmp+0x28>
 8006b46:	f100 0314 	add.w	r3, r0, #20
 8006b4a:	3114      	adds	r1, #20
 8006b4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006b50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006b54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006b58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006b5c:	42a5      	cmp	r5, r4
 8006b5e:	d003      	beq.n	8006b68 <__mcmp+0x2c>
 8006b60:	d305      	bcc.n	8006b6e <__mcmp+0x32>
 8006b62:	2201      	movs	r2, #1
 8006b64:	4610      	mov	r0, r2
 8006b66:	bd30      	pop	{r4, r5, pc}
 8006b68:	4283      	cmp	r3, r0
 8006b6a:	d3f3      	bcc.n	8006b54 <__mcmp+0x18>
 8006b6c:	e7fa      	b.n	8006b64 <__mcmp+0x28>
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	e7f7      	b.n	8006b64 <__mcmp+0x28>

08006b74 <__mdiff>:
 8006b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b78:	460c      	mov	r4, r1
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4690      	mov	r8, r2
 8006b82:	f7ff ffdb 	bl	8006b3c <__mcmp>
 8006b86:	1e05      	subs	r5, r0, #0
 8006b88:	d110      	bne.n	8006bac <__mdiff+0x38>
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f7ff fd53 	bl	8006638 <_Balloc>
 8006b92:	b930      	cbnz	r0, 8006ba2 <__mdiff+0x2e>
 8006b94:	4b3a      	ldr	r3, [pc, #232]	; (8006c80 <__mdiff+0x10c>)
 8006b96:	4602      	mov	r2, r0
 8006b98:	f240 2132 	movw	r1, #562	; 0x232
 8006b9c:	4839      	ldr	r0, [pc, #228]	; (8006c84 <__mdiff+0x110>)
 8006b9e:	f000 fb31 	bl	8007204 <__assert_func>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bac:	bfa4      	itt	ge
 8006bae:	4643      	movge	r3, r8
 8006bb0:	46a0      	movge	r8, r4
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bb8:	bfa6      	itte	ge
 8006bba:	461c      	movge	r4, r3
 8006bbc:	2500      	movge	r5, #0
 8006bbe:	2501      	movlt	r5, #1
 8006bc0:	f7ff fd3a 	bl	8006638 <_Balloc>
 8006bc4:	b920      	cbnz	r0, 8006bd0 <__mdiff+0x5c>
 8006bc6:	4b2e      	ldr	r3, [pc, #184]	; (8006c80 <__mdiff+0x10c>)
 8006bc8:	4602      	mov	r2, r0
 8006bca:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bce:	e7e5      	b.n	8006b9c <__mdiff+0x28>
 8006bd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006bd4:	6926      	ldr	r6, [r4, #16]
 8006bd6:	60c5      	str	r5, [r0, #12]
 8006bd8:	f104 0914 	add.w	r9, r4, #20
 8006bdc:	f108 0514 	add.w	r5, r8, #20
 8006be0:	f100 0e14 	add.w	lr, r0, #20
 8006be4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006be8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bec:	f108 0210 	add.w	r2, r8, #16
 8006bf0:	46f2      	mov	sl, lr
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006bfc:	fa1f f883 	uxth.w	r8, r3
 8006c00:	fa11 f18b 	uxtah	r1, r1, fp
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	eba1 0808 	sub.w	r8, r1, r8
 8006c0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006c0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006c12:	fa1f f888 	uxth.w	r8, r8
 8006c16:	1419      	asrs	r1, r3, #16
 8006c18:	454e      	cmp	r6, r9
 8006c1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006c1e:	f84a 3b04 	str.w	r3, [sl], #4
 8006c22:	d8e7      	bhi.n	8006bf4 <__mdiff+0x80>
 8006c24:	1b33      	subs	r3, r6, r4
 8006c26:	3b15      	subs	r3, #21
 8006c28:	f023 0303 	bic.w	r3, r3, #3
 8006c2c:	3304      	adds	r3, #4
 8006c2e:	3415      	adds	r4, #21
 8006c30:	42a6      	cmp	r6, r4
 8006c32:	bf38      	it	cc
 8006c34:	2304      	movcc	r3, #4
 8006c36:	441d      	add	r5, r3
 8006c38:	4473      	add	r3, lr
 8006c3a:	469e      	mov	lr, r3
 8006c3c:	462e      	mov	r6, r5
 8006c3e:	4566      	cmp	r6, ip
 8006c40:	d30e      	bcc.n	8006c60 <__mdiff+0xec>
 8006c42:	f10c 0203 	add.w	r2, ip, #3
 8006c46:	1b52      	subs	r2, r2, r5
 8006c48:	f022 0203 	bic.w	r2, r2, #3
 8006c4c:	3d03      	subs	r5, #3
 8006c4e:	45ac      	cmp	ip, r5
 8006c50:	bf38      	it	cc
 8006c52:	2200      	movcc	r2, #0
 8006c54:	441a      	add	r2, r3
 8006c56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006c5a:	b17b      	cbz	r3, 8006c7c <__mdiff+0x108>
 8006c5c:	6107      	str	r7, [r0, #16]
 8006c5e:	e7a3      	b.n	8006ba8 <__mdiff+0x34>
 8006c60:	f856 8b04 	ldr.w	r8, [r6], #4
 8006c64:	fa11 f288 	uxtah	r2, r1, r8
 8006c68:	1414      	asrs	r4, r2, #16
 8006c6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c6e:	b292      	uxth	r2, r2
 8006c70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006c74:	f84e 2b04 	str.w	r2, [lr], #4
 8006c78:	1421      	asrs	r1, r4, #16
 8006c7a:	e7e0      	b.n	8006c3e <__mdiff+0xca>
 8006c7c:	3f01      	subs	r7, #1
 8006c7e:	e7ea      	b.n	8006c56 <__mdiff+0xe2>
 8006c80:	08009727 	.word	0x08009727
 8006c84:	08009738 	.word	0x08009738

08006c88 <__d2b>:
 8006c88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c8c:	4689      	mov	r9, r1
 8006c8e:	2101      	movs	r1, #1
 8006c90:	ec57 6b10 	vmov	r6, r7, d0
 8006c94:	4690      	mov	r8, r2
 8006c96:	f7ff fccf 	bl	8006638 <_Balloc>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	b930      	cbnz	r0, 8006cac <__d2b+0x24>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b25      	ldr	r3, [pc, #148]	; (8006d38 <__d2b+0xb0>)
 8006ca2:	4826      	ldr	r0, [pc, #152]	; (8006d3c <__d2b+0xb4>)
 8006ca4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ca8:	f000 faac 	bl	8007204 <__assert_func>
 8006cac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cb4:	bb35      	cbnz	r5, 8006d04 <__d2b+0x7c>
 8006cb6:	2e00      	cmp	r6, #0
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	d028      	beq.n	8006d0e <__d2b+0x86>
 8006cbc:	4668      	mov	r0, sp
 8006cbe:	9600      	str	r6, [sp, #0]
 8006cc0:	f7ff fd82 	bl	80067c8 <__lo0bits>
 8006cc4:	9900      	ldr	r1, [sp, #0]
 8006cc6:	b300      	cbz	r0, 8006d0a <__d2b+0x82>
 8006cc8:	9a01      	ldr	r2, [sp, #4]
 8006cca:	f1c0 0320 	rsb	r3, r0, #32
 8006cce:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	40c2      	lsrs	r2, r0
 8006cd6:	6163      	str	r3, [r4, #20]
 8006cd8:	9201      	str	r2, [sp, #4]
 8006cda:	9b01      	ldr	r3, [sp, #4]
 8006cdc:	61a3      	str	r3, [r4, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	bf14      	ite	ne
 8006ce2:	2202      	movne	r2, #2
 8006ce4:	2201      	moveq	r2, #1
 8006ce6:	6122      	str	r2, [r4, #16]
 8006ce8:	b1d5      	cbz	r5, 8006d20 <__d2b+0x98>
 8006cea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cee:	4405      	add	r5, r0
 8006cf0:	f8c9 5000 	str.w	r5, [r9]
 8006cf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cf8:	f8c8 0000 	str.w	r0, [r8]
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	b003      	add	sp, #12
 8006d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d08:	e7d5      	b.n	8006cb6 <__d2b+0x2e>
 8006d0a:	6161      	str	r1, [r4, #20]
 8006d0c:	e7e5      	b.n	8006cda <__d2b+0x52>
 8006d0e:	a801      	add	r0, sp, #4
 8006d10:	f7ff fd5a 	bl	80067c8 <__lo0bits>
 8006d14:	9b01      	ldr	r3, [sp, #4]
 8006d16:	6163      	str	r3, [r4, #20]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	6122      	str	r2, [r4, #16]
 8006d1c:	3020      	adds	r0, #32
 8006d1e:	e7e3      	b.n	8006ce8 <__d2b+0x60>
 8006d20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006d24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d28:	f8c9 0000 	str.w	r0, [r9]
 8006d2c:	6918      	ldr	r0, [r3, #16]
 8006d2e:	f7ff fd2b 	bl	8006788 <__hi0bits>
 8006d32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006d36:	e7df      	b.n	8006cf8 <__d2b+0x70>
 8006d38:	08009727 	.word	0x08009727
 8006d3c:	08009738 	.word	0x08009738

08006d40 <_calloc_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	fba1 2402 	umull	r2, r4, r1, r2
 8006d46:	b94c      	cbnz	r4, 8006d5c <_calloc_r+0x1c>
 8006d48:	4611      	mov	r1, r2
 8006d4a:	9201      	str	r2, [sp, #4]
 8006d4c:	f000 f87a 	bl	8006e44 <_malloc_r>
 8006d50:	9a01      	ldr	r2, [sp, #4]
 8006d52:	4605      	mov	r5, r0
 8006d54:	b930      	cbnz	r0, 8006d64 <_calloc_r+0x24>
 8006d56:	4628      	mov	r0, r5
 8006d58:	b003      	add	sp, #12
 8006d5a:	bd30      	pop	{r4, r5, pc}
 8006d5c:	220c      	movs	r2, #12
 8006d5e:	6002      	str	r2, [r0, #0]
 8006d60:	2500      	movs	r5, #0
 8006d62:	e7f8      	b.n	8006d56 <_calloc_r+0x16>
 8006d64:	4621      	mov	r1, r4
 8006d66:	f7fe f93f 	bl	8004fe8 <memset>
 8006d6a:	e7f4      	b.n	8006d56 <_calloc_r+0x16>

08006d6c <_free_r>:
 8006d6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d044      	beq.n	8006dfc <_free_r+0x90>
 8006d72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d76:	9001      	str	r0, [sp, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d7e:	bfb8      	it	lt
 8006d80:	18e4      	addlt	r4, r4, r3
 8006d82:	f000 fa9b 	bl	80072bc <__malloc_lock>
 8006d86:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <_free_r+0x94>)
 8006d88:	9801      	ldr	r0, [sp, #4]
 8006d8a:	6813      	ldr	r3, [r2, #0]
 8006d8c:	b933      	cbnz	r3, 8006d9c <_free_r+0x30>
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	b003      	add	sp, #12
 8006d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d98:	f000 ba96 	b.w	80072c8 <__malloc_unlock>
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d908      	bls.n	8006db2 <_free_r+0x46>
 8006da0:	6825      	ldr	r5, [r4, #0]
 8006da2:	1961      	adds	r1, r4, r5
 8006da4:	428b      	cmp	r3, r1
 8006da6:	bf01      	itttt	eq
 8006da8:	6819      	ldreq	r1, [r3, #0]
 8006daa:	685b      	ldreq	r3, [r3, #4]
 8006dac:	1949      	addeq	r1, r1, r5
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	e7ed      	b.n	8006d8e <_free_r+0x22>
 8006db2:	461a      	mov	r2, r3
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b10b      	cbz	r3, 8006dbc <_free_r+0x50>
 8006db8:	42a3      	cmp	r3, r4
 8006dba:	d9fa      	bls.n	8006db2 <_free_r+0x46>
 8006dbc:	6811      	ldr	r1, [r2, #0]
 8006dbe:	1855      	adds	r5, r2, r1
 8006dc0:	42a5      	cmp	r5, r4
 8006dc2:	d10b      	bne.n	8006ddc <_free_r+0x70>
 8006dc4:	6824      	ldr	r4, [r4, #0]
 8006dc6:	4421      	add	r1, r4
 8006dc8:	1854      	adds	r4, r2, r1
 8006dca:	42a3      	cmp	r3, r4
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	d1e0      	bne.n	8006d92 <_free_r+0x26>
 8006dd0:	681c      	ldr	r4, [r3, #0]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	6053      	str	r3, [r2, #4]
 8006dd6:	4421      	add	r1, r4
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	e7da      	b.n	8006d92 <_free_r+0x26>
 8006ddc:	d902      	bls.n	8006de4 <_free_r+0x78>
 8006dde:	230c      	movs	r3, #12
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	e7d6      	b.n	8006d92 <_free_r+0x26>
 8006de4:	6825      	ldr	r5, [r4, #0]
 8006de6:	1961      	adds	r1, r4, r5
 8006de8:	428b      	cmp	r3, r1
 8006dea:	bf04      	itt	eq
 8006dec:	6819      	ldreq	r1, [r3, #0]
 8006dee:	685b      	ldreq	r3, [r3, #4]
 8006df0:	6063      	str	r3, [r4, #4]
 8006df2:	bf04      	itt	eq
 8006df4:	1949      	addeq	r1, r1, r5
 8006df6:	6021      	streq	r1, [r4, #0]
 8006df8:	6054      	str	r4, [r2, #4]
 8006dfa:	e7ca      	b.n	8006d92 <_free_r+0x26>
 8006dfc:	b003      	add	sp, #12
 8006dfe:	bd30      	pop	{r4, r5, pc}
 8006e00:	200006fc 	.word	0x200006fc

08006e04 <sbrk_aligned>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4e0e      	ldr	r6, [pc, #56]	; (8006e40 <sbrk_aligned+0x3c>)
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6831      	ldr	r1, [r6, #0]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b911      	cbnz	r1, 8006e16 <sbrk_aligned+0x12>
 8006e10:	f000 f9e8 	bl	80071e4 <_sbrk_r>
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f9e3 	bl	80071e4 <_sbrk_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d00a      	beq.n	8006e38 <sbrk_aligned+0x34>
 8006e22:	1cc4      	adds	r4, r0, #3
 8006e24:	f024 0403 	bic.w	r4, r4, #3
 8006e28:	42a0      	cmp	r0, r4
 8006e2a:	d007      	beq.n	8006e3c <sbrk_aligned+0x38>
 8006e2c:	1a21      	subs	r1, r4, r0
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f9d8 	bl	80071e4 <_sbrk_r>
 8006e34:	3001      	adds	r0, #1
 8006e36:	d101      	bne.n	8006e3c <sbrk_aligned+0x38>
 8006e38:	f04f 34ff 	mov.w	r4, #4294967295
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	20000700 	.word	0x20000700

08006e44 <_malloc_r>:
 8006e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	1ccd      	adds	r5, r1, #3
 8006e4a:	f025 0503 	bic.w	r5, r5, #3
 8006e4e:	3508      	adds	r5, #8
 8006e50:	2d0c      	cmp	r5, #12
 8006e52:	bf38      	it	cc
 8006e54:	250c      	movcc	r5, #12
 8006e56:	2d00      	cmp	r5, #0
 8006e58:	4607      	mov	r7, r0
 8006e5a:	db01      	blt.n	8006e60 <_malloc_r+0x1c>
 8006e5c:	42a9      	cmp	r1, r5
 8006e5e:	d905      	bls.n	8006e6c <_malloc_r+0x28>
 8006e60:	230c      	movs	r3, #12
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	2600      	movs	r6, #0
 8006e66:	4630      	mov	r0, r6
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	4e2e      	ldr	r6, [pc, #184]	; (8006f28 <_malloc_r+0xe4>)
 8006e6e:	f000 fa25 	bl	80072bc <__malloc_lock>
 8006e72:	6833      	ldr	r3, [r6, #0]
 8006e74:	461c      	mov	r4, r3
 8006e76:	bb34      	cbnz	r4, 8006ec6 <_malloc_r+0x82>
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ffc2 	bl	8006e04 <sbrk_aligned>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	4604      	mov	r4, r0
 8006e84:	d14d      	bne.n	8006f22 <_malloc_r+0xde>
 8006e86:	6834      	ldr	r4, [r6, #0]
 8006e88:	4626      	mov	r6, r4
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d140      	bne.n	8006f10 <_malloc_r+0xcc>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	4631      	mov	r1, r6
 8006e92:	4638      	mov	r0, r7
 8006e94:	eb04 0803 	add.w	r8, r4, r3
 8006e98:	f000 f9a4 	bl	80071e4 <_sbrk_r>
 8006e9c:	4580      	cmp	r8, r0
 8006e9e:	d13a      	bne.n	8006f16 <_malloc_r+0xd2>
 8006ea0:	6821      	ldr	r1, [r4, #0]
 8006ea2:	3503      	adds	r5, #3
 8006ea4:	1a6d      	subs	r5, r5, r1
 8006ea6:	f025 0503 	bic.w	r5, r5, #3
 8006eaa:	3508      	adds	r5, #8
 8006eac:	2d0c      	cmp	r5, #12
 8006eae:	bf38      	it	cc
 8006eb0:	250c      	movcc	r5, #12
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	f7ff ffa5 	bl	8006e04 <sbrk_aligned>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d02b      	beq.n	8006f16 <_malloc_r+0xd2>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	442b      	add	r3, r5
 8006ec2:	6023      	str	r3, [r4, #0]
 8006ec4:	e00e      	b.n	8006ee4 <_malloc_r+0xa0>
 8006ec6:	6822      	ldr	r2, [r4, #0]
 8006ec8:	1b52      	subs	r2, r2, r5
 8006eca:	d41e      	bmi.n	8006f0a <_malloc_r+0xc6>
 8006ecc:	2a0b      	cmp	r2, #11
 8006ece:	d916      	bls.n	8006efe <_malloc_r+0xba>
 8006ed0:	1961      	adds	r1, r4, r5
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	6025      	str	r5, [r4, #0]
 8006ed6:	bf18      	it	ne
 8006ed8:	6059      	strne	r1, [r3, #4]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	bf08      	it	eq
 8006ede:	6031      	streq	r1, [r6, #0]
 8006ee0:	5162      	str	r2, [r4, r5]
 8006ee2:	604b      	str	r3, [r1, #4]
 8006ee4:	4638      	mov	r0, r7
 8006ee6:	f104 060b 	add.w	r6, r4, #11
 8006eea:	f000 f9ed 	bl	80072c8 <__malloc_unlock>
 8006eee:	f026 0607 	bic.w	r6, r6, #7
 8006ef2:	1d23      	adds	r3, r4, #4
 8006ef4:	1af2      	subs	r2, r6, r3
 8006ef6:	d0b6      	beq.n	8006e66 <_malloc_r+0x22>
 8006ef8:	1b9b      	subs	r3, r3, r6
 8006efa:	50a3      	str	r3, [r4, r2]
 8006efc:	e7b3      	b.n	8006e66 <_malloc_r+0x22>
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	bf0c      	ite	eq
 8006f04:	6032      	streq	r2, [r6, #0]
 8006f06:	605a      	strne	r2, [r3, #4]
 8006f08:	e7ec      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f0a:	4623      	mov	r3, r4
 8006f0c:	6864      	ldr	r4, [r4, #4]
 8006f0e:	e7b2      	b.n	8006e76 <_malloc_r+0x32>
 8006f10:	4634      	mov	r4, r6
 8006f12:	6876      	ldr	r6, [r6, #4]
 8006f14:	e7b9      	b.n	8006e8a <_malloc_r+0x46>
 8006f16:	230c      	movs	r3, #12
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f000 f9d4 	bl	80072c8 <__malloc_unlock>
 8006f20:	e7a1      	b.n	8006e66 <_malloc_r+0x22>
 8006f22:	6025      	str	r5, [r4, #0]
 8006f24:	e7de      	b.n	8006ee4 <_malloc_r+0xa0>
 8006f26:	bf00      	nop
 8006f28:	200006fc 	.word	0x200006fc

08006f2c <__ssputs_r>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	688e      	ldr	r6, [r1, #8]
 8006f32:	429e      	cmp	r6, r3
 8006f34:	4682      	mov	sl, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	4690      	mov	r8, r2
 8006f3a:	461f      	mov	r7, r3
 8006f3c:	d838      	bhi.n	8006fb0 <__ssputs_r+0x84>
 8006f3e:	898a      	ldrh	r2, [r1, #12]
 8006f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f44:	d032      	beq.n	8006fac <__ssputs_r+0x80>
 8006f46:	6825      	ldr	r5, [r4, #0]
 8006f48:	6909      	ldr	r1, [r1, #16]
 8006f4a:	eba5 0901 	sub.w	r9, r5, r1
 8006f4e:	6965      	ldr	r5, [r4, #20]
 8006f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f58:	3301      	adds	r3, #1
 8006f5a:	444b      	add	r3, r9
 8006f5c:	106d      	asrs	r5, r5, #1
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	bf38      	it	cc
 8006f62:	461d      	movcc	r5, r3
 8006f64:	0553      	lsls	r3, r2, #21
 8006f66:	d531      	bpl.n	8006fcc <__ssputs_r+0xa0>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	f7ff ff6b 	bl	8006e44 <_malloc_r>
 8006f6e:	4606      	mov	r6, r0
 8006f70:	b950      	cbnz	r0, 8006f88 <__ssputs_r+0x5c>
 8006f72:	230c      	movs	r3, #12
 8006f74:	f8ca 3000 	str.w	r3, [sl]
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f7e:	81a3      	strh	r3, [r4, #12]
 8006f80:	f04f 30ff 	mov.w	r0, #4294967295
 8006f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f88:	6921      	ldr	r1, [r4, #16]
 8006f8a:	464a      	mov	r2, r9
 8006f8c:	f7ff fb46 	bl	800661c <memcpy>
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f9a:	81a3      	strh	r3, [r4, #12]
 8006f9c:	6126      	str	r6, [r4, #16]
 8006f9e:	6165      	str	r5, [r4, #20]
 8006fa0:	444e      	add	r6, r9
 8006fa2:	eba5 0509 	sub.w	r5, r5, r9
 8006fa6:	6026      	str	r6, [r4, #0]
 8006fa8:	60a5      	str	r5, [r4, #8]
 8006faa:	463e      	mov	r6, r7
 8006fac:	42be      	cmp	r6, r7
 8006fae:	d900      	bls.n	8006fb2 <__ssputs_r+0x86>
 8006fb0:	463e      	mov	r6, r7
 8006fb2:	6820      	ldr	r0, [r4, #0]
 8006fb4:	4632      	mov	r2, r6
 8006fb6:	4641      	mov	r1, r8
 8006fb8:	f000 f966 	bl	8007288 <memmove>
 8006fbc:	68a3      	ldr	r3, [r4, #8]
 8006fbe:	1b9b      	subs	r3, r3, r6
 8006fc0:	60a3      	str	r3, [r4, #8]
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	4433      	add	r3, r6
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	2000      	movs	r0, #0
 8006fca:	e7db      	b.n	8006f84 <__ssputs_r+0x58>
 8006fcc:	462a      	mov	r2, r5
 8006fce:	f000 f981 	bl	80072d4 <_realloc_r>
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d1e1      	bne.n	8006f9c <__ssputs_r+0x70>
 8006fd8:	6921      	ldr	r1, [r4, #16]
 8006fda:	4650      	mov	r0, sl
 8006fdc:	f7ff fec6 	bl	8006d6c <_free_r>
 8006fe0:	e7c7      	b.n	8006f72 <__ssputs_r+0x46>
	...

08006fe4 <_svfiprintf_r>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4698      	mov	r8, r3
 8006fea:	898b      	ldrh	r3, [r1, #12]
 8006fec:	061b      	lsls	r3, r3, #24
 8006fee:	b09d      	sub	sp, #116	; 0x74
 8006ff0:	4607      	mov	r7, r0
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	d50e      	bpl.n	8007016 <_svfiprintf_r+0x32>
 8006ff8:	690b      	ldr	r3, [r1, #16]
 8006ffa:	b963      	cbnz	r3, 8007016 <_svfiprintf_r+0x32>
 8006ffc:	2140      	movs	r1, #64	; 0x40
 8006ffe:	f7ff ff21 	bl	8006e44 <_malloc_r>
 8007002:	6028      	str	r0, [r5, #0]
 8007004:	6128      	str	r0, [r5, #16]
 8007006:	b920      	cbnz	r0, 8007012 <_svfiprintf_r+0x2e>
 8007008:	230c      	movs	r3, #12
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	f04f 30ff 	mov.w	r0, #4294967295
 8007010:	e0d1      	b.n	80071b6 <_svfiprintf_r+0x1d2>
 8007012:	2340      	movs	r3, #64	; 0x40
 8007014:	616b      	str	r3, [r5, #20]
 8007016:	2300      	movs	r3, #0
 8007018:	9309      	str	r3, [sp, #36]	; 0x24
 800701a:	2320      	movs	r3, #32
 800701c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007020:	f8cd 800c 	str.w	r8, [sp, #12]
 8007024:	2330      	movs	r3, #48	; 0x30
 8007026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80071d0 <_svfiprintf_r+0x1ec>
 800702a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800702e:	f04f 0901 	mov.w	r9, #1
 8007032:	4623      	mov	r3, r4
 8007034:	469a      	mov	sl, r3
 8007036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800703a:	b10a      	cbz	r2, 8007040 <_svfiprintf_r+0x5c>
 800703c:	2a25      	cmp	r2, #37	; 0x25
 800703e:	d1f9      	bne.n	8007034 <_svfiprintf_r+0x50>
 8007040:	ebba 0b04 	subs.w	fp, sl, r4
 8007044:	d00b      	beq.n	800705e <_svfiprintf_r+0x7a>
 8007046:	465b      	mov	r3, fp
 8007048:	4622      	mov	r2, r4
 800704a:	4629      	mov	r1, r5
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff ff6d 	bl	8006f2c <__ssputs_r>
 8007052:	3001      	adds	r0, #1
 8007054:	f000 80aa 	beq.w	80071ac <_svfiprintf_r+0x1c8>
 8007058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800705a:	445a      	add	r2, fp
 800705c:	9209      	str	r2, [sp, #36]	; 0x24
 800705e:	f89a 3000 	ldrb.w	r3, [sl]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80a2 	beq.w	80071ac <_svfiprintf_r+0x1c8>
 8007068:	2300      	movs	r3, #0
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007072:	f10a 0a01 	add.w	sl, sl, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	9307      	str	r3, [sp, #28]
 800707a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800707e:	931a      	str	r3, [sp, #104]	; 0x68
 8007080:	4654      	mov	r4, sl
 8007082:	2205      	movs	r2, #5
 8007084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007088:	4851      	ldr	r0, [pc, #324]	; (80071d0 <_svfiprintf_r+0x1ec>)
 800708a:	f7f9 f8b1 	bl	80001f0 <memchr>
 800708e:	9a04      	ldr	r2, [sp, #16]
 8007090:	b9d8      	cbnz	r0, 80070ca <_svfiprintf_r+0xe6>
 8007092:	06d0      	lsls	r0, r2, #27
 8007094:	bf44      	itt	mi
 8007096:	2320      	movmi	r3, #32
 8007098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800709c:	0711      	lsls	r1, r2, #28
 800709e:	bf44      	itt	mi
 80070a0:	232b      	movmi	r3, #43	; 0x2b
 80070a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b2a      	cmp	r3, #42	; 0x2a
 80070ac:	d015      	beq.n	80070da <_svfiprintf_r+0xf6>
 80070ae:	9a07      	ldr	r2, [sp, #28]
 80070b0:	4654      	mov	r4, sl
 80070b2:	2000      	movs	r0, #0
 80070b4:	f04f 0c0a 	mov.w	ip, #10
 80070b8:	4621      	mov	r1, r4
 80070ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070be:	3b30      	subs	r3, #48	; 0x30
 80070c0:	2b09      	cmp	r3, #9
 80070c2:	d94e      	bls.n	8007162 <_svfiprintf_r+0x17e>
 80070c4:	b1b0      	cbz	r0, 80070f4 <_svfiprintf_r+0x110>
 80070c6:	9207      	str	r2, [sp, #28]
 80070c8:	e014      	b.n	80070f4 <_svfiprintf_r+0x110>
 80070ca:	eba0 0308 	sub.w	r3, r0, r8
 80070ce:	fa09 f303 	lsl.w	r3, r9, r3
 80070d2:	4313      	orrs	r3, r2
 80070d4:	9304      	str	r3, [sp, #16]
 80070d6:	46a2      	mov	sl, r4
 80070d8:	e7d2      	b.n	8007080 <_svfiprintf_r+0x9c>
 80070da:	9b03      	ldr	r3, [sp, #12]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	9103      	str	r1, [sp, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	bfbb      	ittet	lt
 80070e6:	425b      	neglt	r3, r3
 80070e8:	f042 0202 	orrlt.w	r2, r2, #2
 80070ec:	9307      	strge	r3, [sp, #28]
 80070ee:	9307      	strlt	r3, [sp, #28]
 80070f0:	bfb8      	it	lt
 80070f2:	9204      	strlt	r2, [sp, #16]
 80070f4:	7823      	ldrb	r3, [r4, #0]
 80070f6:	2b2e      	cmp	r3, #46	; 0x2e
 80070f8:	d10c      	bne.n	8007114 <_svfiprintf_r+0x130>
 80070fa:	7863      	ldrb	r3, [r4, #1]
 80070fc:	2b2a      	cmp	r3, #42	; 0x2a
 80070fe:	d135      	bne.n	800716c <_svfiprintf_r+0x188>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	9203      	str	r2, [sp, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	bfb8      	it	lt
 800710c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007110:	3402      	adds	r4, #2
 8007112:	9305      	str	r3, [sp, #20]
 8007114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071e0 <_svfiprintf_r+0x1fc>
 8007118:	7821      	ldrb	r1, [r4, #0]
 800711a:	2203      	movs	r2, #3
 800711c:	4650      	mov	r0, sl
 800711e:	f7f9 f867 	bl	80001f0 <memchr>
 8007122:	b140      	cbz	r0, 8007136 <_svfiprintf_r+0x152>
 8007124:	2340      	movs	r3, #64	; 0x40
 8007126:	eba0 000a 	sub.w	r0, r0, sl
 800712a:	fa03 f000 	lsl.w	r0, r3, r0
 800712e:	9b04      	ldr	r3, [sp, #16]
 8007130:	4303      	orrs	r3, r0
 8007132:	3401      	adds	r4, #1
 8007134:	9304      	str	r3, [sp, #16]
 8007136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800713a:	4826      	ldr	r0, [pc, #152]	; (80071d4 <_svfiprintf_r+0x1f0>)
 800713c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007140:	2206      	movs	r2, #6
 8007142:	f7f9 f855 	bl	80001f0 <memchr>
 8007146:	2800      	cmp	r0, #0
 8007148:	d038      	beq.n	80071bc <_svfiprintf_r+0x1d8>
 800714a:	4b23      	ldr	r3, [pc, #140]	; (80071d8 <_svfiprintf_r+0x1f4>)
 800714c:	bb1b      	cbnz	r3, 8007196 <_svfiprintf_r+0x1b2>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	3307      	adds	r3, #7
 8007152:	f023 0307 	bic.w	r3, r3, #7
 8007156:	3308      	adds	r3, #8
 8007158:	9303      	str	r3, [sp, #12]
 800715a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715c:	4433      	add	r3, r6
 800715e:	9309      	str	r3, [sp, #36]	; 0x24
 8007160:	e767      	b.n	8007032 <_svfiprintf_r+0x4e>
 8007162:	fb0c 3202 	mla	r2, ip, r2, r3
 8007166:	460c      	mov	r4, r1
 8007168:	2001      	movs	r0, #1
 800716a:	e7a5      	b.n	80070b8 <_svfiprintf_r+0xd4>
 800716c:	2300      	movs	r3, #0
 800716e:	3401      	adds	r4, #1
 8007170:	9305      	str	r3, [sp, #20]
 8007172:	4619      	mov	r1, r3
 8007174:	f04f 0c0a 	mov.w	ip, #10
 8007178:	4620      	mov	r0, r4
 800717a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800717e:	3a30      	subs	r2, #48	; 0x30
 8007180:	2a09      	cmp	r2, #9
 8007182:	d903      	bls.n	800718c <_svfiprintf_r+0x1a8>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0c5      	beq.n	8007114 <_svfiprintf_r+0x130>
 8007188:	9105      	str	r1, [sp, #20]
 800718a:	e7c3      	b.n	8007114 <_svfiprintf_r+0x130>
 800718c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007190:	4604      	mov	r4, r0
 8007192:	2301      	movs	r3, #1
 8007194:	e7f0      	b.n	8007178 <_svfiprintf_r+0x194>
 8007196:	ab03      	add	r3, sp, #12
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	462a      	mov	r2, r5
 800719c:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <_svfiprintf_r+0x1f8>)
 800719e:	a904      	add	r1, sp, #16
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7fd ffc9 	bl	8005138 <_printf_float>
 80071a6:	1c42      	adds	r2, r0, #1
 80071a8:	4606      	mov	r6, r0
 80071aa:	d1d6      	bne.n	800715a <_svfiprintf_r+0x176>
 80071ac:	89ab      	ldrh	r3, [r5, #12]
 80071ae:	065b      	lsls	r3, r3, #25
 80071b0:	f53f af2c 	bmi.w	800700c <_svfiprintf_r+0x28>
 80071b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071b6:	b01d      	add	sp, #116	; 0x74
 80071b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071bc:	ab03      	add	r3, sp, #12
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4b06      	ldr	r3, [pc, #24]	; (80071dc <_svfiprintf_r+0x1f8>)
 80071c4:	a904      	add	r1, sp, #16
 80071c6:	4638      	mov	r0, r7
 80071c8:	f7fe fa5a 	bl	8005680 <_printf_i>
 80071cc:	e7eb      	b.n	80071a6 <_svfiprintf_r+0x1c2>
 80071ce:	bf00      	nop
 80071d0:	08009894 	.word	0x08009894
 80071d4:	0800989e 	.word	0x0800989e
 80071d8:	08005139 	.word	0x08005139
 80071dc:	08006f2d 	.word	0x08006f2d
 80071e0:	0800989a 	.word	0x0800989a

080071e4 <_sbrk_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d06      	ldr	r5, [pc, #24]	; (8007200 <_sbrk_r+0x1c>)
 80071e8:	2300      	movs	r3, #0
 80071ea:	4604      	mov	r4, r0
 80071ec:	4608      	mov	r0, r1
 80071ee:	602b      	str	r3, [r5, #0]
 80071f0:	f001 febc 	bl	8008f6c <_sbrk>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_sbrk_r+0x1a>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_sbrk_r+0x1a>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000704 	.word	0x20000704

08007204 <__assert_func>:
 8007204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007206:	4614      	mov	r4, r2
 8007208:	461a      	mov	r2, r3
 800720a:	4b09      	ldr	r3, [pc, #36]	; (8007230 <__assert_func+0x2c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4605      	mov	r5, r0
 8007210:	68d8      	ldr	r0, [r3, #12]
 8007212:	b14c      	cbz	r4, 8007228 <__assert_func+0x24>
 8007214:	4b07      	ldr	r3, [pc, #28]	; (8007234 <__assert_func+0x30>)
 8007216:	9100      	str	r1, [sp, #0]
 8007218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800721c:	4906      	ldr	r1, [pc, #24]	; (8007238 <__assert_func+0x34>)
 800721e:	462b      	mov	r3, r5
 8007220:	f000 f80e 	bl	8007240 <fiprintf>
 8007224:	f000 faac 	bl	8007780 <abort>
 8007228:	4b04      	ldr	r3, [pc, #16]	; (800723c <__assert_func+0x38>)
 800722a:	461c      	mov	r4, r3
 800722c:	e7f3      	b.n	8007216 <__assert_func+0x12>
 800722e:	bf00      	nop
 8007230:	20000398 	.word	0x20000398
 8007234:	080098a5 	.word	0x080098a5
 8007238:	080098b2 	.word	0x080098b2
 800723c:	080098e0 	.word	0x080098e0

08007240 <fiprintf>:
 8007240:	b40e      	push	{r1, r2, r3}
 8007242:	b503      	push	{r0, r1, lr}
 8007244:	4601      	mov	r1, r0
 8007246:	ab03      	add	r3, sp, #12
 8007248:	4805      	ldr	r0, [pc, #20]	; (8007260 <fiprintf+0x20>)
 800724a:	f853 2b04 	ldr.w	r2, [r3], #4
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f000 f897 	bl	8007384 <_vfiprintf_r>
 8007256:	b002      	add	sp, #8
 8007258:	f85d eb04 	ldr.w	lr, [sp], #4
 800725c:	b003      	add	sp, #12
 800725e:	4770      	bx	lr
 8007260:	20000398 	.word	0x20000398

08007264 <__ascii_mbtowc>:
 8007264:	b082      	sub	sp, #8
 8007266:	b901      	cbnz	r1, 800726a <__ascii_mbtowc+0x6>
 8007268:	a901      	add	r1, sp, #4
 800726a:	b142      	cbz	r2, 800727e <__ascii_mbtowc+0x1a>
 800726c:	b14b      	cbz	r3, 8007282 <__ascii_mbtowc+0x1e>
 800726e:	7813      	ldrb	r3, [r2, #0]
 8007270:	600b      	str	r3, [r1, #0]
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	1e10      	subs	r0, r2, #0
 8007276:	bf18      	it	ne
 8007278:	2001      	movne	r0, #1
 800727a:	b002      	add	sp, #8
 800727c:	4770      	bx	lr
 800727e:	4610      	mov	r0, r2
 8007280:	e7fb      	b.n	800727a <__ascii_mbtowc+0x16>
 8007282:	f06f 0001 	mvn.w	r0, #1
 8007286:	e7f8      	b.n	800727a <__ascii_mbtowc+0x16>

08007288 <memmove>:
 8007288:	4288      	cmp	r0, r1
 800728a:	b510      	push	{r4, lr}
 800728c:	eb01 0402 	add.w	r4, r1, r2
 8007290:	d902      	bls.n	8007298 <memmove+0x10>
 8007292:	4284      	cmp	r4, r0
 8007294:	4623      	mov	r3, r4
 8007296:	d807      	bhi.n	80072a8 <memmove+0x20>
 8007298:	1e43      	subs	r3, r0, #1
 800729a:	42a1      	cmp	r1, r4
 800729c:	d008      	beq.n	80072b0 <memmove+0x28>
 800729e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072a6:	e7f8      	b.n	800729a <memmove+0x12>
 80072a8:	4402      	add	r2, r0
 80072aa:	4601      	mov	r1, r0
 80072ac:	428a      	cmp	r2, r1
 80072ae:	d100      	bne.n	80072b2 <memmove+0x2a>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ba:	e7f7      	b.n	80072ac <memmove+0x24>

080072bc <__malloc_lock>:
 80072bc:	4801      	ldr	r0, [pc, #4]	; (80072c4 <__malloc_lock+0x8>)
 80072be:	f000 bc1f 	b.w	8007b00 <__retarget_lock_acquire_recursive>
 80072c2:	bf00      	nop
 80072c4:	20000708 	.word	0x20000708

080072c8 <__malloc_unlock>:
 80072c8:	4801      	ldr	r0, [pc, #4]	; (80072d0 <__malloc_unlock+0x8>)
 80072ca:	f000 bc1a 	b.w	8007b02 <__retarget_lock_release_recursive>
 80072ce:	bf00      	nop
 80072d0:	20000708 	.word	0x20000708

080072d4 <_realloc_r>:
 80072d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d8:	4680      	mov	r8, r0
 80072da:	4614      	mov	r4, r2
 80072dc:	460e      	mov	r6, r1
 80072de:	b921      	cbnz	r1, 80072ea <_realloc_r+0x16>
 80072e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	4611      	mov	r1, r2
 80072e6:	f7ff bdad 	b.w	8006e44 <_malloc_r>
 80072ea:	b92a      	cbnz	r2, 80072f8 <_realloc_r+0x24>
 80072ec:	f7ff fd3e 	bl	8006d6c <_free_r>
 80072f0:	4625      	mov	r5, r4
 80072f2:	4628      	mov	r0, r5
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f8:	f000 fc6a 	bl	8007bd0 <_malloc_usable_size_r>
 80072fc:	4284      	cmp	r4, r0
 80072fe:	4607      	mov	r7, r0
 8007300:	d802      	bhi.n	8007308 <_realloc_r+0x34>
 8007302:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007306:	d812      	bhi.n	800732e <_realloc_r+0x5a>
 8007308:	4621      	mov	r1, r4
 800730a:	4640      	mov	r0, r8
 800730c:	f7ff fd9a 	bl	8006e44 <_malloc_r>
 8007310:	4605      	mov	r5, r0
 8007312:	2800      	cmp	r0, #0
 8007314:	d0ed      	beq.n	80072f2 <_realloc_r+0x1e>
 8007316:	42bc      	cmp	r4, r7
 8007318:	4622      	mov	r2, r4
 800731a:	4631      	mov	r1, r6
 800731c:	bf28      	it	cs
 800731e:	463a      	movcs	r2, r7
 8007320:	f7ff f97c 	bl	800661c <memcpy>
 8007324:	4631      	mov	r1, r6
 8007326:	4640      	mov	r0, r8
 8007328:	f7ff fd20 	bl	8006d6c <_free_r>
 800732c:	e7e1      	b.n	80072f2 <_realloc_r+0x1e>
 800732e:	4635      	mov	r5, r6
 8007330:	e7df      	b.n	80072f2 <_realloc_r+0x1e>

08007332 <__sfputc_r>:
 8007332:	6893      	ldr	r3, [r2, #8]
 8007334:	3b01      	subs	r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	b410      	push	{r4}
 800733a:	6093      	str	r3, [r2, #8]
 800733c:	da08      	bge.n	8007350 <__sfputc_r+0x1e>
 800733e:	6994      	ldr	r4, [r2, #24]
 8007340:	42a3      	cmp	r3, r4
 8007342:	db01      	blt.n	8007348 <__sfputc_r+0x16>
 8007344:	290a      	cmp	r1, #10
 8007346:	d103      	bne.n	8007350 <__sfputc_r+0x1e>
 8007348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800734c:	f000 b94a 	b.w	80075e4 <__swbuf_r>
 8007350:	6813      	ldr	r3, [r2, #0]
 8007352:	1c58      	adds	r0, r3, #1
 8007354:	6010      	str	r0, [r2, #0]
 8007356:	7019      	strb	r1, [r3, #0]
 8007358:	4608      	mov	r0, r1
 800735a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735e:	4770      	bx	lr

08007360 <__sfputs_r>:
 8007360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007362:	4606      	mov	r6, r0
 8007364:	460f      	mov	r7, r1
 8007366:	4614      	mov	r4, r2
 8007368:	18d5      	adds	r5, r2, r3
 800736a:	42ac      	cmp	r4, r5
 800736c:	d101      	bne.n	8007372 <__sfputs_r+0x12>
 800736e:	2000      	movs	r0, #0
 8007370:	e007      	b.n	8007382 <__sfputs_r+0x22>
 8007372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007376:	463a      	mov	r2, r7
 8007378:	4630      	mov	r0, r6
 800737a:	f7ff ffda 	bl	8007332 <__sfputc_r>
 800737e:	1c43      	adds	r3, r0, #1
 8007380:	d1f3      	bne.n	800736a <__sfputs_r+0xa>
 8007382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007384 <_vfiprintf_r>:
 8007384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007388:	460d      	mov	r5, r1
 800738a:	b09d      	sub	sp, #116	; 0x74
 800738c:	4614      	mov	r4, r2
 800738e:	4698      	mov	r8, r3
 8007390:	4606      	mov	r6, r0
 8007392:	b118      	cbz	r0, 800739c <_vfiprintf_r+0x18>
 8007394:	6983      	ldr	r3, [r0, #24]
 8007396:	b90b      	cbnz	r3, 800739c <_vfiprintf_r+0x18>
 8007398:	f000 fb14 	bl	80079c4 <__sinit>
 800739c:	4b89      	ldr	r3, [pc, #548]	; (80075c4 <_vfiprintf_r+0x240>)
 800739e:	429d      	cmp	r5, r3
 80073a0:	d11b      	bne.n	80073da <_vfiprintf_r+0x56>
 80073a2:	6875      	ldr	r5, [r6, #4]
 80073a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	d405      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073aa:	89ab      	ldrh	r3, [r5, #12]
 80073ac:	059a      	lsls	r2, r3, #22
 80073ae:	d402      	bmi.n	80073b6 <_vfiprintf_r+0x32>
 80073b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073b2:	f000 fba5 	bl	8007b00 <__retarget_lock_acquire_recursive>
 80073b6:	89ab      	ldrh	r3, [r5, #12]
 80073b8:	071b      	lsls	r3, r3, #28
 80073ba:	d501      	bpl.n	80073c0 <_vfiprintf_r+0x3c>
 80073bc:	692b      	ldr	r3, [r5, #16]
 80073be:	b9eb      	cbnz	r3, 80073fc <_vfiprintf_r+0x78>
 80073c0:	4629      	mov	r1, r5
 80073c2:	4630      	mov	r0, r6
 80073c4:	f000 f96e 	bl	80076a4 <__swsetup_r>
 80073c8:	b1c0      	cbz	r0, 80073fc <_vfiprintf_r+0x78>
 80073ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073cc:	07dc      	lsls	r4, r3, #31
 80073ce:	d50e      	bpl.n	80073ee <_vfiprintf_r+0x6a>
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	b01d      	add	sp, #116	; 0x74
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	4b7b      	ldr	r3, [pc, #492]	; (80075c8 <_vfiprintf_r+0x244>)
 80073dc:	429d      	cmp	r5, r3
 80073de:	d101      	bne.n	80073e4 <_vfiprintf_r+0x60>
 80073e0:	68b5      	ldr	r5, [r6, #8]
 80073e2:	e7df      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073e4:	4b79      	ldr	r3, [pc, #484]	; (80075cc <_vfiprintf_r+0x248>)
 80073e6:	429d      	cmp	r5, r3
 80073e8:	bf08      	it	eq
 80073ea:	68f5      	ldreq	r5, [r6, #12]
 80073ec:	e7da      	b.n	80073a4 <_vfiprintf_r+0x20>
 80073ee:	89ab      	ldrh	r3, [r5, #12]
 80073f0:	0598      	lsls	r0, r3, #22
 80073f2:	d4ed      	bmi.n	80073d0 <_vfiprintf_r+0x4c>
 80073f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073f6:	f000 fb84 	bl	8007b02 <__retarget_lock_release_recursive>
 80073fa:	e7e9      	b.n	80073d0 <_vfiprintf_r+0x4c>
 80073fc:	2300      	movs	r3, #0
 80073fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007400:	2320      	movs	r3, #32
 8007402:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007406:	f8cd 800c 	str.w	r8, [sp, #12]
 800740a:	2330      	movs	r3, #48	; 0x30
 800740c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075d0 <_vfiprintf_r+0x24c>
 8007410:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007414:	f04f 0901 	mov.w	r9, #1
 8007418:	4623      	mov	r3, r4
 800741a:	469a      	mov	sl, r3
 800741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007420:	b10a      	cbz	r2, 8007426 <_vfiprintf_r+0xa2>
 8007422:	2a25      	cmp	r2, #37	; 0x25
 8007424:	d1f9      	bne.n	800741a <_vfiprintf_r+0x96>
 8007426:	ebba 0b04 	subs.w	fp, sl, r4
 800742a:	d00b      	beq.n	8007444 <_vfiprintf_r+0xc0>
 800742c:	465b      	mov	r3, fp
 800742e:	4622      	mov	r2, r4
 8007430:	4629      	mov	r1, r5
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ff94 	bl	8007360 <__sfputs_r>
 8007438:	3001      	adds	r0, #1
 800743a:	f000 80aa 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800743e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007440:	445a      	add	r2, fp
 8007442:	9209      	str	r2, [sp, #36]	; 0x24
 8007444:	f89a 3000 	ldrb.w	r3, [sl]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 80a2 	beq.w	8007592 <_vfiprintf_r+0x20e>
 800744e:	2300      	movs	r3, #0
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007458:	f10a 0a01 	add.w	sl, sl, #1
 800745c:	9304      	str	r3, [sp, #16]
 800745e:	9307      	str	r3, [sp, #28]
 8007460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007464:	931a      	str	r3, [sp, #104]	; 0x68
 8007466:	4654      	mov	r4, sl
 8007468:	2205      	movs	r2, #5
 800746a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800746e:	4858      	ldr	r0, [pc, #352]	; (80075d0 <_vfiprintf_r+0x24c>)
 8007470:	f7f8 febe 	bl	80001f0 <memchr>
 8007474:	9a04      	ldr	r2, [sp, #16]
 8007476:	b9d8      	cbnz	r0, 80074b0 <_vfiprintf_r+0x12c>
 8007478:	06d1      	lsls	r1, r2, #27
 800747a:	bf44      	itt	mi
 800747c:	2320      	movmi	r3, #32
 800747e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007482:	0713      	lsls	r3, r2, #28
 8007484:	bf44      	itt	mi
 8007486:	232b      	movmi	r3, #43	; 0x2b
 8007488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800748c:	f89a 3000 	ldrb.w	r3, [sl]
 8007490:	2b2a      	cmp	r3, #42	; 0x2a
 8007492:	d015      	beq.n	80074c0 <_vfiprintf_r+0x13c>
 8007494:	9a07      	ldr	r2, [sp, #28]
 8007496:	4654      	mov	r4, sl
 8007498:	2000      	movs	r0, #0
 800749a:	f04f 0c0a 	mov.w	ip, #10
 800749e:	4621      	mov	r1, r4
 80074a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074a4:	3b30      	subs	r3, #48	; 0x30
 80074a6:	2b09      	cmp	r3, #9
 80074a8:	d94e      	bls.n	8007548 <_vfiprintf_r+0x1c4>
 80074aa:	b1b0      	cbz	r0, 80074da <_vfiprintf_r+0x156>
 80074ac:	9207      	str	r2, [sp, #28]
 80074ae:	e014      	b.n	80074da <_vfiprintf_r+0x156>
 80074b0:	eba0 0308 	sub.w	r3, r0, r8
 80074b4:	fa09 f303 	lsl.w	r3, r9, r3
 80074b8:	4313      	orrs	r3, r2
 80074ba:	9304      	str	r3, [sp, #16]
 80074bc:	46a2      	mov	sl, r4
 80074be:	e7d2      	b.n	8007466 <_vfiprintf_r+0xe2>
 80074c0:	9b03      	ldr	r3, [sp, #12]
 80074c2:	1d19      	adds	r1, r3, #4
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	9103      	str	r1, [sp, #12]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfbb      	ittet	lt
 80074cc:	425b      	neglt	r3, r3
 80074ce:	f042 0202 	orrlt.w	r2, r2, #2
 80074d2:	9307      	strge	r3, [sp, #28]
 80074d4:	9307      	strlt	r3, [sp, #28]
 80074d6:	bfb8      	it	lt
 80074d8:	9204      	strlt	r2, [sp, #16]
 80074da:	7823      	ldrb	r3, [r4, #0]
 80074dc:	2b2e      	cmp	r3, #46	; 0x2e
 80074de:	d10c      	bne.n	80074fa <_vfiprintf_r+0x176>
 80074e0:	7863      	ldrb	r3, [r4, #1]
 80074e2:	2b2a      	cmp	r3, #42	; 0x2a
 80074e4:	d135      	bne.n	8007552 <_vfiprintf_r+0x1ce>
 80074e6:	9b03      	ldr	r3, [sp, #12]
 80074e8:	1d1a      	adds	r2, r3, #4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	9203      	str	r2, [sp, #12]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	bfb8      	it	lt
 80074f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80074f6:	3402      	adds	r4, #2
 80074f8:	9305      	str	r3, [sp, #20]
 80074fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075e0 <_vfiprintf_r+0x25c>
 80074fe:	7821      	ldrb	r1, [r4, #0]
 8007500:	2203      	movs	r2, #3
 8007502:	4650      	mov	r0, sl
 8007504:	f7f8 fe74 	bl	80001f0 <memchr>
 8007508:	b140      	cbz	r0, 800751c <_vfiprintf_r+0x198>
 800750a:	2340      	movs	r3, #64	; 0x40
 800750c:	eba0 000a 	sub.w	r0, r0, sl
 8007510:	fa03 f000 	lsl.w	r0, r3, r0
 8007514:	9b04      	ldr	r3, [sp, #16]
 8007516:	4303      	orrs	r3, r0
 8007518:	3401      	adds	r4, #1
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007520:	482c      	ldr	r0, [pc, #176]	; (80075d4 <_vfiprintf_r+0x250>)
 8007522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007526:	2206      	movs	r2, #6
 8007528:	f7f8 fe62 	bl	80001f0 <memchr>
 800752c:	2800      	cmp	r0, #0
 800752e:	d03f      	beq.n	80075b0 <_vfiprintf_r+0x22c>
 8007530:	4b29      	ldr	r3, [pc, #164]	; (80075d8 <_vfiprintf_r+0x254>)
 8007532:	bb1b      	cbnz	r3, 800757c <_vfiprintf_r+0x1f8>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	3307      	adds	r3, #7
 8007538:	f023 0307 	bic.w	r3, r3, #7
 800753c:	3308      	adds	r3, #8
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007542:	443b      	add	r3, r7
 8007544:	9309      	str	r3, [sp, #36]	; 0x24
 8007546:	e767      	b.n	8007418 <_vfiprintf_r+0x94>
 8007548:	fb0c 3202 	mla	r2, ip, r2, r3
 800754c:	460c      	mov	r4, r1
 800754e:	2001      	movs	r0, #1
 8007550:	e7a5      	b.n	800749e <_vfiprintf_r+0x11a>
 8007552:	2300      	movs	r3, #0
 8007554:	3401      	adds	r4, #1
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	4619      	mov	r1, r3
 800755a:	f04f 0c0a 	mov.w	ip, #10
 800755e:	4620      	mov	r0, r4
 8007560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007564:	3a30      	subs	r2, #48	; 0x30
 8007566:	2a09      	cmp	r2, #9
 8007568:	d903      	bls.n	8007572 <_vfiprintf_r+0x1ee>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0c5      	beq.n	80074fa <_vfiprintf_r+0x176>
 800756e:	9105      	str	r1, [sp, #20]
 8007570:	e7c3      	b.n	80074fa <_vfiprintf_r+0x176>
 8007572:	fb0c 2101 	mla	r1, ip, r1, r2
 8007576:	4604      	mov	r4, r0
 8007578:	2301      	movs	r3, #1
 800757a:	e7f0      	b.n	800755e <_vfiprintf_r+0x1da>
 800757c:	ab03      	add	r3, sp, #12
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	462a      	mov	r2, r5
 8007582:	4b16      	ldr	r3, [pc, #88]	; (80075dc <_vfiprintf_r+0x258>)
 8007584:	a904      	add	r1, sp, #16
 8007586:	4630      	mov	r0, r6
 8007588:	f7fd fdd6 	bl	8005138 <_printf_float>
 800758c:	4607      	mov	r7, r0
 800758e:	1c78      	adds	r0, r7, #1
 8007590:	d1d6      	bne.n	8007540 <_vfiprintf_r+0x1bc>
 8007592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007594:	07d9      	lsls	r1, r3, #31
 8007596:	d405      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 8007598:	89ab      	ldrh	r3, [r5, #12]
 800759a:	059a      	lsls	r2, r3, #22
 800759c:	d402      	bmi.n	80075a4 <_vfiprintf_r+0x220>
 800759e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075a0:	f000 faaf 	bl	8007b02 <__retarget_lock_release_recursive>
 80075a4:	89ab      	ldrh	r3, [r5, #12]
 80075a6:	065b      	lsls	r3, r3, #25
 80075a8:	f53f af12 	bmi.w	80073d0 <_vfiprintf_r+0x4c>
 80075ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075ae:	e711      	b.n	80073d4 <_vfiprintf_r+0x50>
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <_vfiprintf_r+0x258>)
 80075b8:	a904      	add	r1, sp, #16
 80075ba:	4630      	mov	r0, r6
 80075bc:	f7fe f860 	bl	8005680 <_printf_i>
 80075c0:	e7e4      	b.n	800758c <_vfiprintf_r+0x208>
 80075c2:	bf00      	nop
 80075c4:	08009a0c 	.word	0x08009a0c
 80075c8:	08009a2c 	.word	0x08009a2c
 80075cc:	080099ec 	.word	0x080099ec
 80075d0:	08009894 	.word	0x08009894
 80075d4:	0800989e 	.word	0x0800989e
 80075d8:	08005139 	.word	0x08005139
 80075dc:	08007361 	.word	0x08007361
 80075e0:	0800989a 	.word	0x0800989a

080075e4 <__swbuf_r>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	460e      	mov	r6, r1
 80075e8:	4614      	mov	r4, r2
 80075ea:	4605      	mov	r5, r0
 80075ec:	b118      	cbz	r0, 80075f6 <__swbuf_r+0x12>
 80075ee:	6983      	ldr	r3, [r0, #24]
 80075f0:	b90b      	cbnz	r3, 80075f6 <__swbuf_r+0x12>
 80075f2:	f000 f9e7 	bl	80079c4 <__sinit>
 80075f6:	4b21      	ldr	r3, [pc, #132]	; (800767c <__swbuf_r+0x98>)
 80075f8:	429c      	cmp	r4, r3
 80075fa:	d12b      	bne.n	8007654 <__swbuf_r+0x70>
 80075fc:	686c      	ldr	r4, [r5, #4]
 80075fe:	69a3      	ldr	r3, [r4, #24]
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	89a3      	ldrh	r3, [r4, #12]
 8007604:	071a      	lsls	r2, r3, #28
 8007606:	d52f      	bpl.n	8007668 <__swbuf_r+0x84>
 8007608:	6923      	ldr	r3, [r4, #16]
 800760a:	b36b      	cbz	r3, 8007668 <__swbuf_r+0x84>
 800760c:	6923      	ldr	r3, [r4, #16]
 800760e:	6820      	ldr	r0, [r4, #0]
 8007610:	1ac0      	subs	r0, r0, r3
 8007612:	6963      	ldr	r3, [r4, #20]
 8007614:	b2f6      	uxtb	r6, r6
 8007616:	4283      	cmp	r3, r0
 8007618:	4637      	mov	r7, r6
 800761a:	dc04      	bgt.n	8007626 <__swbuf_r+0x42>
 800761c:	4621      	mov	r1, r4
 800761e:	4628      	mov	r0, r5
 8007620:	f000 f93c 	bl	800789c <_fflush_r>
 8007624:	bb30      	cbnz	r0, 8007674 <__swbuf_r+0x90>
 8007626:	68a3      	ldr	r3, [r4, #8]
 8007628:	3b01      	subs	r3, #1
 800762a:	60a3      	str	r3, [r4, #8]
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	6022      	str	r2, [r4, #0]
 8007632:	701e      	strb	r6, [r3, #0]
 8007634:	6963      	ldr	r3, [r4, #20]
 8007636:	3001      	adds	r0, #1
 8007638:	4283      	cmp	r3, r0
 800763a:	d004      	beq.n	8007646 <__swbuf_r+0x62>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	07db      	lsls	r3, r3, #31
 8007640:	d506      	bpl.n	8007650 <__swbuf_r+0x6c>
 8007642:	2e0a      	cmp	r6, #10
 8007644:	d104      	bne.n	8007650 <__swbuf_r+0x6c>
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f927 	bl	800789c <_fflush_r>
 800764e:	b988      	cbnz	r0, 8007674 <__swbuf_r+0x90>
 8007650:	4638      	mov	r0, r7
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	4b0a      	ldr	r3, [pc, #40]	; (8007680 <__swbuf_r+0x9c>)
 8007656:	429c      	cmp	r4, r3
 8007658:	d101      	bne.n	800765e <__swbuf_r+0x7a>
 800765a:	68ac      	ldr	r4, [r5, #8]
 800765c:	e7cf      	b.n	80075fe <__swbuf_r+0x1a>
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <__swbuf_r+0xa0>)
 8007660:	429c      	cmp	r4, r3
 8007662:	bf08      	it	eq
 8007664:	68ec      	ldreq	r4, [r5, #12]
 8007666:	e7ca      	b.n	80075fe <__swbuf_r+0x1a>
 8007668:	4621      	mov	r1, r4
 800766a:	4628      	mov	r0, r5
 800766c:	f000 f81a 	bl	80076a4 <__swsetup_r>
 8007670:	2800      	cmp	r0, #0
 8007672:	d0cb      	beq.n	800760c <__swbuf_r+0x28>
 8007674:	f04f 37ff 	mov.w	r7, #4294967295
 8007678:	e7ea      	b.n	8007650 <__swbuf_r+0x6c>
 800767a:	bf00      	nop
 800767c:	08009a0c 	.word	0x08009a0c
 8007680:	08009a2c 	.word	0x08009a2c
 8007684:	080099ec 	.word	0x080099ec

08007688 <__ascii_wctomb>:
 8007688:	b149      	cbz	r1, 800769e <__ascii_wctomb+0x16>
 800768a:	2aff      	cmp	r2, #255	; 0xff
 800768c:	bf85      	ittet	hi
 800768e:	238a      	movhi	r3, #138	; 0x8a
 8007690:	6003      	strhi	r3, [r0, #0]
 8007692:	700a      	strbls	r2, [r1, #0]
 8007694:	f04f 30ff 	movhi.w	r0, #4294967295
 8007698:	bf98      	it	ls
 800769a:	2001      	movls	r0, #1
 800769c:	4770      	bx	lr
 800769e:	4608      	mov	r0, r1
 80076a0:	4770      	bx	lr
	...

080076a4 <__swsetup_r>:
 80076a4:	4b32      	ldr	r3, [pc, #200]	; (8007770 <__swsetup_r+0xcc>)
 80076a6:	b570      	push	{r4, r5, r6, lr}
 80076a8:	681d      	ldr	r5, [r3, #0]
 80076aa:	4606      	mov	r6, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	b125      	cbz	r5, 80076ba <__swsetup_r+0x16>
 80076b0:	69ab      	ldr	r3, [r5, #24]
 80076b2:	b913      	cbnz	r3, 80076ba <__swsetup_r+0x16>
 80076b4:	4628      	mov	r0, r5
 80076b6:	f000 f985 	bl	80079c4 <__sinit>
 80076ba:	4b2e      	ldr	r3, [pc, #184]	; (8007774 <__swsetup_r+0xd0>)
 80076bc:	429c      	cmp	r4, r3
 80076be:	d10f      	bne.n	80076e0 <__swsetup_r+0x3c>
 80076c0:	686c      	ldr	r4, [r5, #4]
 80076c2:	89a3      	ldrh	r3, [r4, #12]
 80076c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076c8:	0719      	lsls	r1, r3, #28
 80076ca:	d42c      	bmi.n	8007726 <__swsetup_r+0x82>
 80076cc:	06dd      	lsls	r5, r3, #27
 80076ce:	d411      	bmi.n	80076f4 <__swsetup_r+0x50>
 80076d0:	2309      	movs	r3, #9
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80076d8:	81a3      	strh	r3, [r4, #12]
 80076da:	f04f 30ff 	mov.w	r0, #4294967295
 80076de:	e03e      	b.n	800775e <__swsetup_r+0xba>
 80076e0:	4b25      	ldr	r3, [pc, #148]	; (8007778 <__swsetup_r+0xd4>)
 80076e2:	429c      	cmp	r4, r3
 80076e4:	d101      	bne.n	80076ea <__swsetup_r+0x46>
 80076e6:	68ac      	ldr	r4, [r5, #8]
 80076e8:	e7eb      	b.n	80076c2 <__swsetup_r+0x1e>
 80076ea:	4b24      	ldr	r3, [pc, #144]	; (800777c <__swsetup_r+0xd8>)
 80076ec:	429c      	cmp	r4, r3
 80076ee:	bf08      	it	eq
 80076f0:	68ec      	ldreq	r4, [r5, #12]
 80076f2:	e7e6      	b.n	80076c2 <__swsetup_r+0x1e>
 80076f4:	0758      	lsls	r0, r3, #29
 80076f6:	d512      	bpl.n	800771e <__swsetup_r+0x7a>
 80076f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076fa:	b141      	cbz	r1, 800770e <__swsetup_r+0x6a>
 80076fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007700:	4299      	cmp	r1, r3
 8007702:	d002      	beq.n	800770a <__swsetup_r+0x66>
 8007704:	4630      	mov	r0, r6
 8007706:	f7ff fb31 	bl	8006d6c <_free_r>
 800770a:	2300      	movs	r3, #0
 800770c:	6363      	str	r3, [r4, #52]	; 0x34
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	2300      	movs	r3, #0
 8007718:	6063      	str	r3, [r4, #4]
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	89a3      	ldrh	r3, [r4, #12]
 8007720:	f043 0308 	orr.w	r3, r3, #8
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	b94b      	cbnz	r3, 800773e <__swsetup_r+0x9a>
 800772a:	89a3      	ldrh	r3, [r4, #12]
 800772c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007734:	d003      	beq.n	800773e <__swsetup_r+0x9a>
 8007736:	4621      	mov	r1, r4
 8007738:	4630      	mov	r0, r6
 800773a:	f000 fa09 	bl	8007b50 <__smakebuf_r>
 800773e:	89a0      	ldrh	r0, [r4, #12]
 8007740:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007744:	f010 0301 	ands.w	r3, r0, #1
 8007748:	d00a      	beq.n	8007760 <__swsetup_r+0xbc>
 800774a:	2300      	movs	r3, #0
 800774c:	60a3      	str	r3, [r4, #8]
 800774e:	6963      	ldr	r3, [r4, #20]
 8007750:	425b      	negs	r3, r3
 8007752:	61a3      	str	r3, [r4, #24]
 8007754:	6923      	ldr	r3, [r4, #16]
 8007756:	b943      	cbnz	r3, 800776a <__swsetup_r+0xc6>
 8007758:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800775c:	d1ba      	bne.n	80076d4 <__swsetup_r+0x30>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	0781      	lsls	r1, r0, #30
 8007762:	bf58      	it	pl
 8007764:	6963      	ldrpl	r3, [r4, #20]
 8007766:	60a3      	str	r3, [r4, #8]
 8007768:	e7f4      	b.n	8007754 <__swsetup_r+0xb0>
 800776a:	2000      	movs	r0, #0
 800776c:	e7f7      	b.n	800775e <__swsetup_r+0xba>
 800776e:	bf00      	nop
 8007770:	20000398 	.word	0x20000398
 8007774:	08009a0c 	.word	0x08009a0c
 8007778:	08009a2c 	.word	0x08009a2c
 800777c:	080099ec 	.word	0x080099ec

08007780 <abort>:
 8007780:	b508      	push	{r3, lr}
 8007782:	2006      	movs	r0, #6
 8007784:	f000 fa54 	bl	8007c30 <raise>
 8007788:	2001      	movs	r0, #1
 800778a:	f001 fc05 	bl	8008f98 <_exit>
	...

08007790 <__sflush_r>:
 8007790:	898a      	ldrh	r2, [r1, #12]
 8007792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	0710      	lsls	r0, r2, #28
 800779a:	460c      	mov	r4, r1
 800779c:	d458      	bmi.n	8007850 <__sflush_r+0xc0>
 800779e:	684b      	ldr	r3, [r1, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	dc05      	bgt.n	80077b0 <__sflush_r+0x20>
 80077a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dc02      	bgt.n	80077b0 <__sflush_r+0x20>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d0f9      	beq.n	80077aa <__sflush_r+0x1a>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077bc:	682f      	ldr	r7, [r5, #0]
 80077be:	602b      	str	r3, [r5, #0]
 80077c0:	d032      	beq.n	8007828 <__sflush_r+0x98>
 80077c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077c4:	89a3      	ldrh	r3, [r4, #12]
 80077c6:	075a      	lsls	r2, r3, #29
 80077c8:	d505      	bpl.n	80077d6 <__sflush_r+0x46>
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	1ac0      	subs	r0, r0, r3
 80077ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077d0:	b10b      	cbz	r3, 80077d6 <__sflush_r+0x46>
 80077d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077d4:	1ac0      	subs	r0, r0, r3
 80077d6:	2300      	movs	r3, #0
 80077d8:	4602      	mov	r2, r0
 80077da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077dc:	6a21      	ldr	r1, [r4, #32]
 80077de:	4628      	mov	r0, r5
 80077e0:	47b0      	blx	r6
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	d106      	bne.n	80077f6 <__sflush_r+0x66>
 80077e8:	6829      	ldr	r1, [r5, #0]
 80077ea:	291d      	cmp	r1, #29
 80077ec:	d82c      	bhi.n	8007848 <__sflush_r+0xb8>
 80077ee:	4a2a      	ldr	r2, [pc, #168]	; (8007898 <__sflush_r+0x108>)
 80077f0:	40ca      	lsrs	r2, r1
 80077f2:	07d6      	lsls	r6, r2, #31
 80077f4:	d528      	bpl.n	8007848 <__sflush_r+0xb8>
 80077f6:	2200      	movs	r2, #0
 80077f8:	6062      	str	r2, [r4, #4]
 80077fa:	04d9      	lsls	r1, r3, #19
 80077fc:	6922      	ldr	r2, [r4, #16]
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	d504      	bpl.n	800780c <__sflush_r+0x7c>
 8007802:	1c42      	adds	r2, r0, #1
 8007804:	d101      	bne.n	800780a <__sflush_r+0x7a>
 8007806:	682b      	ldr	r3, [r5, #0]
 8007808:	b903      	cbnz	r3, 800780c <__sflush_r+0x7c>
 800780a:	6560      	str	r0, [r4, #84]	; 0x54
 800780c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800780e:	602f      	str	r7, [r5, #0]
 8007810:	2900      	cmp	r1, #0
 8007812:	d0ca      	beq.n	80077aa <__sflush_r+0x1a>
 8007814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007818:	4299      	cmp	r1, r3
 800781a:	d002      	beq.n	8007822 <__sflush_r+0x92>
 800781c:	4628      	mov	r0, r5
 800781e:	f7ff faa5 	bl	8006d6c <_free_r>
 8007822:	2000      	movs	r0, #0
 8007824:	6360      	str	r0, [r4, #52]	; 0x34
 8007826:	e7c1      	b.n	80077ac <__sflush_r+0x1c>
 8007828:	6a21      	ldr	r1, [r4, #32]
 800782a:	2301      	movs	r3, #1
 800782c:	4628      	mov	r0, r5
 800782e:	47b0      	blx	r6
 8007830:	1c41      	adds	r1, r0, #1
 8007832:	d1c7      	bne.n	80077c4 <__sflush_r+0x34>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0c4      	beq.n	80077c4 <__sflush_r+0x34>
 800783a:	2b1d      	cmp	r3, #29
 800783c:	d001      	beq.n	8007842 <__sflush_r+0xb2>
 800783e:	2b16      	cmp	r3, #22
 8007840:	d101      	bne.n	8007846 <__sflush_r+0xb6>
 8007842:	602f      	str	r7, [r5, #0]
 8007844:	e7b1      	b.n	80077aa <__sflush_r+0x1a>
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784c:	81a3      	strh	r3, [r4, #12]
 800784e:	e7ad      	b.n	80077ac <__sflush_r+0x1c>
 8007850:	690f      	ldr	r7, [r1, #16]
 8007852:	2f00      	cmp	r7, #0
 8007854:	d0a9      	beq.n	80077aa <__sflush_r+0x1a>
 8007856:	0793      	lsls	r3, r2, #30
 8007858:	680e      	ldr	r6, [r1, #0]
 800785a:	bf08      	it	eq
 800785c:	694b      	ldreq	r3, [r1, #20]
 800785e:	600f      	str	r7, [r1, #0]
 8007860:	bf18      	it	ne
 8007862:	2300      	movne	r3, #0
 8007864:	eba6 0807 	sub.w	r8, r6, r7
 8007868:	608b      	str	r3, [r1, #8]
 800786a:	f1b8 0f00 	cmp.w	r8, #0
 800786e:	dd9c      	ble.n	80077aa <__sflush_r+0x1a>
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007874:	4643      	mov	r3, r8
 8007876:	463a      	mov	r2, r7
 8007878:	4628      	mov	r0, r5
 800787a:	47b0      	blx	r6
 800787c:	2800      	cmp	r0, #0
 800787e:	dc06      	bgt.n	800788e <__sflush_r+0xfe>
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007886:	81a3      	strh	r3, [r4, #12]
 8007888:	f04f 30ff 	mov.w	r0, #4294967295
 800788c:	e78e      	b.n	80077ac <__sflush_r+0x1c>
 800788e:	4407      	add	r7, r0
 8007890:	eba8 0800 	sub.w	r8, r8, r0
 8007894:	e7e9      	b.n	800786a <__sflush_r+0xda>
 8007896:	bf00      	nop
 8007898:	20400001 	.word	0x20400001

0800789c <_fflush_r>:
 800789c:	b538      	push	{r3, r4, r5, lr}
 800789e:	690b      	ldr	r3, [r1, #16]
 80078a0:	4605      	mov	r5, r0
 80078a2:	460c      	mov	r4, r1
 80078a4:	b913      	cbnz	r3, 80078ac <_fflush_r+0x10>
 80078a6:	2500      	movs	r5, #0
 80078a8:	4628      	mov	r0, r5
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	b118      	cbz	r0, 80078b6 <_fflush_r+0x1a>
 80078ae:	6983      	ldr	r3, [r0, #24]
 80078b0:	b90b      	cbnz	r3, 80078b6 <_fflush_r+0x1a>
 80078b2:	f000 f887 	bl	80079c4 <__sinit>
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <_fflush_r+0x6c>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d11b      	bne.n	80078f4 <_fflush_r+0x58>
 80078bc:	686c      	ldr	r4, [r5, #4]
 80078be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d0ef      	beq.n	80078a6 <_fflush_r+0xa>
 80078c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078c8:	07d0      	lsls	r0, r2, #31
 80078ca:	d404      	bmi.n	80078d6 <_fflush_r+0x3a>
 80078cc:	0599      	lsls	r1, r3, #22
 80078ce:	d402      	bmi.n	80078d6 <_fflush_r+0x3a>
 80078d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078d2:	f000 f915 	bl	8007b00 <__retarget_lock_acquire_recursive>
 80078d6:	4628      	mov	r0, r5
 80078d8:	4621      	mov	r1, r4
 80078da:	f7ff ff59 	bl	8007790 <__sflush_r>
 80078de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078e0:	07da      	lsls	r2, r3, #31
 80078e2:	4605      	mov	r5, r0
 80078e4:	d4e0      	bmi.n	80078a8 <_fflush_r+0xc>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	059b      	lsls	r3, r3, #22
 80078ea:	d4dd      	bmi.n	80078a8 <_fflush_r+0xc>
 80078ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ee:	f000 f908 	bl	8007b02 <__retarget_lock_release_recursive>
 80078f2:	e7d9      	b.n	80078a8 <_fflush_r+0xc>
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <_fflush_r+0x70>)
 80078f6:	429c      	cmp	r4, r3
 80078f8:	d101      	bne.n	80078fe <_fflush_r+0x62>
 80078fa:	68ac      	ldr	r4, [r5, #8]
 80078fc:	e7df      	b.n	80078be <_fflush_r+0x22>
 80078fe:	4b04      	ldr	r3, [pc, #16]	; (8007910 <_fflush_r+0x74>)
 8007900:	429c      	cmp	r4, r3
 8007902:	bf08      	it	eq
 8007904:	68ec      	ldreq	r4, [r5, #12]
 8007906:	e7da      	b.n	80078be <_fflush_r+0x22>
 8007908:	08009a0c 	.word	0x08009a0c
 800790c:	08009a2c 	.word	0x08009a2c
 8007910:	080099ec 	.word	0x080099ec

08007914 <std>:
 8007914:	2300      	movs	r3, #0
 8007916:	b510      	push	{r4, lr}
 8007918:	4604      	mov	r4, r0
 800791a:	e9c0 3300 	strd	r3, r3, [r0]
 800791e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007922:	6083      	str	r3, [r0, #8]
 8007924:	8181      	strh	r1, [r0, #12]
 8007926:	6643      	str	r3, [r0, #100]	; 0x64
 8007928:	81c2      	strh	r2, [r0, #14]
 800792a:	6183      	str	r3, [r0, #24]
 800792c:	4619      	mov	r1, r3
 800792e:	2208      	movs	r2, #8
 8007930:	305c      	adds	r0, #92	; 0x5c
 8007932:	f7fd fb59 	bl	8004fe8 <memset>
 8007936:	4b05      	ldr	r3, [pc, #20]	; (800794c <std+0x38>)
 8007938:	6263      	str	r3, [r4, #36]	; 0x24
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <std+0x3c>)
 800793c:	62a3      	str	r3, [r4, #40]	; 0x28
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <std+0x40>)
 8007940:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007942:	4b05      	ldr	r3, [pc, #20]	; (8007958 <std+0x44>)
 8007944:	6224      	str	r4, [r4, #32]
 8007946:	6323      	str	r3, [r4, #48]	; 0x30
 8007948:	bd10      	pop	{r4, pc}
 800794a:	bf00      	nop
 800794c:	08007c69 	.word	0x08007c69
 8007950:	08007c8b 	.word	0x08007c8b
 8007954:	08007cc3 	.word	0x08007cc3
 8007958:	08007ce7 	.word	0x08007ce7

0800795c <_cleanup_r>:
 800795c:	4901      	ldr	r1, [pc, #4]	; (8007964 <_cleanup_r+0x8>)
 800795e:	f000 b8af 	b.w	8007ac0 <_fwalk_reent>
 8007962:	bf00      	nop
 8007964:	0800789d 	.word	0x0800789d

08007968 <__sfmoreglue>:
 8007968:	b570      	push	{r4, r5, r6, lr}
 800796a:	2268      	movs	r2, #104	; 0x68
 800796c:	1e4d      	subs	r5, r1, #1
 800796e:	4355      	muls	r5, r2
 8007970:	460e      	mov	r6, r1
 8007972:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007976:	f7ff fa65 	bl	8006e44 <_malloc_r>
 800797a:	4604      	mov	r4, r0
 800797c:	b140      	cbz	r0, 8007990 <__sfmoreglue+0x28>
 800797e:	2100      	movs	r1, #0
 8007980:	e9c0 1600 	strd	r1, r6, [r0]
 8007984:	300c      	adds	r0, #12
 8007986:	60a0      	str	r0, [r4, #8]
 8007988:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800798c:	f7fd fb2c 	bl	8004fe8 <memset>
 8007990:	4620      	mov	r0, r4
 8007992:	bd70      	pop	{r4, r5, r6, pc}

08007994 <__sfp_lock_acquire>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__sfp_lock_acquire+0x8>)
 8007996:	f000 b8b3 	b.w	8007b00 <__retarget_lock_acquire_recursive>
 800799a:	bf00      	nop
 800799c:	20000709 	.word	0x20000709

080079a0 <__sfp_lock_release>:
 80079a0:	4801      	ldr	r0, [pc, #4]	; (80079a8 <__sfp_lock_release+0x8>)
 80079a2:	f000 b8ae 	b.w	8007b02 <__retarget_lock_release_recursive>
 80079a6:	bf00      	nop
 80079a8:	20000709 	.word	0x20000709

080079ac <__sinit_lock_acquire>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__sinit_lock_acquire+0x8>)
 80079ae:	f000 b8a7 	b.w	8007b00 <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	2000070a 	.word	0x2000070a

080079b8 <__sinit_lock_release>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__sinit_lock_release+0x8>)
 80079ba:	f000 b8a2 	b.w	8007b02 <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	2000070a 	.word	0x2000070a

080079c4 <__sinit>:
 80079c4:	b510      	push	{r4, lr}
 80079c6:	4604      	mov	r4, r0
 80079c8:	f7ff fff0 	bl	80079ac <__sinit_lock_acquire>
 80079cc:	69a3      	ldr	r3, [r4, #24]
 80079ce:	b11b      	cbz	r3, 80079d8 <__sinit+0x14>
 80079d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079d4:	f7ff bff0 	b.w	80079b8 <__sinit_lock_release>
 80079d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80079dc:	6523      	str	r3, [r4, #80]	; 0x50
 80079de:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <__sinit+0x68>)
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <__sinit+0x6c>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	bf04      	itt	eq
 80079ea:	2301      	moveq	r3, #1
 80079ec:	61a3      	streq	r3, [r4, #24]
 80079ee:	4620      	mov	r0, r4
 80079f0:	f000 f820 	bl	8007a34 <__sfp>
 80079f4:	6060      	str	r0, [r4, #4]
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f81c 	bl	8007a34 <__sfp>
 80079fc:	60a0      	str	r0, [r4, #8]
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 f818 	bl	8007a34 <__sfp>
 8007a04:	2200      	movs	r2, #0
 8007a06:	60e0      	str	r0, [r4, #12]
 8007a08:	2104      	movs	r1, #4
 8007a0a:	6860      	ldr	r0, [r4, #4]
 8007a0c:	f7ff ff82 	bl	8007914 <std>
 8007a10:	68a0      	ldr	r0, [r4, #8]
 8007a12:	2201      	movs	r2, #1
 8007a14:	2109      	movs	r1, #9
 8007a16:	f7ff ff7d 	bl	8007914 <std>
 8007a1a:	68e0      	ldr	r0, [r4, #12]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	2112      	movs	r1, #18
 8007a20:	f7ff ff78 	bl	8007914 <std>
 8007a24:	2301      	movs	r3, #1
 8007a26:	61a3      	str	r3, [r4, #24]
 8007a28:	e7d2      	b.n	80079d0 <__sinit+0xc>
 8007a2a:	bf00      	nop
 8007a2c:	08009670 	.word	0x08009670
 8007a30:	0800795d 	.word	0x0800795d

08007a34 <__sfp>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	4607      	mov	r7, r0
 8007a38:	f7ff ffac 	bl	8007994 <__sfp_lock_acquire>
 8007a3c:	4b1e      	ldr	r3, [pc, #120]	; (8007ab8 <__sfp+0x84>)
 8007a3e:	681e      	ldr	r6, [r3, #0]
 8007a40:	69b3      	ldr	r3, [r6, #24]
 8007a42:	b913      	cbnz	r3, 8007a4a <__sfp+0x16>
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff ffbd 	bl	80079c4 <__sinit>
 8007a4a:	3648      	adds	r6, #72	; 0x48
 8007a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	d503      	bpl.n	8007a5c <__sfp+0x28>
 8007a54:	6833      	ldr	r3, [r6, #0]
 8007a56:	b30b      	cbz	r3, 8007a9c <__sfp+0x68>
 8007a58:	6836      	ldr	r6, [r6, #0]
 8007a5a:	e7f7      	b.n	8007a4c <__sfp+0x18>
 8007a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a60:	b9d5      	cbnz	r5, 8007a98 <__sfp+0x64>
 8007a62:	4b16      	ldr	r3, [pc, #88]	; (8007abc <__sfp+0x88>)
 8007a64:	60e3      	str	r3, [r4, #12]
 8007a66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a6a:	6665      	str	r5, [r4, #100]	; 0x64
 8007a6c:	f000 f847 	bl	8007afe <__retarget_lock_init_recursive>
 8007a70:	f7ff ff96 	bl	80079a0 <__sfp_lock_release>
 8007a74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a7c:	6025      	str	r5, [r4, #0]
 8007a7e:	61a5      	str	r5, [r4, #24]
 8007a80:	2208      	movs	r2, #8
 8007a82:	4629      	mov	r1, r5
 8007a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a88:	f7fd faae 	bl	8004fe8 <memset>
 8007a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a94:	4620      	mov	r0, r4
 8007a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a98:	3468      	adds	r4, #104	; 0x68
 8007a9a:	e7d9      	b.n	8007a50 <__sfp+0x1c>
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7ff ff62 	bl	8007968 <__sfmoreglue>
 8007aa4:	4604      	mov	r4, r0
 8007aa6:	6030      	str	r0, [r6, #0]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1d5      	bne.n	8007a58 <__sfp+0x24>
 8007aac:	f7ff ff78 	bl	80079a0 <__sfp_lock_release>
 8007ab0:	230c      	movs	r3, #12
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	e7ee      	b.n	8007a94 <__sfp+0x60>
 8007ab6:	bf00      	nop
 8007ab8:	08009670 	.word	0x08009670
 8007abc:	ffff0001 	.word	0xffff0001

08007ac0 <_fwalk_reent>:
 8007ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	4688      	mov	r8, r1
 8007ac8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007acc:	2700      	movs	r7, #0
 8007ace:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ad2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ad6:	d505      	bpl.n	8007ae4 <_fwalk_reent+0x24>
 8007ad8:	6824      	ldr	r4, [r4, #0]
 8007ada:	2c00      	cmp	r4, #0
 8007adc:	d1f7      	bne.n	8007ace <_fwalk_reent+0xe>
 8007ade:	4638      	mov	r0, r7
 8007ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ae4:	89ab      	ldrh	r3, [r5, #12]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d907      	bls.n	8007afa <_fwalk_reent+0x3a>
 8007aea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aee:	3301      	adds	r3, #1
 8007af0:	d003      	beq.n	8007afa <_fwalk_reent+0x3a>
 8007af2:	4629      	mov	r1, r5
 8007af4:	4630      	mov	r0, r6
 8007af6:	47c0      	blx	r8
 8007af8:	4307      	orrs	r7, r0
 8007afa:	3568      	adds	r5, #104	; 0x68
 8007afc:	e7e9      	b.n	8007ad2 <_fwalk_reent+0x12>

08007afe <__retarget_lock_init_recursive>:
 8007afe:	4770      	bx	lr

08007b00 <__retarget_lock_acquire_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <__retarget_lock_release_recursive>:
 8007b02:	4770      	bx	lr

08007b04 <__swhatbuf_r>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	460e      	mov	r6, r1
 8007b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	b096      	sub	sp, #88	; 0x58
 8007b10:	4614      	mov	r4, r2
 8007b12:	461d      	mov	r5, r3
 8007b14:	da08      	bge.n	8007b28 <__swhatbuf_r+0x24>
 8007b16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	061a      	lsls	r2, r3, #24
 8007b20:	d410      	bmi.n	8007b44 <__swhatbuf_r+0x40>
 8007b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b26:	e00e      	b.n	8007b46 <__swhatbuf_r+0x42>
 8007b28:	466a      	mov	r2, sp
 8007b2a:	f000 f903 	bl	8007d34 <_fstat_r>
 8007b2e:	2800      	cmp	r0, #0
 8007b30:	dbf1      	blt.n	8007b16 <__swhatbuf_r+0x12>
 8007b32:	9a01      	ldr	r2, [sp, #4]
 8007b34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b3c:	425a      	negs	r2, r3
 8007b3e:	415a      	adcs	r2, r3
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	e7ee      	b.n	8007b22 <__swhatbuf_r+0x1e>
 8007b44:	2340      	movs	r3, #64	; 0x40
 8007b46:	2000      	movs	r0, #0
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	b016      	add	sp, #88	; 0x58
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b50 <__smakebuf_r>:
 8007b50:	898b      	ldrh	r3, [r1, #12]
 8007b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b54:	079d      	lsls	r5, r3, #30
 8007b56:	4606      	mov	r6, r0
 8007b58:	460c      	mov	r4, r1
 8007b5a:	d507      	bpl.n	8007b6c <__smakebuf_r+0x1c>
 8007b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b60:	6023      	str	r3, [r4, #0]
 8007b62:	6123      	str	r3, [r4, #16]
 8007b64:	2301      	movs	r3, #1
 8007b66:	6163      	str	r3, [r4, #20]
 8007b68:	b002      	add	sp, #8
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	ab01      	add	r3, sp, #4
 8007b6e:	466a      	mov	r2, sp
 8007b70:	f7ff ffc8 	bl	8007b04 <__swhatbuf_r>
 8007b74:	9900      	ldr	r1, [sp, #0]
 8007b76:	4605      	mov	r5, r0
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff f963 	bl	8006e44 <_malloc_r>
 8007b7e:	b948      	cbnz	r0, 8007b94 <__smakebuf_r+0x44>
 8007b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b84:	059a      	lsls	r2, r3, #22
 8007b86:	d4ef      	bmi.n	8007b68 <__smakebuf_r+0x18>
 8007b88:	f023 0303 	bic.w	r3, r3, #3
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	81a3      	strh	r3, [r4, #12]
 8007b92:	e7e3      	b.n	8007b5c <__smakebuf_r+0xc>
 8007b94:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <__smakebuf_r+0x7c>)
 8007b96:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	6020      	str	r0, [r4, #0]
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	81a3      	strh	r3, [r4, #12]
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	6163      	str	r3, [r4, #20]
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	6120      	str	r0, [r4, #16]
 8007baa:	b15b      	cbz	r3, 8007bc4 <__smakebuf_r+0x74>
 8007bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f000 f8d1 	bl	8007d58 <_isatty_r>
 8007bb6:	b128      	cbz	r0, 8007bc4 <__smakebuf_r+0x74>
 8007bb8:	89a3      	ldrh	r3, [r4, #12]
 8007bba:	f023 0303 	bic.w	r3, r3, #3
 8007bbe:	f043 0301 	orr.w	r3, r3, #1
 8007bc2:	81a3      	strh	r3, [r4, #12]
 8007bc4:	89a0      	ldrh	r0, [r4, #12]
 8007bc6:	4305      	orrs	r5, r0
 8007bc8:	81a5      	strh	r5, [r4, #12]
 8007bca:	e7cd      	b.n	8007b68 <__smakebuf_r+0x18>
 8007bcc:	0800795d 	.word	0x0800795d

08007bd0 <_malloc_usable_size_r>:
 8007bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd4:	1f18      	subs	r0, r3, #4
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bfbc      	itt	lt
 8007bda:	580b      	ldrlt	r3, [r1, r0]
 8007bdc:	18c0      	addlt	r0, r0, r3
 8007bde:	4770      	bx	lr

08007be0 <_raise_r>:
 8007be0:	291f      	cmp	r1, #31
 8007be2:	b538      	push	{r3, r4, r5, lr}
 8007be4:	4604      	mov	r4, r0
 8007be6:	460d      	mov	r5, r1
 8007be8:	d904      	bls.n	8007bf4 <_raise_r+0x14>
 8007bea:	2316      	movs	r3, #22
 8007bec:	6003      	str	r3, [r0, #0]
 8007bee:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bf6:	b112      	cbz	r2, 8007bfe <_raise_r+0x1e>
 8007bf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bfc:	b94b      	cbnz	r3, 8007c12 <_raise_r+0x32>
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 f830 	bl	8007c64 <_getpid_r>
 8007c04:	462a      	mov	r2, r5
 8007c06:	4601      	mov	r1, r0
 8007c08:	4620      	mov	r0, r4
 8007c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c0e:	f000 b817 	b.w	8007c40 <_kill_r>
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d00a      	beq.n	8007c2c <_raise_r+0x4c>
 8007c16:	1c59      	adds	r1, r3, #1
 8007c18:	d103      	bne.n	8007c22 <_raise_r+0x42>
 8007c1a:	2316      	movs	r3, #22
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	2001      	movs	r0, #1
 8007c20:	e7e7      	b.n	8007bf2 <_raise_r+0x12>
 8007c22:	2400      	movs	r4, #0
 8007c24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c28:	4628      	mov	r0, r5
 8007c2a:	4798      	blx	r3
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	e7e0      	b.n	8007bf2 <_raise_r+0x12>

08007c30 <raise>:
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <raise+0xc>)
 8007c32:	4601      	mov	r1, r0
 8007c34:	6818      	ldr	r0, [r3, #0]
 8007c36:	f7ff bfd3 	b.w	8007be0 <_raise_r>
 8007c3a:	bf00      	nop
 8007c3c:	20000398 	.word	0x20000398

08007c40 <_kill_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	; (8007c60 <_kill_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f001 f975 	bl	8008f3c <_kill>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_kill_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_kill_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	20000704 	.word	0x20000704

08007c64 <_getpid_r>:
 8007c64:	f001 b95a 	b.w	8008f1c <_getpid>

08007c68 <__sread>:
 8007c68:	b510      	push	{r4, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c70:	f000 f894 	bl	8007d9c <_read_r>
 8007c74:	2800      	cmp	r0, #0
 8007c76:	bfab      	itete	ge
 8007c78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c7c:	181b      	addge	r3, r3, r0
 8007c7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c82:	bfac      	ite	ge
 8007c84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c86:	81a3      	strhlt	r3, [r4, #12]
 8007c88:	bd10      	pop	{r4, pc}

08007c8a <__swrite>:
 8007c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8e:	461f      	mov	r7, r3
 8007c90:	898b      	ldrh	r3, [r1, #12]
 8007c92:	05db      	lsls	r3, r3, #23
 8007c94:	4605      	mov	r5, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	4616      	mov	r6, r2
 8007c9a:	d505      	bpl.n	8007ca8 <__swrite+0x1e>
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f000 f868 	bl	8007d78 <_lseek_r>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	463b      	mov	r3, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbe:	f000 b817 	b.w	8007cf0 <_write_r>

08007cc2 <__sseek>:
 8007cc2:	b510      	push	{r4, lr}
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 f855 	bl	8007d78 <_lseek_r>
 8007cce:	1c43      	adds	r3, r0, #1
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	bf15      	itete	ne
 8007cd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cde:	81a3      	strheq	r3, [r4, #12]
 8007ce0:	bf18      	it	ne
 8007ce2:	81a3      	strhne	r3, [r4, #12]
 8007ce4:	bd10      	pop	{r4, pc}

08007ce6 <__sclose>:
 8007ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cea:	f000 b813 	b.w	8007d14 <_close_r>
	...

08007cf0 <_write_r>:
 8007cf0:	b538      	push	{r3, r4, r5, lr}
 8007cf2:	4d07      	ldr	r5, [pc, #28]	; (8007d10 <_write_r+0x20>)
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4611      	mov	r1, r2
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	602a      	str	r2, [r5, #0]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f001 f942 	bl	8008f88 <_write>
 8007d04:	1c43      	adds	r3, r0, #1
 8007d06:	d102      	bne.n	8007d0e <_write_r+0x1e>
 8007d08:	682b      	ldr	r3, [r5, #0]
 8007d0a:	b103      	cbz	r3, 8007d0e <_write_r+0x1e>
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	bd38      	pop	{r3, r4, r5, pc}
 8007d10:	20000704 	.word	0x20000704

08007d14 <_close_r>:
 8007d14:	b538      	push	{r3, r4, r5, lr}
 8007d16:	4d06      	ldr	r5, [pc, #24]	; (8007d30 <_close_r+0x1c>)
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4604      	mov	r4, r0
 8007d1c:	4608      	mov	r0, r1
 8007d1e:	602b      	str	r3, [r5, #0]
 8007d20:	f001 f8ec 	bl	8008efc <_close>
 8007d24:	1c43      	adds	r3, r0, #1
 8007d26:	d102      	bne.n	8007d2e <_close_r+0x1a>
 8007d28:	682b      	ldr	r3, [r5, #0]
 8007d2a:	b103      	cbz	r3, 8007d2e <_close_r+0x1a>
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	20000704 	.word	0x20000704

08007d34 <_fstat_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	4d07      	ldr	r5, [pc, #28]	; (8007d54 <_fstat_r+0x20>)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4608      	mov	r0, r1
 8007d3e:	4611      	mov	r1, r2
 8007d40:	602b      	str	r3, [r5, #0]
 8007d42:	f001 f8e3 	bl	8008f0c <_fstat>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	d102      	bne.n	8007d50 <_fstat_r+0x1c>
 8007d4a:	682b      	ldr	r3, [r5, #0]
 8007d4c:	b103      	cbz	r3, 8007d50 <_fstat_r+0x1c>
 8007d4e:	6023      	str	r3, [r4, #0]
 8007d50:	bd38      	pop	{r3, r4, r5, pc}
 8007d52:	bf00      	nop
 8007d54:	20000704 	.word	0x20000704

08007d58 <_isatty_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	; (8007d74 <_isatty_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f001 f8e2 	bl	8008f2c <_isatty>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_isatty_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_isatty_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000704 	.word	0x20000704

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_lseek_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f001 f8e0 	bl	8008f4c <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20000704 	.word	0x20000704

08007d9c <_read_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d07      	ldr	r5, [pc, #28]	; (8007dbc <_read_r+0x20>)
 8007da0:	4604      	mov	r4, r0
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	602a      	str	r2, [r5, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f001 f8d6 	bl	8008f5c <_read>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_read_r+0x1e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_read_r+0x1e>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000704 	.word	0x20000704

08007dc0 <cos>:
 8007dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007dc2:	ec53 2b10 	vmov	r2, r3, d0
 8007dc6:	4826      	ldr	r0, [pc, #152]	; (8007e60 <cos+0xa0>)
 8007dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dcc:	4281      	cmp	r1, r0
 8007dce:	dc06      	bgt.n	8007dde <cos+0x1e>
 8007dd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007e58 <cos+0x98>
 8007dd4:	b005      	add	sp, #20
 8007dd6:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dda:	f000 baa9 	b.w	8008330 <__kernel_cos>
 8007dde:	4821      	ldr	r0, [pc, #132]	; (8007e64 <cos+0xa4>)
 8007de0:	4281      	cmp	r1, r0
 8007de2:	dd09      	ble.n	8007df8 <cos+0x38>
 8007de4:	ee10 0a10 	vmov	r0, s0
 8007de8:	4619      	mov	r1, r3
 8007dea:	f7f8 fa55 	bl	8000298 <__aeabi_dsub>
 8007dee:	ec41 0b10 	vmov	d0, r0, r1
 8007df2:	b005      	add	sp, #20
 8007df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007df8:	4668      	mov	r0, sp
 8007dfa:	f000 f88d 	bl	8007f18 <__ieee754_rem_pio2>
 8007dfe:	f000 0003 	and.w	r0, r0, #3
 8007e02:	2801      	cmp	r0, #1
 8007e04:	d00b      	beq.n	8007e1e <cos+0x5e>
 8007e06:	2802      	cmp	r0, #2
 8007e08:	d016      	beq.n	8007e38 <cos+0x78>
 8007e0a:	b9e0      	cbnz	r0, 8007e46 <cos+0x86>
 8007e0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e10:	ed9d 0b00 	vldr	d0, [sp]
 8007e14:	f000 fa8c 	bl	8008330 <__kernel_cos>
 8007e18:	ec51 0b10 	vmov	r0, r1, d0
 8007e1c:	e7e7      	b.n	8007dee <cos+0x2e>
 8007e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e22:	ed9d 0b00 	vldr	d0, [sp]
 8007e26:	f000 fe9b 	bl	8008b60 <__kernel_sin>
 8007e2a:	ec53 2b10 	vmov	r2, r3, d0
 8007e2e:	ee10 0a10 	vmov	r0, s0
 8007e32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e36:	e7da      	b.n	8007dee <cos+0x2e>
 8007e38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e3c:	ed9d 0b00 	vldr	d0, [sp]
 8007e40:	f000 fa76 	bl	8008330 <__kernel_cos>
 8007e44:	e7f1      	b.n	8007e2a <cos+0x6a>
 8007e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e4a:	ed9d 0b00 	vldr	d0, [sp]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	f000 fe86 	bl	8008b60 <__kernel_sin>
 8007e54:	e7e0      	b.n	8007e18 <cos+0x58>
 8007e56:	bf00      	nop
	...
 8007e60:	3fe921fb 	.word	0x3fe921fb
 8007e64:	7fefffff 	.word	0x7fefffff

08007e68 <sin>:
 8007e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e6a:	ec53 2b10 	vmov	r2, r3, d0
 8007e6e:	4828      	ldr	r0, [pc, #160]	; (8007f10 <sin+0xa8>)
 8007e70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e74:	4281      	cmp	r1, r0
 8007e76:	dc07      	bgt.n	8007e88 <sin+0x20>
 8007e78:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f08 <sin+0xa0>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	b005      	add	sp, #20
 8007e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e84:	f000 be6c 	b.w	8008b60 <__kernel_sin>
 8007e88:	4822      	ldr	r0, [pc, #136]	; (8007f14 <sin+0xac>)
 8007e8a:	4281      	cmp	r1, r0
 8007e8c:	dd09      	ble.n	8007ea2 <sin+0x3a>
 8007e8e:	ee10 0a10 	vmov	r0, s0
 8007e92:	4619      	mov	r1, r3
 8007e94:	f7f8 fa00 	bl	8000298 <__aeabi_dsub>
 8007e98:	ec41 0b10 	vmov	d0, r0, r1
 8007e9c:	b005      	add	sp, #20
 8007e9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ea2:	4668      	mov	r0, sp
 8007ea4:	f000 f838 	bl	8007f18 <__ieee754_rem_pio2>
 8007ea8:	f000 0003 	and.w	r0, r0, #3
 8007eac:	2801      	cmp	r0, #1
 8007eae:	d00c      	beq.n	8007eca <sin+0x62>
 8007eb0:	2802      	cmp	r0, #2
 8007eb2:	d011      	beq.n	8007ed8 <sin+0x70>
 8007eb4:	b9f0      	cbnz	r0, 8007ef4 <sin+0x8c>
 8007eb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eba:	ed9d 0b00 	vldr	d0, [sp]
 8007ebe:	2001      	movs	r0, #1
 8007ec0:	f000 fe4e 	bl	8008b60 <__kernel_sin>
 8007ec4:	ec51 0b10 	vmov	r0, r1, d0
 8007ec8:	e7e6      	b.n	8007e98 <sin+0x30>
 8007eca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ece:	ed9d 0b00 	vldr	d0, [sp]
 8007ed2:	f000 fa2d 	bl	8008330 <__kernel_cos>
 8007ed6:	e7f5      	b.n	8007ec4 <sin+0x5c>
 8007ed8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007edc:	ed9d 0b00 	vldr	d0, [sp]
 8007ee0:	2001      	movs	r0, #1
 8007ee2:	f000 fe3d 	bl	8008b60 <__kernel_sin>
 8007ee6:	ec53 2b10 	vmov	r2, r3, d0
 8007eea:	ee10 0a10 	vmov	r0, s0
 8007eee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007ef2:	e7d1      	b.n	8007e98 <sin+0x30>
 8007ef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007ef8:	ed9d 0b00 	vldr	d0, [sp]
 8007efc:	f000 fa18 	bl	8008330 <__kernel_cos>
 8007f00:	e7f1      	b.n	8007ee6 <sin+0x7e>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
	...
 8007f10:	3fe921fb 	.word	0x3fe921fb
 8007f14:	7fefffff 	.word	0x7fefffff

08007f18 <__ieee754_rem_pio2>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	ed2d 8b02 	vpush	{d8}
 8007f20:	ec55 4b10 	vmov	r4, r5, d0
 8007f24:	4bca      	ldr	r3, [pc, #808]	; (8008250 <__ieee754_rem_pio2+0x338>)
 8007f26:	b08b      	sub	sp, #44	; 0x2c
 8007f28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007f2c:	4598      	cmp	r8, r3
 8007f2e:	4682      	mov	sl, r0
 8007f30:	9502      	str	r5, [sp, #8]
 8007f32:	dc08      	bgt.n	8007f46 <__ieee754_rem_pio2+0x2e>
 8007f34:	2200      	movs	r2, #0
 8007f36:	2300      	movs	r3, #0
 8007f38:	ed80 0b00 	vstr	d0, [r0]
 8007f3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007f40:	f04f 0b00 	mov.w	fp, #0
 8007f44:	e028      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 8007f46:	4bc3      	ldr	r3, [pc, #780]	; (8008254 <__ieee754_rem_pio2+0x33c>)
 8007f48:	4598      	cmp	r8, r3
 8007f4a:	dc78      	bgt.n	800803e <__ieee754_rem_pio2+0x126>
 8007f4c:	9b02      	ldr	r3, [sp, #8]
 8007f4e:	4ec2      	ldr	r6, [pc, #776]	; (8008258 <__ieee754_rem_pio2+0x340>)
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	ee10 0a10 	vmov	r0, s0
 8007f56:	a3b0      	add	r3, pc, #704	; (adr r3, 8008218 <__ieee754_rem_pio2+0x300>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	4629      	mov	r1, r5
 8007f5e:	dd39      	ble.n	8007fd4 <__ieee754_rem_pio2+0xbc>
 8007f60:	f7f8 f99a 	bl	8000298 <__aeabi_dsub>
 8007f64:	45b0      	cmp	r8, r6
 8007f66:	4604      	mov	r4, r0
 8007f68:	460d      	mov	r5, r1
 8007f6a:	d01b      	beq.n	8007fa4 <__ieee754_rem_pio2+0x8c>
 8007f6c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f7f8 f991 	bl	8000298 <__aeabi_dsub>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	e9ca 2300 	strd	r2, r3, [sl]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	4629      	mov	r1, r5
 8007f82:	f7f8 f989 	bl	8000298 <__aeabi_dsub>
 8007f86:	a3a6      	add	r3, pc, #664	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 f984 	bl	8000298 <__aeabi_dsub>
 8007f90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f94:	f04f 0b01 	mov.w	fp, #1
 8007f98:	4658      	mov	r0, fp
 8007f9a:	b00b      	add	sp, #44	; 0x2c
 8007f9c:	ecbd 8b02 	vpop	{d8}
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f975 	bl	8000298 <__aeabi_dsub>
 8007fae:	a3a0      	add	r3, pc, #640	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	460d      	mov	r5, r1
 8007fb8:	f7f8 f96e 	bl	8000298 <__aeabi_dsub>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9ca 2300 	strd	r2, r3, [sl]
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4629      	mov	r1, r5
 8007fc8:	f7f8 f966 	bl	8000298 <__aeabi_dsub>
 8007fcc:	a398      	add	r3, pc, #608	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	e7db      	b.n	8007f8c <__ieee754_rem_pio2+0x74>
 8007fd4:	f7f8 f962 	bl	800029c <__adddf3>
 8007fd8:	45b0      	cmp	r8, r6
 8007fda:	4604      	mov	r4, r0
 8007fdc:	460d      	mov	r5, r1
 8007fde:	d016      	beq.n	800800e <__ieee754_rem_pio2+0xf6>
 8007fe0:	a38f      	add	r3, pc, #572	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f959 	bl	800029c <__adddf3>
 8007fea:	4602      	mov	r2, r0
 8007fec:	460b      	mov	r3, r1
 8007fee:	e9ca 2300 	strd	r2, r3, [sl]
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7f8 f94f 	bl	8000298 <__aeabi_dsub>
 8007ffa:	a389      	add	r3, pc, #548	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8007ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008000:	f7f8 f94c 	bl	800029c <__adddf3>
 8008004:	f04f 3bff 	mov.w	fp, #4294967295
 8008008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800800c:	e7c4      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 800800e:	a386      	add	r3, pc, #536	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 8008010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008014:	f7f8 f942 	bl	800029c <__adddf3>
 8008018:	a385      	add	r3, pc, #532	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	4604      	mov	r4, r0
 8008020:	460d      	mov	r5, r1
 8008022:	f7f8 f93b 	bl	800029c <__adddf3>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	e9ca 2300 	strd	r2, r3, [sl]
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 f931 	bl	8000298 <__aeabi_dsub>
 8008036:	a37e      	add	r3, pc, #504	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	e7e0      	b.n	8008000 <__ieee754_rem_pio2+0xe8>
 800803e:	4b87      	ldr	r3, [pc, #540]	; (800825c <__ieee754_rem_pio2+0x344>)
 8008040:	4598      	cmp	r8, r3
 8008042:	f300 80d9 	bgt.w	80081f8 <__ieee754_rem_pio2+0x2e0>
 8008046:	f000 fe49 	bl	8008cdc <fabs>
 800804a:	ec55 4b10 	vmov	r4, r5, d0
 800804e:	ee10 0a10 	vmov	r0, s0
 8008052:	a379      	add	r3, pc, #484	; (adr r3, 8008238 <__ieee754_rem_pio2+0x320>)
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fad5 	bl	8000608 <__aeabi_dmul>
 800805e:	4b80      	ldr	r3, [pc, #512]	; (8008260 <__ieee754_rem_pio2+0x348>)
 8008060:	2200      	movs	r2, #0
 8008062:	f7f8 f91b 	bl	800029c <__adddf3>
 8008066:	f7f8 fd7f 	bl	8000b68 <__aeabi_d2iz>
 800806a:	4683      	mov	fp, r0
 800806c:	f7f8 fa62 	bl	8000534 <__aeabi_i2d>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	ec43 2b18 	vmov	d8, r2, r3
 8008078:	a367      	add	r3, pc, #412	; (adr r3, 8008218 <__ieee754_rem_pio2+0x300>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fac3 	bl	8000608 <__aeabi_dmul>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 f905 	bl	8000298 <__aeabi_dsub>
 800808e:	a364      	add	r3, pc, #400	; (adr r3, 8008220 <__ieee754_rem_pio2+0x308>)
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	ec51 0b18 	vmov	r0, r1, d8
 800809c:	f7f8 fab4 	bl	8000608 <__aeabi_dmul>
 80080a0:	f1bb 0f1f 	cmp.w	fp, #31
 80080a4:	4604      	mov	r4, r0
 80080a6:	460d      	mov	r5, r1
 80080a8:	dc0d      	bgt.n	80080c6 <__ieee754_rem_pio2+0x1ae>
 80080aa:	4b6e      	ldr	r3, [pc, #440]	; (8008264 <__ieee754_rem_pio2+0x34c>)
 80080ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 80080b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080b4:	4543      	cmp	r3, r8
 80080b6:	d006      	beq.n	80080c6 <__ieee754_rem_pio2+0x1ae>
 80080b8:	4622      	mov	r2, r4
 80080ba:	462b      	mov	r3, r5
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 f8ea 	bl	8000298 <__aeabi_dsub>
 80080c4:	e00f      	b.n	80080e6 <__ieee754_rem_pio2+0x1ce>
 80080c6:	462b      	mov	r3, r5
 80080c8:	4622      	mov	r2, r4
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 f8e3 	bl	8000298 <__aeabi_dsub>
 80080d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080d6:	9303      	str	r3, [sp, #12]
 80080d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80080e0:	f1b8 0f10 	cmp.w	r8, #16
 80080e4:	dc02      	bgt.n	80080ec <__ieee754_rem_pio2+0x1d4>
 80080e6:	e9ca 0100 	strd	r0, r1, [sl]
 80080ea:	e039      	b.n	8008160 <__ieee754_rem_pio2+0x248>
 80080ec:	a34e      	add	r3, pc, #312	; (adr r3, 8008228 <__ieee754_rem_pio2+0x310>)
 80080ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f2:	ec51 0b18 	vmov	r0, r1, d8
 80080f6:	f7f8 fa87 	bl	8000608 <__aeabi_dmul>
 80080fa:	4604      	mov	r4, r0
 80080fc:	460d      	mov	r5, r1
 80080fe:	4602      	mov	r2, r0
 8008100:	460b      	mov	r3, r1
 8008102:	4630      	mov	r0, r6
 8008104:	4639      	mov	r1, r7
 8008106:	f7f8 f8c7 	bl	8000298 <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4680      	mov	r8, r0
 8008110:	4689      	mov	r9, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 f8bf 	bl	8000298 <__aeabi_dsub>
 800811a:	4622      	mov	r2, r4
 800811c:	462b      	mov	r3, r5
 800811e:	f7f8 f8bb 	bl	8000298 <__aeabi_dsub>
 8008122:	a343      	add	r3, pc, #268	; (adr r3, 8008230 <__ieee754_rem_pio2+0x318>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	ec51 0b18 	vmov	r0, r1, d8
 8008130:	f7f8 fa6a 	bl	8000608 <__aeabi_dmul>
 8008134:	4622      	mov	r2, r4
 8008136:	462b      	mov	r3, r5
 8008138:	f7f8 f8ae 	bl	8000298 <__aeabi_dsub>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4604      	mov	r4, r0
 8008142:	460d      	mov	r5, r1
 8008144:	4640      	mov	r0, r8
 8008146:	4649      	mov	r1, r9
 8008148:	f7f8 f8a6 	bl	8000298 <__aeabi_dsub>
 800814c:	9a03      	ldr	r2, [sp, #12]
 800814e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b31      	cmp	r3, #49	; 0x31
 8008156:	dc24      	bgt.n	80081a2 <__ieee754_rem_pio2+0x28a>
 8008158:	e9ca 0100 	strd	r0, r1, [sl]
 800815c:	4646      	mov	r6, r8
 800815e:	464f      	mov	r7, r9
 8008160:	e9da 8900 	ldrd	r8, r9, [sl]
 8008164:	4630      	mov	r0, r6
 8008166:	4642      	mov	r2, r8
 8008168:	464b      	mov	r3, r9
 800816a:	4639      	mov	r1, r7
 800816c:	f7f8 f894 	bl	8000298 <__aeabi_dsub>
 8008170:	462b      	mov	r3, r5
 8008172:	4622      	mov	r2, r4
 8008174:	f7f8 f890 	bl	8000298 <__aeabi_dsub>
 8008178:	9b02      	ldr	r3, [sp, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008180:	f6bf af0a 	bge.w	8007f98 <__ieee754_rem_pio2+0x80>
 8008184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008188:	f8ca 3004 	str.w	r3, [sl, #4]
 800818c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008190:	f8ca 8000 	str.w	r8, [sl]
 8008194:	f8ca 0008 	str.w	r0, [sl, #8]
 8008198:	f8ca 300c 	str.w	r3, [sl, #12]
 800819c:	f1cb 0b00 	rsb	fp, fp, #0
 80081a0:	e6fa      	b.n	8007f98 <__ieee754_rem_pio2+0x80>
 80081a2:	a327      	add	r3, pc, #156	; (adr r3, 8008240 <__ieee754_rem_pio2+0x328>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	ec51 0b18 	vmov	r0, r1, d8
 80081ac:	f7f8 fa2c 	bl	8000608 <__aeabi_dmul>
 80081b0:	4604      	mov	r4, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4640      	mov	r0, r8
 80081ba:	4649      	mov	r1, r9
 80081bc:	f7f8 f86c 	bl	8000298 <__aeabi_dsub>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4606      	mov	r6, r0
 80081c6:	460f      	mov	r7, r1
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	f7f8 f864 	bl	8000298 <__aeabi_dsub>
 80081d0:	4622      	mov	r2, r4
 80081d2:	462b      	mov	r3, r5
 80081d4:	f7f8 f860 	bl	8000298 <__aeabi_dsub>
 80081d8:	a31b      	add	r3, pc, #108	; (adr r3, 8008248 <__ieee754_rem_pio2+0x330>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	4604      	mov	r4, r0
 80081e0:	460d      	mov	r5, r1
 80081e2:	ec51 0b18 	vmov	r0, r1, d8
 80081e6:	f7f8 fa0f 	bl	8000608 <__aeabi_dmul>
 80081ea:	4622      	mov	r2, r4
 80081ec:	462b      	mov	r3, r5
 80081ee:	f7f8 f853 	bl	8000298 <__aeabi_dsub>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
 80081f6:	e75f      	b.n	80080b8 <__ieee754_rem_pio2+0x1a0>
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <__ieee754_rem_pio2+0x350>)
 80081fa:	4598      	cmp	r8, r3
 80081fc:	dd36      	ble.n	800826c <__ieee754_rem_pio2+0x354>
 80081fe:	ee10 2a10 	vmov	r2, s0
 8008202:	462b      	mov	r3, r5
 8008204:	4620      	mov	r0, r4
 8008206:	4629      	mov	r1, r5
 8008208:	f7f8 f846 	bl	8000298 <__aeabi_dsub>
 800820c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008210:	e9ca 0100 	strd	r0, r1, [sl]
 8008214:	e694      	b.n	8007f40 <__ieee754_rem_pio2+0x28>
 8008216:	bf00      	nop
 8008218:	54400000 	.word	0x54400000
 800821c:	3ff921fb 	.word	0x3ff921fb
 8008220:	1a626331 	.word	0x1a626331
 8008224:	3dd0b461 	.word	0x3dd0b461
 8008228:	1a600000 	.word	0x1a600000
 800822c:	3dd0b461 	.word	0x3dd0b461
 8008230:	2e037073 	.word	0x2e037073
 8008234:	3ba3198a 	.word	0x3ba3198a
 8008238:	6dc9c883 	.word	0x6dc9c883
 800823c:	3fe45f30 	.word	0x3fe45f30
 8008240:	2e000000 	.word	0x2e000000
 8008244:	3ba3198a 	.word	0x3ba3198a
 8008248:	252049c1 	.word	0x252049c1
 800824c:	397b839a 	.word	0x397b839a
 8008250:	3fe921fb 	.word	0x3fe921fb
 8008254:	4002d97b 	.word	0x4002d97b
 8008258:	3ff921fb 	.word	0x3ff921fb
 800825c:	413921fb 	.word	0x413921fb
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	08009a4c 	.word	0x08009a4c
 8008268:	7fefffff 	.word	0x7fefffff
 800826c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008270:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008274:	ee10 0a10 	vmov	r0, s0
 8008278:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800827c:	ee10 6a10 	vmov	r6, s0
 8008280:	460f      	mov	r7, r1
 8008282:	f7f8 fc71 	bl	8000b68 <__aeabi_d2iz>
 8008286:	f7f8 f955 	bl	8000534 <__aeabi_i2d>
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008296:	f7f7 ffff 	bl	8000298 <__aeabi_dsub>
 800829a:	4b23      	ldr	r3, [pc, #140]	; (8008328 <__ieee754_rem_pio2+0x410>)
 800829c:	2200      	movs	r2, #0
 800829e:	f7f8 f9b3 	bl	8000608 <__aeabi_dmul>
 80082a2:	460f      	mov	r7, r1
 80082a4:	4606      	mov	r6, r0
 80082a6:	f7f8 fc5f 	bl	8000b68 <__aeabi_d2iz>
 80082aa:	f7f8 f943 	bl	8000534 <__aeabi_i2d>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082ba:	f7f7 ffed 	bl	8000298 <__aeabi_dsub>
 80082be:	4b1a      	ldr	r3, [pc, #104]	; (8008328 <__ieee754_rem_pio2+0x410>)
 80082c0:	2200      	movs	r2, #0
 80082c2:	f7f8 f9a1 	bl	8000608 <__aeabi_dmul>
 80082c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082ca:	ad04      	add	r5, sp, #16
 80082cc:	f04f 0803 	mov.w	r8, #3
 80082d0:	46a9      	mov	r9, r5
 80082d2:	2600      	movs	r6, #0
 80082d4:	2700      	movs	r7, #0
 80082d6:	4632      	mov	r2, r6
 80082d8:	463b      	mov	r3, r7
 80082da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80082de:	46c3      	mov	fp, r8
 80082e0:	3d08      	subs	r5, #8
 80082e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80082e6:	f7f8 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d1f3      	bne.n	80082d6 <__ieee754_rem_pio2+0x3be>
 80082ee:	4b0f      	ldr	r3, [pc, #60]	; (800832c <__ieee754_rem_pio2+0x414>)
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2302      	movs	r3, #2
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4622      	mov	r2, r4
 80082f8:	465b      	mov	r3, fp
 80082fa:	4651      	mov	r1, sl
 80082fc:	4648      	mov	r0, r9
 80082fe:	f000 f8df 	bl	80084c0 <__kernel_rem_pio2>
 8008302:	9b02      	ldr	r3, [sp, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	4683      	mov	fp, r0
 8008308:	f6bf ae46 	bge.w	8007f98 <__ieee754_rem_pio2+0x80>
 800830c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008310:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008314:	e9ca 2300 	strd	r2, r3, [sl]
 8008318:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800831c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008320:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008324:	e73a      	b.n	800819c <__ieee754_rem_pio2+0x284>
 8008326:	bf00      	nop
 8008328:	41700000 	.word	0x41700000
 800832c:	08009acc 	.word	0x08009acc

08008330 <__kernel_cos>:
 8008330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	ec57 6b10 	vmov	r6, r7, d0
 8008338:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800833c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008340:	ed8d 1b00 	vstr	d1, [sp]
 8008344:	da07      	bge.n	8008356 <__kernel_cos+0x26>
 8008346:	ee10 0a10 	vmov	r0, s0
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fc0c 	bl	8000b68 <__aeabi_d2iz>
 8008350:	2800      	cmp	r0, #0
 8008352:	f000 8088 	beq.w	8008466 <__kernel_cos+0x136>
 8008356:	4632      	mov	r2, r6
 8008358:	463b      	mov	r3, r7
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f8 f953 	bl	8000608 <__aeabi_dmul>
 8008362:	4b51      	ldr	r3, [pc, #324]	; (80084a8 <__kernel_cos+0x178>)
 8008364:	2200      	movs	r2, #0
 8008366:	4604      	mov	r4, r0
 8008368:	460d      	mov	r5, r1
 800836a:	f7f8 f94d 	bl	8000608 <__aeabi_dmul>
 800836e:	a340      	add	r3, pc, #256	; (adr r3, 8008470 <__kernel_cos+0x140>)
 8008370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008374:	4682      	mov	sl, r0
 8008376:	468b      	mov	fp, r1
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	a33d      	add	r3, pc, #244	; (adr r3, 8008478 <__kernel_cos+0x148>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f7 ff89 	bl	800029c <__adddf3>
 800838a:	4622      	mov	r2, r4
 800838c:	462b      	mov	r3, r5
 800838e:	f7f8 f93b 	bl	8000608 <__aeabi_dmul>
 8008392:	a33b      	add	r3, pc, #236	; (adr r3, 8008480 <__kernel_cos+0x150>)
 8008394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008398:	f7f7 ff7e 	bl	8000298 <__aeabi_dsub>
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 f932 	bl	8000608 <__aeabi_dmul>
 80083a4:	a338      	add	r3, pc, #224	; (adr r3, 8008488 <__kernel_cos+0x158>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff77 	bl	800029c <__adddf3>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f8 f929 	bl	8000608 <__aeabi_dmul>
 80083b6:	a336      	add	r3, pc, #216	; (adr r3, 8008490 <__kernel_cos+0x160>)
 80083b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083bc:	f7f7 ff6c 	bl	8000298 <__aeabi_dsub>
 80083c0:	4622      	mov	r2, r4
 80083c2:	462b      	mov	r3, r5
 80083c4:	f7f8 f920 	bl	8000608 <__aeabi_dmul>
 80083c8:	a333      	add	r3, pc, #204	; (adr r3, 8008498 <__kernel_cos+0x168>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff65 	bl	800029c <__adddf3>
 80083d2:	4622      	mov	r2, r4
 80083d4:	462b      	mov	r3, r5
 80083d6:	f7f8 f917 	bl	8000608 <__aeabi_dmul>
 80083da:	4622      	mov	r2, r4
 80083dc:	462b      	mov	r3, r5
 80083de:	f7f8 f913 	bl	8000608 <__aeabi_dmul>
 80083e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083e6:	4604      	mov	r4, r0
 80083e8:	460d      	mov	r5, r1
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f8 f90b 	bl	8000608 <__aeabi_dmul>
 80083f2:	460b      	mov	r3, r1
 80083f4:	4602      	mov	r2, r0
 80083f6:	4629      	mov	r1, r5
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7f7 ff4d 	bl	8000298 <__aeabi_dsub>
 80083fe:	4b2b      	ldr	r3, [pc, #172]	; (80084ac <__kernel_cos+0x17c>)
 8008400:	4598      	cmp	r8, r3
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	dc10      	bgt.n	800842a <__kernel_cos+0xfa>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4650      	mov	r0, sl
 800840e:	4659      	mov	r1, fp
 8008410:	f7f7 ff42 	bl	8000298 <__aeabi_dsub>
 8008414:	460b      	mov	r3, r1
 8008416:	4926      	ldr	r1, [pc, #152]	; (80084b0 <__kernel_cos+0x180>)
 8008418:	4602      	mov	r2, r0
 800841a:	2000      	movs	r0, #0
 800841c:	f7f7 ff3c 	bl	8000298 <__aeabi_dsub>
 8008420:	ec41 0b10 	vmov	d0, r0, r1
 8008424:	b003      	add	sp, #12
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	4b22      	ldr	r3, [pc, #136]	; (80084b4 <__kernel_cos+0x184>)
 800842c:	4920      	ldr	r1, [pc, #128]	; (80084b0 <__kernel_cos+0x180>)
 800842e:	4598      	cmp	r8, r3
 8008430:	bfcc      	ite	gt
 8008432:	4d21      	ldrgt	r5, [pc, #132]	; (80084b8 <__kernel_cos+0x188>)
 8008434:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008438:	2400      	movs	r4, #0
 800843a:	4622      	mov	r2, r4
 800843c:	462b      	mov	r3, r5
 800843e:	2000      	movs	r0, #0
 8008440:	f7f7 ff2a 	bl	8000298 <__aeabi_dsub>
 8008444:	4622      	mov	r2, r4
 8008446:	4680      	mov	r8, r0
 8008448:	4689      	mov	r9, r1
 800844a:	462b      	mov	r3, r5
 800844c:	4650      	mov	r0, sl
 800844e:	4659      	mov	r1, fp
 8008450:	f7f7 ff22 	bl	8000298 <__aeabi_dsub>
 8008454:	4632      	mov	r2, r6
 8008456:	463b      	mov	r3, r7
 8008458:	f7f7 ff1e 	bl	8000298 <__aeabi_dsub>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	4640      	mov	r0, r8
 8008462:	4649      	mov	r1, r9
 8008464:	e7da      	b.n	800841c <__kernel_cos+0xec>
 8008466:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80084a0 <__kernel_cos+0x170>
 800846a:	e7db      	b.n	8008424 <__kernel_cos+0xf4>
 800846c:	f3af 8000 	nop.w
 8008470:	be8838d4 	.word	0xbe8838d4
 8008474:	bda8fae9 	.word	0xbda8fae9
 8008478:	bdb4b1c4 	.word	0xbdb4b1c4
 800847c:	3e21ee9e 	.word	0x3e21ee9e
 8008480:	809c52ad 	.word	0x809c52ad
 8008484:	3e927e4f 	.word	0x3e927e4f
 8008488:	19cb1590 	.word	0x19cb1590
 800848c:	3efa01a0 	.word	0x3efa01a0
 8008490:	16c15177 	.word	0x16c15177
 8008494:	3f56c16c 	.word	0x3f56c16c
 8008498:	5555554c 	.word	0x5555554c
 800849c:	3fa55555 	.word	0x3fa55555
 80084a0:	00000000 	.word	0x00000000
 80084a4:	3ff00000 	.word	0x3ff00000
 80084a8:	3fe00000 	.word	0x3fe00000
 80084ac:	3fd33332 	.word	0x3fd33332
 80084b0:	3ff00000 	.word	0x3ff00000
 80084b4:	3fe90000 	.word	0x3fe90000
 80084b8:	3fd20000 	.word	0x3fd20000
 80084bc:	00000000 	.word	0x00000000

080084c0 <__kernel_rem_pio2>:
 80084c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c4:	ed2d 8b02 	vpush	{d8}
 80084c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80084cc:	f112 0f14 	cmn.w	r2, #20
 80084d0:	9308      	str	r3, [sp, #32]
 80084d2:	9101      	str	r1, [sp, #4]
 80084d4:	4bc4      	ldr	r3, [pc, #784]	; (80087e8 <__kernel_rem_pio2+0x328>)
 80084d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80084d8:	900b      	str	r0, [sp, #44]	; 0x2c
 80084da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	9b08      	ldr	r3, [sp, #32]
 80084e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084e6:	bfa8      	it	ge
 80084e8:	1ed4      	subge	r4, r2, #3
 80084ea:	9306      	str	r3, [sp, #24]
 80084ec:	bfb2      	itee	lt
 80084ee:	2400      	movlt	r4, #0
 80084f0:	2318      	movge	r3, #24
 80084f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80084f6:	f06f 0317 	mvn.w	r3, #23
 80084fa:	fb04 3303 	mla	r3, r4, r3, r3
 80084fe:	eb03 0a02 	add.w	sl, r3, r2
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	9a06      	ldr	r2, [sp, #24]
 8008506:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80087d8 <__kernel_rem_pio2+0x318>
 800850a:	eb03 0802 	add.w	r8, r3, r2
 800850e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008510:	1aa7      	subs	r7, r4, r2
 8008512:	ae22      	add	r6, sp, #136	; 0x88
 8008514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008518:	2500      	movs	r5, #0
 800851a:	4545      	cmp	r5, r8
 800851c:	dd13      	ble.n	8008546 <__kernel_rem_pio2+0x86>
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80087d8 <__kernel_rem_pio2+0x318>
 8008524:	aa22      	add	r2, sp, #136	; 0x88
 8008526:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800852a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	9b02      	ldr	r3, [sp, #8]
 8008534:	4598      	cmp	r8, r3
 8008536:	dc2f      	bgt.n	8008598 <__kernel_rem_pio2+0xd8>
 8008538:	ed8d 8b04 	vstr	d8, [sp, #16]
 800853c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008540:	462f      	mov	r7, r5
 8008542:	2600      	movs	r6, #0
 8008544:	e01b      	b.n	800857e <__kernel_rem_pio2+0xbe>
 8008546:	42ef      	cmn	r7, r5
 8008548:	d407      	bmi.n	800855a <__kernel_rem_pio2+0x9a>
 800854a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800854e:	f7f7 fff1 	bl	8000534 <__aeabi_i2d>
 8008552:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008556:	3501      	adds	r5, #1
 8008558:	e7df      	b.n	800851a <__kernel_rem_pio2+0x5a>
 800855a:	ec51 0b18 	vmov	r0, r1, d8
 800855e:	e7f8      	b.n	8008552 <__kernel_rem_pio2+0x92>
 8008560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008564:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008568:	f7f8 f84e 	bl	8000608 <__aeabi_dmul>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008574:	f7f7 fe92 	bl	800029c <__adddf3>
 8008578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800857c:	3601      	adds	r6, #1
 800857e:	9b06      	ldr	r3, [sp, #24]
 8008580:	429e      	cmp	r6, r3
 8008582:	f1a7 0708 	sub.w	r7, r7, #8
 8008586:	ddeb      	ble.n	8008560 <__kernel_rem_pio2+0xa0>
 8008588:	ed9d 7b04 	vldr	d7, [sp, #16]
 800858c:	f108 0801 	add.w	r8, r8, #1
 8008590:	ecab 7b02 	vstmia	fp!, {d7}
 8008594:	3508      	adds	r5, #8
 8008596:	e7cc      	b.n	8008532 <__kernel_rem_pio2+0x72>
 8008598:	9b02      	ldr	r3, [sp, #8]
 800859a:	aa0e      	add	r2, sp, #56	; 0x38
 800859c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085a0:	930d      	str	r3, [sp, #52]	; 0x34
 80085a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80085a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80085a8:	9c02      	ldr	r4, [sp, #8]
 80085aa:	930c      	str	r3, [sp, #48]	; 0x30
 80085ac:	00e3      	lsls	r3, r4, #3
 80085ae:	930a      	str	r3, [sp, #40]	; 0x28
 80085b0:	ab9a      	add	r3, sp, #616	; 0x268
 80085b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80085ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80085be:	ab72      	add	r3, sp, #456	; 0x1c8
 80085c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80085c4:	46c3      	mov	fp, r8
 80085c6:	46a1      	mov	r9, r4
 80085c8:	f1b9 0f00 	cmp.w	r9, #0
 80085cc:	f1a5 0508 	sub.w	r5, r5, #8
 80085d0:	dc77      	bgt.n	80086c2 <__kernel_rem_pio2+0x202>
 80085d2:	ec47 6b10 	vmov	d0, r6, r7
 80085d6:	4650      	mov	r0, sl
 80085d8:	f000 fc0a 	bl	8008df0 <scalbn>
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	2200      	movs	r2, #0
 80085e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80085e6:	ee10 0a10 	vmov	r0, s0
 80085ea:	4639      	mov	r1, r7
 80085ec:	f7f8 f80c 	bl	8000608 <__aeabi_dmul>
 80085f0:	ec41 0b10 	vmov	d0, r0, r1
 80085f4:	f000 fb7c 	bl	8008cf0 <floor>
 80085f8:	4b7c      	ldr	r3, [pc, #496]	; (80087ec <__kernel_rem_pio2+0x32c>)
 80085fa:	ec51 0b10 	vmov	r0, r1, d0
 80085fe:	2200      	movs	r2, #0
 8008600:	f7f8 f802 	bl	8000608 <__aeabi_dmul>
 8008604:	4602      	mov	r2, r0
 8008606:	460b      	mov	r3, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f7 fe44 	bl	8000298 <__aeabi_dsub>
 8008610:	460f      	mov	r7, r1
 8008612:	4606      	mov	r6, r0
 8008614:	f7f8 faa8 	bl	8000b68 <__aeabi_d2iz>
 8008618:	9004      	str	r0, [sp, #16]
 800861a:	f7f7 ff8b 	bl	8000534 <__aeabi_i2d>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4630      	mov	r0, r6
 8008624:	4639      	mov	r1, r7
 8008626:	f7f7 fe37 	bl	8000298 <__aeabi_dsub>
 800862a:	f1ba 0f00 	cmp.w	sl, #0
 800862e:	4606      	mov	r6, r0
 8008630:	460f      	mov	r7, r1
 8008632:	dd6d      	ble.n	8008710 <__kernel_rem_pio2+0x250>
 8008634:	1e62      	subs	r2, r4, #1
 8008636:	ab0e      	add	r3, sp, #56	; 0x38
 8008638:	9d04      	ldr	r5, [sp, #16]
 800863a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800863e:	f1ca 0118 	rsb	r1, sl, #24
 8008642:	fa40 f301 	asr.w	r3, r0, r1
 8008646:	441d      	add	r5, r3
 8008648:	408b      	lsls	r3, r1
 800864a:	1ac0      	subs	r0, r0, r3
 800864c:	ab0e      	add	r3, sp, #56	; 0x38
 800864e:	9504      	str	r5, [sp, #16]
 8008650:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008654:	f1ca 0317 	rsb	r3, sl, #23
 8008658:	fa40 fb03 	asr.w	fp, r0, r3
 800865c:	f1bb 0f00 	cmp.w	fp, #0
 8008660:	dd65      	ble.n	800872e <__kernel_rem_pio2+0x26e>
 8008662:	9b04      	ldr	r3, [sp, #16]
 8008664:	2200      	movs	r2, #0
 8008666:	3301      	adds	r3, #1
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	4615      	mov	r5, r2
 800866c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008670:	4294      	cmp	r4, r2
 8008672:	f300 809c 	bgt.w	80087ae <__kernel_rem_pio2+0x2ee>
 8008676:	f1ba 0f00 	cmp.w	sl, #0
 800867a:	dd07      	ble.n	800868c <__kernel_rem_pio2+0x1cc>
 800867c:	f1ba 0f01 	cmp.w	sl, #1
 8008680:	f000 80c0 	beq.w	8008804 <__kernel_rem_pio2+0x344>
 8008684:	f1ba 0f02 	cmp.w	sl, #2
 8008688:	f000 80c6 	beq.w	8008818 <__kernel_rem_pio2+0x358>
 800868c:	f1bb 0f02 	cmp.w	fp, #2
 8008690:	d14d      	bne.n	800872e <__kernel_rem_pio2+0x26e>
 8008692:	4632      	mov	r2, r6
 8008694:	463b      	mov	r3, r7
 8008696:	4956      	ldr	r1, [pc, #344]	; (80087f0 <__kernel_rem_pio2+0x330>)
 8008698:	2000      	movs	r0, #0
 800869a:	f7f7 fdfd 	bl	8000298 <__aeabi_dsub>
 800869e:	4606      	mov	r6, r0
 80086a0:	460f      	mov	r7, r1
 80086a2:	2d00      	cmp	r5, #0
 80086a4:	d043      	beq.n	800872e <__kernel_rem_pio2+0x26e>
 80086a6:	4650      	mov	r0, sl
 80086a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80087e0 <__kernel_rem_pio2+0x320>
 80086ac:	f000 fba0 	bl	8008df0 <scalbn>
 80086b0:	4630      	mov	r0, r6
 80086b2:	4639      	mov	r1, r7
 80086b4:	ec53 2b10 	vmov	r2, r3, d0
 80086b8:	f7f7 fdee 	bl	8000298 <__aeabi_dsub>
 80086bc:	4606      	mov	r6, r0
 80086be:	460f      	mov	r7, r1
 80086c0:	e035      	b.n	800872e <__kernel_rem_pio2+0x26e>
 80086c2:	4b4c      	ldr	r3, [pc, #304]	; (80087f4 <__kernel_rem_pio2+0x334>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f7 ff9d 	bl	8000608 <__aeabi_dmul>
 80086ce:	f7f8 fa4b 	bl	8000b68 <__aeabi_d2iz>
 80086d2:	f7f7 ff2f 	bl	8000534 <__aeabi_i2d>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	ec43 2b18 	vmov	d8, r2, r3
 80086de:	4b46      	ldr	r3, [pc, #280]	; (80087f8 <__kernel_rem_pio2+0x338>)
 80086e0:	2200      	movs	r2, #0
 80086e2:	f7f7 ff91 	bl	8000608 <__aeabi_dmul>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4630      	mov	r0, r6
 80086ec:	4639      	mov	r1, r7
 80086ee:	f7f7 fdd3 	bl	8000298 <__aeabi_dsub>
 80086f2:	f7f8 fa39 	bl	8000b68 <__aeabi_d2iz>
 80086f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086fa:	f84b 0b04 	str.w	r0, [fp], #4
 80086fe:	ec51 0b18 	vmov	r0, r1, d8
 8008702:	f7f7 fdcb 	bl	800029c <__adddf3>
 8008706:	f109 39ff 	add.w	r9, r9, #4294967295
 800870a:	4606      	mov	r6, r0
 800870c:	460f      	mov	r7, r1
 800870e:	e75b      	b.n	80085c8 <__kernel_rem_pio2+0x108>
 8008710:	d106      	bne.n	8008720 <__kernel_rem_pio2+0x260>
 8008712:	1e63      	subs	r3, r4, #1
 8008714:	aa0e      	add	r2, sp, #56	; 0x38
 8008716:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800871a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800871e:	e79d      	b.n	800865c <__kernel_rem_pio2+0x19c>
 8008720:	4b36      	ldr	r3, [pc, #216]	; (80087fc <__kernel_rem_pio2+0x33c>)
 8008722:	2200      	movs	r2, #0
 8008724:	f7f8 f9f6 	bl	8000b14 <__aeabi_dcmpge>
 8008728:	2800      	cmp	r0, #0
 800872a:	d13d      	bne.n	80087a8 <__kernel_rem_pio2+0x2e8>
 800872c:	4683      	mov	fp, r0
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4630      	mov	r0, r6
 8008734:	4639      	mov	r1, r7
 8008736:	f7f8 f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800873a:	2800      	cmp	r0, #0
 800873c:	f000 80c0 	beq.w	80088c0 <__kernel_rem_pio2+0x400>
 8008740:	1e65      	subs	r5, r4, #1
 8008742:	462b      	mov	r3, r5
 8008744:	2200      	movs	r2, #0
 8008746:	9902      	ldr	r1, [sp, #8]
 8008748:	428b      	cmp	r3, r1
 800874a:	da6c      	bge.n	8008826 <__kernel_rem_pio2+0x366>
 800874c:	2a00      	cmp	r2, #0
 800874e:	f000 8089 	beq.w	8008864 <__kernel_rem_pio2+0x3a4>
 8008752:	ab0e      	add	r3, sp, #56	; 0x38
 8008754:	f1aa 0a18 	sub.w	sl, sl, #24
 8008758:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 80ad 	beq.w	80088bc <__kernel_rem_pio2+0x3fc>
 8008762:	4650      	mov	r0, sl
 8008764:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80087e0 <__kernel_rem_pio2+0x320>
 8008768:	f000 fb42 	bl	8008df0 <scalbn>
 800876c:	ab9a      	add	r3, sp, #616	; 0x268
 800876e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008772:	ec57 6b10 	vmov	r6, r7, d0
 8008776:	00ec      	lsls	r4, r5, #3
 8008778:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800877c:	46aa      	mov	sl, r5
 800877e:	f1ba 0f00 	cmp.w	sl, #0
 8008782:	f280 80d6 	bge.w	8008932 <__kernel_rem_pio2+0x472>
 8008786:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80087d8 <__kernel_rem_pio2+0x318>
 800878a:	462e      	mov	r6, r5
 800878c:	2e00      	cmp	r6, #0
 800878e:	f2c0 8104 	blt.w	800899a <__kernel_rem_pio2+0x4da>
 8008792:	ab72      	add	r3, sp, #456	; 0x1c8
 8008794:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008798:	f8df a064 	ldr.w	sl, [pc, #100]	; 8008800 <__kernel_rem_pio2+0x340>
 800879c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80087a0:	f04f 0800 	mov.w	r8, #0
 80087a4:	1baf      	subs	r7, r5, r6
 80087a6:	e0ea      	b.n	800897e <__kernel_rem_pio2+0x4be>
 80087a8:	f04f 0b02 	mov.w	fp, #2
 80087ac:	e759      	b.n	8008662 <__kernel_rem_pio2+0x1a2>
 80087ae:	f8d8 3000 	ldr.w	r3, [r8]
 80087b2:	b955      	cbnz	r5, 80087ca <__kernel_rem_pio2+0x30a>
 80087b4:	b123      	cbz	r3, 80087c0 <__kernel_rem_pio2+0x300>
 80087b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80087ba:	f8c8 3000 	str.w	r3, [r8]
 80087be:	2301      	movs	r3, #1
 80087c0:	3201      	adds	r2, #1
 80087c2:	f108 0804 	add.w	r8, r8, #4
 80087c6:	461d      	mov	r5, r3
 80087c8:	e752      	b.n	8008670 <__kernel_rem_pio2+0x1b0>
 80087ca:	1acb      	subs	r3, r1, r3
 80087cc:	f8c8 3000 	str.w	r3, [r8]
 80087d0:	462b      	mov	r3, r5
 80087d2:	e7f5      	b.n	80087c0 <__kernel_rem_pio2+0x300>
 80087d4:	f3af 8000 	nop.w
	...
 80087e4:	3ff00000 	.word	0x3ff00000
 80087e8:	08009c18 	.word	0x08009c18
 80087ec:	40200000 	.word	0x40200000
 80087f0:	3ff00000 	.word	0x3ff00000
 80087f4:	3e700000 	.word	0x3e700000
 80087f8:	41700000 	.word	0x41700000
 80087fc:	3fe00000 	.word	0x3fe00000
 8008800:	08009bd8 	.word	0x08009bd8
 8008804:	1e62      	subs	r2, r4, #1
 8008806:	ab0e      	add	r3, sp, #56	; 0x38
 8008808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008810:	a90e      	add	r1, sp, #56	; 0x38
 8008812:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008816:	e739      	b.n	800868c <__kernel_rem_pio2+0x1cc>
 8008818:	1e62      	subs	r2, r4, #1
 800881a:	ab0e      	add	r3, sp, #56	; 0x38
 800881c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008820:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008824:	e7f4      	b.n	8008810 <__kernel_rem_pio2+0x350>
 8008826:	a90e      	add	r1, sp, #56	; 0x38
 8008828:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800882c:	3b01      	subs	r3, #1
 800882e:	430a      	orrs	r2, r1
 8008830:	e789      	b.n	8008746 <__kernel_rem_pio2+0x286>
 8008832:	3301      	adds	r3, #1
 8008834:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008838:	2900      	cmp	r1, #0
 800883a:	d0fa      	beq.n	8008832 <__kernel_rem_pio2+0x372>
 800883c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800883e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008842:	446a      	add	r2, sp
 8008844:	3a98      	subs	r2, #152	; 0x98
 8008846:	920a      	str	r2, [sp, #40]	; 0x28
 8008848:	9a08      	ldr	r2, [sp, #32]
 800884a:	18e3      	adds	r3, r4, r3
 800884c:	18a5      	adds	r5, r4, r2
 800884e:	aa22      	add	r2, sp, #136	; 0x88
 8008850:	f104 0801 	add.w	r8, r4, #1
 8008854:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	4543      	cmp	r3, r8
 800885e:	da04      	bge.n	800886a <__kernel_rem_pio2+0x3aa>
 8008860:	461c      	mov	r4, r3
 8008862:	e6a3      	b.n	80085ac <__kernel_rem_pio2+0xec>
 8008864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008866:	2301      	movs	r3, #1
 8008868:	e7e4      	b.n	8008834 <__kernel_rem_pio2+0x374>
 800886a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800886c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008870:	f7f7 fe60 	bl	8000534 <__aeabi_i2d>
 8008874:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800887a:	46ab      	mov	fp, r5
 800887c:	461c      	mov	r4, r3
 800887e:	f04f 0900 	mov.w	r9, #0
 8008882:	2600      	movs	r6, #0
 8008884:	2700      	movs	r7, #0
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	4599      	cmp	r9, r3
 800888a:	dd06      	ble.n	800889a <__kernel_rem_pio2+0x3da>
 800888c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008892:	f108 0801 	add.w	r8, r8, #1
 8008896:	930a      	str	r3, [sp, #40]	; 0x28
 8008898:	e7df      	b.n	800885a <__kernel_rem_pio2+0x39a>
 800889a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800889e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80088a2:	f7f7 feb1 	bl	8000608 <__aeabi_dmul>
 80088a6:	4602      	mov	r2, r0
 80088a8:	460b      	mov	r3, r1
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f7 fcf5 	bl	800029c <__adddf3>
 80088b2:	f109 0901 	add.w	r9, r9, #1
 80088b6:	4606      	mov	r6, r0
 80088b8:	460f      	mov	r7, r1
 80088ba:	e7e4      	b.n	8008886 <__kernel_rem_pio2+0x3c6>
 80088bc:	3d01      	subs	r5, #1
 80088be:	e748      	b.n	8008752 <__kernel_rem_pio2+0x292>
 80088c0:	ec47 6b10 	vmov	d0, r6, r7
 80088c4:	f1ca 0000 	rsb	r0, sl, #0
 80088c8:	f000 fa92 	bl	8008df0 <scalbn>
 80088cc:	ec57 6b10 	vmov	r6, r7, d0
 80088d0:	4ba0      	ldr	r3, [pc, #640]	; (8008b54 <__kernel_rem_pio2+0x694>)
 80088d2:	ee10 0a10 	vmov	r0, s0
 80088d6:	2200      	movs	r2, #0
 80088d8:	4639      	mov	r1, r7
 80088da:	f7f8 f91b 	bl	8000b14 <__aeabi_dcmpge>
 80088de:	b1f8      	cbz	r0, 8008920 <__kernel_rem_pio2+0x460>
 80088e0:	4b9d      	ldr	r3, [pc, #628]	; (8008b58 <__kernel_rem_pio2+0x698>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f7 fe8e 	bl	8000608 <__aeabi_dmul>
 80088ec:	f7f8 f93c 	bl	8000b68 <__aeabi_d2iz>
 80088f0:	4680      	mov	r8, r0
 80088f2:	f7f7 fe1f 	bl	8000534 <__aeabi_i2d>
 80088f6:	4b97      	ldr	r3, [pc, #604]	; (8008b54 <__kernel_rem_pio2+0x694>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	f7f7 fe85 	bl	8000608 <__aeabi_dmul>
 80088fe:	460b      	mov	r3, r1
 8008900:	4602      	mov	r2, r0
 8008902:	4639      	mov	r1, r7
 8008904:	4630      	mov	r0, r6
 8008906:	f7f7 fcc7 	bl	8000298 <__aeabi_dsub>
 800890a:	f7f8 f92d 	bl	8000b68 <__aeabi_d2iz>
 800890e:	1c65      	adds	r5, r4, #1
 8008910:	ab0e      	add	r3, sp, #56	; 0x38
 8008912:	f10a 0a18 	add.w	sl, sl, #24
 8008916:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800891a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800891e:	e720      	b.n	8008762 <__kernel_rem_pio2+0x2a2>
 8008920:	4630      	mov	r0, r6
 8008922:	4639      	mov	r1, r7
 8008924:	f7f8 f920 	bl	8000b68 <__aeabi_d2iz>
 8008928:	ab0e      	add	r3, sp, #56	; 0x38
 800892a:	4625      	mov	r5, r4
 800892c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008930:	e717      	b.n	8008762 <__kernel_rem_pio2+0x2a2>
 8008932:	ab0e      	add	r3, sp, #56	; 0x38
 8008934:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008938:	f7f7 fdfc 	bl	8000534 <__aeabi_i2d>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	f7f7 fe62 	bl	8000608 <__aeabi_dmul>
 8008944:	4b84      	ldr	r3, [pc, #528]	; (8008b58 <__kernel_rem_pio2+0x698>)
 8008946:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800894a:	2200      	movs	r2, #0
 800894c:	4630      	mov	r0, r6
 800894e:	4639      	mov	r1, r7
 8008950:	f7f7 fe5a 	bl	8000608 <__aeabi_dmul>
 8008954:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008958:	4606      	mov	r6, r0
 800895a:	460f      	mov	r7, r1
 800895c:	e70f      	b.n	800877e <__kernel_rem_pio2+0x2be>
 800895e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008962:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008966:	f7f7 fe4f 	bl	8000608 <__aeabi_dmul>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008972:	f7f7 fc93 	bl	800029c <__adddf3>
 8008976:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800897a:	f108 0801 	add.w	r8, r8, #1
 800897e:	9b02      	ldr	r3, [sp, #8]
 8008980:	4598      	cmp	r8, r3
 8008982:	dc01      	bgt.n	8008988 <__kernel_rem_pio2+0x4c8>
 8008984:	45b8      	cmp	r8, r7
 8008986:	ddea      	ble.n	800895e <__kernel_rem_pio2+0x49e>
 8008988:	ed9d 7b06 	vldr	d7, [sp, #24]
 800898c:	ab4a      	add	r3, sp, #296	; 0x128
 800898e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008992:	ed87 7b00 	vstr	d7, [r7]
 8008996:	3e01      	subs	r6, #1
 8008998:	e6f8      	b.n	800878c <__kernel_rem_pio2+0x2cc>
 800899a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800899c:	2b02      	cmp	r3, #2
 800899e:	dc0b      	bgt.n	80089b8 <__kernel_rem_pio2+0x4f8>
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	dc35      	bgt.n	8008a10 <__kernel_rem_pio2+0x550>
 80089a4:	d059      	beq.n	8008a5a <__kernel_rem_pio2+0x59a>
 80089a6:	9b04      	ldr	r3, [sp, #16]
 80089a8:	f003 0007 	and.w	r0, r3, #7
 80089ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80089b0:	ecbd 8b02 	vpop	{d8}
 80089b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d1f3      	bne.n	80089a6 <__kernel_rem_pio2+0x4e6>
 80089be:	ab4a      	add	r3, sp, #296	; 0x128
 80089c0:	4423      	add	r3, r4
 80089c2:	9306      	str	r3, [sp, #24]
 80089c4:	461c      	mov	r4, r3
 80089c6:	469a      	mov	sl, r3
 80089c8:	9502      	str	r5, [sp, #8]
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f1aa 0a08 	sub.w	sl, sl, #8
 80089d2:	dc6b      	bgt.n	8008aac <__kernel_rem_pio2+0x5ec>
 80089d4:	46aa      	mov	sl, r5
 80089d6:	f1ba 0f01 	cmp.w	sl, #1
 80089da:	f1a4 0408 	sub.w	r4, r4, #8
 80089de:	f300 8085 	bgt.w	8008aec <__kernel_rem_pio2+0x62c>
 80089e2:	9c06      	ldr	r4, [sp, #24]
 80089e4:	2000      	movs	r0, #0
 80089e6:	3408      	adds	r4, #8
 80089e8:	2100      	movs	r1, #0
 80089ea:	2d01      	cmp	r5, #1
 80089ec:	f300 809d 	bgt.w	8008b2a <__kernel_rem_pio2+0x66a>
 80089f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80089f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80089f8:	f1bb 0f00 	cmp.w	fp, #0
 80089fc:	f040 809b 	bne.w	8008b36 <__kernel_rem_pio2+0x676>
 8008a00:	9b01      	ldr	r3, [sp, #4]
 8008a02:	e9c3 5600 	strd	r5, r6, [r3]
 8008a06:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008a0a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008a0e:	e7ca      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a10:	3408      	adds	r4, #8
 8008a12:	ab4a      	add	r3, sp, #296	; 0x128
 8008a14:	441c      	add	r4, r3
 8008a16:	462e      	mov	r6, r5
 8008a18:	2000      	movs	r0, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	2e00      	cmp	r6, #0
 8008a1e:	da36      	bge.n	8008a8e <__kernel_rem_pio2+0x5ce>
 8008a20:	f1bb 0f00 	cmp.w	fp, #0
 8008a24:	d039      	beq.n	8008a9a <__kernel_rem_pio2+0x5da>
 8008a26:	4602      	mov	r2, r0
 8008a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a2c:	9c01      	ldr	r4, [sp, #4]
 8008a2e:	e9c4 2300 	strd	r2, r3, [r4]
 8008a32:	4602      	mov	r2, r0
 8008a34:	460b      	mov	r3, r1
 8008a36:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008a3a:	f7f7 fc2d 	bl	8000298 <__aeabi_dsub>
 8008a3e:	ae4c      	add	r6, sp, #304	; 0x130
 8008a40:	2401      	movs	r4, #1
 8008a42:	42a5      	cmp	r5, r4
 8008a44:	da2c      	bge.n	8008aa0 <__kernel_rem_pio2+0x5e0>
 8008a46:	f1bb 0f00 	cmp.w	fp, #0
 8008a4a:	d002      	beq.n	8008a52 <__kernel_rem_pio2+0x592>
 8008a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a50:	4619      	mov	r1, r3
 8008a52:	9b01      	ldr	r3, [sp, #4]
 8008a54:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008a58:	e7a5      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a5a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008a5e:	eb0d 0403 	add.w	r4, sp, r3
 8008a62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008a66:	2000      	movs	r0, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2d00      	cmp	r5, #0
 8008a6c:	da09      	bge.n	8008a82 <__kernel_rem_pio2+0x5c2>
 8008a6e:	f1bb 0f00 	cmp.w	fp, #0
 8008a72:	d002      	beq.n	8008a7a <__kernel_rem_pio2+0x5ba>
 8008a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a78:	4619      	mov	r1, r3
 8008a7a:	9b01      	ldr	r3, [sp, #4]
 8008a7c:	e9c3 0100 	strd	r0, r1, [r3]
 8008a80:	e791      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008a82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a86:	f7f7 fc09 	bl	800029c <__adddf3>
 8008a8a:	3d01      	subs	r5, #1
 8008a8c:	e7ed      	b.n	8008a6a <__kernel_rem_pio2+0x5aa>
 8008a8e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008a92:	f7f7 fc03 	bl	800029c <__adddf3>
 8008a96:	3e01      	subs	r6, #1
 8008a98:	e7c0      	b.n	8008a1c <__kernel_rem_pio2+0x55c>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	e7c5      	b.n	8008a2c <__kernel_rem_pio2+0x56c>
 8008aa0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008aa4:	f7f7 fbfa 	bl	800029c <__adddf3>
 8008aa8:	3401      	adds	r4, #1
 8008aaa:	e7ca      	b.n	8008a42 <__kernel_rem_pio2+0x582>
 8008aac:	e9da 8900 	ldrd	r8, r9, [sl]
 8008ab0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	9302      	str	r3, [sp, #8]
 8008aba:	4632      	mov	r2, r6
 8008abc:	463b      	mov	r3, r7
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	f7f7 fbeb 	bl	800029c <__adddf3>
 8008ac6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fbe1 	bl	8000298 <__aeabi_dsub>
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	463b      	mov	r3, r7
 8008ada:	f7f7 fbdf 	bl	800029c <__adddf3>
 8008ade:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008ae2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ae6:	ed8a 7b00 	vstr	d7, [sl]
 8008aea:	e76e      	b.n	80089ca <__kernel_rem_pio2+0x50a>
 8008aec:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008af0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8008af4:	4640      	mov	r0, r8
 8008af6:	4632      	mov	r2, r6
 8008af8:	463b      	mov	r3, r7
 8008afa:	4649      	mov	r1, r9
 8008afc:	f7f7 fbce 	bl	800029c <__adddf3>
 8008b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f7 fbc4 	bl	8000298 <__aeabi_dsub>
 8008b10:	4632      	mov	r2, r6
 8008b12:	463b      	mov	r3, r7
 8008b14:	f7f7 fbc2 	bl	800029c <__adddf3>
 8008b18:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b20:	ed84 7b00 	vstr	d7, [r4]
 8008b24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b28:	e755      	b.n	80089d6 <__kernel_rem_pio2+0x516>
 8008b2a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008b2e:	f7f7 fbb5 	bl	800029c <__adddf3>
 8008b32:	3d01      	subs	r5, #1
 8008b34:	e759      	b.n	80089ea <__kernel_rem_pio2+0x52a>
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	9a01      	ldr	r2, [sp, #4]
 8008b3a:	601d      	str	r5, [r3, #0]
 8008b3c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008b40:	605c      	str	r4, [r3, #4]
 8008b42:	609f      	str	r7, [r3, #8]
 8008b44:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008b48:	60d3      	str	r3, [r2, #12]
 8008b4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b4e:	6110      	str	r0, [r2, #16]
 8008b50:	6153      	str	r3, [r2, #20]
 8008b52:	e728      	b.n	80089a6 <__kernel_rem_pio2+0x4e6>
 8008b54:	41700000 	.word	0x41700000
 8008b58:	3e700000 	.word	0x3e700000
 8008b5c:	00000000 	.word	0x00000000

08008b60 <__kernel_sin>:
 8008b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b64:	ed2d 8b04 	vpush	{d8-d9}
 8008b68:	eeb0 8a41 	vmov.f32	s16, s2
 8008b6c:	eef0 8a61 	vmov.f32	s17, s3
 8008b70:	ec55 4b10 	vmov	r4, r5, d0
 8008b74:	b083      	sub	sp, #12
 8008b76:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b7a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008b7e:	9001      	str	r0, [sp, #4]
 8008b80:	da06      	bge.n	8008b90 <__kernel_sin+0x30>
 8008b82:	ee10 0a10 	vmov	r0, s0
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 ffee 	bl	8000b68 <__aeabi_d2iz>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d051      	beq.n	8008c34 <__kernel_sin+0xd4>
 8008b90:	4622      	mov	r2, r4
 8008b92:	462b      	mov	r3, r5
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fd36 	bl	8000608 <__aeabi_dmul>
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	f7f7 fd2e 	bl	8000608 <__aeabi_dmul>
 8008bac:	a341      	add	r3, pc, #260	; (adr r3, 8008cb4 <__kernel_sin+0x154>)
 8008bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb2:	4680      	mov	r8, r0
 8008bb4:	4689      	mov	r9, r1
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	4659      	mov	r1, fp
 8008bba:	f7f7 fd25 	bl	8000608 <__aeabi_dmul>
 8008bbe:	a33f      	add	r3, pc, #252	; (adr r3, 8008cbc <__kernel_sin+0x15c>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	f7f7 fb68 	bl	8000298 <__aeabi_dsub>
 8008bc8:	4652      	mov	r2, sl
 8008bca:	465b      	mov	r3, fp
 8008bcc:	f7f7 fd1c 	bl	8000608 <__aeabi_dmul>
 8008bd0:	a33c      	add	r3, pc, #240	; (adr r3, 8008cc4 <__kernel_sin+0x164>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fb61 	bl	800029c <__adddf3>
 8008bda:	4652      	mov	r2, sl
 8008bdc:	465b      	mov	r3, fp
 8008bde:	f7f7 fd13 	bl	8000608 <__aeabi_dmul>
 8008be2:	a33a      	add	r3, pc, #232	; (adr r3, 8008ccc <__kernel_sin+0x16c>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	f7f7 fb56 	bl	8000298 <__aeabi_dsub>
 8008bec:	4652      	mov	r2, sl
 8008bee:	465b      	mov	r3, fp
 8008bf0:	f7f7 fd0a 	bl	8000608 <__aeabi_dmul>
 8008bf4:	a337      	add	r3, pc, #220	; (adr r3, 8008cd4 <__kernel_sin+0x174>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	f7f7 fb4f 	bl	800029c <__adddf3>
 8008bfe:	9b01      	ldr	r3, [sp, #4]
 8008c00:	4606      	mov	r6, r0
 8008c02:	460f      	mov	r7, r1
 8008c04:	b9eb      	cbnz	r3, 8008c42 <__kernel_sin+0xe2>
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	f7f7 fcfb 	bl	8000608 <__aeabi_dmul>
 8008c12:	a325      	add	r3, pc, #148	; (adr r3, 8008ca8 <__kernel_sin+0x148>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fb3e 	bl	8000298 <__aeabi_dsub>
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	464b      	mov	r3, r9
 8008c20:	f7f7 fcf2 	bl	8000608 <__aeabi_dmul>
 8008c24:	4602      	mov	r2, r0
 8008c26:	460b      	mov	r3, r1
 8008c28:	4620      	mov	r0, r4
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	f7f7 fb36 	bl	800029c <__adddf3>
 8008c30:	4604      	mov	r4, r0
 8008c32:	460d      	mov	r5, r1
 8008c34:	ec45 4b10 	vmov	d0, r4, r5
 8008c38:	b003      	add	sp, #12
 8008c3a:	ecbd 8b04 	vpop	{d8-d9}
 8008c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c42:	4b1b      	ldr	r3, [pc, #108]	; (8008cb0 <__kernel_sin+0x150>)
 8008c44:	ec51 0b18 	vmov	r0, r1, d8
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f7f7 fcdd 	bl	8000608 <__aeabi_dmul>
 8008c4e:	4632      	mov	r2, r6
 8008c50:	ec41 0b19 	vmov	d9, r0, r1
 8008c54:	463b      	mov	r3, r7
 8008c56:	4640      	mov	r0, r8
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f7f7 fcd5 	bl	8000608 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	ec51 0b19 	vmov	r0, r1, d9
 8008c66:	f7f7 fb17 	bl	8000298 <__aeabi_dsub>
 8008c6a:	4652      	mov	r2, sl
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	f7f7 fccb 	bl	8000608 <__aeabi_dmul>
 8008c72:	ec53 2b18 	vmov	r2, r3, d8
 8008c76:	f7f7 fb0f 	bl	8000298 <__aeabi_dsub>
 8008c7a:	a30b      	add	r3, pc, #44	; (adr r3, 8008ca8 <__kernel_sin+0x148>)
 8008c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c80:	4606      	mov	r6, r0
 8008c82:	460f      	mov	r7, r1
 8008c84:	4640      	mov	r0, r8
 8008c86:	4649      	mov	r1, r9
 8008c88:	f7f7 fcbe 	bl	8000608 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fb02 	bl	800029c <__adddf3>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4629      	mov	r1, r5
 8008ca0:	f7f7 fafa 	bl	8000298 <__aeabi_dsub>
 8008ca4:	e7c4      	b.n	8008c30 <__kernel_sin+0xd0>
 8008ca6:	bf00      	nop
 8008ca8:	55555549 	.word	0x55555549
 8008cac:	3fc55555 	.word	0x3fc55555
 8008cb0:	3fe00000 	.word	0x3fe00000
 8008cb4:	5acfd57c 	.word	0x5acfd57c
 8008cb8:	3de5d93a 	.word	0x3de5d93a
 8008cbc:	8a2b9ceb 	.word	0x8a2b9ceb
 8008cc0:	3e5ae5e6 	.word	0x3e5ae5e6
 8008cc4:	57b1fe7d 	.word	0x57b1fe7d
 8008cc8:	3ec71de3 	.word	0x3ec71de3
 8008ccc:	19c161d5 	.word	0x19c161d5
 8008cd0:	3f2a01a0 	.word	0x3f2a01a0
 8008cd4:	1110f8a6 	.word	0x1110f8a6
 8008cd8:	3f811111 	.word	0x3f811111

08008cdc <fabs>:
 8008cdc:	ec51 0b10 	vmov	r0, r1, d0
 8008ce0:	ee10 2a10 	vmov	r2, s0
 8008ce4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ce8:	ec43 2b10 	vmov	d0, r2, r3
 8008cec:	4770      	bx	lr
	...

08008cf0 <floor>:
 8008cf0:	ec51 0b10 	vmov	r0, r1, d0
 8008cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008cfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008d00:	2e13      	cmp	r6, #19
 8008d02:	ee10 5a10 	vmov	r5, s0
 8008d06:	ee10 8a10 	vmov	r8, s0
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	dc32      	bgt.n	8008d74 <floor+0x84>
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	da14      	bge.n	8008d3c <floor+0x4c>
 8008d12:	a333      	add	r3, pc, #204	; (adr r3, 8008de0 <floor+0xf0>)
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	f7f7 fac0 	bl	800029c <__adddf3>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f7f7 ff02 	bl	8000b28 <__aeabi_dcmpgt>
 8008d24:	b138      	cbz	r0, 8008d36 <floor+0x46>
 8008d26:	2c00      	cmp	r4, #0
 8008d28:	da57      	bge.n	8008dda <floor+0xea>
 8008d2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d2e:	431d      	orrs	r5, r3
 8008d30:	d001      	beq.n	8008d36 <floor+0x46>
 8008d32:	4c2d      	ldr	r4, [pc, #180]	; (8008de8 <floor+0xf8>)
 8008d34:	2500      	movs	r5, #0
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	e025      	b.n	8008d88 <floor+0x98>
 8008d3c:	4f2b      	ldr	r7, [pc, #172]	; (8008dec <floor+0xfc>)
 8008d3e:	4137      	asrs	r7, r6
 8008d40:	ea01 0307 	and.w	r3, r1, r7
 8008d44:	4303      	orrs	r3, r0
 8008d46:	d01f      	beq.n	8008d88 <floor+0x98>
 8008d48:	a325      	add	r3, pc, #148	; (adr r3, 8008de0 <floor+0xf0>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 faa5 	bl	800029c <__adddf3>
 8008d52:	2200      	movs	r2, #0
 8008d54:	2300      	movs	r3, #0
 8008d56:	f7f7 fee7 	bl	8000b28 <__aeabi_dcmpgt>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d0eb      	beq.n	8008d36 <floor+0x46>
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	bfbe      	ittt	lt
 8008d62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008d66:	fa43 f606 	asrlt.w	r6, r3, r6
 8008d6a:	19a4      	addlt	r4, r4, r6
 8008d6c:	ea24 0407 	bic.w	r4, r4, r7
 8008d70:	2500      	movs	r5, #0
 8008d72:	e7e0      	b.n	8008d36 <floor+0x46>
 8008d74:	2e33      	cmp	r6, #51	; 0x33
 8008d76:	dd0b      	ble.n	8008d90 <floor+0xa0>
 8008d78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008d7c:	d104      	bne.n	8008d88 <floor+0x98>
 8008d7e:	ee10 2a10 	vmov	r2, s0
 8008d82:	460b      	mov	r3, r1
 8008d84:	f7f7 fa8a 	bl	800029c <__adddf3>
 8008d88:	ec41 0b10 	vmov	d0, r0, r1
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008d94:	f04f 33ff 	mov.w	r3, #4294967295
 8008d98:	fa23 f707 	lsr.w	r7, r3, r7
 8008d9c:	4207      	tst	r7, r0
 8008d9e:	d0f3      	beq.n	8008d88 <floor+0x98>
 8008da0:	a30f      	add	r3, pc, #60	; (adr r3, 8008de0 <floor+0xf0>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa79 	bl	800029c <__adddf3>
 8008daa:	2200      	movs	r2, #0
 8008dac:	2300      	movs	r3, #0
 8008dae:	f7f7 febb 	bl	8000b28 <__aeabi_dcmpgt>
 8008db2:	2800      	cmp	r0, #0
 8008db4:	d0bf      	beq.n	8008d36 <floor+0x46>
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	da02      	bge.n	8008dc0 <floor+0xd0>
 8008dba:	2e14      	cmp	r6, #20
 8008dbc:	d103      	bne.n	8008dc6 <floor+0xd6>
 8008dbe:	3401      	adds	r4, #1
 8008dc0:	ea25 0507 	bic.w	r5, r5, r7
 8008dc4:	e7b7      	b.n	8008d36 <floor+0x46>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008dcc:	fa03 f606 	lsl.w	r6, r3, r6
 8008dd0:	4435      	add	r5, r6
 8008dd2:	4545      	cmp	r5, r8
 8008dd4:	bf38      	it	cc
 8008dd6:	18e4      	addcc	r4, r4, r3
 8008dd8:	e7f2      	b.n	8008dc0 <floor+0xd0>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	462c      	mov	r4, r5
 8008dde:	e7aa      	b.n	8008d36 <floor+0x46>
 8008de0:	8800759c 	.word	0x8800759c
 8008de4:	7e37e43c 	.word	0x7e37e43c
 8008de8:	bff00000 	.word	0xbff00000
 8008dec:	000fffff 	.word	0x000fffff

08008df0 <scalbn>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	ec55 4b10 	vmov	r4, r5, d0
 8008df6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	b99a      	cbnz	r2, 8008e28 <scalbn+0x38>
 8008e00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008e04:	4323      	orrs	r3, r4
 8008e06:	d036      	beq.n	8008e76 <scalbn+0x86>
 8008e08:	4b39      	ldr	r3, [pc, #228]	; (8008ef0 <scalbn+0x100>)
 8008e0a:	4629      	mov	r1, r5
 8008e0c:	ee10 0a10 	vmov	r0, s0
 8008e10:	2200      	movs	r2, #0
 8008e12:	f7f7 fbf9 	bl	8000608 <__aeabi_dmul>
 8008e16:	4b37      	ldr	r3, [pc, #220]	; (8008ef4 <scalbn+0x104>)
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	da10      	bge.n	8008e42 <scalbn+0x52>
 8008e20:	a32b      	add	r3, pc, #172	; (adr r3, 8008ed0 <scalbn+0xe0>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	e03a      	b.n	8008e9e <scalbn+0xae>
 8008e28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008e2c:	428a      	cmp	r2, r1
 8008e2e:	d10c      	bne.n	8008e4a <scalbn+0x5a>
 8008e30:	ee10 2a10 	vmov	r2, s0
 8008e34:	4620      	mov	r0, r4
 8008e36:	4629      	mov	r1, r5
 8008e38:	f7f7 fa30 	bl	800029c <__adddf3>
 8008e3c:	4604      	mov	r4, r0
 8008e3e:	460d      	mov	r5, r1
 8008e40:	e019      	b.n	8008e76 <scalbn+0x86>
 8008e42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008e46:	460b      	mov	r3, r1
 8008e48:	3a36      	subs	r2, #54	; 0x36
 8008e4a:	4432      	add	r2, r6
 8008e4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008e50:	428a      	cmp	r2, r1
 8008e52:	dd08      	ble.n	8008e66 <scalbn+0x76>
 8008e54:	2d00      	cmp	r5, #0
 8008e56:	a120      	add	r1, pc, #128	; (adr r1, 8008ed8 <scalbn+0xe8>)
 8008e58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e5c:	da1c      	bge.n	8008e98 <scalbn+0xa8>
 8008e5e:	a120      	add	r1, pc, #128	; (adr r1, 8008ee0 <scalbn+0xf0>)
 8008e60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e64:	e018      	b.n	8008e98 <scalbn+0xa8>
 8008e66:	2a00      	cmp	r2, #0
 8008e68:	dd08      	ble.n	8008e7c <scalbn+0x8c>
 8008e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008e6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008e72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008e76:	ec45 4b10 	vmov	d0, r4, r5
 8008e7a:	bd70      	pop	{r4, r5, r6, pc}
 8008e7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008e80:	da19      	bge.n	8008eb6 <scalbn+0xc6>
 8008e82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008e86:	429e      	cmp	r6, r3
 8008e88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008e8c:	dd0a      	ble.n	8008ea4 <scalbn+0xb4>
 8008e8e:	a112      	add	r1, pc, #72	; (adr r1, 8008ed8 <scalbn+0xe8>)
 8008e90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e2      	bne.n	8008e5e <scalbn+0x6e>
 8008e98:	a30f      	add	r3, pc, #60	; (adr r3, 8008ed8 <scalbn+0xe8>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbb3 	bl	8000608 <__aeabi_dmul>
 8008ea2:	e7cb      	b.n	8008e3c <scalbn+0x4c>
 8008ea4:	a10a      	add	r1, pc, #40	; (adr r1, 8008ed0 <scalbn+0xe0>)
 8008ea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0b8      	beq.n	8008e20 <scalbn+0x30>
 8008eae:	a10e      	add	r1, pc, #56	; (adr r1, 8008ee8 <scalbn+0xf8>)
 8008eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb4:	e7b4      	b.n	8008e20 <scalbn+0x30>
 8008eb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008eba:	3236      	adds	r2, #54	; 0x36
 8008ebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <scalbn+0x108>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	e7e8      	b.n	8008e9e <scalbn+0xae>
 8008ecc:	f3af 8000 	nop.w
 8008ed0:	c2f8f359 	.word	0xc2f8f359
 8008ed4:	01a56e1f 	.word	0x01a56e1f
 8008ed8:	8800759c 	.word	0x8800759c
 8008edc:	7e37e43c 	.word	0x7e37e43c
 8008ee0:	8800759c 	.word	0x8800759c
 8008ee4:	fe37e43c 	.word	0xfe37e43c
 8008ee8:	c2f8f359 	.word	0xc2f8f359
 8008eec:	81a56e1f 	.word	0x81a56e1f
 8008ef0:	43500000 	.word	0x43500000
 8008ef4:	ffff3cb0 	.word	0xffff3cb0
 8008ef8:	3c900000 	.word	0x3c900000

08008efc <_close>:
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <_close+0xc>)
 8008efe:	2258      	movs	r2, #88	; 0x58
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f04f 30ff 	mov.w	r0, #4294967295
 8008f06:	4770      	bx	lr
 8008f08:	20000704 	.word	0x20000704

08008f0c <_fstat>:
 8008f0c:	4b02      	ldr	r3, [pc, #8]	; (8008f18 <_fstat+0xc>)
 8008f0e:	2258      	movs	r2, #88	; 0x58
 8008f10:	601a      	str	r2, [r3, #0]
 8008f12:	f04f 30ff 	mov.w	r0, #4294967295
 8008f16:	4770      	bx	lr
 8008f18:	20000704 	.word	0x20000704

08008f1c <_getpid>:
 8008f1c:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <_getpid+0xc>)
 8008f1e:	2258      	movs	r2, #88	; 0x58
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295
 8008f26:	4770      	bx	lr
 8008f28:	20000704 	.word	0x20000704

08008f2c <_isatty>:
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <_isatty+0xc>)
 8008f2e:	2258      	movs	r2, #88	; 0x58
 8008f30:	601a      	str	r2, [r3, #0]
 8008f32:	2000      	movs	r0, #0
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	20000704 	.word	0x20000704

08008f3c <_kill>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <_kill+0xc>)
 8008f3e:	2258      	movs	r2, #88	; 0x58
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
 8008f46:	4770      	bx	lr
 8008f48:	20000704 	.word	0x20000704

08008f4c <_lseek>:
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <_lseek+0xc>)
 8008f4e:	2258      	movs	r2, #88	; 0x58
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	f04f 30ff 	mov.w	r0, #4294967295
 8008f56:	4770      	bx	lr
 8008f58:	20000704 	.word	0x20000704

08008f5c <_read>:
 8008f5c:	4b02      	ldr	r3, [pc, #8]	; (8008f68 <_read+0xc>)
 8008f5e:	2258      	movs	r2, #88	; 0x58
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f04f 30ff 	mov.w	r0, #4294967295
 8008f66:	4770      	bx	lr
 8008f68:	20000704 	.word	0x20000704

08008f6c <_sbrk>:
 8008f6c:	4a04      	ldr	r2, [pc, #16]	; (8008f80 <_sbrk+0x14>)
 8008f6e:	6811      	ldr	r1, [r2, #0]
 8008f70:	4603      	mov	r3, r0
 8008f72:	b909      	cbnz	r1, 8008f78 <_sbrk+0xc>
 8008f74:	4903      	ldr	r1, [pc, #12]	; (8008f84 <_sbrk+0x18>)
 8008f76:	6011      	str	r1, [r2, #0]
 8008f78:	6810      	ldr	r0, [r2, #0]
 8008f7a:	4403      	add	r3, r0
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	4770      	bx	lr
 8008f80:	2000070c 	.word	0x2000070c
 8008f84:	20000710 	.word	0x20000710

08008f88 <_write>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <_write+0xc>)
 8008f8a:	2258      	movs	r2, #88	; 0x58
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f92:	4770      	bx	lr
 8008f94:	20000704 	.word	0x20000704

08008f98 <_exit>:
 8008f98:	e7fe      	b.n	8008f98 <_exit>
	...

08008f9c <_init>:
 8008f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f9e:	bf00      	nop
 8008fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fa2:	bc08      	pop	{r3}
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	4770      	bx	lr

08008fa8 <_fini>:
 8008fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008faa:	bf00      	nop
 8008fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fae:	bc08      	pop	{r3}
 8008fb0:	469e      	mov	lr, r3
 8008fb2:	4770      	bx	lr
