
GyroSensorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b98  08008cc0  08008cc0  00018cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009858  08009858  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  08009858  08009858  00019858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009860  08009860  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009860  08009860  00019860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009864  08009864  00019864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08009868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000200  08009a68  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08009a68  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e00  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b06  00000000  00000000  00029030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002ab38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000078f3  00000000  00000000  0002b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000570e5  00000000  00000000  00033213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008a2f8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003364  00000000  00000000  0008a348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00010106  00000000  00000000  0008d6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0009d7b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0009d880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ca4 	.word	0x08008ca4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	08008ca4 	.word	0x08008ca4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <main>:
uint32_t I2C_Timer = 0UL;       // I2C communication timer



int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0b0      	sub	sp, #192	; 0xc0
 8000f64:	af04      	add	r7, sp, #16
    // Task scheduling parameters
	uint32_t DispTaskTime = 70UL; // Display task period  statt:   uint32_t temperatureRefresh = (i2cTaskTime * 0.2f);
 8000f66:	2346      	movs	r3, #70	; 0x46
 8000f68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    uint32_t i2cTaskTime = 2UL; // I2C task period
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    // Array for managing multiple timers
    uint32_t *timerList[] = {&Timer1, &I2C_Timer, &ST7735_Timer };
 8000f72:	4a95      	ldr	r2, [pc, #596]	; (80011c8 <main+0x268>)
 8000f74:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    size_t arraySize = sizeof(timerList) / sizeof(timerList[0]);
 8000f7e:	2303      	movs	r3, #3
 8000f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    // Sensor data structure and other variables
    MPU6050_t MPU1;
    float const _rad2deg = 180.0 / _pi; // Conversion factor from radians to degrees
 8000f84:	4b91      	ldr	r3, [pc, #580]	; (80011cc <main+0x26c>)
 8000f86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    float AlphaBeta[2];            // Array to store angle data

    char outStr[32];               // Buffer for temperature output string
    int8_t ReturnVal=-1;			//  Return of Init mpu routine
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf

    float temp;

    initLED(&LEDbala);
 8000f90:	488f      	ldr	r0, [pc, #572]	; (80011d0 <main+0x270>)
 8000f92:	f000 fa2d 	bl	80013f0 <initLED>

#ifdef BALA2024
activateI2C2();			//! I2C Channel 1 at i2cDevices.c
 8000f96:	f001 fb33 	bl	8002600 <activateI2C2>
#else
activateI2C1();			//! I2C Channel 1 at i2cDevices.c
#endif


	setLED(RED_on);
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f000 fa7c 	bl	8001498 <setLED>
	 *	 and initialize of Systick-Timer
	 */



    setLED(RED_on);						//start mpu init
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f000 fa79 	bl	8001498 <setLED>

    systickInit(SYSTICK_10MS);      // Initialize SysTick timer
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f003 fad2 	bl	8004550 <systickInit>
/**
 * brief  initialize the rotary push button module
 */
#ifdef BALA2024
    initRotaryPushButton(&PuBio_bala);// Initialize display and peripherals
 8000fac:	4889      	ldr	r0, [pc, #548]	; (80011d4 <main+0x274>)
 8000fae:	f000 f96b 	bl	8001288 <initRotaryPushButton>
    IOspiInit(&ST7735bala);			//! SPI Init
 8000fb2:	4889      	ldr	r0, [pc, #548]	; (80011d8 <main+0x278>)
 8000fb4:	f000 fbfe 	bl	80017b4 <IOspiInit>
#else
    initRotaryPushButton(&PuBio_pgb);// Initialize display and peripherals
    IOspiInit(&ST7735pgb);			//! SPI Init
#endif

    tftInitR(INITR_REDTAB);        // Initialize TFT display
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f000 fcef 	bl	800199c <tftInitR>

/**
 * brief make the display clear and working
 */
	tftInitR(INITR_REDTAB);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fcec 	bl	800199c <tftInitR>
    tftSetRotation(LANDSCAPE);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 f9c7 	bl	8002358 <tftSetRotation>
    tftSetFont((uint8_t *)&SmallFont[0]);
 8000fca:	4884      	ldr	r0, [pc, #528]	; (80011dc <main+0x27c>)
 8000fcc:	f000 fe9c 	bl	8001d08 <tftSetFont>
    tftFillScreen(tft_BLACK);
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f001 f9a7 	bl	8002324 <tftFillScreen>




    // Set timer interval
    systickSetMillis(&Timer1, DispTaskTime);
 8000fd6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000fda:	4881      	ldr	r0, [pc, #516]	; (80011e0 <main+0x280>)
 8000fdc:	f003 faaa 	bl	8004534 <systickSetMillis>
    systickSetMillis(&I2C_Timer, i2cTaskTime);
 8000fe0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000fe4:	487f      	ldr	r0, [pc, #508]	; (80011e4 <main+0x284>)
 8000fe6:	f003 faa5 	bl	8004534 <systickSetMillis>

    // Initial display message

    tftPrintColor((char *)"MPU6050 Tmp.:", 0, 0, tft_GREEN);
 8000fea:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	487d      	ldr	r0, [pc, #500]	; (80011e8 <main+0x288>)
 8000ff4:	f001 f97a 	bl	80022ec <tftPrintColor>
    // Initialize MPU6050 sensor


	do
	{
		if (timerTrigger == true)
 8000ff8:	4b7c      	ldr	r3, [pc, #496]	; (80011ec <main+0x28c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <main+0xb2>
		{
			systickUpdateTimerList((uint32_t *)timerList, arraySize);
 8001000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001004:	b2da      	uxtb	r2, r3
 8001006:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f003 faf7 	bl	8004600 <systickUpdateTimerList>
		}

		// Check if I2C task is due
		if (isSystickExpired(I2C_Timer))
 8001012:	4b74      	ldr	r3, [pc, #464]	; (80011e4 <main+0x284>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fabc 	bl	8004594 <isSystickExpired>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d014      	beq.n	800104c <main+0xec>
		{

			// Reset I2C timer
			systickSetTicktime(&I2C_Timer, i2cTaskTime);
 8001022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001026:	486f      	ldr	r0, [pc, #444]	; (80011e4 <main+0x284>)
 8001028:	f003 faa6 	bl	8004578 <systickSetTicktime>
			ReturnVal = mpuInit(&MPU1, MPUi2c, i2cAddr_MPU6050, FSCALE_250, ACCEL_2g, LPBW_94, NO_RESTART);
 800102c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001030:	2300      	movs	r3, #0
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2302      	movs	r3, #2
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	2300      	movs	r3, #0
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	2300      	movs	r3, #0
 800103e:	2268      	movs	r2, #104	; 0x68
 8001040:	496b      	ldr	r1, [pc, #428]	; (80011f0 <main+0x290>)
 8001042:	f001 fb65 	bl	8002710 <mpuInit>
 8001046:	4603      	mov	r3, r0
 8001048:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
		}
	} while (ReturnVal < 0);
 800104c:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 8001050:	2b00      	cmp	r3, #0
 8001052:	dbd1      	blt.n	8000ff8 <main+0x98>
/*
 * Assemble Orientation of Sensor Modell Axis are Roll, Pitch,Yaw
 * Sensor Axis X = 1, Y =2, Z = 3 , negative Value are opposite Direction
 */
#ifdef BALA2024
	MPU1.RPY[0]= 2;				// MPU y Axis goes to the front
 8001054:	2302      	movs	r3, #2
 8001056:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	MPU1.RPY[1]= 3;				// MPU z-Axis goes to the left side
 800105a:	2303      	movs	r3, #3
 800105c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	MPU1.RPY[2]= -1;			// MPU x-Axis goes down
 8001060:	23ff      	movs	r3, #255	; 0xff
 8001062:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e




#ifdef Oszi
	MPU1.timebase = (float) i2cTaskTime* 10e-3;  // CycleTime for calc from Gyro to angle
 8001066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800106a:	ee07 3a90 	vmov	s15, r3
 800106e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001072:	ee17 0a90 	vmov	r0, s15
 8001076:	f7ff fa6f 	bl	8000558 <__aeabi_f2d>
 800107a:	a351      	add	r3, pc, #324	; (adr r3, 80011c0 <main+0x260>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fac2 	bl	8000608 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fd94 	bl	8000bb8 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	663b      	str	r3, [r7, #96]	; 0x60
	MPU1.timebase = (float) DispTaskTime * 10e-3;  // CycleTime for calc from Gyro to angle
#endif



	setLED(RED_off);
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f9ff 	bl	8001498 <setLED>


	// Reset I2C timer
	systickSetTicktime(&I2C_Timer, i2cTaskTime);
 800109a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800109e:	4851      	ldr	r0, [pc, #324]	; (80011e4 <main+0x284>)
 80010a0:	f003 fa6a 	bl	8004578 <systickSetTicktime>
    while (1)
    {
        // Update timers if the trigger is set
        //TF if (timerTrigger && testVal >= 0)
    	if (timerTrigger == true)
 80010a4:	4b51      	ldr	r3, [pc, #324]	; (80011ec <main+0x28c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <main+0x15e>
        {
            systickUpdateTimerList((uint32_t *)timerList, arraySize);
 80010ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 faa1 	bl	8004600 <systickUpdateTimerList>
        }

        // Check if I2C task is due
        if (isSystickExpired(I2C_Timer))
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <main+0x284>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fa66 	bl	8004594 <isSystickExpired>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d052      	beq.n	8001174 <main+0x214>
        {

        	// Reset I2C timer
            systickSetTicktime(&I2C_Timer, i2cTaskTime);
 80010ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80010d2:	4844      	ldr	r0, [pc, #272]	; (80011e4 <main+0x284>)
 80010d4:	f003 fa50 	bl	8004578 <systickSetTicktime>


            // Read angles from MPU6050
            //ReturnVal = mpuGetRPfromAccel(&MPU1);
            ReturnVal = mpuGetPitch(&MPU1);
 80010d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fcc7 	bl	8002a70 <mpuGetPitch>
 80010e2:	4603      	mov	r3, r0
 80010e4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
            AlphaBeta[0] = MPU1.pitch;
 80010e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80010ec:	623b      	str	r3, [r7, #32]
            AlphaBeta[1] = MPU1.pitchAccel;
 80010ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24


            // Update LED color based on angle thresholds
            if ((MPU1.pitch * _rad2deg < -10) || (MPU1.pitch * _rad2deg > 10) ||
 80010f4:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80010f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80010fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001100:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110c:	d426      	bmi.n	800115c <main+0x1fc>
 800110e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001112:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	dc19      	bgt.n	800115c <main+0x1fc>
                (MPU1.roll * _rad2deg < -10) || (MPU1.roll * _rad2deg > 10))
 8001128:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800112c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001130:	ee67 7a27 	vmul.f32	s15, s14, s15
            if ((MPU1.pitch * _rad2deg < -10) || (MPU1.pitch * _rad2deg > 10) ||
 8001134:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001138:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d40c      	bmi.n	800115c <main+0x1fc>
                (MPU1.roll * _rad2deg < -10) || (MPU1.roll * _rad2deg > 10))
 8001142:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001146:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001152:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	dd03      	ble.n	8001164 <main+0x204>
            {
                setLED(CYAN); // Deviations greater than ±10° trigger cyan
 800115c:	200e      	movs	r0, #14
 800115e:	f000 f99b 	bl	8001498 <setLED>
 8001162:	e002      	b.n	800116a <main+0x20a>
            }
            else
            {
                setLED(GREEN); // Otherwise, set green
 8001164:	200a      	movs	r0, #10
 8001166:	f000 f997 	bl	8001498 <setLED>
            }

#ifdef Oszi
            // Display angle values on the oscilloscope
            AlBeOszi(AlphaBeta);
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f001 f95a 	bl	8002428 <AlBeOszi>
#endif
        }
        // Check if Timer1 task is due
        if (isSystickExpired(Timer1))
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <main+0x280>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fa0b 	bl	8004594 <isSystickExpired>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d08f      	beq.n	80010a4 <main+0x144>
        {
        	// Reset Disp timer
        	systickSetTicktime(&Timer1, DispTaskTime);
 8001184:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001188:	4815      	ldr	r0, [pc, #84]	; (80011e0 <main+0x280>)
 800118a:	f003 f9f5 	bl	8004578 <systickSetTicktime>
        	temp = mpuTemp(&MPU1);
 800118e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001192:	4618      	mov	r0, r3
 8001194:	f001 fdb8 	bl	8002d08 <mpuTemp>
 8001198:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
			sprintf(outStr, "%.1f C", temp);
 800119c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80011a0:	f7ff f9da 	bl	8000558 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4638      	mov	r0, r7
 80011aa:	4912      	ldr	r1, [pc, #72]	; (80011f4 <main+0x294>)
 80011ac:	f003 ff9e 	bl	80050ec <siprintf>
			tftPrintColor((char *)outStr, (ST7735_TFTWIDTH - 20), 0, tft_GREEN);
 80011b0:	4638      	mov	r0, r7
 80011b2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80011b6:	2200      	movs	r2, #0
 80011b8:	216c      	movs	r1, #108	; 0x6c
 80011ba:	f001 f897 	bl	80022ec <tftPrintColor>
    	if (timerTrigger == true)
 80011be:	e771      	b.n	80010a4 <main+0x144>
 80011c0:	47ae147b 	.word	0x47ae147b
 80011c4:	3f847ae1 	.word	0x3f847ae1
 80011c8:	08008cd8 	.word	0x08008cd8
 80011cc:	42652ee4 	.word	0x42652ee4
 80011d0:	08008cec 	.word	0x08008cec
 80011d4:	08008cf4 	.word	0x08008cf4
 80011d8:	20000004 	.word	0x20000004
 80011dc:	08008d08 	.word	0x08008d08
 80011e0:	20000220 	.word	0x20000220
 80011e4:	20000228 	.word	0x20000228
 80011e8:	08008cc0 	.word	0x08008cc0
 80011ec:	2000021c 	.word	0x2000021c
 80011f0:	40005800 	.word	0x40005800
 80011f4:	08008cd0 	.word	0x08008cd0

080011f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011fc:	f003 fa4e 	bl	800469c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <LoopForever+0x6>)
  ldr r1, =_edata
 8001202:	490d      	ldr	r1, [pc, #52]	; (8001238 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001204:	4a0d      	ldr	r2, [pc, #52]	; (800123c <LoopForever+0xe>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001208:	e002      	b.n	8001210 <LoopCopyDataInit>

0800120a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800120c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800120e:	3304      	adds	r3, #4

08001210 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001210:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001212:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001214:	d3f9      	bcc.n	800120a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001218:	4c0a      	ldr	r4, [pc, #40]	; (8001244 <LoopForever+0x16>)
  movs r3, #0
 800121a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800121c:	e001      	b.n	8001222 <LoopFillZerobss>

0800121e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800121e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001220:	3204      	adds	r2, #4

08001222 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001222:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001224:	d3fb      	bcc.n	800121e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001226:	f003 facb 	bl	80047c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800122a:	f7ff fe99 	bl	8000f60 <main>

0800122e <LoopForever>:

LoopForever:
  b LoopForever
 800122e:	e7fe      	b.n	800122e <LoopForever>
  ldr   r0, =_estack
 8001230:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001238:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800123c:	08009868 	.word	0x08009868
  ldr r2, =_sbss
 8001240:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001244:	2000028c 	.word	0x2000028c

08001248 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	; (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton(const PuBio_t* pPuBioset)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	RoPuBu.PORT_AB = pPuBioset->PORT_AB;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a53      	ldr	r2, [pc, #332]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001296:	6013      	str	r3, [r2, #0]
	RoPuBu.PinA = pPuBioset->PinA;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	791a      	ldrb	r2, [r3, #4]
 800129c:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <initRotaryPushButton+0x15c>)
 800129e:	711a      	strb	r2, [r3, #4]
	RoPuBu.PinB = pPuBioset->PinB;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	79da      	ldrb	r2, [r3, #7]
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012a6:	71da      	strb	r2, [r3, #7]
	RoPuBu.PORT_SW = pPuBioset->PORT_SW;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012ae:	6093      	str	r3, [r2, #8]
	RoPuBu.PinSW   = pPuBioset->PinSW;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7b1a      	ldrb	r2, [r3, #12]
 80012b4:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012b6:	731a      	strb	r2, [r3, #12]
	RoPuBu.RotA_IRQ   = pPuBioset->RotA_IRQ;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	795a      	ldrb	r2, [r3, #5]
 80012bc:	4b49      	ldr	r3, [pc, #292]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012be:	715a      	strb	r2, [r3, #5]
	RoPuBu.RotA_IRQn   = pPuBioset->RotA_IRQn;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012c8:	719a      	strb	r2, [r3, #6]
	RoPuBu.RotSW_IRQ = pPuBioset->RotSW_IRQ;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7b5a      	ldrb	r2, [r3, #13]
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012d0:	735a      	strb	r2, [r3, #13]
	RoPuBu.RotSW_IRQn = pPuBioset->RotSW_IRQn;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f993 200e 	ldrsb.w	r2, [r3, #14]
 80012d8:	4b42      	ldr	r3, [pc, #264]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012da:	739a      	strb	r2, [r3, #14]
	RoPuBu.ccw   = pPuBioset->ccw;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012e4:	821a      	strh	r2, [r3, #16]

	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(RoPuBu.PORT_AB);
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 f804 	bl	80032f8 <gpioInitPort>
	gpioInitPort(RoPuBu.PORT_SW);
 80012f0:	4b3c      	ldr	r3, [pc, #240]	; (80013e4 <initRotaryPushButton+0x15c>)
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f001 ffff 	bl	80032f8 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fa:	b672      	cpsid	i
}
 80012fc:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <initRotaryPushButton+0x160>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	4a39      	ldr	r2, [pc, #228]	; (80013e8 <initRotaryPushButton+0x160>)
 8001304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001308:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinA, INPUT);
 800130a:	4b36      	ldr	r3, [pc, #216]	; (80013e4 <initRotaryPushButton+0x15c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a35      	ldr	r2, [pc, #212]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001310:	7911      	ldrb	r1, [r2, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f002 f8b5 	bl	8003484 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinA, PULLUP);
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <initRotaryPushButton+0x15c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001320:	7911      	ldrb	r1, [r2, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fa01 	bl	800372c <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinB, INPUT);
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <initRotaryPushButton+0x15c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a2d      	ldr	r2, [pc, #180]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001330:	79d1      	ldrb	r1, [r2, #7]
 8001332:	2200      	movs	r2, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f002 f8a5 	bl	8003484 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinB, PULLUP);
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <initRotaryPushButton+0x15c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001340:	79d1      	ldrb	r1, [r2, #7]
 8001342:	2201      	movs	r2, #1
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f9f1 	bl	800372c <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(RoPuBu.PORT_SW, RoPuBu.PinSW, INPUT);
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <initRotaryPushButton+0x15c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001350:	7b11      	ldrb	r1, [r2, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f002 f895 	bl	8003484 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_SW, RoPuBu.PinSW, PULLUP);
 800135a:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <initRotaryPushButton+0x15c>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a21      	ldr	r2, [pc, #132]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001360:	7b11      	ldrb	r1, [r2, #12]
 8001362:	2201      	movs	r2, #1
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f9e1 	bl	800372c <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 800136a:	f001 fd6f 	bl	8002e4c <extiInit>
	extiConfigIrq(RoPuBu.PORT_AB, RoPuBu.PinA);	//EXTI on ROT A
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001374:	7912      	ldrb	r2, [r2, #4]
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fd83 	bl	8002e84 <extiConfigIrq>
	extiConfigIrq(RoPuBu.PORT_SW, RoPuBu.PinSW);	//EXTI on PUSH BUTTON
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001384:	7b12      	ldrb	r2, [r2, #12]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f001 fd7b 	bl	8002e84 <extiConfigIrq>
	extiEnableIrq(RoPuBu.RotA_IRQ);
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <initRotaryPushButton+0x15c>)
 8001390:	795b      	ldrb	r3, [r3, #5]
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fe2a 	bl	8002fec <extiEnableIrq>
	extiEnableIrq(RoPuBu.RotSW_IRQ);
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <initRotaryPushButton+0x15c>)
 800139a:	7b5b      	ldrb	r3, [r3, #13]
 800139c:	4618      	mov	r0, r3
 800139e:	f001 fe25 	bl	8002fec <extiEnableIrq>
	extiSetTriggerEdge(RoPuBu.RotA_IRQ, FALLING_EDGE);
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <initRotaryPushButton+0x15c>)
 80013a4:	795b      	ldrb	r3, [r3, #5]
 80013a6:	2101      	movs	r1, #1
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fe41 	bl	8003030 <extiSetTriggerEdge>
	extiSetTriggerEdge(RoPuBu.RotSW_IRQ, RISING_EDGE);
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <initRotaryPushButton+0x15c>)
 80013b0:	7b5b      	ldrb	r3, [r3, #13]
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fe3b 	bl	8003030 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(RoPuBu.RotA_IRQn);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <initRotaryPushButton+0x15c>)
 80013bc:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff43 	bl	800124c <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(RoPuBu.RotSW_IRQn);
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <initRotaryPushButton+0x15c>)
 80013c8:	f993 300e 	ldrsb.w	r3, [r3, #14]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff3d 	bl	800124c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80013d2:	b662      	cpsie	i
}
 80013d4:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <initRotaryPushButton+0x164>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000234 	.word	0x20000234
 80013e8:	40023800 	.word	0x40023800
 80013ec:	2000024d 	.word	0x2000024d

080013f0 <initLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initLED(const LEDio_t* pLEDset)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	LED.PORT = pLEDset->PORT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <initLED+0xa0>)
 80013fe:	6013      	str	r3, [r2, #0]
	LED.red = pLEDset->red;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	791a      	ldrb	r2, [r3, #4]
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <initLED+0xa0>)
 8001406:	711a      	strb	r2, [r3, #4]
	LED.green = pLEDset->green;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	795a      	ldrb	r2, [r3, #5]
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <initLED+0xa0>)
 800140e:	715a      	strb	r2, [r3, #5]
	LED.blue = pLEDset->blue;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	799a      	ldrb	r2, [r3, #6]
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <initLED+0xa0>)
 8001416:	719a      	strb	r2, [r3, #6]
	/* Initialize GPIO ports for LED Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(LED.PORT);
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <initLED+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f001 ff6b 	bl	80032f8 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.red, OUTPUT);
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <initLED+0xa0>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1a      	ldr	r2, [pc, #104]	; (8001490 <initLED+0xa0>)
 8001428:	7911      	ldrb	r1, [r2, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f829 	bl	8003484 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.green, OUTPUT);
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <initLED+0xa0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a16      	ldr	r2, [pc, #88]	; (8001490 <initLED+0xa0>)
 8001438:	7951      	ldrb	r1, [r2, #5]
 800143a:	2201      	movs	r2, #1
 800143c:	4618      	mov	r0, r3
 800143e:	f002 f821 	bl	8003484 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.blue, OUTPUT);
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <initLED+0xa0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <initLED+0xa0>)
 8001448:	7991      	ldrb	r1, [r2, #6]
 800144a:	2201      	movs	r2, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f002 f819 	bl	8003484 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED.PORT,LED.red);
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <initLED+0xa0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <initLED+0xa0>)
 8001458:	7912      	ldrb	r2, [r2, #4]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f002 f85c 	bl	800351a <gpioSetPin>
	gpioSetPin(LED.PORT,LED.green);
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <initLED+0xa0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <initLED+0xa0>)
 8001468:	7952      	ldrb	r2, [r2, #5]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f854 	bl	800351a <gpioSetPin>
	gpioSetPin(LED.PORT,LED.blue);
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <initLED+0xa0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <initLED+0xa0>)
 8001478:	7992      	ldrb	r2, [r2, #6]
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f84c 	bl	800351a <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 8001482:	4b04      	ldr	r3, [pc, #16]	; (8001494 <initLED+0xa4>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000022c 	.word	0x2000022c
 8001494:	2000024e 	.word	0x2000024e

08001498 <setLED>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setLED(LED_COLOR_t color)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 80014a2:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <setLED+0x140>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	f083 0301 	eor.w	r3, r3, #1
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <setLED+0x1e>
	{
		initLED(&LEDpgb);
 80014b0:	484a      	ldr	r0, [pc, #296]	; (80015dc <setLED+0x144>)
 80014b2:	f7ff ff9d 	bl	80013f0 <initLED>
	}

	switch(color)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d845      	bhi.n	8001548 <setLED+0xb0>
 80014bc:	a201      	add	r2, pc, #4	; (adr r2, 80014c4 <setLED+0x2c>)
 80014be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c2:	bf00      	nop
 80014c4:	080014ef 	.word	0x080014ef
 80014c8:	080014dd 	.word	0x080014dd
 80014cc:	08001501 	.word	0x08001501
 80014d0:	08001537 	.word	0x08001537
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001513 	.word	0x08001513
	{
		/**
		 *  Set only RED LED */
		case RED_on:
			gpioSetPin(LED.PORT,LED.red);
 80014dc:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <setLED+0x148>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <setLED+0x148>)
 80014e2:	7912      	ldrb	r2, [r2, #4]
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 f817 	bl	800351a <gpioSetPin>
		break;
 80014ec:	e06f      	b.n	80015ce <setLED+0x136>
		case RED_off:
			gpioResetPin(LED.PORT,LED.red);
 80014ee:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <setLED+0x148>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <setLED+0x148>)
 80014f4:	7912      	ldrb	r2, [r2, #4]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 f839 	bl	8003570 <gpioResetPin>
		break;
 80014fe:	e066      	b.n	80015ce <setLED+0x136>

		/**
		 *  Set only LED GREEN */
		case GREEN_on:
			gpioResetPin(LED.PORT,LED.green);
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <setLED+0x148>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a36      	ldr	r2, [pc, #216]	; (80015e0 <setLED+0x148>)
 8001506:	7952      	ldrb	r2, [r2, #5]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f002 f830 	bl	8003570 <gpioResetPin>
		break;
 8001510:	e05d      	b.n	80015ce <setLED+0x136>
		case GREEN_off:
					gpioSetPin(LED.PORT,LED.green);
 8001512:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <setLED+0x148>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <setLED+0x148>)
 8001518:	7952      	ldrb	r2, [r2, #5]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f001 fffc 	bl	800351a <gpioSetPin>
				break;
 8001522:	e054      	b.n	80015ce <setLED+0x136>
		/**
		 *  Set only LED BLUE */
		case BLUE_on:
			gpioResetPin(LED.PORT,LED.blue);
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <setLED+0x148>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <setLED+0x148>)
 800152a:	7992      	ldrb	r2, [r2, #6]
 800152c:	4611      	mov	r1, r2
 800152e:	4618      	mov	r0, r3
 8001530:	f002 f81e 	bl	8003570 <gpioResetPin>
		break;
 8001534:	e04b      	b.n	80015ce <setLED+0x136>
		case BLUE_off:
			gpioSetPin(LED.PORT,LED.blue);
 8001536:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <setLED+0x148>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a29      	ldr	r2, [pc, #164]	; (80015e0 <setLED+0x148>)
 800153c:	7992      	ldrb	r2, [r2, #6]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f001 ffea 	bl	800351a <gpioSetPin>
		break;
 8001546:	e042      	b.n	80015ce <setLED+0x136>

		/**
		 *  Set LEDs color RGB- matrix mix */
		default:
		{
			if ((color & 0b000001) != 0 )
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <setLED+0xcc>
			{gpioResetPin(LED.PORT,LED.red);}
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <setLED+0x148>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a22      	ldr	r2, [pc, #136]	; (80015e0 <setLED+0x148>)
 8001558:	7912      	ldrb	r2, [r2, #4]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f002 f807 	bl	8003570 <gpioResetPin>
 8001562:	e007      	b.n	8001574 <setLED+0xdc>
			else {gpioSetPin(LED.PORT,LED.red);	}
 8001564:	4b1e      	ldr	r3, [pc, #120]	; (80015e0 <setLED+0x148>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <setLED+0x148>)
 800156a:	7912      	ldrb	r2, [r2, #4]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f001 ffd3 	bl	800351a <gpioSetPin>
			if ((color & 0b000010) != 0 )
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <setLED+0xf8>
			{gpioResetPin(LED.PORT,LED.green);}
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <setLED+0x148>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a17      	ldr	r2, [pc, #92]	; (80015e0 <setLED+0x148>)
 8001584:	7952      	ldrb	r2, [r2, #5]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f001 fff1 	bl	8003570 <gpioResetPin>
 800158e:	e007      	b.n	80015a0 <setLED+0x108>
			else {gpioSetPin(LED.PORT,LED.green);}
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <setLED+0x148>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <setLED+0x148>)
 8001596:	7952      	ldrb	r2, [r2, #5]
 8001598:	4611      	mov	r1, r2
 800159a:	4618      	mov	r0, r3
 800159c:	f001 ffbd 	bl	800351a <gpioSetPin>
			if ((color & 0b000100) != 0 )
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <setLED+0x124>
			{gpioResetPin(LED.PORT,LED.blue);}
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <setLED+0x148>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <setLED+0x148>)
 80015b0:	7992      	ldrb	r2, [r2, #6]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 ffdb 	bl	8003570 <gpioResetPin>
			else {gpioSetPin(LED.PORT,LED.blue);}
		}
		break;
 80015ba:	e007      	b.n	80015cc <setLED+0x134>
			else {gpioSetPin(LED.PORT,LED.blue);}
 80015bc:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <setLED+0x148>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	; (80015e0 <setLED+0x148>)
 80015c2:	7992      	ldrb	r2, [r2, #6]
 80015c4:	4611      	mov	r1, r2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 ffa7 	bl	800351a <gpioSetPin>
		break;
 80015cc:	bf00      	nop
	}
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000024e 	.word	0x2000024e
 80015dc:	08008ce4 	.word	0x08008ce4
 80015e0:	2000022c 	.word	0x2000022c

080015e4 <modifPositionCount>:
/**
 *    @function	 helper for ROTARY_A_HANDLER interrupt
 *    @brief Checks ROT B and updates the position accordingly.
 */
void modifPositionCount(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(RoPuBu.PORT_AB, RoPuBu.PinB) == true)
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <modifPositionCount+0x44>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <modifPositionCount+0x44>)
 80015ee:	79d2      	ldrb	r2, [r2, #7]
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 f8f7 	bl	80037e6 <gpioGetPinState>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d009      	beq.n	8001612 <modifPositionCount+0x2e>
	{
		rotoryPosition += RoPuBu.ccw;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <modifPositionCount+0x44>)
 8001600:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001604:	461a      	mov	r2, r3
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <modifPositionCount+0x48>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <modifPositionCount+0x48>)
 800160e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		rotoryPosition -= RoPuBu.ccw;
	}
}
 8001610:	e007      	b.n	8001622 <modifPositionCount+0x3e>
		rotoryPosition -= RoPuBu.ccw;
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <modifPositionCount+0x48>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <modifPositionCount+0x44>)
 8001618:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	4a03      	ldr	r2, [pc, #12]	; (800162c <modifPositionCount+0x48>)
 8001620:	6013      	str	r3, [r2, #0]
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000234 	.word	0x20000234
 800162c:	20000248 	.word	0x20000248

08001630 <EXTI0_IRQHandler>:
 * @function	 EXTI0_IRQHandler
 * 				  *
 * @brief		 EXTI Interrupt Handler for Pin0
 */
void EXTI0_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	modifPositionCount(); //! Check ROT B and update position
 8001634:	f7ff ffd6 	bl	80015e4 <modifPositionCount>
	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & EXTI_PR_PR0)
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <EXTI0_IRQHandler+0x24>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <EXTI0_IRQHandler+0x20>
	{
		EXTI->PR |= EXTI_PR_PR0;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <EXTI0_IRQHandler+0x24>)
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	4a02      	ldr	r2, [pc, #8]	; (8001654 <EXTI0_IRQHandler+0x24>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6153      	str	r3, [r2, #20]
	}
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40013c00 	.word	0x40013c00

08001658 <EXTI15_10_IRQHandler>:
 * 				 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void EXTI15_10_IRQHandler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <EXTI15_10_IRQHandler+0x2c>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & EXTI_PR_PR10)
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <EXTI15_10_IRQHandler+0x30>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= EXTI_PR_PR10;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <EXTI15_10_IRQHandler+0x30>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <EXTI15_10_IRQHandler+0x30>)
 8001674:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001678:	6153      	str	r3, [r2, #20]
	}
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	2000024c 	.word	0x2000024c
 8001688:	40013c00 	.word	0x40013c00

0800168c <_DC1>:
 */
static ST7735io_t *TFT ;
static SPI_TypeDef  *spi ;

void _DC1(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->DC_PORT, TFT->DC);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <_DC1+0x1c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <_DC1+0x1c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	7b1b      	ldrb	r3, [r3, #12]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f001 ff3b 	bl	800351a <gpioSetPin>
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000250 	.word	0x20000250

080016ac <_DC0>:
void _DC0(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->DC_PORT, TFT->DC);
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <_DC0+0x1c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689a      	ldr	r2, [r3, #8]
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <_DC0+0x1c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	7b1b      	ldrb	r3, [r3, #12]
 80016bc:	4619      	mov	r1, r3
 80016be:	4610      	mov	r0, r2
 80016c0:	f001 ff56 	bl	8003570 <gpioResetPin>
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000250 	.word	0x20000250

080016cc <_RST1>:

void _RST1(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->RST_PORT, TFT->RST);
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <_RST1+0x1c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <_RST1+0x1c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	7d1b      	ldrb	r3, [r3, #20]
 80016dc:	4619      	mov	r1, r3
 80016de:	4610      	mov	r0, r2
 80016e0:	f001 ff1b 	bl	800351a <gpioSetPin>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000250 	.word	0x20000250

080016ec <_RST0>:

void _RST0(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->RST_PORT, TFT->RST);
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <_RST0+0x1c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691a      	ldr	r2, [r3, #16]
 80016f6:	4b04      	ldr	r3, [pc, #16]	; (8001708 <_RST0+0x1c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	7d1b      	ldrb	r3, [r3, #20]
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f001 ff36 	bl	8003570 <gpioResetPin>
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000250 	.word	0x20000250

0800170c <_CS0>:
void _CS1(void)
{
	gpioSetPin(TFT->CS_PORT, TFT->CS);
}
void _CS0(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->CS_PORT, TFT->CS);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <_CS0+0x1c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <_CS0+0x1c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	4619      	mov	r1, r3
 800171e:	4610      	mov	r0, r2
 8001720:	f001 ff26 	bl	8003570 <gpioResetPin>
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000250 	.word	0x20000250

0800172c <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <delayms+0x18>)
 8001738:	f002 ff8c 	bl	8004654 <systickDelay>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000224 	.word	0x20000224

08001748 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, TFT->CS_PORT, TFT->CS, data);
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <tftSPISenddata+0x28>)
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <tftSPISenddata+0x2c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6819      	ldr	r1, [r3, #0]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <tftSPISenddata+0x2c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	791a      	ldrb	r2, [r3, #4]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	f002 fe67 	bl	8004436 <spiWriteByte>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000254 	.word	0x20000254
 8001774:	20000250 	.word	0x20000250

08001778 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
	_DC0();
 8001782:	f7ff ff93 	bl	80016ac <_DC0>
    tftSPISenddata(cmd);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ffdd 	bl	8001748 <tftSPISenddata>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
	_DC1();
 80017a0:	f7ff ff74 	bl	800168c <_DC1>
    tftSPISenddata(data);
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ffce 	bl	8001748 <tftSPISenddata>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <IOspiInit>:

// Function that initializes the hardware configuration
void IOspiInit(ST7735io_t *TFTset)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	6078      	str	r0, [r7, #4]
	TFT = TFTset;
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <IOspiInit+0x120>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
	spi = TFT->SPI;
 80017c2:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <IOspiInit+0x120>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a43      	ldr	r2, [pc, #268]	; (80018d8 <IOspiInit+0x124>)
 80017ca:	6013      	str	r3, [r2, #0]
    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(TFT->RST_PORT);
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <IOspiInit+0x120>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f001 fdf2 	bl	80033bc <gpioSelectPort>
    gpioSelectPinMode(TFT->RST_PORT, TFT->RST, OUTPUT);		// RESET
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <IOspiInit+0x120>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6918      	ldr	r0, [r3, #16]
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <IOspiInit+0x120>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	7d1b      	ldrb	r3, [r3, #20]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4619      	mov	r1, r3
 80017e8:	f001 fe4c 	bl	8003484 <gpioSelectPinMode>
    gpioSelectPort(TFT->DC_PORT);
 80017ec:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <IOspiInit+0x120>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fde2 	bl	80033bc <gpioSelectPort>
    gpioSelectPinMode(TFT->DC_PORT, TFT->DC, OUTPUT);		// DATA/Command
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <IOspiInit+0x120>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6898      	ldr	r0, [r3, #8]
 80017fe:	4b35      	ldr	r3, [pc, #212]	; (80018d4 <IOspiInit+0x120>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	7b1b      	ldrb	r3, [r3, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	4619      	mov	r1, r3
 8001808:	f001 fe3c 	bl	8003484 <gpioSelectPinMode>



    gpioInitPort(TFT->CS_PORT);
 800180c:	4b31      	ldr	r3, [pc, #196]	; (80018d4 <IOspiInit+0x120>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fd70 	bl	80032f8 <gpioInitPort>
    gpioSelectPinMode(TFT->CS_PORT,TFT->CS, OUTPUT);        // CS
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <IOspiInit+0x120>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <IOspiInit+0x120>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	f001 fe2c 	bl	8003484 <gpioSelectPinMode>
    gpioSelectPushPullMode(TFT->CS_PORT, TFT->CS, PULLUP);
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <IOspiInit+0x120>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <IOspiInit+0x120>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	791b      	ldrb	r3, [r3, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	4619      	mov	r1, r3
 800183c:	f001 ff76 	bl	800372c <gpioSelectPushPullMode>

    gpioInitPort(TFT->SPI_PORT);
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <IOspiInit+0x120>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fd56 	bl	80032f8 <gpioInitPort>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->CLK, ALTFUNC);	// SPI1 Clock
 800184c:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <IOspiInit+0x120>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	69d8      	ldr	r0, [r3, #28]
 8001852:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <IOspiInit+0x120>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185a:	2202      	movs	r2, #2
 800185c:	4619      	mov	r1, r3
 800185e:	f001 fe11 	bl	8003484 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->CLK, AF5);
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <IOspiInit+0x120>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	69d8      	ldr	r0, [r3, #28]
 8001868:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <IOspiInit+0x120>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001870:	2205      	movs	r2, #5
 8001872:	4619      	mov	r1, r3
 8001874:	f001 fea8 	bl	80035c8 <gpioSelectAltFunc>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->MOSI, ALTFUNC);	// SPI1 MOSI
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <IOspiInit+0x120>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69d8      	ldr	r0, [r3, #28]
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <IOspiInit+0x120>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	2202      	movs	r2, #2
 8001888:	4619      	mov	r1, r3
 800188a:	f001 fdfb 	bl	8003484 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->MOSI, AF5);
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <IOspiInit+0x120>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	69d8      	ldr	r0, [r3, #28]
 8001894:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <IOspiInit+0x120>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189c:	2205      	movs	r2, #5
 800189e:	4619      	mov	r1, r3
 80018a0:	f001 fe92 	bl	80035c8 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <IOspiInit+0x124>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fd69 	bl	8004380 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <IOspiInit+0x124>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	2300      	movs	r3, #0
 80018b4:	9303      	str	r3, [sp, #12]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9302      	str	r3, [sp, #8]
 80018ba:	2300      	movs	r3, #0
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	2301      	movs	r3, #1
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	2200      	movs	r2, #0
 80018c6:	2103      	movs	r1, #3
 80018c8:	f002 fc6c 	bl	80041a4 <spiInitSPI>

}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000250 	.word	0x20000250
 80018d8:	20000254 	.word	0x20000254

080018dc <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80018ee:	e033      	b.n	8001958 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff3d 	bl	8001778 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8001908:	7bbb      	ldrb	r3, [r7, #14]
 800190a:	b29b      	uxth	r3, r3
 800190c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001910:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8001912:	7bbb      	ldrb	r3, [r7, #14]
 8001914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001918:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 800191a:	e006      	b.n	800192a <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff36 	bl	8001796 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	73ba      	strb	r2, [r7, #14]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1f3      	bne.n	800191c <commandList+0x40>
		}

		if(ms) {
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00e      	beq.n	8001958 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8001944:	89bb      	ldrh	r3, [r7, #12]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d102      	bne.n	8001950 <commandList+0x74>
 800194a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800194e:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8001950:	89bb      	ldrh	r3, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff feea 	bl	800172c <delayms>
	while(numCommands--) {                 // For each command...
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	1e5a      	subs	r2, r3, #1
 800195c:	73fa      	strb	r2, [r7, #15]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1c6      	bne.n	80018f0 <commandList+0x14>
		}
	}
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	_CS0();
 8001974:	f7ff feca 	bl	800170c <_CS0>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	_RST0();
 8001978:	f7ff feb8 	bl	80016ec <_RST0>
	delayms(50);  //default value 50
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f7ff fed5 	bl	800172c <delayms>
	_RST1();
 8001982:	f7ff fea3 	bl	80016cc <_RST1>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d002      	beq.n	8001992 <commonInit+0x26>
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffa5 	bl	80018dc <commandList>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80019a6:	2032      	movs	r0, #50	; 0x32
 80019a8:	f7ff fec0 	bl	800172c <delayms>
	commonInit(Rcmd1);
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <tftInitR+0x58>)
 80019ae:	f7ff ffdd 	bl	800196c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80019b8:	480f      	ldr	r0, [pc, #60]	; (80019f8 <tftInitR+0x5c>)
 80019ba:	f7ff ff8f 	bl	80018dc <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <tftInitR+0x60>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <tftInitR+0x64>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e002      	b.n	80019d2 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <tftInitR+0x68>)
 80019ce:	f7ff ff85 	bl	80018dc <commandList>
	}
	commandList(Rcmd3);
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <tftInitR+0x6c>)
 80019d4:	f7ff ff82 	bl	80018dc <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d105      	bne.n	80019ea <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80019de:	2036      	movs	r0, #54	; 0x36
 80019e0:	f7ff feca 	bl	8001778 <tftSendCmd>
		tftSendData(0xC0);
 80019e4:	20c0      	movs	r0, #192	; 0xc0
 80019e6:	f7ff fed6 	bl	8001796 <tftSendData>
	}

	//  tabcolor = options;
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08009180 	.word	0x08009180
 80019f8:	080091bc 	.word	0x080091bc
 80019fc:	20000258 	.word	0x20000258
 8001a00:	2000025c 	.word	0x2000025c
 8001a04:	080091cc 	.word	0x080091cc
 8001a08:	080091dc 	.word	0x080091dc

08001a0c <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4604      	mov	r4, r0
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71bb      	strb	r3, [r7, #6]
 8001a22:	460b      	mov	r3, r1
 8001a24:	717b      	strb	r3, [r7, #5]
 8001a26:	4613      	mov	r3, r2
 8001a28:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 8001a2a:	202a      	movs	r0, #42	; 0x2a
 8001a2c:	f7ff fea4 	bl	8001778 <tftSendCmd>
	tftSendData(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff feb0 	bl	8001796 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <tftSetAddrWindow+0x98>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fea7 	bl	8001796 <tftSendData>
	tftSendData(0x00);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fea4 	bl	8001796 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <tftSetAddrWindow+0x98>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	797b      	ldrb	r3, [r7, #5]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fe9b 	bl	8001796 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8001a60:	202b      	movs	r0, #43	; 0x2b
 8001a62:	f7ff fe89 	bl	8001778 <tftSendCmd>
	tftSendData(0x00);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fe95 	bl	8001796 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <tftSetAddrWindow+0x9c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	79bb      	ldrb	r3, [r7, #6]
 8001a74:	4413      	add	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fe8c 	bl	8001796 <tftSendData>
	tftSendData(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff fe89 	bl	8001796 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <tftSetAddrWindow+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	793b      	ldrb	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fe80 	bl	8001796 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 8001a96:	202c      	movs	r0, #44	; 0x2c
 8001a98:	f7ff fe6e 	bl	8001778 <tftSendCmd>
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	20000258 	.word	0x20000258
 8001aa8:	2000025c 	.word	0x2000025c

08001aac <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
	_DC1();
 8001ab6:	f7ff fde9 	bl	800168c <_DC1>
	putpix(color);
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fe40 	bl	8001748 <tftSPISenddata>
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fe3b 	bl	8001748 <tftSPISenddata>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <tftDrawPixel>:

/* draw single colored pixel on screen
 * x and y are the Position, color examples are defined in tft Display Header
 */
void tftDrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	80bb      	strh	r3, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	807b      	strh	r3, [r7, #2]
	if((x < 0) ||(x >= width) || (y < 0) || (y >= height))
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	db22      	blt.n	8001b3c <tftDrawPixel+0x60>
 8001af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <tftDrawPixel+0x68>)
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	da1c      	bge.n	8001b3c <tftDrawPixel+0x60>
 8001b02:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db18      	blt.n	8001b3c <tftDrawPixel+0x60>
 8001b0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b0e:	4a0e      	ldr	r2, [pc, #56]	; (8001b48 <tftDrawPixel+0x6c>)
 8001b10:	8812      	ldrh	r2, [r2, #0]
 8001b12:	4293      	cmp	r3, r2
 8001b14:	da12      	bge.n	8001b3c <tftDrawPixel+0x60>
		{
		return;
		}

	tftSetAddrWindow(x,y,x+1,y+1);
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	b2d8      	uxtb	r0, r3
 8001b1a:	88bb      	ldrh	r3, [r7, #4]
 8001b1c:	b2d9      	uxtb	r1, r3
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f7ff ff6d 	bl	8001a0c <tftSetAddrWindow>
	tftPushColor(color);
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ffb9 	bl	8001aac <tftPushColor>
 8001b3a:	e000      	b.n	8001b3e <tftDrawPixel+0x62>
		return;
 8001b3c:	bf00      	nop
}
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000002 	.word	0x20000002

08001b4c <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4604      	mov	r4, r0
 8001b54:	4608      	mov	r0, r1
 8001b56:	4611      	mov	r1, r2
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4623      	mov	r3, r4
 8001b5c:	80fb      	strh	r3, [r7, #6]
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80bb      	strh	r3, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8001b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b6e:	4a36      	ldr	r2, [pc, #216]	; (8001c48 <tftFillRect+0xfc>)
 8001b70:	8812      	ldrh	r2, [r2, #0]
 8001b72:	4293      	cmp	r3, r2
 8001b74:	da63      	bge.n	8001c3e <tftFillRect+0xf2>
 8001b76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b7a:	4a34      	ldr	r2, [pc, #208]	; (8001c4c <tftFillRect+0x100>)
 8001b7c:	8812      	ldrh	r2, [r2, #0]
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	da5d      	bge.n	8001c3e <tftFillRect+0xf2>
		{
		return;
		}

	if((x + w - 1) >= width)
 8001b82:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a2e      	ldr	r2, [pc, #184]	; (8001c48 <tftFillRect+0xfc>)
 8001b8e:	8812      	ldrh	r2, [r2, #0]
 8001b90:	4293      	cmp	r3, r2
 8001b92:	dd05      	ble.n	8001ba0 <tftFillRect+0x54>
		{
		w = width  - x;
 8001b94:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <tftFillRect+0xfc>)
 8001b96:	881a      	ldrh	r2, [r3, #0]
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8001ba0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ba4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <tftFillRect+0x100>)
 8001bac:	8812      	ldrh	r2, [r2, #0]
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	dd05      	ble.n	8001bbe <tftFillRect+0x72>
		{
		h = height - y;
 8001bb2:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <tftFillRect+0x100>)
 8001bb4:	881a      	ldrh	r2, [r3, #0]
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	b2d8      	uxtb	r0, r3
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	b2d9      	uxtb	r1, r3
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b2dc      	uxtb	r4, r3
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	883b      	ldrh	r3, [r7, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	4622      	mov	r2, r4
 8001be8:	f7ff ff10 	bl	8001a0c <tftSetAddrWindow>

	_DC1();
 8001bec:	f7ff fd4e 	bl	800168c <_DC1>
	for(y=h; y>0; y--)
 8001bf0:	883b      	ldrh	r3, [r7, #0]
 8001bf2:	80bb      	strh	r3, [r7, #4]
 8001bf4:	e01e      	b.n	8001c34 <tftFillRect+0xe8>
	{
		for(x=w; x>0; x--)
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	e011      	b.n	8001c20 <tftFillRect+0xd4>
		{
			putpix(color);
 8001bfc:	8b3b      	ldrh	r3, [r7, #24]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fd9f 	bl	8001748 <tftSPISenddata>
 8001c0a:	8b3b      	ldrh	r3, [r7, #24]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fd9a 	bl	8001748 <tftSPISenddata>
		for(x=w; x>0; x--)
 8001c14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	80fb      	strh	r3, [r7, #6]
 8001c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	dce9      	bgt.n	8001bfc <tftFillRect+0xb0>
	for(y=h; y>0; y--)
 8001c28:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	dcdc      	bgt.n	8001bf6 <tftFillRect+0xaa>
 8001c3c:	e000      	b.n	8001c40 <tftFillRect+0xf4>
		return;
 8001c3e:	bf00      	nop
		}
	}
}
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000002 	.word	0x20000002

08001c50 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	80fb      	strh	r3, [r7, #6]
 8001c62:	4603      	mov	r3, r0
 8001c64:	80bb      	strh	r3, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8001c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c72:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <tftDrawFastVLine+0xb0>)
 8001c74:	8812      	ldrh	r2, [r2, #0]
 8001c76:	4293      	cmp	r3, r2
 8001c78:	da3d      	bge.n	8001cf6 <tftDrawFastVLine+0xa6>
 8001c7a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c7e:	4a21      	ldr	r2, [pc, #132]	; (8001d04 <tftDrawFastVLine+0xb4>)
 8001c80:	8812      	ldrh	r2, [r2, #0]
 8001c82:	4293      	cmp	r3, r2
 8001c84:	da37      	bge.n	8001cf6 <tftDrawFastVLine+0xa6>
	if((y+h-1) >= height) h = height-y;
 8001c86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a1c      	ldr	r2, [pc, #112]	; (8001d04 <tftDrawFastVLine+0xb4>)
 8001c92:	8812      	ldrh	r2, [r2, #0]
 8001c94:	4293      	cmp	r3, r2
 8001c96:	dd05      	ble.n	8001ca4 <tftDrawFastVLine+0x54>
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <tftDrawFastVLine+0xb4>)
 8001c9a:	881a      	ldrh	r2, [r3, #0]
 8001c9c:	88bb      	ldrh	r3, [r7, #4]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	b2d8      	uxtb	r0, r3
 8001ca8:	88bb      	ldrh	r3, [r7, #4]
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	88fb      	ldrh	r3, [r7, #6]
 8001cae:	b2dc      	uxtb	r4, r3
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	887b      	ldrh	r3, [r7, #2]
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4622      	mov	r2, r4
 8001cc2:	f7ff fea3 	bl	8001a0c <tftSetAddrWindow>

	_DC1();
 8001cc6:	f7ff fce1 	bl	800168c <_DC1>
	while (h--) {
 8001cca:	e00b      	b.n	8001ce4 <tftDrawFastVLine+0x94>
		putpix(color);
 8001ccc:	883b      	ldrh	r3, [r7, #0]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fd37 	bl	8001748 <tftSPISenddata>
 8001cda:	883b      	ldrh	r3, [r7, #0]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fd32 	bl	8001748 <tftSPISenddata>
	while (h--) {
 8001ce4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	3a01      	subs	r2, #1
 8001cec:	b292      	uxth	r2, r2
 8001cee:	807a      	strh	r2, [r7, #2]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1eb      	bne.n	8001ccc <tftDrawFastVLine+0x7c>
 8001cf4:	e000      	b.n	8001cf8 <tftDrawFastVLine+0xa8>
	if((x >= width) || (y >= height)) return;
 8001cf6:	bf00      	nop
	}
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd90      	pop	{r4, r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000002 	.word	0x20000002

08001d08 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8001d10:	4a0d      	ldr	r2, [pc, #52]	; (8001d48 <tftSetFont+0x40>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <tftSetFont+0x40>)
 8001d1c:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	785a      	ldrb	r2, [r3, #1]
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <tftSetFont+0x40>)
 8001d24:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	789a      	ldrb	r2, [r3, #2]
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <tftSetFont+0x40>)
 8001d2c:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3303      	adds	r3, #3
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <tftSetFont+0x40>)
 8001d38:	811a      	strh	r2, [r3, #8]
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000264 	.word	0x20000264

08001d4c <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8001d5a:	4b74      	ldr	r3, [pc, #464]	; (8001f2c <tftPrintChar+0x1e0>)
 8001d5c:	791b      	ldrb	r3, [r3, #4]
 8001d5e:	2b07      	cmp	r3, #7
 8001d60:	d803      	bhi.n	8001d6a <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8001d62:	4b72      	ldr	r3, [pc, #456]	; (8001f2c <tftPrintChar+0x1e0>)
 8001d64:	791b      	ldrb	r3, [r3, #4]
 8001d66:	77bb      	strb	r3, [r7, #30]
 8001d68:	e003      	b.n	8001d72 <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8001d6a:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <tftPrintChar+0x1e0>)
 8001d6c:	791b      	ldrb	r3, [r3, #4]
 8001d6e:	08db      	lsrs	r3, r3, #3
 8001d70:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8001d72:	4b6f      	ldr	r3, [pc, #444]	; (8001f30 <tftPrintChar+0x1e4>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d15e      	bne.n	8001e38 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	b2d8      	uxtb	r0, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	b2d9      	uxtb	r1, r3
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <tftPrintChar+0x1e0>)
 8001d84:	791a      	ldrb	r2, [r3, #4]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b2dc      	uxtb	r4, r3
 8001d92:	4b66      	ldr	r3, [pc, #408]	; (8001f2c <tftPrintChar+0x1e0>)
 8001d94:	795a      	ldrb	r2, [r3, #5]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	4622      	mov	r2, r4
 8001da4:	f7ff fe32 	bl	8001a0c <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <tftPrintChar+0x1e0>)
 8001dac:	7992      	ldrb	r2, [r2, #6]
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	7fbb      	ldrb	r3, [r7, #30]
 8001db4:	b299      	uxth	r1, r3
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <tftPrintChar+0x1e0>)
 8001db8:	795b      	ldrb	r3, [r3, #5]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	fb11 f303 	smulbb	r3, r1, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	fb12 f303 	smulbb	r3, r2, r3
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3304      	adds	r3, #4
 8001dca:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8001dcc:	2300      	movs	r3, #0
 8001dce:	83bb      	strh	r3, [r7, #28]
 8001dd0:	e029      	b.n	8001e26 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <tftPrintChar+0x1e0>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	8b7b      	ldrh	r3, [r7, #26]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	77fb      	strb	r3, [r7, #31]
 8001de2:	e017      	b.n	8001e14 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8001de4:	7cfa      	ldrb	r2, [r7, #19]
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	f1c3 0307 	rsb	r3, r3, #7
 8001dec:	fa42 f303 	asr.w	r3, r2, r3
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8001df8:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <tftPrintChar+0x1e8>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe55 	bl	8001aac <tftPushColor>
 8001e02:	e004      	b.n	8001e0e <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <tftPrintChar+0x1ec>)
 8001e06:	881b      	ldrh	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe4f 	bl	8001aac <tftPushColor>
			for(i=0;i<8;i++)
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	3301      	adds	r3, #1
 8001e12:	77fb      	strb	r3, [r7, #31]
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	2b07      	cmp	r3, #7
 8001e18:	d9e4      	bls.n	8001de4 <tftPrintChar+0x98>
				}
			}
			temp++;
 8001e1a:	8b7b      	ldrh	r3, [r7, #26]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8001e20:	8bbb      	ldrh	r3, [r7, #28]
 8001e22:	3301      	adds	r3, #1
 8001e24:	83bb      	strh	r3, [r7, #28]
 8001e26:	8bba      	ldrh	r2, [r7, #28]
 8001e28:	7fbb      	ldrb	r3, [r7, #30]
 8001e2a:	4940      	ldr	r1, [pc, #256]	; (8001f2c <tftPrintChar+0x1e0>)
 8001e2c:	7949      	ldrb	r1, [r1, #5]
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	429a      	cmp	r2, r3
 8001e34:	dbcd      	blt.n	8001dd2 <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8001e36:	e075      	b.n	8001f24 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <tftPrintChar+0x1e0>)
 8001e3c:	7992      	ldrb	r2, [r2, #6]
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	7fbb      	ldrb	r3, [r7, #30]
 8001e44:	b299      	uxth	r1, r3
 8001e46:	4b39      	ldr	r3, [pc, #228]	; (8001f2c <tftPrintChar+0x1e0>)
 8001e48:	795b      	ldrb	r3, [r3, #5]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	fb11 f303 	smulbb	r3, r1, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	fb12 f303 	smulbb	r3, r2, r3
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	3304      	adds	r3, #4
 8001e5a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	83bb      	strh	r3, [r7, #28]
 8001e60:	e05a      	b.n	8001f18 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e04b      	b.n	8001f00 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8001e68:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <tftPrintChar+0x1e0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	8b79      	ldrh	r1, [r7, #26]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	440a      	add	r2, r1
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
 8001e7c:	e03a      	b.n	8001ef4 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	7ffb      	ldrb	r3, [r7, #31]
 8001e84:	4413      	add	r3, r2
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4413      	add	r3, r2
 8001e92:	b2d8      	uxtb	r0, r3
 8001e94:	8bbb      	ldrh	r3, [r7, #28]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	b2d9      	uxtb	r1, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2dc      	uxtb	r4, r3
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4622      	mov	r2, r4
 8001ecc:	f7ff fd9e 	bl	8001a0c <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8001ed0:	7cfa      	ldrb	r2, [r7, #19]
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	f1c3 0307 	rsb	r3, r3, #7
 8001ed8:	fa42 f303 	asr.w	r3, r2, r3
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <tftPrintChar+0x1e8>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fddf 	bl	8001aac <tftPushColor>
				for(i=0;i<8;i++)
 8001eee:	7ffb      	ldrb	r3, [r7, #31]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
 8001ef6:	2b07      	cmp	r3, #7
 8001ef8:	d9c1      	bls.n	8001e7e <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	7fbb      	ldrb	r3, [r7, #30]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbaf      	blt.n	8001e68 <tftPrintChar+0x11c>
			temp+=(fz);
 8001f08:	7fbb      	ldrb	r3, [r7, #30]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	8b7b      	ldrh	r3, [r7, #26]
 8001f0e:	4413      	add	r3, r2
 8001f10:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8001f12:	8bbb      	ldrh	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	83bb      	strh	r3, [r7, #28]
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <tftPrintChar+0x1e0>)
 8001f1a:	795b      	ldrb	r3, [r3, #5]
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	8bba      	ldrh	r2, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d39e      	bcc.n	8001e62 <tftPrintChar+0x116>
}
 8001f24:	bf00      	nop
 8001f26:	3724      	adds	r7, #36	; 0x24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	20000264 	.word	0x20000264
 8001f30:	20000270 	.word	0x20000270
 8001f34:	20000028 	.word	0x20000028
 8001f38:	20000272 	.word	0x20000272
 8001f3c:	00000000 	.word	0x00000000

08001f40 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8001f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f44:	b08e      	sub	sp, #56	; 0x38
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8001f52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f54:	f7fe faee 	bl	8000534 <__aeabi_i2d>
 8001f58:	a395      	add	r3, pc, #596	; (adr r3, 80021b0 <tftRotateChar+0x270>)
 8001f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5e:	f7fe fb53 	bl	8000608 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8001f6a:	4b8d      	ldr	r3, [pc, #564]	; (80021a0 <tftRotateChar+0x260>)
 8001f6c:	791b      	ldrb	r3, [r3, #4]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d804      	bhi.n	8001f7c <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8001f72:	4b8b      	ldr	r3, [pc, #556]	; (80021a0 <tftRotateChar+0x260>)
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001f7a:	e017      	b.n	8001fac <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8001f7c:	4b88      	ldr	r3, [pc, #544]	; (80021a0 <tftRotateChar+0x260>)
 8001f7e:	791b      	ldrb	r3, [r3, #4]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	4a85      	ldr	r2, [pc, #532]	; (80021a0 <tftRotateChar+0x260>)
 8001f8a:	7992      	ldrb	r2, [r2, #6]
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001f94:	b299      	uxth	r1, r3
 8001f96:	4b82      	ldr	r3, [pc, #520]	; (80021a0 <tftRotateChar+0x260>)
 8001f98:	795b      	ldrb	r3, [r3, #5]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	fb11 f303 	smulbb	r3, r1, r3
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	fb12 f303 	smulbb	r3, r2, r3
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	3304      	adds	r3, #4
 8001faa:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001fb2:	e0e6      	b.n	8002182 <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb8:	e0d2      	b.n	8002160 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8001fba:	4b79      	ldr	r3, [pc, #484]	; (80021a0 <tftRotateChar+0x260>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fc2:	440a      	add	r2, r1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001fd0:	e0be      	b.n	8002150 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8001fd2:	68b8      	ldr	r0, [r7, #8]
 8001fd4:	f7fe faae 	bl	8000534 <__aeabi_i2d>
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	441a      	add	r2, r3
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	; (80021a0 <tftRotateChar+0x260>)
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	4619      	mov	r1, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	fb01 f303 	mul.w	r3, r1, r3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa9d 	bl	8000534 <__aeabi_i2d>
 8001ffa:	4680      	mov	r8, r0
 8001ffc:	4689      	mov	r9, r1
 8001ffe:	ed97 0b08 	vldr	d0, [r7, #32]
 8002002:	f005 faed 	bl	80075e0 <cos>
 8002006:	ec53 2b10 	vmov	r2, r3, d0
 800200a:	4640      	mov	r0, r8
 800200c:	4649      	mov	r1, r9
 800200e:	f7fe fafb 	bl	8000608 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4692      	mov	sl, r2
 8002018:	469b      	mov	fp, r3
 800201a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa88 	bl	8000534 <__aeabi_i2d>
 8002024:	4680      	mov	r8, r0
 8002026:	4689      	mov	r9, r1
 8002028:	ed97 0b08 	vldr	d0, [r7, #32]
 800202c:	f005 fb2c 	bl	8007688 <sin>
 8002030:	ec53 2b10 	vmov	r2, r3, d0
 8002034:	4640      	mov	r0, r8
 8002036:	4649      	mov	r1, r9
 8002038:	f7fe fae6 	bl	8000608 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4650      	mov	r0, sl
 8002042:	4659      	mov	r1, fp
 8002044:	f7fe f928 	bl	8000298 <__aeabi_dsub>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4620      	mov	r0, r4
 800204e:	4629      	mov	r1, r5
 8002050:	f7fe f924 	bl	800029c <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fd84 	bl	8000b68 <__aeabi_d2iz>
 8002060:	4603      	mov	r3, r0
 8002062:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7fe fa65 	bl	8000534 <__aeabi_i2d>
 800206a:	4604      	mov	r4, r0
 800206c:	460d      	mov	r5, r1
 800206e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fa5e 	bl	8000534 <__aeabi_i2d>
 8002078:	4680      	mov	r8, r0
 800207a:	4689      	mov	r9, r1
 800207c:	ed97 0b08 	vldr	d0, [r7, #32]
 8002080:	f005 faae 	bl	80075e0 <cos>
 8002084:	ec53 2b10 	vmov	r2, r3, d0
 8002088:	4640      	mov	r0, r8
 800208a:	4649      	mov	r1, r9
 800208c:	f7fe fabc 	bl	8000608 <__aeabi_dmul>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4692      	mov	sl, r2
 8002096:	469b      	mov	fp, r3
 8002098:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	441a      	add	r2, r3
 80020a2:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <tftRotateChar+0x260>)
 80020a4:	791b      	ldrb	r3, [r3, #4]
 80020a6:	4619      	mov	r1, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa3f 	bl	8000534 <__aeabi_i2d>
 80020b6:	4680      	mov	r8, r0
 80020b8:	4689      	mov	r9, r1
 80020ba:	ed97 0b08 	vldr	d0, [r7, #32]
 80020be:	f005 fae3 	bl	8007688 <sin>
 80020c2:	ec53 2b10 	vmov	r2, r3, d0
 80020c6:	4640      	mov	r0, r8
 80020c8:	4649      	mov	r1, r9
 80020ca:	f7fe fa9d 	bl	8000608 <__aeabi_dmul>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4650      	mov	r0, sl
 80020d4:	4659      	mov	r1, fp
 80020d6:	f7fe f8e1 	bl	800029c <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4620      	mov	r0, r4
 80020e0:	4629      	mov	r1, r5
 80020e2:	f7fe f8db 	bl	800029c <__adddf3>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4610      	mov	r0, r2
 80020ec:	4619      	mov	r1, r3
 80020ee:	f7fe fd3b 	bl	8000b68 <__aeabi_d2iz>
 80020f2:	4603      	mov	r3, r0
 80020f4:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	b2d8      	uxtb	r0, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	b2d9      	uxtb	r1, r3
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	3301      	adds	r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	3301      	adds	r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	f7ff fc7d 	bl	8001a0c <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 8002112:	7ffa      	ldrb	r2, [r7, #31]
 8002114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002118:	f1c3 0307 	rsb	r3, r3, #7
 800211c:	fa42 f303 	asr.w	r3, r2, r3
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8002128:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <tftRotateChar+0x264>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f7ff fcbd 	bl	8001aac <tftPushColor>
 8002132:	e008      	b.n	8002146 <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <tftRotateChar+0x268>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <tftRotateChar+0x26c>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fcb3 	bl	8001aac <tftPushColor>
			for(i=0;i<8;i++)
 8002146:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800214a:	3301      	adds	r3, #1
 800214c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002150:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002154:	2b07      	cmp	r3, #7
 8002156:	f67f af3c 	bls.w	8001fd2 <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	3301      	adds	r3, #1
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002160:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002166:	429a      	cmp	r2, r3
 8002168:	f6ff af27 	blt.w	8001fba <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 800216c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002170:	b29a      	uxth	r2, r3
 8002172:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002174:	4413      	add	r3, r2
 8002176:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8002178:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800217c:	3301      	adds	r3, #1
 800217e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002182:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <tftRotateChar+0x260>)
 8002184:	795b      	ldrb	r3, [r3, #5]
 8002186:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800218a:	429a      	cmp	r2, r3
 800218c:	f4ff af12 	bcc.w	8001fb4 <tftRotateChar+0x74>
	}
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3738      	adds	r7, #56	; 0x38
 8002196:	46bd      	mov	sp, r7
 8002198:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800219c:	f3af 8000 	nop.w
 80021a0:	20000264 	.word	0x20000264
 80021a4:	20000028 	.word	0x20000028
 80021a8:	20000270 	.word	0x20000270
 80021ac:	20000272 	.word	0x20000272
 80021b0:	1eb851ec 	.word	0x1eb851ec
 80021b4:	3f91eb85 	.word	0x3f91eb85

080021b8 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af02      	add	r7, sp, #8
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7fe f804 	bl	80001e0 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f113 0f02 	cmn.w	r3, #2
 80021e2:	d10a      	bne.n	80021fa <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80021e4:	4b3e      	ldr	r3, [pc, #248]	; (80022e0 <tftPrint+0x128>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <tftPrint+0x12c>)
 80021ec:	791b      	ldrb	r3, [r3, #4]
 80021ee:	4619      	mov	r1, r3
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d10d      	bne.n	800221e <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 8002202:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <tftPrint+0x130>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <tftPrint+0x12c>)
 800220a:	791b      	ldrb	r3, [r3, #4]
 800220c:	4619      	mov	r1, r3
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	0fda      	lsrs	r2, r3, #31
 8002218:	4413      	add	r3, r2
 800221a:	105b      	asrs	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
 8002222:	e053      	b.n	80022cc <tftPrint+0x114>
	{
		lettercount++;
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	3301      	adds	r3, #1
 8002228:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d112      	bne.n	8002256 <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60fa      	str	r2, [r7, #12]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	69f9      	ldr	r1, [r7, #28]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fd85 	bl	8001d4c <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <tftPrint+0x12c>)
 8002244:	791b      	ldrb	r3, [r3, #4]
 8002246:	461a      	mov	r2, r3
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	4413      	add	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	e00a      	b.n	800226c <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	60fa      	str	r2, [r7, #12]
 800225c:	7818      	ldrb	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68b9      	ldr	r1, [r7, #8]
 8002268:	f7ff fe6a 	bl	8001f40 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 800226c:	f000 f8c4 	bl	80023f8 <tftGetWidth>
 8002270:	4603      	mov	r3, r0
 8002272:	461a      	mov	r2, r3
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <tftPrint+0x12c>)
 8002276:	791b      	ldrb	r3, [r3, #4]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	6a3b      	ldr	r3, [r7, #32]
 8002282:	4293      	cmp	r3, r2
 8002284:	db1f      	blt.n	80022c6 <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 800228a:	2300      	movs	r3, #0
 800228c:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <tftPrint+0x12c>)
 8002290:	795b      	ldrb	r3, [r3, #5]
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 800229a:	f000 f8b9 	bl	8002410 <tftGetHeight>
 800229e:	4603      	mov	r3, r0
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <tftPrint+0x12c>)
 80022a4:	795b      	ldrb	r3, [r3, #5]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dd09      	ble.n	80022c2 <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80022ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022b2:	f7ff fa3b 	bl	800172c <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f834 	bl	8002324 <tftFillScreen>
				y=0; // start at top left of new Page
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
 80022c0:	e001      	b.n	80022c6 <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	3301      	adds	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
 80022cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	dba7      	blt.n	8002224 <tftPrint+0x6c>
			}

		}

	}
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3728      	adds	r7, #40	; 0x28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000264 	.word	0x20000264
 80022e8:	20000002 	.word	0x20000002

080022ec <tftPrintColor>:
void tftPrintColor(char *st, int x, int y, uint16_t FontColor)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	807b      	strh	r3, [r7, #2]
	uint16_t _fg_old = _fg;
 80022fa:	4b09      	ldr	r3, [pc, #36]	; (8002320 <tftPrintColor+0x34>)
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	82fb      	strh	r3, [r7, #22]
	_fg = FontColor;
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <tftPrintColor+0x34>)
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	8013      	strh	r3, [r2, #0]
	tftPrint(st, x, y, 0);
 8002306:	2300      	movs	r3, #0
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff ff53 	bl	80021b8 <tftPrint>
	_fg = _fg_old;
 8002312:	4a03      	ldr	r2, [pc, #12]	; (8002320 <tftPrintColor+0x34>)
 8002314:	8afb      	ldrh	r3, [r7, #22]
 8002316:	8013      	strh	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000028 	.word	0x20000028

08002324 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af02      	add	r7, sp, #8
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <tftFillScreen+0x2c>)
 8002330:	881b      	ldrh	r3, [r3, #0]
 8002332:	b21a      	sxth	r2, r3
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <tftFillScreen+0x30>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b219      	sxth	r1, r3
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	460b      	mov	r3, r1
 8002340:	2100      	movs	r1, #0
 8002342:	2000      	movs	r0, #0
 8002344:	f7ff fc02 	bl	8001b4c <tftFillRect>
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000000 	.word	0x20000000
 8002354:	20000002 	.word	0x20000002

08002358 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800236a:	2036      	movs	r0, #54	; 0x36
 800236c:	f7ff fa04 	bl	8001778 <tftSendCmd>

	switch (rotation)
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	2b03      	cmp	r3, #3
 8002374:	d836      	bhi.n	80023e4 <tftSetRotation+0x8c>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <tftSetRotation+0x24>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	0800238d 	.word	0x0800238d
 8002380:	080023a1 	.word	0x080023a1
 8002384:	080023b5 	.word	0x080023b5
 8002388:	080023c9 	.word	0x080023c9
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800238c:	20c0      	movs	r0, #192	; 0xc0
 800238e:	f7ff fa02 	bl	8001796 <tftSendData>
		width  = ST7735_TFTWIDTH;
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <tftSetRotation+0x94>)
 8002394:	2280      	movs	r2, #128	; 0x80
 8002396:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <tftSetRotation+0x98>)
 800239a:	22a0      	movs	r2, #160	; 0xa0
 800239c:	801a      	strh	r2, [r3, #0]
		break;
 800239e:	e01d      	b.n	80023dc <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80023a0:	20a0      	movs	r0, #160	; 0xa0
 80023a2:	f7ff f9f8 	bl	8001796 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80023a6:	4b11      	ldr	r3, [pc, #68]	; (80023ec <tftSetRotation+0x94>)
 80023a8:	22a0      	movs	r2, #160	; 0xa0
 80023aa:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <tftSetRotation+0x98>)
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	801a      	strh	r2, [r3, #0]
		   break;
 80023b2:	e013      	b.n	80023dc <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7ff f9ee 	bl	8001796 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <tftSetRotation+0x94>)
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <tftSetRotation+0x98>)
 80023c2:	22a0      	movs	r2, #160	; 0xa0
 80023c4:	801a      	strh	r2, [r3, #0]
		   break;
 80023c6:	e009      	b.n	80023dc <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80023c8:	2060      	movs	r0, #96	; 0x60
 80023ca:	f7ff f9e4 	bl	8001796 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <tftSetRotation+0x94>)
 80023d0:	22a0      	movs	r2, #160	; 0xa0
 80023d2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <tftSetRotation+0x98>)
 80023d6:	2280      	movs	r2, #128	; 0x80
 80023d8:	801a      	strh	r2, [r3, #0]
		   break;
 80023da:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <tftSetRotation+0x9c>)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	7013      	strb	r3, [r2, #0]
 80023e2:	e000      	b.n	80023e6 <tftSetRotation+0x8e>
		   return;
 80023e4:	bf00      	nop
}
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000002 	.word	0x20000002
 80023f4:	20000260 	.word	0x20000260

080023f8 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <tftGetWidth+0x14>)
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	20000000 	.word	0x20000000

08002410 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 8002414:	4b03      	ldr	r3, [pc, #12]	; (8002424 <tftGetHeight+0x14>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b2db      	uxtb	r3, r3
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	20000002 	.word	0x20000002

08002428 <AlBeOszi>:
    return pADChn->BatStatus;
}
/* end of BatteryVoltage.c */

uint16_t AlBeOszi(float *AlphaBeta)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

// Variables for Oszi Function
const int16_t oszi[3] = {70,50,159};			//oszi ypos-Zero Level, y-amplitude, t_lenght
const uint16_t osziColor = tft_GREY;
 8002430:	f641 1323 	movw	r3, #6435	; 0x1923
 8002434:	82fb      	strh	r3, [r7, #22]
const uint16_t aColor = tft_YELLOW;
 8002436:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800243a:	82bb      	strh	r3, [r7, #20]
const uint16_t bColor = tft_MAGENTA;
 800243c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8002440:	827b      	strh	r3, [r7, #18]

static int16_t timepos = 0;

// kleines Oszi als Zeitmitschrieb
	if (AlphaBeta[0] > 1) {AlphaBeta[0]= 1;}
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800244c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002454:	dd03      	ble.n	800245e <AlBeOszi+0x36>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800245c:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[0] < -1) {AlphaBeta[0]= -1;}
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002468:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	d502      	bpl.n	8002478 <AlBeOszi+0x50>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a5f      	ldr	r2, [pc, #380]	; (80025f4 <AlBeOszi+0x1cc>)
 8002476:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] > 1) {AlphaBeta[1]= 1;}
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	dd04      	ble.n	8002498 <AlBeOszi+0x70>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002496:	601a      	str	r2, [r3, #0]
	if (AlphaBeta[1] < -1) {AlphaBeta[1]= -1;}
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3304      	adds	r3, #4
 800249c:	edd3 7a00 	vldr	s15, [r3]
 80024a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80024a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	d503      	bpl.n	80024b6 <AlBeOszi+0x8e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3304      	adds	r3, #4
 80024b2:	4a50      	ldr	r2, [pc, #320]	; (80025f4 <AlBeOszi+0x1cc>)
 80024b4:	601a      	str	r2, [r3, #0]
	int16_t Ya = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[0]);			// - ST7735 y = 0 upper line inverter direct to y Scale
 80024b6:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <AlBeOszi+0x1d0>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <AlBeOszi+0x1d0>)
 80024c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024c4:	3b01      	subs	r3, #1
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edd3 7a00 	vldr	s15, [r3]
 80024d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	b21b      	sxth	r3, r3
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	823b      	strh	r3, [r7, #16]
	int16_t Yb = oszi[0] - (int16_t)((oszi[1]-1) * AlphaBeta[1]);
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <AlBeOszi+0x1d0>)
 80024ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <AlBeOszi+0x1d0>)
 80024f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3304      	adds	r3, #4
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002512:	ee17 3a90 	vmov	r3, s15
 8002516:	b21b      	sxth	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	81fb      	strh	r3, [r7, #14]
	int16_t osziHight = oszi[1]*2;
 8002520:	4b35      	ldr	r3, [pc, #212]	; (80025f8 <AlBeOszi+0x1d0>)
 8002522:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002526:	b29b      	uxth	r3, r3
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	b29b      	uxth	r3, r3
 800252c:	81bb      	strh	r3, [r7, #12]
	tftDrawFastVLine(timepos, (oszi[0]-oszi[1]), osziHight, osziColor);
 800252e:	4b33      	ldr	r3, [pc, #204]	; (80025fc <AlBeOszi+0x1d4>)
 8002530:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002534:	4b30      	ldr	r3, [pc, #192]	; (80025f8 <AlBeOszi+0x1d0>)
 8002536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800253a:	b29a      	uxth	r2, r3
 800253c:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <AlBeOszi+0x1d0>)
 800253e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002542:	b29b      	uxth	r3, r3
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	b29b      	uxth	r3, r3
 8002548:	b219      	sxth	r1, r3
 800254a:	8afb      	ldrh	r3, [r7, #22]
 800254c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002550:	f7ff fb7e 	bl	8001c50 <tftDrawFastVLine>
	if (Ya == Yb)
 8002554:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800255c:	429a      	cmp	r2, r3
 800255e:	d10a      	bne.n	8002576 <AlBeOszi+0x14e>
	{
		tftDrawPixel(timepos,Ya,tft_WHITE);
 8002560:	4b26      	ldr	r3, [pc, #152]	; (80025fc <AlBeOszi+0x1d4>)
 8002562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002566:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800256a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fab4 	bl	8001adc <tftDrawPixel>
 8002574:	e011      	b.n	800259a <AlBeOszi+0x172>
	}
	else
	{
		tftDrawPixel(timepos,Ya,aColor);
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <AlBeOszi+0x1d4>)
 8002578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257c:	8aba      	ldrh	r2, [r7, #20]
 800257e:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff faaa 	bl	8001adc <tftDrawPixel>
		tftDrawPixel(timepos,Yb,bColor);
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <AlBeOszi+0x1d4>)
 800258a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800258e:	8a7a      	ldrh	r2, [r7, #18]
 8002590:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff faa1 	bl	8001adc <tftDrawPixel>
	}
	if (++timepos > oszi[2] )
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <AlBeOszi+0x1d4>)
 800259c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21a      	sxth	r2, r3
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <AlBeOszi+0x1d4>)
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <AlBeOszi+0x1d4>)
 80025ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <AlBeOszi+0x1d0>)
 80025b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dd02      	ble.n	80025c2 <AlBeOszi+0x19a>
	{
		timepos = 0;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <AlBeOszi+0x1d4>)
 80025be:	2200      	movs	r2, #0
 80025c0:	801a      	strh	r2, [r3, #0]
		//lcd7735_fillRect(0, oszi[0]-oszi[1], oszi[2]+1, 2*oszi[1], ST7735_GREY);
	}
	tftDrawFastVLine(timepos, oszi[0], oszi[1]/2, tft_RED);
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <AlBeOszi+0x1d4>)
 80025c4:	f9b3 0000 	ldrsh.w	r0, [r3]
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <AlBeOszi+0x1d0>)
 80025ca:	f9b3 1000 	ldrsh.w	r1, [r3]
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <AlBeOszi+0x1d0>)
 80025d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025d4:	0fda      	lsrs	r2, r3, #31
 80025d6:	4413      	add	r3, r2
 80025d8:	105b      	asrs	r3, r3, #1
 80025da:	b21a      	sxth	r2, r3
 80025dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025e0:	f7ff fb36 	bl	8001c50 <tftDrawFastVLine>
	return timepos;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <AlBeOszi+0x1d4>)
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	b29b      	uxth	r3, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	bf800000 	.word	0xbf800000
 80025f8:	08009208 	.word	0x08009208
 80025fc:	20000274 	.word	0x20000274

08002600 <activateI2C2>:
    i2cInitI2C(i2c, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
}

void activateI2C2()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c2  = I2C2;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <activateI2C2+0x6c>)
 8002608:	607b      	str	r3, [r7, #4]
	GPIO_TypeDef  *portB = GPIOB;
 800260a:	4b19      	ldr	r3, [pc, #100]	; (8002670 <activateI2C2+0x70>)
 800260c:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f001 f982 	bl	8003918 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 8002614:	2202      	movs	r2, #2
 8002616:	210a      	movs	r1, #10
 8002618:	6838      	ldr	r0, [r7, #0]
 800261a:	f000 ff33 	bl	8003484 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 800261e:	2204      	movs	r2, #4
 8002620:	210a      	movs	r1, #10
 8002622:	6838      	ldr	r0, [r7, #0]
 8002624:	f000 ffd0 	bl	80035c8 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 8002628:	2202      	movs	r2, #2
 800262a:	2103      	movs	r1, #3
 800262c:	6838      	ldr	r0, [r7, #0]
 800262e:	f000 ff29 	bl	8003484 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 8002632:	2209      	movs	r2, #9
 8002634:	2103      	movs	r1, #3
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f000 ffc6 	bl	80035c8 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 800263c:	2201      	movs	r2, #1
 800263e:	210a      	movs	r1, #10
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f001 f82a 	bl	800369a <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 8002646:	2201      	movs	r2, #1
 8002648:	2103      	movs	r1, #3
 800264a:	6838      	ldr	r0, [r7, #0]
 800264c:	f001 f825 	bl	800369a <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
 8002650:	2302      	movs	r3, #2
 8002652:	220f      	movs	r2, #15
 8002654:	2101      	movs	r1, #1
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f001 fa16 	bl	8003a88 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f001 fb47 	bl	8003cf0 <i2cEnableDevice>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40005800 	.word	0x40005800
 8002670:	40020400 	.word	0x40020400

08002674 <filterAccData>:
 * filterAccData
 * calc from raw data into filtered (float) with in adjusted range

*/
void filterAccData(int16_t *XYZ, float *XYZFiltert, float kFilt, float fRange)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002682:	edc7 0a00 	vstr	s1, [r7]
	uint8_t i;
	for (i = 0; i<3; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
 800268a:	e036      	b.n	80026fa <filterAccData+0x86>
	{
		XYZFiltert[i] *= (1-kFilt);
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	ed93 7a00 	vldr	s14, [r3]
 8002698:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800269c:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80026a4:	7dfb      	ldrb	r3, [r7, #23]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	4413      	add	r3, r2
 80026ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b0:	edc3 7a00 	vstr	s15, [r3]
		XYZFiltert[i] += ((float)XYZ[i] * kFilt* fRange);
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	4413      	add	r3, r2
 80026bc:	ed93 7a00 	vldr	s14, [r3]
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	ee07 3a90 	vmov	s15, r3
 80026d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80026d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026dc:	edd7 7a00 	vldr	s15, [r7]
 80026e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	4413      	add	r3, r2
 80026ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f0:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i<3; i++)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	3301      	adds	r3, #1
 80026f8:	75fb      	strb	r3, [r7, #23]
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d9c5      	bls.n	800268c <filterAccData+0x18>
	}
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <mpuInit>:
 * - Modifying the I2C address may require hardware adjustments (e.g., soldering the AD0 pin).
 * - Disabling both gyroscope and accelerometer may lead to an unusable sensor state.
 */

int8_t mpuInit(MPU6050_t* sensor, I2C_TypeDef* i2cBus, uint8_t i2cAddr, MPUfscale gyroScale, MPUaccel accelRange, MPUlpbw lPconfig, uint8_t restart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	460b      	mov	r3, r1
 8002720:	71fb      	strb	r3, [r7, #7]
 8002722:	4613      	mov	r3, r2
 8002724:	71bb      	strb	r3, [r7, #6]

	sensor->i2c = i2cBus;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	601a      	str	r2, [r3, #0]

	// default Orientation
	sensor->RPY[0] = 1;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sensor->RPY[1] = 2;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	sensor->RPY[2] = -3;					// -3 means Sensor Y-Axis goes into top direction
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	22fd      	movs	r2, #253	; 0xfd
 8002740:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	sensor->pitchZero = 0;					// assemble offset MPU vs chassis
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
	sensor->pitchFilt = 0.9;				// weight of Gyro for Pitch Calc in combination to Accel-Angle Calc (Static Bias)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4ab4      	ldr	r2, [pc, #720]	; (8002a20 <mpuInit+0x310>)
 8002750:	61da      	str	r2, [r3, #28]
	sensor->pitch = 0;						// assemble offset MPU vs chassis
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	659a      	str	r2, [r3, #88]	; 0x58
	sensor->swLowPassFilt =0.5;			// Accel Filter koeffizent
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8002760:	619a      	str	r2, [r3, #24]
	sensor->accel[0] = 0;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	64da      	str	r2, [r3, #76]	; 0x4c
	sensor->accel[1] = 0;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	651a      	str	r2, [r3, #80]	; 0x50
	sensor->accel[2] = 0;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
	if(i2cAddr == i2cAddr_MPU6050) {
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b68      	cmp	r3, #104	; 0x68
 800277e:	d103      	bne.n	8002788 <mpuInit+0x78>
		sensor->i2c_address = i2cAddr;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	711a      	strb	r2, [r3, #4]
 8002786:	e002      	b.n	800278e <mpuInit+0x7e>
		/**
		 * To change I2C Address of the MPU6050, the AD0-Pin of the sensor must be set high
		 * This pin is not connected to the board
		 * therefore, the standard address is always used to prevent communication errors.
		 */
		sensor->i2c_address = (uint8_t) i2cAddr_MPU6050;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2268      	movs	r2, #104	; 0x68
 800278c:	711a      	strb	r2, [r3, #4]
	}

	uint8_t gyroReturn;
	gyroScale = sensor->gyro_scale;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	795b      	ldrb	r3, [r3, #5]
 8002792:	71bb      	strb	r3, [r7, #6]
	switch (gyroScale) {
 8002794:	79bb      	ldrb	r3, [r7, #6]
 8002796:	2b18      	cmp	r3, #24
 8002798:	d84c      	bhi.n	8002834 <mpuInit+0x124>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <mpuInit+0x90>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	08002805 	.word	0x08002805
 80027a4:	08002835 	.word	0x08002835
 80027a8:	08002835 	.word	0x08002835
 80027ac:	08002835 	.word	0x08002835
 80027b0:	08002835 	.word	0x08002835
 80027b4:	08002835 	.word	0x08002835
 80027b8:	08002835 	.word	0x08002835
 80027bc:	08002835 	.word	0x08002835
 80027c0:	08002811 	.word	0x08002811
 80027c4:	08002835 	.word	0x08002835
 80027c8:	08002835 	.word	0x08002835
 80027cc:	08002835 	.word	0x08002835
 80027d0:	08002835 	.word	0x08002835
 80027d4:	08002835 	.word	0x08002835
 80027d8:	08002835 	.word	0x08002835
 80027dc:	08002835 	.word	0x08002835
 80027e0:	0800281d 	.word	0x0800281d
 80027e4:	08002835 	.word	0x08002835
 80027e8:	08002835 	.word	0x08002835
 80027ec:	08002835 	.word	0x08002835
 80027f0:	08002835 	.word	0x08002835
 80027f4:	08002835 	.word	0x08002835
 80027f8:	08002835 	.word	0x08002835
 80027fc:	08002835 	.word	0x08002835
 8002800:	08002829 	.word	0x08002829
	case FSCALE_250:
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a87      	ldr	r2, [pc, #540]	; (8002a24 <mpuInit+0x314>)
 8002808:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	75fb      	strb	r3, [r7, #23]
		break;
 800280e:	e01a      	b.n	8002846 <mpuInit+0x136>
	case FSCALE_500:
		sensor->gyro_scale_factor = (float) 1 / 65.5;	// 65.5 LSB/°/s
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a85      	ldr	r2, [pc, #532]	; (8002a28 <mpuInit+0x318>)
 8002814:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
		break;
 800281a:	e014      	b.n	8002846 <mpuInit+0x136>
	case FSCALE_1000:
		sensor->gyro_scale_factor = (float)	0.0305175 ;	// 35.8 LSB/°/s
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a83      	ldr	r2, [pc, #524]	; (8002a2c <mpuInit+0x31c>)
 8002820:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
		break;
 8002826:	e00e      	b.n	8002846 <mpuInit+0x136>
	case FSCALE_2000:
		sensor->gyro_scale_factor = (float) 1 / 16.4;	// 16.4 LSB/°/s
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a81      	ldr	r2, [pc, #516]	; (8002a30 <mpuInit+0x320>)
 800282c:	609a      	str	r2, [r3, #8]
		gyroReturn = 0;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
		break;
 8002832:	e008      	b.n	8002846 <mpuInit+0x136>
	default:
		sensor->gyro_scale = FSCALE_250;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	715a      	strb	r2, [r3, #5]
		sensor->gyro_scale_factor = (float) 1 / 131;	// 131 LSB/°/s
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a79      	ldr	r2, [pc, #484]	; (8002a24 <mpuInit+0x314>)
 800283e:	609a      	str	r2, [r3, #8]
		gyroReturn = 2;							// Error handling for wrong user input
 8002840:	2302      	movs	r3, #2
 8002842:	75fb      	strb	r3, [r7, #23]
		break;
 8002844:	bf00      	nop
	}
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_GYRO_CONFIG, sensor->gyro_scale); 	// set scale range of gyroscope
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6818      	ldr	r0, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	7919      	ldrb	r1, [r3, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	795b      	ldrb	r3, [r3, #5]
 8002852:	221b      	movs	r2, #27
 8002854:	f001 f966 	bl	8003b24 <i2cSendByteToSlaveReg>


	uint8_t accelReturn;
	sensor->accel_range = accelRange;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800285e:	731a      	strb	r2, [r3, #12]
	switch (accelRange) {
 8002860:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002864:	2b18      	cmp	r3, #24
 8002866:	d851      	bhi.n	800290c <mpuInit+0x1fc>
 8002868:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <mpuInit+0x160>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	080028d5 	.word	0x080028d5
 8002874:	0800290d 	.word	0x0800290d
 8002878:	0800290d 	.word	0x0800290d
 800287c:	0800290d 	.word	0x0800290d
 8002880:	0800290d 	.word	0x0800290d
 8002884:	0800290d 	.word	0x0800290d
 8002888:	0800290d 	.word	0x0800290d
 800288c:	0800290d 	.word	0x0800290d
 8002890:	080028e3 	.word	0x080028e3
 8002894:	0800290d 	.word	0x0800290d
 8002898:	0800290d 	.word	0x0800290d
 800289c:	0800290d 	.word	0x0800290d
 80028a0:	0800290d 	.word	0x0800290d
 80028a4:	0800290d 	.word	0x0800290d
 80028a8:	0800290d 	.word	0x0800290d
 80028ac:	0800290d 	.word	0x0800290d
 80028b0:	080028f1 	.word	0x080028f1
 80028b4:	0800290d 	.word	0x0800290d
 80028b8:	0800290d 	.word	0x0800290d
 80028bc:	0800290d 	.word	0x0800290d
 80028c0:	0800290d 	.word	0x0800290d
 80028c4:	0800290d 	.word	0x0800290d
 80028c8:	0800290d 	.word	0x0800290d
 80028cc:	0800290d 	.word	0x0800290d
 80028d0:	080028ff 	.word	0x080028ff
	case ACCEL_2g:
		sensor->accel_range_factor = (float) 1 / 16384;		// 16384 LSB/g
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80028da:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	75bb      	strb	r3, [r7, #22]
		break;
 80028e0:	e01e      	b.n	8002920 <mpuInit+0x210>
	case ACCEL_4g:
		sensor->accel_range_factor = (float) 1 / 8192;		// 8192 LSB/g
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80028e8:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75bb      	strb	r3, [r7, #22]
		break;
 80028ee:	e017      	b.n	8002920 <mpuInit+0x210>
	case ACCEL_8g:
		sensor->accel_range_factor = (float) 1 / 4096;		// 4096 LSB/g
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80028f6:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	75bb      	strb	r3, [r7, #22]
		break;
 80028fc:	e010      	b.n	8002920 <mpuInit+0x210>
	case ACCEL_16g:
		sensor->accel_range_factor = (float) 1 / 2048;		// 2048 LSB/g
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002904:	611a      	str	r2, [r3, #16]
		accelReturn = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	75bb      	strb	r3, [r7, #22]
		break;
 800290a:	e009      	b.n	8002920 <mpuInit+0x210>
	default:
		sensor->accel_range = ACCEL_2g;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	731a      	strb	r2, [r3, #12]
		sensor->accel_range_factor = (float) 1 / 16384;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002918:	611a      	str	r2, [r3, #16]
		accelReturn = 4;
 800291a:	2304      	movs	r3, #4
 800291c:	75bb      	strb	r3, [r7, #22]
		break;
 800291e:	bf00      	nop
	}
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_ACCEL_CONFIG, sensor->accel_range);	// set scale range of accelerometer
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	7919      	ldrb	r1, [r3, #4]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	7b1b      	ldrb	r3, [r3, #12]
 800292c:	221c      	movs	r2, #28
 800292e:	f001 f8f9 	bl	8003b24 <i2cSendByteToSlaveReg>

	sensor->LowPassFilt = lPconfig;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002938:	751a      	strb	r2, [r3, #20]
	mpuSetLpFilt(sensor);
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 fa0e 	bl	8002d5c <mpuSetLpFilt>

	static int8_t step = -3;

	//TF for (int8_t i = step; i < 0; i++) {

		switch (step) {
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <mpuInit+0x324>)
 8002942:	f993 3000 	ldrsb.w	r3, [r3]
 8002946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294a:	d02b      	beq.n	80029a4 <mpuInit+0x294>
 800294c:	2b00      	cmp	r3, #0
 800294e:	da73      	bge.n	8002a38 <mpuInit+0x328>
 8002950:	f113 0f03 	cmn.w	r3, #3
 8002954:	d003      	beq.n	800295e <mpuInit+0x24e>
 8002956:	f113 0f02 	cmn.w	r3, #2
 800295a:	d00a      	beq.n	8002972 <mpuInit+0x262>
 800295c:	e06c      	b.n	8002a38 <mpuInit+0x328>
		case -3:		// increase CLK Speed for I2C up to  1000kHz
			i2cSetClkSpd(sensor->i2c, I2C_CLOCK_1Mz); //set I2C Clock 1Mz
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2104      	movs	r1, #4
 8002964:	4618      	mov	r0, r3
 8002966:	f001 f80b 	bl	8003980 <i2cSetClkSpd>
			step = -2;
 800296a:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <mpuInit+0x324>)
 800296c:	22fe      	movs	r2, #254	; 0xfe
 800296e:	701a      	strb	r2, [r3, #0]
			break;
 8002970:	e065      	b.n	8002a3e <mpuInit+0x32e>

		case -2:		// SW Reset
			if (restart != 0)
 8002972:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <mpuInit+0x27c>
			{
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_SWRESET)); // reboot memory content
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	7919      	ldrb	r1, [r3, #4]
 8002982:	2380      	movs	r3, #128	; 0x80
 8002984:	226b      	movs	r2, #107	; 0x6b
 8002986:	f001 f8cd 	bl	8003b24 <i2cSendByteToSlaveReg>
 800298a:	e007      	b.n	800299c <mpuInit+0x28c>

			}
			else
			{
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_MST_CTRL, (MPU6050_MST_P_NSR));
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	7919      	ldrb	r1, [r3, #4]
 8002994:	2310      	movs	r3, #16
 8002996:	2224      	movs	r2, #36	; 0x24
 8002998:	f001 f8c4 	bl	8003b24 <i2cSendByteToSlaveReg>
			}
			step = -1;
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <mpuInit+0x324>)
 800299e:	22ff      	movs	r2, #255	; 0xff
 80029a0:	701a      	strb	r2, [r3, #0]
			break;
 80029a2:	e04c      	b.n	8002a3e <mpuInit+0x32e>

		case -1:
			// PWR Mngt
			if (sensor->accel_range == ACCEL_OFF)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	7b1b      	ldrb	r3, [r3, #12]
 80029a8:	2b19      	cmp	r3, #25
 80029aa:	d110      	bne.n	80029ce <mpuInit+0x2be>
			{ // Disable acceleration measurement
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	7919      	ldrb	r1, [r3, #4]
 80029b4:	2300      	movs	r3, #0
 80029b6:	226b      	movs	r2, #107	; 0x6b
 80029b8:	f001 f8b4 	bl	8003b24 <i2cSendByteToSlaveReg>
				i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000111));
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	7919      	ldrb	r1, [r3, #4]
 80029c4:	2307      	movs	r3, #7
 80029c6:	226c      	movs	r2, #108	; 0x6c
 80029c8:	f001 f8ac 	bl	8003b24 <i2cSendByteToSlaveReg>
 80029cc:	e024      	b.n	8002a18 <mpuInit+0x308>
			}
			else
			{
				if (sensor->gyro_scale == GYRO_OFF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	795b      	ldrb	r3, [r3, #5]
 80029d2:	2b19      	cmp	r3, #25
 80029d4:	d110      	bne.n	80029f8 <mpuInit+0x2e8>
				{ // Disable gyroscope
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	7919      	ldrb	r1, [r3, #4]
 80029de:	2300      	movs	r3, #0
 80029e0:	226b      	movs	r2, #107	; 0x6b
 80029e2:	f001 f89f 	bl	8003b24 <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00111000));
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	7919      	ldrb	r1, [r3, #4]
 80029ee:	2338      	movs	r3, #56	; 0x38
 80029f0:	226c      	movs	r2, #108	; 0x6c
 80029f2:	f001 f897 	bl	8003b24 <i2cSendByteToSlaveReg>
 80029f6:	e00f      	b.n	8002a18 <mpuInit+0x308>
				}
				else
				{ // enable all measurements
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_1, (MPU6050_PWR1_CLKSEL));
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	7919      	ldrb	r1, [r3, #4]
 8002a00:	2300      	movs	r3, #0
 8002a02:	226b      	movs	r2, #107	; 0x6b
 8002a04:	f001 f88e 	bl	8003b24 <i2cSendByteToSlaveReg>
					i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_PWR_MGMT_2, (0b00000000));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	7919      	ldrb	r1, [r3, #4]
 8002a10:	2300      	movs	r3, #0
 8002a12:	226c      	movs	r2, #108	; 0x6c
 8002a14:	f001 f886 	bl	8003b24 <i2cSendByteToSlaveReg>
				}
			}
			step = 0;
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <mpuInit+0x324>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
			break;
 8002a1e:	e00e      	b.n	8002a3e <mpuInit+0x32e>
 8002a20:	3f666666 	.word	0x3f666666
 8002a24:	3bfa232d 	.word	0x3bfa232d
 8002a28:	3c7a232d 	.word	0x3c7a232d
 8002a2c:	3cf9ffd6 	.word	0x3cf9ffd6
 8002a30:	3d79c190 	.word	0x3d79c190
 8002a34:	2000002a 	.word	0x2000002a
		default:
			step = -3;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <mpuInit+0x35c>)
 8002a3a:	22fd      	movs	r2, #253	; 0xfd
 8002a3c:	701a      	strb	r2, [r3, #0]
		}
	//TF }

	int8_t returnValue = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	757b      	strb	r3, [r7, #21]
	if(step != 0) {
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <mpuInit+0x35c>)
 8002a44:	f993 3000 	ldrsb.w	r3, [r3]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <mpuInit+0x344>
		returnValue = step;
 8002a4c:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <mpuInit+0x35c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	757b      	strb	r3, [r7, #21]
 8002a52:	e004      	b.n	8002a5e <mpuInit+0x34e>
		/**
		 * I2C initialization error
		 */
	}
	else {
		returnValue = gyroReturn + accelReturn;
 8002a54:	7dfa      	ldrb	r2, [r7, #23]
 8002a56:	7dbb      	ldrb	r3, [r7, #22]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	757b      	strb	r3, [r7, #21]
		/**
		 * Wrong user input for gyroscope and/or acceleration measurement
		 */
	}
	return returnValue;
 8002a5e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000002a 	.word	0x2000002a

08002a70 <mpuGetPitch>:
		return (uint16_t) 1;
	}
}

int16_t mpuGetPitch(MPU6050_t* sensor)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b090      	sub	sp, #64	; 0x40
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	6078      	str	r0, [r7, #4]
	I2C_RETURN_CODE_t i2c_return;
	int16_t *XYZ;
	float *XYZFiltert;
	uint8_t readBuffer[14];
	if (sensor->accel_range != (uint8_t) DISABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	7b1b      	ldrb	r3, [r3, #12]
 8002a7c:	2bff      	cmp	r3, #255	; 0xff
 8002a7e:	f000 8099 	beq.w	8002bb4 <mpuGetPitch+0x144>
	{
		i2cBurstRegRead(sensor->i2c, sensor->i2c_address, MPU6050_AccXYZ,readBuffer, 14);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6818      	ldr	r0, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	7919      	ldrb	r1, [r3, #4]
 8002a8a:	f107 030c 	add.w	r3, r7, #12
 8002a8e:	220e      	movs	r2, #14
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	223b      	movs	r2, #59	; 0x3b
 8002a94:	f001 f894 	bl	8003bc0 <i2cBurstRegRead>
		sensor->accel_raw[0] = (readBuffer[0]<<8) + readBuffer[1];
 8002a98:	7b3b      	ldrb	r3, [r7, #12]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	7b7b      	ldrb	r3, [r7, #13]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	b21a      	sxth	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
		sensor->accel_raw[1] = (readBuffer[2]<<8) + readBuffer[3];
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	b21a      	sxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
		sensor->accel_raw[2] = (readBuffer[4]<<8) + readBuffer[5];
 8002ac4:	7c3b      	ldrb	r3, [r7, #16]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b21a      	sxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	859a      	strh	r2, [r3, #44]	; 0x2c

		XYZ = sensor->accel_raw;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3328      	adds	r3, #40	; 0x28
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
		XYZFiltert = sensor->accel;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	334c      	adds	r3, #76	; 0x4c
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
		filterAccData(XYZ, XYZFiltert, sensor->swLowPassFilt, sensor->accel_range_factor);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	ed93 7a04 	vldr	s14, [r3, #16]
 8002af2:	eef0 0a47 	vmov.f32	s1, s14
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002afe:	f7ff fdb9 	bl	8002674 <filterAccData>

		sensor->temp_raw = (int16_t) (readBuffer[6]<<8) + readBuffer[7];
 8002b02:	7cbb      	ldrb	r3, [r7, #18]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	b21a      	sxth	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	869a      	strh	r2, [r3, #52]	; 0x34

		sensor->gyro_raw[0] = (readBuffer[8]<<8) + readBuffer[9];
 8002b16:	7d3b      	ldrb	r3, [r7, #20]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	7d7b      	ldrb	r3, [r7, #21]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	b21a      	sxth	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	85da      	strh	r2, [r3, #46]	; 0x2e
		sensor->gyro_raw[1] = (readBuffer[10]<<8) + readBuffer[11];
 8002b2c:	7dbb      	ldrb	r3, [r7, #22]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	861a      	strh	r2, [r3, #48]	; 0x30
		sensor->gyro_raw[2] = (readBuffer[12]<<8) + readBuffer[13];
 8002b42:	7e3b      	ldrb	r3, [r7, #24]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	7e7b      	ldrb	r3, [r7, #25]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	865a      	strh	r2, [r3, #50]	; 0x32

		sensor->gyro[0] = (float) sensor->gyro_raw[0] * sensor->gyro_scale_factor;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		sensor->gyro[1] = (float) sensor->gyro_raw[1] * sensor->gyro_scale_factor;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8002b7c:	ee07 3a90 	vmov	s15, r3
 8002b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		sensor->gyro[2] = (float) sensor->gyro_raw[2] * sensor->gyro_scale_factor;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8002bb2:	e002      	b.n	8002bba <mpuGetPitch+0x14a>
	}
	else
	{
		i2c_return = 1;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}
	int argYaw;
	float yawAxis;
	float longAxis = sensor->accel[sensor->RPY[0]-1];
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	3312      	adds	r3, #18
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	3304      	adds	r3, #4
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
	//float latAxis = sensor->accel_raw[sensor->RPY[1]-1];
	if (sensor->RPY[2] < 0)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	da11      	bge.n	8002bfe <mpuGetPitch+0x18e>
	{
		argYaw = -1-(sensor->RPY[2]);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002be0:	43db      	mvns	r3, r3
 8002be2:	623b      	str	r3, [r7, #32]
		yawAxis =  (sensor->accel[argYaw])*-1;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	3312      	adds	r3, #18
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	3304      	adds	r3, #4
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	eef1 7a67 	vneg.f32	s15, s15
 8002bf8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8002bfc:	e00a      	b.n	8002c14 <mpuGetPitch+0x1a4>

	}
	else
	{
		yawAxis =  sensor->accel[sensor->RPY[2]-1];
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f993 3026 	ldrsb.w	r3, [r3, #38]	; 0x26
 8002c04:	3b01      	subs	r3, #1
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	3312      	adds	r3, #18
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
	}
	sensor->pitchAccel = atan2(longAxis, yawAxis)-sensor->pitchZero;
 8002c14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c16:	f7fd fc9f 	bl	8000558 <__aeabi_f2d>
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c20:	f7fd fc9a 	bl	8000558 <__aeabi_f2d>
 8002c24:	4602      	mov	r2, r0
 8002c26:	460b      	mov	r3, r1
 8002c28:	ec43 2b11 	vmov	d1, r2, r3
 8002c2c:	ec45 4b10 	vmov	d0, r4, r5
 8002c30:	f004 fd82 	bl	8007738 <atan2>
 8002c34:	ec55 4b10 	vmov	r4, r5, d0
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fd fc8b 	bl	8000558 <__aeabi_f2d>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4620      	mov	r0, r4
 8002c48:	4629      	mov	r1, r5
 8002c4a:	f7fd fb25 	bl	8000298 <__aeabi_dsub>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ffaf 	bl	8000bb8 <__aeabi_d2f>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	65da      	str	r2, [r3, #92]	; 0x5c

	float gyroPitch =  _deg2rad * sensor->gyro[sensor->RPY[1]-1];			// rad/s
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 8002c66:	3b01      	subs	r3, #1
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc70 	bl	8000558 <__aeabi_f2d>
 8002c78:	a321      	add	r3, pc, #132	; (adr r3, 8002d00 <mpuGetPitch+0x290>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fcc3 	bl	8000608 <__aeabi_dmul>
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4610      	mov	r0, r2
 8002c88:	4619      	mov	r1, r3
 8002c8a:	f7fd ff95 	bl	8000bb8 <__aeabi_d2f>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	61fb      	str	r3, [r7, #28]
	if (sensor->pitch == 0)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	d103      	bne.n	8002caa <mpuGetPitch+0x23a>
	{
		sensor->pitch = sensor->pitchAccel;  // first run initialize value;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	659a      	str	r2, [r3, #88]	; 0x58
	}
	sensor->pitch = (sensor->pitchFilt * (gyroPitch * sensor->timebase + sensor->pitch)) + ((1- sensor->pitchFilt) * sensor->pitchAccel);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	ed93 7a07 	vldr	s14, [r3, #28]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8002cb6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002cba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	edd3 7a07 	vldr	s15, [r3, #28]
 8002cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

	return i2c_return;
 8002cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002cf2:	b21b      	sxth	r3, r3

}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfc:	f3af 8000 	nop.w
 8002d00:	00de4c51 	.word	0x00de4c51
 8002d04:	3f91df33 	.word	0x3f91df33

08002d08 <mpuTemp>:
	return (sensor->temperature);
}


float mpuTemp(MPU6050_t* sensor)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	const float temp_factor = (float)1.0 / 340;
 8002d10:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <mpuTemp+0x4c>)
 8002d12:	60fb      	str	r3, [r7, #12]
	const float temp_offset = 36.35;
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <mpuTemp+0x50>)
 8002d16:	60bb      	str	r3, [r7, #8]

	sensor->temperature = (float) (sensor->temp_raw) * temp_factor + temp_offset;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	return (sensor->temperature);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d40:	ee07 3a90 	vmov	s15, r3
}
 8002d44:	eeb0 0a67 	vmov.f32	s0, s15
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	3b40c0c1 	.word	0x3b40c0c1
 8002d58:	42116666 	.word	0x42116666

08002d5c <mpuSetLpFilt>:
 *
 * @note
 * - Ensure the MPU6050 sensor is properly initialized and powered before calling this function.
 * - Refer to the MPU6050 datasheet for valid DLPF configuration values and their corresponding cutoff frequencies.
 */
void mpuSetLpFilt(MPU6050_t* sensor) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
	i2cSendByteToSlaveReg(sensor->i2c, sensor->i2c_address, MPU6050_CONFIG, sensor->LowPassFilt);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7919      	ldrb	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7d1b      	ldrb	r3, [r3, #20]
 8002d70:	221a      	movs	r2, #26
 8002d72:	f000 fed7 	bl	8003b24 <i2cSendByteToSlaveReg>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d03e      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d03b      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d038      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d035      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d032      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	2b05      	cmp	r3, #5
 8002daa:	d02f      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d02c      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b07      	cmp	r3, #7
 8002db6:	d029      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d026      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8002dbe:	79fb      	ldrb	r3, [r7, #7]
 8002dc0:	2b09      	cmp	r3, #9
 8002dc2:	d023      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2b0a      	cmp	r3, #10
 8002dc8:	d020      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b0b      	cmp	r3, #11
 8002dce:	d01d      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d01a      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	2b0d      	cmp	r3, #13
 8002dda:	d017      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002ddc:	79fb      	ldrb	r3, [r7, #7]
 8002dde:	2b0e      	cmp	r3, #14
 8002de0:	d014      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002de2:	79fb      	ldrb	r3, [r7, #7]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d011      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d00e      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8002dee:	79fb      	ldrb	r3, [r7, #7]
 8002df0:	2b11      	cmp	r3, #17
 8002df2:	d00b      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b12      	cmp	r3, #18
 8002df8:	d008      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b14      	cmp	r3, #20
 8002dfe:	d005      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b15      	cmp	r3, #21
 8002e04:	d002      	beq.n	8002e0c <extiVerifyIrqNum+0x8e>
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	2b16      	cmp	r3, #22
 8002e0a:	d101      	bne.n	8002e10 <extiVerifyIrqNum+0x92>
    {
        return true;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <extiVerifyIrqNum+0x94>
    }
    return false;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <extiVerifyTrigger+0x1c>
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d002      	beq.n	8002e3a <extiVerifyTrigger+0x1c>
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d101      	bne.n	8002e3e <extiVerifyTrigger+0x20>
    {
        return true;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <extiVerifyTrigger+0x22>
    }
    return false;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8002e52:	2300      	movs	r3, #0
 8002e54:	71fb      	strb	r3, [r7, #7]
 8002e56:	e008      	b.n	8002e6a <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <extiInit+0x34>)
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	2100      	movs	r1, #0
 8002e60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	3301      	adds	r3, #1
 8002e68:	71fb      	strb	r3, [r7, #7]
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d9f3      	bls.n	8002e58 <extiInit+0xc>
    }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40013800 	.word	0x40013800

08002e84 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f937 	bl	8003110 <gpioVerifyPort>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f083 0301 	eor.w	r3, r3, #1
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 8002eae:	23ff      	movs	r3, #255	; 0xff
 8002eb0:	e08a      	b.n	8002fc8 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f000 f95d 	bl	8003174 <gpioVerifyPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f083 0301 	eor.w	r3, r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8002ec6:	23fe      	movs	r3, #254	; 0xfe
 8002ec8:	e07e      	b.n	8002fc8 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d841      	bhi.n	8002f54 <extiConfigIrq+0xd0>
 8002ed0:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <extiConfigIrq+0x54>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f19 	.word	0x08002f19
 8002edc:	08002f19 	.word	0x08002f19
 8002ee0:	08002f19 	.word	0x08002f19
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f25 	.word	0x08002f25
 8002eec:	08002f25 	.word	0x08002f25
 8002ef0:	08002f25 	.word	0x08002f25
 8002ef4:	08002f25 	.word	0x08002f25
 8002ef8:	08002f35 	.word	0x08002f35
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f45 	.word	0x08002f45
 8002f0c:	08002f45 	.word	0x08002f45
 8002f10:	08002f45 	.word	0x08002f45
 8002f14:	08002f45 	.word	0x08002f45
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
            break;
 8002f22:	e017      	b.n	8002f54 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	3b04      	subs	r3, #4
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	73fb      	strb	r3, [r7, #15]
            break;
 8002f32:	e00f      	b.n	8002f54 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	3b08      	subs	r3, #8
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	73fb      	strb	r3, [r7, #15]
            break;
 8002f42:	e007      	b.n	8002f54 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	3b0c      	subs	r3, #12
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	73fb      	strb	r3, [r7, #15]
            break;
 8002f52:	bf00      	nop
    }

    if (GPIOA == port)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <extiConfigIrq+0x14c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d102      	bne.n	8002f62 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	737b      	strb	r3, [r7, #13]
 8002f60:	e021      	b.n	8002fa6 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <extiConfigIrq+0x150>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d102      	bne.n	8002f70 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	737b      	strb	r3, [r7, #13]
 8002f6e:	e01a      	b.n	8002fa6 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <extiConfigIrq+0x154>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	737b      	strb	r3, [r7, #13]
 8002f7c:	e013      	b.n	8002fa6 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <extiConfigIrq+0x158>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 8002f86:	2303      	movs	r3, #3
 8002f88:	737b      	strb	r3, [r7, #13]
 8002f8a:	e00c      	b.n	8002fa6 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a14      	ldr	r2, [pc, #80]	; (8002fe0 <extiConfigIrq+0x15c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d102      	bne.n	8002f9a <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 8002f94:	2304      	movs	r3, #4
 8002f96:	737b      	strb	r3, [r7, #13]
 8002f98:	e005      	b.n	8002fa6 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a11      	ldr	r2, [pc, #68]	; (8002fe4 <extiConfigIrq+0x160>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 8002fa2:	2307      	movs	r3, #7
 8002fa4:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8002fa6:	4a10      	ldr	r2, [pc, #64]	; (8002fe8 <extiConfigIrq+0x164>)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	3302      	adds	r3, #2
 8002fac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fb0:	7b79      	ldrb	r1, [r7, #13]
 8002fb2:	7bbb      	ldrb	r3, [r7, #14]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	490b      	ldr	r1, [pc, #44]	; (8002fe8 <extiConfigIrq+0x164>)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	4302      	orrs	r2, r0
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40021c00 	.word	0x40021c00
 8002fe8:	40013800 	.word	0x40013800

08002fec <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fec0 	bl	8002d7e <extiVerifyIrqNum>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f083 0301 	eor.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 800300a:	23d8      	movs	r3, #216	; 0xd8
 800300c:	e00a      	b.n	8003024 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <extiEnableIrq+0x40>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	79fa      	ldrb	r2, [r7, #7]
 8003014:	2101      	movs	r1, #1
 8003016:	fa01 f202 	lsl.w	r2, r1, r2
 800301a:	4611      	mov	r1, r2
 800301c:	4a03      	ldr	r2, [pc, #12]	; (800302c <extiEnableIrq+0x40>)
 800301e:	430b      	orrs	r3, r1
 8003020:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40013c00 	.word	0x40013c00

08003030 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	460a      	mov	r2, r1
 800303a:	71fb      	strb	r3, [r7, #7]
 800303c:	4613      	mov	r3, r2
 800303e:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fe9b 	bl	8002d7e <extiVerifyIrqNum>
 8003048:	4603      	mov	r3, r0
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8003054:	23d8      	movs	r3, #216	; 0xd8
 8003056:	e055      	b.n	8003104 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 8003058:	79bb      	ldrb	r3, [r7, #6]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fedf 	bl	8002e1e <extiVerifyTrigger>
 8003060:	4603      	mov	r3, r0
 8003062:	f083 0301 	eor.w	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 800306c:	23d7      	movs	r3, #215	; 0xd7
 800306e:	e049      	b.n	8003104 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8003070:	79bb      	ldrb	r3, [r7, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d115      	bne.n	80030a2 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8003076:	4b25      	ldr	r3, [pc, #148]	; (800310c <extiSetTriggerEdge+0xdc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	79fa      	ldrb	r2, [r7, #7]
 800307c:	2101      	movs	r1, #1
 800307e:	fa01 f202 	lsl.w	r2, r1, r2
 8003082:	4611      	mov	r1, r2
 8003084:	4a21      	ldr	r2, [pc, #132]	; (800310c <extiSetTriggerEdge+0xdc>)
 8003086:	430b      	orrs	r3, r1
 8003088:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 800308a:	4b20      	ldr	r3, [pc, #128]	; (800310c <extiSetTriggerEdge+0xdc>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	79fa      	ldrb	r2, [r7, #7]
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	43d2      	mvns	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4a1c      	ldr	r2, [pc, #112]	; (800310c <extiSetTriggerEdge+0xdc>)
 800309c:	400b      	ands	r3, r1
 800309e:	60d3      	str	r3, [r2, #12]
 80030a0:	e02f      	b.n	8003102 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80030a2:	79bb      	ldrb	r3, [r7, #6]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d115      	bne.n	80030d4 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80030a8:	4b18      	ldr	r3, [pc, #96]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	2101      	movs	r1, #1
 80030b0:	fa01 f202 	lsl.w	r2, r1, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4a15      	ldr	r2, [pc, #84]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030b8:	430b      	orrs	r3, r1
 80030ba:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 80030bc:	4b13      	ldr	r3, [pc, #76]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	79fa      	ldrb	r2, [r7, #7]
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	43d2      	mvns	r2, r2
 80030ca:	4611      	mov	r1, r2
 80030cc:	4a0f      	ldr	r2, [pc, #60]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	6093      	str	r3, [r2, #8]
 80030d2:	e016      	b.n	8003102 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 80030d4:	79bb      	ldrb	r3, [r7, #6]
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d113      	bne.n	8003102 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	79fa      	ldrb	r2, [r7, #7]
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	4611      	mov	r1, r2
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	79fa      	ldrb	r2, [r7, #7]
 80030f4:	2101      	movs	r1, #1
 80030f6:	fa01 f202 	lsl.w	r2, r1, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4a03      	ldr	r2, [pc, #12]	; (800310c <extiSetTriggerEdge+0xdc>)
 80030fe:	430b      	orrs	r3, r1
 8003100:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3708      	adds	r7, #8
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40013c00 	.word	0x40013c00

08003110 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a10      	ldr	r2, [pc, #64]	; (800315c <gpioVerifyPort+0x4c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d013      	beq.n	8003148 <gpioVerifyPort+0x38>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <gpioVerifyPort+0x50>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00f      	beq.n	8003148 <gpioVerifyPort+0x38>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <gpioVerifyPort+0x54>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00b      	beq.n	8003148 <gpioVerifyPort+0x38>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <gpioVerifyPort+0x58>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d007      	beq.n	8003148 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a0c      	ldr	r2, [pc, #48]	; (800316c <gpioVerifyPort+0x5c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d003      	beq.n	8003148 <gpioVerifyPort+0x38>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a0b      	ldr	r2, [pc, #44]	; (8003170 <gpioVerifyPort+0x60>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <gpioVerifyPort+0x3c>
    {
        return true;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <gpioVerifyPort+0x3e>
    }
    return false;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40020000 	.word	0x40020000
 8003160:	40020400 	.word	0x40020400
 8003164:	40020800 	.word	0x40020800
 8003168:	40020c00 	.word	0x40020c00
 800316c:	40021000 	.word	0x40021000
 8003170:	40021c00 	.word	0x40021c00

08003174 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 800317e:	79fb      	ldrb	r3, [r7, #7]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02c      	beq.n	80031de <gpioVerifyPin+0x6a>
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d029      	beq.n	80031de <gpioVerifyPin+0x6a>
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d026      	beq.n	80031de <gpioVerifyPin+0x6a>
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d023      	beq.n	80031de <gpioVerifyPin+0x6a>
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d020      	beq.n	80031de <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d01d      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	2b06      	cmp	r3, #6
 80031a6:	d01a      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b07      	cmp	r3, #7
 80031ac:	d017      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d014      	beq.n	80031de <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d011      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031ba:	79fb      	ldrb	r3, [r7, #7]
 80031bc:	2b0a      	cmp	r3, #10
 80031be:	d00e      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b0b      	cmp	r3, #11
 80031c4:	d00b      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d008      	beq.n	80031de <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2b0d      	cmp	r3, #13
 80031d0:	d005      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	2b0e      	cmp	r3, #14
 80031d6:	d002      	beq.n	80031de <gpioVerifyPin+0x6a>
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d101      	bne.n	80031e2 <gpioVerifyPin+0x6e>
    {
        return true;
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <gpioVerifyPin+0x70>
    }
    return false;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d02c      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d029      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d026      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d023      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003212:	79fb      	ldrb	r3, [r7, #7]
 8003214:	2b04      	cmp	r3, #4
 8003216:	d020      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003218:	79fb      	ldrb	r3, [r7, #7]
 800321a:	2b05      	cmp	r3, #5
 800321c:	d01d      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d01a      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	2b07      	cmp	r3, #7
 8003228:	d017      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d014      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2b09      	cmp	r3, #9
 8003234:	d011      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	2b0a      	cmp	r3, #10
 800323a:	d00e      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	2b0b      	cmp	r3, #11
 8003240:	d00b      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b0c      	cmp	r3, #12
 8003246:	d008      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2b0d      	cmp	r3, #13
 800324c:	d005      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	2b0e      	cmp	r3, #14
 8003252:	d002      	beq.n	800325a <gpioVerifyAltFunc+0x6a>
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2b0f      	cmp	r3, #15
 8003258:	d101      	bne.n	800325e <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <gpioVerifyAltFunc+0x70>
    }

    return false;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <gpioVerifyPinMode+0x22>
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d005      	beq.n	800328e <gpioVerifyPinMode+0x22>
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b02      	cmp	r3, #2
 8003286:	d002      	beq.n	800328e <gpioVerifyPinMode+0x22>
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d101      	bne.n	8003292 <gpioVerifyPinMode+0x26>
    {
        return true;
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <gpioVerifyPinMode+0x28>
    }

    return false;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <gpioVerifyOutputType+0x16>
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <gpioVerifyOutputType+0x1a>
    {
        return true;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <gpioVerifyOutputType+0x1c>
    }

    return false;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <gpioVerifyPushPullMode+0x1c>
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d002      	beq.n	80032e4 <gpioVerifyPushPullMode+0x1c>
 80032de:	79fb      	ldrb	r3, [r7, #7]
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d101      	bne.n	80032e8 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e000      	b.n	80032ea <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f7ff ff05 	bl	8003110 <gpioVerifyPort>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d042      	beq.n	8003392 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <gpioInitPort+0xa8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d106      	bne.n	8003322 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8003314:	4b23      	ldr	r3, [pc, #140]	; (80033a4 <gpioInitPort+0xac>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a22      	ldr	r2, [pc, #136]	; (80033a4 <gpioInitPort+0xac>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	e035      	b.n	800338e <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a20      	ldr	r2, [pc, #128]	; (80033a8 <gpioInitPort+0xb0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d106      	bne.n	8003338 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <gpioInitPort+0xac>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <gpioInitPort+0xac>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	e02a      	b.n	800338e <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <gpioInitPort+0xb4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d106      	bne.n	800334e <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <gpioInitPort+0xac>)
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <gpioInitPort+0xac>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6313      	str	r3, [r2, #48]	; 0x30
 800334c:	e01f      	b.n	800338e <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <gpioInitPort+0xb8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d106      	bne.n	8003364 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <gpioInitPort+0xac>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a12      	ldr	r2, [pc, #72]	; (80033a4 <gpioInitPort+0xac>)
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	e014      	b.n	800338e <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <gpioInitPort+0xbc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d106      	bne.n	800337a <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <gpioInitPort+0xac>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003370:	4a0c      	ldr	r2, [pc, #48]	; (80033a4 <gpioInitPort+0xac>)
 8003372:	f043 0310 	orr.w	r3, r3, #16
 8003376:	6313      	str	r3, [r2, #48]	; 0x30
 8003378:	e009      	b.n	800338e <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <gpioInitPort+0xc0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d105      	bne.n	800338e <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003382:	4b08      	ldr	r3, [pc, #32]	; (80033a4 <gpioInitPort+0xac>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <gpioInitPort+0xac>)
 8003388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800338c:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e001      	b.n	8003396 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 8003392:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400
 80033ac:	40020800 	.word	0x40020800
 80033b0:	40020c00 	.word	0x40020c00
 80033b4:	40021000 	.word	0x40021000
 80033b8:	40021c00 	.word	0x40021c00

080033bc <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fea3 	bl	8003110 <gpioVerifyPort>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	e041      	b.n	8003460 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <gpioSelectPort+0xac>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d106      	bne.n	80033f2 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <gpioSelectPort+0xb0>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	4a20      	ldr	r2, [pc, #128]	; (800346c <gpioSelectPort+0xb0>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6313      	str	r3, [r2, #48]	; 0x30
 80033f0:	e035      	b.n	800345e <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <gpioSelectPort+0xb4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d106      	bne.n	8003408 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <gpioSelectPort+0xb0>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a1b      	ldr	r2, [pc, #108]	; (800346c <gpioSelectPort+0xb0>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	e02a      	b.n	800345e <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <gpioSelectPort+0xb8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d106      	bne.n	800341e <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8003410:	4b16      	ldr	r3, [pc, #88]	; (800346c <gpioSelectPort+0xb0>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a15      	ldr	r2, [pc, #84]	; (800346c <gpioSelectPort+0xb0>)
 8003416:	f043 0304 	orr.w	r3, r3, #4
 800341a:	6313      	str	r3, [r2, #48]	; 0x30
 800341c:	e01f      	b.n	800345e <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <gpioSelectPort+0xbc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d106      	bne.n	8003434 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <gpioSelectPort+0xb0>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <gpioSelectPort+0xb0>)
 800342c:	f043 0308 	orr.w	r3, r3, #8
 8003430:	6313      	str	r3, [r2, #48]	; 0x30
 8003432:	e014      	b.n	800345e <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a11      	ldr	r2, [pc, #68]	; (800347c <gpioSelectPort+0xc0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d106      	bne.n	800344a <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <gpioSelectPort+0xb0>)
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	4a0a      	ldr	r2, [pc, #40]	; (800346c <gpioSelectPort+0xb0>)
 8003442:	f043 0310 	orr.w	r3, r3, #16
 8003446:	6313      	str	r3, [r2, #48]	; 0x30
 8003448:	e009      	b.n	800345e <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <gpioSelectPort+0xc4>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d105      	bne.n	800345e <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <gpioSelectPort+0xb0>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <gpioSelectPort+0xb0>)
 8003458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40020000 	.word	0x40020000
 800346c:	40023800 	.word	0x40023800
 8003470:	40020400 	.word	0x40020400
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40021000 	.word	0x40021000
 8003480:	40021c00 	.word	0x40021c00

08003484 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
 8003490:	4613      	mov	r3, r2
 8003492:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff fe3b 	bl	8003110 <gpioVerifyPort>
 800349a:	4603      	mov	r3, r0
 800349c:	f083 0301 	eor.w	r3, r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80034a6:	f04f 33ff 	mov.w	r3, #4294967295
 80034aa:	e032      	b.n	8003512 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fe60 	bl	8003174 <gpioVerifyPin>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f083 0301 	eor.w	r3, r3, #1
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80034c0:	f06f 0301 	mvn.w	r3, #1
 80034c4:	e025      	b.n	8003512 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 80034c6:	78bb      	ldrb	r3, [r7, #2]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff fecf 	bl	800326c <gpioVerifyPinMode>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f083 0301 	eor.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80034da:	f06f 0305 	mvn.w	r3, #5
 80034de:	e018      	b.n	8003512 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	78fa      	ldrb	r2, [r7, #3]
 80034e6:	0052      	lsls	r2, r2, #1
 80034e8:	2103      	movs	r1, #3
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	43d2      	mvns	r2, r2
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 80034f6:	78bb      	ldrb	r3, [r7, #2]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78b9      	ldrb	r1, [r7, #2]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	0052      	lsls	r2, r2, #1
 8003506:	fa01 f202 	lsl.w	r2, r1, r2
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff fdf2 	bl	8003110 <gpioVerifyPort>
 800352c:	4603      	mov	r3, r0
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8003538:	f04f 33ff 	mov.w	r3, #4294967295
 800353c:	e014      	b.n	8003568 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fe17 	bl	8003174 <gpioVerifyPin>
 8003546:	4603      	mov	r3, r0
 8003548:	f083 0301 	eor.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8003552:	f06f 0301 	mvn.w	r3, #1
 8003556:	e007      	b.n	8003568 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	2201      	movs	r2, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	461a      	mov	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	460b      	mov	r3, r1
 800357a:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff fdc7 	bl	8003110 <gpioVerifyPort>
 8003582:	4603      	mov	r3, r0
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	e015      	b.n	80035c0 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fdec 	bl	8003174 <gpioVerifyPin>
 800359c:	4603      	mov	r3, r0
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80035a8:	f06f 0301 	mvn.w	r3, #1
 80035ac:	e008      	b.n	80035c0 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	3310      	adds	r3, #16
 80035b2:	2201      	movs	r2, #1
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
 80035d4:	4613      	mov	r3, r2
 80035d6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff fd99 	bl	8003110 <gpioVerifyPort>
 80035de:	4603      	mov	r3, r0
 80035e0:	f083 0301 	eor.w	r3, r3, #1
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	e050      	b.n	8003692 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fdbe 	bl	8003174 <gpioVerifyPin>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f083 0301 	eor.w	r3, r3, #1
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8003604:	f06f 0301 	mvn.w	r3, #1
 8003608:	e043      	b.n	8003692 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 800360a:	78bb      	ldrb	r3, [r7, #2]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fdef 	bl	80031f0 <gpioVerifyAltFunc>
 8003612:	4603      	mov	r3, r0
 8003614:	f083 0301 	eor.w	r3, r3, #1
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 800361e:	f06f 0302 	mvn.w	r3, #2
 8003622:	e036      	b.n	8003692 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	2202      	movs	r2, #2
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ff2a 	bl	8003484 <gpioSelectPinMode>

	if (pin <= PIN7)
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d815      	bhi.n	8003662 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	0092      	lsls	r2, r2, #2
 800363e:	210f      	movs	r1, #15
 8003640:	fa01 f202 	lsl.w	r2, r1, r2
 8003644:	43d2      	mvns	r2, r2
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	78b9      	ldrb	r1, [r7, #2]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	0092      	lsls	r2, r2, #2
 8003656:	fa01 f202 	lsl.w	r2, r1, r2
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	621a      	str	r2, [r3, #32]
 8003660:	e016      	b.n	8003690 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	3a08      	subs	r2, #8
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	210f      	movs	r1, #15
 800366e:	fa01 f202 	lsl.w	r2, r1, r2
 8003672:	43d2      	mvns	r2, r2
 8003674:	401a      	ands	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	78b9      	ldrb	r1, [r7, #2]
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	3a08      	subs	r2, #8
 8003684:	0092      	lsls	r2, r2, #2
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
 80036a6:	4613      	mov	r3, r2
 80036a8:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fd30 	bl	8003110 <gpioVerifyPort>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f083 0301 	eor.w	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 80036bc:	f04f 33ff 	mov.w	r3, #4294967295
 80036c0:	e030      	b.n	8003724 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fd55 	bl	8003174 <gpioVerifyPin>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f083 0301 	eor.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 80036d6:	f06f 0301 	mvn.w	r3, #1
 80036da:	e023      	b.n	8003724 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 80036dc:	78bb      	ldrb	r3, [r7, #2]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fdde 	bl	80032a0 <gpioVerifyOutputType>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 80036f0:	f06f 0303 	mvn.w	r3, #3
 80036f4:	e016      	b.n	8003724 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	43d2      	mvns	r2, r2
 8003704:	401a      	ands	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 800370a:	78bb      	ldrb	r3, [r7, #2]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d108      	bne.n	8003722 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	2101      	movs	r1, #1
 8003718:	fa01 f202 	lsl.w	r2, r1, r2
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
 8003738:	4613      	mov	r3, r2
 800373a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff fce7 	bl	8003110 <gpioVerifyPort>
 8003742:	4603      	mov	r3, r0
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 800374e:	f04f 33ff 	mov.w	r3, #4294967295
 8003752:	e044      	b.n	80037de <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fd0c 	bl	8003174 <gpioVerifyPin>
 800375c:	4603      	mov	r3, r0
 800375e:	f083 0301 	eor.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d002      	beq.n	800376e <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8003768:	f06f 0301 	mvn.w	r3, #1
 800376c:	e037      	b.n	80037de <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 800376e:	78bb      	ldrb	r3, [r7, #2]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fda9 	bl	80032c8 <gpioVerifyPushPullMode>
 8003776:	4603      	mov	r3, r0
 8003778:	f083 0301 	eor.w	r3, r3, #1
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8003782:	f06f 0306 	mvn.w	r3, #6
 8003786:	e02a      	b.n	80037de <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	0052      	lsls	r2, r2, #1
 8003790:	2103      	movs	r1, #3
 8003792:	fa01 f202 	lsl.w	r2, r1, r2
 8003796:	43d2      	mvns	r2, r2
 8003798:	401a      	ands	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11a      	bne.n	80037dc <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 80037a6:	78bb      	ldrb	r3, [r7, #2]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d10a      	bne.n	80037c2 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	0052      	lsls	r2, r2, #1
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f202 	lsl.w	r2, r1, r2
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	e00c      	b.n	80037dc <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 80037c2:	78bb      	ldrb	r3, [r7, #2]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d109      	bne.n	80037dc <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	0052      	lsls	r2, r2, #1
 80037d0:	2102      	movs	r1, #2
 80037d2:	fa01 f202 	lsl.w	r2, r1, r2
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f202 	lsl.w	r2, r1, r2
 80037fe:	4013      	ands	r3, r2
 8003800:	78fa      	ldrb	r2, [r7, #3]
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	4293      	cmp	r3, r2
 800380a:	bf0c      	ite	eq
 800380c:	2301      	moveq	r3, #1
 800380e:	2300      	movne	r3, #0
 8003810:	b2db      	uxtb	r3, r3
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8003832:	bf00      	nop
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f9      	beq.n	8003834 <__i2c_start+0x16>
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8003862:	bf00      	nop
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f9      	beq.n	8003864 <__i2c_stop+0x16>
 }
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8003886:	bf00      	nop
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf0c      	ite	eq
 8003890:	2301      	moveq	r3, #1
 8003892:	2300      	movne	r3, #0
 8003894:	b2da      	uxtb	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	bf0c      	ite	eq
 800389e:	2301      	moveq	r3, #1
 80038a0:	2300      	movne	r3, #0
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ed      	bne.n	8003888 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 80038c2:	bf00      	nop
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f9      	beq.n	80038c4 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e002      	b.n	80038dc <__i2c_Chk_TX_empty+0x22>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b13      	cmp	r3, #19
 80038e0:	d9f9      	bls.n	80038d6 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 80038e2:	bf00      	nop
 80038e4:	bf00      	nop
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <i2cVerifyDutyCycle+0x16>
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <i2cSelectI2C+0x58>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d106      	bne.n	8003936 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <i2cSelectI2C+0x5c>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a11      	ldr	r2, [pc, #68]	; (8003974 <i2cSelectI2C+0x5c>)
 800392e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
 8003934:	e014      	b.n	8003960 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <i2cSelectI2C+0x60>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d106      	bne.n	800394c <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <i2cSelectI2C+0x5c>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <i2cSelectI2C+0x5c>)
 8003944:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003948:	6413      	str	r3, [r2, #64]	; 0x40
 800394a:	e009      	b.n	8003960 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a0b      	ldr	r2, [pc, #44]	; (800397c <i2cSelectI2C+0x64>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d105      	bne.n	8003960 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <i2cSelectI2C+0x5c>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	4a06      	ldr	r2, [pc, #24]	; (8003974 <i2cSelectI2C+0x5c>)
 800395a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800395e:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40005400 	.word	0x40005400
 8003974:	40023800 	.word	0x40023800
 8003978:	40005800 	.word	0x40005800
 800397c:	40005c00 	.word	0x40005c00

08003980 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <i2cSetClkSpd+0x2a>
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d008      	beq.n	80039aa <i2cSetClkSpd+0x2a>
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d005      	beq.n	80039aa <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d002      	beq.n	80039aa <i2cSetClkSpd+0x2a>
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d166      	bne.n	8003a78 <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 80039aa:	bf00      	nop
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f9      	bne.n	80039ac <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80039c6:	f023 030f 	bic.w	r3, r3, #15
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	61da      	str	r2, [r3, #28]
    	switch (spd)
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d836      	bhi.n	8003a4e <i2cSetClkSpd+0xce>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <i2cSetClkSpd+0x68>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	080039fd 	.word	0x080039fd
 80039ec:	08003a0b 	.word	0x08003a0b
 80039f0:	08003a19 	.word	0x08003a19
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a35 	.word	0x08003a35
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	61da      	str	r2, [r3, #28]
				break;
 8003a08:	e02e      	b.n	8003a68 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	61da      	str	r2, [r3, #28]
    			break;
 8003a16:	e027      	b.n	8003a68 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	61da      	str	r2, [r3, #28]
    				break;
 8003a24:	e020      	b.n	8003a68 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f043 0214 	orr.w	r2, r3, #20
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	61da      	str	r2, [r3, #28]
    			break;
 8003a32:	e019      	b.n	8003a68 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f043 0205 	orr.w	r2, r3, #5
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	61da      	str	r2, [r3, #28]
				break;
 8003a4c:	e00c      	b.n	8003a68 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	61da      	str	r2, [r3, #28]
    			break;
 8003a66:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e001      	b.n	8003a7c <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8003a78:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	4608      	mov	r0, r1
 8003a92:	4611      	mov	r1, r2
 8003a94:	461a      	mov	r2, r3
 8003a96:	4603      	mov	r3, r0
 8003a98:	70fb      	strb	r3, [r7, #3]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	70bb      	strb	r3, [r7, #2]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8003aa2:	78fb      	ldrb	r3, [r7, #3]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff23 	bl	80038f0 <i2cVerifyDutyCycle>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f083 0301 	eor.w	r3, r3, #1
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8003ab6:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8003aba:	e02d      	b.n	8003b18 <i2cInitI2C+0x90>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ac2:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8003ad6:	f000 fa79 	bl	8003fcc <rccGetPclk1Freq>
 8003ada:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a10      	ldr	r2, [pc, #64]	; (8003b20 <i2cInitI2C+0x98>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	0c9a      	lsrs	r2, r3, #18
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 8003aea:	78ba      	ldrb	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8003b04:	787b      	ldrb	r3, [r7, #1]
 8003b06:	4619      	mov	r1, r3
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff39 	bl	8003980 <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    i2cFindSlaveAddr(i2c, 1);			// first run find routine for Adr 0, work arround for result failure at first search run
 8003b0e:	2101      	movs	r1, #1
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8fe 	bl	8003d12 <i2cFindSlaveAddr>


    return I2C_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	431bde83 	.word	0x431bde83

08003b24 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	4608      	mov	r0, r1
 8003b2e:	4611      	mov	r1, r2
 8003b30:	461a      	mov	r2, r3
 8003b32:	4603      	mov	r3, r0
 8003b34:	70fb      	strb	r3, [r7, #3]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70bb      	strb	r3, [r7, #2]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8003b3e:	bf00      	nop
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff fe66 	bl	800381e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003b52:	bf00      	nop
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f9      	beq.n	8003b54 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8003b6a:	bf00      	nop
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f9      	beq.n	8003b6c <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fe80 	bl	800387e <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fe9b 	bl	80038ba <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8003b84:	78ba      	ldrb	r2, [r7, #2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fe95 	bl	80038ba <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fe74 	bl	800387e <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8003b96:	787a      	ldrb	r2, [r7, #1]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8003b9c:	bf00      	nop
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f9      	beq.n	8003b9e <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fe67 	bl	800387e <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff fe4c 	bl	800384e <__i2c_stop>


    return I2C_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	72fb      	strb	r3, [r7, #11]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8003bd2:	bf00      	nop
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f9      	bne.n	8003bd4 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f7ff fe1c 	bl	800381e <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8003be6:	bf00      	nop
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f9      	beq.n	8003be8 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8003bf4:	7afb      	ldrb	r3, [r7, #11]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003bfe:	bf00      	nop
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d0f9      	beq.n	8003c00 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f7ff fe36 	bl	800387e <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8003c12:	7aba      	ldrb	r2, [r7, #10]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fe4e 	bl	80038ba <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8003c1e:	bf00      	nop
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f9      	beq.n	8003c20 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f7ff fe26 	bl	800387e <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8003c3e:	bf00      	nop
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f9      	beq.n	8003c40 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8003c4c:	7afb      	ldrb	r3, [r7, #11]
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	461a      	mov	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8003c5a:	bf00      	nop
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f9      	beq.n	8003c5c <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8003c74:	e02e      	b.n	8003cd4 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 8003c76:	7e3b      	ldrb	r3, [r7, #24]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d117      	bne.n	8003cac <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f7ff fdf8 	bl	800387e <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003c8e:	bf00      	nop
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f9      	beq.n	8003c90 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6919      	ldr	r1, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	b2ca      	uxtb	r2, r1
 8003ca8:	701a      	strb	r2, [r3, #0]
            break;
 8003caa:	e016      	b.n	8003cda <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fde6 	bl	800387e <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 8003cb2:	bf00      	nop
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f9      	beq.n	8003cb4 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6919      	ldr	r1, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	b2ca      	uxtb	r2, r1
 8003ccc:	701a      	strb	r2, [r3, #0]
            num--;
 8003cce:	7e3b      	ldrb	r3, [r7, #24]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8003cd4:	7e3b      	ldrb	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1cd      	bne.n	8003c76 <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f7ff fdcf 	bl	800387e <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff fdb4 	bl	800384e <__i2c_stop>

    return I2C_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fd7d 	bl	800381e <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	461a      	mov	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff fda5 	bl	800387e <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <i2cFindSlaveAddr+0x3a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d52:	d3f8      	bcc.n	8003d46 <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	e000      	b.n	8003d66 <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8003d64:	2300      	movs	r3, #0
    }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 8003d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d74:	b094      	sub	sp, #80	; 0x50
 8003d76:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8003d80:	2300      	movs	r3, #0
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8003d84:	2300      	movs	r3, #0
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d88:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <rccGetSysClock+0x200>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d00d      	beq.n	8003db0 <rccGetSysClock+0x40>
 8003d94:	2b08      	cmp	r3, #8
 8003d96:	f200 80e1 	bhi.w	8003f5c <rccGetSysClock+0x1ec>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <rccGetSysClock+0x34>
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d003      	beq.n	8003daa <rccGetSysClock+0x3a>
 8003da2:	e0db      	b.n	8003f5c <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8003da4:	4b73      	ldr	r3, [pc, #460]	; (8003f74 <rccGetSysClock+0x204>)
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003da8:	e0db      	b.n	8003f62 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8003daa:	4b73      	ldr	r3, [pc, #460]	; (8003f78 <rccGetSysClock+0x208>)
 8003dac:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003dae:	e0d8      	b.n	8003f62 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003db0:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <rccGetSysClock+0x200>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003db8:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003dba:	4b6d      	ldr	r3, [pc, #436]	; (8003f70 <rccGetSysClock+0x200>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d063      	beq.n	8003e8e <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <rccGetSysClock+0x200>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	099b      	lsrs	r3, r3, #6
 8003dcc:	2200      	movs	r2, #0
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dda:	2300      	movs	r3, #0
 8003ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003de2:	4622      	mov	r2, r4
 8003de4:	462b      	mov	r3, r5
 8003de6:	f04f 0000 	mov.w	r0, #0
 8003dea:	f04f 0100 	mov.w	r1, #0
 8003dee:	0159      	lsls	r1, r3, #5
 8003df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003df4:	0150      	lsls	r0, r2, #5
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	1a51      	subs	r1, r2, r1
 8003dfe:	6139      	str	r1, [r7, #16]
 8003e00:	4629      	mov	r1, r5
 8003e02:	eb63 0301 	sbc.w	r3, r3, r1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e14:	4659      	mov	r1, fp
 8003e16:	018b      	lsls	r3, r1, #6
 8003e18:	4651      	mov	r1, sl
 8003e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e1e:	4651      	mov	r1, sl
 8003e20:	018a      	lsls	r2, r1, #6
 8003e22:	4651      	mov	r1, sl
 8003e24:	ebb2 0801 	subs.w	r8, r2, r1
 8003e28:	4659      	mov	r1, fp
 8003e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e42:	4690      	mov	r8, r2
 8003e44:	4699      	mov	r9, r3
 8003e46:	4623      	mov	r3, r4
 8003e48:	eb18 0303 	adds.w	r3, r8, r3
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	462b      	mov	r3, r5
 8003e50:	eb49 0303 	adc.w	r3, r9, r3
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e62:	4629      	mov	r1, r5
 8003e64:	024b      	lsls	r3, r1, #9
 8003e66:	4621      	mov	r1, r4
 8003e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	024a      	lsls	r2, r1, #9
 8003e70:	4610      	mov	r0, r2
 8003e72:	4619      	mov	r1, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	2200      	movs	r2, #0
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e80:	f7fc feea 	bl	8000c58 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8003e88:	4613      	mov	r3, r2
 8003e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e8c:	e058      	b.n	8003f40 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <rccGetSysClock+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	2200      	movs	r2, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	4611      	mov	r1, r2
 8003e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	0159      	lsls	r1, r3, #5
 8003eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eba:	0150      	lsls	r0, r2, #5
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	00eb      	lsls	r3, r5, #3
 8003ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef6:	00e2      	lsls	r2, r4, #3
 8003ef8:	4614      	mov	r4, r2
 8003efa:	461d      	mov	r5, r3
 8003efc:	4643      	mov	r3, r8
 8003efe:	18e3      	adds	r3, r4, r3
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb45 0303 	adc.w	r3, r5, r3
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f16:	4629      	mov	r1, r5
 8003f18:	028b      	lsls	r3, r1, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f20:	4621      	mov	r1, r4
 8003f22:	028a      	lsls	r2, r1, #10
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	61fa      	str	r2, [r7, #28]
 8003f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f34:	f7fc fe90 	bl	8000c58 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <rccGetSysClock+0x200>)
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8003f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003f5a:	e002      	b.n	8003f62 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <rccGetSysClock+0x204>)
 8003f5e:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8003f60:	bf00      	nop
    }

    return sysClock;
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3750      	adds	r7, #80	; 0x50
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023800 	.word	0x40023800
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	007a1200 	.word	0x007a1200

08003f7c <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8003f82:	f7ff fef5 	bl	8003d70 <rccGetSysClock>
 8003f86:	4601      	mov	r1, r0
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <rccGetHclkFreq+0x44>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f90:	22f0      	movs	r2, #240	; 0xf0
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	fa92 f2a2 	rbit	r2, r2
 8003f9a:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	fab2 f282 	clz	r2, r2
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	40d3      	lsrs	r3, r2
 8003fa6:	4a07      	ldr	r2, [pc, #28]	; (8003fc4 <rccGetHclkFreq+0x48>)
 8003fa8:	5cd3      	ldrb	r3, [r2, r3]
 8003faa:	fa21 f303 	lsr.w	r3, r1, r3
 8003fae:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <rccGetHclkFreq+0x4c>)
 8003fb0:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <rccGetHclkFreq+0x4c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	08009210 	.word	0x08009210
 8003fc8:	2000002c 	.word	0x2000002c

08003fcc <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003fd2:	f7ff ffd3 	bl	8003f7c <rccGetHclkFreq>
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <rccGetPclk1Freq+0x3c>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003fe0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003fe4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	fa92 f2a2 	rbit	r2, r2
 8003fec:	603a      	str	r2, [r7, #0]
  return result;
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	fab2 f282 	clz	r2, r2
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	40d3      	lsrs	r3, r2
 8003ff8:	4a04      	ldr	r2, [pc, #16]	; (800400c <rccGetPclk1Freq+0x40>)
 8003ffa:	5cd3      	ldrb	r3, [r2, r3]
 8003ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40023800 	.word	0x40023800
 800400c:	08009210 	.word	0x08009210

08004010 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8004018:	bf00      	nop
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f9      	beq.n	800401a <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8004026:	2300      	movs	r3, #0
 8004028:	81fb      	strh	r3, [r7, #14]
 800402a:	e002      	b.n	8004032 <__spi_Chk_TX_empty+0x22>
 800402c:	89fb      	ldrh	r3, [r7, #14]
 800402e:	3301      	adds	r3, #1
 8004030:	81fb      	strh	r3, [r7, #14]
 8004032:	89fb      	ldrh	r3, [r7, #14]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d9f9      	bls.n	800402c <__spi_Chk_TX_empty+0x1c>

}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 800404e:	bf00      	nop
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f9      	bne.n	8004050 <__spi_Chk_notBSY+0xa>
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <spiVerifySPI+0x3c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00b      	beq.n	8004094 <spiVerifySPI+0x28>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a0b      	ldr	r2, [pc, #44]	; (80040ac <spiVerifySPI+0x40>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d007      	beq.n	8004094 <spiVerifySPI+0x28>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <spiVerifySPI+0x44>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d003      	beq.n	8004094 <spiVerifySPI+0x28>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a09      	ldr	r2, [pc, #36]	; (80040b4 <spiVerifySPI+0x48>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d101      	bne.n	8004098 <spiVerifySPI+0x2c>
    {
        return true;
 8004094:	2301      	movs	r3, #1
 8004096:	e000      	b.n	800409a <spiVerifySPI+0x2e>
    }
    return false;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40013000 	.word	0x40013000
 80040ac:	40003800 	.word	0x40003800
 80040b0:	40003c00 	.word	0x40003c00
 80040b4:	40013400 	.word	0x40013400

080040b8 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d014      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d011      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d00e      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d00b      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d008      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d005      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d002      	beq.n	80040f2 <spiVerifyClkDivider+0x3a>
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	2b07      	cmp	r3, #7
 80040f0:	d101      	bne.n	80040f6 <spiVerifyClkDivider+0x3e>
    {
        return true;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <spiVerifyClkDivider+0x40>
    }
    return false;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 800410e:	79fb      	ldrb	r3, [r7, #7]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <spiVerifySSM+0x16>
 8004114:	79fb      	ldrb	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <spiVerifySSM+0x1a>
    {
        return true;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <spiVerifySSM+0x1c>
    }
    return false;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	4603      	mov	r3, r0
 8004134:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <spiVerifyOpMode+0x16>
 800413c:	79fb      	ldrb	r3, [r7, #7]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <spiVerifyOpMode+0x1a>
    {
        return true;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <spiVerifyOpMode+0x1c>
    }
    return false;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	4603      	mov	r3, r0
 800415c:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <spiVerifyPhase+0x16>
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <spiVerifyPhase+0x1a>
    {
        return true;
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <spiVerifyPhase+0x1c>
    }
    return false;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8004186:	79fb      	ldrb	r3, [r7, #7]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <spiVerifyIdlePolarity+0x16>
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	70fb      	strb	r3, [r7, #3]
 80041b6:	460b      	mov	r3, r1
 80041b8:	70bb      	strb	r3, [r7, #2]
 80041ba:	4613      	mov	r3, r2
 80041bc:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80041c2:	78fb      	ldrb	r3, [r7, #3]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff ff77 	bl	80040b8 <spiVerifyClkDivider>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d002      	beq.n	80041dc <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80041d6:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80041da:	e0cc      	b.n	8004376 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 80041dc:	787b      	ldrb	r3, [r7, #1]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ff90 	bl	8004104 <spiVerifySSM>
 80041e4:	4603      	mov	r3, r0
 80041e6:	f083 0301 	eor.w	r3, r3, #1
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 80041f0:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80041f4:	e0bf      	b.n	8004376 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 80041f6:	7f3b      	ldrb	r3, [r7, #28]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff97 	bl	800412c <spiVerifyOpMode>
 80041fe:	4603      	mov	r3, r0
 8004200:	f083 0301 	eor.w	r3, r3, #1
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 800420a:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800420e:	e0b2      	b.n	8004376 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8004210:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004214:	4618      	mov	r0, r3
 8004216:	f7ff ff9d 	bl	8004154 <spiVerifyPhase>
 800421a:	4603      	mov	r3, r0
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8004226:	f06f 0356 	mvn.w	r3, #86	; 0x56
 800422a:	e0a4      	b.n	8004376 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 800422c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff ffa3 	bl	800417c <spiVerifyIdlePolarity>
 8004236:	4603      	mov	r3, r0
 8004238:	f083 0301 	eor.w	r3, r3, #1
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8004242:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8004246:	e096      	b.n	8004376 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	2b07      	cmp	r3, #7
 800424c:	d83a      	bhi.n	80042c4 <spiInitSPI+0x120>
 800424e:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <spiInitSPI+0xb0>)
 8004250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004254:	08004275 	.word	0x08004275
 8004258:	0800427f 	.word	0x0800427f
 800425c:	08004289 	.word	0x08004289
 8004260:	08004293 	.word	0x08004293
 8004264:	0800429d 	.word	0x0800429d
 8004268:	080042a7 	.word	0x080042a7
 800426c:	080042b1 	.word	0x080042b1
 8004270:	080042bb 	.word	0x080042bb
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004274:	89fb      	ldrh	r3, [r7, #14]
 8004276:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800427a:	81fb      	strh	r3, [r7, #14]
            break;
 800427c:	e027      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	f043 0308 	orr.w	r3, r3, #8
 8004284:	81fb      	strh	r3, [r7, #14]
            break;
 8004286:	e022      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8004288:	89fb      	ldrh	r3, [r7, #14]
 800428a:	f043 0310 	orr.w	r3, r3, #16
 800428e:	81fb      	strh	r3, [r7, #14]
            break;
 8004290:	e01d      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8004292:	89fb      	ldrh	r3, [r7, #14]
 8004294:	f043 0318 	orr.w	r3, r3, #24
 8004298:	81fb      	strh	r3, [r7, #14]
            break;
 800429a:	e018      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 800429c:	89fb      	ldrh	r3, [r7, #14]
 800429e:	f043 0320 	orr.w	r3, r3, #32
 80042a2:	81fb      	strh	r3, [r7, #14]
            break;
 80042a4:	e013      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80042a6:	89fb      	ldrh	r3, [r7, #14]
 80042a8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80042ac:	81fb      	strh	r3, [r7, #14]
            break;
 80042ae:	e00e      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80042b0:	89fb      	ldrh	r3, [r7, #14]
 80042b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80042b6:	81fb      	strh	r3, [r7, #14]
            break;
 80042b8:	e009      	b.n	80042ce <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80042ba:	89fb      	ldrh	r3, [r7, #14]
 80042bc:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80042c0:	81fb      	strh	r3, [r7, #14]
            break;
 80042c2:	e004      	b.n	80042ce <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80042c4:	89fb      	ldrh	r3, [r7, #14]
 80042c6:	f043 0318 	orr.w	r3, r3, #24
 80042ca:	81fb      	strh	r3, [r7, #14]
            break;
 80042cc:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 80042ce:	78bb      	ldrb	r3, [r7, #2]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 80042d4:	89fb      	ldrh	r3, [r7, #14]
 80042d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042da:	81fb      	strh	r3, [r7, #14]
 80042dc:	e003      	b.n	80042e6 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80042de:	89fb      	ldrh	r3, [r7, #14]
 80042e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042e4:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80042e6:	787b      	ldrb	r3, [r7, #1]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d110      	bne.n	800430e <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 80042ec:	89fb      	ldrh	r3, [r7, #14]
 80042ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042f2:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 80042f4:	7e3b      	ldrb	r3, [r7, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d104      	bne.n	8004304 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 80042fa:	89fb      	ldrh	r3, [r7, #14]
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	81fb      	strh	r3, [r7, #14]
 8004302:	e008      	b.n	8004316 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8004304:	89fb      	ldrh	r3, [r7, #14]
 8004306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800430a:	81fb      	strh	r3, [r7, #14]
 800430c:	e003      	b.n	8004316 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004314:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8004316:	7f3b      	ldrb	r3, [r7, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	81fb      	strh	r3, [r7, #14]
 8004324:	e003      	b.n	800432e <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8004326:	89fb      	ldrh	r3, [r7, #14]
 8004328:	f023 0304 	bic.w	r3, r3, #4
 800432c:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 800432e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8004336:	89fb      	ldrh	r3, [r7, #14]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	81fb      	strh	r3, [r7, #14]
 800433e:	e003      	b.n	8004348 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8004348:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d104      	bne.n	800435a <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8004350:	89fb      	ldrh	r3, [r7, #14]
 8004352:	f023 0302 	bic.w	r3, r3, #2
 8004356:	81fb      	strh	r3, [r7, #14]
 8004358:	e003      	b.n	8004362 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 800435a:	89fb      	ldrh	r3, [r7, #14]
 800435c:	f043 0302 	orr.w	r3, r3, #2
 8004360:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8004362:	89fa      	ldrh	r2, [r7, #14]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 f846 	bl	8004400 <spiEnableSPI>

    return SPI_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop

08004380 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a18      	ldr	r2, [pc, #96]	; (80043ec <spiSelectSPI+0x6c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d106      	bne.n	800439e <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8004390:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <spiSelectSPI+0x70>)
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	4a16      	ldr	r2, [pc, #88]	; (80043f0 <spiSelectSPI+0x70>)
 8004396:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800439a:	6453      	str	r3, [r2, #68]	; 0x44
 800439c:	e01f      	b.n	80043de <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a14      	ldr	r2, [pc, #80]	; (80043f4 <spiSelectSPI+0x74>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d106      	bne.n	80043b4 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <spiSelectSPI+0x70>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4a11      	ldr	r2, [pc, #68]	; (80043f0 <spiSelectSPI+0x70>)
 80043ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043b0:	6413      	str	r3, [r2, #64]	; 0x40
 80043b2:	e014      	b.n	80043de <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a10      	ldr	r2, [pc, #64]	; (80043f8 <spiSelectSPI+0x78>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d106      	bne.n	80043ca <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <spiSelectSPI+0x70>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <spiSelectSPI+0x70>)
 80043c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043c6:	6413      	str	r3, [r2, #64]	; 0x40
 80043c8:	e009      	b.n	80043de <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <spiSelectSPI+0x7c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d105      	bne.n	80043de <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 80043d2:	4b07      	ldr	r3, [pc, #28]	; (80043f0 <spiSelectSPI+0x70>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	4a06      	ldr	r2, [pc, #24]	; (80043f0 <spiSelectSPI+0x70>)
 80043d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40013000 	.word	0x40013000
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40003800 	.word	0x40003800
 80043f8:	40003c00 	.word	0x40003c00
 80043fc:	40013400 	.word	0x40013400

08004400 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f7ff fe2f 	bl	800406c <spiVerifySPI>
 800440e:	4603      	mov	r3, r0
 8004410:	f083 0301 	eor.w	r3, r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 800441a:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 800441e:	e006      	b.n	800442e <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	4611      	mov	r1, r2
 8004442:	461a      	mov	r2, r3
 8004444:	460b      	mov	r3, r1
 8004446:	71fb      	strb	r3, [r7, #7]
 8004448:	4613      	mov	r3, r2
 800444a:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fe90 	bl	8003174 <gpioVerifyPin>
 8004454:	4603      	mov	r3, r0
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8004460:	f06f 0301 	mvn.w	r3, #1
 8004464:	e016      	b.n	8004494 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fdd2 	bl	8004010 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	4619      	mov	r1, r3
 8004470:	68b8      	ldr	r0, [r7, #8]
 8004472:	f7ff f87d 	bl	8003570 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8004476:	79ba      	ldrb	r2, [r7, #6]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff fdc7 	bl	8004010 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fddf 	bl	8004046 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4619      	mov	r1, r3
 800448c:	68b8      	ldr	r0, [r7, #8]
 800448e:	f7ff f844 	bl	800351a <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	; (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	; (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004500:	d301      	bcc.n	8004506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004502:	2301      	movs	r3, #1
 8004504:	e00f      	b.n	8004526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004506:	4a0a      	ldr	r2, [pc, #40]	; (8004530 <SysTick_Config+0x40>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800450e:	210f      	movs	r1, #15
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f7ff ffc2 	bl	800449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <SysTick_Config+0x40>)
 800451a:	2200      	movs	r2, #0
 800451c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <SysTick_Config+0x40>)
 8004520:	2207      	movs	r2, #7
 8004522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	e000e010 	.word	0xe000e010

08004534 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
    *timer = millis;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8004558:	f000 f8b2 	bl	80046c0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <systickInit+0x24>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ffc2 	bl	80044f0 <SysTick_Config>
}
 800456c:	bf00      	nop
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	2000002c 	.word	0x2000002c

08004578 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	601a      	str	r2, [r3, #0]
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <isSystickExpired+0x16>
	{
		timerState = true;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
	timerTrigger = true;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <SysTick_Handler+0x14>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
}
 80045c2:	bf00      	nop
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	2000021c 	.word	0x2000021c

080045d0 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d004      	beq.n	80045ea <systickUpdateTimer+0x1a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	1e5a      	subs	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <systickUpdateTimer+0x2c>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	2000021c 	.word	0x2000021c

08004600 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e011      	b.n	8004636 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d004      	beq.n	8004630 <systickUpdateTimerList+0x30>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	1e5a      	subs	r2, r3, #1
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8004630:	7bfb      	ldrb	r3, [r7, #15]
 8004632:	3301      	adds	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
 8004636:	7bfa      	ldrb	r2, [r7, #15]
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	429a      	cmp	r2, r3
 800463c:	d3e9      	bcc.n	8004612 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <systickUpdateTimerList+0x50>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	2000021c 	.word	0x2000021c

08004654 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff67 	bl	8004534 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8004666:	e006      	b.n	8004676 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <systickDelay+0x44>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff ffad 	bl	80045d0 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ff8a 	bl	8004594 <isSystickExpired>
 8004680:	4603      	mov	r3, r0
 8004682:	f083 0301 	eor.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1ed      	bne.n	8004668 <systickDelay+0x14>
        }
    }
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	2000021c 	.word	0x2000021c

0800469c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <SystemInit+0x20>)
 80046a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a6:	4a05      	ldr	r2, [pc, #20]	; (80046bc <SystemInit+0x20>)
 80046a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	2302      	movs	r3, #2
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	2302      	movs	r3, #2
 80046d8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80046da:	4b34      	ldr	r3, [pc, #208]	; (80047ac <SystemCoreClockUpdate+0xec>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d011      	beq.n	800470e <SystemCoreClockUpdate+0x4e>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d844      	bhi.n	800477a <SystemCoreClockUpdate+0xba>
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <SystemCoreClockUpdate+0x3e>
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d004      	beq.n	8004706 <SystemCoreClockUpdate+0x46>
 80046fc:	e03d      	b.n	800477a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80046fe:	4b2c      	ldr	r3, [pc, #176]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <SystemCoreClockUpdate+0xf4>)
 8004702:	601a      	str	r2, [r3, #0]
      break;
 8004704:	e03d      	b.n	8004782 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 8004708:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <SystemCoreClockUpdate+0xf8>)
 800470a:	601a      	str	r2, [r3, #0]
      break;
 800470c:	e039      	b.n	8004782 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800470e:	4b27      	ldr	r3, [pc, #156]	; (80047ac <SystemCoreClockUpdate+0xec>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	0d9b      	lsrs	r3, r3, #22
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800471a:	4b24      	ldr	r3, [pc, #144]	; (80047ac <SystemCoreClockUpdate+0xec>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004722:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00c      	beq.n	8004744 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800472a:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <SystemCoreClockUpdate+0xf8>)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004732:	4a1e      	ldr	r2, [pc, #120]	; (80047ac <SystemCoreClockUpdate+0xec>)
 8004734:	6852      	ldr	r2, [r2, #4]
 8004736:	0992      	lsrs	r2, r2, #6
 8004738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e00b      	b.n	800475c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004744:	4a1b      	ldr	r2, [pc, #108]	; (80047b4 <SystemCoreClockUpdate+0xf4>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	fbb2 f3f3 	udiv	r3, r2, r3
 800474c:	4a17      	ldr	r2, [pc, #92]	; (80047ac <SystemCoreClockUpdate+0xec>)
 800474e:	6852      	ldr	r2, [r2, #4]
 8004750:	0992      	lsrs	r2, r2, #6
 8004752:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <SystemCoreClockUpdate+0xec>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	fbb2 f3f3 	udiv	r3, r2, r3
 8004774:	4a0e      	ldr	r2, [pc, #56]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 8004776:	6013      	str	r3, [r2, #0]
      break;
 8004778:	e003      	b.n	8004782 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800477a:	4b0d      	ldr	r3, [pc, #52]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <SystemCoreClockUpdate+0xf4>)
 800477e:	601a      	str	r2, [r3, #0]
      break;
 8004780:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <SystemCoreClockUpdate+0xec>)
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	091b      	lsrs	r3, r3, #4
 8004788:	f003 030f 	and.w	r3, r3, #15
 800478c:	4a0b      	ldr	r2, [pc, #44]	; (80047bc <SystemCoreClockUpdate+0xfc>)
 800478e:	5cd3      	ldrb	r3, [r2, r3]
 8004790:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004792:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	4a04      	ldr	r2, [pc, #16]	; (80047b0 <SystemCoreClockUpdate+0xf0>)
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	371c      	adds	r7, #28
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	40023800 	.word	0x40023800
 80047b0:	2000002c 	.word	0x2000002c
 80047b4:	00f42400 	.word	0x00f42400
 80047b8:	007a1200 	.word	0x007a1200
 80047bc:	08009220 	.word	0x08009220

080047c0 <__libc_init_array>:
 80047c0:	b570      	push	{r4, r5, r6, lr}
 80047c2:	4d0d      	ldr	r5, [pc, #52]	; (80047f8 <__libc_init_array+0x38>)
 80047c4:	4c0d      	ldr	r4, [pc, #52]	; (80047fc <__libc_init_array+0x3c>)
 80047c6:	1b64      	subs	r4, r4, r5
 80047c8:	10a4      	asrs	r4, r4, #2
 80047ca:	2600      	movs	r6, #0
 80047cc:	42a6      	cmp	r6, r4
 80047ce:	d109      	bne.n	80047e4 <__libc_init_array+0x24>
 80047d0:	4d0b      	ldr	r5, [pc, #44]	; (8004800 <__libc_init_array+0x40>)
 80047d2:	4c0c      	ldr	r4, [pc, #48]	; (8004804 <__libc_init_array+0x44>)
 80047d4:	f004 fa66 	bl	8008ca4 <_init>
 80047d8:	1b64      	subs	r4, r4, r5
 80047da:	10a4      	asrs	r4, r4, #2
 80047dc:	2600      	movs	r6, #0
 80047de:	42a6      	cmp	r6, r4
 80047e0:	d105      	bne.n	80047ee <__libc_init_array+0x2e>
 80047e2:	bd70      	pop	{r4, r5, r6, pc}
 80047e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e8:	4798      	blx	r3
 80047ea:	3601      	adds	r6, #1
 80047ec:	e7ee      	b.n	80047cc <__libc_init_array+0xc>
 80047ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f2:	4798      	blx	r3
 80047f4:	3601      	adds	r6, #1
 80047f6:	e7f2      	b.n	80047de <__libc_init_array+0x1e>
 80047f8:	08009860 	.word	0x08009860
 80047fc:	08009860 	.word	0x08009860
 8004800:	08009860 	.word	0x08009860
 8004804:	08009864 	.word	0x08009864

08004808 <memset>:
 8004808:	4402      	add	r2, r0
 800480a:	4603      	mov	r3, r0
 800480c:	4293      	cmp	r3, r2
 800480e:	d100      	bne.n	8004812 <memset+0xa>
 8004810:	4770      	bx	lr
 8004812:	f803 1b01 	strb.w	r1, [r3], #1
 8004816:	e7f9      	b.n	800480c <memset+0x4>

08004818 <__cvt>:
 8004818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800481c:	ec55 4b10 	vmov	r4, r5, d0
 8004820:	2d00      	cmp	r5, #0
 8004822:	460e      	mov	r6, r1
 8004824:	4619      	mov	r1, r3
 8004826:	462b      	mov	r3, r5
 8004828:	bfbb      	ittet	lt
 800482a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800482e:	461d      	movlt	r5, r3
 8004830:	2300      	movge	r3, #0
 8004832:	232d      	movlt	r3, #45	; 0x2d
 8004834:	700b      	strb	r3, [r1, #0]
 8004836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004838:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800483c:	4691      	mov	r9, r2
 800483e:	f023 0820 	bic.w	r8, r3, #32
 8004842:	bfbc      	itt	lt
 8004844:	4622      	movlt	r2, r4
 8004846:	4614      	movlt	r4, r2
 8004848:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800484c:	d005      	beq.n	800485a <__cvt+0x42>
 800484e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004852:	d100      	bne.n	8004856 <__cvt+0x3e>
 8004854:	3601      	adds	r6, #1
 8004856:	2102      	movs	r1, #2
 8004858:	e000      	b.n	800485c <__cvt+0x44>
 800485a:	2103      	movs	r1, #3
 800485c:	ab03      	add	r3, sp, #12
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	ab02      	add	r3, sp, #8
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	ec45 4b10 	vmov	d0, r4, r5
 8004868:	4653      	mov	r3, sl
 800486a:	4632      	mov	r2, r6
 800486c:	f000 fcec 	bl	8005248 <_dtoa_r>
 8004870:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004874:	4607      	mov	r7, r0
 8004876:	d102      	bne.n	800487e <__cvt+0x66>
 8004878:	f019 0f01 	tst.w	r9, #1
 800487c:	d022      	beq.n	80048c4 <__cvt+0xac>
 800487e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004882:	eb07 0906 	add.w	r9, r7, r6
 8004886:	d110      	bne.n	80048aa <__cvt+0x92>
 8004888:	783b      	ldrb	r3, [r7, #0]
 800488a:	2b30      	cmp	r3, #48	; 0x30
 800488c:	d10a      	bne.n	80048a4 <__cvt+0x8c>
 800488e:	2200      	movs	r2, #0
 8004890:	2300      	movs	r3, #0
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fc f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800489a:	b918      	cbnz	r0, 80048a4 <__cvt+0x8c>
 800489c:	f1c6 0601 	rsb	r6, r6, #1
 80048a0:	f8ca 6000 	str.w	r6, [sl]
 80048a4:	f8da 3000 	ldr.w	r3, [sl]
 80048a8:	4499      	add	r9, r3
 80048aa:	2200      	movs	r2, #0
 80048ac:	2300      	movs	r3, #0
 80048ae:	4620      	mov	r0, r4
 80048b0:	4629      	mov	r1, r5
 80048b2:	f7fc f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80048b6:	b108      	cbz	r0, 80048bc <__cvt+0xa4>
 80048b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80048bc:	2230      	movs	r2, #48	; 0x30
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	454b      	cmp	r3, r9
 80048c2:	d307      	bcc.n	80048d4 <__cvt+0xbc>
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048c8:	1bdb      	subs	r3, r3, r7
 80048ca:	4638      	mov	r0, r7
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	b004      	add	sp, #16
 80048d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	9103      	str	r1, [sp, #12]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	e7f0      	b.n	80048be <__cvt+0xa6>

080048dc <__exponent>:
 80048dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048de:	4603      	mov	r3, r0
 80048e0:	2900      	cmp	r1, #0
 80048e2:	bfb8      	it	lt
 80048e4:	4249      	neglt	r1, r1
 80048e6:	f803 2b02 	strb.w	r2, [r3], #2
 80048ea:	bfb4      	ite	lt
 80048ec:	222d      	movlt	r2, #45	; 0x2d
 80048ee:	222b      	movge	r2, #43	; 0x2b
 80048f0:	2909      	cmp	r1, #9
 80048f2:	7042      	strb	r2, [r0, #1]
 80048f4:	dd2a      	ble.n	800494c <__exponent+0x70>
 80048f6:	f10d 0407 	add.w	r4, sp, #7
 80048fa:	46a4      	mov	ip, r4
 80048fc:	270a      	movs	r7, #10
 80048fe:	46a6      	mov	lr, r4
 8004900:	460a      	mov	r2, r1
 8004902:	fb91 f6f7 	sdiv	r6, r1, r7
 8004906:	fb07 1516 	mls	r5, r7, r6, r1
 800490a:	3530      	adds	r5, #48	; 0x30
 800490c:	2a63      	cmp	r2, #99	; 0x63
 800490e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004912:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004916:	4631      	mov	r1, r6
 8004918:	dcf1      	bgt.n	80048fe <__exponent+0x22>
 800491a:	3130      	adds	r1, #48	; 0x30
 800491c:	f1ae 0502 	sub.w	r5, lr, #2
 8004920:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004924:	1c44      	adds	r4, r0, #1
 8004926:	4629      	mov	r1, r5
 8004928:	4561      	cmp	r1, ip
 800492a:	d30a      	bcc.n	8004942 <__exponent+0x66>
 800492c:	f10d 0209 	add.w	r2, sp, #9
 8004930:	eba2 020e 	sub.w	r2, r2, lr
 8004934:	4565      	cmp	r5, ip
 8004936:	bf88      	it	hi
 8004938:	2200      	movhi	r2, #0
 800493a:	4413      	add	r3, r2
 800493c:	1a18      	subs	r0, r3, r0
 800493e:	b003      	add	sp, #12
 8004940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004942:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004946:	f804 2f01 	strb.w	r2, [r4, #1]!
 800494a:	e7ed      	b.n	8004928 <__exponent+0x4c>
 800494c:	2330      	movs	r3, #48	; 0x30
 800494e:	3130      	adds	r1, #48	; 0x30
 8004950:	7083      	strb	r3, [r0, #2]
 8004952:	70c1      	strb	r1, [r0, #3]
 8004954:	1d03      	adds	r3, r0, #4
 8004956:	e7f1      	b.n	800493c <__exponent+0x60>

08004958 <_printf_float>:
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	ed2d 8b02 	vpush	{d8}
 8004960:	b08d      	sub	sp, #52	; 0x34
 8004962:	460c      	mov	r4, r1
 8004964:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004968:	4616      	mov	r6, r2
 800496a:	461f      	mov	r7, r3
 800496c:	4605      	mov	r5, r0
 800496e:	f001 fa59 	bl	8005e24 <_localeconv_r>
 8004972:	f8d0 a000 	ldr.w	sl, [r0]
 8004976:	4650      	mov	r0, sl
 8004978:	f7fb fc32 	bl	80001e0 <strlen>
 800497c:	2300      	movs	r3, #0
 800497e:	930a      	str	r3, [sp, #40]	; 0x28
 8004980:	6823      	ldr	r3, [r4, #0]
 8004982:	9305      	str	r3, [sp, #20]
 8004984:	f8d8 3000 	ldr.w	r3, [r8]
 8004988:	f894 b018 	ldrb.w	fp, [r4, #24]
 800498c:	3307      	adds	r3, #7
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	f103 0208 	add.w	r2, r3, #8
 8004996:	f8c8 2000 	str.w	r2, [r8]
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80049a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80049a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049aa:	9307      	str	r3, [sp, #28]
 80049ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80049b0:	ee08 0a10 	vmov	s16, r0
 80049b4:	4b9f      	ldr	r3, [pc, #636]	; (8004c34 <_printf_float+0x2dc>)
 80049b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ba:	f04f 32ff 	mov.w	r2, #4294967295
 80049be:	f7fc f8bd 	bl	8000b3c <__aeabi_dcmpun>
 80049c2:	bb88      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049c8:	4b9a      	ldr	r3, [pc, #616]	; (8004c34 <_printf_float+0x2dc>)
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	f7fc f897 	bl	8000b00 <__aeabi_dcmple>
 80049d2:	bb48      	cbnz	r0, 8004a28 <_printf_float+0xd0>
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fc f886 	bl	8000aec <__aeabi_dcmplt>
 80049e0:	b110      	cbz	r0, 80049e8 <_printf_float+0x90>
 80049e2:	232d      	movs	r3, #45	; 0x2d
 80049e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e8:	4b93      	ldr	r3, [pc, #588]	; (8004c38 <_printf_float+0x2e0>)
 80049ea:	4894      	ldr	r0, [pc, #592]	; (8004c3c <_printf_float+0x2e4>)
 80049ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80049f0:	bf94      	ite	ls
 80049f2:	4698      	movls	r8, r3
 80049f4:	4680      	movhi	r8, r0
 80049f6:	2303      	movs	r3, #3
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	9b05      	ldr	r3, [sp, #20]
 80049fc:	f023 0204 	bic.w	r2, r3, #4
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	f04f 0900 	mov.w	r9, #0
 8004a06:	9700      	str	r7, [sp, #0]
 8004a08:	4633      	mov	r3, r6
 8004a0a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	4628      	mov	r0, r5
 8004a10:	f000 f9d8 	bl	8004dc4 <_printf_common>
 8004a14:	3001      	adds	r0, #1
 8004a16:	f040 8090 	bne.w	8004b3a <_printf_float+0x1e2>
 8004a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a1e:	b00d      	add	sp, #52	; 0x34
 8004a20:	ecbd 8b02 	vpop	{d8}
 8004a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a28:	4642      	mov	r2, r8
 8004a2a:	464b      	mov	r3, r9
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	f7fc f884 	bl	8000b3c <__aeabi_dcmpun>
 8004a34:	b140      	cbz	r0, 8004a48 <_printf_float+0xf0>
 8004a36:	464b      	mov	r3, r9
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bfbc      	itt	lt
 8004a3c:	232d      	movlt	r3, #45	; 0x2d
 8004a3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a42:	487f      	ldr	r0, [pc, #508]	; (8004c40 <_printf_float+0x2e8>)
 8004a44:	4b7f      	ldr	r3, [pc, #508]	; (8004c44 <_printf_float+0x2ec>)
 8004a46:	e7d1      	b.n	80049ec <_printf_float+0x94>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004a4e:	9206      	str	r2, [sp, #24]
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	d13f      	bne.n	8004ad4 <_printf_float+0x17c>
 8004a54:	2306      	movs	r3, #6
 8004a56:	6063      	str	r3, [r4, #4]
 8004a58:	9b05      	ldr	r3, [sp, #20]
 8004a5a:	6861      	ldr	r1, [r4, #4]
 8004a5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a60:	2300      	movs	r3, #0
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	ab0a      	add	r3, sp, #40	; 0x28
 8004a66:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004a6a:	ab09      	add	r3, sp, #36	; 0x24
 8004a6c:	ec49 8b10 	vmov	d0, r8, r9
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	6022      	str	r2, [r4, #0]
 8004a74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff fecd 	bl	8004818 <__cvt>
 8004a7e:	9b06      	ldr	r3, [sp, #24]
 8004a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a82:	2b47      	cmp	r3, #71	; 0x47
 8004a84:	4680      	mov	r8, r0
 8004a86:	d108      	bne.n	8004a9a <_printf_float+0x142>
 8004a88:	1cc8      	adds	r0, r1, #3
 8004a8a:	db02      	blt.n	8004a92 <_printf_float+0x13a>
 8004a8c:	6863      	ldr	r3, [r4, #4]
 8004a8e:	4299      	cmp	r1, r3
 8004a90:	dd41      	ble.n	8004b16 <_printf_float+0x1be>
 8004a92:	f1ab 0b02 	sub.w	fp, fp, #2
 8004a96:	fa5f fb8b 	uxtb.w	fp, fp
 8004a9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a9e:	d820      	bhi.n	8004ae2 <_printf_float+0x18a>
 8004aa0:	3901      	subs	r1, #1
 8004aa2:	465a      	mov	r2, fp
 8004aa4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004aa8:	9109      	str	r1, [sp, #36]	; 0x24
 8004aaa:	f7ff ff17 	bl	80048dc <__exponent>
 8004aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ab0:	1813      	adds	r3, r2, r0
 8004ab2:	2a01      	cmp	r2, #1
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	6123      	str	r3, [r4, #16]
 8004ab8:	dc02      	bgt.n	8004ac0 <_printf_float+0x168>
 8004aba:	6822      	ldr	r2, [r4, #0]
 8004abc:	07d2      	lsls	r2, r2, #31
 8004abe:	d501      	bpl.n	8004ac4 <_printf_float+0x16c>
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d09c      	beq.n	8004a06 <_printf_float+0xae>
 8004acc:	232d      	movs	r3, #45	; 0x2d
 8004ace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad2:	e798      	b.n	8004a06 <_printf_float+0xae>
 8004ad4:	9a06      	ldr	r2, [sp, #24]
 8004ad6:	2a47      	cmp	r2, #71	; 0x47
 8004ad8:	d1be      	bne.n	8004a58 <_printf_float+0x100>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1bc      	bne.n	8004a58 <_printf_float+0x100>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e7b9      	b.n	8004a56 <_printf_float+0xfe>
 8004ae2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ae6:	d118      	bne.n	8004b1a <_printf_float+0x1c2>
 8004ae8:	2900      	cmp	r1, #0
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	dd0b      	ble.n	8004b06 <_printf_float+0x1ae>
 8004aee:	6121      	str	r1, [r4, #16]
 8004af0:	b913      	cbnz	r3, 8004af8 <_printf_float+0x1a0>
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	07d0      	lsls	r0, r2, #31
 8004af6:	d502      	bpl.n	8004afe <_printf_float+0x1a6>
 8004af8:	3301      	adds	r3, #1
 8004afa:	440b      	add	r3, r1
 8004afc:	6123      	str	r3, [r4, #16]
 8004afe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b00:	f04f 0900 	mov.w	r9, #0
 8004b04:	e7de      	b.n	8004ac4 <_printf_float+0x16c>
 8004b06:	b913      	cbnz	r3, 8004b0e <_printf_float+0x1b6>
 8004b08:	6822      	ldr	r2, [r4, #0]
 8004b0a:	07d2      	lsls	r2, r2, #31
 8004b0c:	d501      	bpl.n	8004b12 <_printf_float+0x1ba>
 8004b0e:	3302      	adds	r3, #2
 8004b10:	e7f4      	b.n	8004afc <_printf_float+0x1a4>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e7f2      	b.n	8004afc <_printf_float+0x1a4>
 8004b16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	db05      	blt.n	8004b2c <_printf_float+0x1d4>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	6121      	str	r1, [r4, #16]
 8004b24:	07d8      	lsls	r0, r3, #31
 8004b26:	d5ea      	bpl.n	8004afe <_printf_float+0x1a6>
 8004b28:	1c4b      	adds	r3, r1, #1
 8004b2a:	e7e7      	b.n	8004afc <_printf_float+0x1a4>
 8004b2c:	2900      	cmp	r1, #0
 8004b2e:	bfd4      	ite	le
 8004b30:	f1c1 0202 	rsble	r2, r1, #2
 8004b34:	2201      	movgt	r2, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	e7e0      	b.n	8004afc <_printf_float+0x1a4>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	055a      	lsls	r2, r3, #21
 8004b3e:	d407      	bmi.n	8004b50 <_printf_float+0x1f8>
 8004b40:	6923      	ldr	r3, [r4, #16]
 8004b42:	4642      	mov	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d12c      	bne.n	8004ba8 <_printf_float+0x250>
 8004b4e:	e764      	b.n	8004a1a <_printf_float+0xc2>
 8004b50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b54:	f240 80e0 	bls.w	8004d18 <_printf_float+0x3c0>
 8004b58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f7fb ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d034      	beq.n	8004bd2 <_printf_float+0x27a>
 8004b68:	4a37      	ldr	r2, [pc, #220]	; (8004c48 <_printf_float+0x2f0>)
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b8      	blx	r7
 8004b72:	3001      	adds	r0, #1
 8004b74:	f43f af51 	beq.w	8004a1a <_printf_float+0xc2>
 8004b78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	db02      	blt.n	8004b86 <_printf_float+0x22e>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	07d8      	lsls	r0, r3, #31
 8004b84:	d510      	bpl.n	8004ba8 <_printf_float+0x250>
 8004b86:	ee18 3a10 	vmov	r3, s16
 8004b8a:	4652      	mov	r2, sl
 8004b8c:	4631      	mov	r1, r6
 8004b8e:	4628      	mov	r0, r5
 8004b90:	47b8      	blx	r7
 8004b92:	3001      	adds	r0, #1
 8004b94:	f43f af41 	beq.w	8004a1a <_printf_float+0xc2>
 8004b98:	f04f 0800 	mov.w	r8, #0
 8004b9c:	f104 091a 	add.w	r9, r4, #26
 8004ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	4543      	cmp	r3, r8
 8004ba6:	dc09      	bgt.n	8004bbc <_printf_float+0x264>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	f100 8105 	bmi.w	8004dba <_printf_float+0x462>
 8004bb0:	68e0      	ldr	r0, [r4, #12]
 8004bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb4:	4298      	cmp	r0, r3
 8004bb6:	bfb8      	it	lt
 8004bb8:	4618      	movlt	r0, r3
 8004bba:	e730      	b.n	8004a1e <_printf_float+0xc6>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	464a      	mov	r2, r9
 8004bc0:	4631      	mov	r1, r6
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	47b8      	blx	r7
 8004bc6:	3001      	adds	r0, #1
 8004bc8:	f43f af27 	beq.w	8004a1a <_printf_float+0xc2>
 8004bcc:	f108 0801 	add.w	r8, r8, #1
 8004bd0:	e7e6      	b.n	8004ba0 <_printf_float+0x248>
 8004bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dc39      	bgt.n	8004c4c <_printf_float+0x2f4>
 8004bd8:	4a1b      	ldr	r2, [pc, #108]	; (8004c48 <_printf_float+0x2f0>)
 8004bda:	2301      	movs	r3, #1
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4628      	mov	r0, r5
 8004be0:	47b8      	blx	r7
 8004be2:	3001      	adds	r0, #1
 8004be4:	f43f af19 	beq.w	8004a1a <_printf_float+0xc2>
 8004be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bec:	4313      	orrs	r3, r2
 8004bee:	d102      	bne.n	8004bf6 <_printf_float+0x29e>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d5d8      	bpl.n	8004ba8 <_printf_float+0x250>
 8004bf6:	ee18 3a10 	vmov	r3, s16
 8004bfa:	4652      	mov	r2, sl
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	f43f af09 	beq.w	8004a1a <_printf_float+0xc2>
 8004c08:	f04f 0900 	mov.w	r9, #0
 8004c0c:	f104 0a1a 	add.w	sl, r4, #26
 8004c10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c12:	425b      	negs	r3, r3
 8004c14:	454b      	cmp	r3, r9
 8004c16:	dc01      	bgt.n	8004c1c <_printf_float+0x2c4>
 8004c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c1a:	e792      	b.n	8004b42 <_printf_float+0x1ea>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	4652      	mov	r2, sl
 8004c20:	4631      	mov	r1, r6
 8004c22:	4628      	mov	r0, r5
 8004c24:	47b8      	blx	r7
 8004c26:	3001      	adds	r0, #1
 8004c28:	f43f aef7 	beq.w	8004a1a <_printf_float+0xc2>
 8004c2c:	f109 0901 	add.w	r9, r9, #1
 8004c30:	e7ee      	b.n	8004c10 <_printf_float+0x2b8>
 8004c32:	bf00      	nop
 8004c34:	7fefffff 	.word	0x7fefffff
 8004c38:	08009234 	.word	0x08009234
 8004c3c:	08009238 	.word	0x08009238
 8004c40:	08009240 	.word	0x08009240
 8004c44:	0800923c 	.word	0x0800923c
 8004c48:	08009244 	.word	0x08009244
 8004c4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c50:	429a      	cmp	r2, r3
 8004c52:	bfa8      	it	ge
 8004c54:	461a      	movge	r2, r3
 8004c56:	2a00      	cmp	r2, #0
 8004c58:	4691      	mov	r9, r2
 8004c5a:	dc37      	bgt.n	8004ccc <_printf_float+0x374>
 8004c5c:	f04f 0b00 	mov.w	fp, #0
 8004c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c64:	f104 021a 	add.w	r2, r4, #26
 8004c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	eba3 0309 	sub.w	r3, r3, r9
 8004c70:	455b      	cmp	r3, fp
 8004c72:	dc33      	bgt.n	8004cdc <_printf_float+0x384>
 8004c74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	db3b      	blt.n	8004cf4 <_printf_float+0x39c>
 8004c7c:	6823      	ldr	r3, [r4, #0]
 8004c7e:	07da      	lsls	r2, r3, #31
 8004c80:	d438      	bmi.n	8004cf4 <_printf_float+0x39c>
 8004c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c84:	9a05      	ldr	r2, [sp, #20]
 8004c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c88:	1a9a      	subs	r2, r3, r2
 8004c8a:	eba3 0901 	sub.w	r9, r3, r1
 8004c8e:	4591      	cmp	r9, r2
 8004c90:	bfa8      	it	ge
 8004c92:	4691      	movge	r9, r2
 8004c94:	f1b9 0f00 	cmp.w	r9, #0
 8004c98:	dc35      	bgt.n	8004d06 <_printf_float+0x3ae>
 8004c9a:	f04f 0800 	mov.w	r8, #0
 8004c9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ca2:	f104 0a1a 	add.w	sl, r4, #26
 8004ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	eba3 0309 	sub.w	r3, r3, r9
 8004cb0:	4543      	cmp	r3, r8
 8004cb2:	f77f af79 	ble.w	8004ba8 <_printf_float+0x250>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	4652      	mov	r2, sl
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b8      	blx	r7
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	f43f aeaa 	beq.w	8004a1a <_printf_float+0xc2>
 8004cc6:	f108 0801 	add.w	r8, r8, #1
 8004cca:	e7ec      	b.n	8004ca6 <_printf_float+0x34e>
 8004ccc:	4613      	mov	r3, r2
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b8      	blx	r7
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d1c0      	bne.n	8004c5c <_printf_float+0x304>
 8004cda:	e69e      	b.n	8004a1a <_printf_float+0xc2>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	9205      	str	r2, [sp, #20]
 8004ce4:	47b8      	blx	r7
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	f43f ae97 	beq.w	8004a1a <_printf_float+0xc2>
 8004cec:	9a05      	ldr	r2, [sp, #20]
 8004cee:	f10b 0b01 	add.w	fp, fp, #1
 8004cf2:	e7b9      	b.n	8004c68 <_printf_float+0x310>
 8004cf4:	ee18 3a10 	vmov	r3, s16
 8004cf8:	4652      	mov	r2, sl
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	d1be      	bne.n	8004c82 <_printf_float+0x32a>
 8004d04:	e689      	b.n	8004a1a <_printf_float+0xc2>
 8004d06:	9a05      	ldr	r2, [sp, #20]
 8004d08:	464b      	mov	r3, r9
 8004d0a:	4442      	add	r2, r8
 8004d0c:	4631      	mov	r1, r6
 8004d0e:	4628      	mov	r0, r5
 8004d10:	47b8      	blx	r7
 8004d12:	3001      	adds	r0, #1
 8004d14:	d1c1      	bne.n	8004c9a <_printf_float+0x342>
 8004d16:	e680      	b.n	8004a1a <_printf_float+0xc2>
 8004d18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d1a:	2a01      	cmp	r2, #1
 8004d1c:	dc01      	bgt.n	8004d22 <_printf_float+0x3ca>
 8004d1e:	07db      	lsls	r3, r3, #31
 8004d20:	d538      	bpl.n	8004d94 <_printf_float+0x43c>
 8004d22:	2301      	movs	r3, #1
 8004d24:	4642      	mov	r2, r8
 8004d26:	4631      	mov	r1, r6
 8004d28:	4628      	mov	r0, r5
 8004d2a:	47b8      	blx	r7
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	f43f ae74 	beq.w	8004a1a <_printf_float+0xc2>
 8004d32:	ee18 3a10 	vmov	r3, s16
 8004d36:	4652      	mov	r2, sl
 8004d38:	4631      	mov	r1, r6
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b8      	blx	r7
 8004d3e:	3001      	adds	r0, #1
 8004d40:	f43f ae6b 	beq.w	8004a1a <_printf_float+0xc2>
 8004d44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f7fb fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d50:	b9d8      	cbnz	r0, 8004d8a <_printf_float+0x432>
 8004d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d54:	f108 0201 	add.w	r2, r8, #1
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	d10e      	bne.n	8004d82 <_printf_float+0x42a>
 8004d64:	e659      	b.n	8004a1a <_printf_float+0xc2>
 8004d66:	2301      	movs	r3, #1
 8004d68:	4652      	mov	r2, sl
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f ae52 	beq.w	8004a1a <_printf_float+0xc2>
 8004d76:	f108 0801 	add.w	r8, r8, #1
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	4543      	cmp	r3, r8
 8004d80:	dcf1      	bgt.n	8004d66 <_printf_float+0x40e>
 8004d82:	464b      	mov	r3, r9
 8004d84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d88:	e6dc      	b.n	8004b44 <_printf_float+0x1ec>
 8004d8a:	f04f 0800 	mov.w	r8, #0
 8004d8e:	f104 0a1a 	add.w	sl, r4, #26
 8004d92:	e7f2      	b.n	8004d7a <_printf_float+0x422>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4642      	mov	r2, r8
 8004d98:	e7df      	b.n	8004d5a <_printf_float+0x402>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	464a      	mov	r2, r9
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	f43f ae38 	beq.w	8004a1a <_printf_float+0xc2>
 8004daa:	f108 0801 	add.w	r8, r8, #1
 8004dae:	68e3      	ldr	r3, [r4, #12]
 8004db0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004db2:	1a5b      	subs	r3, r3, r1
 8004db4:	4543      	cmp	r3, r8
 8004db6:	dcf0      	bgt.n	8004d9a <_printf_float+0x442>
 8004db8:	e6fa      	b.n	8004bb0 <_printf_float+0x258>
 8004dba:	f04f 0800 	mov.w	r8, #0
 8004dbe:	f104 0919 	add.w	r9, r4, #25
 8004dc2:	e7f4      	b.n	8004dae <_printf_float+0x456>

08004dc4 <_printf_common>:
 8004dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dc8:	4616      	mov	r6, r2
 8004dca:	4699      	mov	r9, r3
 8004dcc:	688a      	ldr	r2, [r1, #8]
 8004dce:	690b      	ldr	r3, [r1, #16]
 8004dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	bfb8      	it	lt
 8004dd8:	4613      	movlt	r3, r2
 8004dda:	6033      	str	r3, [r6, #0]
 8004ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004de0:	4607      	mov	r7, r0
 8004de2:	460c      	mov	r4, r1
 8004de4:	b10a      	cbz	r2, 8004dea <_printf_common+0x26>
 8004de6:	3301      	adds	r3, #1
 8004de8:	6033      	str	r3, [r6, #0]
 8004dea:	6823      	ldr	r3, [r4, #0]
 8004dec:	0699      	lsls	r1, r3, #26
 8004dee:	bf42      	ittt	mi
 8004df0:	6833      	ldrmi	r3, [r6, #0]
 8004df2:	3302      	addmi	r3, #2
 8004df4:	6033      	strmi	r3, [r6, #0]
 8004df6:	6825      	ldr	r5, [r4, #0]
 8004df8:	f015 0506 	ands.w	r5, r5, #6
 8004dfc:	d106      	bne.n	8004e0c <_printf_common+0x48>
 8004dfe:	f104 0a19 	add.w	sl, r4, #25
 8004e02:	68e3      	ldr	r3, [r4, #12]
 8004e04:	6832      	ldr	r2, [r6, #0]
 8004e06:	1a9b      	subs	r3, r3, r2
 8004e08:	42ab      	cmp	r3, r5
 8004e0a:	dc26      	bgt.n	8004e5a <_printf_common+0x96>
 8004e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e10:	1e13      	subs	r3, r2, #0
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	bf18      	it	ne
 8004e16:	2301      	movne	r3, #1
 8004e18:	0692      	lsls	r2, r2, #26
 8004e1a:	d42b      	bmi.n	8004e74 <_printf_common+0xb0>
 8004e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e20:	4649      	mov	r1, r9
 8004e22:	4638      	mov	r0, r7
 8004e24:	47c0      	blx	r8
 8004e26:	3001      	adds	r0, #1
 8004e28:	d01e      	beq.n	8004e68 <_printf_common+0xa4>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	68e5      	ldr	r5, [r4, #12]
 8004e2e:	6832      	ldr	r2, [r6, #0]
 8004e30:	f003 0306 	and.w	r3, r3, #6
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	bf08      	it	eq
 8004e38:	1aad      	subeq	r5, r5, r2
 8004e3a:	68a3      	ldr	r3, [r4, #8]
 8004e3c:	6922      	ldr	r2, [r4, #16]
 8004e3e:	bf0c      	ite	eq
 8004e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e44:	2500      	movne	r5, #0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfc4      	itt	gt
 8004e4a:	1a9b      	subgt	r3, r3, r2
 8004e4c:	18ed      	addgt	r5, r5, r3
 8004e4e:	2600      	movs	r6, #0
 8004e50:	341a      	adds	r4, #26
 8004e52:	42b5      	cmp	r5, r6
 8004e54:	d11a      	bne.n	8004e8c <_printf_common+0xc8>
 8004e56:	2000      	movs	r0, #0
 8004e58:	e008      	b.n	8004e6c <_printf_common+0xa8>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	4649      	mov	r1, r9
 8004e60:	4638      	mov	r0, r7
 8004e62:	47c0      	blx	r8
 8004e64:	3001      	adds	r0, #1
 8004e66:	d103      	bne.n	8004e70 <_printf_common+0xac>
 8004e68:	f04f 30ff 	mov.w	r0, #4294967295
 8004e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7c6      	b.n	8004e02 <_printf_common+0x3e>
 8004e74:	18e1      	adds	r1, r4, r3
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	2030      	movs	r0, #48	; 0x30
 8004e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e7e:	4422      	add	r2, r4
 8004e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e88:	3302      	adds	r3, #2
 8004e8a:	e7c7      	b.n	8004e1c <_printf_common+0x58>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4622      	mov	r2, r4
 8004e90:	4649      	mov	r1, r9
 8004e92:	4638      	mov	r0, r7
 8004e94:	47c0      	blx	r8
 8004e96:	3001      	adds	r0, #1
 8004e98:	d0e6      	beq.n	8004e68 <_printf_common+0xa4>
 8004e9a:	3601      	adds	r6, #1
 8004e9c:	e7d9      	b.n	8004e52 <_printf_common+0x8e>
	...

08004ea0 <_printf_i>:
 8004ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	7e0f      	ldrb	r7, [r1, #24]
 8004ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ea8:	2f78      	cmp	r7, #120	; 0x78
 8004eaa:	4691      	mov	r9, r2
 8004eac:	4680      	mov	r8, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	469a      	mov	sl, r3
 8004eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004eb6:	d807      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eb8:	2f62      	cmp	r7, #98	; 0x62
 8004eba:	d80a      	bhi.n	8004ed2 <_printf_i+0x32>
 8004ebc:	2f00      	cmp	r7, #0
 8004ebe:	f000 80d8 	beq.w	8005072 <_printf_i+0x1d2>
 8004ec2:	2f58      	cmp	r7, #88	; 0x58
 8004ec4:	f000 80a3 	beq.w	800500e <_printf_i+0x16e>
 8004ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004ed0:	e03a      	b.n	8004f48 <_printf_i+0xa8>
 8004ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ed6:	2b15      	cmp	r3, #21
 8004ed8:	d8f6      	bhi.n	8004ec8 <_printf_i+0x28>
 8004eda:	a101      	add	r1, pc, #4	; (adr r1, 8004ee0 <_printf_i+0x40>)
 8004edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f4d 	.word	0x08004f4d
 8004ee8:	08004ec9 	.word	0x08004ec9
 8004eec:	08004ec9 	.word	0x08004ec9
 8004ef0:	08004ec9 	.word	0x08004ec9
 8004ef4:	08004ec9 	.word	0x08004ec9
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004ec9 	.word	0x08004ec9
 8004f00:	08004ec9 	.word	0x08004ec9
 8004f04:	08004ec9 	.word	0x08004ec9
 8004f08:	08004ec9 	.word	0x08004ec9
 8004f0c:	08005059 	.word	0x08005059
 8004f10:	08004f7d 	.word	0x08004f7d
 8004f14:	0800503b 	.word	0x0800503b
 8004f18:	08004ec9 	.word	0x08004ec9
 8004f1c:	08004ec9 	.word	0x08004ec9
 8004f20:	0800507b 	.word	0x0800507b
 8004f24:	08004ec9 	.word	0x08004ec9
 8004f28:	08004f7d 	.word	0x08004f7d
 8004f2c:	08004ec9 	.word	0x08004ec9
 8004f30:	08004ec9 	.word	0x08004ec9
 8004f34:	08005043 	.word	0x08005043
 8004f38:	682b      	ldr	r3, [r5, #0]
 8004f3a:	1d1a      	adds	r2, r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0a3      	b.n	8005094 <_printf_i+0x1f4>
 8004f4c:	6820      	ldr	r0, [r4, #0]
 8004f4e:	6829      	ldr	r1, [r5, #0]
 8004f50:	0606      	lsls	r6, r0, #24
 8004f52:	f101 0304 	add.w	r3, r1, #4
 8004f56:	d50a      	bpl.n	8004f6e <_printf_i+0xce>
 8004f58:	680e      	ldr	r6, [r1, #0]
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	da03      	bge.n	8004f68 <_printf_i+0xc8>
 8004f60:	232d      	movs	r3, #45	; 0x2d
 8004f62:	4276      	negs	r6, r6
 8004f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f68:	485e      	ldr	r0, [pc, #376]	; (80050e4 <_printf_i+0x244>)
 8004f6a:	230a      	movs	r3, #10
 8004f6c:	e019      	b.n	8004fa2 <_printf_i+0x102>
 8004f6e:	680e      	ldr	r6, [r1, #0]
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f76:	bf18      	it	ne
 8004f78:	b236      	sxthne	r6, r6
 8004f7a:	e7ef      	b.n	8004f5c <_printf_i+0xbc>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	6820      	ldr	r0, [r4, #0]
 8004f80:	1d19      	adds	r1, r3, #4
 8004f82:	6029      	str	r1, [r5, #0]
 8004f84:	0601      	lsls	r1, r0, #24
 8004f86:	d501      	bpl.n	8004f8c <_printf_i+0xec>
 8004f88:	681e      	ldr	r6, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <_printf_i+0xf2>
 8004f8c:	0646      	lsls	r6, r0, #25
 8004f8e:	d5fb      	bpl.n	8004f88 <_printf_i+0xe8>
 8004f90:	881e      	ldrh	r6, [r3, #0]
 8004f92:	4854      	ldr	r0, [pc, #336]	; (80050e4 <_printf_i+0x244>)
 8004f94:	2f6f      	cmp	r7, #111	; 0x6f
 8004f96:	bf0c      	ite	eq
 8004f98:	2308      	moveq	r3, #8
 8004f9a:	230a      	movne	r3, #10
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fa2:	6865      	ldr	r5, [r4, #4]
 8004fa4:	60a5      	str	r5, [r4, #8]
 8004fa6:	2d00      	cmp	r5, #0
 8004fa8:	bfa2      	ittt	ge
 8004faa:	6821      	ldrge	r1, [r4, #0]
 8004fac:	f021 0104 	bicge.w	r1, r1, #4
 8004fb0:	6021      	strge	r1, [r4, #0]
 8004fb2:	b90e      	cbnz	r6, 8004fb8 <_printf_i+0x118>
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	d04d      	beq.n	8005054 <_printf_i+0x1b4>
 8004fb8:	4615      	mov	r5, r2
 8004fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8004fc2:	5dc7      	ldrb	r7, [r0, r7]
 8004fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004fc8:	4637      	mov	r7, r6
 8004fca:	42bb      	cmp	r3, r7
 8004fcc:	460e      	mov	r6, r1
 8004fce:	d9f4      	bls.n	8004fba <_printf_i+0x11a>
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d10b      	bne.n	8004fec <_printf_i+0x14c>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07de      	lsls	r6, r3, #31
 8004fd8:	d508      	bpl.n	8004fec <_printf_i+0x14c>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	6861      	ldr	r1, [r4, #4]
 8004fde:	4299      	cmp	r1, r3
 8004fe0:	bfde      	ittt	le
 8004fe2:	2330      	movle	r3, #48	; 0x30
 8004fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004fe8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004fec:	1b52      	subs	r2, r2, r5
 8004fee:	6122      	str	r2, [r4, #16]
 8004ff0:	f8cd a000 	str.w	sl, [sp]
 8004ff4:	464b      	mov	r3, r9
 8004ff6:	aa03      	add	r2, sp, #12
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7ff fee2 	bl	8004dc4 <_printf_common>
 8005000:	3001      	adds	r0, #1
 8005002:	d14c      	bne.n	800509e <_printf_i+0x1fe>
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	b004      	add	sp, #16
 800500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800500e:	4835      	ldr	r0, [pc, #212]	; (80050e4 <_printf_i+0x244>)
 8005010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005014:	6829      	ldr	r1, [r5, #0]
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	f851 6b04 	ldr.w	r6, [r1], #4
 800501c:	6029      	str	r1, [r5, #0]
 800501e:	061d      	lsls	r5, r3, #24
 8005020:	d514      	bpl.n	800504c <_printf_i+0x1ac>
 8005022:	07df      	lsls	r7, r3, #31
 8005024:	bf44      	itt	mi
 8005026:	f043 0320 	orrmi.w	r3, r3, #32
 800502a:	6023      	strmi	r3, [r4, #0]
 800502c:	b91e      	cbnz	r6, 8005036 <_printf_i+0x196>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	f023 0320 	bic.w	r3, r3, #32
 8005034:	6023      	str	r3, [r4, #0]
 8005036:	2310      	movs	r3, #16
 8005038:	e7b0      	b.n	8004f9c <_printf_i+0xfc>
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	f043 0320 	orr.w	r3, r3, #32
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	2378      	movs	r3, #120	; 0x78
 8005044:	4828      	ldr	r0, [pc, #160]	; (80050e8 <_printf_i+0x248>)
 8005046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800504a:	e7e3      	b.n	8005014 <_printf_i+0x174>
 800504c:	0659      	lsls	r1, r3, #25
 800504e:	bf48      	it	mi
 8005050:	b2b6      	uxthmi	r6, r6
 8005052:	e7e6      	b.n	8005022 <_printf_i+0x182>
 8005054:	4615      	mov	r5, r2
 8005056:	e7bb      	b.n	8004fd0 <_printf_i+0x130>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	6826      	ldr	r6, [r4, #0]
 800505c:	6961      	ldr	r1, [r4, #20]
 800505e:	1d18      	adds	r0, r3, #4
 8005060:	6028      	str	r0, [r5, #0]
 8005062:	0635      	lsls	r5, r6, #24
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	d501      	bpl.n	800506c <_printf_i+0x1cc>
 8005068:	6019      	str	r1, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0x1d2>
 800506c:	0670      	lsls	r0, r6, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0x1c8>
 8005070:	8019      	strh	r1, [r3, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	6123      	str	r3, [r4, #16]
 8005076:	4615      	mov	r5, r2
 8005078:	e7ba      	b.n	8004ff0 <_printf_i+0x150>
 800507a:	682b      	ldr	r3, [r5, #0]
 800507c:	1d1a      	adds	r2, r3, #4
 800507e:	602a      	str	r2, [r5, #0]
 8005080:	681d      	ldr	r5, [r3, #0]
 8005082:	6862      	ldr	r2, [r4, #4]
 8005084:	2100      	movs	r1, #0
 8005086:	4628      	mov	r0, r5
 8005088:	f7fb f8b2 	bl	80001f0 <memchr>
 800508c:	b108      	cbz	r0, 8005092 <_printf_i+0x1f2>
 800508e:	1b40      	subs	r0, r0, r5
 8005090:	6060      	str	r0, [r4, #4]
 8005092:	6863      	ldr	r3, [r4, #4]
 8005094:	6123      	str	r3, [r4, #16]
 8005096:	2300      	movs	r3, #0
 8005098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800509c:	e7a8      	b.n	8004ff0 <_printf_i+0x150>
 800509e:	6923      	ldr	r3, [r4, #16]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4649      	mov	r1, r9
 80050a4:	4640      	mov	r0, r8
 80050a6:	47d0      	blx	sl
 80050a8:	3001      	adds	r0, #1
 80050aa:	d0ab      	beq.n	8005004 <_printf_i+0x164>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	079b      	lsls	r3, r3, #30
 80050b0:	d413      	bmi.n	80050da <_printf_i+0x23a>
 80050b2:	68e0      	ldr	r0, [r4, #12]
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	4298      	cmp	r0, r3
 80050b8:	bfb8      	it	lt
 80050ba:	4618      	movlt	r0, r3
 80050bc:	e7a4      	b.n	8005008 <_printf_i+0x168>
 80050be:	2301      	movs	r3, #1
 80050c0:	4632      	mov	r2, r6
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	47d0      	blx	sl
 80050c8:	3001      	adds	r0, #1
 80050ca:	d09b      	beq.n	8005004 <_printf_i+0x164>
 80050cc:	3501      	adds	r5, #1
 80050ce:	68e3      	ldr	r3, [r4, #12]
 80050d0:	9903      	ldr	r1, [sp, #12]
 80050d2:	1a5b      	subs	r3, r3, r1
 80050d4:	42ab      	cmp	r3, r5
 80050d6:	dcf2      	bgt.n	80050be <_printf_i+0x21e>
 80050d8:	e7eb      	b.n	80050b2 <_printf_i+0x212>
 80050da:	2500      	movs	r5, #0
 80050dc:	f104 0619 	add.w	r6, r4, #25
 80050e0:	e7f5      	b.n	80050ce <_printf_i+0x22e>
 80050e2:	bf00      	nop
 80050e4:	08009246 	.word	0x08009246
 80050e8:	08009257 	.word	0x08009257

080050ec <siprintf>:
 80050ec:	b40e      	push	{r1, r2, r3}
 80050ee:	b500      	push	{lr}
 80050f0:	b09c      	sub	sp, #112	; 0x70
 80050f2:	ab1d      	add	r3, sp, #116	; 0x74
 80050f4:	9002      	str	r0, [sp, #8]
 80050f6:	9006      	str	r0, [sp, #24]
 80050f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050fc:	4809      	ldr	r0, [pc, #36]	; (8005124 <siprintf+0x38>)
 80050fe:	9107      	str	r1, [sp, #28]
 8005100:	9104      	str	r1, [sp, #16]
 8005102:	4909      	ldr	r1, [pc, #36]	; (8005128 <siprintf+0x3c>)
 8005104:	f853 2b04 	ldr.w	r2, [r3], #4
 8005108:	9105      	str	r1, [sp, #20]
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	a902      	add	r1, sp, #8
 8005110:	f001 fb78 	bl	8006804 <_svfiprintf_r>
 8005114:	9b02      	ldr	r3, [sp, #8]
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
 800511a:	b01c      	add	sp, #112	; 0x70
 800511c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005120:	b003      	add	sp, #12
 8005122:	4770      	bx	lr
 8005124:	20000030 	.word	0x20000030
 8005128:	ffff0208 	.word	0xffff0208

0800512c <quorem>:
 800512c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	6903      	ldr	r3, [r0, #16]
 8005132:	690c      	ldr	r4, [r1, #16]
 8005134:	42a3      	cmp	r3, r4
 8005136:	4607      	mov	r7, r0
 8005138:	f2c0 8081 	blt.w	800523e <quorem+0x112>
 800513c:	3c01      	subs	r4, #1
 800513e:	f101 0814 	add.w	r8, r1, #20
 8005142:	f100 0514 	add.w	r5, r0, #20
 8005146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005154:	3301      	adds	r3, #1
 8005156:	429a      	cmp	r2, r3
 8005158:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800515c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005160:	fbb2 f6f3 	udiv	r6, r2, r3
 8005164:	d331      	bcc.n	80051ca <quorem+0x9e>
 8005166:	f04f 0e00 	mov.w	lr, #0
 800516a:	4640      	mov	r0, r8
 800516c:	46ac      	mov	ip, r5
 800516e:	46f2      	mov	sl, lr
 8005170:	f850 2b04 	ldr.w	r2, [r0], #4
 8005174:	b293      	uxth	r3, r2
 8005176:	fb06 e303 	mla	r3, r6, r3, lr
 800517a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800517e:	b29b      	uxth	r3, r3
 8005180:	ebaa 0303 	sub.w	r3, sl, r3
 8005184:	f8dc a000 	ldr.w	sl, [ip]
 8005188:	0c12      	lsrs	r2, r2, #16
 800518a:	fa13 f38a 	uxtah	r3, r3, sl
 800518e:	fb06 e202 	mla	r2, r6, r2, lr
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	9b00      	ldr	r3, [sp, #0]
 8005196:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800519a:	b292      	uxth	r2, r2
 800519c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80051a8:	4581      	cmp	r9, r0
 80051aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051ae:	f84c 3b04 	str.w	r3, [ip], #4
 80051b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051b6:	d2db      	bcs.n	8005170 <quorem+0x44>
 80051b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80051bc:	b92b      	cbnz	r3, 80051ca <quorem+0x9e>
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	3b04      	subs	r3, #4
 80051c2:	429d      	cmp	r5, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	d32e      	bcc.n	8005226 <quorem+0xfa>
 80051c8:	613c      	str	r4, [r7, #16]
 80051ca:	4638      	mov	r0, r7
 80051cc:	f001 f8c6 	bl	800635c <__mcmp>
 80051d0:	2800      	cmp	r0, #0
 80051d2:	db24      	blt.n	800521e <quorem+0xf2>
 80051d4:	3601      	adds	r6, #1
 80051d6:	4628      	mov	r0, r5
 80051d8:	f04f 0c00 	mov.w	ip, #0
 80051dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80051e0:	f8d0 e000 	ldr.w	lr, [r0]
 80051e4:	b293      	uxth	r3, r2
 80051e6:	ebac 0303 	sub.w	r3, ip, r3
 80051ea:	0c12      	lsrs	r2, r2, #16
 80051ec:	fa13 f38e 	uxtah	r3, r3, lr
 80051f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051fe:	45c1      	cmp	r9, r8
 8005200:	f840 3b04 	str.w	r3, [r0], #4
 8005204:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005208:	d2e8      	bcs.n	80051dc <quorem+0xb0>
 800520a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800520e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005212:	b922      	cbnz	r2, 800521e <quorem+0xf2>
 8005214:	3b04      	subs	r3, #4
 8005216:	429d      	cmp	r5, r3
 8005218:	461a      	mov	r2, r3
 800521a:	d30a      	bcc.n	8005232 <quorem+0x106>
 800521c:	613c      	str	r4, [r7, #16]
 800521e:	4630      	mov	r0, r6
 8005220:	b003      	add	sp, #12
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	3b04      	subs	r3, #4
 800522a:	2a00      	cmp	r2, #0
 800522c:	d1cc      	bne.n	80051c8 <quorem+0x9c>
 800522e:	3c01      	subs	r4, #1
 8005230:	e7c7      	b.n	80051c2 <quorem+0x96>
 8005232:	6812      	ldr	r2, [r2, #0]
 8005234:	3b04      	subs	r3, #4
 8005236:	2a00      	cmp	r2, #0
 8005238:	d1f0      	bne.n	800521c <quorem+0xf0>
 800523a:	3c01      	subs	r4, #1
 800523c:	e7eb      	b.n	8005216 <quorem+0xea>
 800523e:	2000      	movs	r0, #0
 8005240:	e7ee      	b.n	8005220 <quorem+0xf4>
 8005242:	0000      	movs	r0, r0
 8005244:	0000      	movs	r0, r0
	...

08005248 <_dtoa_r>:
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524c:	ed2d 8b04 	vpush	{d8-d9}
 8005250:	ec57 6b10 	vmov	r6, r7, d0
 8005254:	b093      	sub	sp, #76	; 0x4c
 8005256:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005258:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800525c:	9106      	str	r1, [sp, #24]
 800525e:	ee10 aa10 	vmov	sl, s0
 8005262:	4604      	mov	r4, r0
 8005264:	9209      	str	r2, [sp, #36]	; 0x24
 8005266:	930c      	str	r3, [sp, #48]	; 0x30
 8005268:	46bb      	mov	fp, r7
 800526a:	b975      	cbnz	r5, 800528a <_dtoa_r+0x42>
 800526c:	2010      	movs	r0, #16
 800526e:	f000 fddd 	bl	8005e2c <malloc>
 8005272:	4602      	mov	r2, r0
 8005274:	6260      	str	r0, [r4, #36]	; 0x24
 8005276:	b920      	cbnz	r0, 8005282 <_dtoa_r+0x3a>
 8005278:	4ba7      	ldr	r3, [pc, #668]	; (8005518 <_dtoa_r+0x2d0>)
 800527a:	21ea      	movs	r1, #234	; 0xea
 800527c:	48a7      	ldr	r0, [pc, #668]	; (800551c <_dtoa_r+0x2d4>)
 800527e:	f001 fbd1 	bl	8006a24 <__assert_func>
 8005282:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005286:	6005      	str	r5, [r0, #0]
 8005288:	60c5      	str	r5, [r0, #12]
 800528a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	b151      	cbz	r1, 80052a6 <_dtoa_r+0x5e>
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	604a      	str	r2, [r1, #4]
 8005294:	2301      	movs	r3, #1
 8005296:	4093      	lsls	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
 800529a:	4620      	mov	r0, r4
 800529c:	f000 fe1c 	bl	8005ed8 <_Bfree>
 80052a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	1e3b      	subs	r3, r7, #0
 80052a8:	bfaa      	itet	ge
 80052aa:	2300      	movge	r3, #0
 80052ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80052b0:	f8c8 3000 	strge.w	r3, [r8]
 80052b4:	4b9a      	ldr	r3, [pc, #616]	; (8005520 <_dtoa_r+0x2d8>)
 80052b6:	bfbc      	itt	lt
 80052b8:	2201      	movlt	r2, #1
 80052ba:	f8c8 2000 	strlt.w	r2, [r8]
 80052be:	ea33 030b 	bics.w	r3, r3, fp
 80052c2:	d11b      	bne.n	80052fc <_dtoa_r+0xb4>
 80052c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052d0:	4333      	orrs	r3, r6
 80052d2:	f000 8592 	beq.w	8005dfa <_dtoa_r+0xbb2>
 80052d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052d8:	b963      	cbnz	r3, 80052f4 <_dtoa_r+0xac>
 80052da:	4b92      	ldr	r3, [pc, #584]	; (8005524 <_dtoa_r+0x2dc>)
 80052dc:	e022      	b.n	8005324 <_dtoa_r+0xdc>
 80052de:	4b92      	ldr	r3, [pc, #584]	; (8005528 <_dtoa_r+0x2e0>)
 80052e0:	9301      	str	r3, [sp, #4]
 80052e2:	3308      	adds	r3, #8
 80052e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80052e6:	6013      	str	r3, [r2, #0]
 80052e8:	9801      	ldr	r0, [sp, #4]
 80052ea:	b013      	add	sp, #76	; 0x4c
 80052ec:	ecbd 8b04 	vpop	{d8-d9}
 80052f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052f4:	4b8b      	ldr	r3, [pc, #556]	; (8005524 <_dtoa_r+0x2dc>)
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	3303      	adds	r3, #3
 80052fa:	e7f3      	b.n	80052e4 <_dtoa_r+0x9c>
 80052fc:	2200      	movs	r2, #0
 80052fe:	2300      	movs	r3, #0
 8005300:	4650      	mov	r0, sl
 8005302:	4659      	mov	r1, fp
 8005304:	f7fb fbe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005308:	ec4b ab19 	vmov	d9, sl, fp
 800530c:	4680      	mov	r8, r0
 800530e:	b158      	cbz	r0, 8005328 <_dtoa_r+0xe0>
 8005310:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005312:	2301      	movs	r3, #1
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 856b 	beq.w	8005df4 <_dtoa_r+0xbac>
 800531e:	4883      	ldr	r0, [pc, #524]	; (800552c <_dtoa_r+0x2e4>)
 8005320:	6018      	str	r0, [r3, #0]
 8005322:	1e43      	subs	r3, r0, #1
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	e7df      	b.n	80052e8 <_dtoa_r+0xa0>
 8005328:	ec4b ab10 	vmov	d0, sl, fp
 800532c:	aa10      	add	r2, sp, #64	; 0x40
 800532e:	a911      	add	r1, sp, #68	; 0x44
 8005330:	4620      	mov	r0, r4
 8005332:	f001 f8b9 	bl	80064a8 <__d2b>
 8005336:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800533a:	ee08 0a10 	vmov	s16, r0
 800533e:	2d00      	cmp	r5, #0
 8005340:	f000 8084 	beq.w	800544c <_dtoa_r+0x204>
 8005344:	ee19 3a90 	vmov	r3, s19
 8005348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800534c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005350:	4656      	mov	r6, sl
 8005352:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800535a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800535e:	4b74      	ldr	r3, [pc, #464]	; (8005530 <_dtoa_r+0x2e8>)
 8005360:	2200      	movs	r2, #0
 8005362:	4630      	mov	r0, r6
 8005364:	4639      	mov	r1, r7
 8005366:	f7fa ff97 	bl	8000298 <__aeabi_dsub>
 800536a:	a365      	add	r3, pc, #404	; (adr r3, 8005500 <_dtoa_r+0x2b8>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f94a 	bl	8000608 <__aeabi_dmul>
 8005374:	a364      	add	r3, pc, #400	; (adr r3, 8005508 <_dtoa_r+0x2c0>)
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	f7fa ff8f 	bl	800029c <__adddf3>
 800537e:	4606      	mov	r6, r0
 8005380:	4628      	mov	r0, r5
 8005382:	460f      	mov	r7, r1
 8005384:	f7fb f8d6 	bl	8000534 <__aeabi_i2d>
 8005388:	a361      	add	r3, pc, #388	; (adr r3, 8005510 <_dtoa_r+0x2c8>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb f93b 	bl	8000608 <__aeabi_dmul>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4630      	mov	r0, r6
 8005398:	4639      	mov	r1, r7
 800539a:	f7fa ff7f 	bl	800029c <__adddf3>
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	f7fb fbe1 	bl	8000b68 <__aeabi_d2iz>
 80053a6:	2200      	movs	r2, #0
 80053a8:	9000      	str	r0, [sp, #0]
 80053aa:	2300      	movs	r3, #0
 80053ac:	4630      	mov	r0, r6
 80053ae:	4639      	mov	r1, r7
 80053b0:	f7fb fb9c 	bl	8000aec <__aeabi_dcmplt>
 80053b4:	b150      	cbz	r0, 80053cc <_dtoa_r+0x184>
 80053b6:	9800      	ldr	r0, [sp, #0]
 80053b8:	f7fb f8bc 	bl	8000534 <__aeabi_i2d>
 80053bc:	4632      	mov	r2, r6
 80053be:	463b      	mov	r3, r7
 80053c0:	f7fb fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80053c4:	b910      	cbnz	r0, 80053cc <_dtoa_r+0x184>
 80053c6:	9b00      	ldr	r3, [sp, #0]
 80053c8:	3b01      	subs	r3, #1
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	9b00      	ldr	r3, [sp, #0]
 80053ce:	2b16      	cmp	r3, #22
 80053d0:	d85a      	bhi.n	8005488 <_dtoa_r+0x240>
 80053d2:	9a00      	ldr	r2, [sp, #0]
 80053d4:	4b57      	ldr	r3, [pc, #348]	; (8005534 <_dtoa_r+0x2ec>)
 80053d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	ec51 0b19 	vmov	r0, r1, d9
 80053e2:	f7fb fb83 	bl	8000aec <__aeabi_dcmplt>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d050      	beq.n	800548c <_dtoa_r+0x244>
 80053ea:	9b00      	ldr	r3, [sp, #0]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	2300      	movs	r3, #0
 80053f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80053f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053f6:	1b5d      	subs	r5, r3, r5
 80053f8:	1e6b      	subs	r3, r5, #1
 80053fa:	9305      	str	r3, [sp, #20]
 80053fc:	bf45      	ittet	mi
 80053fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005402:	9304      	strmi	r3, [sp, #16]
 8005404:	2300      	movpl	r3, #0
 8005406:	2300      	movmi	r3, #0
 8005408:	bf4c      	ite	mi
 800540a:	9305      	strmi	r3, [sp, #20]
 800540c:	9304      	strpl	r3, [sp, #16]
 800540e:	9b00      	ldr	r3, [sp, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	db3d      	blt.n	8005490 <_dtoa_r+0x248>
 8005414:	9b05      	ldr	r3, [sp, #20]
 8005416:	9a00      	ldr	r2, [sp, #0]
 8005418:	920a      	str	r2, [sp, #40]	; 0x28
 800541a:	4413      	add	r3, r2
 800541c:	9305      	str	r3, [sp, #20]
 800541e:	2300      	movs	r3, #0
 8005420:	9307      	str	r3, [sp, #28]
 8005422:	9b06      	ldr	r3, [sp, #24]
 8005424:	2b09      	cmp	r3, #9
 8005426:	f200 8089 	bhi.w	800553c <_dtoa_r+0x2f4>
 800542a:	2b05      	cmp	r3, #5
 800542c:	bfc4      	itt	gt
 800542e:	3b04      	subgt	r3, #4
 8005430:	9306      	strgt	r3, [sp, #24]
 8005432:	9b06      	ldr	r3, [sp, #24]
 8005434:	f1a3 0302 	sub.w	r3, r3, #2
 8005438:	bfcc      	ite	gt
 800543a:	2500      	movgt	r5, #0
 800543c:	2501      	movle	r5, #1
 800543e:	2b03      	cmp	r3, #3
 8005440:	f200 8087 	bhi.w	8005552 <_dtoa_r+0x30a>
 8005444:	e8df f003 	tbb	[pc, r3]
 8005448:	59383a2d 	.word	0x59383a2d
 800544c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005450:	441d      	add	r5, r3
 8005452:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005456:	2b20      	cmp	r3, #32
 8005458:	bfc1      	itttt	gt
 800545a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800545e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005462:	fa0b f303 	lslgt.w	r3, fp, r3
 8005466:	fa26 f000 	lsrgt.w	r0, r6, r0
 800546a:	bfda      	itte	le
 800546c:	f1c3 0320 	rsble	r3, r3, #32
 8005470:	fa06 f003 	lslle.w	r0, r6, r3
 8005474:	4318      	orrgt	r0, r3
 8005476:	f7fb f84d 	bl	8000514 <__aeabi_ui2d>
 800547a:	2301      	movs	r3, #1
 800547c:	4606      	mov	r6, r0
 800547e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005482:	3d01      	subs	r5, #1
 8005484:	930e      	str	r3, [sp, #56]	; 0x38
 8005486:	e76a      	b.n	800535e <_dtoa_r+0x116>
 8005488:	2301      	movs	r3, #1
 800548a:	e7b2      	b.n	80053f2 <_dtoa_r+0x1aa>
 800548c:	900b      	str	r0, [sp, #44]	; 0x2c
 800548e:	e7b1      	b.n	80053f4 <_dtoa_r+0x1ac>
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	9a00      	ldr	r2, [sp, #0]
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	4253      	negs	r3, r2
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	2300      	movs	r3, #0
 800549e:	930a      	str	r3, [sp, #40]	; 0x28
 80054a0:	e7bf      	b.n	8005422 <_dtoa_r+0x1da>
 80054a2:	2300      	movs	r3, #0
 80054a4:	9308      	str	r3, [sp, #32]
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	dc55      	bgt.n	8005558 <_dtoa_r+0x310>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80054b2:	461a      	mov	r2, r3
 80054b4:	9209      	str	r2, [sp, #36]	; 0x24
 80054b6:	e00c      	b.n	80054d2 <_dtoa_r+0x28a>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e7f3      	b.n	80054a4 <_dtoa_r+0x25c>
 80054bc:	2300      	movs	r3, #0
 80054be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c0:	9308      	str	r3, [sp, #32]
 80054c2:	9b00      	ldr	r3, [sp, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	9302      	str	r3, [sp, #8]
 80054c8:	3301      	adds	r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	9303      	str	r3, [sp, #12]
 80054ce:	bfb8      	it	lt
 80054d0:	2301      	movlt	r3, #1
 80054d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80054d4:	2200      	movs	r2, #0
 80054d6:	6042      	str	r2, [r0, #4]
 80054d8:	2204      	movs	r2, #4
 80054da:	f102 0614 	add.w	r6, r2, #20
 80054de:	429e      	cmp	r6, r3
 80054e0:	6841      	ldr	r1, [r0, #4]
 80054e2:	d93d      	bls.n	8005560 <_dtoa_r+0x318>
 80054e4:	4620      	mov	r0, r4
 80054e6:	f000 fcb7 	bl	8005e58 <_Balloc>
 80054ea:	9001      	str	r0, [sp, #4]
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d13b      	bne.n	8005568 <_dtoa_r+0x320>
 80054f0:	4b11      	ldr	r3, [pc, #68]	; (8005538 <_dtoa_r+0x2f0>)
 80054f2:	4602      	mov	r2, r0
 80054f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80054f8:	e6c0      	b.n	800527c <_dtoa_r+0x34>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7df      	b.n	80054be <_dtoa_r+0x276>
 80054fe:	bf00      	nop
 8005500:	636f4361 	.word	0x636f4361
 8005504:	3fd287a7 	.word	0x3fd287a7
 8005508:	8b60c8b3 	.word	0x8b60c8b3
 800550c:	3fc68a28 	.word	0x3fc68a28
 8005510:	509f79fb 	.word	0x509f79fb
 8005514:	3fd34413 	.word	0x3fd34413
 8005518:	08009275 	.word	0x08009275
 800551c:	0800928c 	.word	0x0800928c
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	08009271 	.word	0x08009271
 8005528:	08009268 	.word	0x08009268
 800552c:	08009245 	.word	0x08009245
 8005530:	3ff80000 	.word	0x3ff80000
 8005534:	08009380 	.word	0x08009380
 8005538:	080092e7 	.word	0x080092e7
 800553c:	2501      	movs	r5, #1
 800553e:	2300      	movs	r3, #0
 8005540:	9306      	str	r3, [sp, #24]
 8005542:	9508      	str	r5, [sp, #32]
 8005544:	f04f 33ff 	mov.w	r3, #4294967295
 8005548:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	2312      	movs	r3, #18
 8005550:	e7b0      	b.n	80054b4 <_dtoa_r+0x26c>
 8005552:	2301      	movs	r3, #1
 8005554:	9308      	str	r3, [sp, #32]
 8005556:	e7f5      	b.n	8005544 <_dtoa_r+0x2fc>
 8005558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800555e:	e7b8      	b.n	80054d2 <_dtoa_r+0x28a>
 8005560:	3101      	adds	r1, #1
 8005562:	6041      	str	r1, [r0, #4]
 8005564:	0052      	lsls	r2, r2, #1
 8005566:	e7b8      	b.n	80054da <_dtoa_r+0x292>
 8005568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556a:	9a01      	ldr	r2, [sp, #4]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	9b03      	ldr	r3, [sp, #12]
 8005570:	2b0e      	cmp	r3, #14
 8005572:	f200 809d 	bhi.w	80056b0 <_dtoa_r+0x468>
 8005576:	2d00      	cmp	r5, #0
 8005578:	f000 809a 	beq.w	80056b0 <_dtoa_r+0x468>
 800557c:	9b00      	ldr	r3, [sp, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dd32      	ble.n	80055e8 <_dtoa_r+0x3a0>
 8005582:	4ab7      	ldr	r2, [pc, #732]	; (8005860 <_dtoa_r+0x618>)
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800558c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005590:	9b00      	ldr	r3, [sp, #0]
 8005592:	05d8      	lsls	r0, r3, #23
 8005594:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005598:	d516      	bpl.n	80055c8 <_dtoa_r+0x380>
 800559a:	4bb2      	ldr	r3, [pc, #712]	; (8005864 <_dtoa_r+0x61c>)
 800559c:	ec51 0b19 	vmov	r0, r1, d9
 80055a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80055a4:	f7fb f95a 	bl	800085c <__aeabi_ddiv>
 80055a8:	f007 070f 	and.w	r7, r7, #15
 80055ac:	4682      	mov	sl, r0
 80055ae:	468b      	mov	fp, r1
 80055b0:	2503      	movs	r5, #3
 80055b2:	4eac      	ldr	r6, [pc, #688]	; (8005864 <_dtoa_r+0x61c>)
 80055b4:	b957      	cbnz	r7, 80055cc <_dtoa_r+0x384>
 80055b6:	4642      	mov	r2, r8
 80055b8:	464b      	mov	r3, r9
 80055ba:	4650      	mov	r0, sl
 80055bc:	4659      	mov	r1, fp
 80055be:	f7fb f94d 	bl	800085c <__aeabi_ddiv>
 80055c2:	4682      	mov	sl, r0
 80055c4:	468b      	mov	fp, r1
 80055c6:	e028      	b.n	800561a <_dtoa_r+0x3d2>
 80055c8:	2502      	movs	r5, #2
 80055ca:	e7f2      	b.n	80055b2 <_dtoa_r+0x36a>
 80055cc:	07f9      	lsls	r1, r7, #31
 80055ce:	d508      	bpl.n	80055e2 <_dtoa_r+0x39a>
 80055d0:	4640      	mov	r0, r8
 80055d2:	4649      	mov	r1, r9
 80055d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055d8:	f7fb f816 	bl	8000608 <__aeabi_dmul>
 80055dc:	3501      	adds	r5, #1
 80055de:	4680      	mov	r8, r0
 80055e0:	4689      	mov	r9, r1
 80055e2:	107f      	asrs	r7, r7, #1
 80055e4:	3608      	adds	r6, #8
 80055e6:	e7e5      	b.n	80055b4 <_dtoa_r+0x36c>
 80055e8:	f000 809b 	beq.w	8005722 <_dtoa_r+0x4da>
 80055ec:	9b00      	ldr	r3, [sp, #0]
 80055ee:	4f9d      	ldr	r7, [pc, #628]	; (8005864 <_dtoa_r+0x61c>)
 80055f0:	425e      	negs	r6, r3
 80055f2:	4b9b      	ldr	r3, [pc, #620]	; (8005860 <_dtoa_r+0x618>)
 80055f4:	f006 020f 	and.w	r2, r6, #15
 80055f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005600:	ec51 0b19 	vmov	r0, r1, d9
 8005604:	f7fb f800 	bl	8000608 <__aeabi_dmul>
 8005608:	1136      	asrs	r6, r6, #4
 800560a:	4682      	mov	sl, r0
 800560c:	468b      	mov	fp, r1
 800560e:	2300      	movs	r3, #0
 8005610:	2502      	movs	r5, #2
 8005612:	2e00      	cmp	r6, #0
 8005614:	d17a      	bne.n	800570c <_dtoa_r+0x4c4>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1d3      	bne.n	80055c2 <_dtoa_r+0x37a>
 800561a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8082 	beq.w	8005726 <_dtoa_r+0x4de>
 8005622:	4b91      	ldr	r3, [pc, #580]	; (8005868 <_dtoa_r+0x620>)
 8005624:	2200      	movs	r2, #0
 8005626:	4650      	mov	r0, sl
 8005628:	4659      	mov	r1, fp
 800562a:	f7fb fa5f 	bl	8000aec <__aeabi_dcmplt>
 800562e:	2800      	cmp	r0, #0
 8005630:	d079      	beq.n	8005726 <_dtoa_r+0x4de>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d076      	beq.n	8005726 <_dtoa_r+0x4de>
 8005638:	9b02      	ldr	r3, [sp, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	dd36      	ble.n	80056ac <_dtoa_r+0x464>
 800563e:	9b00      	ldr	r3, [sp, #0]
 8005640:	4650      	mov	r0, sl
 8005642:	4659      	mov	r1, fp
 8005644:	1e5f      	subs	r7, r3, #1
 8005646:	2200      	movs	r2, #0
 8005648:	4b88      	ldr	r3, [pc, #544]	; (800586c <_dtoa_r+0x624>)
 800564a:	f7fa ffdd 	bl	8000608 <__aeabi_dmul>
 800564e:	9e02      	ldr	r6, [sp, #8]
 8005650:	4682      	mov	sl, r0
 8005652:	468b      	mov	fp, r1
 8005654:	3501      	adds	r5, #1
 8005656:	4628      	mov	r0, r5
 8005658:	f7fa ff6c 	bl	8000534 <__aeabi_i2d>
 800565c:	4652      	mov	r2, sl
 800565e:	465b      	mov	r3, fp
 8005660:	f7fa ffd2 	bl	8000608 <__aeabi_dmul>
 8005664:	4b82      	ldr	r3, [pc, #520]	; (8005870 <_dtoa_r+0x628>)
 8005666:	2200      	movs	r2, #0
 8005668:	f7fa fe18 	bl	800029c <__adddf3>
 800566c:	46d0      	mov	r8, sl
 800566e:	46d9      	mov	r9, fp
 8005670:	4682      	mov	sl, r0
 8005672:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005676:	2e00      	cmp	r6, #0
 8005678:	d158      	bne.n	800572c <_dtoa_r+0x4e4>
 800567a:	4b7e      	ldr	r3, [pc, #504]	; (8005874 <_dtoa_r+0x62c>)
 800567c:	2200      	movs	r2, #0
 800567e:	4640      	mov	r0, r8
 8005680:	4649      	mov	r1, r9
 8005682:	f7fa fe09 	bl	8000298 <__aeabi_dsub>
 8005686:	4652      	mov	r2, sl
 8005688:	465b      	mov	r3, fp
 800568a:	4680      	mov	r8, r0
 800568c:	4689      	mov	r9, r1
 800568e:	f7fb fa4b 	bl	8000b28 <__aeabi_dcmpgt>
 8005692:	2800      	cmp	r0, #0
 8005694:	f040 8295 	bne.w	8005bc2 <_dtoa_r+0x97a>
 8005698:	4652      	mov	r2, sl
 800569a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fb fa23 	bl	8000aec <__aeabi_dcmplt>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f040 8289 	bne.w	8005bbe <_dtoa_r+0x976>
 80056ac:	ec5b ab19 	vmov	sl, fp, d9
 80056b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f2c0 8148 	blt.w	8005948 <_dtoa_r+0x700>
 80056b8:	9a00      	ldr	r2, [sp, #0]
 80056ba:	2a0e      	cmp	r2, #14
 80056bc:	f300 8144 	bgt.w	8005948 <_dtoa_r+0x700>
 80056c0:	4b67      	ldr	r3, [pc, #412]	; (8005860 <_dtoa_r+0x618>)
 80056c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f280 80d5 	bge.w	800587c <_dtoa_r+0x634>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f300 80d1 	bgt.w	800587c <_dtoa_r+0x634>
 80056da:	f040 826f 	bne.w	8005bbc <_dtoa_r+0x974>
 80056de:	4b65      	ldr	r3, [pc, #404]	; (8005874 <_dtoa_r+0x62c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	4640      	mov	r0, r8
 80056e4:	4649      	mov	r1, r9
 80056e6:	f7fa ff8f 	bl	8000608 <__aeabi_dmul>
 80056ea:	4652      	mov	r2, sl
 80056ec:	465b      	mov	r3, fp
 80056ee:	f7fb fa11 	bl	8000b14 <__aeabi_dcmpge>
 80056f2:	9e03      	ldr	r6, [sp, #12]
 80056f4:	4637      	mov	r7, r6
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f040 8245 	bne.w	8005b86 <_dtoa_r+0x93e>
 80056fc:	9d01      	ldr	r5, [sp, #4]
 80056fe:	2331      	movs	r3, #49	; 0x31
 8005700:	f805 3b01 	strb.w	r3, [r5], #1
 8005704:	9b00      	ldr	r3, [sp, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	e240      	b.n	8005b8e <_dtoa_r+0x946>
 800570c:	07f2      	lsls	r2, r6, #31
 800570e:	d505      	bpl.n	800571c <_dtoa_r+0x4d4>
 8005710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005714:	f7fa ff78 	bl	8000608 <__aeabi_dmul>
 8005718:	3501      	adds	r5, #1
 800571a:	2301      	movs	r3, #1
 800571c:	1076      	asrs	r6, r6, #1
 800571e:	3708      	adds	r7, #8
 8005720:	e777      	b.n	8005612 <_dtoa_r+0x3ca>
 8005722:	2502      	movs	r5, #2
 8005724:	e779      	b.n	800561a <_dtoa_r+0x3d2>
 8005726:	9f00      	ldr	r7, [sp, #0]
 8005728:	9e03      	ldr	r6, [sp, #12]
 800572a:	e794      	b.n	8005656 <_dtoa_r+0x40e>
 800572c:	9901      	ldr	r1, [sp, #4]
 800572e:	4b4c      	ldr	r3, [pc, #304]	; (8005860 <_dtoa_r+0x618>)
 8005730:	4431      	add	r1, r6
 8005732:	910d      	str	r1, [sp, #52]	; 0x34
 8005734:	9908      	ldr	r1, [sp, #32]
 8005736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800573a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800573e:	2900      	cmp	r1, #0
 8005740:	d043      	beq.n	80057ca <_dtoa_r+0x582>
 8005742:	494d      	ldr	r1, [pc, #308]	; (8005878 <_dtoa_r+0x630>)
 8005744:	2000      	movs	r0, #0
 8005746:	f7fb f889 	bl	800085c <__aeabi_ddiv>
 800574a:	4652      	mov	r2, sl
 800574c:	465b      	mov	r3, fp
 800574e:	f7fa fda3 	bl	8000298 <__aeabi_dsub>
 8005752:	9d01      	ldr	r5, [sp, #4]
 8005754:	4682      	mov	sl, r0
 8005756:	468b      	mov	fp, r1
 8005758:	4649      	mov	r1, r9
 800575a:	4640      	mov	r0, r8
 800575c:	f7fb fa04 	bl	8000b68 <__aeabi_d2iz>
 8005760:	4606      	mov	r6, r0
 8005762:	f7fa fee7 	bl	8000534 <__aeabi_i2d>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4640      	mov	r0, r8
 800576c:	4649      	mov	r1, r9
 800576e:	f7fa fd93 	bl	8000298 <__aeabi_dsub>
 8005772:	3630      	adds	r6, #48	; 0x30
 8005774:	f805 6b01 	strb.w	r6, [r5], #1
 8005778:	4652      	mov	r2, sl
 800577a:	465b      	mov	r3, fp
 800577c:	4680      	mov	r8, r0
 800577e:	4689      	mov	r9, r1
 8005780:	f7fb f9b4 	bl	8000aec <__aeabi_dcmplt>
 8005784:	2800      	cmp	r0, #0
 8005786:	d163      	bne.n	8005850 <_dtoa_r+0x608>
 8005788:	4642      	mov	r2, r8
 800578a:	464b      	mov	r3, r9
 800578c:	4936      	ldr	r1, [pc, #216]	; (8005868 <_dtoa_r+0x620>)
 800578e:	2000      	movs	r0, #0
 8005790:	f7fa fd82 	bl	8000298 <__aeabi_dsub>
 8005794:	4652      	mov	r2, sl
 8005796:	465b      	mov	r3, fp
 8005798:	f7fb f9a8 	bl	8000aec <__aeabi_dcmplt>
 800579c:	2800      	cmp	r0, #0
 800579e:	f040 80b5 	bne.w	800590c <_dtoa_r+0x6c4>
 80057a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a4:	429d      	cmp	r5, r3
 80057a6:	d081      	beq.n	80056ac <_dtoa_r+0x464>
 80057a8:	4b30      	ldr	r3, [pc, #192]	; (800586c <_dtoa_r+0x624>)
 80057aa:	2200      	movs	r2, #0
 80057ac:	4650      	mov	r0, sl
 80057ae:	4659      	mov	r1, fp
 80057b0:	f7fa ff2a 	bl	8000608 <__aeabi_dmul>
 80057b4:	4b2d      	ldr	r3, [pc, #180]	; (800586c <_dtoa_r+0x624>)
 80057b6:	4682      	mov	sl, r0
 80057b8:	468b      	mov	fp, r1
 80057ba:	4640      	mov	r0, r8
 80057bc:	4649      	mov	r1, r9
 80057be:	2200      	movs	r2, #0
 80057c0:	f7fa ff22 	bl	8000608 <__aeabi_dmul>
 80057c4:	4680      	mov	r8, r0
 80057c6:	4689      	mov	r9, r1
 80057c8:	e7c6      	b.n	8005758 <_dtoa_r+0x510>
 80057ca:	4650      	mov	r0, sl
 80057cc:	4659      	mov	r1, fp
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057d4:	9d01      	ldr	r5, [sp, #4]
 80057d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80057d8:	4682      	mov	sl, r0
 80057da:	468b      	mov	fp, r1
 80057dc:	4649      	mov	r1, r9
 80057de:	4640      	mov	r0, r8
 80057e0:	f7fb f9c2 	bl	8000b68 <__aeabi_d2iz>
 80057e4:	4606      	mov	r6, r0
 80057e6:	f7fa fea5 	bl	8000534 <__aeabi_i2d>
 80057ea:	3630      	adds	r6, #48	; 0x30
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fa fd50 	bl	8000298 <__aeabi_dsub>
 80057f8:	f805 6b01 	strb.w	r6, [r5], #1
 80057fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057fe:	429d      	cmp	r5, r3
 8005800:	4680      	mov	r8, r0
 8005802:	4689      	mov	r9, r1
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	d124      	bne.n	8005854 <_dtoa_r+0x60c>
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <_dtoa_r+0x630>)
 800580c:	4650      	mov	r0, sl
 800580e:	4659      	mov	r1, fp
 8005810:	f7fa fd44 	bl	800029c <__adddf3>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	f7fb f984 	bl	8000b28 <__aeabi_dcmpgt>
 8005820:	2800      	cmp	r0, #0
 8005822:	d173      	bne.n	800590c <_dtoa_r+0x6c4>
 8005824:	4652      	mov	r2, sl
 8005826:	465b      	mov	r3, fp
 8005828:	4913      	ldr	r1, [pc, #76]	; (8005878 <_dtoa_r+0x630>)
 800582a:	2000      	movs	r0, #0
 800582c:	f7fa fd34 	bl	8000298 <__aeabi_dsub>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4640      	mov	r0, r8
 8005836:	4649      	mov	r1, r9
 8005838:	f7fb f958 	bl	8000aec <__aeabi_dcmplt>
 800583c:	2800      	cmp	r0, #0
 800583e:	f43f af35 	beq.w	80056ac <_dtoa_r+0x464>
 8005842:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005844:	1e6b      	subs	r3, r5, #1
 8005846:	930f      	str	r3, [sp, #60]	; 0x3c
 8005848:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d0f8      	beq.n	8005842 <_dtoa_r+0x5fa>
 8005850:	9700      	str	r7, [sp, #0]
 8005852:	e049      	b.n	80058e8 <_dtoa_r+0x6a0>
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <_dtoa_r+0x624>)
 8005856:	f7fa fed7 	bl	8000608 <__aeabi_dmul>
 800585a:	4680      	mov	r8, r0
 800585c:	4689      	mov	r9, r1
 800585e:	e7bd      	b.n	80057dc <_dtoa_r+0x594>
 8005860:	08009380 	.word	0x08009380
 8005864:	08009358 	.word	0x08009358
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	40240000 	.word	0x40240000
 8005870:	401c0000 	.word	0x401c0000
 8005874:	40140000 	.word	0x40140000
 8005878:	3fe00000 	.word	0x3fe00000
 800587c:	9d01      	ldr	r5, [sp, #4]
 800587e:	4656      	mov	r6, sl
 8005880:	465f      	mov	r7, fp
 8005882:	4642      	mov	r2, r8
 8005884:	464b      	mov	r3, r9
 8005886:	4630      	mov	r0, r6
 8005888:	4639      	mov	r1, r7
 800588a:	f7fa ffe7 	bl	800085c <__aeabi_ddiv>
 800588e:	f7fb f96b 	bl	8000b68 <__aeabi_d2iz>
 8005892:	4682      	mov	sl, r0
 8005894:	f7fa fe4e 	bl	8000534 <__aeabi_i2d>
 8005898:	4642      	mov	r2, r8
 800589a:	464b      	mov	r3, r9
 800589c:	f7fa feb4 	bl	8000608 <__aeabi_dmul>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4630      	mov	r0, r6
 80058a6:	4639      	mov	r1, r7
 80058a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80058ac:	f7fa fcf4 	bl	8000298 <__aeabi_dsub>
 80058b0:	f805 6b01 	strb.w	r6, [r5], #1
 80058b4:	9e01      	ldr	r6, [sp, #4]
 80058b6:	9f03      	ldr	r7, [sp, #12]
 80058b8:	1bae      	subs	r6, r5, r6
 80058ba:	42b7      	cmp	r7, r6
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	d135      	bne.n	800592e <_dtoa_r+0x6e6>
 80058c2:	f7fa fceb 	bl	800029c <__adddf3>
 80058c6:	4642      	mov	r2, r8
 80058c8:	464b      	mov	r3, r9
 80058ca:	4606      	mov	r6, r0
 80058cc:	460f      	mov	r7, r1
 80058ce:	f7fb f92b 	bl	8000b28 <__aeabi_dcmpgt>
 80058d2:	b9d0      	cbnz	r0, 800590a <_dtoa_r+0x6c2>
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fb f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 80058e0:	b110      	cbz	r0, 80058e8 <_dtoa_r+0x6a0>
 80058e2:	f01a 0f01 	tst.w	sl, #1
 80058e6:	d110      	bne.n	800590a <_dtoa_r+0x6c2>
 80058e8:	4620      	mov	r0, r4
 80058ea:	ee18 1a10 	vmov	r1, s16
 80058ee:	f000 faf3 	bl	8005ed8 <_Bfree>
 80058f2:	2300      	movs	r3, #0
 80058f4:	9800      	ldr	r0, [sp, #0]
 80058f6:	702b      	strb	r3, [r5, #0]
 80058f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058fa:	3001      	adds	r0, #1
 80058fc:	6018      	str	r0, [r3, #0]
 80058fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005900:	2b00      	cmp	r3, #0
 8005902:	f43f acf1 	beq.w	80052e8 <_dtoa_r+0xa0>
 8005906:	601d      	str	r5, [r3, #0]
 8005908:	e4ee      	b.n	80052e8 <_dtoa_r+0xa0>
 800590a:	9f00      	ldr	r7, [sp, #0]
 800590c:	462b      	mov	r3, r5
 800590e:	461d      	mov	r5, r3
 8005910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005914:	2a39      	cmp	r2, #57	; 0x39
 8005916:	d106      	bne.n	8005926 <_dtoa_r+0x6de>
 8005918:	9a01      	ldr	r2, [sp, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d1f7      	bne.n	800590e <_dtoa_r+0x6c6>
 800591e:	9901      	ldr	r1, [sp, #4]
 8005920:	2230      	movs	r2, #48	; 0x30
 8005922:	3701      	adds	r7, #1
 8005924:	700a      	strb	r2, [r1, #0]
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	3201      	adds	r2, #1
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e790      	b.n	8005850 <_dtoa_r+0x608>
 800592e:	4ba6      	ldr	r3, [pc, #664]	; (8005bc8 <_dtoa_r+0x980>)
 8005930:	2200      	movs	r2, #0
 8005932:	f7fa fe69 	bl	8000608 <__aeabi_dmul>
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	4606      	mov	r6, r0
 800593c:	460f      	mov	r7, r1
 800593e:	f7fb f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005942:	2800      	cmp	r0, #0
 8005944:	d09d      	beq.n	8005882 <_dtoa_r+0x63a>
 8005946:	e7cf      	b.n	80058e8 <_dtoa_r+0x6a0>
 8005948:	9a08      	ldr	r2, [sp, #32]
 800594a:	2a00      	cmp	r2, #0
 800594c:	f000 80d7 	beq.w	8005afe <_dtoa_r+0x8b6>
 8005950:	9a06      	ldr	r2, [sp, #24]
 8005952:	2a01      	cmp	r2, #1
 8005954:	f300 80ba 	bgt.w	8005acc <_dtoa_r+0x884>
 8005958:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800595a:	2a00      	cmp	r2, #0
 800595c:	f000 80b2 	beq.w	8005ac4 <_dtoa_r+0x87c>
 8005960:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005964:	9e07      	ldr	r6, [sp, #28]
 8005966:	9d04      	ldr	r5, [sp, #16]
 8005968:	9a04      	ldr	r2, [sp, #16]
 800596a:	441a      	add	r2, r3
 800596c:	9204      	str	r2, [sp, #16]
 800596e:	9a05      	ldr	r2, [sp, #20]
 8005970:	2101      	movs	r1, #1
 8005972:	441a      	add	r2, r3
 8005974:	4620      	mov	r0, r4
 8005976:	9205      	str	r2, [sp, #20]
 8005978:	f000 fb66 	bl	8006048 <__i2b>
 800597c:	4607      	mov	r7, r0
 800597e:	2d00      	cmp	r5, #0
 8005980:	dd0c      	ble.n	800599c <_dtoa_r+0x754>
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	dd09      	ble.n	800599c <_dtoa_r+0x754>
 8005988:	42ab      	cmp	r3, r5
 800598a:	9a04      	ldr	r2, [sp, #16]
 800598c:	bfa8      	it	ge
 800598e:	462b      	movge	r3, r5
 8005990:	1ad2      	subs	r2, r2, r3
 8005992:	9204      	str	r2, [sp, #16]
 8005994:	9a05      	ldr	r2, [sp, #20]
 8005996:	1aed      	subs	r5, r5, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	b31b      	cbz	r3, 80059e8 <_dtoa_r+0x7a0>
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 80af 	beq.w	8005b06 <_dtoa_r+0x8be>
 80059a8:	2e00      	cmp	r6, #0
 80059aa:	dd13      	ble.n	80059d4 <_dtoa_r+0x78c>
 80059ac:	4639      	mov	r1, r7
 80059ae:	4632      	mov	r2, r6
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 fc09 	bl	80061c8 <__pow5mult>
 80059b6:	ee18 2a10 	vmov	r2, s16
 80059ba:	4601      	mov	r1, r0
 80059bc:	4607      	mov	r7, r0
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 fb58 	bl	8006074 <__multiply>
 80059c4:	ee18 1a10 	vmov	r1, s16
 80059c8:	4680      	mov	r8, r0
 80059ca:	4620      	mov	r0, r4
 80059cc:	f000 fa84 	bl	8005ed8 <_Bfree>
 80059d0:	ee08 8a10 	vmov	s16, r8
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	1b9a      	subs	r2, r3, r6
 80059d8:	d006      	beq.n	80059e8 <_dtoa_r+0x7a0>
 80059da:	ee18 1a10 	vmov	r1, s16
 80059de:	4620      	mov	r0, r4
 80059e0:	f000 fbf2 	bl	80061c8 <__pow5mult>
 80059e4:	ee08 0a10 	vmov	s16, r0
 80059e8:	2101      	movs	r1, #1
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fb2c 	bl	8006048 <__i2b>
 80059f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	4606      	mov	r6, r0
 80059f6:	f340 8088 	ble.w	8005b0a <_dtoa_r+0x8c2>
 80059fa:	461a      	mov	r2, r3
 80059fc:	4601      	mov	r1, r0
 80059fe:	4620      	mov	r0, r4
 8005a00:	f000 fbe2 	bl	80061c8 <__pow5mult>
 8005a04:	9b06      	ldr	r3, [sp, #24]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	4606      	mov	r6, r0
 8005a0a:	f340 8081 	ble.w	8005b10 <_dtoa_r+0x8c8>
 8005a0e:	f04f 0800 	mov.w	r8, #0
 8005a12:	6933      	ldr	r3, [r6, #16]
 8005a14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a18:	6918      	ldr	r0, [r3, #16]
 8005a1a:	f000 fac5 	bl	8005fa8 <__hi0bits>
 8005a1e:	f1c0 0020 	rsb	r0, r0, #32
 8005a22:	9b05      	ldr	r3, [sp, #20]
 8005a24:	4418      	add	r0, r3
 8005a26:	f010 001f 	ands.w	r0, r0, #31
 8005a2a:	f000 8092 	beq.w	8005b52 <_dtoa_r+0x90a>
 8005a2e:	f1c0 0320 	rsb	r3, r0, #32
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	f340 808a 	ble.w	8005b4c <_dtoa_r+0x904>
 8005a38:	f1c0 001c 	rsb	r0, r0, #28
 8005a3c:	9b04      	ldr	r3, [sp, #16]
 8005a3e:	4403      	add	r3, r0
 8005a40:	9304      	str	r3, [sp, #16]
 8005a42:	9b05      	ldr	r3, [sp, #20]
 8005a44:	4403      	add	r3, r0
 8005a46:	4405      	add	r5, r0
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	9b04      	ldr	r3, [sp, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dd07      	ble.n	8005a60 <_dtoa_r+0x818>
 8005a50:	ee18 1a10 	vmov	r1, s16
 8005a54:	461a      	mov	r2, r3
 8005a56:	4620      	mov	r0, r4
 8005a58:	f000 fc10 	bl	800627c <__lshift>
 8005a5c:	ee08 0a10 	vmov	s16, r0
 8005a60:	9b05      	ldr	r3, [sp, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	dd05      	ble.n	8005a72 <_dtoa_r+0x82a>
 8005a66:	4631      	mov	r1, r6
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f000 fc06 	bl	800627c <__lshift>
 8005a70:	4606      	mov	r6, r0
 8005a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d06e      	beq.n	8005b56 <_dtoa_r+0x90e>
 8005a78:	ee18 0a10 	vmov	r0, s16
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	f000 fc6d 	bl	800635c <__mcmp>
 8005a82:	2800      	cmp	r0, #0
 8005a84:	da67      	bge.n	8005b56 <_dtoa_r+0x90e>
 8005a86:	9b00      	ldr	r3, [sp, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	ee18 1a10 	vmov	r1, s16
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	220a      	movs	r2, #10
 8005a92:	2300      	movs	r3, #0
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fa41 	bl	8005f1c <__multadd>
 8005a9a:	9b08      	ldr	r3, [sp, #32]
 8005a9c:	ee08 0a10 	vmov	s16, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 81b1 	beq.w	8005e08 <_dtoa_r+0xbc0>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	220a      	movs	r2, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fa35 	bl	8005f1c <__multadd>
 8005ab2:	9b02      	ldr	r3, [sp, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	4607      	mov	r7, r0
 8005ab8:	f300 808e 	bgt.w	8005bd8 <_dtoa_r+0x990>
 8005abc:	9b06      	ldr	r3, [sp, #24]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	dc51      	bgt.n	8005b66 <_dtoa_r+0x91e>
 8005ac2:	e089      	b.n	8005bd8 <_dtoa_r+0x990>
 8005ac4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ac6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005aca:	e74b      	b.n	8005964 <_dtoa_r+0x71c>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	1e5e      	subs	r6, r3, #1
 8005ad0:	9b07      	ldr	r3, [sp, #28]
 8005ad2:	42b3      	cmp	r3, r6
 8005ad4:	bfbf      	itttt	lt
 8005ad6:	9b07      	ldrlt	r3, [sp, #28]
 8005ad8:	9607      	strlt	r6, [sp, #28]
 8005ada:	1af2      	sublt	r2, r6, r3
 8005adc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ade:	bfb6      	itet	lt
 8005ae0:	189b      	addlt	r3, r3, r2
 8005ae2:	1b9e      	subge	r6, r3, r6
 8005ae4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	bfb8      	it	lt
 8005aea:	2600      	movlt	r6, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	bfb7      	itett	lt
 8005af0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005af4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005af8:	1a9d      	sublt	r5, r3, r2
 8005afa:	2300      	movlt	r3, #0
 8005afc:	e734      	b.n	8005968 <_dtoa_r+0x720>
 8005afe:	9e07      	ldr	r6, [sp, #28]
 8005b00:	9d04      	ldr	r5, [sp, #16]
 8005b02:	9f08      	ldr	r7, [sp, #32]
 8005b04:	e73b      	b.n	800597e <_dtoa_r+0x736>
 8005b06:	9a07      	ldr	r2, [sp, #28]
 8005b08:	e767      	b.n	80059da <_dtoa_r+0x792>
 8005b0a:	9b06      	ldr	r3, [sp, #24]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	dc18      	bgt.n	8005b42 <_dtoa_r+0x8fa>
 8005b10:	f1ba 0f00 	cmp.w	sl, #0
 8005b14:	d115      	bne.n	8005b42 <_dtoa_r+0x8fa>
 8005b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b1a:	b993      	cbnz	r3, 8005b42 <_dtoa_r+0x8fa>
 8005b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005b20:	0d1b      	lsrs	r3, r3, #20
 8005b22:	051b      	lsls	r3, r3, #20
 8005b24:	b183      	cbz	r3, 8005b48 <_dtoa_r+0x900>
 8005b26:	9b04      	ldr	r3, [sp, #16]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	9304      	str	r3, [sp, #16]
 8005b2c:	9b05      	ldr	r3, [sp, #20]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	9305      	str	r3, [sp, #20]
 8005b32:	f04f 0801 	mov.w	r8, #1
 8005b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f47f af6a 	bne.w	8005a12 <_dtoa_r+0x7ca>
 8005b3e:	2001      	movs	r0, #1
 8005b40:	e76f      	b.n	8005a22 <_dtoa_r+0x7da>
 8005b42:	f04f 0800 	mov.w	r8, #0
 8005b46:	e7f6      	b.n	8005b36 <_dtoa_r+0x8ee>
 8005b48:	4698      	mov	r8, r3
 8005b4a:	e7f4      	b.n	8005b36 <_dtoa_r+0x8ee>
 8005b4c:	f43f af7d 	beq.w	8005a4a <_dtoa_r+0x802>
 8005b50:	4618      	mov	r0, r3
 8005b52:	301c      	adds	r0, #28
 8005b54:	e772      	b.n	8005a3c <_dtoa_r+0x7f4>
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	dc37      	bgt.n	8005bcc <_dtoa_r+0x984>
 8005b5c:	9b06      	ldr	r3, [sp, #24]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	dd34      	ble.n	8005bcc <_dtoa_r+0x984>
 8005b62:	9b03      	ldr	r3, [sp, #12]
 8005b64:	9302      	str	r3, [sp, #8]
 8005b66:	9b02      	ldr	r3, [sp, #8]
 8005b68:	b96b      	cbnz	r3, 8005b86 <_dtoa_r+0x93e>
 8005b6a:	4631      	mov	r1, r6
 8005b6c:	2205      	movs	r2, #5
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f9d4 	bl	8005f1c <__multadd>
 8005b74:	4601      	mov	r1, r0
 8005b76:	4606      	mov	r6, r0
 8005b78:	ee18 0a10 	vmov	r0, s16
 8005b7c:	f000 fbee 	bl	800635c <__mcmp>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f73f adbb 	bgt.w	80056fc <_dtoa_r+0x4b4>
 8005b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b88:	9d01      	ldr	r5, [sp, #4]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	f04f 0800 	mov.w	r8, #0
 8005b92:	4631      	mov	r1, r6
 8005b94:	4620      	mov	r0, r4
 8005b96:	f000 f99f 	bl	8005ed8 <_Bfree>
 8005b9a:	2f00      	cmp	r7, #0
 8005b9c:	f43f aea4 	beq.w	80058e8 <_dtoa_r+0x6a0>
 8005ba0:	f1b8 0f00 	cmp.w	r8, #0
 8005ba4:	d005      	beq.n	8005bb2 <_dtoa_r+0x96a>
 8005ba6:	45b8      	cmp	r8, r7
 8005ba8:	d003      	beq.n	8005bb2 <_dtoa_r+0x96a>
 8005baa:	4641      	mov	r1, r8
 8005bac:	4620      	mov	r0, r4
 8005bae:	f000 f993 	bl	8005ed8 <_Bfree>
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 f98f 	bl	8005ed8 <_Bfree>
 8005bba:	e695      	b.n	80058e8 <_dtoa_r+0x6a0>
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	4637      	mov	r7, r6
 8005bc0:	e7e1      	b.n	8005b86 <_dtoa_r+0x93e>
 8005bc2:	9700      	str	r7, [sp, #0]
 8005bc4:	4637      	mov	r7, r6
 8005bc6:	e599      	b.n	80056fc <_dtoa_r+0x4b4>
 8005bc8:	40240000 	.word	0x40240000
 8005bcc:	9b08      	ldr	r3, [sp, #32]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f000 80ca 	beq.w	8005d68 <_dtoa_r+0xb20>
 8005bd4:	9b03      	ldr	r3, [sp, #12]
 8005bd6:	9302      	str	r3, [sp, #8]
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	dd05      	ble.n	8005be8 <_dtoa_r+0x9a0>
 8005bdc:	4639      	mov	r1, r7
 8005bde:	462a      	mov	r2, r5
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fb4b 	bl	800627c <__lshift>
 8005be6:	4607      	mov	r7, r0
 8005be8:	f1b8 0f00 	cmp.w	r8, #0
 8005bec:	d05b      	beq.n	8005ca6 <_dtoa_r+0xa5e>
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f000 f931 	bl	8005e58 <_Balloc>
 8005bf6:	4605      	mov	r5, r0
 8005bf8:	b928      	cbnz	r0, 8005c06 <_dtoa_r+0x9be>
 8005bfa:	4b87      	ldr	r3, [pc, #540]	; (8005e18 <_dtoa_r+0xbd0>)
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c02:	f7ff bb3b 	b.w	800527c <_dtoa_r+0x34>
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	3202      	adds	r2, #2
 8005c0a:	0092      	lsls	r2, r2, #2
 8005c0c:	f107 010c 	add.w	r1, r7, #12
 8005c10:	300c      	adds	r0, #12
 8005c12:	f000 f913 	bl	8005e3c <memcpy>
 8005c16:	2201      	movs	r2, #1
 8005c18:	4629      	mov	r1, r5
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f000 fb2e 	bl	800627c <__lshift>
 8005c20:	9b01      	ldr	r3, [sp, #4]
 8005c22:	f103 0901 	add.w	r9, r3, #1
 8005c26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	9305      	str	r3, [sp, #20]
 8005c2e:	f00a 0301 	and.w	r3, sl, #1
 8005c32:	46b8      	mov	r8, r7
 8005c34:	9304      	str	r3, [sp, #16]
 8005c36:	4607      	mov	r7, r0
 8005c38:	4631      	mov	r1, r6
 8005c3a:	ee18 0a10 	vmov	r0, s16
 8005c3e:	f7ff fa75 	bl	800512c <quorem>
 8005c42:	4641      	mov	r1, r8
 8005c44:	9002      	str	r0, [sp, #8]
 8005c46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005c4a:	ee18 0a10 	vmov	r0, s16
 8005c4e:	f000 fb85 	bl	800635c <__mcmp>
 8005c52:	463a      	mov	r2, r7
 8005c54:	9003      	str	r0, [sp, #12]
 8005c56:	4631      	mov	r1, r6
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 fb9b 	bl	8006394 <__mdiff>
 8005c5e:	68c2      	ldr	r2, [r0, #12]
 8005c60:	f109 3bff 	add.w	fp, r9, #4294967295
 8005c64:	4605      	mov	r5, r0
 8005c66:	bb02      	cbnz	r2, 8005caa <_dtoa_r+0xa62>
 8005c68:	4601      	mov	r1, r0
 8005c6a:	ee18 0a10 	vmov	r0, s16
 8005c6e:	f000 fb75 	bl	800635c <__mcmp>
 8005c72:	4602      	mov	r2, r0
 8005c74:	4629      	mov	r1, r5
 8005c76:	4620      	mov	r0, r4
 8005c78:	9207      	str	r2, [sp, #28]
 8005c7a:	f000 f92d 	bl	8005ed8 <_Bfree>
 8005c7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005c82:	ea43 0102 	orr.w	r1, r3, r2
 8005c86:	9b04      	ldr	r3, [sp, #16]
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	464d      	mov	r5, r9
 8005c8c:	d10f      	bne.n	8005cae <_dtoa_r+0xa66>
 8005c8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c92:	d02a      	beq.n	8005cea <_dtoa_r+0xaa2>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dd02      	ble.n	8005ca0 <_dtoa_r+0xa58>
 8005c9a:	9b02      	ldr	r3, [sp, #8]
 8005c9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005ca0:	f88b a000 	strb.w	sl, [fp]
 8005ca4:	e775      	b.n	8005b92 <_dtoa_r+0x94a>
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	e7ba      	b.n	8005c20 <_dtoa_r+0x9d8>
 8005caa:	2201      	movs	r2, #1
 8005cac:	e7e2      	b.n	8005c74 <_dtoa_r+0xa2c>
 8005cae:	9b03      	ldr	r3, [sp, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	db04      	blt.n	8005cbe <_dtoa_r+0xa76>
 8005cb4:	9906      	ldr	r1, [sp, #24]
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	9904      	ldr	r1, [sp, #16]
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	d122      	bne.n	8005d04 <_dtoa_r+0xabc>
 8005cbe:	2a00      	cmp	r2, #0
 8005cc0:	ddee      	ble.n	8005ca0 <_dtoa_r+0xa58>
 8005cc2:	ee18 1a10 	vmov	r1, s16
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f000 fad7 	bl	800627c <__lshift>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	ee08 0a10 	vmov	s16, r0
 8005cd4:	f000 fb42 	bl	800635c <__mcmp>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	dc03      	bgt.n	8005ce4 <_dtoa_r+0xa9c>
 8005cdc:	d1e0      	bne.n	8005ca0 <_dtoa_r+0xa58>
 8005cde:	f01a 0f01 	tst.w	sl, #1
 8005ce2:	d0dd      	beq.n	8005ca0 <_dtoa_r+0xa58>
 8005ce4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005ce8:	d1d7      	bne.n	8005c9a <_dtoa_r+0xa52>
 8005cea:	2339      	movs	r3, #57	; 0x39
 8005cec:	f88b 3000 	strb.w	r3, [fp]
 8005cf0:	462b      	mov	r3, r5
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cfa:	2a39      	cmp	r2, #57	; 0x39
 8005cfc:	d071      	beq.n	8005de2 <_dtoa_r+0xb9a>
 8005cfe:	3201      	adds	r2, #1
 8005d00:	701a      	strb	r2, [r3, #0]
 8005d02:	e746      	b.n	8005b92 <_dtoa_r+0x94a>
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	dd07      	ble.n	8005d18 <_dtoa_r+0xad0>
 8005d08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d0c:	d0ed      	beq.n	8005cea <_dtoa_r+0xaa2>
 8005d0e:	f10a 0301 	add.w	r3, sl, #1
 8005d12:	f88b 3000 	strb.w	r3, [fp]
 8005d16:	e73c      	b.n	8005b92 <_dtoa_r+0x94a>
 8005d18:	9b05      	ldr	r3, [sp, #20]
 8005d1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005d1e:	4599      	cmp	r9, r3
 8005d20:	d047      	beq.n	8005db2 <_dtoa_r+0xb6a>
 8005d22:	ee18 1a10 	vmov	r1, s16
 8005d26:	2300      	movs	r3, #0
 8005d28:	220a      	movs	r2, #10
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 f8f6 	bl	8005f1c <__multadd>
 8005d30:	45b8      	cmp	r8, r7
 8005d32:	ee08 0a10 	vmov	s16, r0
 8005d36:	f04f 0300 	mov.w	r3, #0
 8005d3a:	f04f 020a 	mov.w	r2, #10
 8005d3e:	4641      	mov	r1, r8
 8005d40:	4620      	mov	r0, r4
 8005d42:	d106      	bne.n	8005d52 <_dtoa_r+0xb0a>
 8005d44:	f000 f8ea 	bl	8005f1c <__multadd>
 8005d48:	4680      	mov	r8, r0
 8005d4a:	4607      	mov	r7, r0
 8005d4c:	f109 0901 	add.w	r9, r9, #1
 8005d50:	e772      	b.n	8005c38 <_dtoa_r+0x9f0>
 8005d52:	f000 f8e3 	bl	8005f1c <__multadd>
 8005d56:	4639      	mov	r1, r7
 8005d58:	4680      	mov	r8, r0
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f000 f8dc 	bl	8005f1c <__multadd>
 8005d64:	4607      	mov	r7, r0
 8005d66:	e7f1      	b.n	8005d4c <_dtoa_r+0xb04>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	9302      	str	r3, [sp, #8]
 8005d6c:	9d01      	ldr	r5, [sp, #4]
 8005d6e:	ee18 0a10 	vmov	r0, s16
 8005d72:	4631      	mov	r1, r6
 8005d74:	f7ff f9da 	bl	800512c <quorem>
 8005d78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d7c:	9b01      	ldr	r3, [sp, #4]
 8005d7e:	f805 ab01 	strb.w	sl, [r5], #1
 8005d82:	1aea      	subs	r2, r5, r3
 8005d84:	9b02      	ldr	r3, [sp, #8]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	dd09      	ble.n	8005d9e <_dtoa_r+0xb56>
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	2300      	movs	r3, #0
 8005d90:	220a      	movs	r2, #10
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 f8c2 	bl	8005f1c <__multadd>
 8005d98:	ee08 0a10 	vmov	s16, r0
 8005d9c:	e7e7      	b.n	8005d6e <_dtoa_r+0xb26>
 8005d9e:	9b02      	ldr	r3, [sp, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bfc8      	it	gt
 8005da4:	461d      	movgt	r5, r3
 8005da6:	9b01      	ldr	r3, [sp, #4]
 8005da8:	bfd8      	it	le
 8005daa:	2501      	movle	r5, #1
 8005dac:	441d      	add	r5, r3
 8005dae:	f04f 0800 	mov.w	r8, #0
 8005db2:	ee18 1a10 	vmov	r1, s16
 8005db6:	2201      	movs	r2, #1
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 fa5f 	bl	800627c <__lshift>
 8005dbe:	4631      	mov	r1, r6
 8005dc0:	ee08 0a10 	vmov	s16, r0
 8005dc4:	f000 faca 	bl	800635c <__mcmp>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	dc91      	bgt.n	8005cf0 <_dtoa_r+0xaa8>
 8005dcc:	d102      	bne.n	8005dd4 <_dtoa_r+0xb8c>
 8005dce:	f01a 0f01 	tst.w	sl, #1
 8005dd2:	d18d      	bne.n	8005cf0 <_dtoa_r+0xaa8>
 8005dd4:	462b      	mov	r3, r5
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ddc:	2a30      	cmp	r2, #48	; 0x30
 8005dde:	d0fa      	beq.n	8005dd6 <_dtoa_r+0xb8e>
 8005de0:	e6d7      	b.n	8005b92 <_dtoa_r+0x94a>
 8005de2:	9a01      	ldr	r2, [sp, #4]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d184      	bne.n	8005cf2 <_dtoa_r+0xaaa>
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	2331      	movs	r3, #49	; 0x31
 8005df0:	7013      	strb	r3, [r2, #0]
 8005df2:	e6ce      	b.n	8005b92 <_dtoa_r+0x94a>
 8005df4:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <_dtoa_r+0xbd4>)
 8005df6:	f7ff ba95 	b.w	8005324 <_dtoa_r+0xdc>
 8005dfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f aa6e 	bne.w	80052de <_dtoa_r+0x96>
 8005e02:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <_dtoa_r+0xbd8>)
 8005e04:	f7ff ba8e 	b.w	8005324 <_dtoa_r+0xdc>
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dcae      	bgt.n	8005d6c <_dtoa_r+0xb24>
 8005e0e:	9b06      	ldr	r3, [sp, #24]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	f73f aea8 	bgt.w	8005b66 <_dtoa_r+0x91e>
 8005e16:	e7a9      	b.n	8005d6c <_dtoa_r+0xb24>
 8005e18:	080092e7 	.word	0x080092e7
 8005e1c:	08009244 	.word	0x08009244
 8005e20:	08009268 	.word	0x08009268

08005e24 <_localeconv_r>:
 8005e24:	4800      	ldr	r0, [pc, #0]	; (8005e28 <_localeconv_r+0x4>)
 8005e26:	4770      	bx	lr
 8005e28:	20000184 	.word	0x20000184

08005e2c <malloc>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <malloc+0xc>)
 8005e2e:	4601      	mov	r1, r0
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f000 bc17 	b.w	8006664 <_malloc_r>
 8005e36:	bf00      	nop
 8005e38:	20000030 	.word	0x20000030

08005e3c <memcpy>:
 8005e3c:	440a      	add	r2, r1
 8005e3e:	4291      	cmp	r1, r2
 8005e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e44:	d100      	bne.n	8005e48 <memcpy+0xc>
 8005e46:	4770      	bx	lr
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e52:	4291      	cmp	r1, r2
 8005e54:	d1f9      	bne.n	8005e4a <memcpy+0xe>
 8005e56:	bd10      	pop	{r4, pc}

08005e58 <_Balloc>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	460d      	mov	r5, r1
 8005e60:	b976      	cbnz	r6, 8005e80 <_Balloc+0x28>
 8005e62:	2010      	movs	r0, #16
 8005e64:	f7ff ffe2 	bl	8005e2c <malloc>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005e6c:	b920      	cbnz	r0, 8005e78 <_Balloc+0x20>
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <_Balloc+0x78>)
 8005e70:	4818      	ldr	r0, [pc, #96]	; (8005ed4 <_Balloc+0x7c>)
 8005e72:	2166      	movs	r1, #102	; 0x66
 8005e74:	f000 fdd6 	bl	8006a24 <__assert_func>
 8005e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e7c:	6006      	str	r6, [r0, #0]
 8005e7e:	60c6      	str	r6, [r0, #12]
 8005e80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e82:	68f3      	ldr	r3, [r6, #12]
 8005e84:	b183      	cbz	r3, 8005ea8 <_Balloc+0x50>
 8005e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e8e:	b9b8      	cbnz	r0, 8005ec0 <_Balloc+0x68>
 8005e90:	2101      	movs	r1, #1
 8005e92:	fa01 f605 	lsl.w	r6, r1, r5
 8005e96:	1d72      	adds	r2, r6, #5
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fb60 	bl	8006560 <_calloc_r>
 8005ea0:	b160      	cbz	r0, 8005ebc <_Balloc+0x64>
 8005ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ea6:	e00e      	b.n	8005ec6 <_Balloc+0x6e>
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	2104      	movs	r1, #4
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fb57 	bl	8006560 <_calloc_r>
 8005eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb4:	60f0      	str	r0, [r6, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e4      	bne.n	8005e86 <_Balloc+0x2e>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	6802      	ldr	r2, [r0, #0]
 8005ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ecc:	e7f7      	b.n	8005ebe <_Balloc+0x66>
 8005ece:	bf00      	nop
 8005ed0:	08009275 	.word	0x08009275
 8005ed4:	080092f8 	.word	0x080092f8

08005ed8 <_Bfree>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005edc:	4605      	mov	r5, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	b976      	cbnz	r6, 8005f00 <_Bfree+0x28>
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	f7ff ffa2 	bl	8005e2c <malloc>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6268      	str	r0, [r5, #36]	; 0x24
 8005eec:	b920      	cbnz	r0, 8005ef8 <_Bfree+0x20>
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_Bfree+0x3c>)
 8005ef0:	4809      	ldr	r0, [pc, #36]	; (8005f18 <_Bfree+0x40>)
 8005ef2:	218a      	movs	r1, #138	; 0x8a
 8005ef4:	f000 fd96 	bl	8006a24 <__assert_func>
 8005ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005efc:	6006      	str	r6, [r0, #0]
 8005efe:	60c6      	str	r6, [r0, #12]
 8005f00:	b13c      	cbz	r4, 8005f12 <_Bfree+0x3a>
 8005f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f04:	6862      	ldr	r2, [r4, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f0c:	6021      	str	r1, [r4, #0]
 8005f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	08009275 	.word	0x08009275
 8005f18:	080092f8 	.word	0x080092f8

08005f1c <__multadd>:
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	690d      	ldr	r5, [r1, #16]
 8005f22:	4607      	mov	r7, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	461e      	mov	r6, r3
 8005f28:	f101 0c14 	add.w	ip, r1, #20
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f32:	b299      	uxth	r1, r3
 8005f34:	fb02 6101 	mla	r1, r2, r1, r6
 8005f38:	0c1e      	lsrs	r6, r3, #16
 8005f3a:	0c0b      	lsrs	r3, r1, #16
 8005f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f40:	b289      	uxth	r1, r1
 8005f42:	3001      	adds	r0, #1
 8005f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f48:	4285      	cmp	r5, r0
 8005f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f52:	dcec      	bgt.n	8005f2e <__multadd+0x12>
 8005f54:	b30e      	cbz	r6, 8005f9a <__multadd+0x7e>
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	42ab      	cmp	r3, r5
 8005f5a:	dc19      	bgt.n	8005f90 <__multadd+0x74>
 8005f5c:	6861      	ldr	r1, [r4, #4]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	3101      	adds	r1, #1
 8005f62:	f7ff ff79 	bl	8005e58 <_Balloc>
 8005f66:	4680      	mov	r8, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <__multadd+0x5a>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <__multadd+0x84>)
 8005f6e:	480d      	ldr	r0, [pc, #52]	; (8005fa4 <__multadd+0x88>)
 8005f70:	21b5      	movs	r1, #181	; 0xb5
 8005f72:	f000 fd57 	bl	8006a24 <__assert_func>
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	3202      	adds	r2, #2
 8005f7a:	f104 010c 	add.w	r1, r4, #12
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	300c      	adds	r0, #12
 8005f82:	f7ff ff5b 	bl	8005e3c <memcpy>
 8005f86:	4621      	mov	r1, r4
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ffa5 	bl	8005ed8 <_Bfree>
 8005f8e:	4644      	mov	r4, r8
 8005f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f94:	3501      	adds	r5, #1
 8005f96:	615e      	str	r6, [r3, #20]
 8005f98:	6125      	str	r5, [r4, #16]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa0:	080092e7 	.word	0x080092e7
 8005fa4:	080092f8 	.word	0x080092f8

08005fa8 <__hi0bits>:
 8005fa8:	0c03      	lsrs	r3, r0, #16
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	b9d3      	cbnz	r3, 8005fe4 <__hi0bits+0x3c>
 8005fae:	0400      	lsls	r0, r0, #16
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fb6:	bf04      	itt	eq
 8005fb8:	0200      	lsleq	r0, r0, #8
 8005fba:	3308      	addeq	r3, #8
 8005fbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fc0:	bf04      	itt	eq
 8005fc2:	0100      	lsleq	r0, r0, #4
 8005fc4:	3304      	addeq	r3, #4
 8005fc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005fca:	bf04      	itt	eq
 8005fcc:	0080      	lsleq	r0, r0, #2
 8005fce:	3302      	addeq	r3, #2
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	db05      	blt.n	8005fe0 <__hi0bits+0x38>
 8005fd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fd8:	f103 0301 	add.w	r3, r3, #1
 8005fdc:	bf08      	it	eq
 8005fde:	2320      	moveq	r3, #32
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	4770      	bx	lr
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e7e4      	b.n	8005fb2 <__hi0bits+0xa>

08005fe8 <__lo0bits>:
 8005fe8:	6803      	ldr	r3, [r0, #0]
 8005fea:	f013 0207 	ands.w	r2, r3, #7
 8005fee:	4601      	mov	r1, r0
 8005ff0:	d00b      	beq.n	800600a <__lo0bits+0x22>
 8005ff2:	07da      	lsls	r2, r3, #31
 8005ff4:	d423      	bmi.n	800603e <__lo0bits+0x56>
 8005ff6:	0798      	lsls	r0, r3, #30
 8005ff8:	bf49      	itett	mi
 8005ffa:	085b      	lsrmi	r3, r3, #1
 8005ffc:	089b      	lsrpl	r3, r3, #2
 8005ffe:	2001      	movmi	r0, #1
 8006000:	600b      	strmi	r3, [r1, #0]
 8006002:	bf5c      	itt	pl
 8006004:	600b      	strpl	r3, [r1, #0]
 8006006:	2002      	movpl	r0, #2
 8006008:	4770      	bx	lr
 800600a:	b298      	uxth	r0, r3
 800600c:	b9a8      	cbnz	r0, 800603a <__lo0bits+0x52>
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	2010      	movs	r0, #16
 8006012:	b2da      	uxtb	r2, r3
 8006014:	b90a      	cbnz	r2, 800601a <__lo0bits+0x32>
 8006016:	3008      	adds	r0, #8
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	071a      	lsls	r2, r3, #28
 800601c:	bf04      	itt	eq
 800601e:	091b      	lsreq	r3, r3, #4
 8006020:	3004      	addeq	r0, #4
 8006022:	079a      	lsls	r2, r3, #30
 8006024:	bf04      	itt	eq
 8006026:	089b      	lsreq	r3, r3, #2
 8006028:	3002      	addeq	r0, #2
 800602a:	07da      	lsls	r2, r3, #31
 800602c:	d403      	bmi.n	8006036 <__lo0bits+0x4e>
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	f100 0001 	add.w	r0, r0, #1
 8006034:	d005      	beq.n	8006042 <__lo0bits+0x5a>
 8006036:	600b      	str	r3, [r1, #0]
 8006038:	4770      	bx	lr
 800603a:	4610      	mov	r0, r2
 800603c:	e7e9      	b.n	8006012 <__lo0bits+0x2a>
 800603e:	2000      	movs	r0, #0
 8006040:	4770      	bx	lr
 8006042:	2020      	movs	r0, #32
 8006044:	4770      	bx	lr
	...

08006048 <__i2b>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	2101      	movs	r1, #1
 800604e:	f7ff ff03 	bl	8005e58 <_Balloc>
 8006052:	4602      	mov	r2, r0
 8006054:	b928      	cbnz	r0, 8006062 <__i2b+0x1a>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <__i2b+0x24>)
 8006058:	4805      	ldr	r0, [pc, #20]	; (8006070 <__i2b+0x28>)
 800605a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800605e:	f000 fce1 	bl	8006a24 <__assert_func>
 8006062:	2301      	movs	r3, #1
 8006064:	6144      	str	r4, [r0, #20]
 8006066:	6103      	str	r3, [r0, #16]
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	080092e7 	.word	0x080092e7
 8006070:	080092f8 	.word	0x080092f8

08006074 <__multiply>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	4691      	mov	r9, r2
 800607a:	690a      	ldr	r2, [r1, #16]
 800607c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	bfb8      	it	lt
 8006084:	460b      	movlt	r3, r1
 8006086:	460c      	mov	r4, r1
 8006088:	bfbc      	itt	lt
 800608a:	464c      	movlt	r4, r9
 800608c:	4699      	movlt	r9, r3
 800608e:	6927      	ldr	r7, [r4, #16]
 8006090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	6861      	ldr	r1, [r4, #4]
 8006098:	eb07 060a 	add.w	r6, r7, sl
 800609c:	42b3      	cmp	r3, r6
 800609e:	b085      	sub	sp, #20
 80060a0:	bfb8      	it	lt
 80060a2:	3101      	addlt	r1, #1
 80060a4:	f7ff fed8 	bl	8005e58 <_Balloc>
 80060a8:	b930      	cbnz	r0, 80060b8 <__multiply+0x44>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <__multiply+0x14c>)
 80060ae:	4845      	ldr	r0, [pc, #276]	; (80061c4 <__multiply+0x150>)
 80060b0:	f240 115d 	movw	r1, #349	; 0x15d
 80060b4:	f000 fcb6 	bl	8006a24 <__assert_func>
 80060b8:	f100 0514 	add.w	r5, r0, #20
 80060bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060c0:	462b      	mov	r3, r5
 80060c2:	2200      	movs	r2, #0
 80060c4:	4543      	cmp	r3, r8
 80060c6:	d321      	bcc.n	800610c <__multiply+0x98>
 80060c8:	f104 0314 	add.w	r3, r4, #20
 80060cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060d0:	f109 0314 	add.w	r3, r9, #20
 80060d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	1b3a      	subs	r2, r7, r4
 80060dc:	3a15      	subs	r2, #21
 80060de:	f022 0203 	bic.w	r2, r2, #3
 80060e2:	3204      	adds	r2, #4
 80060e4:	f104 0115 	add.w	r1, r4, #21
 80060e8:	428f      	cmp	r7, r1
 80060ea:	bf38      	it	cc
 80060ec:	2204      	movcc	r2, #4
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	9a02      	ldr	r2, [sp, #8]
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d80c      	bhi.n	8006112 <__multiply+0x9e>
 80060f8:	2e00      	cmp	r6, #0
 80060fa:	dd03      	ble.n	8006104 <__multiply+0x90>
 80060fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05a      	beq.n	80061ba <__multiply+0x146>
 8006104:	6106      	str	r6, [r0, #16]
 8006106:	b005      	add	sp, #20
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	f843 2b04 	str.w	r2, [r3], #4
 8006110:	e7d8      	b.n	80060c4 <__multiply+0x50>
 8006112:	f8b3 a000 	ldrh.w	sl, [r3]
 8006116:	f1ba 0f00 	cmp.w	sl, #0
 800611a:	d024      	beq.n	8006166 <__multiply+0xf2>
 800611c:	f104 0e14 	add.w	lr, r4, #20
 8006120:	46a9      	mov	r9, r5
 8006122:	f04f 0c00 	mov.w	ip, #0
 8006126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800612a:	f8d9 1000 	ldr.w	r1, [r9]
 800612e:	fa1f fb82 	uxth.w	fp, r2
 8006132:	b289      	uxth	r1, r1
 8006134:	fb0a 110b 	mla	r1, sl, fp, r1
 8006138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800613c:	f8d9 2000 	ldr.w	r2, [r9]
 8006140:	4461      	add	r1, ip
 8006142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006146:	fb0a c20b 	mla	r2, sl, fp, ip
 800614a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800614e:	b289      	uxth	r1, r1
 8006150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006154:	4577      	cmp	r7, lr
 8006156:	f849 1b04 	str.w	r1, [r9], #4
 800615a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800615e:	d8e2      	bhi.n	8006126 <__multiply+0xb2>
 8006160:	9a01      	ldr	r2, [sp, #4]
 8006162:	f845 c002 	str.w	ip, [r5, r2]
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800616c:	3304      	adds	r3, #4
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	d020      	beq.n	80061b6 <__multiply+0x142>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	f104 0c14 	add.w	ip, r4, #20
 800617a:	46ae      	mov	lr, r5
 800617c:	f04f 0a00 	mov.w	sl, #0
 8006180:	f8bc b000 	ldrh.w	fp, [ip]
 8006184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006188:	fb09 220b 	mla	r2, r9, fp, r2
 800618c:	4492      	add	sl, r2
 800618e:	b289      	uxth	r1, r1
 8006190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006194:	f84e 1b04 	str.w	r1, [lr], #4
 8006198:	f85c 2b04 	ldr.w	r2, [ip], #4
 800619c:	f8be 1000 	ldrh.w	r1, [lr]
 80061a0:	0c12      	lsrs	r2, r2, #16
 80061a2:	fb09 1102 	mla	r1, r9, r2, r1
 80061a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061aa:	4567      	cmp	r7, ip
 80061ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061b0:	d8e6      	bhi.n	8006180 <__multiply+0x10c>
 80061b2:	9a01      	ldr	r2, [sp, #4]
 80061b4:	50a9      	str	r1, [r5, r2]
 80061b6:	3504      	adds	r5, #4
 80061b8:	e79a      	b.n	80060f0 <__multiply+0x7c>
 80061ba:	3e01      	subs	r6, #1
 80061bc:	e79c      	b.n	80060f8 <__multiply+0x84>
 80061be:	bf00      	nop
 80061c0:	080092e7 	.word	0x080092e7
 80061c4:	080092f8 	.word	0x080092f8

080061c8 <__pow5mult>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4615      	mov	r5, r2
 80061ce:	f012 0203 	ands.w	r2, r2, #3
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	d007      	beq.n	80061e8 <__pow5mult+0x20>
 80061d8:	4c25      	ldr	r4, [pc, #148]	; (8006270 <__pow5mult+0xa8>)
 80061da:	3a01      	subs	r2, #1
 80061dc:	2300      	movs	r3, #0
 80061de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061e2:	f7ff fe9b 	bl	8005f1c <__multadd>
 80061e6:	4607      	mov	r7, r0
 80061e8:	10ad      	asrs	r5, r5, #2
 80061ea:	d03d      	beq.n	8006268 <__pow5mult+0xa0>
 80061ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061ee:	b97c      	cbnz	r4, 8006210 <__pow5mult+0x48>
 80061f0:	2010      	movs	r0, #16
 80061f2:	f7ff fe1b 	bl	8005e2c <malloc>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6270      	str	r0, [r6, #36]	; 0x24
 80061fa:	b928      	cbnz	r0, 8006208 <__pow5mult+0x40>
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <__pow5mult+0xac>)
 80061fe:	481e      	ldr	r0, [pc, #120]	; (8006278 <__pow5mult+0xb0>)
 8006200:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006204:	f000 fc0e 	bl	8006a24 <__assert_func>
 8006208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800620c:	6004      	str	r4, [r0, #0]
 800620e:	60c4      	str	r4, [r0, #12]
 8006210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006218:	b94c      	cbnz	r4, 800622e <__pow5mult+0x66>
 800621a:	f240 2171 	movw	r1, #625	; 0x271
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff ff12 	bl	8006048 <__i2b>
 8006224:	2300      	movs	r3, #0
 8006226:	f8c8 0008 	str.w	r0, [r8, #8]
 800622a:	4604      	mov	r4, r0
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	f04f 0900 	mov.w	r9, #0
 8006232:	07eb      	lsls	r3, r5, #31
 8006234:	d50a      	bpl.n	800624c <__pow5mult+0x84>
 8006236:	4639      	mov	r1, r7
 8006238:	4622      	mov	r2, r4
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff1a 	bl	8006074 <__multiply>
 8006240:	4639      	mov	r1, r7
 8006242:	4680      	mov	r8, r0
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff fe47 	bl	8005ed8 <_Bfree>
 800624a:	4647      	mov	r7, r8
 800624c:	106d      	asrs	r5, r5, #1
 800624e:	d00b      	beq.n	8006268 <__pow5mult+0xa0>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	b938      	cbnz	r0, 8006264 <__pow5mult+0x9c>
 8006254:	4622      	mov	r2, r4
 8006256:	4621      	mov	r1, r4
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ff0b 	bl	8006074 <__multiply>
 800625e:	6020      	str	r0, [r4, #0]
 8006260:	f8c0 9000 	str.w	r9, [r0]
 8006264:	4604      	mov	r4, r0
 8006266:	e7e4      	b.n	8006232 <__pow5mult+0x6a>
 8006268:	4638      	mov	r0, r7
 800626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626e:	bf00      	nop
 8006270:	08009448 	.word	0x08009448
 8006274:	08009275 	.word	0x08009275
 8006278:	080092f8 	.word	0x080092f8

0800627c <__lshift>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	6849      	ldr	r1, [r1, #4]
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	4607      	mov	r7, r0
 800628e:	4691      	mov	r9, r2
 8006290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006294:	f108 0601 	add.w	r6, r8, #1
 8006298:	42b3      	cmp	r3, r6
 800629a:	db0b      	blt.n	80062b4 <__lshift+0x38>
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff fddb 	bl	8005e58 <_Balloc>
 80062a2:	4605      	mov	r5, r0
 80062a4:	b948      	cbnz	r0, 80062ba <__lshift+0x3e>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <__lshift+0xd8>)
 80062aa:	482b      	ldr	r0, [pc, #172]	; (8006358 <__lshift+0xdc>)
 80062ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062b0:	f000 fbb8 	bl	8006a24 <__assert_func>
 80062b4:	3101      	adds	r1, #1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	e7ee      	b.n	8006298 <__lshift+0x1c>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f100 0114 	add.w	r1, r0, #20
 80062c0:	f100 0210 	add.w	r2, r0, #16
 80062c4:	4618      	mov	r0, r3
 80062c6:	4553      	cmp	r3, sl
 80062c8:	db37      	blt.n	800633a <__lshift+0xbe>
 80062ca:	6920      	ldr	r0, [r4, #16]
 80062cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d0:	f104 0314 	add.w	r3, r4, #20
 80062d4:	f019 091f 	ands.w	r9, r9, #31
 80062d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062e0:	d02f      	beq.n	8006342 <__lshift+0xc6>
 80062e2:	f1c9 0e20 	rsb	lr, r9, #32
 80062e6:	468a      	mov	sl, r1
 80062e8:	f04f 0c00 	mov.w	ip, #0
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	fa02 f209 	lsl.w	r2, r2, r9
 80062f2:	ea42 020c 	orr.w	r2, r2, ip
 80062f6:	f84a 2b04 	str.w	r2, [sl], #4
 80062fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fe:	4298      	cmp	r0, r3
 8006300:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006304:	d8f2      	bhi.n	80062ec <__lshift+0x70>
 8006306:	1b03      	subs	r3, r0, r4
 8006308:	3b15      	subs	r3, #21
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	3304      	adds	r3, #4
 8006310:	f104 0215 	add.w	r2, r4, #21
 8006314:	4290      	cmp	r0, r2
 8006316:	bf38      	it	cc
 8006318:	2304      	movcc	r3, #4
 800631a:	f841 c003 	str.w	ip, [r1, r3]
 800631e:	f1bc 0f00 	cmp.w	ip, #0
 8006322:	d001      	beq.n	8006328 <__lshift+0xac>
 8006324:	f108 0602 	add.w	r6, r8, #2
 8006328:	3e01      	subs	r6, #1
 800632a:	4638      	mov	r0, r7
 800632c:	612e      	str	r6, [r5, #16]
 800632e:	4621      	mov	r1, r4
 8006330:	f7ff fdd2 	bl	8005ed8 <_Bfree>
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	f842 0f04 	str.w	r0, [r2, #4]!
 800633e:	3301      	adds	r3, #1
 8006340:	e7c1      	b.n	80062c6 <__lshift+0x4a>
 8006342:	3904      	subs	r1, #4
 8006344:	f853 2b04 	ldr.w	r2, [r3], #4
 8006348:	f841 2f04 	str.w	r2, [r1, #4]!
 800634c:	4298      	cmp	r0, r3
 800634e:	d8f9      	bhi.n	8006344 <__lshift+0xc8>
 8006350:	e7ea      	b.n	8006328 <__lshift+0xac>
 8006352:	bf00      	nop
 8006354:	080092e7 	.word	0x080092e7
 8006358:	080092f8 	.word	0x080092f8

0800635c <__mcmp>:
 800635c:	b530      	push	{r4, r5, lr}
 800635e:	6902      	ldr	r2, [r0, #16]
 8006360:	690c      	ldr	r4, [r1, #16]
 8006362:	1b12      	subs	r2, r2, r4
 8006364:	d10e      	bne.n	8006384 <__mcmp+0x28>
 8006366:	f100 0314 	add.w	r3, r0, #20
 800636a:	3114      	adds	r1, #20
 800636c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800637c:	42a5      	cmp	r5, r4
 800637e:	d003      	beq.n	8006388 <__mcmp+0x2c>
 8006380:	d305      	bcc.n	800638e <__mcmp+0x32>
 8006382:	2201      	movs	r2, #1
 8006384:	4610      	mov	r0, r2
 8006386:	bd30      	pop	{r4, r5, pc}
 8006388:	4283      	cmp	r3, r0
 800638a:	d3f3      	bcc.n	8006374 <__mcmp+0x18>
 800638c:	e7fa      	b.n	8006384 <__mcmp+0x28>
 800638e:	f04f 32ff 	mov.w	r2, #4294967295
 8006392:	e7f7      	b.n	8006384 <__mcmp+0x28>

08006394 <__mdiff>:
 8006394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	460c      	mov	r4, r1
 800639a:	4606      	mov	r6, r0
 800639c:	4611      	mov	r1, r2
 800639e:	4620      	mov	r0, r4
 80063a0:	4690      	mov	r8, r2
 80063a2:	f7ff ffdb 	bl	800635c <__mcmp>
 80063a6:	1e05      	subs	r5, r0, #0
 80063a8:	d110      	bne.n	80063cc <__mdiff+0x38>
 80063aa:	4629      	mov	r1, r5
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff fd53 	bl	8005e58 <_Balloc>
 80063b2:	b930      	cbnz	r0, 80063c2 <__mdiff+0x2e>
 80063b4:	4b3a      	ldr	r3, [pc, #232]	; (80064a0 <__mdiff+0x10c>)
 80063b6:	4602      	mov	r2, r0
 80063b8:	f240 2132 	movw	r1, #562	; 0x232
 80063bc:	4839      	ldr	r0, [pc, #228]	; (80064a4 <__mdiff+0x110>)
 80063be:	f000 fb31 	bl	8006a24 <__assert_func>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	bfa4      	itt	ge
 80063ce:	4643      	movge	r3, r8
 80063d0:	46a0      	movge	r8, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063d8:	bfa6      	itte	ge
 80063da:	461c      	movge	r4, r3
 80063dc:	2500      	movge	r5, #0
 80063de:	2501      	movlt	r5, #1
 80063e0:	f7ff fd3a 	bl	8005e58 <_Balloc>
 80063e4:	b920      	cbnz	r0, 80063f0 <__mdiff+0x5c>
 80063e6:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <__mdiff+0x10c>)
 80063e8:	4602      	mov	r2, r0
 80063ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80063ee:	e7e5      	b.n	80063bc <__mdiff+0x28>
 80063f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063f4:	6926      	ldr	r6, [r4, #16]
 80063f6:	60c5      	str	r5, [r0, #12]
 80063f8:	f104 0914 	add.w	r9, r4, #20
 80063fc:	f108 0514 	add.w	r5, r8, #20
 8006400:	f100 0e14 	add.w	lr, r0, #20
 8006404:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800640c:	f108 0210 	add.w	r2, r8, #16
 8006410:	46f2      	mov	sl, lr
 8006412:	2100      	movs	r1, #0
 8006414:	f859 3b04 	ldr.w	r3, [r9], #4
 8006418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800641c:	fa1f f883 	uxth.w	r8, r3
 8006420:	fa11 f18b 	uxtah	r1, r1, fp
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	eba1 0808 	sub.w	r8, r1, r8
 800642a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800642e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006432:	fa1f f888 	uxth.w	r8, r8
 8006436:	1419      	asrs	r1, r3, #16
 8006438:	454e      	cmp	r6, r9
 800643a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800643e:	f84a 3b04 	str.w	r3, [sl], #4
 8006442:	d8e7      	bhi.n	8006414 <__mdiff+0x80>
 8006444:	1b33      	subs	r3, r6, r4
 8006446:	3b15      	subs	r3, #21
 8006448:	f023 0303 	bic.w	r3, r3, #3
 800644c:	3304      	adds	r3, #4
 800644e:	3415      	adds	r4, #21
 8006450:	42a6      	cmp	r6, r4
 8006452:	bf38      	it	cc
 8006454:	2304      	movcc	r3, #4
 8006456:	441d      	add	r5, r3
 8006458:	4473      	add	r3, lr
 800645a:	469e      	mov	lr, r3
 800645c:	462e      	mov	r6, r5
 800645e:	4566      	cmp	r6, ip
 8006460:	d30e      	bcc.n	8006480 <__mdiff+0xec>
 8006462:	f10c 0203 	add.w	r2, ip, #3
 8006466:	1b52      	subs	r2, r2, r5
 8006468:	f022 0203 	bic.w	r2, r2, #3
 800646c:	3d03      	subs	r5, #3
 800646e:	45ac      	cmp	ip, r5
 8006470:	bf38      	it	cc
 8006472:	2200      	movcc	r2, #0
 8006474:	441a      	add	r2, r3
 8006476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800647a:	b17b      	cbz	r3, 800649c <__mdiff+0x108>
 800647c:	6107      	str	r7, [r0, #16]
 800647e:	e7a3      	b.n	80063c8 <__mdiff+0x34>
 8006480:	f856 8b04 	ldr.w	r8, [r6], #4
 8006484:	fa11 f288 	uxtah	r2, r1, r8
 8006488:	1414      	asrs	r4, r2, #16
 800648a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800648e:	b292      	uxth	r2, r2
 8006490:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006494:	f84e 2b04 	str.w	r2, [lr], #4
 8006498:	1421      	asrs	r1, r4, #16
 800649a:	e7e0      	b.n	800645e <__mdiff+0xca>
 800649c:	3f01      	subs	r7, #1
 800649e:	e7ea      	b.n	8006476 <__mdiff+0xe2>
 80064a0:	080092e7 	.word	0x080092e7
 80064a4:	080092f8 	.word	0x080092f8

080064a8 <__d2b>:
 80064a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	4689      	mov	r9, r1
 80064ae:	2101      	movs	r1, #1
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	4690      	mov	r8, r2
 80064b6:	f7ff fccf 	bl	8005e58 <_Balloc>
 80064ba:	4604      	mov	r4, r0
 80064bc:	b930      	cbnz	r0, 80064cc <__d2b+0x24>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <__d2b+0xb0>)
 80064c2:	4826      	ldr	r0, [pc, #152]	; (800655c <__d2b+0xb4>)
 80064c4:	f240 310a 	movw	r1, #778	; 0x30a
 80064c8:	f000 faac 	bl	8006a24 <__assert_func>
 80064cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80064d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064d4:	bb35      	cbnz	r5, 8006524 <__d2b+0x7c>
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	d028      	beq.n	800652e <__d2b+0x86>
 80064dc:	4668      	mov	r0, sp
 80064de:	9600      	str	r6, [sp, #0]
 80064e0:	f7ff fd82 	bl	8005fe8 <__lo0bits>
 80064e4:	9900      	ldr	r1, [sp, #0]
 80064e6:	b300      	cbz	r0, 800652a <__d2b+0x82>
 80064e8:	9a01      	ldr	r2, [sp, #4]
 80064ea:	f1c0 0320 	rsb	r3, r0, #32
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	430b      	orrs	r3, r1
 80064f4:	40c2      	lsrs	r2, r0
 80064f6:	6163      	str	r3, [r4, #20]
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	61a3      	str	r3, [r4, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2202      	movne	r2, #2
 8006504:	2201      	moveq	r2, #1
 8006506:	6122      	str	r2, [r4, #16]
 8006508:	b1d5      	cbz	r5, 8006540 <__d2b+0x98>
 800650a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800650e:	4405      	add	r5, r0
 8006510:	f8c9 5000 	str.w	r5, [r9]
 8006514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006518:	f8c8 0000 	str.w	r0, [r8]
 800651c:	4620      	mov	r0, r4
 800651e:	b003      	add	sp, #12
 8006520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006528:	e7d5      	b.n	80064d6 <__d2b+0x2e>
 800652a:	6161      	str	r1, [r4, #20]
 800652c:	e7e5      	b.n	80064fa <__d2b+0x52>
 800652e:	a801      	add	r0, sp, #4
 8006530:	f7ff fd5a 	bl	8005fe8 <__lo0bits>
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	3020      	adds	r0, #32
 800653e:	e7e3      	b.n	8006508 <__d2b+0x60>
 8006540:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006548:	f8c9 0000 	str.w	r0, [r9]
 800654c:	6918      	ldr	r0, [r3, #16]
 800654e:	f7ff fd2b 	bl	8005fa8 <__hi0bits>
 8006552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006556:	e7df      	b.n	8006518 <__d2b+0x70>
 8006558:	080092e7 	.word	0x080092e7
 800655c:	080092f8 	.word	0x080092f8

08006560 <_calloc_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	fba1 2402 	umull	r2, r4, r1, r2
 8006566:	b94c      	cbnz	r4, 800657c <_calloc_r+0x1c>
 8006568:	4611      	mov	r1, r2
 800656a:	9201      	str	r2, [sp, #4]
 800656c:	f000 f87a 	bl	8006664 <_malloc_r>
 8006570:	9a01      	ldr	r2, [sp, #4]
 8006572:	4605      	mov	r5, r0
 8006574:	b930      	cbnz	r0, 8006584 <_calloc_r+0x24>
 8006576:	4628      	mov	r0, r5
 8006578:	b003      	add	sp, #12
 800657a:	bd30      	pop	{r4, r5, pc}
 800657c:	220c      	movs	r2, #12
 800657e:	6002      	str	r2, [r0, #0]
 8006580:	2500      	movs	r5, #0
 8006582:	e7f8      	b.n	8006576 <_calloc_r+0x16>
 8006584:	4621      	mov	r1, r4
 8006586:	f7fe f93f 	bl	8004808 <memset>
 800658a:	e7f4      	b.n	8006576 <_calloc_r+0x16>

0800658c <_free_r>:
 800658c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	d044      	beq.n	800661c <_free_r+0x90>
 8006592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f1a1 0404 	sub.w	r4, r1, #4
 800659e:	bfb8      	it	lt
 80065a0:	18e4      	addlt	r4, r4, r3
 80065a2:	f000 fa9b 	bl	8006adc <__malloc_lock>
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <_free_r+0x94>)
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x30>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	b003      	add	sp, #12
 80065b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b8:	f000 ba96 	b.w	8006ae8 <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x46>
 80065c0:	6825      	ldr	r5, [r4, #0]
 80065c2:	1961      	adds	r1, r4, r5
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1949      	addeq	r1, r1, r5
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x22>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x50>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x46>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1855      	adds	r5, r2, r1
 80065e0:	42a5      	cmp	r5, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x70>
 80065e4:	6824      	ldr	r4, [r4, #0]
 80065e6:	4421      	add	r1, r4
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x26>
 80065f0:	681c      	ldr	r4, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	6053      	str	r3, [r2, #4]
 80065f6:	4421      	add	r1, r4
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x26>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x78>
 80065fe:	230c      	movs	r3, #12
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x26>
 8006604:	6825      	ldr	r5, [r4, #0]
 8006606:	1961      	adds	r1, r4, r5
 8006608:	428b      	cmp	r3, r1
 800660a:	bf04      	itt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	bf04      	itt	eq
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	6054      	str	r4, [r2, #4]
 800661a:	e7ca      	b.n	80065b2 <_free_r+0x26>
 800661c:	b003      	add	sp, #12
 800661e:	bd30      	pop	{r4, r5, pc}
 8006620:	20000278 	.word	0x20000278

08006624 <sbrk_aligned>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4e0e      	ldr	r6, [pc, #56]	; (8006660 <sbrk_aligned+0x3c>)
 8006628:	460c      	mov	r4, r1
 800662a:	6831      	ldr	r1, [r6, #0]
 800662c:	4605      	mov	r5, r0
 800662e:	b911      	cbnz	r1, 8006636 <sbrk_aligned+0x12>
 8006630:	f000 f9e8 	bl	8006a04 <_sbrk_r>
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	4621      	mov	r1, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f000 f9e3 	bl	8006a04 <_sbrk_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d00a      	beq.n	8006658 <sbrk_aligned+0x34>
 8006642:	1cc4      	adds	r4, r0, #3
 8006644:	f024 0403 	bic.w	r4, r4, #3
 8006648:	42a0      	cmp	r0, r4
 800664a:	d007      	beq.n	800665c <sbrk_aligned+0x38>
 800664c:	1a21      	subs	r1, r4, r0
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f9d8 	bl	8006a04 <_sbrk_r>
 8006654:	3001      	adds	r0, #1
 8006656:	d101      	bne.n	800665c <sbrk_aligned+0x38>
 8006658:	f04f 34ff 	mov.w	r4, #4294967295
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	2000027c 	.word	0x2000027c

08006664 <_malloc_r>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4607      	mov	r7, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d905      	bls.n	800668c <_malloc_r+0x28>
 8006680:	230c      	movs	r3, #12
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	2600      	movs	r6, #0
 8006686:	4630      	mov	r0, r6
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	4e2e      	ldr	r6, [pc, #184]	; (8006748 <_malloc_r+0xe4>)
 800668e:	f000 fa25 	bl	8006adc <__malloc_lock>
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	461c      	mov	r4, r3
 8006696:	bb34      	cbnz	r4, 80066e6 <_malloc_r+0x82>
 8006698:	4629      	mov	r1, r5
 800669a:	4638      	mov	r0, r7
 800669c:	f7ff ffc2 	bl	8006624 <sbrk_aligned>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	4604      	mov	r4, r0
 80066a4:	d14d      	bne.n	8006742 <_malloc_r+0xde>
 80066a6:	6834      	ldr	r4, [r6, #0]
 80066a8:	4626      	mov	r6, r4
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d140      	bne.n	8006730 <_malloc_r+0xcc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	4631      	mov	r1, r6
 80066b2:	4638      	mov	r0, r7
 80066b4:	eb04 0803 	add.w	r8, r4, r3
 80066b8:	f000 f9a4 	bl	8006a04 <_sbrk_r>
 80066bc:	4580      	cmp	r8, r0
 80066be:	d13a      	bne.n	8006736 <_malloc_r+0xd2>
 80066c0:	6821      	ldr	r1, [r4, #0]
 80066c2:	3503      	adds	r5, #3
 80066c4:	1a6d      	subs	r5, r5, r1
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ffa5 	bl	8006624 <sbrk_aligned>
 80066da:	3001      	adds	r0, #1
 80066dc:	d02b      	beq.n	8006736 <_malloc_r+0xd2>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	442b      	add	r3, r5
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	e00e      	b.n	8006704 <_malloc_r+0xa0>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	1b52      	subs	r2, r2, r5
 80066ea:	d41e      	bmi.n	800672a <_malloc_r+0xc6>
 80066ec:	2a0b      	cmp	r2, #11
 80066ee:	d916      	bls.n	800671e <_malloc_r+0xba>
 80066f0:	1961      	adds	r1, r4, r5
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	bf18      	it	ne
 80066f8:	6059      	strne	r1, [r3, #4]
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	bf08      	it	eq
 80066fe:	6031      	streq	r1, [r6, #0]
 8006700:	5162      	str	r2, [r4, r5]
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	4638      	mov	r0, r7
 8006706:	f104 060b 	add.w	r6, r4, #11
 800670a:	f000 f9ed 	bl	8006ae8 <__malloc_unlock>
 800670e:	f026 0607 	bic.w	r6, r6, #7
 8006712:	1d23      	adds	r3, r4, #4
 8006714:	1af2      	subs	r2, r6, r3
 8006716:	d0b6      	beq.n	8006686 <_malloc_r+0x22>
 8006718:	1b9b      	subs	r3, r3, r6
 800671a:	50a3      	str	r3, [r4, r2]
 800671c:	e7b3      	b.n	8006686 <_malloc_r+0x22>
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	42a3      	cmp	r3, r4
 8006722:	bf0c      	ite	eq
 8006724:	6032      	streq	r2, [r6, #0]
 8006726:	605a      	strne	r2, [r3, #4]
 8006728:	e7ec      	b.n	8006704 <_malloc_r+0xa0>
 800672a:	4623      	mov	r3, r4
 800672c:	6864      	ldr	r4, [r4, #4]
 800672e:	e7b2      	b.n	8006696 <_malloc_r+0x32>
 8006730:	4634      	mov	r4, r6
 8006732:	6876      	ldr	r6, [r6, #4]
 8006734:	e7b9      	b.n	80066aa <_malloc_r+0x46>
 8006736:	230c      	movs	r3, #12
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4638      	mov	r0, r7
 800673c:	f000 f9d4 	bl	8006ae8 <__malloc_unlock>
 8006740:	e7a1      	b.n	8006686 <_malloc_r+0x22>
 8006742:	6025      	str	r5, [r4, #0]
 8006744:	e7de      	b.n	8006704 <_malloc_r+0xa0>
 8006746:	bf00      	nop
 8006748:	20000278 	.word	0x20000278

0800674c <__ssputs_r>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	688e      	ldr	r6, [r1, #8]
 8006752:	429e      	cmp	r6, r3
 8006754:	4682      	mov	sl, r0
 8006756:	460c      	mov	r4, r1
 8006758:	4690      	mov	r8, r2
 800675a:	461f      	mov	r7, r3
 800675c:	d838      	bhi.n	80067d0 <__ssputs_r+0x84>
 800675e:	898a      	ldrh	r2, [r1, #12]
 8006760:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006764:	d032      	beq.n	80067cc <__ssputs_r+0x80>
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	6909      	ldr	r1, [r1, #16]
 800676a:	eba5 0901 	sub.w	r9, r5, r1
 800676e:	6965      	ldr	r5, [r4, #20]
 8006770:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006778:	3301      	adds	r3, #1
 800677a:	444b      	add	r3, r9
 800677c:	106d      	asrs	r5, r5, #1
 800677e:	429d      	cmp	r5, r3
 8006780:	bf38      	it	cc
 8006782:	461d      	movcc	r5, r3
 8006784:	0553      	lsls	r3, r2, #21
 8006786:	d531      	bpl.n	80067ec <__ssputs_r+0xa0>
 8006788:	4629      	mov	r1, r5
 800678a:	f7ff ff6b 	bl	8006664 <_malloc_r>
 800678e:	4606      	mov	r6, r0
 8006790:	b950      	cbnz	r0, 80067a8 <__ssputs_r+0x5c>
 8006792:	230c      	movs	r3, #12
 8006794:	f8ca 3000 	str.w	r3, [sl]
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067a8:	6921      	ldr	r1, [r4, #16]
 80067aa:	464a      	mov	r2, r9
 80067ac:	f7ff fb46 	bl	8005e3c <memcpy>
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ba:	81a3      	strh	r3, [r4, #12]
 80067bc:	6126      	str	r6, [r4, #16]
 80067be:	6165      	str	r5, [r4, #20]
 80067c0:	444e      	add	r6, r9
 80067c2:	eba5 0509 	sub.w	r5, r5, r9
 80067c6:	6026      	str	r6, [r4, #0]
 80067c8:	60a5      	str	r5, [r4, #8]
 80067ca:	463e      	mov	r6, r7
 80067cc:	42be      	cmp	r6, r7
 80067ce:	d900      	bls.n	80067d2 <__ssputs_r+0x86>
 80067d0:	463e      	mov	r6, r7
 80067d2:	6820      	ldr	r0, [r4, #0]
 80067d4:	4632      	mov	r2, r6
 80067d6:	4641      	mov	r1, r8
 80067d8:	f000 f966 	bl	8006aa8 <memmove>
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	1b9b      	subs	r3, r3, r6
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	6823      	ldr	r3, [r4, #0]
 80067e4:	4433      	add	r3, r6
 80067e6:	6023      	str	r3, [r4, #0]
 80067e8:	2000      	movs	r0, #0
 80067ea:	e7db      	b.n	80067a4 <__ssputs_r+0x58>
 80067ec:	462a      	mov	r2, r5
 80067ee:	f000 f981 	bl	8006af4 <_realloc_r>
 80067f2:	4606      	mov	r6, r0
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d1e1      	bne.n	80067bc <__ssputs_r+0x70>
 80067f8:	6921      	ldr	r1, [r4, #16]
 80067fa:	4650      	mov	r0, sl
 80067fc:	f7ff fec6 	bl	800658c <_free_r>
 8006800:	e7c7      	b.n	8006792 <__ssputs_r+0x46>
	...

08006804 <_svfiprintf_r>:
 8006804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006808:	4698      	mov	r8, r3
 800680a:	898b      	ldrh	r3, [r1, #12]
 800680c:	061b      	lsls	r3, r3, #24
 800680e:	b09d      	sub	sp, #116	; 0x74
 8006810:	4607      	mov	r7, r0
 8006812:	460d      	mov	r5, r1
 8006814:	4614      	mov	r4, r2
 8006816:	d50e      	bpl.n	8006836 <_svfiprintf_r+0x32>
 8006818:	690b      	ldr	r3, [r1, #16]
 800681a:	b963      	cbnz	r3, 8006836 <_svfiprintf_r+0x32>
 800681c:	2140      	movs	r1, #64	; 0x40
 800681e:	f7ff ff21 	bl	8006664 <_malloc_r>
 8006822:	6028      	str	r0, [r5, #0]
 8006824:	6128      	str	r0, [r5, #16]
 8006826:	b920      	cbnz	r0, 8006832 <_svfiprintf_r+0x2e>
 8006828:	230c      	movs	r3, #12
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	f04f 30ff 	mov.w	r0, #4294967295
 8006830:	e0d1      	b.n	80069d6 <_svfiprintf_r+0x1d2>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	616b      	str	r3, [r5, #20]
 8006836:	2300      	movs	r3, #0
 8006838:	9309      	str	r3, [sp, #36]	; 0x24
 800683a:	2320      	movs	r3, #32
 800683c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006840:	f8cd 800c 	str.w	r8, [sp, #12]
 8006844:	2330      	movs	r3, #48	; 0x30
 8006846:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80069f0 <_svfiprintf_r+0x1ec>
 800684a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800684e:	f04f 0901 	mov.w	r9, #1
 8006852:	4623      	mov	r3, r4
 8006854:	469a      	mov	sl, r3
 8006856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800685a:	b10a      	cbz	r2, 8006860 <_svfiprintf_r+0x5c>
 800685c:	2a25      	cmp	r2, #37	; 0x25
 800685e:	d1f9      	bne.n	8006854 <_svfiprintf_r+0x50>
 8006860:	ebba 0b04 	subs.w	fp, sl, r4
 8006864:	d00b      	beq.n	800687e <_svfiprintf_r+0x7a>
 8006866:	465b      	mov	r3, fp
 8006868:	4622      	mov	r2, r4
 800686a:	4629      	mov	r1, r5
 800686c:	4638      	mov	r0, r7
 800686e:	f7ff ff6d 	bl	800674c <__ssputs_r>
 8006872:	3001      	adds	r0, #1
 8006874:	f000 80aa 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800687a:	445a      	add	r2, fp
 800687c:	9209      	str	r2, [sp, #36]	; 0x24
 800687e:	f89a 3000 	ldrb.w	r3, [sl]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a2 	beq.w	80069cc <_svfiprintf_r+0x1c8>
 8006888:	2300      	movs	r3, #0
 800688a:	f04f 32ff 	mov.w	r2, #4294967295
 800688e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006892:	f10a 0a01 	add.w	sl, sl, #1
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	9307      	str	r3, [sp, #28]
 800689a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800689e:	931a      	str	r3, [sp, #104]	; 0x68
 80068a0:	4654      	mov	r4, sl
 80068a2:	2205      	movs	r2, #5
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	4851      	ldr	r0, [pc, #324]	; (80069f0 <_svfiprintf_r+0x1ec>)
 80068aa:	f7f9 fca1 	bl	80001f0 <memchr>
 80068ae:	9a04      	ldr	r2, [sp, #16]
 80068b0:	b9d8      	cbnz	r0, 80068ea <_svfiprintf_r+0xe6>
 80068b2:	06d0      	lsls	r0, r2, #27
 80068b4:	bf44      	itt	mi
 80068b6:	2320      	movmi	r3, #32
 80068b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068bc:	0711      	lsls	r1, r2, #28
 80068be:	bf44      	itt	mi
 80068c0:	232b      	movmi	r3, #43	; 0x2b
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068c6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ca:	2b2a      	cmp	r3, #42	; 0x2a
 80068cc:	d015      	beq.n	80068fa <_svfiprintf_r+0xf6>
 80068ce:	9a07      	ldr	r2, [sp, #28]
 80068d0:	4654      	mov	r4, sl
 80068d2:	2000      	movs	r0, #0
 80068d4:	f04f 0c0a 	mov.w	ip, #10
 80068d8:	4621      	mov	r1, r4
 80068da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068de:	3b30      	subs	r3, #48	; 0x30
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d94e      	bls.n	8006982 <_svfiprintf_r+0x17e>
 80068e4:	b1b0      	cbz	r0, 8006914 <_svfiprintf_r+0x110>
 80068e6:	9207      	str	r2, [sp, #28]
 80068e8:	e014      	b.n	8006914 <_svfiprintf_r+0x110>
 80068ea:	eba0 0308 	sub.w	r3, r0, r8
 80068ee:	fa09 f303 	lsl.w	r3, r9, r3
 80068f2:	4313      	orrs	r3, r2
 80068f4:	9304      	str	r3, [sp, #16]
 80068f6:	46a2      	mov	sl, r4
 80068f8:	e7d2      	b.n	80068a0 <_svfiprintf_r+0x9c>
 80068fa:	9b03      	ldr	r3, [sp, #12]
 80068fc:	1d19      	adds	r1, r3, #4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	9103      	str	r1, [sp, #12]
 8006902:	2b00      	cmp	r3, #0
 8006904:	bfbb      	ittet	lt
 8006906:	425b      	neglt	r3, r3
 8006908:	f042 0202 	orrlt.w	r2, r2, #2
 800690c:	9307      	strge	r3, [sp, #28]
 800690e:	9307      	strlt	r3, [sp, #28]
 8006910:	bfb8      	it	lt
 8006912:	9204      	strlt	r2, [sp, #16]
 8006914:	7823      	ldrb	r3, [r4, #0]
 8006916:	2b2e      	cmp	r3, #46	; 0x2e
 8006918:	d10c      	bne.n	8006934 <_svfiprintf_r+0x130>
 800691a:	7863      	ldrb	r3, [r4, #1]
 800691c:	2b2a      	cmp	r3, #42	; 0x2a
 800691e:	d135      	bne.n	800698c <_svfiprintf_r+0x188>
 8006920:	9b03      	ldr	r3, [sp, #12]
 8006922:	1d1a      	adds	r2, r3, #4
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	9203      	str	r2, [sp, #12]
 8006928:	2b00      	cmp	r3, #0
 800692a:	bfb8      	it	lt
 800692c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006930:	3402      	adds	r4, #2
 8006932:	9305      	str	r3, [sp, #20]
 8006934:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a00 <_svfiprintf_r+0x1fc>
 8006938:	7821      	ldrb	r1, [r4, #0]
 800693a:	2203      	movs	r2, #3
 800693c:	4650      	mov	r0, sl
 800693e:	f7f9 fc57 	bl	80001f0 <memchr>
 8006942:	b140      	cbz	r0, 8006956 <_svfiprintf_r+0x152>
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	eba0 000a 	sub.w	r0, r0, sl
 800694a:	fa03 f000 	lsl.w	r0, r3, r0
 800694e:	9b04      	ldr	r3, [sp, #16]
 8006950:	4303      	orrs	r3, r0
 8006952:	3401      	adds	r4, #1
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695a:	4826      	ldr	r0, [pc, #152]	; (80069f4 <_svfiprintf_r+0x1f0>)
 800695c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006960:	2206      	movs	r2, #6
 8006962:	f7f9 fc45 	bl	80001f0 <memchr>
 8006966:	2800      	cmp	r0, #0
 8006968:	d038      	beq.n	80069dc <_svfiprintf_r+0x1d8>
 800696a:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <_svfiprintf_r+0x1f4>)
 800696c:	bb1b      	cbnz	r3, 80069b6 <_svfiprintf_r+0x1b2>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	3307      	adds	r3, #7
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	3308      	adds	r3, #8
 8006978:	9303      	str	r3, [sp, #12]
 800697a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800697c:	4433      	add	r3, r6
 800697e:	9309      	str	r3, [sp, #36]	; 0x24
 8006980:	e767      	b.n	8006852 <_svfiprintf_r+0x4e>
 8006982:	fb0c 3202 	mla	r2, ip, r2, r3
 8006986:	460c      	mov	r4, r1
 8006988:	2001      	movs	r0, #1
 800698a:	e7a5      	b.n	80068d8 <_svfiprintf_r+0xd4>
 800698c:	2300      	movs	r3, #0
 800698e:	3401      	adds	r4, #1
 8006990:	9305      	str	r3, [sp, #20]
 8006992:	4619      	mov	r1, r3
 8006994:	f04f 0c0a 	mov.w	ip, #10
 8006998:	4620      	mov	r0, r4
 800699a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800699e:	3a30      	subs	r2, #48	; 0x30
 80069a0:	2a09      	cmp	r2, #9
 80069a2:	d903      	bls.n	80069ac <_svfiprintf_r+0x1a8>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0c5      	beq.n	8006934 <_svfiprintf_r+0x130>
 80069a8:	9105      	str	r1, [sp, #20]
 80069aa:	e7c3      	b.n	8006934 <_svfiprintf_r+0x130>
 80069ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b0:	4604      	mov	r4, r0
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7f0      	b.n	8006998 <_svfiprintf_r+0x194>
 80069b6:	ab03      	add	r3, sp, #12
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	462a      	mov	r2, r5
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <_svfiprintf_r+0x1f8>)
 80069be:	a904      	add	r1, sp, #16
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7fd ffc9 	bl	8004958 <_printf_float>
 80069c6:	1c42      	adds	r2, r0, #1
 80069c8:	4606      	mov	r6, r0
 80069ca:	d1d6      	bne.n	800697a <_svfiprintf_r+0x176>
 80069cc:	89ab      	ldrh	r3, [r5, #12]
 80069ce:	065b      	lsls	r3, r3, #25
 80069d0:	f53f af2c 	bmi.w	800682c <_svfiprintf_r+0x28>
 80069d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069d6:	b01d      	add	sp, #116	; 0x74
 80069d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	462a      	mov	r2, r5
 80069e2:	4b06      	ldr	r3, [pc, #24]	; (80069fc <_svfiprintf_r+0x1f8>)
 80069e4:	a904      	add	r1, sp, #16
 80069e6:	4638      	mov	r0, r7
 80069e8:	f7fe fa5a 	bl	8004ea0 <_printf_i>
 80069ec:	e7eb      	b.n	80069c6 <_svfiprintf_r+0x1c2>
 80069ee:	bf00      	nop
 80069f0:	08009454 	.word	0x08009454
 80069f4:	0800945e 	.word	0x0800945e
 80069f8:	08004959 	.word	0x08004959
 80069fc:	0800674d 	.word	0x0800674d
 8006a00:	0800945a 	.word	0x0800945a

08006a04 <_sbrk_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	4d06      	ldr	r5, [pc, #24]	; (8006a20 <_sbrk_r+0x1c>)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f002 f930 	bl	8008c74 <_sbrk>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_sbrk_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_sbrk_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20000280 	.word	0x20000280

08006a24 <__assert_func>:
 8006a24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a26:	4614      	mov	r4, r2
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b09      	ldr	r3, [pc, #36]	; (8006a50 <__assert_func+0x2c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4605      	mov	r5, r0
 8006a30:	68d8      	ldr	r0, [r3, #12]
 8006a32:	b14c      	cbz	r4, 8006a48 <__assert_func+0x24>
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <__assert_func+0x30>)
 8006a36:	9100      	str	r1, [sp, #0]
 8006a38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a3c:	4906      	ldr	r1, [pc, #24]	; (8006a58 <__assert_func+0x34>)
 8006a3e:	462b      	mov	r3, r5
 8006a40:	f000 f80e 	bl	8006a60 <fiprintf>
 8006a44:	f000 faac 	bl	8006fa0 <abort>
 8006a48:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <__assert_func+0x38>)
 8006a4a:	461c      	mov	r4, r3
 8006a4c:	e7f3      	b.n	8006a36 <__assert_func+0x12>
 8006a4e:	bf00      	nop
 8006a50:	20000030 	.word	0x20000030
 8006a54:	08009465 	.word	0x08009465
 8006a58:	08009472 	.word	0x08009472
 8006a5c:	080094a0 	.word	0x080094a0

08006a60 <fiprintf>:
 8006a60:	b40e      	push	{r1, r2, r3}
 8006a62:	b503      	push	{r0, r1, lr}
 8006a64:	4601      	mov	r1, r0
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	4805      	ldr	r0, [pc, #20]	; (8006a80 <fiprintf+0x20>)
 8006a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	f000 f897 	bl	8006ba4 <_vfiprintf_r>
 8006a76:	b002      	add	sp, #8
 8006a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a7c:	b003      	add	sp, #12
 8006a7e:	4770      	bx	lr
 8006a80:	20000030 	.word	0x20000030

08006a84 <__ascii_mbtowc>:
 8006a84:	b082      	sub	sp, #8
 8006a86:	b901      	cbnz	r1, 8006a8a <__ascii_mbtowc+0x6>
 8006a88:	a901      	add	r1, sp, #4
 8006a8a:	b142      	cbz	r2, 8006a9e <__ascii_mbtowc+0x1a>
 8006a8c:	b14b      	cbz	r3, 8006aa2 <__ascii_mbtowc+0x1e>
 8006a8e:	7813      	ldrb	r3, [r2, #0]
 8006a90:	600b      	str	r3, [r1, #0]
 8006a92:	7812      	ldrb	r2, [r2, #0]
 8006a94:	1e10      	subs	r0, r2, #0
 8006a96:	bf18      	it	ne
 8006a98:	2001      	movne	r0, #1
 8006a9a:	b002      	add	sp, #8
 8006a9c:	4770      	bx	lr
 8006a9e:	4610      	mov	r0, r2
 8006aa0:	e7fb      	b.n	8006a9a <__ascii_mbtowc+0x16>
 8006aa2:	f06f 0001 	mvn.w	r0, #1
 8006aa6:	e7f8      	b.n	8006a9a <__ascii_mbtowc+0x16>

08006aa8 <memmove>:
 8006aa8:	4288      	cmp	r0, r1
 8006aaa:	b510      	push	{r4, lr}
 8006aac:	eb01 0402 	add.w	r4, r1, r2
 8006ab0:	d902      	bls.n	8006ab8 <memmove+0x10>
 8006ab2:	4284      	cmp	r4, r0
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	d807      	bhi.n	8006ac8 <memmove+0x20>
 8006ab8:	1e43      	subs	r3, r0, #1
 8006aba:	42a1      	cmp	r1, r4
 8006abc:	d008      	beq.n	8006ad0 <memmove+0x28>
 8006abe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ac2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ac6:	e7f8      	b.n	8006aba <memmove+0x12>
 8006ac8:	4402      	add	r2, r0
 8006aca:	4601      	mov	r1, r0
 8006acc:	428a      	cmp	r2, r1
 8006ace:	d100      	bne.n	8006ad2 <memmove+0x2a>
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ad6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ada:	e7f7      	b.n	8006acc <memmove+0x24>

08006adc <__malloc_lock>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__malloc_lock+0x8>)
 8006ade:	f000 bc1f 	b.w	8007320 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	20000284 	.word	0x20000284

08006ae8 <__malloc_unlock>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__malloc_unlock+0x8>)
 8006aea:	f000 bc1a 	b.w	8007322 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	20000284 	.word	0x20000284

08006af4 <_realloc_r>:
 8006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006af8:	4680      	mov	r8, r0
 8006afa:	4614      	mov	r4, r2
 8006afc:	460e      	mov	r6, r1
 8006afe:	b921      	cbnz	r1, 8006b0a <_realloc_r+0x16>
 8006b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b04:	4611      	mov	r1, r2
 8006b06:	f7ff bdad 	b.w	8006664 <_malloc_r>
 8006b0a:	b92a      	cbnz	r2, 8006b18 <_realloc_r+0x24>
 8006b0c:	f7ff fd3e 	bl	800658c <_free_r>
 8006b10:	4625      	mov	r5, r4
 8006b12:	4628      	mov	r0, r5
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b18:	f000 fc6a 	bl	80073f0 <_malloc_usable_size_r>
 8006b1c:	4284      	cmp	r4, r0
 8006b1e:	4607      	mov	r7, r0
 8006b20:	d802      	bhi.n	8006b28 <_realloc_r+0x34>
 8006b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b26:	d812      	bhi.n	8006b4e <_realloc_r+0x5a>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	f7ff fd9a 	bl	8006664 <_malloc_r>
 8006b30:	4605      	mov	r5, r0
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d0ed      	beq.n	8006b12 <_realloc_r+0x1e>
 8006b36:	42bc      	cmp	r4, r7
 8006b38:	4622      	mov	r2, r4
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	bf28      	it	cs
 8006b3e:	463a      	movcs	r2, r7
 8006b40:	f7ff f97c 	bl	8005e3c <memcpy>
 8006b44:	4631      	mov	r1, r6
 8006b46:	4640      	mov	r0, r8
 8006b48:	f7ff fd20 	bl	800658c <_free_r>
 8006b4c:	e7e1      	b.n	8006b12 <_realloc_r+0x1e>
 8006b4e:	4635      	mov	r5, r6
 8006b50:	e7df      	b.n	8006b12 <_realloc_r+0x1e>

08006b52 <__sfputc_r>:
 8006b52:	6893      	ldr	r3, [r2, #8]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	b410      	push	{r4}
 8006b5a:	6093      	str	r3, [r2, #8]
 8006b5c:	da08      	bge.n	8006b70 <__sfputc_r+0x1e>
 8006b5e:	6994      	ldr	r4, [r2, #24]
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	db01      	blt.n	8006b68 <__sfputc_r+0x16>
 8006b64:	290a      	cmp	r1, #10
 8006b66:	d103      	bne.n	8006b70 <__sfputc_r+0x1e>
 8006b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b6c:	f000 b94a 	b.w	8006e04 <__swbuf_r>
 8006b70:	6813      	ldr	r3, [r2, #0]
 8006b72:	1c58      	adds	r0, r3, #1
 8006b74:	6010      	str	r0, [r2, #0]
 8006b76:	7019      	strb	r1, [r3, #0]
 8006b78:	4608      	mov	r0, r1
 8006b7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <__sfputs_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	4606      	mov	r6, r0
 8006b84:	460f      	mov	r7, r1
 8006b86:	4614      	mov	r4, r2
 8006b88:	18d5      	adds	r5, r2, r3
 8006b8a:	42ac      	cmp	r4, r5
 8006b8c:	d101      	bne.n	8006b92 <__sfputs_r+0x12>
 8006b8e:	2000      	movs	r0, #0
 8006b90:	e007      	b.n	8006ba2 <__sfputs_r+0x22>
 8006b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b96:	463a      	mov	r2, r7
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff ffda 	bl	8006b52 <__sfputc_r>
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	d1f3      	bne.n	8006b8a <__sfputs_r+0xa>
 8006ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ba4 <_vfiprintf_r>:
 8006ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba8:	460d      	mov	r5, r1
 8006baa:	b09d      	sub	sp, #116	; 0x74
 8006bac:	4614      	mov	r4, r2
 8006bae:	4698      	mov	r8, r3
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	b118      	cbz	r0, 8006bbc <_vfiprintf_r+0x18>
 8006bb4:	6983      	ldr	r3, [r0, #24]
 8006bb6:	b90b      	cbnz	r3, 8006bbc <_vfiprintf_r+0x18>
 8006bb8:	f000 fb14 	bl	80071e4 <__sinit>
 8006bbc:	4b89      	ldr	r3, [pc, #548]	; (8006de4 <_vfiprintf_r+0x240>)
 8006bbe:	429d      	cmp	r5, r3
 8006bc0:	d11b      	bne.n	8006bfa <_vfiprintf_r+0x56>
 8006bc2:	6875      	ldr	r5, [r6, #4]
 8006bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_vfiprintf_r+0x32>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_vfiprintf_r+0x32>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd2:	f000 fba5 	bl	8007320 <__retarget_lock_acquire_recursive>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	071b      	lsls	r3, r3, #28
 8006bda:	d501      	bpl.n	8006be0 <_vfiprintf_r+0x3c>
 8006bdc:	692b      	ldr	r3, [r5, #16]
 8006bde:	b9eb      	cbnz	r3, 8006c1c <_vfiprintf_r+0x78>
 8006be0:	4629      	mov	r1, r5
 8006be2:	4630      	mov	r0, r6
 8006be4:	f000 f96e 	bl	8006ec4 <__swsetup_r>
 8006be8:	b1c0      	cbz	r0, 8006c1c <_vfiprintf_r+0x78>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bec:	07dc      	lsls	r4, r3, #31
 8006bee:	d50e      	bpl.n	8006c0e <_vfiprintf_r+0x6a>
 8006bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf4:	b01d      	add	sp, #116	; 0x74
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfa:	4b7b      	ldr	r3, [pc, #492]	; (8006de8 <_vfiprintf_r+0x244>)
 8006bfc:	429d      	cmp	r5, r3
 8006bfe:	d101      	bne.n	8006c04 <_vfiprintf_r+0x60>
 8006c00:	68b5      	ldr	r5, [r6, #8]
 8006c02:	e7df      	b.n	8006bc4 <_vfiprintf_r+0x20>
 8006c04:	4b79      	ldr	r3, [pc, #484]	; (8006dec <_vfiprintf_r+0x248>)
 8006c06:	429d      	cmp	r5, r3
 8006c08:	bf08      	it	eq
 8006c0a:	68f5      	ldreq	r5, [r6, #12]
 8006c0c:	e7da      	b.n	8006bc4 <_vfiprintf_r+0x20>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	0598      	lsls	r0, r3, #22
 8006c12:	d4ed      	bmi.n	8006bf0 <_vfiprintf_r+0x4c>
 8006c14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c16:	f000 fb84 	bl	8007322 <__retarget_lock_release_recursive>
 8006c1a:	e7e9      	b.n	8006bf0 <_vfiprintf_r+0x4c>
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c20:	2320      	movs	r3, #32
 8006c22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c2a:	2330      	movs	r3, #48	; 0x30
 8006c2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df0 <_vfiprintf_r+0x24c>
 8006c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c34:	f04f 0901 	mov.w	r9, #1
 8006c38:	4623      	mov	r3, r4
 8006c3a:	469a      	mov	sl, r3
 8006c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c40:	b10a      	cbz	r2, 8006c46 <_vfiprintf_r+0xa2>
 8006c42:	2a25      	cmp	r2, #37	; 0x25
 8006c44:	d1f9      	bne.n	8006c3a <_vfiprintf_r+0x96>
 8006c46:	ebba 0b04 	subs.w	fp, sl, r4
 8006c4a:	d00b      	beq.n	8006c64 <_vfiprintf_r+0xc0>
 8006c4c:	465b      	mov	r3, fp
 8006c4e:	4622      	mov	r2, r4
 8006c50:	4629      	mov	r1, r5
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7ff ff94 	bl	8006b80 <__sfputs_r>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f000 80aa 	beq.w	8006db2 <_vfiprintf_r+0x20e>
 8006c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c60:	445a      	add	r2, fp
 8006c62:	9209      	str	r2, [sp, #36]	; 0x24
 8006c64:	f89a 3000 	ldrb.w	r3, [sl]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 80a2 	beq.w	8006db2 <_vfiprintf_r+0x20e>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f04f 32ff 	mov.w	r2, #4294967295
 8006c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c78:	f10a 0a01 	add.w	sl, sl, #1
 8006c7c:	9304      	str	r3, [sp, #16]
 8006c7e:	9307      	str	r3, [sp, #28]
 8006c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c84:	931a      	str	r3, [sp, #104]	; 0x68
 8006c86:	4654      	mov	r4, sl
 8006c88:	2205      	movs	r2, #5
 8006c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8e:	4858      	ldr	r0, [pc, #352]	; (8006df0 <_vfiprintf_r+0x24c>)
 8006c90:	f7f9 faae 	bl	80001f0 <memchr>
 8006c94:	9a04      	ldr	r2, [sp, #16]
 8006c96:	b9d8      	cbnz	r0, 8006cd0 <_vfiprintf_r+0x12c>
 8006c98:	06d1      	lsls	r1, r2, #27
 8006c9a:	bf44      	itt	mi
 8006c9c:	2320      	movmi	r3, #32
 8006c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca2:	0713      	lsls	r3, r2, #28
 8006ca4:	bf44      	itt	mi
 8006ca6:	232b      	movmi	r3, #43	; 0x2b
 8006ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cac:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb2:	d015      	beq.n	8006ce0 <_vfiprintf_r+0x13c>
 8006cb4:	9a07      	ldr	r2, [sp, #28]
 8006cb6:	4654      	mov	r4, sl
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f04f 0c0a 	mov.w	ip, #10
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc4:	3b30      	subs	r3, #48	; 0x30
 8006cc6:	2b09      	cmp	r3, #9
 8006cc8:	d94e      	bls.n	8006d68 <_vfiprintf_r+0x1c4>
 8006cca:	b1b0      	cbz	r0, 8006cfa <_vfiprintf_r+0x156>
 8006ccc:	9207      	str	r2, [sp, #28]
 8006cce:	e014      	b.n	8006cfa <_vfiprintf_r+0x156>
 8006cd0:	eba0 0308 	sub.w	r3, r0, r8
 8006cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	46a2      	mov	sl, r4
 8006cde:	e7d2      	b.n	8006c86 <_vfiprintf_r+0xe2>
 8006ce0:	9b03      	ldr	r3, [sp, #12]
 8006ce2:	1d19      	adds	r1, r3, #4
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	9103      	str	r1, [sp, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bfbb      	ittet	lt
 8006cec:	425b      	neglt	r3, r3
 8006cee:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf2:	9307      	strge	r3, [sp, #28]
 8006cf4:	9307      	strlt	r3, [sp, #28]
 8006cf6:	bfb8      	it	lt
 8006cf8:	9204      	strlt	r2, [sp, #16]
 8006cfa:	7823      	ldrb	r3, [r4, #0]
 8006cfc:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfe:	d10c      	bne.n	8006d1a <_vfiprintf_r+0x176>
 8006d00:	7863      	ldrb	r3, [r4, #1]
 8006d02:	2b2a      	cmp	r3, #42	; 0x2a
 8006d04:	d135      	bne.n	8006d72 <_vfiprintf_r+0x1ce>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9203      	str	r2, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfb8      	it	lt
 8006d12:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d16:	3402      	adds	r4, #2
 8006d18:	9305      	str	r3, [sp, #20]
 8006d1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e00 <_vfiprintf_r+0x25c>
 8006d1e:	7821      	ldrb	r1, [r4, #0]
 8006d20:	2203      	movs	r2, #3
 8006d22:	4650      	mov	r0, sl
 8006d24:	f7f9 fa64 	bl	80001f0 <memchr>
 8006d28:	b140      	cbz	r0, 8006d3c <_vfiprintf_r+0x198>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	eba0 000a 	sub.w	r0, r0, sl
 8006d30:	fa03 f000 	lsl.w	r0, r3, r0
 8006d34:	9b04      	ldr	r3, [sp, #16]
 8006d36:	4303      	orrs	r3, r0
 8006d38:	3401      	adds	r4, #1
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d40:	482c      	ldr	r0, [pc, #176]	; (8006df4 <_vfiprintf_r+0x250>)
 8006d42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d46:	2206      	movs	r2, #6
 8006d48:	f7f9 fa52 	bl	80001f0 <memchr>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d03f      	beq.n	8006dd0 <_vfiprintf_r+0x22c>
 8006d50:	4b29      	ldr	r3, [pc, #164]	; (8006df8 <_vfiprintf_r+0x254>)
 8006d52:	bb1b      	cbnz	r3, 8006d9c <_vfiprintf_r+0x1f8>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	3307      	adds	r3, #7
 8006d58:	f023 0307 	bic.w	r3, r3, #7
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	9303      	str	r3, [sp, #12]
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	443b      	add	r3, r7
 8006d64:	9309      	str	r3, [sp, #36]	; 0x24
 8006d66:	e767      	b.n	8006c38 <_vfiprintf_r+0x94>
 8006d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7a5      	b.n	8006cbe <_vfiprintf_r+0x11a>
 8006d72:	2300      	movs	r3, #0
 8006d74:	3401      	adds	r4, #1
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f04f 0c0a 	mov.w	ip, #10
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d84:	3a30      	subs	r2, #48	; 0x30
 8006d86:	2a09      	cmp	r2, #9
 8006d88:	d903      	bls.n	8006d92 <_vfiprintf_r+0x1ee>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c5      	beq.n	8006d1a <_vfiprintf_r+0x176>
 8006d8e:	9105      	str	r1, [sp, #20]
 8006d90:	e7c3      	b.n	8006d1a <_vfiprintf_r+0x176>
 8006d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d96:	4604      	mov	r4, r0
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f0      	b.n	8006d7e <_vfiprintf_r+0x1da>
 8006d9c:	ab03      	add	r3, sp, #12
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	462a      	mov	r2, r5
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <_vfiprintf_r+0x258>)
 8006da4:	a904      	add	r1, sp, #16
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7fd fdd6 	bl	8004958 <_printf_float>
 8006dac:	4607      	mov	r7, r0
 8006dae:	1c78      	adds	r0, r7, #1
 8006db0:	d1d6      	bne.n	8006d60 <_vfiprintf_r+0x1bc>
 8006db2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db4:	07d9      	lsls	r1, r3, #31
 8006db6:	d405      	bmi.n	8006dc4 <_vfiprintf_r+0x220>
 8006db8:	89ab      	ldrh	r3, [r5, #12]
 8006dba:	059a      	lsls	r2, r3, #22
 8006dbc:	d402      	bmi.n	8006dc4 <_vfiprintf_r+0x220>
 8006dbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc0:	f000 faaf 	bl	8007322 <__retarget_lock_release_recursive>
 8006dc4:	89ab      	ldrh	r3, [r5, #12]
 8006dc6:	065b      	lsls	r3, r3, #25
 8006dc8:	f53f af12 	bmi.w	8006bf0 <_vfiprintf_r+0x4c>
 8006dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dce:	e711      	b.n	8006bf4 <_vfiprintf_r+0x50>
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <_vfiprintf_r+0x258>)
 8006dd8:	a904      	add	r1, sp, #16
 8006dda:	4630      	mov	r0, r6
 8006ddc:	f7fe f860 	bl	8004ea0 <_printf_i>
 8006de0:	e7e4      	b.n	8006dac <_vfiprintf_r+0x208>
 8006de2:	bf00      	nop
 8006de4:	080095cc 	.word	0x080095cc
 8006de8:	080095ec 	.word	0x080095ec
 8006dec:	080095ac 	.word	0x080095ac
 8006df0:	08009454 	.word	0x08009454
 8006df4:	0800945e 	.word	0x0800945e
 8006df8:	08004959 	.word	0x08004959
 8006dfc:	08006b81 	.word	0x08006b81
 8006e00:	0800945a 	.word	0x0800945a

08006e04 <__swbuf_r>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	460e      	mov	r6, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	4605      	mov	r5, r0
 8006e0c:	b118      	cbz	r0, 8006e16 <__swbuf_r+0x12>
 8006e0e:	6983      	ldr	r3, [r0, #24]
 8006e10:	b90b      	cbnz	r3, 8006e16 <__swbuf_r+0x12>
 8006e12:	f000 f9e7 	bl	80071e4 <__sinit>
 8006e16:	4b21      	ldr	r3, [pc, #132]	; (8006e9c <__swbuf_r+0x98>)
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d12b      	bne.n	8006e74 <__swbuf_r+0x70>
 8006e1c:	686c      	ldr	r4, [r5, #4]
 8006e1e:	69a3      	ldr	r3, [r4, #24]
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	071a      	lsls	r2, r3, #28
 8006e26:	d52f      	bpl.n	8006e88 <__swbuf_r+0x84>
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	b36b      	cbz	r3, 8006e88 <__swbuf_r+0x84>
 8006e2c:	6923      	ldr	r3, [r4, #16]
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1ac0      	subs	r0, r0, r3
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	b2f6      	uxtb	r6, r6
 8006e36:	4283      	cmp	r3, r0
 8006e38:	4637      	mov	r7, r6
 8006e3a:	dc04      	bgt.n	8006e46 <__swbuf_r+0x42>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f93c 	bl	80070bc <_fflush_r>
 8006e44:	bb30      	cbnz	r0, 8006e94 <__swbuf_r+0x90>
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	60a3      	str	r3, [r4, #8]
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	1c5a      	adds	r2, r3, #1
 8006e50:	6022      	str	r2, [r4, #0]
 8006e52:	701e      	strb	r6, [r3, #0]
 8006e54:	6963      	ldr	r3, [r4, #20]
 8006e56:	3001      	adds	r0, #1
 8006e58:	4283      	cmp	r3, r0
 8006e5a:	d004      	beq.n	8006e66 <__swbuf_r+0x62>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	07db      	lsls	r3, r3, #31
 8006e60:	d506      	bpl.n	8006e70 <__swbuf_r+0x6c>
 8006e62:	2e0a      	cmp	r6, #10
 8006e64:	d104      	bne.n	8006e70 <__swbuf_r+0x6c>
 8006e66:	4621      	mov	r1, r4
 8006e68:	4628      	mov	r0, r5
 8006e6a:	f000 f927 	bl	80070bc <_fflush_r>
 8006e6e:	b988      	cbnz	r0, 8006e94 <__swbuf_r+0x90>
 8006e70:	4638      	mov	r0, r7
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	4b0a      	ldr	r3, [pc, #40]	; (8006ea0 <__swbuf_r+0x9c>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d101      	bne.n	8006e7e <__swbuf_r+0x7a>
 8006e7a:	68ac      	ldr	r4, [r5, #8]
 8006e7c:	e7cf      	b.n	8006e1e <__swbuf_r+0x1a>
 8006e7e:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <__swbuf_r+0xa0>)
 8006e80:	429c      	cmp	r4, r3
 8006e82:	bf08      	it	eq
 8006e84:	68ec      	ldreq	r4, [r5, #12]
 8006e86:	e7ca      	b.n	8006e1e <__swbuf_r+0x1a>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f81a 	bl	8006ec4 <__swsetup_r>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d0cb      	beq.n	8006e2c <__swbuf_r+0x28>
 8006e94:	f04f 37ff 	mov.w	r7, #4294967295
 8006e98:	e7ea      	b.n	8006e70 <__swbuf_r+0x6c>
 8006e9a:	bf00      	nop
 8006e9c:	080095cc 	.word	0x080095cc
 8006ea0:	080095ec 	.word	0x080095ec
 8006ea4:	080095ac 	.word	0x080095ac

08006ea8 <__ascii_wctomb>:
 8006ea8:	b149      	cbz	r1, 8006ebe <__ascii_wctomb+0x16>
 8006eaa:	2aff      	cmp	r2, #255	; 0xff
 8006eac:	bf85      	ittet	hi
 8006eae:	238a      	movhi	r3, #138	; 0x8a
 8006eb0:	6003      	strhi	r3, [r0, #0]
 8006eb2:	700a      	strbls	r2, [r1, #0]
 8006eb4:	f04f 30ff 	movhi.w	r0, #4294967295
 8006eb8:	bf98      	it	ls
 8006eba:	2001      	movls	r0, #1
 8006ebc:	4770      	bx	lr
 8006ebe:	4608      	mov	r0, r1
 8006ec0:	4770      	bx	lr
	...

08006ec4 <__swsetup_r>:
 8006ec4:	4b32      	ldr	r3, [pc, #200]	; (8006f90 <__swsetup_r+0xcc>)
 8006ec6:	b570      	push	{r4, r5, r6, lr}
 8006ec8:	681d      	ldr	r5, [r3, #0]
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	b125      	cbz	r5, 8006eda <__swsetup_r+0x16>
 8006ed0:	69ab      	ldr	r3, [r5, #24]
 8006ed2:	b913      	cbnz	r3, 8006eda <__swsetup_r+0x16>
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	f000 f985 	bl	80071e4 <__sinit>
 8006eda:	4b2e      	ldr	r3, [pc, #184]	; (8006f94 <__swsetup_r+0xd0>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d10f      	bne.n	8006f00 <__swsetup_r+0x3c>
 8006ee0:	686c      	ldr	r4, [r5, #4]
 8006ee2:	89a3      	ldrh	r3, [r4, #12]
 8006ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ee8:	0719      	lsls	r1, r3, #28
 8006eea:	d42c      	bmi.n	8006f46 <__swsetup_r+0x82>
 8006eec:	06dd      	lsls	r5, r3, #27
 8006eee:	d411      	bmi.n	8006f14 <__swsetup_r+0x50>
 8006ef0:	2309      	movs	r3, #9
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ef8:	81a3      	strh	r3, [r4, #12]
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	e03e      	b.n	8006f7e <__swsetup_r+0xba>
 8006f00:	4b25      	ldr	r3, [pc, #148]	; (8006f98 <__swsetup_r+0xd4>)
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d101      	bne.n	8006f0a <__swsetup_r+0x46>
 8006f06:	68ac      	ldr	r4, [r5, #8]
 8006f08:	e7eb      	b.n	8006ee2 <__swsetup_r+0x1e>
 8006f0a:	4b24      	ldr	r3, [pc, #144]	; (8006f9c <__swsetup_r+0xd8>)
 8006f0c:	429c      	cmp	r4, r3
 8006f0e:	bf08      	it	eq
 8006f10:	68ec      	ldreq	r4, [r5, #12]
 8006f12:	e7e6      	b.n	8006ee2 <__swsetup_r+0x1e>
 8006f14:	0758      	lsls	r0, r3, #29
 8006f16:	d512      	bpl.n	8006f3e <__swsetup_r+0x7a>
 8006f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f1a:	b141      	cbz	r1, 8006f2e <__swsetup_r+0x6a>
 8006f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <__swsetup_r+0x66>
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7ff fb31 	bl	800658c <_free_r>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	2300      	movs	r3, #0
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0308 	orr.w	r3, r3, #8
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	b94b      	cbnz	r3, 8006f5e <__swsetup_r+0x9a>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f54:	d003      	beq.n	8006f5e <__swsetup_r+0x9a>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f000 fa09 	bl	8007370 <__smakebuf_r>
 8006f5e:	89a0      	ldrh	r0, [r4, #12]
 8006f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f64:	f010 0301 	ands.w	r3, r0, #1
 8006f68:	d00a      	beq.n	8006f80 <__swsetup_r+0xbc>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60a3      	str	r3, [r4, #8]
 8006f6e:	6963      	ldr	r3, [r4, #20]
 8006f70:	425b      	negs	r3, r3
 8006f72:	61a3      	str	r3, [r4, #24]
 8006f74:	6923      	ldr	r3, [r4, #16]
 8006f76:	b943      	cbnz	r3, 8006f8a <__swsetup_r+0xc6>
 8006f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f7c:	d1ba      	bne.n	8006ef4 <__swsetup_r+0x30>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	0781      	lsls	r1, r0, #30
 8006f82:	bf58      	it	pl
 8006f84:	6963      	ldrpl	r3, [r4, #20]
 8006f86:	60a3      	str	r3, [r4, #8]
 8006f88:	e7f4      	b.n	8006f74 <__swsetup_r+0xb0>
 8006f8a:	2000      	movs	r0, #0
 8006f8c:	e7f7      	b.n	8006f7e <__swsetup_r+0xba>
 8006f8e:	bf00      	nop
 8006f90:	20000030 	.word	0x20000030
 8006f94:	080095cc 	.word	0x080095cc
 8006f98:	080095ec 	.word	0x080095ec
 8006f9c:	080095ac 	.word	0x080095ac

08006fa0 <abort>:
 8006fa0:	b508      	push	{r3, lr}
 8006fa2:	2006      	movs	r0, #6
 8006fa4:	f000 fa54 	bl	8007450 <raise>
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f001 fe79 	bl	8008ca0 <_exit>
	...

08006fb0 <__sflush_r>:
 8006fb0:	898a      	ldrh	r2, [r1, #12]
 8006fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	0710      	lsls	r0, r2, #28
 8006fba:	460c      	mov	r4, r1
 8006fbc:	d458      	bmi.n	8007070 <__sflush_r+0xc0>
 8006fbe:	684b      	ldr	r3, [r1, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc05      	bgt.n	8006fd0 <__sflush_r+0x20>
 8006fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dc02      	bgt.n	8006fd0 <__sflush_r+0x20>
 8006fca:	2000      	movs	r0, #0
 8006fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fd2:	2e00      	cmp	r6, #0
 8006fd4:	d0f9      	beq.n	8006fca <__sflush_r+0x1a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fdc:	682f      	ldr	r7, [r5, #0]
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	d032      	beq.n	8007048 <__sflush_r+0x98>
 8006fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	075a      	lsls	r2, r3, #29
 8006fe8:	d505      	bpl.n	8006ff6 <__sflush_r+0x46>
 8006fea:	6863      	ldr	r3, [r4, #4]
 8006fec:	1ac0      	subs	r0, r0, r3
 8006fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff0:	b10b      	cbz	r3, 8006ff6 <__sflush_r+0x46>
 8006ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ff4:	1ac0      	subs	r0, r0, r3
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ffc:	6a21      	ldr	r1, [r4, #32]
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b0      	blx	r6
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	89a3      	ldrh	r3, [r4, #12]
 8007006:	d106      	bne.n	8007016 <__sflush_r+0x66>
 8007008:	6829      	ldr	r1, [r5, #0]
 800700a:	291d      	cmp	r1, #29
 800700c:	d82c      	bhi.n	8007068 <__sflush_r+0xb8>
 800700e:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <__sflush_r+0x108>)
 8007010:	40ca      	lsrs	r2, r1
 8007012:	07d6      	lsls	r6, r2, #31
 8007014:	d528      	bpl.n	8007068 <__sflush_r+0xb8>
 8007016:	2200      	movs	r2, #0
 8007018:	6062      	str	r2, [r4, #4]
 800701a:	04d9      	lsls	r1, r3, #19
 800701c:	6922      	ldr	r2, [r4, #16]
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	d504      	bpl.n	800702c <__sflush_r+0x7c>
 8007022:	1c42      	adds	r2, r0, #1
 8007024:	d101      	bne.n	800702a <__sflush_r+0x7a>
 8007026:	682b      	ldr	r3, [r5, #0]
 8007028:	b903      	cbnz	r3, 800702c <__sflush_r+0x7c>
 800702a:	6560      	str	r0, [r4, #84]	; 0x54
 800702c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800702e:	602f      	str	r7, [r5, #0]
 8007030:	2900      	cmp	r1, #0
 8007032:	d0ca      	beq.n	8006fca <__sflush_r+0x1a>
 8007034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007038:	4299      	cmp	r1, r3
 800703a:	d002      	beq.n	8007042 <__sflush_r+0x92>
 800703c:	4628      	mov	r0, r5
 800703e:	f7ff faa5 	bl	800658c <_free_r>
 8007042:	2000      	movs	r0, #0
 8007044:	6360      	str	r0, [r4, #52]	; 0x34
 8007046:	e7c1      	b.n	8006fcc <__sflush_r+0x1c>
 8007048:	6a21      	ldr	r1, [r4, #32]
 800704a:	2301      	movs	r3, #1
 800704c:	4628      	mov	r0, r5
 800704e:	47b0      	blx	r6
 8007050:	1c41      	adds	r1, r0, #1
 8007052:	d1c7      	bne.n	8006fe4 <__sflush_r+0x34>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0c4      	beq.n	8006fe4 <__sflush_r+0x34>
 800705a:	2b1d      	cmp	r3, #29
 800705c:	d001      	beq.n	8007062 <__sflush_r+0xb2>
 800705e:	2b16      	cmp	r3, #22
 8007060:	d101      	bne.n	8007066 <__sflush_r+0xb6>
 8007062:	602f      	str	r7, [r5, #0]
 8007064:	e7b1      	b.n	8006fca <__sflush_r+0x1a>
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	e7ad      	b.n	8006fcc <__sflush_r+0x1c>
 8007070:	690f      	ldr	r7, [r1, #16]
 8007072:	2f00      	cmp	r7, #0
 8007074:	d0a9      	beq.n	8006fca <__sflush_r+0x1a>
 8007076:	0793      	lsls	r3, r2, #30
 8007078:	680e      	ldr	r6, [r1, #0]
 800707a:	bf08      	it	eq
 800707c:	694b      	ldreq	r3, [r1, #20]
 800707e:	600f      	str	r7, [r1, #0]
 8007080:	bf18      	it	ne
 8007082:	2300      	movne	r3, #0
 8007084:	eba6 0807 	sub.w	r8, r6, r7
 8007088:	608b      	str	r3, [r1, #8]
 800708a:	f1b8 0f00 	cmp.w	r8, #0
 800708e:	dd9c      	ble.n	8006fca <__sflush_r+0x1a>
 8007090:	6a21      	ldr	r1, [r4, #32]
 8007092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007094:	4643      	mov	r3, r8
 8007096:	463a      	mov	r2, r7
 8007098:	4628      	mov	r0, r5
 800709a:	47b0      	blx	r6
 800709c:	2800      	cmp	r0, #0
 800709e:	dc06      	bgt.n	80070ae <__sflush_r+0xfe>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	f04f 30ff 	mov.w	r0, #4294967295
 80070ac:	e78e      	b.n	8006fcc <__sflush_r+0x1c>
 80070ae:	4407      	add	r7, r0
 80070b0:	eba8 0800 	sub.w	r8, r8, r0
 80070b4:	e7e9      	b.n	800708a <__sflush_r+0xda>
 80070b6:	bf00      	nop
 80070b8:	20400001 	.word	0x20400001

080070bc <_fflush_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	4605      	mov	r5, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	b913      	cbnz	r3, 80070cc <_fflush_r+0x10>
 80070c6:	2500      	movs	r5, #0
 80070c8:	4628      	mov	r0, r5
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	b118      	cbz	r0, 80070d6 <_fflush_r+0x1a>
 80070ce:	6983      	ldr	r3, [r0, #24]
 80070d0:	b90b      	cbnz	r3, 80070d6 <_fflush_r+0x1a>
 80070d2:	f000 f887 	bl	80071e4 <__sinit>
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <_fflush_r+0x6c>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d11b      	bne.n	8007114 <_fflush_r+0x58>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0ef      	beq.n	80070c6 <_fflush_r+0xa>
 80070e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070e8:	07d0      	lsls	r0, r2, #31
 80070ea:	d404      	bmi.n	80070f6 <_fflush_r+0x3a>
 80070ec:	0599      	lsls	r1, r3, #22
 80070ee:	d402      	bmi.n	80070f6 <_fflush_r+0x3a>
 80070f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070f2:	f000 f915 	bl	8007320 <__retarget_lock_acquire_recursive>
 80070f6:	4628      	mov	r0, r5
 80070f8:	4621      	mov	r1, r4
 80070fa:	f7ff ff59 	bl	8006fb0 <__sflush_r>
 80070fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007100:	07da      	lsls	r2, r3, #31
 8007102:	4605      	mov	r5, r0
 8007104:	d4e0      	bmi.n	80070c8 <_fflush_r+0xc>
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	059b      	lsls	r3, r3, #22
 800710a:	d4dd      	bmi.n	80070c8 <_fflush_r+0xc>
 800710c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800710e:	f000 f908 	bl	8007322 <__retarget_lock_release_recursive>
 8007112:	e7d9      	b.n	80070c8 <_fflush_r+0xc>
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <_fflush_r+0x70>)
 8007116:	429c      	cmp	r4, r3
 8007118:	d101      	bne.n	800711e <_fflush_r+0x62>
 800711a:	68ac      	ldr	r4, [r5, #8]
 800711c:	e7df      	b.n	80070de <_fflush_r+0x22>
 800711e:	4b04      	ldr	r3, [pc, #16]	; (8007130 <_fflush_r+0x74>)
 8007120:	429c      	cmp	r4, r3
 8007122:	bf08      	it	eq
 8007124:	68ec      	ldreq	r4, [r5, #12]
 8007126:	e7da      	b.n	80070de <_fflush_r+0x22>
 8007128:	080095cc 	.word	0x080095cc
 800712c:	080095ec 	.word	0x080095ec
 8007130:	080095ac 	.word	0x080095ac

08007134 <std>:
 8007134:	2300      	movs	r3, #0
 8007136:	b510      	push	{r4, lr}
 8007138:	4604      	mov	r4, r0
 800713a:	e9c0 3300 	strd	r3, r3, [r0]
 800713e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007142:	6083      	str	r3, [r0, #8]
 8007144:	8181      	strh	r1, [r0, #12]
 8007146:	6643      	str	r3, [r0, #100]	; 0x64
 8007148:	81c2      	strh	r2, [r0, #14]
 800714a:	6183      	str	r3, [r0, #24]
 800714c:	4619      	mov	r1, r3
 800714e:	2208      	movs	r2, #8
 8007150:	305c      	adds	r0, #92	; 0x5c
 8007152:	f7fd fb59 	bl	8004808 <memset>
 8007156:	4b05      	ldr	r3, [pc, #20]	; (800716c <std+0x38>)
 8007158:	6263      	str	r3, [r4, #36]	; 0x24
 800715a:	4b05      	ldr	r3, [pc, #20]	; (8007170 <std+0x3c>)
 800715c:	62a3      	str	r3, [r4, #40]	; 0x28
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <std+0x40>)
 8007160:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x44>)
 8007164:	6224      	str	r4, [r4, #32]
 8007166:	6323      	str	r3, [r4, #48]	; 0x30
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	08007489 	.word	0x08007489
 8007170:	080074ab 	.word	0x080074ab
 8007174:	080074e3 	.word	0x080074e3
 8007178:	08007507 	.word	0x08007507

0800717c <_cleanup_r>:
 800717c:	4901      	ldr	r1, [pc, #4]	; (8007184 <_cleanup_r+0x8>)
 800717e:	f000 b8af 	b.w	80072e0 <_fwalk_reent>
 8007182:	bf00      	nop
 8007184:	080070bd 	.word	0x080070bd

08007188 <__sfmoreglue>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	2268      	movs	r2, #104	; 0x68
 800718c:	1e4d      	subs	r5, r1, #1
 800718e:	4355      	muls	r5, r2
 8007190:	460e      	mov	r6, r1
 8007192:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007196:	f7ff fa65 	bl	8006664 <_malloc_r>
 800719a:	4604      	mov	r4, r0
 800719c:	b140      	cbz	r0, 80071b0 <__sfmoreglue+0x28>
 800719e:	2100      	movs	r1, #0
 80071a0:	e9c0 1600 	strd	r1, r6, [r0]
 80071a4:	300c      	adds	r0, #12
 80071a6:	60a0      	str	r0, [r4, #8]
 80071a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071ac:	f7fd fb2c 	bl	8004808 <memset>
 80071b0:	4620      	mov	r0, r4
 80071b2:	bd70      	pop	{r4, r5, r6, pc}

080071b4 <__sfp_lock_acquire>:
 80071b4:	4801      	ldr	r0, [pc, #4]	; (80071bc <__sfp_lock_acquire+0x8>)
 80071b6:	f000 b8b3 	b.w	8007320 <__retarget_lock_acquire_recursive>
 80071ba:	bf00      	nop
 80071bc:	20000285 	.word	0x20000285

080071c0 <__sfp_lock_release>:
 80071c0:	4801      	ldr	r0, [pc, #4]	; (80071c8 <__sfp_lock_release+0x8>)
 80071c2:	f000 b8ae 	b.w	8007322 <__retarget_lock_release_recursive>
 80071c6:	bf00      	nop
 80071c8:	20000285 	.word	0x20000285

080071cc <__sinit_lock_acquire>:
 80071cc:	4801      	ldr	r0, [pc, #4]	; (80071d4 <__sinit_lock_acquire+0x8>)
 80071ce:	f000 b8a7 	b.w	8007320 <__retarget_lock_acquire_recursive>
 80071d2:	bf00      	nop
 80071d4:	20000286 	.word	0x20000286

080071d8 <__sinit_lock_release>:
 80071d8:	4801      	ldr	r0, [pc, #4]	; (80071e0 <__sinit_lock_release+0x8>)
 80071da:	f000 b8a2 	b.w	8007322 <__retarget_lock_release_recursive>
 80071de:	bf00      	nop
 80071e0:	20000286 	.word	0x20000286

080071e4 <__sinit>:
 80071e4:	b510      	push	{r4, lr}
 80071e6:	4604      	mov	r4, r0
 80071e8:	f7ff fff0 	bl	80071cc <__sinit_lock_acquire>
 80071ec:	69a3      	ldr	r3, [r4, #24]
 80071ee:	b11b      	cbz	r3, 80071f8 <__sinit+0x14>
 80071f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f4:	f7ff bff0 	b.w	80071d8 <__sinit_lock_release>
 80071f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071fc:	6523      	str	r3, [r4, #80]	; 0x50
 80071fe:	4b13      	ldr	r3, [pc, #76]	; (800724c <__sinit+0x68>)
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <__sinit+0x6c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	62a2      	str	r2, [r4, #40]	; 0x28
 8007206:	42a3      	cmp	r3, r4
 8007208:	bf04      	itt	eq
 800720a:	2301      	moveq	r3, #1
 800720c:	61a3      	streq	r3, [r4, #24]
 800720e:	4620      	mov	r0, r4
 8007210:	f000 f820 	bl	8007254 <__sfp>
 8007214:	6060      	str	r0, [r4, #4]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f81c 	bl	8007254 <__sfp>
 800721c:	60a0      	str	r0, [r4, #8]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f818 	bl	8007254 <__sfp>
 8007224:	2200      	movs	r2, #0
 8007226:	60e0      	str	r0, [r4, #12]
 8007228:	2104      	movs	r1, #4
 800722a:	6860      	ldr	r0, [r4, #4]
 800722c:	f7ff ff82 	bl	8007134 <std>
 8007230:	68a0      	ldr	r0, [r4, #8]
 8007232:	2201      	movs	r2, #1
 8007234:	2109      	movs	r1, #9
 8007236:	f7ff ff7d 	bl	8007134 <std>
 800723a:	68e0      	ldr	r0, [r4, #12]
 800723c:	2202      	movs	r2, #2
 800723e:	2112      	movs	r1, #18
 8007240:	f7ff ff78 	bl	8007134 <std>
 8007244:	2301      	movs	r3, #1
 8007246:	61a3      	str	r3, [r4, #24]
 8007248:	e7d2      	b.n	80071f0 <__sinit+0xc>
 800724a:	bf00      	nop
 800724c:	08009230 	.word	0x08009230
 8007250:	0800717d 	.word	0x0800717d

08007254 <__sfp>:
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	4607      	mov	r7, r0
 8007258:	f7ff ffac 	bl	80071b4 <__sfp_lock_acquire>
 800725c:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <__sfp+0x84>)
 800725e:	681e      	ldr	r6, [r3, #0]
 8007260:	69b3      	ldr	r3, [r6, #24]
 8007262:	b913      	cbnz	r3, 800726a <__sfp+0x16>
 8007264:	4630      	mov	r0, r6
 8007266:	f7ff ffbd 	bl	80071e4 <__sinit>
 800726a:	3648      	adds	r6, #72	; 0x48
 800726c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007270:	3b01      	subs	r3, #1
 8007272:	d503      	bpl.n	800727c <__sfp+0x28>
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	b30b      	cbz	r3, 80072bc <__sfp+0x68>
 8007278:	6836      	ldr	r6, [r6, #0]
 800727a:	e7f7      	b.n	800726c <__sfp+0x18>
 800727c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007280:	b9d5      	cbnz	r5, 80072b8 <__sfp+0x64>
 8007282:	4b16      	ldr	r3, [pc, #88]	; (80072dc <__sfp+0x88>)
 8007284:	60e3      	str	r3, [r4, #12]
 8007286:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800728a:	6665      	str	r5, [r4, #100]	; 0x64
 800728c:	f000 f847 	bl	800731e <__retarget_lock_init_recursive>
 8007290:	f7ff ff96 	bl	80071c0 <__sfp_lock_release>
 8007294:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007298:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800729c:	6025      	str	r5, [r4, #0]
 800729e:	61a5      	str	r5, [r4, #24]
 80072a0:	2208      	movs	r2, #8
 80072a2:	4629      	mov	r1, r5
 80072a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072a8:	f7fd faae 	bl	8004808 <memset>
 80072ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072b4:	4620      	mov	r0, r4
 80072b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b8:	3468      	adds	r4, #104	; 0x68
 80072ba:	e7d9      	b.n	8007270 <__sfp+0x1c>
 80072bc:	2104      	movs	r1, #4
 80072be:	4638      	mov	r0, r7
 80072c0:	f7ff ff62 	bl	8007188 <__sfmoreglue>
 80072c4:	4604      	mov	r4, r0
 80072c6:	6030      	str	r0, [r6, #0]
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d1d5      	bne.n	8007278 <__sfp+0x24>
 80072cc:	f7ff ff78 	bl	80071c0 <__sfp_lock_release>
 80072d0:	230c      	movs	r3, #12
 80072d2:	603b      	str	r3, [r7, #0]
 80072d4:	e7ee      	b.n	80072b4 <__sfp+0x60>
 80072d6:	bf00      	nop
 80072d8:	08009230 	.word	0x08009230
 80072dc:	ffff0001 	.word	0xffff0001

080072e0 <_fwalk_reent>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4606      	mov	r6, r0
 80072e6:	4688      	mov	r8, r1
 80072e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072ec:	2700      	movs	r7, #0
 80072ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072f2:	f1b9 0901 	subs.w	r9, r9, #1
 80072f6:	d505      	bpl.n	8007304 <_fwalk_reent+0x24>
 80072f8:	6824      	ldr	r4, [r4, #0]
 80072fa:	2c00      	cmp	r4, #0
 80072fc:	d1f7      	bne.n	80072ee <_fwalk_reent+0xe>
 80072fe:	4638      	mov	r0, r7
 8007300:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007304:	89ab      	ldrh	r3, [r5, #12]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d907      	bls.n	800731a <_fwalk_reent+0x3a>
 800730a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800730e:	3301      	adds	r3, #1
 8007310:	d003      	beq.n	800731a <_fwalk_reent+0x3a>
 8007312:	4629      	mov	r1, r5
 8007314:	4630      	mov	r0, r6
 8007316:	47c0      	blx	r8
 8007318:	4307      	orrs	r7, r0
 800731a:	3568      	adds	r5, #104	; 0x68
 800731c:	e7e9      	b.n	80072f2 <_fwalk_reent+0x12>

0800731e <__retarget_lock_init_recursive>:
 800731e:	4770      	bx	lr

08007320 <__retarget_lock_acquire_recursive>:
 8007320:	4770      	bx	lr

08007322 <__retarget_lock_release_recursive>:
 8007322:	4770      	bx	lr

08007324 <__swhatbuf_r>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	460e      	mov	r6, r1
 8007328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732c:	2900      	cmp	r1, #0
 800732e:	b096      	sub	sp, #88	; 0x58
 8007330:	4614      	mov	r4, r2
 8007332:	461d      	mov	r5, r3
 8007334:	da08      	bge.n	8007348 <__swhatbuf_r+0x24>
 8007336:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	602a      	str	r2, [r5, #0]
 800733e:	061a      	lsls	r2, r3, #24
 8007340:	d410      	bmi.n	8007364 <__swhatbuf_r+0x40>
 8007342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007346:	e00e      	b.n	8007366 <__swhatbuf_r+0x42>
 8007348:	466a      	mov	r2, sp
 800734a:	f000 f903 	bl	8007554 <_fstat_r>
 800734e:	2800      	cmp	r0, #0
 8007350:	dbf1      	blt.n	8007336 <__swhatbuf_r+0x12>
 8007352:	9a01      	ldr	r2, [sp, #4]
 8007354:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007358:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800735c:	425a      	negs	r2, r3
 800735e:	415a      	adcs	r2, r3
 8007360:	602a      	str	r2, [r5, #0]
 8007362:	e7ee      	b.n	8007342 <__swhatbuf_r+0x1e>
 8007364:	2340      	movs	r3, #64	; 0x40
 8007366:	2000      	movs	r0, #0
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	b016      	add	sp, #88	; 0x58
 800736c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007370 <__smakebuf_r>:
 8007370:	898b      	ldrh	r3, [r1, #12]
 8007372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007374:	079d      	lsls	r5, r3, #30
 8007376:	4606      	mov	r6, r0
 8007378:	460c      	mov	r4, r1
 800737a:	d507      	bpl.n	800738c <__smakebuf_r+0x1c>
 800737c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007380:	6023      	str	r3, [r4, #0]
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	2301      	movs	r3, #1
 8007386:	6163      	str	r3, [r4, #20]
 8007388:	b002      	add	sp, #8
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	ab01      	add	r3, sp, #4
 800738e:	466a      	mov	r2, sp
 8007390:	f7ff ffc8 	bl	8007324 <__swhatbuf_r>
 8007394:	9900      	ldr	r1, [sp, #0]
 8007396:	4605      	mov	r5, r0
 8007398:	4630      	mov	r0, r6
 800739a:	f7ff f963 	bl	8006664 <_malloc_r>
 800739e:	b948      	cbnz	r0, 80073b4 <__smakebuf_r+0x44>
 80073a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a4:	059a      	lsls	r2, r3, #22
 80073a6:	d4ef      	bmi.n	8007388 <__smakebuf_r+0x18>
 80073a8:	f023 0303 	bic.w	r3, r3, #3
 80073ac:	f043 0302 	orr.w	r3, r3, #2
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e7e3      	b.n	800737c <__smakebuf_r+0xc>
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <__smakebuf_r+0x7c>)
 80073b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80073b8:	89a3      	ldrh	r3, [r4, #12]
 80073ba:	6020      	str	r0, [r4, #0]
 80073bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	9b00      	ldr	r3, [sp, #0]
 80073c4:	6163      	str	r3, [r4, #20]
 80073c6:	9b01      	ldr	r3, [sp, #4]
 80073c8:	6120      	str	r0, [r4, #16]
 80073ca:	b15b      	cbz	r3, 80073e4 <__smakebuf_r+0x74>
 80073cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d0:	4630      	mov	r0, r6
 80073d2:	f000 f8d1 	bl	8007578 <_isatty_r>
 80073d6:	b128      	cbz	r0, 80073e4 <__smakebuf_r+0x74>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f023 0303 	bic.w	r3, r3, #3
 80073de:	f043 0301 	orr.w	r3, r3, #1
 80073e2:	81a3      	strh	r3, [r4, #12]
 80073e4:	89a0      	ldrh	r0, [r4, #12]
 80073e6:	4305      	orrs	r5, r0
 80073e8:	81a5      	strh	r5, [r4, #12]
 80073ea:	e7cd      	b.n	8007388 <__smakebuf_r+0x18>
 80073ec:	0800717d 	.word	0x0800717d

080073f0 <_malloc_usable_size_r>:
 80073f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f4:	1f18      	subs	r0, r3, #4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	bfbc      	itt	lt
 80073fa:	580b      	ldrlt	r3, [r1, r0]
 80073fc:	18c0      	addlt	r0, r0, r3
 80073fe:	4770      	bx	lr

08007400 <_raise_r>:
 8007400:	291f      	cmp	r1, #31
 8007402:	b538      	push	{r3, r4, r5, lr}
 8007404:	4604      	mov	r4, r0
 8007406:	460d      	mov	r5, r1
 8007408:	d904      	bls.n	8007414 <_raise_r+0x14>
 800740a:	2316      	movs	r3, #22
 800740c:	6003      	str	r3, [r0, #0]
 800740e:	f04f 30ff 	mov.w	r0, #4294967295
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007416:	b112      	cbz	r2, 800741e <_raise_r+0x1e>
 8007418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800741c:	b94b      	cbnz	r3, 8007432 <_raise_r+0x32>
 800741e:	4620      	mov	r0, r4
 8007420:	f000 f830 	bl	8007484 <_getpid_r>
 8007424:	462a      	mov	r2, r5
 8007426:	4601      	mov	r1, r0
 8007428:	4620      	mov	r0, r4
 800742a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800742e:	f000 b817 	b.w	8007460 <_kill_r>
 8007432:	2b01      	cmp	r3, #1
 8007434:	d00a      	beq.n	800744c <_raise_r+0x4c>
 8007436:	1c59      	adds	r1, r3, #1
 8007438:	d103      	bne.n	8007442 <_raise_r+0x42>
 800743a:	2316      	movs	r3, #22
 800743c:	6003      	str	r3, [r0, #0]
 800743e:	2001      	movs	r0, #1
 8007440:	e7e7      	b.n	8007412 <_raise_r+0x12>
 8007442:	2400      	movs	r4, #0
 8007444:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007448:	4628      	mov	r0, r5
 800744a:	4798      	blx	r3
 800744c:	2000      	movs	r0, #0
 800744e:	e7e0      	b.n	8007412 <_raise_r+0x12>

08007450 <raise>:
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <raise+0xc>)
 8007452:	4601      	mov	r1, r0
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	f7ff bfd3 	b.w	8007400 <_raise_r>
 800745a:	bf00      	nop
 800745c:	20000030 	.word	0x20000030

08007460 <_kill_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d07      	ldr	r5, [pc, #28]	; (8007480 <_kill_r+0x20>)
 8007464:	2300      	movs	r3, #0
 8007466:	4604      	mov	r4, r0
 8007468:	4608      	mov	r0, r1
 800746a:	4611      	mov	r1, r2
 800746c:	602b      	str	r3, [r5, #0]
 800746e:	f001 fbe9 	bl	8008c44 <_kill>
 8007472:	1c43      	adds	r3, r0, #1
 8007474:	d102      	bne.n	800747c <_kill_r+0x1c>
 8007476:	682b      	ldr	r3, [r5, #0]
 8007478:	b103      	cbz	r3, 800747c <_kill_r+0x1c>
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	bd38      	pop	{r3, r4, r5, pc}
 800747e:	bf00      	nop
 8007480:	20000280 	.word	0x20000280

08007484 <_getpid_r>:
 8007484:	f001 bbce 	b.w	8008c24 <_getpid>

08007488 <__sread>:
 8007488:	b510      	push	{r4, lr}
 800748a:	460c      	mov	r4, r1
 800748c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007490:	f000 f894 	bl	80075bc <_read_r>
 8007494:	2800      	cmp	r0, #0
 8007496:	bfab      	itete	ge
 8007498:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749a:	89a3      	ldrhlt	r3, [r4, #12]
 800749c:	181b      	addge	r3, r3, r0
 800749e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a2:	bfac      	ite	ge
 80074a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80074a6:	81a3      	strhlt	r3, [r4, #12]
 80074a8:	bd10      	pop	{r4, pc}

080074aa <__swrite>:
 80074aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ae:	461f      	mov	r7, r3
 80074b0:	898b      	ldrh	r3, [r1, #12]
 80074b2:	05db      	lsls	r3, r3, #23
 80074b4:	4605      	mov	r5, r0
 80074b6:	460c      	mov	r4, r1
 80074b8:	4616      	mov	r6, r2
 80074ba:	d505      	bpl.n	80074c8 <__swrite+0x1e>
 80074bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c0:	2302      	movs	r3, #2
 80074c2:	2200      	movs	r2, #0
 80074c4:	f000 f868 	bl	8007598 <_lseek_r>
 80074c8:	89a3      	ldrh	r3, [r4, #12]
 80074ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d2:	81a3      	strh	r3, [r4, #12]
 80074d4:	4632      	mov	r2, r6
 80074d6:	463b      	mov	r3, r7
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074de:	f000 b817 	b.w	8007510 <_write_r>

080074e2 <__sseek>:
 80074e2:	b510      	push	{r4, lr}
 80074e4:	460c      	mov	r4, r1
 80074e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ea:	f000 f855 	bl	8007598 <_lseek_r>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	bf15      	itete	ne
 80074f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80074f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80074fe:	81a3      	strheq	r3, [r4, #12]
 8007500:	bf18      	it	ne
 8007502:	81a3      	strhne	r3, [r4, #12]
 8007504:	bd10      	pop	{r4, pc}

08007506 <__sclose>:
 8007506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750a:	f000 b813 	b.w	8007534 <_close_r>
	...

08007510 <_write_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4d07      	ldr	r5, [pc, #28]	; (8007530 <_write_r+0x20>)
 8007514:	4604      	mov	r4, r0
 8007516:	4608      	mov	r0, r1
 8007518:	4611      	mov	r1, r2
 800751a:	2200      	movs	r2, #0
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f001 fbb6 	bl	8008c90 <_write>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_write_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_write_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000280 	.word	0x20000280

08007534 <_close_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4d06      	ldr	r5, [pc, #24]	; (8007550 <_close_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	4608      	mov	r0, r1
 800753e:	602b      	str	r3, [r5, #0]
 8007540:	f001 fb60 	bl	8008c04 <_close>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_close_r+0x1a>
 8007548:	682b      	ldr	r3, [r5, #0]
 800754a:	b103      	cbz	r3, 800754e <_close_r+0x1a>
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000280 	.word	0x20000280

08007554 <_fstat_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	; (8007574 <_fstat_r+0x20>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	4611      	mov	r1, r2
 8007560:	602b      	str	r3, [r5, #0]
 8007562:	f001 fb57 	bl	8008c14 <_fstat>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	d102      	bne.n	8007570 <_fstat_r+0x1c>
 800756a:	682b      	ldr	r3, [r5, #0]
 800756c:	b103      	cbz	r3, 8007570 <_fstat_r+0x1c>
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	bd38      	pop	{r3, r4, r5, pc}
 8007572:	bf00      	nop
 8007574:	20000280 	.word	0x20000280

08007578 <_isatty_r>:
 8007578:	b538      	push	{r3, r4, r5, lr}
 800757a:	4d06      	ldr	r5, [pc, #24]	; (8007594 <_isatty_r+0x1c>)
 800757c:	2300      	movs	r3, #0
 800757e:	4604      	mov	r4, r0
 8007580:	4608      	mov	r0, r1
 8007582:	602b      	str	r3, [r5, #0]
 8007584:	f001 fb56 	bl	8008c34 <_isatty>
 8007588:	1c43      	adds	r3, r0, #1
 800758a:	d102      	bne.n	8007592 <_isatty_r+0x1a>
 800758c:	682b      	ldr	r3, [r5, #0]
 800758e:	b103      	cbz	r3, 8007592 <_isatty_r+0x1a>
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	bd38      	pop	{r3, r4, r5, pc}
 8007594:	20000280 	.word	0x20000280

08007598 <_lseek_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	; (80075b8 <_lseek_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f001 fb54 	bl	8008c54 <_lseek>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_lseek_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_lseek_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	20000280 	.word	0x20000280

080075bc <_read_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d07      	ldr	r5, [pc, #28]	; (80075dc <_read_r+0x20>)
 80075c0:	4604      	mov	r4, r0
 80075c2:	4608      	mov	r0, r1
 80075c4:	4611      	mov	r1, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	602a      	str	r2, [r5, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f001 fb4a 	bl	8008c64 <_read>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d102      	bne.n	80075da <_read_r+0x1e>
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	b103      	cbz	r3, 80075da <_read_r+0x1e>
 80075d8:	6023      	str	r3, [r4, #0]
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	20000280 	.word	0x20000280

080075e0 <cos>:
 80075e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075e2:	ec53 2b10 	vmov	r2, r3, d0
 80075e6:	4826      	ldr	r0, [pc, #152]	; (8007680 <cos+0xa0>)
 80075e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80075ec:	4281      	cmp	r1, r0
 80075ee:	dc06      	bgt.n	80075fe <cos+0x1e>
 80075f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007678 <cos+0x98>
 80075f4:	b005      	add	sp, #20
 80075f6:	f85d eb04 	ldr.w	lr, [sp], #4
 80075fa:	f000 bb79 	b.w	8007cf0 <__kernel_cos>
 80075fe:	4821      	ldr	r0, [pc, #132]	; (8007684 <cos+0xa4>)
 8007600:	4281      	cmp	r1, r0
 8007602:	dd09      	ble.n	8007618 <cos+0x38>
 8007604:	ee10 0a10 	vmov	r0, s0
 8007608:	4619      	mov	r1, r3
 800760a:	f7f8 fe45 	bl	8000298 <__aeabi_dsub>
 800760e:	ec41 0b10 	vmov	d0, r0, r1
 8007612:	b005      	add	sp, #20
 8007614:	f85d fb04 	ldr.w	pc, [sp], #4
 8007618:	4668      	mov	r0, sp
 800761a:	f000 f95d 	bl	80078d8 <__ieee754_rem_pio2>
 800761e:	f000 0003 	and.w	r0, r0, #3
 8007622:	2801      	cmp	r0, #1
 8007624:	d00b      	beq.n	800763e <cos+0x5e>
 8007626:	2802      	cmp	r0, #2
 8007628:	d016      	beq.n	8007658 <cos+0x78>
 800762a:	b9e0      	cbnz	r0, 8007666 <cos+0x86>
 800762c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007630:	ed9d 0b00 	vldr	d0, [sp]
 8007634:	f000 fb5c 	bl	8007cf0 <__kernel_cos>
 8007638:	ec51 0b10 	vmov	r0, r1, d0
 800763c:	e7e7      	b.n	800760e <cos+0x2e>
 800763e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007642:	ed9d 0b00 	vldr	d0, [sp]
 8007646:	f000 ff6b 	bl	8008520 <__kernel_sin>
 800764a:	ec53 2b10 	vmov	r2, r3, d0
 800764e:	ee10 0a10 	vmov	r0, s0
 8007652:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007656:	e7da      	b.n	800760e <cos+0x2e>
 8007658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800765c:	ed9d 0b00 	vldr	d0, [sp]
 8007660:	f000 fb46 	bl	8007cf0 <__kernel_cos>
 8007664:	e7f1      	b.n	800764a <cos+0x6a>
 8007666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800766a:	ed9d 0b00 	vldr	d0, [sp]
 800766e:	2001      	movs	r0, #1
 8007670:	f000 ff56 	bl	8008520 <__kernel_sin>
 8007674:	e7e0      	b.n	8007638 <cos+0x58>
 8007676:	bf00      	nop
	...
 8007680:	3fe921fb 	.word	0x3fe921fb
 8007684:	7fefffff 	.word	0x7fefffff

08007688 <sin>:
 8007688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800768a:	ec53 2b10 	vmov	r2, r3, d0
 800768e:	4828      	ldr	r0, [pc, #160]	; (8007730 <sin+0xa8>)
 8007690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007694:	4281      	cmp	r1, r0
 8007696:	dc07      	bgt.n	80076a8 <sin+0x20>
 8007698:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007728 <sin+0xa0>
 800769c:	2000      	movs	r0, #0
 800769e:	b005      	add	sp, #20
 80076a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a4:	f000 bf3c 	b.w	8008520 <__kernel_sin>
 80076a8:	4822      	ldr	r0, [pc, #136]	; (8007734 <sin+0xac>)
 80076aa:	4281      	cmp	r1, r0
 80076ac:	dd09      	ble.n	80076c2 <sin+0x3a>
 80076ae:	ee10 0a10 	vmov	r0, s0
 80076b2:	4619      	mov	r1, r3
 80076b4:	f7f8 fdf0 	bl	8000298 <__aeabi_dsub>
 80076b8:	ec41 0b10 	vmov	d0, r0, r1
 80076bc:	b005      	add	sp, #20
 80076be:	f85d fb04 	ldr.w	pc, [sp], #4
 80076c2:	4668      	mov	r0, sp
 80076c4:	f000 f908 	bl	80078d8 <__ieee754_rem_pio2>
 80076c8:	f000 0003 	and.w	r0, r0, #3
 80076cc:	2801      	cmp	r0, #1
 80076ce:	d00c      	beq.n	80076ea <sin+0x62>
 80076d0:	2802      	cmp	r0, #2
 80076d2:	d011      	beq.n	80076f8 <sin+0x70>
 80076d4:	b9f0      	cbnz	r0, 8007714 <sin+0x8c>
 80076d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076da:	ed9d 0b00 	vldr	d0, [sp]
 80076de:	2001      	movs	r0, #1
 80076e0:	f000 ff1e 	bl	8008520 <__kernel_sin>
 80076e4:	ec51 0b10 	vmov	r0, r1, d0
 80076e8:	e7e6      	b.n	80076b8 <sin+0x30>
 80076ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076ee:	ed9d 0b00 	vldr	d0, [sp]
 80076f2:	f000 fafd 	bl	8007cf0 <__kernel_cos>
 80076f6:	e7f5      	b.n	80076e4 <sin+0x5c>
 80076f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80076fc:	ed9d 0b00 	vldr	d0, [sp]
 8007700:	2001      	movs	r0, #1
 8007702:	f000 ff0d 	bl	8008520 <__kernel_sin>
 8007706:	ec53 2b10 	vmov	r2, r3, d0
 800770a:	ee10 0a10 	vmov	r0, s0
 800770e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007712:	e7d1      	b.n	80076b8 <sin+0x30>
 8007714:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007718:	ed9d 0b00 	vldr	d0, [sp]
 800771c:	f000 fae8 	bl	8007cf0 <__kernel_cos>
 8007720:	e7f1      	b.n	8007706 <sin+0x7e>
 8007722:	bf00      	nop
 8007724:	f3af 8000 	nop.w
	...
 8007730:	3fe921fb 	.word	0x3fe921fb
 8007734:	7fefffff 	.word	0x7fefffff

08007738 <atan2>:
 8007738:	f000 b802 	b.w	8007740 <__ieee754_atan2>
 800773c:	0000      	movs	r0, r0
	...

08007740 <__ieee754_atan2>:
 8007740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007744:	ec57 6b11 	vmov	r6, r7, d1
 8007748:	4273      	negs	r3, r6
 800774a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80078d0 <__ieee754_atan2+0x190>
 800774e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8007752:	4333      	orrs	r3, r6
 8007754:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007758:	4573      	cmp	r3, lr
 800775a:	ec51 0b10 	vmov	r0, r1, d0
 800775e:	ee11 8a10 	vmov	r8, s2
 8007762:	d80a      	bhi.n	800777a <__ieee754_atan2+0x3a>
 8007764:	4244      	negs	r4, r0
 8007766:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800776a:	4304      	orrs	r4, r0
 800776c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007770:	4574      	cmp	r4, lr
 8007772:	ee10 9a10 	vmov	r9, s0
 8007776:	468c      	mov	ip, r1
 8007778:	d907      	bls.n	800778a <__ieee754_atan2+0x4a>
 800777a:	4632      	mov	r2, r6
 800777c:	463b      	mov	r3, r7
 800777e:	f7f8 fd8d 	bl	800029c <__adddf3>
 8007782:	ec41 0b10 	vmov	d0, r0, r1
 8007786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800778a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800778e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007792:	4334      	orrs	r4, r6
 8007794:	d103      	bne.n	800779e <__ieee754_atan2+0x5e>
 8007796:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800779a:	f000 bf81 	b.w	80086a0 <atan>
 800779e:	17bc      	asrs	r4, r7, #30
 80077a0:	f004 0402 	and.w	r4, r4, #2
 80077a4:	ea53 0909 	orrs.w	r9, r3, r9
 80077a8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80077ac:	d107      	bne.n	80077be <__ieee754_atan2+0x7e>
 80077ae:	2c02      	cmp	r4, #2
 80077b0:	d060      	beq.n	8007874 <__ieee754_atan2+0x134>
 80077b2:	2c03      	cmp	r4, #3
 80077b4:	d1e5      	bne.n	8007782 <__ieee754_atan2+0x42>
 80077b6:	a142      	add	r1, pc, #264	; (adr r1, 80078c0 <__ieee754_atan2+0x180>)
 80077b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077bc:	e7e1      	b.n	8007782 <__ieee754_atan2+0x42>
 80077be:	ea52 0808 	orrs.w	r8, r2, r8
 80077c2:	d106      	bne.n	80077d2 <__ieee754_atan2+0x92>
 80077c4:	f1bc 0f00 	cmp.w	ip, #0
 80077c8:	da5f      	bge.n	800788a <__ieee754_atan2+0x14a>
 80077ca:	a13f      	add	r1, pc, #252	; (adr r1, 80078c8 <__ieee754_atan2+0x188>)
 80077cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077d0:	e7d7      	b.n	8007782 <__ieee754_atan2+0x42>
 80077d2:	4572      	cmp	r2, lr
 80077d4:	d10f      	bne.n	80077f6 <__ieee754_atan2+0xb6>
 80077d6:	4293      	cmp	r3, r2
 80077d8:	f104 34ff 	add.w	r4, r4, #4294967295
 80077dc:	d107      	bne.n	80077ee <__ieee754_atan2+0xae>
 80077de:	2c02      	cmp	r4, #2
 80077e0:	d84c      	bhi.n	800787c <__ieee754_atan2+0x13c>
 80077e2:	4b35      	ldr	r3, [pc, #212]	; (80078b8 <__ieee754_atan2+0x178>)
 80077e4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80077e8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80077ec:	e7c9      	b.n	8007782 <__ieee754_atan2+0x42>
 80077ee:	2c02      	cmp	r4, #2
 80077f0:	d848      	bhi.n	8007884 <__ieee754_atan2+0x144>
 80077f2:	4b32      	ldr	r3, [pc, #200]	; (80078bc <__ieee754_atan2+0x17c>)
 80077f4:	e7f6      	b.n	80077e4 <__ieee754_atan2+0xa4>
 80077f6:	4573      	cmp	r3, lr
 80077f8:	d0e4      	beq.n	80077c4 <__ieee754_atan2+0x84>
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007800:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007804:	da1e      	bge.n	8007844 <__ieee754_atan2+0x104>
 8007806:	2f00      	cmp	r7, #0
 8007808:	da01      	bge.n	800780e <__ieee754_atan2+0xce>
 800780a:	323c      	adds	r2, #60	; 0x3c
 800780c:	db1e      	blt.n	800784c <__ieee754_atan2+0x10c>
 800780e:	4632      	mov	r2, r6
 8007810:	463b      	mov	r3, r7
 8007812:	f7f9 f823 	bl	800085c <__aeabi_ddiv>
 8007816:	ec41 0b10 	vmov	d0, r0, r1
 800781a:	f001 f8e1 	bl	80089e0 <fabs>
 800781e:	f000 ff3f 	bl	80086a0 <atan>
 8007822:	ec51 0b10 	vmov	r0, r1, d0
 8007826:	2c01      	cmp	r4, #1
 8007828:	d013      	beq.n	8007852 <__ieee754_atan2+0x112>
 800782a:	2c02      	cmp	r4, #2
 800782c:	d015      	beq.n	800785a <__ieee754_atan2+0x11a>
 800782e:	2c00      	cmp	r4, #0
 8007830:	d0a7      	beq.n	8007782 <__ieee754_atan2+0x42>
 8007832:	a319      	add	r3, pc, #100	; (adr r3, 8007898 <__ieee754_atan2+0x158>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fd2e 	bl	8000298 <__aeabi_dsub>
 800783c:	a318      	add	r3, pc, #96	; (adr r3, 80078a0 <__ieee754_atan2+0x160>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	e014      	b.n	800786e <__ieee754_atan2+0x12e>
 8007844:	a118      	add	r1, pc, #96	; (adr r1, 80078a8 <__ieee754_atan2+0x168>)
 8007846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800784a:	e7ec      	b.n	8007826 <__ieee754_atan2+0xe6>
 800784c:	2000      	movs	r0, #0
 800784e:	2100      	movs	r1, #0
 8007850:	e7e9      	b.n	8007826 <__ieee754_atan2+0xe6>
 8007852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007856:	4619      	mov	r1, r3
 8007858:	e793      	b.n	8007782 <__ieee754_atan2+0x42>
 800785a:	a30f      	add	r3, pc, #60	; (adr r3, 8007898 <__ieee754_atan2+0x158>)
 800785c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007860:	f7f8 fd1a 	bl	8000298 <__aeabi_dsub>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	a10d      	add	r1, pc, #52	; (adr r1, 80078a0 <__ieee754_atan2+0x160>)
 800786a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786e:	f7f8 fd13 	bl	8000298 <__aeabi_dsub>
 8007872:	e786      	b.n	8007782 <__ieee754_atan2+0x42>
 8007874:	a10a      	add	r1, pc, #40	; (adr r1, 80078a0 <__ieee754_atan2+0x160>)
 8007876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787a:	e782      	b.n	8007782 <__ieee754_atan2+0x42>
 800787c:	a10c      	add	r1, pc, #48	; (adr r1, 80078b0 <__ieee754_atan2+0x170>)
 800787e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007882:	e77e      	b.n	8007782 <__ieee754_atan2+0x42>
 8007884:	2000      	movs	r0, #0
 8007886:	2100      	movs	r1, #0
 8007888:	e77b      	b.n	8007782 <__ieee754_atan2+0x42>
 800788a:	a107      	add	r1, pc, #28	; (adr r1, 80078a8 <__ieee754_atan2+0x168>)
 800788c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007890:	e777      	b.n	8007782 <__ieee754_atan2+0x42>
 8007892:	bf00      	nop
 8007894:	f3af 8000 	nop.w
 8007898:	33145c07 	.word	0x33145c07
 800789c:	3ca1a626 	.word	0x3ca1a626
 80078a0:	54442d18 	.word	0x54442d18
 80078a4:	400921fb 	.word	0x400921fb
 80078a8:	54442d18 	.word	0x54442d18
 80078ac:	3ff921fb 	.word	0x3ff921fb
 80078b0:	54442d18 	.word	0x54442d18
 80078b4:	3fe921fb 	.word	0x3fe921fb
 80078b8:	08009610 	.word	0x08009610
 80078bc:	08009628 	.word	0x08009628
 80078c0:	54442d18 	.word	0x54442d18
 80078c4:	c00921fb 	.word	0xc00921fb
 80078c8:	54442d18 	.word	0x54442d18
 80078cc:	bff921fb 	.word	0xbff921fb
 80078d0:	7ff00000 	.word	0x7ff00000
 80078d4:	00000000 	.word	0x00000000

080078d8 <__ieee754_rem_pio2>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	ed2d 8b02 	vpush	{d8}
 80078e0:	ec55 4b10 	vmov	r4, r5, d0
 80078e4:	4bca      	ldr	r3, [pc, #808]	; (8007c10 <__ieee754_rem_pio2+0x338>)
 80078e6:	b08b      	sub	sp, #44	; 0x2c
 80078e8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80078ec:	4598      	cmp	r8, r3
 80078ee:	4682      	mov	sl, r0
 80078f0:	9502      	str	r5, [sp, #8]
 80078f2:	dc08      	bgt.n	8007906 <__ieee754_rem_pio2+0x2e>
 80078f4:	2200      	movs	r2, #0
 80078f6:	2300      	movs	r3, #0
 80078f8:	ed80 0b00 	vstr	d0, [r0]
 80078fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007900:	f04f 0b00 	mov.w	fp, #0
 8007904:	e028      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 8007906:	4bc3      	ldr	r3, [pc, #780]	; (8007c14 <__ieee754_rem_pio2+0x33c>)
 8007908:	4598      	cmp	r8, r3
 800790a:	dc78      	bgt.n	80079fe <__ieee754_rem_pio2+0x126>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	4ec2      	ldr	r6, [pc, #776]	; (8007c18 <__ieee754_rem_pio2+0x340>)
 8007910:	2b00      	cmp	r3, #0
 8007912:	ee10 0a10 	vmov	r0, s0
 8007916:	a3b0      	add	r3, pc, #704	; (adr r3, 8007bd8 <__ieee754_rem_pio2+0x300>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	4629      	mov	r1, r5
 800791e:	dd39      	ble.n	8007994 <__ieee754_rem_pio2+0xbc>
 8007920:	f7f8 fcba 	bl	8000298 <__aeabi_dsub>
 8007924:	45b0      	cmp	r8, r6
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	d01b      	beq.n	8007964 <__ieee754_rem_pio2+0x8c>
 800792c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 800792e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007932:	f7f8 fcb1 	bl	8000298 <__aeabi_dsub>
 8007936:	4602      	mov	r2, r0
 8007938:	460b      	mov	r3, r1
 800793a:	e9ca 2300 	strd	r2, r3, [sl]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fca9 	bl	8000298 <__aeabi_dsub>
 8007946:	a3a6      	add	r3, pc, #664	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7f8 fca4 	bl	8000298 <__aeabi_dsub>
 8007950:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007954:	f04f 0b01 	mov.w	fp, #1
 8007958:	4658      	mov	r0, fp
 800795a:	b00b      	add	sp, #44	; 0x2c
 800795c:	ecbd 8b02 	vpop	{d8}
 8007960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007964:	a3a0      	add	r3, pc, #640	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	f7f8 fc95 	bl	8000298 <__aeabi_dsub>
 800796e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	f7f8 fc8e 	bl	8000298 <__aeabi_dsub>
 800797c:	4602      	mov	r2, r0
 800797e:	460b      	mov	r3, r1
 8007980:	e9ca 2300 	strd	r2, r3, [sl]
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc86 	bl	8000298 <__aeabi_dsub>
 800798c:	a398      	add	r3, pc, #608	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 800798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007992:	e7db      	b.n	800794c <__ieee754_rem_pio2+0x74>
 8007994:	f7f8 fc82 	bl	800029c <__adddf3>
 8007998:	45b0      	cmp	r8, r6
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	d016      	beq.n	80079ce <__ieee754_rem_pio2+0xf6>
 80079a0:	a38f      	add	r3, pc, #572	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	f7f8 fc79 	bl	800029c <__adddf3>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	e9ca 2300 	strd	r2, r3, [sl]
 80079b2:	4620      	mov	r0, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f8 fc6f 	bl	8000298 <__aeabi_dsub>
 80079ba:	a389      	add	r3, pc, #548	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fc6c 	bl	800029c <__adddf3>
 80079c4:	f04f 3bff 	mov.w	fp, #4294967295
 80079c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80079cc:	e7c4      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 80079ce:	a386      	add	r3, pc, #536	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fc62 	bl	800029c <__adddf3>
 80079d8:	a385      	add	r3, pc, #532	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	f7f8 fc5b 	bl	800029c <__adddf3>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	e9ca 2300 	strd	r2, r3, [sl]
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fc51 	bl	8000298 <__aeabi_dsub>
 80079f6:	a37e      	add	r3, pc, #504	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	e7e0      	b.n	80079c0 <__ieee754_rem_pio2+0xe8>
 80079fe:	4b87      	ldr	r3, [pc, #540]	; (8007c1c <__ieee754_rem_pio2+0x344>)
 8007a00:	4598      	cmp	r8, r3
 8007a02:	f300 80d9 	bgt.w	8007bb8 <__ieee754_rem_pio2+0x2e0>
 8007a06:	f000 ffeb 	bl	80089e0 <fabs>
 8007a0a:	ec55 4b10 	vmov	r4, r5, d0
 8007a0e:	ee10 0a10 	vmov	r0, s0
 8007a12:	a379      	add	r3, pc, #484	; (adr r3, 8007bf8 <__ieee754_rem_pio2+0x320>)
 8007a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f8 fdf5 	bl	8000608 <__aeabi_dmul>
 8007a1e:	4b80      	ldr	r3, [pc, #512]	; (8007c20 <__ieee754_rem_pio2+0x348>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	f7f8 fc3b 	bl	800029c <__adddf3>
 8007a26:	f7f9 f89f 	bl	8000b68 <__aeabi_d2iz>
 8007a2a:	4683      	mov	fp, r0
 8007a2c:	f7f8 fd82 	bl	8000534 <__aeabi_i2d>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	ec43 2b18 	vmov	d8, r2, r3
 8007a38:	a367      	add	r3, pc, #412	; (adr r3, 8007bd8 <__ieee754_rem_pio2+0x300>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	f7f8 fde3 	bl	8000608 <__aeabi_dmul>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	4620      	mov	r0, r4
 8007a48:	4629      	mov	r1, r5
 8007a4a:	f7f8 fc25 	bl	8000298 <__aeabi_dsub>
 8007a4e:	a364      	add	r3, pc, #400	; (adr r3, 8007be0 <__ieee754_rem_pio2+0x308>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	4606      	mov	r6, r0
 8007a56:	460f      	mov	r7, r1
 8007a58:	ec51 0b18 	vmov	r0, r1, d8
 8007a5c:	f7f8 fdd4 	bl	8000608 <__aeabi_dmul>
 8007a60:	f1bb 0f1f 	cmp.w	fp, #31
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	dc0d      	bgt.n	8007a86 <__ieee754_rem_pio2+0x1ae>
 8007a6a:	4b6e      	ldr	r3, [pc, #440]	; (8007c24 <__ieee754_rem_pio2+0x34c>)
 8007a6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a74:	4543      	cmp	r3, r8
 8007a76:	d006      	beq.n	8007a86 <__ieee754_rem_pio2+0x1ae>
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f8 fc0a 	bl	8000298 <__aeabi_dsub>
 8007a84:	e00f      	b.n	8007aa6 <__ieee754_rem_pio2+0x1ce>
 8007a86:	462b      	mov	r3, r5
 8007a88:	4622      	mov	r2, r4
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fc03 	bl	8000298 <__aeabi_dsub>
 8007a92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007a96:	9303      	str	r3, [sp, #12]
 8007a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007a9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007aa0:	f1b8 0f10 	cmp.w	r8, #16
 8007aa4:	dc02      	bgt.n	8007aac <__ieee754_rem_pio2+0x1d4>
 8007aa6:	e9ca 0100 	strd	r0, r1, [sl]
 8007aaa:	e039      	b.n	8007b20 <__ieee754_rem_pio2+0x248>
 8007aac:	a34e      	add	r3, pc, #312	; (adr r3, 8007be8 <__ieee754_rem_pio2+0x310>)
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	ec51 0b18 	vmov	r0, r1, d8
 8007ab6:	f7f8 fda7 	bl	8000608 <__aeabi_dmul>
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	f7f8 fbe7 	bl	8000298 <__aeabi_dsub>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4680      	mov	r8, r0
 8007ad0:	4689      	mov	r9, r1
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	f7f8 fbdf 	bl	8000298 <__aeabi_dsub>
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	f7f8 fbdb 	bl	8000298 <__aeabi_dsub>
 8007ae2:	a343      	add	r3, pc, #268	; (adr r3, 8007bf0 <__ieee754_rem_pio2+0x318>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	ec51 0b18 	vmov	r0, r1, d8
 8007af0:	f7f8 fd8a 	bl	8000608 <__aeabi_dmul>
 8007af4:	4622      	mov	r2, r4
 8007af6:	462b      	mov	r3, r5
 8007af8:	f7f8 fbce 	bl	8000298 <__aeabi_dsub>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4604      	mov	r4, r0
 8007b02:	460d      	mov	r5, r1
 8007b04:	4640      	mov	r0, r8
 8007b06:	4649      	mov	r1, r9
 8007b08:	f7f8 fbc6 	bl	8000298 <__aeabi_dsub>
 8007b0c:	9a03      	ldr	r2, [sp, #12]
 8007b0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b12:	1ad3      	subs	r3, r2, r3
 8007b14:	2b31      	cmp	r3, #49	; 0x31
 8007b16:	dc24      	bgt.n	8007b62 <__ieee754_rem_pio2+0x28a>
 8007b18:	e9ca 0100 	strd	r0, r1, [sl]
 8007b1c:	4646      	mov	r6, r8
 8007b1e:	464f      	mov	r7, r9
 8007b20:	e9da 8900 	ldrd	r8, r9, [sl]
 8007b24:	4630      	mov	r0, r6
 8007b26:	4642      	mov	r2, r8
 8007b28:	464b      	mov	r3, r9
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f8 fbb4 	bl	8000298 <__aeabi_dsub>
 8007b30:	462b      	mov	r3, r5
 8007b32:	4622      	mov	r2, r4
 8007b34:	f7f8 fbb0 	bl	8000298 <__aeabi_dsub>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b40:	f6bf af0a 	bge.w	8007958 <__ieee754_rem_pio2+0x80>
 8007b44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b48:	f8ca 3004 	str.w	r3, [sl, #4]
 8007b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b50:	f8ca 8000 	str.w	r8, [sl]
 8007b54:	f8ca 0008 	str.w	r0, [sl, #8]
 8007b58:	f8ca 300c 	str.w	r3, [sl, #12]
 8007b5c:	f1cb 0b00 	rsb	fp, fp, #0
 8007b60:	e6fa      	b.n	8007958 <__ieee754_rem_pio2+0x80>
 8007b62:	a327      	add	r3, pc, #156	; (adr r3, 8007c00 <__ieee754_rem_pio2+0x328>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	ec51 0b18 	vmov	r0, r1, d8
 8007b6c:	f7f8 fd4c 	bl	8000608 <__aeabi_dmul>
 8007b70:	4604      	mov	r4, r0
 8007b72:	460d      	mov	r5, r1
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4640      	mov	r0, r8
 8007b7a:	4649      	mov	r1, r9
 8007b7c:	f7f8 fb8c 	bl	8000298 <__aeabi_dsub>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4606      	mov	r6, r0
 8007b86:	460f      	mov	r7, r1
 8007b88:	4640      	mov	r0, r8
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	f7f8 fb84 	bl	8000298 <__aeabi_dsub>
 8007b90:	4622      	mov	r2, r4
 8007b92:	462b      	mov	r3, r5
 8007b94:	f7f8 fb80 	bl	8000298 <__aeabi_dsub>
 8007b98:	a31b      	add	r3, pc, #108	; (adr r3, 8007c08 <__ieee754_rem_pio2+0x330>)
 8007b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	460d      	mov	r5, r1
 8007ba2:	ec51 0b18 	vmov	r0, r1, d8
 8007ba6:	f7f8 fd2f 	bl	8000608 <__aeabi_dmul>
 8007baa:	4622      	mov	r2, r4
 8007bac:	462b      	mov	r3, r5
 8007bae:	f7f8 fb73 	bl	8000298 <__aeabi_dsub>
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	e75f      	b.n	8007a78 <__ieee754_rem_pio2+0x1a0>
 8007bb8:	4b1b      	ldr	r3, [pc, #108]	; (8007c28 <__ieee754_rem_pio2+0x350>)
 8007bba:	4598      	cmp	r8, r3
 8007bbc:	dd36      	ble.n	8007c2c <__ieee754_rem_pio2+0x354>
 8007bbe:	ee10 2a10 	vmov	r2, s0
 8007bc2:	462b      	mov	r3, r5
 8007bc4:	4620      	mov	r0, r4
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	f7f8 fb66 	bl	8000298 <__aeabi_dsub>
 8007bcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007bd0:	e9ca 0100 	strd	r0, r1, [sl]
 8007bd4:	e694      	b.n	8007900 <__ieee754_rem_pio2+0x28>
 8007bd6:	bf00      	nop
 8007bd8:	54400000 	.word	0x54400000
 8007bdc:	3ff921fb 	.word	0x3ff921fb
 8007be0:	1a626331 	.word	0x1a626331
 8007be4:	3dd0b461 	.word	0x3dd0b461
 8007be8:	1a600000 	.word	0x1a600000
 8007bec:	3dd0b461 	.word	0x3dd0b461
 8007bf0:	2e037073 	.word	0x2e037073
 8007bf4:	3ba3198a 	.word	0x3ba3198a
 8007bf8:	6dc9c883 	.word	0x6dc9c883
 8007bfc:	3fe45f30 	.word	0x3fe45f30
 8007c00:	2e000000 	.word	0x2e000000
 8007c04:	3ba3198a 	.word	0x3ba3198a
 8007c08:	252049c1 	.word	0x252049c1
 8007c0c:	397b839a 	.word	0x397b839a
 8007c10:	3fe921fb 	.word	0x3fe921fb
 8007c14:	4002d97b 	.word	0x4002d97b
 8007c18:	3ff921fb 	.word	0x3ff921fb
 8007c1c:	413921fb 	.word	0x413921fb
 8007c20:	3fe00000 	.word	0x3fe00000
 8007c24:	08009640 	.word	0x08009640
 8007c28:	7fefffff 	.word	0x7fefffff
 8007c2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007c30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007c34:	ee10 0a10 	vmov	r0, s0
 8007c38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007c3c:	ee10 6a10 	vmov	r6, s0
 8007c40:	460f      	mov	r7, r1
 8007c42:	f7f8 ff91 	bl	8000b68 <__aeabi_d2iz>
 8007c46:	f7f8 fc75 	bl	8000534 <__aeabi_i2d>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c56:	f7f8 fb1f 	bl	8000298 <__aeabi_dsub>
 8007c5a:	4b23      	ldr	r3, [pc, #140]	; (8007ce8 <__ieee754_rem_pio2+0x410>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7f8 fcd3 	bl	8000608 <__aeabi_dmul>
 8007c62:	460f      	mov	r7, r1
 8007c64:	4606      	mov	r6, r0
 8007c66:	f7f8 ff7f 	bl	8000b68 <__aeabi_d2iz>
 8007c6a:	f7f8 fc63 	bl	8000534 <__aeabi_i2d>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007c7a:	f7f8 fb0d 	bl	8000298 <__aeabi_dsub>
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	; (8007ce8 <__ieee754_rem_pio2+0x410>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	f7f8 fcc1 	bl	8000608 <__aeabi_dmul>
 8007c86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c8a:	ad04      	add	r5, sp, #16
 8007c8c:	f04f 0803 	mov.w	r8, #3
 8007c90:	46a9      	mov	r9, r5
 8007c92:	2600      	movs	r6, #0
 8007c94:	2700      	movs	r7, #0
 8007c96:	4632      	mov	r2, r6
 8007c98:	463b      	mov	r3, r7
 8007c9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007c9e:	46c3      	mov	fp, r8
 8007ca0:	3d08      	subs	r5, #8
 8007ca2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ca6:	f7f8 ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d1f3      	bne.n	8007c96 <__ieee754_rem_pio2+0x3be>
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <__ieee754_rem_pio2+0x414>)
 8007cb0:	9301      	str	r3, [sp, #4]
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	9300      	str	r3, [sp, #0]
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	465b      	mov	r3, fp
 8007cba:	4651      	mov	r1, sl
 8007cbc:	4648      	mov	r0, r9
 8007cbe:	f000 f8df 	bl	8007e80 <__kernel_rem_pio2>
 8007cc2:	9b02      	ldr	r3, [sp, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	4683      	mov	fp, r0
 8007cc8:	f6bf ae46 	bge.w	8007958 <__ieee754_rem_pio2+0x80>
 8007ccc:	e9da 2100 	ldrd	r2, r1, [sl]
 8007cd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007cd4:	e9ca 2300 	strd	r2, r3, [sl]
 8007cd8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ce0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007ce4:	e73a      	b.n	8007b5c <__ieee754_rem_pio2+0x284>
 8007ce6:	bf00      	nop
 8007ce8:	41700000 	.word	0x41700000
 8007cec:	080096c0 	.word	0x080096c0

08007cf0 <__kernel_cos>:
 8007cf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	ec57 6b10 	vmov	r6, r7, d0
 8007cf8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007cfc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007d00:	ed8d 1b00 	vstr	d1, [sp]
 8007d04:	da07      	bge.n	8007d16 <__kernel_cos+0x26>
 8007d06:	ee10 0a10 	vmov	r0, s0
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 ff2c 	bl	8000b68 <__aeabi_d2iz>
 8007d10:	2800      	cmp	r0, #0
 8007d12:	f000 8088 	beq.w	8007e26 <__kernel_cos+0x136>
 8007d16:	4632      	mov	r2, r6
 8007d18:	463b      	mov	r3, r7
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	f7f8 fc73 	bl	8000608 <__aeabi_dmul>
 8007d22:	4b51      	ldr	r3, [pc, #324]	; (8007e68 <__kernel_cos+0x178>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	f7f8 fc6d 	bl	8000608 <__aeabi_dmul>
 8007d2e:	a340      	add	r3, pc, #256	; (adr r3, 8007e30 <__kernel_cos+0x140>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	4682      	mov	sl, r0
 8007d36:	468b      	mov	fp, r1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7f8 fc64 	bl	8000608 <__aeabi_dmul>
 8007d40:	a33d      	add	r3, pc, #244	; (adr r3, 8007e38 <__kernel_cos+0x148>)
 8007d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d46:	f7f8 faa9 	bl	800029c <__adddf3>
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	462b      	mov	r3, r5
 8007d4e:	f7f8 fc5b 	bl	8000608 <__aeabi_dmul>
 8007d52:	a33b      	add	r3, pc, #236	; (adr r3, 8007e40 <__kernel_cos+0x150>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fa9e 	bl	8000298 <__aeabi_dsub>
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	462b      	mov	r3, r5
 8007d60:	f7f8 fc52 	bl	8000608 <__aeabi_dmul>
 8007d64:	a338      	add	r3, pc, #224	; (adr r3, 8007e48 <__kernel_cos+0x158>)
 8007d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6a:	f7f8 fa97 	bl	800029c <__adddf3>
 8007d6e:	4622      	mov	r2, r4
 8007d70:	462b      	mov	r3, r5
 8007d72:	f7f8 fc49 	bl	8000608 <__aeabi_dmul>
 8007d76:	a336      	add	r3, pc, #216	; (adr r3, 8007e50 <__kernel_cos+0x160>)
 8007d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d7c:	f7f8 fa8c 	bl	8000298 <__aeabi_dsub>
 8007d80:	4622      	mov	r2, r4
 8007d82:	462b      	mov	r3, r5
 8007d84:	f7f8 fc40 	bl	8000608 <__aeabi_dmul>
 8007d88:	a333      	add	r3, pc, #204	; (adr r3, 8007e58 <__kernel_cos+0x168>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	f7f8 fa85 	bl	800029c <__adddf3>
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f7f8 fc37 	bl	8000608 <__aeabi_dmul>
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	462b      	mov	r3, r5
 8007d9e:	f7f8 fc33 	bl	8000608 <__aeabi_dmul>
 8007da2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da6:	4604      	mov	r4, r0
 8007da8:	460d      	mov	r5, r1
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 fc2b 	bl	8000608 <__aeabi_dmul>
 8007db2:	460b      	mov	r3, r1
 8007db4:	4602      	mov	r2, r0
 8007db6:	4629      	mov	r1, r5
 8007db8:	4620      	mov	r0, r4
 8007dba:	f7f8 fa6d 	bl	8000298 <__aeabi_dsub>
 8007dbe:	4b2b      	ldr	r3, [pc, #172]	; (8007e6c <__kernel_cos+0x17c>)
 8007dc0:	4598      	cmp	r8, r3
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	dc10      	bgt.n	8007dea <__kernel_cos+0xfa>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4650      	mov	r0, sl
 8007dce:	4659      	mov	r1, fp
 8007dd0:	f7f8 fa62 	bl	8000298 <__aeabi_dsub>
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4926      	ldr	r1, [pc, #152]	; (8007e70 <__kernel_cos+0x180>)
 8007dd8:	4602      	mov	r2, r0
 8007dda:	2000      	movs	r0, #0
 8007ddc:	f7f8 fa5c 	bl	8000298 <__aeabi_dsub>
 8007de0:	ec41 0b10 	vmov	d0, r0, r1
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dea:	4b22      	ldr	r3, [pc, #136]	; (8007e74 <__kernel_cos+0x184>)
 8007dec:	4920      	ldr	r1, [pc, #128]	; (8007e70 <__kernel_cos+0x180>)
 8007dee:	4598      	cmp	r8, r3
 8007df0:	bfcc      	ite	gt
 8007df2:	4d21      	ldrgt	r5, [pc, #132]	; (8007e78 <__kernel_cos+0x188>)
 8007df4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007df8:	2400      	movs	r4, #0
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	462b      	mov	r3, r5
 8007dfe:	2000      	movs	r0, #0
 8007e00:	f7f8 fa4a 	bl	8000298 <__aeabi_dsub>
 8007e04:	4622      	mov	r2, r4
 8007e06:	4680      	mov	r8, r0
 8007e08:	4689      	mov	r9, r1
 8007e0a:	462b      	mov	r3, r5
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	4659      	mov	r1, fp
 8007e10:	f7f8 fa42 	bl	8000298 <__aeabi_dsub>
 8007e14:	4632      	mov	r2, r6
 8007e16:	463b      	mov	r3, r7
 8007e18:	f7f8 fa3e 	bl	8000298 <__aeabi_dsub>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	4640      	mov	r0, r8
 8007e22:	4649      	mov	r1, r9
 8007e24:	e7da      	b.n	8007ddc <__kernel_cos+0xec>
 8007e26:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007e60 <__kernel_cos+0x170>
 8007e2a:	e7db      	b.n	8007de4 <__kernel_cos+0xf4>
 8007e2c:	f3af 8000 	nop.w
 8007e30:	be8838d4 	.word	0xbe8838d4
 8007e34:	bda8fae9 	.word	0xbda8fae9
 8007e38:	bdb4b1c4 	.word	0xbdb4b1c4
 8007e3c:	3e21ee9e 	.word	0x3e21ee9e
 8007e40:	809c52ad 	.word	0x809c52ad
 8007e44:	3e927e4f 	.word	0x3e927e4f
 8007e48:	19cb1590 	.word	0x19cb1590
 8007e4c:	3efa01a0 	.word	0x3efa01a0
 8007e50:	16c15177 	.word	0x16c15177
 8007e54:	3f56c16c 	.word	0x3f56c16c
 8007e58:	5555554c 	.word	0x5555554c
 8007e5c:	3fa55555 	.word	0x3fa55555
 8007e60:	00000000 	.word	0x00000000
 8007e64:	3ff00000 	.word	0x3ff00000
 8007e68:	3fe00000 	.word	0x3fe00000
 8007e6c:	3fd33332 	.word	0x3fd33332
 8007e70:	3ff00000 	.word	0x3ff00000
 8007e74:	3fe90000 	.word	0x3fe90000
 8007e78:	3fd20000 	.word	0x3fd20000
 8007e7c:	00000000 	.word	0x00000000

08007e80 <__kernel_rem_pio2>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	ed2d 8b02 	vpush	{d8}
 8007e88:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007e8c:	f112 0f14 	cmn.w	r2, #20
 8007e90:	9308      	str	r3, [sp, #32]
 8007e92:	9101      	str	r1, [sp, #4]
 8007e94:	4bc4      	ldr	r3, [pc, #784]	; (80081a8 <__kernel_rem_pio2+0x328>)
 8007e96:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007e98:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	9b08      	ldr	r3, [sp, #32]
 8007ea2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ea6:	bfa8      	it	ge
 8007ea8:	1ed4      	subge	r4, r2, #3
 8007eaa:	9306      	str	r3, [sp, #24]
 8007eac:	bfb2      	itee	lt
 8007eae:	2400      	movlt	r4, #0
 8007eb0:	2318      	movge	r3, #24
 8007eb2:	fb94 f4f3 	sdivge	r4, r4, r3
 8007eb6:	f06f 0317 	mvn.w	r3, #23
 8007eba:	fb04 3303 	mla	r3, r4, r3, r3
 8007ebe:	eb03 0a02 	add.w	sl, r3, r2
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	9a06      	ldr	r2, [sp, #24]
 8007ec6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008198 <__kernel_rem_pio2+0x318>
 8007eca:	eb03 0802 	add.w	r8, r3, r2
 8007ece:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007ed0:	1aa7      	subs	r7, r4, r2
 8007ed2:	ae22      	add	r6, sp, #136	; 0x88
 8007ed4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ed8:	2500      	movs	r5, #0
 8007eda:	4545      	cmp	r5, r8
 8007edc:	dd13      	ble.n	8007f06 <__kernel_rem_pio2+0x86>
 8007ede:	9b08      	ldr	r3, [sp, #32]
 8007ee0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8008198 <__kernel_rem_pio2+0x318>
 8007ee4:	aa22      	add	r2, sp, #136	; 0x88
 8007ee6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007eea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007eee:	f04f 0800 	mov.w	r8, #0
 8007ef2:	9b02      	ldr	r3, [sp, #8]
 8007ef4:	4598      	cmp	r8, r3
 8007ef6:	dc2f      	bgt.n	8007f58 <__kernel_rem_pio2+0xd8>
 8007ef8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007efc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007f00:	462f      	mov	r7, r5
 8007f02:	2600      	movs	r6, #0
 8007f04:	e01b      	b.n	8007f3e <__kernel_rem_pio2+0xbe>
 8007f06:	42ef      	cmn	r7, r5
 8007f08:	d407      	bmi.n	8007f1a <__kernel_rem_pio2+0x9a>
 8007f0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007f0e:	f7f8 fb11 	bl	8000534 <__aeabi_i2d>
 8007f12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007f16:	3501      	adds	r5, #1
 8007f18:	e7df      	b.n	8007eda <__kernel_rem_pio2+0x5a>
 8007f1a:	ec51 0b18 	vmov	r0, r1, d8
 8007f1e:	e7f8      	b.n	8007f12 <__kernel_rem_pio2+0x92>
 8007f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007f28:	f7f8 fb6e 	bl	8000608 <__aeabi_dmul>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f34:	f7f8 f9b2 	bl	800029c <__adddf3>
 8007f38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f3c:	3601      	adds	r6, #1
 8007f3e:	9b06      	ldr	r3, [sp, #24]
 8007f40:	429e      	cmp	r6, r3
 8007f42:	f1a7 0708 	sub.w	r7, r7, #8
 8007f46:	ddeb      	ble.n	8007f20 <__kernel_rem_pio2+0xa0>
 8007f48:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f4c:	f108 0801 	add.w	r8, r8, #1
 8007f50:	ecab 7b02 	vstmia	fp!, {d7}
 8007f54:	3508      	adds	r5, #8
 8007f56:	e7cc      	b.n	8007ef2 <__kernel_rem_pio2+0x72>
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	aa0e      	add	r2, sp, #56	; 0x38
 8007f5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007f60:	930d      	str	r3, [sp, #52]	; 0x34
 8007f62:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007f64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007f68:	9c02      	ldr	r4, [sp, #8]
 8007f6a:	930c      	str	r3, [sp, #48]	; 0x30
 8007f6c:	00e3      	lsls	r3, r4, #3
 8007f6e:	930a      	str	r3, [sp, #40]	; 0x28
 8007f70:	ab9a      	add	r3, sp, #616	; 0x268
 8007f72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007f7a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007f7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007f80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007f84:	46c3      	mov	fp, r8
 8007f86:	46a1      	mov	r9, r4
 8007f88:	f1b9 0f00 	cmp.w	r9, #0
 8007f8c:	f1a5 0508 	sub.w	r5, r5, #8
 8007f90:	dc77      	bgt.n	8008082 <__kernel_rem_pio2+0x202>
 8007f92:	ec47 6b10 	vmov	d0, r6, r7
 8007f96:	4650      	mov	r0, sl
 8007f98:	f000 fdae 	bl	8008af8 <scalbn>
 8007f9c:	ec57 6b10 	vmov	r6, r7, d0
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007fa6:	ee10 0a10 	vmov	r0, s0
 8007faa:	4639      	mov	r1, r7
 8007fac:	f7f8 fb2c 	bl	8000608 <__aeabi_dmul>
 8007fb0:	ec41 0b10 	vmov	d0, r0, r1
 8007fb4:	f000 fd20 	bl	80089f8 <floor>
 8007fb8:	4b7c      	ldr	r3, [pc, #496]	; (80081ac <__kernel_rem_pio2+0x32c>)
 8007fba:	ec51 0b10 	vmov	r0, r1, d0
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f7f8 fb22 	bl	8000608 <__aeabi_dmul>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	460b      	mov	r3, r1
 8007fc8:	4630      	mov	r0, r6
 8007fca:	4639      	mov	r1, r7
 8007fcc:	f7f8 f964 	bl	8000298 <__aeabi_dsub>
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	f7f8 fdc8 	bl	8000b68 <__aeabi_d2iz>
 8007fd8:	9004      	str	r0, [sp, #16]
 8007fda:	f7f8 faab 	bl	8000534 <__aeabi_i2d>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 f957 	bl	8000298 <__aeabi_dsub>
 8007fea:	f1ba 0f00 	cmp.w	sl, #0
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460f      	mov	r7, r1
 8007ff2:	dd6d      	ble.n	80080d0 <__kernel_rem_pio2+0x250>
 8007ff4:	1e62      	subs	r2, r4, #1
 8007ff6:	ab0e      	add	r3, sp, #56	; 0x38
 8007ff8:	9d04      	ldr	r5, [sp, #16]
 8007ffa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007ffe:	f1ca 0118 	rsb	r1, sl, #24
 8008002:	fa40 f301 	asr.w	r3, r0, r1
 8008006:	441d      	add	r5, r3
 8008008:	408b      	lsls	r3, r1
 800800a:	1ac0      	subs	r0, r0, r3
 800800c:	ab0e      	add	r3, sp, #56	; 0x38
 800800e:	9504      	str	r5, [sp, #16]
 8008010:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008014:	f1ca 0317 	rsb	r3, sl, #23
 8008018:	fa40 fb03 	asr.w	fp, r0, r3
 800801c:	f1bb 0f00 	cmp.w	fp, #0
 8008020:	dd65      	ble.n	80080ee <__kernel_rem_pio2+0x26e>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	2200      	movs	r2, #0
 8008026:	3301      	adds	r3, #1
 8008028:	9304      	str	r3, [sp, #16]
 800802a:	4615      	mov	r5, r2
 800802c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008030:	4294      	cmp	r4, r2
 8008032:	f300 809c 	bgt.w	800816e <__kernel_rem_pio2+0x2ee>
 8008036:	f1ba 0f00 	cmp.w	sl, #0
 800803a:	dd07      	ble.n	800804c <__kernel_rem_pio2+0x1cc>
 800803c:	f1ba 0f01 	cmp.w	sl, #1
 8008040:	f000 80c0 	beq.w	80081c4 <__kernel_rem_pio2+0x344>
 8008044:	f1ba 0f02 	cmp.w	sl, #2
 8008048:	f000 80c6 	beq.w	80081d8 <__kernel_rem_pio2+0x358>
 800804c:	f1bb 0f02 	cmp.w	fp, #2
 8008050:	d14d      	bne.n	80080ee <__kernel_rem_pio2+0x26e>
 8008052:	4632      	mov	r2, r6
 8008054:	463b      	mov	r3, r7
 8008056:	4956      	ldr	r1, [pc, #344]	; (80081b0 <__kernel_rem_pio2+0x330>)
 8008058:	2000      	movs	r0, #0
 800805a:	f7f8 f91d 	bl	8000298 <__aeabi_dsub>
 800805e:	4606      	mov	r6, r0
 8008060:	460f      	mov	r7, r1
 8008062:	2d00      	cmp	r5, #0
 8008064:	d043      	beq.n	80080ee <__kernel_rem_pio2+0x26e>
 8008066:	4650      	mov	r0, sl
 8008068:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80081a0 <__kernel_rem_pio2+0x320>
 800806c:	f000 fd44 	bl	8008af8 <scalbn>
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	ec53 2b10 	vmov	r2, r3, d0
 8008078:	f7f8 f90e 	bl	8000298 <__aeabi_dsub>
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	e035      	b.n	80080ee <__kernel_rem_pio2+0x26e>
 8008082:	4b4c      	ldr	r3, [pc, #304]	; (80081b4 <__kernel_rem_pio2+0x334>)
 8008084:	2200      	movs	r2, #0
 8008086:	4630      	mov	r0, r6
 8008088:	4639      	mov	r1, r7
 800808a:	f7f8 fabd 	bl	8000608 <__aeabi_dmul>
 800808e:	f7f8 fd6b 	bl	8000b68 <__aeabi_d2iz>
 8008092:	f7f8 fa4f 	bl	8000534 <__aeabi_i2d>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	ec43 2b18 	vmov	d8, r2, r3
 800809e:	4b46      	ldr	r3, [pc, #280]	; (80081b8 <__kernel_rem_pio2+0x338>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	f7f8 fab1 	bl	8000608 <__aeabi_dmul>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4630      	mov	r0, r6
 80080ac:	4639      	mov	r1, r7
 80080ae:	f7f8 f8f3 	bl	8000298 <__aeabi_dsub>
 80080b2:	f7f8 fd59 	bl	8000b68 <__aeabi_d2iz>
 80080b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80080ba:	f84b 0b04 	str.w	r0, [fp], #4
 80080be:	ec51 0b18 	vmov	r0, r1, d8
 80080c2:	f7f8 f8eb 	bl	800029c <__adddf3>
 80080c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80080ca:	4606      	mov	r6, r0
 80080cc:	460f      	mov	r7, r1
 80080ce:	e75b      	b.n	8007f88 <__kernel_rem_pio2+0x108>
 80080d0:	d106      	bne.n	80080e0 <__kernel_rem_pio2+0x260>
 80080d2:	1e63      	subs	r3, r4, #1
 80080d4:	aa0e      	add	r2, sp, #56	; 0x38
 80080d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80080da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80080de:	e79d      	b.n	800801c <__kernel_rem_pio2+0x19c>
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <__kernel_rem_pio2+0x33c>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 fd16 	bl	8000b14 <__aeabi_dcmpge>
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d13d      	bne.n	8008168 <__kernel_rem_pio2+0x2e8>
 80080ec:	4683      	mov	fp, r0
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 fcef 	bl	8000ad8 <__aeabi_dcmpeq>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f000 80c0 	beq.w	8008280 <__kernel_rem_pio2+0x400>
 8008100:	1e65      	subs	r5, r4, #1
 8008102:	462b      	mov	r3, r5
 8008104:	2200      	movs	r2, #0
 8008106:	9902      	ldr	r1, [sp, #8]
 8008108:	428b      	cmp	r3, r1
 800810a:	da6c      	bge.n	80081e6 <__kernel_rem_pio2+0x366>
 800810c:	2a00      	cmp	r2, #0
 800810e:	f000 8089 	beq.w	8008224 <__kernel_rem_pio2+0x3a4>
 8008112:	ab0e      	add	r3, sp, #56	; 0x38
 8008114:	f1aa 0a18 	sub.w	sl, sl, #24
 8008118:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80ad 	beq.w	800827c <__kernel_rem_pio2+0x3fc>
 8008122:	4650      	mov	r0, sl
 8008124:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80081a0 <__kernel_rem_pio2+0x320>
 8008128:	f000 fce6 	bl	8008af8 <scalbn>
 800812c:	ab9a      	add	r3, sp, #616	; 0x268
 800812e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008132:	ec57 6b10 	vmov	r6, r7, d0
 8008136:	00ec      	lsls	r4, r5, #3
 8008138:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800813c:	46aa      	mov	sl, r5
 800813e:	f1ba 0f00 	cmp.w	sl, #0
 8008142:	f280 80d6 	bge.w	80082f2 <__kernel_rem_pio2+0x472>
 8008146:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8008198 <__kernel_rem_pio2+0x318>
 800814a:	462e      	mov	r6, r5
 800814c:	2e00      	cmp	r6, #0
 800814e:	f2c0 8104 	blt.w	800835a <__kernel_rem_pio2+0x4da>
 8008152:	ab72      	add	r3, sp, #456	; 0x1c8
 8008154:	ed8d 8b06 	vstr	d8, [sp, #24]
 8008158:	f8df a064 	ldr.w	sl, [pc, #100]	; 80081c0 <__kernel_rem_pio2+0x340>
 800815c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8008160:	f04f 0800 	mov.w	r8, #0
 8008164:	1baf      	subs	r7, r5, r6
 8008166:	e0ea      	b.n	800833e <__kernel_rem_pio2+0x4be>
 8008168:	f04f 0b02 	mov.w	fp, #2
 800816c:	e759      	b.n	8008022 <__kernel_rem_pio2+0x1a2>
 800816e:	f8d8 3000 	ldr.w	r3, [r8]
 8008172:	b955      	cbnz	r5, 800818a <__kernel_rem_pio2+0x30a>
 8008174:	b123      	cbz	r3, 8008180 <__kernel_rem_pio2+0x300>
 8008176:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800817a:	f8c8 3000 	str.w	r3, [r8]
 800817e:	2301      	movs	r3, #1
 8008180:	3201      	adds	r2, #1
 8008182:	f108 0804 	add.w	r8, r8, #4
 8008186:	461d      	mov	r5, r3
 8008188:	e752      	b.n	8008030 <__kernel_rem_pio2+0x1b0>
 800818a:	1acb      	subs	r3, r1, r3
 800818c:	f8c8 3000 	str.w	r3, [r8]
 8008190:	462b      	mov	r3, r5
 8008192:	e7f5      	b.n	8008180 <__kernel_rem_pio2+0x300>
 8008194:	f3af 8000 	nop.w
	...
 80081a4:	3ff00000 	.word	0x3ff00000
 80081a8:	08009808 	.word	0x08009808
 80081ac:	40200000 	.word	0x40200000
 80081b0:	3ff00000 	.word	0x3ff00000
 80081b4:	3e700000 	.word	0x3e700000
 80081b8:	41700000 	.word	0x41700000
 80081bc:	3fe00000 	.word	0x3fe00000
 80081c0:	080097c8 	.word	0x080097c8
 80081c4:	1e62      	subs	r2, r4, #1
 80081c6:	ab0e      	add	r3, sp, #56	; 0x38
 80081c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80081d0:	a90e      	add	r1, sp, #56	; 0x38
 80081d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80081d6:	e739      	b.n	800804c <__kernel_rem_pio2+0x1cc>
 80081d8:	1e62      	subs	r2, r4, #1
 80081da:	ab0e      	add	r3, sp, #56	; 0x38
 80081dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80081e4:	e7f4      	b.n	80081d0 <__kernel_rem_pio2+0x350>
 80081e6:	a90e      	add	r1, sp, #56	; 0x38
 80081e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	430a      	orrs	r2, r1
 80081f0:	e789      	b.n	8008106 <__kernel_rem_pio2+0x286>
 80081f2:	3301      	adds	r3, #1
 80081f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d0fa      	beq.n	80081f2 <__kernel_rem_pio2+0x372>
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8008202:	446a      	add	r2, sp
 8008204:	3a98      	subs	r2, #152	; 0x98
 8008206:	920a      	str	r2, [sp, #40]	; 0x28
 8008208:	9a08      	ldr	r2, [sp, #32]
 800820a:	18e3      	adds	r3, r4, r3
 800820c:	18a5      	adds	r5, r4, r2
 800820e:	aa22      	add	r2, sp, #136	; 0x88
 8008210:	f104 0801 	add.w	r8, r4, #1
 8008214:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	9b04      	ldr	r3, [sp, #16]
 800821c:	4543      	cmp	r3, r8
 800821e:	da04      	bge.n	800822a <__kernel_rem_pio2+0x3aa>
 8008220:	461c      	mov	r4, r3
 8008222:	e6a3      	b.n	8007f6c <__kernel_rem_pio2+0xec>
 8008224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008226:	2301      	movs	r3, #1
 8008228:	e7e4      	b.n	80081f4 <__kernel_rem_pio2+0x374>
 800822a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008230:	f7f8 f980 	bl	8000534 <__aeabi_i2d>
 8008234:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800823a:	46ab      	mov	fp, r5
 800823c:	461c      	mov	r4, r3
 800823e:	f04f 0900 	mov.w	r9, #0
 8008242:	2600      	movs	r6, #0
 8008244:	2700      	movs	r7, #0
 8008246:	9b06      	ldr	r3, [sp, #24]
 8008248:	4599      	cmp	r9, r3
 800824a:	dd06      	ble.n	800825a <__kernel_rem_pio2+0x3da>
 800824c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008252:	f108 0801 	add.w	r8, r8, #1
 8008256:	930a      	str	r3, [sp, #40]	; 0x28
 8008258:	e7df      	b.n	800821a <__kernel_rem_pio2+0x39a>
 800825a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800825e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008262:	f7f8 f9d1 	bl	8000608 <__aeabi_dmul>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 f815 	bl	800029c <__adddf3>
 8008272:	f109 0901 	add.w	r9, r9, #1
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	e7e4      	b.n	8008246 <__kernel_rem_pio2+0x3c6>
 800827c:	3d01      	subs	r5, #1
 800827e:	e748      	b.n	8008112 <__kernel_rem_pio2+0x292>
 8008280:	ec47 6b10 	vmov	d0, r6, r7
 8008284:	f1ca 0000 	rsb	r0, sl, #0
 8008288:	f000 fc36 	bl	8008af8 <scalbn>
 800828c:	ec57 6b10 	vmov	r6, r7, d0
 8008290:	4ba0      	ldr	r3, [pc, #640]	; (8008514 <__kernel_rem_pio2+0x694>)
 8008292:	ee10 0a10 	vmov	r0, s0
 8008296:	2200      	movs	r2, #0
 8008298:	4639      	mov	r1, r7
 800829a:	f7f8 fc3b 	bl	8000b14 <__aeabi_dcmpge>
 800829e:	b1f8      	cbz	r0, 80082e0 <__kernel_rem_pio2+0x460>
 80082a0:	4b9d      	ldr	r3, [pc, #628]	; (8008518 <__kernel_rem_pio2+0x698>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 f9ae 	bl	8000608 <__aeabi_dmul>
 80082ac:	f7f8 fc5c 	bl	8000b68 <__aeabi_d2iz>
 80082b0:	4680      	mov	r8, r0
 80082b2:	f7f8 f93f 	bl	8000534 <__aeabi_i2d>
 80082b6:	4b97      	ldr	r3, [pc, #604]	; (8008514 <__kernel_rem_pio2+0x694>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f7f8 f9a5 	bl	8000608 <__aeabi_dmul>
 80082be:	460b      	mov	r3, r1
 80082c0:	4602      	mov	r2, r0
 80082c2:	4639      	mov	r1, r7
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7f7 ffe7 	bl	8000298 <__aeabi_dsub>
 80082ca:	f7f8 fc4d 	bl	8000b68 <__aeabi_d2iz>
 80082ce:	1c65      	adds	r5, r4, #1
 80082d0:	ab0e      	add	r3, sp, #56	; 0x38
 80082d2:	f10a 0a18 	add.w	sl, sl, #24
 80082d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80082da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80082de:	e720      	b.n	8008122 <__kernel_rem_pio2+0x2a2>
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	f7f8 fc40 	bl	8000b68 <__aeabi_d2iz>
 80082e8:	ab0e      	add	r3, sp, #56	; 0x38
 80082ea:	4625      	mov	r5, r4
 80082ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80082f0:	e717      	b.n	8008122 <__kernel_rem_pio2+0x2a2>
 80082f2:	ab0e      	add	r3, sp, #56	; 0x38
 80082f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80082f8:	f7f8 f91c 	bl	8000534 <__aeabi_i2d>
 80082fc:	4632      	mov	r2, r6
 80082fe:	463b      	mov	r3, r7
 8008300:	f7f8 f982 	bl	8000608 <__aeabi_dmul>
 8008304:	4b84      	ldr	r3, [pc, #528]	; (8008518 <__kernel_rem_pio2+0x698>)
 8008306:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800830a:	2200      	movs	r2, #0
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 f97a 	bl	8000608 <__aeabi_dmul>
 8008314:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008318:	4606      	mov	r6, r0
 800831a:	460f      	mov	r7, r1
 800831c:	e70f      	b.n	800813e <__kernel_rem_pio2+0x2be>
 800831e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008322:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8008326:	f7f8 f96f 	bl	8000608 <__aeabi_dmul>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008332:	f7f7 ffb3 	bl	800029c <__adddf3>
 8008336:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800833a:	f108 0801 	add.w	r8, r8, #1
 800833e:	9b02      	ldr	r3, [sp, #8]
 8008340:	4598      	cmp	r8, r3
 8008342:	dc01      	bgt.n	8008348 <__kernel_rem_pio2+0x4c8>
 8008344:	45b8      	cmp	r8, r7
 8008346:	ddea      	ble.n	800831e <__kernel_rem_pio2+0x49e>
 8008348:	ed9d 7b06 	vldr	d7, [sp, #24]
 800834c:	ab4a      	add	r3, sp, #296	; 0x128
 800834e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008352:	ed87 7b00 	vstr	d7, [r7]
 8008356:	3e01      	subs	r6, #1
 8008358:	e6f8      	b.n	800814c <__kernel_rem_pio2+0x2cc>
 800835a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800835c:	2b02      	cmp	r3, #2
 800835e:	dc0b      	bgt.n	8008378 <__kernel_rem_pio2+0x4f8>
 8008360:	2b00      	cmp	r3, #0
 8008362:	dc35      	bgt.n	80083d0 <__kernel_rem_pio2+0x550>
 8008364:	d059      	beq.n	800841a <__kernel_rem_pio2+0x59a>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	f003 0007 	and.w	r0, r3, #7
 800836c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8008370:	ecbd 8b02 	vpop	{d8}
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800837a:	2b03      	cmp	r3, #3
 800837c:	d1f3      	bne.n	8008366 <__kernel_rem_pio2+0x4e6>
 800837e:	ab4a      	add	r3, sp, #296	; 0x128
 8008380:	4423      	add	r3, r4
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	461c      	mov	r4, r3
 8008386:	469a      	mov	sl, r3
 8008388:	9502      	str	r5, [sp, #8]
 800838a:	9b02      	ldr	r3, [sp, #8]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f1aa 0a08 	sub.w	sl, sl, #8
 8008392:	dc6b      	bgt.n	800846c <__kernel_rem_pio2+0x5ec>
 8008394:	46aa      	mov	sl, r5
 8008396:	f1ba 0f01 	cmp.w	sl, #1
 800839a:	f1a4 0408 	sub.w	r4, r4, #8
 800839e:	f300 8085 	bgt.w	80084ac <__kernel_rem_pio2+0x62c>
 80083a2:	9c06      	ldr	r4, [sp, #24]
 80083a4:	2000      	movs	r0, #0
 80083a6:	3408      	adds	r4, #8
 80083a8:	2100      	movs	r1, #0
 80083aa:	2d01      	cmp	r5, #1
 80083ac:	f300 809d 	bgt.w	80084ea <__kernel_rem_pio2+0x66a>
 80083b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80083b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80083b8:	f1bb 0f00 	cmp.w	fp, #0
 80083bc:	f040 809b 	bne.w	80084f6 <__kernel_rem_pio2+0x676>
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	e9c3 5600 	strd	r5, r6, [r3]
 80083c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80083ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80083ce:	e7ca      	b.n	8008366 <__kernel_rem_pio2+0x4e6>
 80083d0:	3408      	adds	r4, #8
 80083d2:	ab4a      	add	r3, sp, #296	; 0x128
 80083d4:	441c      	add	r4, r3
 80083d6:	462e      	mov	r6, r5
 80083d8:	2000      	movs	r0, #0
 80083da:	2100      	movs	r1, #0
 80083dc:	2e00      	cmp	r6, #0
 80083de:	da36      	bge.n	800844e <__kernel_rem_pio2+0x5ce>
 80083e0:	f1bb 0f00 	cmp.w	fp, #0
 80083e4:	d039      	beq.n	800845a <__kernel_rem_pio2+0x5da>
 80083e6:	4602      	mov	r2, r0
 80083e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083ec:	9c01      	ldr	r4, [sp, #4]
 80083ee:	e9c4 2300 	strd	r2, r3, [r4]
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80083fa:	f7f7 ff4d 	bl	8000298 <__aeabi_dsub>
 80083fe:	ae4c      	add	r6, sp, #304	; 0x130
 8008400:	2401      	movs	r4, #1
 8008402:	42a5      	cmp	r5, r4
 8008404:	da2c      	bge.n	8008460 <__kernel_rem_pio2+0x5e0>
 8008406:	f1bb 0f00 	cmp.w	fp, #0
 800840a:	d002      	beq.n	8008412 <__kernel_rem_pio2+0x592>
 800840c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008410:	4619      	mov	r1, r3
 8008412:	9b01      	ldr	r3, [sp, #4]
 8008414:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008418:	e7a5      	b.n	8008366 <__kernel_rem_pio2+0x4e6>
 800841a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800841e:	eb0d 0403 	add.w	r4, sp, r3
 8008422:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8008426:	2000      	movs	r0, #0
 8008428:	2100      	movs	r1, #0
 800842a:	2d00      	cmp	r5, #0
 800842c:	da09      	bge.n	8008442 <__kernel_rem_pio2+0x5c2>
 800842e:	f1bb 0f00 	cmp.w	fp, #0
 8008432:	d002      	beq.n	800843a <__kernel_rem_pio2+0x5ba>
 8008434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008438:	4619      	mov	r1, r3
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	e9c3 0100 	strd	r0, r1, [r3]
 8008440:	e791      	b.n	8008366 <__kernel_rem_pio2+0x4e6>
 8008442:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008446:	f7f7 ff29 	bl	800029c <__adddf3>
 800844a:	3d01      	subs	r5, #1
 800844c:	e7ed      	b.n	800842a <__kernel_rem_pio2+0x5aa>
 800844e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008452:	f7f7 ff23 	bl	800029c <__adddf3>
 8008456:	3e01      	subs	r6, #1
 8008458:	e7c0      	b.n	80083dc <__kernel_rem_pio2+0x55c>
 800845a:	4602      	mov	r2, r0
 800845c:	460b      	mov	r3, r1
 800845e:	e7c5      	b.n	80083ec <__kernel_rem_pio2+0x56c>
 8008460:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008464:	f7f7 ff1a 	bl	800029c <__adddf3>
 8008468:	3401      	adds	r4, #1
 800846a:	e7ca      	b.n	8008402 <__kernel_rem_pio2+0x582>
 800846c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008470:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008474:	9b02      	ldr	r3, [sp, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	4632      	mov	r2, r6
 800847c:	463b      	mov	r3, r7
 800847e:	4640      	mov	r0, r8
 8008480:	4649      	mov	r1, r9
 8008482:	f7f7 ff0b 	bl	800029c <__adddf3>
 8008486:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800848a:	4602      	mov	r2, r0
 800848c:	460b      	mov	r3, r1
 800848e:	4640      	mov	r0, r8
 8008490:	4649      	mov	r1, r9
 8008492:	f7f7 ff01 	bl	8000298 <__aeabi_dsub>
 8008496:	4632      	mov	r2, r6
 8008498:	463b      	mov	r3, r7
 800849a:	f7f7 feff 	bl	800029c <__adddf3>
 800849e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80084a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80084a6:	ed8a 7b00 	vstr	d7, [sl]
 80084aa:	e76e      	b.n	800838a <__kernel_rem_pio2+0x50a>
 80084ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80084b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80084b4:	4640      	mov	r0, r8
 80084b6:	4632      	mov	r2, r6
 80084b8:	463b      	mov	r3, r7
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f7 feee 	bl	800029c <__adddf3>
 80084c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4640      	mov	r0, r8
 80084ca:	4649      	mov	r1, r9
 80084cc:	f7f7 fee4 	bl	8000298 <__aeabi_dsub>
 80084d0:	4632      	mov	r2, r6
 80084d2:	463b      	mov	r3, r7
 80084d4:	f7f7 fee2 	bl	800029c <__adddf3>
 80084d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80084e0:	ed84 7b00 	vstr	d7, [r4]
 80084e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e8:	e755      	b.n	8008396 <__kernel_rem_pio2+0x516>
 80084ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80084ee:	f7f7 fed5 	bl	800029c <__adddf3>
 80084f2:	3d01      	subs	r5, #1
 80084f4:	e759      	b.n	80083aa <__kernel_rem_pio2+0x52a>
 80084f6:	9b01      	ldr	r3, [sp, #4]
 80084f8:	9a01      	ldr	r2, [sp, #4]
 80084fa:	601d      	str	r5, [r3, #0]
 80084fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008500:	605c      	str	r4, [r3, #4]
 8008502:	609f      	str	r7, [r3, #8]
 8008504:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008508:	60d3      	str	r3, [r2, #12]
 800850a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800850e:	6110      	str	r0, [r2, #16]
 8008510:	6153      	str	r3, [r2, #20]
 8008512:	e728      	b.n	8008366 <__kernel_rem_pio2+0x4e6>
 8008514:	41700000 	.word	0x41700000
 8008518:	3e700000 	.word	0x3e700000
 800851c:	00000000 	.word	0x00000000

08008520 <__kernel_sin>:
 8008520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	ed2d 8b04 	vpush	{d8-d9}
 8008528:	eeb0 8a41 	vmov.f32	s16, s2
 800852c:	eef0 8a61 	vmov.f32	s17, s3
 8008530:	ec55 4b10 	vmov	r4, r5, d0
 8008534:	b083      	sub	sp, #12
 8008536:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800853a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800853e:	9001      	str	r0, [sp, #4]
 8008540:	da06      	bge.n	8008550 <__kernel_sin+0x30>
 8008542:	ee10 0a10 	vmov	r0, s0
 8008546:	4629      	mov	r1, r5
 8008548:	f7f8 fb0e 	bl	8000b68 <__aeabi_d2iz>
 800854c:	2800      	cmp	r0, #0
 800854e:	d051      	beq.n	80085f4 <__kernel_sin+0xd4>
 8008550:	4622      	mov	r2, r4
 8008552:	462b      	mov	r3, r5
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 f856 	bl	8000608 <__aeabi_dmul>
 800855c:	4682      	mov	sl, r0
 800855e:	468b      	mov	fp, r1
 8008560:	4602      	mov	r2, r0
 8008562:	460b      	mov	r3, r1
 8008564:	4620      	mov	r0, r4
 8008566:	4629      	mov	r1, r5
 8008568:	f7f8 f84e 	bl	8000608 <__aeabi_dmul>
 800856c:	a341      	add	r3, pc, #260	; (adr r3, 8008674 <__kernel_sin+0x154>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	4650      	mov	r0, sl
 8008578:	4659      	mov	r1, fp
 800857a:	f7f8 f845 	bl	8000608 <__aeabi_dmul>
 800857e:	a33f      	add	r3, pc, #252	; (adr r3, 800867c <__kernel_sin+0x15c>)
 8008580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008584:	f7f7 fe88 	bl	8000298 <__aeabi_dsub>
 8008588:	4652      	mov	r2, sl
 800858a:	465b      	mov	r3, fp
 800858c:	f7f8 f83c 	bl	8000608 <__aeabi_dmul>
 8008590:	a33c      	add	r3, pc, #240	; (adr r3, 8008684 <__kernel_sin+0x164>)
 8008592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008596:	f7f7 fe81 	bl	800029c <__adddf3>
 800859a:	4652      	mov	r2, sl
 800859c:	465b      	mov	r3, fp
 800859e:	f7f8 f833 	bl	8000608 <__aeabi_dmul>
 80085a2:	a33a      	add	r3, pc, #232	; (adr r3, 800868c <__kernel_sin+0x16c>)
 80085a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a8:	f7f7 fe76 	bl	8000298 <__aeabi_dsub>
 80085ac:	4652      	mov	r2, sl
 80085ae:	465b      	mov	r3, fp
 80085b0:	f7f8 f82a 	bl	8000608 <__aeabi_dmul>
 80085b4:	a337      	add	r3, pc, #220	; (adr r3, 8008694 <__kernel_sin+0x174>)
 80085b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ba:	f7f7 fe6f 	bl	800029c <__adddf3>
 80085be:	9b01      	ldr	r3, [sp, #4]
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	b9eb      	cbnz	r3, 8008602 <__kernel_sin+0xe2>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4650      	mov	r0, sl
 80085cc:	4659      	mov	r1, fp
 80085ce:	f7f8 f81b 	bl	8000608 <__aeabi_dmul>
 80085d2:	a325      	add	r3, pc, #148	; (adr r3, 8008668 <__kernel_sin+0x148>)
 80085d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d8:	f7f7 fe5e 	bl	8000298 <__aeabi_dsub>
 80085dc:	4642      	mov	r2, r8
 80085de:	464b      	mov	r3, r9
 80085e0:	f7f8 f812 	bl	8000608 <__aeabi_dmul>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4620      	mov	r0, r4
 80085ea:	4629      	mov	r1, r5
 80085ec:	f7f7 fe56 	bl	800029c <__adddf3>
 80085f0:	4604      	mov	r4, r0
 80085f2:	460d      	mov	r5, r1
 80085f4:	ec45 4b10 	vmov	d0, r4, r5
 80085f8:	b003      	add	sp, #12
 80085fa:	ecbd 8b04 	vpop	{d8-d9}
 80085fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008602:	4b1b      	ldr	r3, [pc, #108]	; (8008670 <__kernel_sin+0x150>)
 8008604:	ec51 0b18 	vmov	r0, r1, d8
 8008608:	2200      	movs	r2, #0
 800860a:	f7f7 fffd 	bl	8000608 <__aeabi_dmul>
 800860e:	4632      	mov	r2, r6
 8008610:	ec41 0b19 	vmov	d9, r0, r1
 8008614:	463b      	mov	r3, r7
 8008616:	4640      	mov	r0, r8
 8008618:	4649      	mov	r1, r9
 800861a:	f7f7 fff5 	bl	8000608 <__aeabi_dmul>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	ec51 0b19 	vmov	r0, r1, d9
 8008626:	f7f7 fe37 	bl	8000298 <__aeabi_dsub>
 800862a:	4652      	mov	r2, sl
 800862c:	465b      	mov	r3, fp
 800862e:	f7f7 ffeb 	bl	8000608 <__aeabi_dmul>
 8008632:	ec53 2b18 	vmov	r2, r3, d8
 8008636:	f7f7 fe2f 	bl	8000298 <__aeabi_dsub>
 800863a:	a30b      	add	r3, pc, #44	; (adr r3, 8008668 <__kernel_sin+0x148>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	4606      	mov	r6, r0
 8008642:	460f      	mov	r7, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f7 ffde 	bl	8000608 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f7 fe22 	bl	800029c <__adddf3>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4620      	mov	r0, r4
 800865e:	4629      	mov	r1, r5
 8008660:	f7f7 fe1a 	bl	8000298 <__aeabi_dsub>
 8008664:	e7c4      	b.n	80085f0 <__kernel_sin+0xd0>
 8008666:	bf00      	nop
 8008668:	55555549 	.word	0x55555549
 800866c:	3fc55555 	.word	0x3fc55555
 8008670:	3fe00000 	.word	0x3fe00000
 8008674:	5acfd57c 	.word	0x5acfd57c
 8008678:	3de5d93a 	.word	0x3de5d93a
 800867c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008680:	3e5ae5e6 	.word	0x3e5ae5e6
 8008684:	57b1fe7d 	.word	0x57b1fe7d
 8008688:	3ec71de3 	.word	0x3ec71de3
 800868c:	19c161d5 	.word	0x19c161d5
 8008690:	3f2a01a0 	.word	0x3f2a01a0
 8008694:	1110f8a6 	.word	0x1110f8a6
 8008698:	3f811111 	.word	0x3f811111
 800869c:	00000000 	.word	0x00000000

080086a0 <atan>:
 80086a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	ec55 4b10 	vmov	r4, r5, d0
 80086a8:	4bc3      	ldr	r3, [pc, #780]	; (80089b8 <atan+0x318>)
 80086aa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80086ae:	429e      	cmp	r6, r3
 80086b0:	46ab      	mov	fp, r5
 80086b2:	dd18      	ble.n	80086e6 <atan+0x46>
 80086b4:	4bc1      	ldr	r3, [pc, #772]	; (80089bc <atan+0x31c>)
 80086b6:	429e      	cmp	r6, r3
 80086b8:	dc01      	bgt.n	80086be <atan+0x1e>
 80086ba:	d109      	bne.n	80086d0 <atan+0x30>
 80086bc:	b144      	cbz	r4, 80086d0 <atan+0x30>
 80086be:	4622      	mov	r2, r4
 80086c0:	462b      	mov	r3, r5
 80086c2:	4620      	mov	r0, r4
 80086c4:	4629      	mov	r1, r5
 80086c6:	f7f7 fde9 	bl	800029c <__adddf3>
 80086ca:	4604      	mov	r4, r0
 80086cc:	460d      	mov	r5, r1
 80086ce:	e006      	b.n	80086de <atan+0x3e>
 80086d0:	f1bb 0f00 	cmp.w	fp, #0
 80086d4:	f300 8131 	bgt.w	800893a <atan+0x29a>
 80086d8:	a59b      	add	r5, pc, #620	; (adr r5, 8008948 <atan+0x2a8>)
 80086da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80086de:	ec45 4b10 	vmov	d0, r4, r5
 80086e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	4bb6      	ldr	r3, [pc, #728]	; (80089c0 <atan+0x320>)
 80086e8:	429e      	cmp	r6, r3
 80086ea:	dc14      	bgt.n	8008716 <atan+0x76>
 80086ec:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80086f0:	429e      	cmp	r6, r3
 80086f2:	dc0d      	bgt.n	8008710 <atan+0x70>
 80086f4:	a396      	add	r3, pc, #600	; (adr r3, 8008950 <atan+0x2b0>)
 80086f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fa:	ee10 0a10 	vmov	r0, s0
 80086fe:	4629      	mov	r1, r5
 8008700:	f7f7 fdcc 	bl	800029c <__adddf3>
 8008704:	4baf      	ldr	r3, [pc, #700]	; (80089c4 <atan+0x324>)
 8008706:	2200      	movs	r2, #0
 8008708:	f7f8 fa0e 	bl	8000b28 <__aeabi_dcmpgt>
 800870c:	2800      	cmp	r0, #0
 800870e:	d1e6      	bne.n	80086de <atan+0x3e>
 8008710:	f04f 3aff 	mov.w	sl, #4294967295
 8008714:	e02b      	b.n	800876e <atan+0xce>
 8008716:	f000 f963 	bl	80089e0 <fabs>
 800871a:	4bab      	ldr	r3, [pc, #684]	; (80089c8 <atan+0x328>)
 800871c:	429e      	cmp	r6, r3
 800871e:	ec55 4b10 	vmov	r4, r5, d0
 8008722:	f300 80bf 	bgt.w	80088a4 <atan+0x204>
 8008726:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800872a:	429e      	cmp	r6, r3
 800872c:	f300 80a0 	bgt.w	8008870 <atan+0x1d0>
 8008730:	ee10 2a10 	vmov	r2, s0
 8008734:	ee10 0a10 	vmov	r0, s0
 8008738:	462b      	mov	r3, r5
 800873a:	4629      	mov	r1, r5
 800873c:	f7f7 fdae 	bl	800029c <__adddf3>
 8008740:	4ba0      	ldr	r3, [pc, #640]	; (80089c4 <atan+0x324>)
 8008742:	2200      	movs	r2, #0
 8008744:	f7f7 fda8 	bl	8000298 <__aeabi_dsub>
 8008748:	2200      	movs	r2, #0
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f7f7 fda1 	bl	800029c <__adddf3>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f87b 	bl	800085c <__aeabi_ddiv>
 8008766:	f04f 0a00 	mov.w	sl, #0
 800876a:	4604      	mov	r4, r0
 800876c:	460d      	mov	r5, r1
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 ff47 	bl	8000608 <__aeabi_dmul>
 800877a:	4602      	mov	r2, r0
 800877c:	460b      	mov	r3, r1
 800877e:	4680      	mov	r8, r0
 8008780:	4689      	mov	r9, r1
 8008782:	f7f7 ff41 	bl	8000608 <__aeabi_dmul>
 8008786:	a374      	add	r3, pc, #464	; (adr r3, 8008958 <atan+0x2b8>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	f7f7 ff3a 	bl	8000608 <__aeabi_dmul>
 8008794:	a372      	add	r3, pc, #456	; (adr r3, 8008960 <atan+0x2c0>)
 8008796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879a:	f7f7 fd7f 	bl	800029c <__adddf3>
 800879e:	4632      	mov	r2, r6
 80087a0:	463b      	mov	r3, r7
 80087a2:	f7f7 ff31 	bl	8000608 <__aeabi_dmul>
 80087a6:	a370      	add	r3, pc, #448	; (adr r3, 8008968 <atan+0x2c8>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7f7 fd76 	bl	800029c <__adddf3>
 80087b0:	4632      	mov	r2, r6
 80087b2:	463b      	mov	r3, r7
 80087b4:	f7f7 ff28 	bl	8000608 <__aeabi_dmul>
 80087b8:	a36d      	add	r3, pc, #436	; (adr r3, 8008970 <atan+0x2d0>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	f7f7 fd6d 	bl	800029c <__adddf3>
 80087c2:	4632      	mov	r2, r6
 80087c4:	463b      	mov	r3, r7
 80087c6:	f7f7 ff1f 	bl	8000608 <__aeabi_dmul>
 80087ca:	a36b      	add	r3, pc, #428	; (adr r3, 8008978 <atan+0x2d8>)
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f7f7 fd64 	bl	800029c <__adddf3>
 80087d4:	4632      	mov	r2, r6
 80087d6:	463b      	mov	r3, r7
 80087d8:	f7f7 ff16 	bl	8000608 <__aeabi_dmul>
 80087dc:	a368      	add	r3, pc, #416	; (adr r3, 8008980 <atan+0x2e0>)
 80087de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e2:	f7f7 fd5b 	bl	800029c <__adddf3>
 80087e6:	4642      	mov	r2, r8
 80087e8:	464b      	mov	r3, r9
 80087ea:	f7f7 ff0d 	bl	8000608 <__aeabi_dmul>
 80087ee:	a366      	add	r3, pc, #408	; (adr r3, 8008988 <atan+0x2e8>)
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	4680      	mov	r8, r0
 80087f6:	4689      	mov	r9, r1
 80087f8:	4630      	mov	r0, r6
 80087fa:	4639      	mov	r1, r7
 80087fc:	f7f7 ff04 	bl	8000608 <__aeabi_dmul>
 8008800:	a363      	add	r3, pc, #396	; (adr r3, 8008990 <atan+0x2f0>)
 8008802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008806:	f7f7 fd47 	bl	8000298 <__aeabi_dsub>
 800880a:	4632      	mov	r2, r6
 800880c:	463b      	mov	r3, r7
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	a361      	add	r3, pc, #388	; (adr r3, 8008998 <atan+0x2f8>)
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	f7f7 fd3e 	bl	8000298 <__aeabi_dsub>
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	f7f7 fef2 	bl	8000608 <__aeabi_dmul>
 8008824:	a35e      	add	r3, pc, #376	; (adr r3, 80089a0 <atan+0x300>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	f7f7 fd35 	bl	8000298 <__aeabi_dsub>
 800882e:	4632      	mov	r2, r6
 8008830:	463b      	mov	r3, r7
 8008832:	f7f7 fee9 	bl	8000608 <__aeabi_dmul>
 8008836:	a35c      	add	r3, pc, #368	; (adr r3, 80089a8 <atan+0x308>)
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f7f7 fd2c 	bl	8000298 <__aeabi_dsub>
 8008840:	4632      	mov	r2, r6
 8008842:	463b      	mov	r3, r7
 8008844:	f7f7 fee0 	bl	8000608 <__aeabi_dmul>
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	4640      	mov	r0, r8
 800884e:	4649      	mov	r1, r9
 8008850:	f7f7 fd24 	bl	800029c <__adddf3>
 8008854:	4622      	mov	r2, r4
 8008856:	462b      	mov	r3, r5
 8008858:	f7f7 fed6 	bl	8000608 <__aeabi_dmul>
 800885c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	d14b      	bne.n	80088fe <atan+0x25e>
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	f7f7 fd15 	bl	8000298 <__aeabi_dsub>
 800886e:	e72c      	b.n	80086ca <atan+0x2a>
 8008870:	ee10 0a10 	vmov	r0, s0
 8008874:	4b53      	ldr	r3, [pc, #332]	; (80089c4 <atan+0x324>)
 8008876:	2200      	movs	r2, #0
 8008878:	4629      	mov	r1, r5
 800887a:	f7f7 fd0d 	bl	8000298 <__aeabi_dsub>
 800887e:	4b51      	ldr	r3, [pc, #324]	; (80089c4 <atan+0x324>)
 8008880:	4606      	mov	r6, r0
 8008882:	460f      	mov	r7, r1
 8008884:	2200      	movs	r2, #0
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fd07 	bl	800029c <__adddf3>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4630      	mov	r0, r6
 8008894:	4639      	mov	r1, r7
 8008896:	f7f7 ffe1 	bl	800085c <__aeabi_ddiv>
 800889a:	f04f 0a01 	mov.w	sl, #1
 800889e:	4604      	mov	r4, r0
 80088a0:	460d      	mov	r5, r1
 80088a2:	e764      	b.n	800876e <atan+0xce>
 80088a4:	4b49      	ldr	r3, [pc, #292]	; (80089cc <atan+0x32c>)
 80088a6:	429e      	cmp	r6, r3
 80088a8:	da1d      	bge.n	80088e6 <atan+0x246>
 80088aa:	ee10 0a10 	vmov	r0, s0
 80088ae:	4b48      	ldr	r3, [pc, #288]	; (80089d0 <atan+0x330>)
 80088b0:	2200      	movs	r2, #0
 80088b2:	4629      	mov	r1, r5
 80088b4:	f7f7 fcf0 	bl	8000298 <__aeabi_dsub>
 80088b8:	4b45      	ldr	r3, [pc, #276]	; (80089d0 <atan+0x330>)
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	2200      	movs	r2, #0
 80088c0:	4620      	mov	r0, r4
 80088c2:	4629      	mov	r1, r5
 80088c4:	f7f7 fea0 	bl	8000608 <__aeabi_dmul>
 80088c8:	4b3e      	ldr	r3, [pc, #248]	; (80089c4 <atan+0x324>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	f7f7 fce6 	bl	800029c <__adddf3>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4630      	mov	r0, r6
 80088d6:	4639      	mov	r1, r7
 80088d8:	f7f7 ffc0 	bl	800085c <__aeabi_ddiv>
 80088dc:	f04f 0a02 	mov.w	sl, #2
 80088e0:	4604      	mov	r4, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	e743      	b.n	800876e <atan+0xce>
 80088e6:	462b      	mov	r3, r5
 80088e8:	ee10 2a10 	vmov	r2, s0
 80088ec:	4939      	ldr	r1, [pc, #228]	; (80089d4 <atan+0x334>)
 80088ee:	2000      	movs	r0, #0
 80088f0:	f7f7 ffb4 	bl	800085c <__aeabi_ddiv>
 80088f4:	f04f 0a03 	mov.w	sl, #3
 80088f8:	4604      	mov	r4, r0
 80088fa:	460d      	mov	r5, r1
 80088fc:	e737      	b.n	800876e <atan+0xce>
 80088fe:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <atan+0x338>)
 8008900:	4e36      	ldr	r6, [pc, #216]	; (80089dc <atan+0x33c>)
 8008902:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008906:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800890a:	e9da 2300 	ldrd	r2, r3, [sl]
 800890e:	f7f7 fcc3 	bl	8000298 <__aeabi_dsub>
 8008912:	4622      	mov	r2, r4
 8008914:	462b      	mov	r3, r5
 8008916:	f7f7 fcbf 	bl	8000298 <__aeabi_dsub>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008922:	f7f7 fcb9 	bl	8000298 <__aeabi_dsub>
 8008926:	f1bb 0f00 	cmp.w	fp, #0
 800892a:	4604      	mov	r4, r0
 800892c:	460d      	mov	r5, r1
 800892e:	f6bf aed6 	bge.w	80086de <atan+0x3e>
 8008932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008936:	461d      	mov	r5, r3
 8008938:	e6d1      	b.n	80086de <atan+0x3e>
 800893a:	a51d      	add	r5, pc, #116	; (adr r5, 80089b0 <atan+0x310>)
 800893c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008940:	e6cd      	b.n	80086de <atan+0x3e>
 8008942:	bf00      	nop
 8008944:	f3af 8000 	nop.w
 8008948:	54442d18 	.word	0x54442d18
 800894c:	bff921fb 	.word	0xbff921fb
 8008950:	8800759c 	.word	0x8800759c
 8008954:	7e37e43c 	.word	0x7e37e43c
 8008958:	e322da11 	.word	0xe322da11
 800895c:	3f90ad3a 	.word	0x3f90ad3a
 8008960:	24760deb 	.word	0x24760deb
 8008964:	3fa97b4b 	.word	0x3fa97b4b
 8008968:	a0d03d51 	.word	0xa0d03d51
 800896c:	3fb10d66 	.word	0x3fb10d66
 8008970:	c54c206e 	.word	0xc54c206e
 8008974:	3fb745cd 	.word	0x3fb745cd
 8008978:	920083ff 	.word	0x920083ff
 800897c:	3fc24924 	.word	0x3fc24924
 8008980:	5555550d 	.word	0x5555550d
 8008984:	3fd55555 	.word	0x3fd55555
 8008988:	2c6a6c2f 	.word	0x2c6a6c2f
 800898c:	bfa2b444 	.word	0xbfa2b444
 8008990:	52defd9a 	.word	0x52defd9a
 8008994:	3fadde2d 	.word	0x3fadde2d
 8008998:	af749a6d 	.word	0xaf749a6d
 800899c:	3fb3b0f2 	.word	0x3fb3b0f2
 80089a0:	fe231671 	.word	0xfe231671
 80089a4:	3fbc71c6 	.word	0x3fbc71c6
 80089a8:	9998ebc4 	.word	0x9998ebc4
 80089ac:	3fc99999 	.word	0x3fc99999
 80089b0:	54442d18 	.word	0x54442d18
 80089b4:	3ff921fb 	.word	0x3ff921fb
 80089b8:	440fffff 	.word	0x440fffff
 80089bc:	7ff00000 	.word	0x7ff00000
 80089c0:	3fdbffff 	.word	0x3fdbffff
 80089c4:	3ff00000 	.word	0x3ff00000
 80089c8:	3ff2ffff 	.word	0x3ff2ffff
 80089cc:	40038000 	.word	0x40038000
 80089d0:	3ff80000 	.word	0x3ff80000
 80089d4:	bff00000 	.word	0xbff00000
 80089d8:	08009838 	.word	0x08009838
 80089dc:	08009818 	.word	0x08009818

080089e0 <fabs>:
 80089e0:	ec51 0b10 	vmov	r0, r1, d0
 80089e4:	ee10 2a10 	vmov	r2, s0
 80089e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089ec:	ec43 2b10 	vmov	d0, r2, r3
 80089f0:	4770      	bx	lr
 80089f2:	0000      	movs	r0, r0
 80089f4:	0000      	movs	r0, r0
	...

080089f8 <floor>:
 80089f8:	ec51 0b10 	vmov	r0, r1, d0
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008a04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008a08:	2e13      	cmp	r6, #19
 8008a0a:	ee10 5a10 	vmov	r5, s0
 8008a0e:	ee10 8a10 	vmov	r8, s0
 8008a12:	460c      	mov	r4, r1
 8008a14:	dc32      	bgt.n	8008a7c <floor+0x84>
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	da14      	bge.n	8008a44 <floor+0x4c>
 8008a1a:	a333      	add	r3, pc, #204	; (adr r3, 8008ae8 <floor+0xf0>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fc3c 	bl	800029c <__adddf3>
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	f7f8 f87e 	bl	8000b28 <__aeabi_dcmpgt>
 8008a2c:	b138      	cbz	r0, 8008a3e <floor+0x46>
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	da57      	bge.n	8008ae2 <floor+0xea>
 8008a32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a36:	431d      	orrs	r5, r3
 8008a38:	d001      	beq.n	8008a3e <floor+0x46>
 8008a3a:	4c2d      	ldr	r4, [pc, #180]	; (8008af0 <floor+0xf8>)
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	e025      	b.n	8008a90 <floor+0x98>
 8008a44:	4f2b      	ldr	r7, [pc, #172]	; (8008af4 <floor+0xfc>)
 8008a46:	4137      	asrs	r7, r6
 8008a48:	ea01 0307 	and.w	r3, r1, r7
 8008a4c:	4303      	orrs	r3, r0
 8008a4e:	d01f      	beq.n	8008a90 <floor+0x98>
 8008a50:	a325      	add	r3, pc, #148	; (adr r3, 8008ae8 <floor+0xf0>)
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 fc21 	bl	800029c <__adddf3>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f7f8 f863 	bl	8000b28 <__aeabi_dcmpgt>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0eb      	beq.n	8008a3e <floor+0x46>
 8008a66:	2c00      	cmp	r4, #0
 8008a68:	bfbe      	ittt	lt
 8008a6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008a6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008a72:	19a4      	addlt	r4, r4, r6
 8008a74:	ea24 0407 	bic.w	r4, r4, r7
 8008a78:	2500      	movs	r5, #0
 8008a7a:	e7e0      	b.n	8008a3e <floor+0x46>
 8008a7c:	2e33      	cmp	r6, #51	; 0x33
 8008a7e:	dd0b      	ble.n	8008a98 <floor+0xa0>
 8008a80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a84:	d104      	bne.n	8008a90 <floor+0x98>
 8008a86:	ee10 2a10 	vmov	r2, s0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	f7f7 fc06 	bl	800029c <__adddf3>
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa0:	fa23 f707 	lsr.w	r7, r3, r7
 8008aa4:	4207      	tst	r7, r0
 8008aa6:	d0f3      	beq.n	8008a90 <floor+0x98>
 8008aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8008ae8 <floor+0xf0>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fbf5 	bl	800029c <__adddf3>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f7f8 f837 	bl	8000b28 <__aeabi_dcmpgt>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0bf      	beq.n	8008a3e <floor+0x46>
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	da02      	bge.n	8008ac8 <floor+0xd0>
 8008ac2:	2e14      	cmp	r6, #20
 8008ac4:	d103      	bne.n	8008ace <floor+0xd6>
 8008ac6:	3401      	adds	r4, #1
 8008ac8:	ea25 0507 	bic.w	r5, r5, r7
 8008acc:	e7b7      	b.n	8008a3e <floor+0x46>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ad4:	fa03 f606 	lsl.w	r6, r3, r6
 8008ad8:	4435      	add	r5, r6
 8008ada:	4545      	cmp	r5, r8
 8008adc:	bf38      	it	cc
 8008ade:	18e4      	addcc	r4, r4, r3
 8008ae0:	e7f2      	b.n	8008ac8 <floor+0xd0>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	462c      	mov	r4, r5
 8008ae6:	e7aa      	b.n	8008a3e <floor+0x46>
 8008ae8:	8800759c 	.word	0x8800759c
 8008aec:	7e37e43c 	.word	0x7e37e43c
 8008af0:	bff00000 	.word	0xbff00000
 8008af4:	000fffff 	.word	0x000fffff

08008af8 <scalbn>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	ec55 4b10 	vmov	r4, r5, d0
 8008afe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008b02:	4606      	mov	r6, r0
 8008b04:	462b      	mov	r3, r5
 8008b06:	b99a      	cbnz	r2, 8008b30 <scalbn+0x38>
 8008b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b0c:	4323      	orrs	r3, r4
 8008b0e:	d036      	beq.n	8008b7e <scalbn+0x86>
 8008b10:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <scalbn+0x100>)
 8008b12:	4629      	mov	r1, r5
 8008b14:	ee10 0a10 	vmov	r0, s0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fd75 	bl	8000608 <__aeabi_dmul>
 8008b1e:	4b37      	ldr	r3, [pc, #220]	; (8008bfc <scalbn+0x104>)
 8008b20:	429e      	cmp	r6, r3
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	da10      	bge.n	8008b4a <scalbn+0x52>
 8008b28:	a32b      	add	r3, pc, #172	; (adr r3, 8008bd8 <scalbn+0xe0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	e03a      	b.n	8008ba6 <scalbn+0xae>
 8008b30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d10c      	bne.n	8008b52 <scalbn+0x5a>
 8008b38:	ee10 2a10 	vmov	r2, s0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fbac 	bl	800029c <__adddf3>
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	e019      	b.n	8008b7e <scalbn+0x86>
 8008b4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b4e:	460b      	mov	r3, r1
 8008b50:	3a36      	subs	r2, #54	; 0x36
 8008b52:	4432      	add	r2, r6
 8008b54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	dd08      	ble.n	8008b6e <scalbn+0x76>
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	a120      	add	r1, pc, #128	; (adr r1, 8008be0 <scalbn+0xe8>)
 8008b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b64:	da1c      	bge.n	8008ba0 <scalbn+0xa8>
 8008b66:	a120      	add	r1, pc, #128	; (adr r1, 8008be8 <scalbn+0xf0>)
 8008b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b6c:	e018      	b.n	8008ba0 <scalbn+0xa8>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	dd08      	ble.n	8008b84 <scalbn+0x8c>
 8008b72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b7e:	ec45 4b10 	vmov	d0, r4, r5
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b88:	da19      	bge.n	8008bbe <scalbn+0xc6>
 8008b8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b8e:	429e      	cmp	r6, r3
 8008b90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008b94:	dd0a      	ble.n	8008bac <scalbn+0xb4>
 8008b96:	a112      	add	r1, pc, #72	; (adr r1, 8008be0 <scalbn+0xe8>)
 8008b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e2      	bne.n	8008b66 <scalbn+0x6e>
 8008ba0:	a30f      	add	r3, pc, #60	; (adr r3, 8008be0 <scalbn+0xe8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fd2f 	bl	8000608 <__aeabi_dmul>
 8008baa:	e7cb      	b.n	8008b44 <scalbn+0x4c>
 8008bac:	a10a      	add	r1, pc, #40	; (adr r1, 8008bd8 <scalbn+0xe0>)
 8008bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0b8      	beq.n	8008b28 <scalbn+0x30>
 8008bb6:	a10e      	add	r1, pc, #56	; (adr r1, 8008bf0 <scalbn+0xf8>)
 8008bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bbc:	e7b4      	b.n	8008b28 <scalbn+0x30>
 8008bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bc2:	3236      	adds	r2, #54	; 0x36
 8008bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <scalbn+0x108>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	e7e8      	b.n	8008ba6 <scalbn+0xae>
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	c2f8f359 	.word	0xc2f8f359
 8008bdc:	01a56e1f 	.word	0x01a56e1f
 8008be0:	8800759c 	.word	0x8800759c
 8008be4:	7e37e43c 	.word	0x7e37e43c
 8008be8:	8800759c 	.word	0x8800759c
 8008bec:	fe37e43c 	.word	0xfe37e43c
 8008bf0:	c2f8f359 	.word	0xc2f8f359
 8008bf4:	81a56e1f 	.word	0x81a56e1f
 8008bf8:	43500000 	.word	0x43500000
 8008bfc:	ffff3cb0 	.word	0xffff3cb0
 8008c00:	3c900000 	.word	0x3c900000

08008c04 <_close>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <_close+0xc>)
 8008c06:	2258      	movs	r2, #88	; 0x58
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0e:	4770      	bx	lr
 8008c10:	20000280 	.word	0x20000280

08008c14 <_fstat>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <_fstat+0xc>)
 8008c16:	2258      	movs	r2, #88	; 0x58
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1e:	4770      	bx	lr
 8008c20:	20000280 	.word	0x20000280

08008c24 <_getpid>:
 8008c24:	4b02      	ldr	r3, [pc, #8]	; (8008c30 <_getpid+0xc>)
 8008c26:	2258      	movs	r2, #88	; 0x58
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2e:	4770      	bx	lr
 8008c30:	20000280 	.word	0x20000280

08008c34 <_isatty>:
 8008c34:	4b02      	ldr	r3, [pc, #8]	; (8008c40 <_isatty+0xc>)
 8008c36:	2258      	movs	r2, #88	; 0x58
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20000280 	.word	0x20000280

08008c44 <_kill>:
 8008c44:	4b02      	ldr	r3, [pc, #8]	; (8008c50 <_kill+0xc>)
 8008c46:	2258      	movs	r2, #88	; 0x58
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c4e:	4770      	bx	lr
 8008c50:	20000280 	.word	0x20000280

08008c54 <_lseek>:
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <_lseek+0xc>)
 8008c56:	2258      	movs	r2, #88	; 0x58
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	4770      	bx	lr
 8008c60:	20000280 	.word	0x20000280

08008c64 <_read>:
 8008c64:	4b02      	ldr	r3, [pc, #8]	; (8008c70 <_read+0xc>)
 8008c66:	2258      	movs	r2, #88	; 0x58
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6e:	4770      	bx	lr
 8008c70:	20000280 	.word	0x20000280

08008c74 <_sbrk>:
 8008c74:	4a04      	ldr	r2, [pc, #16]	; (8008c88 <_sbrk+0x14>)
 8008c76:	6811      	ldr	r1, [r2, #0]
 8008c78:	4603      	mov	r3, r0
 8008c7a:	b909      	cbnz	r1, 8008c80 <_sbrk+0xc>
 8008c7c:	4903      	ldr	r1, [pc, #12]	; (8008c8c <_sbrk+0x18>)
 8008c7e:	6011      	str	r1, [r2, #0]
 8008c80:	6810      	ldr	r0, [r2, #0]
 8008c82:	4403      	add	r3, r0
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4770      	bx	lr
 8008c88:	20000288 	.word	0x20000288
 8008c8c:	20000290 	.word	0x20000290

08008c90 <_write>:
 8008c90:	4b02      	ldr	r3, [pc, #8]	; (8008c9c <_write+0xc>)
 8008c92:	2258      	movs	r2, #88	; 0x58
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9a:	4770      	bx	lr
 8008c9c:	20000280 	.word	0x20000280

08008ca0 <_exit>:
 8008ca0:	e7fe      	b.n	8008ca0 <_exit>
	...

08008ca4 <_init>:
 8008ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca6:	bf00      	nop
 8008ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008caa:	bc08      	pop	{r3}
 8008cac:	469e      	mov	lr, r3
 8008cae:	4770      	bx	lr

08008cb0 <_fini>:
 8008cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cb2:	bf00      	nop
 8008cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb6:	bc08      	pop	{r3}
 8008cb8:	469e      	mov	lr, r3
 8008cba:	4770      	bx	lr
