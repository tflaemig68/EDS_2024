
TOFTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800aec0  0800aec0  0001aec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd70  0800bd70  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd78  0800bd78  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800bd80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000220  0800bfa0  00020220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800bfa0  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a34a  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3c  00000000  00000000  0002a59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002c3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008a4e  00000000  00000000  0002d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000588f6  00000000  00000000  00035ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008e7b4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000038a4  00000000  00000000  0008e804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0001020a  00000000  00000000  000920a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a22b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a2380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aea4 	.word	0x0800aea4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	0800aea4 	.word	0x0800aea4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
 * @function:	 main
 *
 * @brief: 		 executable function, timing control and trigger
 */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af02      	add	r7, sp, #8

	enableTOFSensor = true;
 8000ec2:	4b9b      	ldr	r3, [pc, #620]	; (8001130 <main+0x274>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	TOF_sensor_used = 0x29;
 8000ec8:	4b9a      	ldr	r3, [pc, #616]	; (8001134 <main+0x278>)
 8000eca:	2229      	movs	r2, #41	; 0x29
 8000ecc:	701a      	strb	r2, [r3, #0]

	// variables to store rotation and push button
	int32_t position = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t oldPosition = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
	bool buttonPushed = false;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// variables to store the distance
	uint16_t TOF_DISTANCE_1 = 100;
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	//uint16_t olddistance = TOF_VL53L0X_OUT_OF_RANGE;


	// timer variables
	uint32_t TimerExec = 0UL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t TimerVisu = 0UL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t TimerLED = 0UL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63fb      	str	r3, [r7, #60]	; 0x3c

	// Array with all timer variables and calculation of size
	uint32_t *timerList[] = { &TimerExec, &TimerVisu, &TimerLED};
 8000eee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ef4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8000efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000efe:	63bb      	str	r3, [r7, #56]	; 0x38
	size_t arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8000f00:	2303      	movs	r3, #3
 8000f02:	64bb      	str	r3, [r7, #72]	; 0x48

	// init project
	initBala();
 8000f04:	f000 f98c 	bl	8001220 <initBala>
	// TOF-Instanz deklarieren
	TOFSensor_t TOF_Sensor_1;
	MODE_PAGES_t MODE;

	// Initialisieren des TOF-Sensors
	initTOFSensorData(&TOF_Sensor_1, I2C1, TOF_ADDR_VL53LOX, TOF_DEFAULT_MODE_D, TOF_DISTANCE_1);
 8000f08:	f107 0008 	add.w	r0, r7, #8
 8000f0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2229      	movs	r2, #41	; 0x29
 8000f16:	4988      	ldr	r1, [pc, #544]	; (8001138 <main+0x27c>)
 8000f18:	f002 fb4a 	bl	80035b0 <initTOFSensorData>

	// Konfigurieren und Aktivieren des Sensors
	configTOFSensor(&TOF_Sensor_1, TOF_DEFAULT_MODE_D, true);
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2201      	movs	r2, #1
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 fb66 	bl	80035f6 <configTOFSensor>
	//TOF_set_ranging_profile(&TOF_Sensor_1);


	while (1)
	{
		if (true == timerTrigger)
 8000f2a:	4b84      	ldr	r3, [pc, #528]	; (800113c <main+0x280>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <main+0x86>
		{
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8000f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f005 fed5 	bl	8006cec <systickUpdateTimerList>
		}

		// if timer execute is expired
		if (isSystickExpired(TimerExec))
 8000f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fe9b 	bl	8006c80 <isSystickExpired>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	f000 8129 	beq.w	80011a4 <main+0x2e8>
		{
			position = getRotaryPosition();
 8000f52:	f001 faad 	bl	80024b0 <getRotaryPosition>
 8000f56:	6538      	str	r0, [r7, #80]	; 0x50
			buttonPushed = getRotaryPushButton();
 8000f58:	f001 fa88 	bl	800246c <getRotaryPushButton>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bf14      	ite	ne
 8000f62:	2301      	movne	r3, #1
 8000f64:	2300      	moveq	r3, #0
 8000f66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			// switch case for different screen pages
			switch(page)
 8000f6a:	4b75      	ldr	r3, [pc, #468]	; (8001140 <main+0x284>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	f200 80f3 	bhi.w	800115a <main+0x29e>
 8000f74:	a201      	add	r2, pc, #4	; (adr r2, 8000f7c <main+0xc0>)
 8000f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f7a:	bf00      	nop
 8000f7c:	08000f91 	.word	0x08000f91
 8000f80:	08001039 	.word	0x08001039
 8000f84:	08001065 	.word	0x08001065
 8000f88:	08001089 	.word	0x08001089
 8000f8c:	08001119 	.word	0x08001119
			{
			case SCREEN_MAIN:
				if(buttonPushed)
 8000f90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d03c      	beq.n	8001012 <main+0x156>
					{
					page = (uint16_t)position % 4 + 1;
 8000f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b66      	ldr	r3, [pc, #408]	; (8001140 <main+0x284>)
 8000fa8:	701a      	strb	r2, [r3, #0]

					// check if it is tried to go to the page of an not initialized sensor
					if(page == 2 && initedTOF == false)
 8000faa:	4b65      	ldr	r3, [pc, #404]	; (8001140 <main+0x284>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10c      	bne.n	8000fcc <main+0x110>
 8000fb2:	4b64      	ldr	r3, [pc, #400]	; (8001144 <main+0x288>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <main+0x110>
					{
						page = 0;
 8000fc0:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <main+0x284>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 feae 	bl	8001d28 <visualisationShowError>
					}

					if(page == 3 && initedTOF == false)
 8000fcc:	4b5c      	ldr	r3, [pc, #368]	; (8001140 <main+0x284>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d10c      	bne.n	8000fee <main+0x132>
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <main+0x288>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <main+0x132>
					{
						page = 0;
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <main+0x284>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fe8:	2001      	movs	r0, #1
 8000fea:	f000 fe9d 	bl	8001d28 <visualisationShowError>
					}


					// change menu page
					visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 8000fee:	4b54      	ldr	r3, [pc, #336]	; (8001140 <main+0x284>)
 8000ff0:	7818      	ldrb	r0, [r3, #0]
 8000ff2:	4b54      	ldr	r3, [pc, #336]	; (8001144 <main+0x288>)
 8000ff4:	7819      	ldrb	r1, [r3, #0]
 8000ff6:	4b54      	ldr	r3, [pc, #336]	; (8001148 <main+0x28c>)
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	f000 fd1b 	bl	8001a38 <visualisationMenu>
					initSubMenu(page, &TOF_Sensor_1);
 8001002:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <main+0x284>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	f107 0208 	add.w	r2, r7, #8
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f929 	bl	8001264 <initSubMenu>
					}

				if(oldPosition != position)
 8001012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001016:	429a      	cmp	r2, r3
 8001018:	f000 8086 	beq.w	8001128 <main+0x26c>
				{
					oldPosition = position;
 800101c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800101e:	657b      	str	r3, [r7, #84]	; 0x54

					visualisationMenuGridFocus((uint16_t)position % 4, tft_WHITE, tft_YELLOW);
 8001020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001022:	b29b      	uxth	r3, r3
 8001024:	f003 0303 	and.w	r3, r3, #3
 8001028:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800102c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001030:	4618      	mov	r0, r3
 8001032:	f000 fb37 	bl	80016a4 <visualisationMenuGridFocus>
				}
				break;
 8001036:	e077      	b.n	8001128 <main+0x26c>

			// init I2C page
			case SCREEN_PAGE1:
				if(buttonPushed)
 8001038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800103c:	2b00      	cmp	r3, #0
 800103e:	d002      	beq.n	8001046 <main+0x18a>
				{
					exitMenu = EXIT_FROMSUB1;
 8001040:	4b42      	ldr	r3, [pc, #264]	; (800114c <main+0x290>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
				}
				switch(i2cInitPort)
 8001046:	4b42      	ldr	r3, [pc, #264]	; (8001150 <main+0x294>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d002      	beq.n	8001054 <main+0x198>
 800104e:	2b02      	cmp	r3, #2
 8001050:	d006      	beq.n	8001060 <main+0x1a4>
				case I2C_2:
					//i2cScanAndInit(i2c2);
					break;
				}

				break;
 8001052:	e082      	b.n	800115a <main+0x29e>
					i2cScanAndInit(&TOF_Sensor_1);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f937 	bl	80012cc <i2cScanAndInit>
					break;
 800105e:	e000      	b.n	8001062 <main+0x1a6>
					break;
 8001060:	bf00      	nop
				break;
 8001062:	e07a      	b.n	800115a <main+0x29e>

			// TOF page
			case SCREEN_PAGE2:
				if(buttonPushed)
 8001064:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <main+0x1c0>
				{
					TOF_stop_continuous(&TOF_Sensor_1);
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fde9 	bl	8004c48 <TOF_stop_continuous>
					exitMenu = EXIT_FROMSUB2;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <main+0x290>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
				}
				TOF_read_continuous_distance(&TOF_Sensor_1);
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	4618      	mov	r0, r3
 8001082:	f003 fe41 	bl	8004d08 <TOF_read_continuous_distance>
				break;
 8001086:	e068      	b.n	800115a <main+0x29e>

			// Ranging Mode Page page
			case SCREEN_PAGE3:
				position = getRotaryPosition();
 8001088:	f001 fa12 	bl	80024b0 <getRotaryPosition>
 800108c:	6538      	str	r0, [r7, #80]	; 0x50
				MODE = (uint16_t)position % 4 + 1;
 800108e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001090:	b2db      	uxtb	r3, r3
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	b2db      	uxtb	r3, r3
 8001098:	3301      	adds	r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	71fb      	strb	r3, [r7, #7]
				visualisationRangingProfileTOF(&MODE);
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fedf 	bl	8001e64 <visualisationRangingProfileTOF>

				if(buttonPushed)
 80010a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03e      	beq.n	800112c <main+0x270>
				{
					configTOFSensor(&TOF_Sensor_1, MODE, true);
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	b299      	uxth	r1, r3
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2201      	movs	r2, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fa9c 	bl	80035f6 <configTOFSensor>
					//TOF_set_ranging_profile(&TOF_Sensor_1);

					switch(MODE){		//change timerexecution time to recommended +3ms to make shure works
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d81a      	bhi.n	80010fc <main+0x240>
 80010c6:	a201      	add	r2, pc, #4	; (adr r2, 80010cc <main+0x210>)
 80010c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	080010e5 	.word	0x080010e5
 80010d4:	080010ed 	.word	0x080010ed
 80010d8:	080010f5 	.word	0x080010f5
					case 1:
						timeTimerExec = 35;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <main+0x298>)
 80010de:	2223      	movs	r2, #35	; 0x23
 80010e0:	801a      	strh	r2, [r3, #0]
						break;
 80010e2:	e00f      	b.n	8001104 <main+0x248>
					case 2:
						timeTimerExec = 23;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <main+0x298>)
 80010e6:	2217      	movs	r2, #23
 80010e8:	801a      	strh	r2, [r3, #0]
						break;
 80010ea:	e00b      	b.n	8001104 <main+0x248>
					case 3:
						timeTimerExec = 203;
 80010ec:	4b19      	ldr	r3, [pc, #100]	; (8001154 <main+0x298>)
 80010ee:	22cb      	movs	r2, #203	; 0xcb
 80010f0:	801a      	strh	r2, [r3, #0]
						break;
 80010f2:	e007      	b.n	8001104 <main+0x248>
					case 4:
						timeTimerExec = 36;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <main+0x298>)
 80010f6:	2224      	movs	r2, #36	; 0x24
 80010f8:	801a      	strh	r2, [r3, #0]
						break;
 80010fa:	e003      	b.n	8001104 <main+0x248>
					default:
						timeTimerExec = 60;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <main+0x298>)
 80010fe:	223c      	movs	r2, #60	; 0x3c
 8001100:	801a      	strh	r2, [r3, #0]
						break;
 8001102:	bf00      	nop
					}
					TimerExec = 0UL;
 8001104:	2300      	movs	r3, #0
 8001106:	647b      	str	r3, [r7, #68]	; 0x44
					TimerVisu = 0UL;
 8001108:	2300      	movs	r3, #0
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
					TimerLED = 0UL;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c

					exitMenu = EXIT_FROMSUB3;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <main+0x290>)
 8001112:	2202      	movs	r2, #2
 8001114:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001116:	e009      	b.n	800112c <main+0x270>

			case SCREEN_PAGE4:
				if(buttonPushed)
 8001118:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01b      	beq.n	8001158 <main+0x29c>
				{
					exitMenu = EXIT_FROMSUB4;
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <main+0x290>)
 8001122:	2203      	movs	r2, #3
 8001124:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001126:	e017      	b.n	8001158 <main+0x29c>
				break;
 8001128:	bf00      	nop
 800112a:	e016      	b.n	800115a <main+0x29e>
				break;
 800112c:	bf00      	nop
 800112e:	e014      	b.n	800115a <main+0x29e>
 8001130:	20000243 	.word	0x20000243
 8001134:	20000002 	.word	0x20000002
 8001138:	40005400 	.word	0x40005400
 800113c:	20000248 	.word	0x20000248
 8001140:	20000242 	.word	0x20000242
 8001144:	20000241 	.word	0x20000241
 8001148:	20000240 	.word	0x20000240
 800114c:	20000005 	.word	0x20000005
 8001150:	20000003 	.word	0x20000003
 8001154:	20000000 	.word	0x20000000
				break;
 8001158:	bf00      	nop
			}

			// exit sub page to main menu, focus right menu item
			if(exitMenu != EXIT_FALSE)
 800115a:	4b2c      	ldr	r3, [pc, #176]	; (800120c <main+0x350>)
 800115c:	f993 3000 	ldrsb.w	r3, [r3]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d015      	beq.n	8001192 <main+0x2d6>
			{
				page = SCREEN_MAIN;
 8001166:	4b2a      	ldr	r3, [pc, #168]	; (8001210 <main+0x354>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
				setRotaryPosition(exitMenu);
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <main+0x350>)
 800116e:	f993 3000 	ldrsb.w	r3, [r3]
 8001172:	4618      	mov	r0, r3
 8001174:	f001 f9b2 	bl	80024dc <setRotaryPosition>
				visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <main+0x354>)
 800117a:	7818      	ldrb	r0, [r3, #0]
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <main+0x358>)
 800117e:	7819      	ldrb	r1, [r3, #0]
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <main+0x35c>)
 8001182:	781a      	ldrb	r2, [r3, #0]
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	f000 fc56 	bl	8001a38 <visualisationMenu>

				exitMenu = EXIT_FALSE;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <main+0x350>)
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	701a      	strb	r2, [r3, #0]
			}

			systickSetTicktime(&TimerExec, timeTimerExec);
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <main+0x360>)
 8001194:	881b      	ldrh	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 fd60 	bl	8006c64 <systickSetTicktime>
		}

		// if timer visualization is expired
		if (isSystickExpired(TimerVisu))
 80011a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 fd6a 	bl	8006c80 <isSystickExpired>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01c      	beq.n	80011ec <main+0x330>
		{
			// switch case for dynamic display update
			switch(page)
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <main+0x354>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d812      	bhi.n	80011e0 <main+0x324>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <main+0x304>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011e1 	.word	0x080011e1
 80011c4:	080011e1 	.word	0x080011e1
 80011c8:	080011d5 	.word	0x080011d5
 80011cc:	080011e1 	.word	0x080011e1
 80011d0:	080011e1 	.word	0x080011e1
						delayms(200);
						visualisationTOF(&TOF_Sensor_1);

					}
*/
				visualisationTOF(&TOF_Sensor_1);
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fe03 	bl	8001de4 <visualisationTOF>

				break;
 80011de:	bf00      	nop
				break;
			case SCREEN_PAGE4:
				break;
			}

			systickSetTicktime(&TimerVisu, timeTimerVisu);
 80011e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011e4:	2132      	movs	r1, #50	; 0x32
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 fd3c 	bl	8006c64 <systickSetTicktime>
		}

		// if timer LED is expired
		if (isSystickExpired(TimerLED))
 80011ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011ee:	4618      	mov	r0, r3
 80011f0:	f005 fd46 	bl	8006c80 <isSystickExpired>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f43f ae97 	beq.w	8000f2a <main+0x6e>
		{

			systickSetTicktime(&TimerLED, timeTimerLED);
 80011fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001200:	21fa      	movs	r1, #250	; 0xfa
 8001202:	4618      	mov	r0, r3
 8001204:	f005 fd2e 	bl	8006c64 <systickSetTicktime>
		if (true == timerTrigger)
 8001208:	e68f      	b.n	8000f2a <main+0x6e>
 800120a:	bf00      	nop
 800120c:	20000005 	.word	0x20000005
 8001210:	20000242 	.word	0x20000242
 8001214:	20000241 	.word	0x20000241
 8001218:	20000240 	.word	0x20000240
 800121c:	20000000 	.word	0x20000000

08001220 <initBala>:
 *
 * @brief: 		 initialization the Bala-system, initialization hardware
 * 				 from Balancer library and start visualization
 */
void initBala(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	// initialization bala-library
	//BalaHWsetup();
	// initialization LED
	 initLED(&LEDpgb);		//
 8001224:	480c      	ldr	r0, [pc, #48]	; (8001258 <initBala+0x38>)
 8001226:	f001 f827 	bl	8002278 <initLED>
	 activateI2C1();		//
 800122a:	f002 f985 	bl	8003538 <activateI2C1>
	 setLED(RED_on);
 800122e:	2001      	movs	r0, #1
 8001230:	f001 f876 	bl	8002320 <setLED>
	 //adcActivate();



	// initialization rotary push button
	initRotaryPushButton(&PuBio_pgb);
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <initBala+0x3c>)
 8001236:	f000 ff6b 	bl	8002110 <initRotaryPushButton>



	// Configure of SysTick-Timers
	systickInit(SYSTICK_1MS);
 800123a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123e:	f005 fcfd 	bl	8006c3c <systickInit>

	//initialization needed for TFT Display
	IOspiInit(&ST7735pgb);			//! SPI Init
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <initBala+0x40>)
 8001244:	f001 fa4e 	bl	80026e4 <IOspiInit>
	tftInitR(INITR_REDTAB);
 8001248:	2001      	movs	r0, #1
 800124a:	f001 fb3f 	bl	80028cc <tftInitR>
	// start visualization
	visualisationStart();
 800124e:	f000 f8b7 	bl	80013c0 <visualisationStart>

	//start page 1: i2c sensor connect
	//page = SCREEN_PAGE1;
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800b280 	.word	0x0800b280
 800125c:	0800b288 	.word	0x0800b288
 8001260:	20000010 	.word	0x20000010

08001264 <initSubMenu>:
 * 				 with correct transition initialization
 *
 * @parameters:	 SCREEN_PAGES_t page:	 page to be initialized
 */
void initSubMenu(SCREEN_PAGES_t page, TOFSensor_t* TOFSENS)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	6039      	str	r1, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
	// switch case for menu pages
	switch(page)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	2b04      	cmp	r3, #4
 8001274:	d81e      	bhi.n	80012b4 <initSubMenu+0x50>
 8001276:	a201      	add	r2, pc, #4	; (adr r2, 800127c <initSubMenu+0x18>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012b3 	.word	0x080012b3
 8001280:	08001291 	.word	0x08001291
 8001284:	080012ab 	.word	0x080012ab
 8001288:	080012b3 	.word	0x080012b3
 800128c:	080012b3 	.word	0x080012b3
			break;
	case SCREEN_PAGE1:
		//enable3DGSensor = false;
		// disable "sensor enable" to be able to initialize all sensors

		enableTOFSensor = false;
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <initSubMenu+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]

		// reset i2c scan
		//scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_1;
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <initSubMenu+0x5c>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
		i2cInitAttempts = I2C_MAXATTEMPTS;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <initSubMenu+0x60>)
 800129e:	2201      	movs	r2, #1
 80012a0:	701a      	strb	r2, [r3, #0]

		// reset sensor initialization
		initedTOF = false;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <initSubMenu+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		break;
 80012a8:	e004      	b.n	80012b4 <initSubMenu+0x50>
	case SCREEN_PAGE2:
		TOF_start_continuous(TOFSENS);
 80012aa:	6838      	ldr	r0, [r7, #0]
 80012ac:	f003 fbec 	bl	8004a88 <TOF_start_continuous>
			break;
 80012b0:	e000      	b.n	80012b4 <initSubMenu+0x50>
			break;
 80012b2:	bf00      	nop
	case SCREEN_PAGE3:
			break;
	case SCREEN_PAGE4:
			break;
	}
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000243 	.word	0x20000243
 80012c0:	20000003 	.word	0x20000003
 80012c4:	20000004 	.word	0x20000004
 80012c8:	20000241 	.word	0x20000241

080012cc <i2cScanAndInit>:
 * 				 with correct transition initialization
 *
 * @parameters:	 I2C_TypeDef   *i2c:	 i2c to be scanned
 */
void i2cScanAndInit(TOFSensor_t *TOFSENS) //
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	static uint8_t scanAddr = (uint8_t)I2C_MAXADRESS;			// scan I2C address
	uint8_t scanResult;
	bool InitResult;
	I2C_TypeDef *i2c ;
	i2c = TOFSENS->i2c_tof;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
	scanResult =I2C_SCAN(i2c, scanAddr);
 80012da:	4b31      	ldr	r3, [pc, #196]	; (80013a0 <i2cScanAndInit+0xd4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f002 f8b9 	bl	8003458 <I2C_SCAN>
 80012e6:	4603      	mov	r3, r0
 80012e8:	72fb      	strb	r3, [r7, #11]
	if (scanResult != 0)
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00f      	beq.n	8001310 <i2cScanAndInit+0x44>

			enable3DGSensor = true;
		}

		else		*/
		if(scanResult == TOF_ADDR_VL53LOX)
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2b29      	cmp	r3, #41	; 0x29
 80012f4:	d109      	bne.n	800130a <i2cScanAndInit+0x3e>
		{
			TOF_sensor_used = TOF_ADDR_VL53LOX;
 80012f6:	4b2b      	ldr	r3, [pc, #172]	; (80013a4 <i2cScanAndInit+0xd8>)
 80012f8:	2229      	movs	r2, #41	; 0x29
 80012fa:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_VL53LOX);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 fdef 	bl	8001ee0 <visualisationSensorRecognized>

			enableTOFSensor = true;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <i2cScanAndInit+0xdc>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	e002      	b.n	8001310 <i2cScanAndInit+0x44>
		}
		else
		{
			// show that an unknown sensor was found
			visualisationSensorRecognized(VISUALISATION_UNKNOWN);
 800130a:	2004      	movs	r0, #4
 800130c:	f000 fde8 	bl	8001ee0 <visualisationSensorRecognized>
		}


	}
	// check if all i2c addresses are searched
	if (scanAddr <= 0)
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <i2cScanAndInit+0xd4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d118      	bne.n	800134a <i2cScanAndInit+0x7e>
	{
		visualisationI2CScanDone(i2cInitAttempts);
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <i2cScanAndInit+0xe0>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fe53 	bl	8001fc8 <visualisationI2CScanDone>

		i2cInitAttempts -= 1;
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <i2cScanAndInit+0xe0>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <i2cScanAndInit+0xe0>)
 800132c:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <i2cScanAndInit+0xd4>)
 8001330:	222f      	movs	r2, #47	; 0x2f
 8001332:	701a      	strb	r2, [r3, #0]

		if(i2cInitAttempts < 1)
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <i2cScanAndInit+0xe0>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d10c      	bne.n	8001356 <i2cScanAndInit+0x8a>
		{
			exitMenu = EXIT_FROMSUB1;
 800133c:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <i2cScanAndInit+0xe4>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
			i2cInitAttempts = I2C_MAXATTEMPTS;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <i2cScanAndInit+0xe0>)
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e005      	b.n	8001356 <i2cScanAndInit+0x8a>
		}
	}
	// otherwise decrement scan address and search next i2c address
	else
	{
		scanAddr -= 1;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <i2cScanAndInit+0xd4>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	3b01      	subs	r3, #1
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <i2cScanAndInit+0xd4>)
 8001354:	701a      	strb	r2, [r3, #0]
	}

	// initialize TOF sensor if one is found
	if(enableTOFSensor != ENABLE_TOF_FALSE && enableTOFSensor == (ENABLE_TOF_SENSOR_t)i2cInitPort)
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <i2cScanAndInit+0xdc>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d01c      	beq.n	8001398 <i2cScanAndInit+0xcc>
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <i2cScanAndInit+0xdc>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <i2cScanAndInit+0xe8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d116      	bne.n	8001398 <i2cScanAndInit+0xcc>
	{
		// do TOF sensor initialization
		visualisationSensorInit(SENSOR_INIT_RUNNING);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 fe66 	bl	800203c <visualisationSensorInit>

		i2c_tof = i2c;
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <i2cScanAndInit+0xec>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6013      	str	r3, [r2, #0]

		InitResult = TOF_init(TOFSENS);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f003 fb5a 	bl	8004a30 <TOF_init>
 800137c:	4603      	mov	r3, r0
 800137e:	72bb      	strb	r3, [r7, #10]

		// check if init was successful
		if(InitResult)
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d008      	beq.n	8001398 <i2cScanAndInit+0xcc>
		{
			// show if init was successful
			visualisationSensorInit(SENSOR_INIT_DONE);
 8001386:	2001      	movs	r0, #1
 8001388:	f000 fe58 	bl	800203c <visualisationSensorInit>
			initedTOF = true;
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <i2cScanAndInit+0xf0>)
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]

			// give chance to read success-massage
			//delayms(500);

			exitMenu = EXIT_FROMSUB1;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <i2cScanAndInit+0xe4>)
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_2;

	}
	#endif /* BALA2024 */
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000006 	.word	0x20000006
 80013a4:	20000002 	.word	0x20000002
 80013a8:	20000243 	.word	0x20000243
 80013ac:	20000004 	.word	0x20000004
 80013b0:	20000005 	.word	0x20000005
 80013b4:	20000003 	.word	0x20000003
 80013b8:	20000244 	.word	0x20000244
 80013bc:	20000241 	.word	0x20000241

080013c0 <visualisationStart>:
 * @function:	 visualisationStart
 *
 * @brief: 		 start visualization and start menu
 */
void visualisationStart(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	//display setup
	tftSetRotation(LANDSCAPE_FLIP);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f001 ffaf 	bl	8003328 <tftSetRotation>
	tftSetFont((uint8_t *)&SmallFont[0]);
 80013ca:	4814      	ldr	r0, [pc, #80]	; (800141c <visualisationStart+0x5c>)
 80013cc:	f001 fca2 	bl	8002d14 <tftSetFont>
	tftFillScreen(tft_BLACK);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f001 ff8f 	bl	80032f4 <tftFillScreen>

	// show header on screen
	visualisationHeader();
 80013d6:	f000 f82b 	bl	8001430 <visualisationHeader>

	// welcome massage
	tftPrint("----------------",0,10,0);
 80013da:	2300      	movs	r3, #0
 80013dc:	220a      	movs	r2, #10
 80013de:	2100      	movs	r1, #0
 80013e0:	480f      	ldr	r0, [pc, #60]	; (8001420 <visualisationStart+0x60>)
 80013e2:	f001 feed 	bl	80031c0 <tftPrint>
	tftPrint("TimeOfFlight Sensor",0,30,0);
 80013e6:	2300      	movs	r3, #0
 80013e8:	221e      	movs	r2, #30
 80013ea:	2100      	movs	r1, #0
 80013ec:	480d      	ldr	r0, [pc, #52]	; (8001424 <visualisationStart+0x64>)
 80013ee:	f001 fee7 	bl	80031c0 <tftPrint>
	tftPrint("Philipp & Andreas",0,50,0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2232      	movs	r2, #50	; 0x32
 80013f6:	2100      	movs	r1, #0
 80013f8:	480b      	ldr	r0, [pc, #44]	; (8001428 <visualisationStart+0x68>)
 80013fa:	f001 fee1 	bl	80031c0 <tftPrint>
	tftPrint("----------------",0,70,0);
 80013fe:	2300      	movs	r3, #0
 8001400:	2246      	movs	r2, #70	; 0x46
 8001402:	2100      	movs	r1, #0
 8001404:	4806      	ldr	r0, [pc, #24]	; (8001420 <visualisationStart+0x60>)
 8001406:	f001 fedb 	bl	80031c0 <tftPrint>
	tftPrint("-> Push Buttom <-",0,90,0);
 800140a:	2300      	movs	r3, #0
 800140c:	225a      	movs	r2, #90	; 0x5a
 800140e:	2100      	movs	r1, #0
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <visualisationStart+0x6c>)
 8001412:	f001 fed5 	bl	80031c0 <tftPrint>
	// wait, that it can be read
	//delayms(2000);

	// start menu scan i2c
	//visualisationMenu(SCREEN_PAGE3, false, false);
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800b29c 	.word	0x0800b29c
 8001420:	0800aec0 	.word	0x0800aec0
 8001424:	0800aed4 	.word	0x0800aed4
 8001428:	0800aee8 	.word	0x0800aee8
 800142c:	0800aefc 	.word	0x0800aefc

08001430 <visualisationHeader>:
 * @function:	 visualisationHeader
 *
 * @brief: 		 show screen header
 */
void visualisationHeader(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	tftPrint("ARM-TMT22GR2",0,0,0);
 8001434:	2300      	movs	r3, #0
 8001436:	2200      	movs	r2, #0
 8001438:	2100      	movs	r1, #0
 800143a:	4802      	ldr	r0, [pc, #8]	; (8001444 <visualisationHeader+0x14>)
 800143c:	f001 fec0 	bl	80031c0 <tftPrint>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	0800af10 	.word	0x0800af10

08001448 <visualisationMenuGrid>:
 *
 * @parameters:	 MENU_GRID_t grid:	 which grid should be visualized
 * 				 uint16_t color:	 color for grid
 */
void visualisationMenuGrid(MENU_GRID_t grid, uint16_t color)
{
 8001448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	4613      	mov	r3, r2
 8001456:	80bb      	strh	r3, [r7, #4]
	//reset rectangle, print it black, if we don't want to draw black
	if(grid != GRID4)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d003      	beq.n	8001466 <visualisationMenuGrid+0x1e>
	{
		visualisationMenuGrid(GRID4, tft_BLACK);
 800145e:	2100      	movs	r1, #0
 8001460:	2003      	movs	r0, #3
 8001462:	f7ff fff1 	bl	8001448 <visualisationMenuGrid>
	}

	// switch different grids to be visualized
	switch(grid)
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b03      	cmp	r3, #3
 800146a:	f200 8117 	bhi.w	800169c <visualisationMenuGrid+0x254>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <visualisationMenuGrid+0x2c>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	08001485 	.word	0x08001485
 8001478:	08001507 	.word	0x08001507
 800147c:	080014ab 	.word	0x080014ab
 8001480:	0800157b 	.word	0x0800157b
	{
		// just a frame
		case GRID1:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8001484:	f001 ffa0 	bl	80033c8 <tftGetWidth>
 8001488:	4603      	mov	r3, r0
 800148a:	3b01      	subs	r3, #1
 800148c:	b2dc      	uxtb	r4, r3
 800148e:	f001 ffa7 	bl	80033e0 <tftGetHeight>
 8001492:	4603      	mov	r3, r0
 8001494:	3b01      	subs	r3, #1
 8001496:	b2da      	uxtb	r2, r3
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	4622      	mov	r2, r4
 80014a0:	210e      	movs	r1, #14
 80014a2:	2000      	movs	r0, #0
 80014a4:	f001 fbea 	bl	8002c7c <tftDrawRect>
			break;
 80014a8:	e0f8      	b.n	800169c <visualisationMenuGrid+0x254>
		// two frame grid vertical
		case GRID2V:
			tftDrawRect(0, 14, tftGetWidth()/2 -1, tftGetHeight() - 1, color);
 80014aa:	f001 ff8d 	bl	80033c8 <tftGetWidth>
 80014ae:	4603      	mov	r3, r0
 80014b0:	085b      	lsrs	r3, r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b2dc      	uxtb	r4, r3
 80014b8:	f001 ff92 	bl	80033e0 <tftGetHeight>
 80014bc:	4603      	mov	r3, r0
 80014be:	3b01      	subs	r3, #1
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	4622      	mov	r2, r4
 80014ca:	210e      	movs	r1, #14
 80014cc:	2000      	movs	r0, #0
 80014ce:	f001 fbd5 	bl	8002c7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 -1, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 80014d2:	f001 ff79 	bl	80033c8 <tftGetWidth>
 80014d6:	4603      	mov	r3, r0
 80014d8:	085b      	lsrs	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	3b01      	subs	r3, #1
 80014de:	b2dc      	uxtb	r4, r3
 80014e0:	f001 ff72 	bl	80033c8 <tftGetWidth>
 80014e4:	4603      	mov	r3, r0
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b2dd      	uxtb	r5, r3
 80014ea:	f001 ff79 	bl	80033e0 <tftGetHeight>
 80014ee:	4603      	mov	r3, r0
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	462a      	mov	r2, r5
 80014fc:	210e      	movs	r1, #14
 80014fe:	4620      	mov	r0, r4
 8001500:	f001 fbbc 	bl	8002c7c <tftDrawRect>
			break;
 8001504:	e0ca      	b.n	800169c <visualisationMenuGrid+0x254>
		// two frame grid horizontal
		case GRID2H:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 8001506:	f001 ff5f 	bl	80033c8 <tftGetWidth>
 800150a:	4603      	mov	r3, r0
 800150c:	3b01      	subs	r3, #1
 800150e:	b2dc      	uxtb	r4, r3
 8001510:	f001 ff66 	bl	80033e0 <tftGetHeight>
 8001514:	4603      	mov	r3, r0
 8001516:	461d      	mov	r5, r3
 8001518:	f001 ff56 	bl	80033c8 <tftGetWidth>
 800151c:	4603      	mov	r3, r0
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	1aeb      	subs	r3, r5, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	3315      	adds	r3, #21
 8001528:	b2da      	uxtb	r2, r3
 800152a:	88bb      	ldrh	r3, [r7, #4]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	4622      	mov	r2, r4
 8001532:	210e      	movs	r1, #14
 8001534:	2000      	movs	r0, #0
 8001536:	f001 fba1 	bl	8002c7c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 800153a:	f001 ff51 	bl	80033e0 <tftGetHeight>
 800153e:	4603      	mov	r3, r0
 8001540:	461c      	mov	r4, r3
 8001542:	f001 ff41 	bl	80033c8 <tftGetWidth>
 8001546:	4603      	mov	r3, r0
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	1ae3      	subs	r3, r4, r3
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3315      	adds	r3, #21
 8001552:	b2dc      	uxtb	r4, r3
 8001554:	f001 ff38 	bl	80033c8 <tftGetWidth>
 8001558:	4603      	mov	r3, r0
 800155a:	3b01      	subs	r3, #1
 800155c:	b2dd      	uxtb	r5, r3
 800155e:	f001 ff3f 	bl	80033e0 <tftGetHeight>
 8001562:	4603      	mov	r3, r0
 8001564:	3b01      	subs	r3, #1
 8001566:	b2da      	uxtb	r2, r3
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	462a      	mov	r2, r5
 8001570:	4621      	mov	r1, r4
 8001572:	2000      	movs	r0, #0
 8001574:	f001 fb82 	bl	8002c7c <tftDrawRect>
			break;
 8001578:	e090      	b.n	800169c <visualisationMenuGrid+0x254>
		// four frame grid
		case GRID4:
			tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 800157a:	f001 ff25 	bl	80033c8 <tftGetWidth>
 800157e:	4603      	mov	r3, r0
 8001580:	461c      	mov	r4, r3
 8001582:	f001 ff21 	bl	80033c8 <tftGetWidth>
 8001586:	4603      	mov	r3, r0
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	1ae3      	subs	r3, r4, r3
 800158e:	b2db      	uxtb	r3, r3
 8001590:	3b01      	subs	r3, #1
 8001592:	b2dc      	uxtb	r4, r3
 8001594:	f001 ff24 	bl	80033e0 <tftGetHeight>
 8001598:	4603      	mov	r3, r0
 800159a:	461d      	mov	r5, r3
 800159c:	f001 ff14 	bl	80033c8 <tftGetWidth>
 80015a0:	4603      	mov	r3, r0
 80015a2:	085b      	lsrs	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	1aeb      	subs	r3, r5, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	3315      	adds	r3, #21
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	4613      	mov	r3, r2
 80015b4:	4622      	mov	r2, r4
 80015b6:	210e      	movs	r1, #14
 80015b8:	2000      	movs	r0, #0
 80015ba:	f001 fb5f 	bl	8002c7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 80015be:	f001 ff03 	bl	80033c8 <tftGetWidth>
 80015c2:	4603      	mov	r3, r0
 80015c4:	085b      	lsrs	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b2dc      	uxtb	r4, r3
 80015cc:	f001 fefc 	bl	80033c8 <tftGetWidth>
 80015d0:	4603      	mov	r3, r0
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b2dd      	uxtb	r5, r3
 80015d6:	f001 ff03 	bl	80033e0 <tftGetHeight>
 80015da:	4603      	mov	r3, r0
 80015dc:	461e      	mov	r6, r3
 80015de:	f001 fef3 	bl	80033c8 <tftGetWidth>
 80015e2:	4603      	mov	r3, r0
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	1af3      	subs	r3, r6, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3315      	adds	r3, #21
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	462a      	mov	r2, r5
 80015f8:	210e      	movs	r1, #14
 80015fa:	4620      	mov	r0, r4
 80015fc:	f001 fb3e 	bl	8002c7c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, color);
 8001600:	f001 feee 	bl	80033e0 <tftGetHeight>
 8001604:	4603      	mov	r3, r0
 8001606:	461c      	mov	r4, r3
 8001608:	f001 fede 	bl	80033c8 <tftGetWidth>
 800160c:	4603      	mov	r3, r0
 800160e:	085b      	lsrs	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	1ae3      	subs	r3, r4, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	3315      	adds	r3, #21
 8001618:	b2dc      	uxtb	r4, r3
 800161a:	f001 fed5 	bl	80033c8 <tftGetWidth>
 800161e:	4603      	mov	r3, r0
 8001620:	461d      	mov	r5, r3
 8001622:	f001 fed1 	bl	80033c8 <tftGetWidth>
 8001626:	4603      	mov	r3, r0
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	b2db      	uxtb	r3, r3
 800162c:	1aeb      	subs	r3, r5, r3
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b2dd      	uxtb	r5, r3
 8001634:	f001 fed4 	bl	80033e0 <tftGetHeight>
 8001638:	4603      	mov	r3, r0
 800163a:	3b01      	subs	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4613      	mov	r3, r2
 8001644:	462a      	mov	r2, r5
 8001646:	4621      	mov	r1, r4
 8001648:	2000      	movs	r0, #0
 800164a:	f001 fb17 	bl	8002c7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 800164e:	f001 febb 	bl	80033c8 <tftGetWidth>
 8001652:	4603      	mov	r3, r0
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	3b01      	subs	r3, #1
 800165a:	b2dc      	uxtb	r4, r3
 800165c:	f001 fec0 	bl	80033e0 <tftGetHeight>
 8001660:	4603      	mov	r3, r0
 8001662:	461d      	mov	r5, r3
 8001664:	f001 feb0 	bl	80033c8 <tftGetWidth>
 8001668:	4603      	mov	r3, r0
 800166a:	085b      	lsrs	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	1aeb      	subs	r3, r5, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3315      	adds	r3, #21
 8001674:	b2dd      	uxtb	r5, r3
 8001676:	f001 fea7 	bl	80033c8 <tftGetWidth>
 800167a:	4603      	mov	r3, r0
 800167c:	3b01      	subs	r3, #1
 800167e:	b2de      	uxtb	r6, r3
 8001680:	f001 feae 	bl	80033e0 <tftGetHeight>
 8001684:	4603      	mov	r3, r0
 8001686:	3b01      	subs	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4613      	mov	r3, r2
 8001690:	4632      	mov	r2, r6
 8001692:	4629      	mov	r1, r5
 8001694:	4620      	mov	r0, r4
 8001696:	f001 faf1 	bl	8002c7c <tftDrawRect>
			break;
 800169a:	bf00      	nop
	}
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a4 <visualisationMenuGridFocus>:
 * @parameters:	 int32_t position:	 	position to focus
 * 				 uint16_t colorDefault:	default color to reset focus
 * 				 uint16_t colorFocus:	focus color
 */
void visualisationMenuGridFocus(int32_t position, uint16_t colorDefault, uint16_t colorFocus)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	803b      	strh	r3, [r7, #0]
	//reset rectangle from focus
	visualisationMenuGrid(GRID4, colorDefault);
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	4619      	mov	r1, r3
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff fec5 	bl	8001448 <visualisationMenuGrid>
	tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 80016be:	f001 fe83 	bl	80033c8 <tftGetWidth>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461c      	mov	r4, r3
 80016c6:	f001 fe7f 	bl	80033c8 <tftGetWidth>
 80016ca:	4603      	mov	r3, r0
 80016cc:	085b      	lsrs	r3, r3, #1
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	1ae3      	subs	r3, r4, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	3b02      	subs	r3, #2
 80016d6:	b2dc      	uxtb	r4, r3
 80016d8:	f001 fe82 	bl	80033e0 <tftGetHeight>
 80016dc:	4603      	mov	r3, r0
 80016de:	461d      	mov	r5, r3
 80016e0:	f001 fe72 	bl	80033c8 <tftGetWidth>
 80016e4:	4603      	mov	r3, r0
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	1aeb      	subs	r3, r5, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	3314      	adds	r3, #20
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2200      	movs	r2, #0
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	4622      	mov	r2, r4
 80016f8:	210f      	movs	r1, #15
 80016fa:	2001      	movs	r0, #1
 80016fc:	f001 fabe 	bl	8002c7c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 8001700:	f001 fe62 	bl	80033c8 <tftGetWidth>
 8001704:	4603      	mov	r3, r0
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	b2dc      	uxtb	r4, r3
 800170a:	f001 fe5d 	bl	80033c8 <tftGetWidth>
 800170e:	4603      	mov	r3, r0
 8001710:	3b02      	subs	r3, #2
 8001712:	b2dd      	uxtb	r5, r3
 8001714:	f001 fe64 	bl	80033e0 <tftGetHeight>
 8001718:	4603      	mov	r3, r0
 800171a:	461e      	mov	r6, r3
 800171c:	f001 fe54 	bl	80033c8 <tftGetWidth>
 8001720:	4603      	mov	r3, r0
 8001722:	085b      	lsrs	r3, r3, #1
 8001724:	b2db      	uxtb	r3, r3
 8001726:	1af3      	subs	r3, r6, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	3314      	adds	r3, #20
 800172c:	b2db      	uxtb	r3, r3
 800172e:	2200      	movs	r2, #0
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	462a      	mov	r2, r5
 8001734:	210f      	movs	r1, #15
 8001736:	4620      	mov	r0, r4
 8001738:	f001 faa0 	bl	8002c7c <tftDrawRect>
	tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 800173c:	f001 fe50 	bl	80033e0 <tftGetHeight>
 8001740:	4603      	mov	r3, r0
 8001742:	461c      	mov	r4, r3
 8001744:	f001 fe40 	bl	80033c8 <tftGetWidth>
 8001748:	4603      	mov	r3, r0
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	1ae3      	subs	r3, r4, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	3316      	adds	r3, #22
 8001754:	b2dc      	uxtb	r4, r3
 8001756:	f001 fe37 	bl	80033c8 <tftGetWidth>
 800175a:	4603      	mov	r3, r0
 800175c:	461d      	mov	r5, r3
 800175e:	f001 fe33 	bl	80033c8 <tftGetWidth>
 8001762:	4603      	mov	r3, r0
 8001764:	085b      	lsrs	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	1aeb      	subs	r3, r5, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	3b02      	subs	r3, #2
 800176e:	b2dd      	uxtb	r5, r3
 8001770:	f001 fe36 	bl	80033e0 <tftGetHeight>
 8001774:	4603      	mov	r3, r0
 8001776:	3b02      	subs	r3, #2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2200      	movs	r2, #0
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	462a      	mov	r2, r5
 8001780:	4621      	mov	r1, r4
 8001782:	2001      	movs	r0, #1
 8001784:	f001 fa7a 	bl	8002c7c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8001788:	f001 fe1e 	bl	80033c8 <tftGetWidth>
 800178c:	4603      	mov	r3, r0
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	b2dc      	uxtb	r4, r3
 8001792:	f001 fe25 	bl	80033e0 <tftGetHeight>
 8001796:	4603      	mov	r3, r0
 8001798:	461d      	mov	r5, r3
 800179a:	f001 fe15 	bl	80033c8 <tftGetWidth>
 800179e:	4603      	mov	r3, r0
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	1aeb      	subs	r3, r5, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	3316      	adds	r3, #22
 80017aa:	b2dd      	uxtb	r5, r3
 80017ac:	f001 fe0c 	bl	80033c8 <tftGetWidth>
 80017b0:	4603      	mov	r3, r0
 80017b2:	3b02      	subs	r3, #2
 80017b4:	b2de      	uxtb	r6, r3
 80017b6:	f001 fe13 	bl	80033e0 <tftGetHeight>
 80017ba:	4603      	mov	r3, r0
 80017bc:	3b02      	subs	r3, #2
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2200      	movs	r2, #0
 80017c2:	9200      	str	r2, [sp, #0]
 80017c4:	4632      	mov	r2, r6
 80017c6:	4629      	mov	r1, r5
 80017c8:	4620      	mov	r0, r4
 80017ca:	f001 fa57 	bl	8002c7c <tftDrawRect>

	// which frame should be focused
	switch(position)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	f200 812b 	bhi.w	8001a2c <visualisationMenuGridFocus+0x388>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <visualisationMenuGridFocus+0x138>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	08001877 	.word	0x08001877
 80017e4:	080018f9 	.word	0x080018f9
 80017e8:	0800198f 	.word	0x0800198f
	{
	case 0:
		tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 80017ec:	f001 fdec 	bl	80033c8 <tftGetWidth>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461c      	mov	r4, r3
 80017f4:	f001 fde8 	bl	80033c8 <tftGetWidth>
 80017f8:	4603      	mov	r3, r0
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	1ae3      	subs	r3, r4, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3b02      	subs	r3, #2
 8001804:	b2dc      	uxtb	r4, r3
 8001806:	f001 fdeb 	bl	80033e0 <tftGetHeight>
 800180a:	4603      	mov	r3, r0
 800180c:	461d      	mov	r5, r3
 800180e:	f001 fddb 	bl	80033c8 <tftGetWidth>
 8001812:	4603      	mov	r3, r0
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	1aeb      	subs	r3, r5, r3
 800181a:	b2db      	uxtb	r3, r3
 800181c:	3314      	adds	r3, #20
 800181e:	b2da      	uxtb	r2, r3
 8001820:	883b      	ldrh	r3, [r7, #0]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4613      	mov	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	210f      	movs	r1, #15
 800182a:	2001      	movs	r0, #1
 800182c:	f001 fa26 	bl	8002c7c <tftDrawRect>
		tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 8001830:	f001 fdca 	bl	80033c8 <tftGetWidth>
 8001834:	4603      	mov	r3, r0
 8001836:	461c      	mov	r4, r3
 8001838:	f001 fdc6 	bl	80033c8 <tftGetWidth>
 800183c:	4603      	mov	r3, r0
 800183e:	085b      	lsrs	r3, r3, #1
 8001840:	b2db      	uxtb	r3, r3
 8001842:	1ae3      	subs	r3, r4, r3
 8001844:	b2db      	uxtb	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b2dc      	uxtb	r4, r3
 800184a:	f001 fdc9 	bl	80033e0 <tftGetHeight>
 800184e:	4603      	mov	r3, r0
 8001850:	461d      	mov	r5, r3
 8001852:	f001 fdb9 	bl	80033c8 <tftGetWidth>
 8001856:	4603      	mov	r3, r0
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	1aeb      	subs	r3, r5, r3
 800185e:	b2db      	uxtb	r3, r3
 8001860:	3315      	adds	r3, #21
 8001862:	b2da      	uxtb	r2, r3
 8001864:	883b      	ldrh	r3, [r7, #0]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	4622      	mov	r2, r4
 800186c:	210e      	movs	r1, #14
 800186e:	2000      	movs	r0, #0
 8001870:	f001 fa04 	bl	8002c7c <tftDrawRect>
		break;
 8001874:	e0db      	b.n	8001a2e <visualisationMenuGridFocus+0x38a>
	case 1:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 8001876:	f001 fda7 	bl	80033c8 <tftGetWidth>
 800187a:	4603      	mov	r3, r0
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b2dc      	uxtb	r4, r3
 8001880:	f001 fda2 	bl	80033c8 <tftGetWidth>
 8001884:	4603      	mov	r3, r0
 8001886:	3b02      	subs	r3, #2
 8001888:	b2dd      	uxtb	r5, r3
 800188a:	f001 fda9 	bl	80033e0 <tftGetHeight>
 800188e:	4603      	mov	r3, r0
 8001890:	461e      	mov	r6, r3
 8001892:	f001 fd99 	bl	80033c8 <tftGetWidth>
 8001896:	4603      	mov	r3, r0
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	b2db      	uxtb	r3, r3
 800189c:	1af3      	subs	r3, r6, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	3314      	adds	r3, #20
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	883b      	ldrh	r3, [r7, #0]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	462a      	mov	r2, r5
 80018ac:	210f      	movs	r1, #15
 80018ae:	4620      	mov	r0, r4
 80018b0:	f001 f9e4 	bl	8002c7c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 80018b4:	f001 fd88 	bl	80033c8 <tftGetWidth>
 80018b8:	4603      	mov	r3, r0
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3b01      	subs	r3, #1
 80018c0:	b2dc      	uxtb	r4, r3
 80018c2:	f001 fd81 	bl	80033c8 <tftGetWidth>
 80018c6:	4603      	mov	r3, r0
 80018c8:	3b01      	subs	r3, #1
 80018ca:	b2dd      	uxtb	r5, r3
 80018cc:	f001 fd88 	bl	80033e0 <tftGetHeight>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461e      	mov	r6, r3
 80018d4:	f001 fd78 	bl	80033c8 <tftGetWidth>
 80018d8:	4603      	mov	r3, r0
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	1af3      	subs	r3, r6, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3315      	adds	r3, #21
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	883b      	ldrh	r3, [r7, #0]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	4613      	mov	r3, r2
 80018ec:	462a      	mov	r2, r5
 80018ee:	210e      	movs	r1, #14
 80018f0:	4620      	mov	r0, r4
 80018f2:	f001 f9c3 	bl	8002c7c <tftDrawRect>
		break;
 80018f6:	e09a      	b.n	8001a2e <visualisationMenuGridFocus+0x38a>
	case 2:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 80018f8:	f001 fd66 	bl	80033c8 <tftGetWidth>
 80018fc:	4603      	mov	r3, r0
 80018fe:	085b      	lsrs	r3, r3, #1
 8001900:	b2dc      	uxtb	r4, r3
 8001902:	f001 fd6d 	bl	80033e0 <tftGetHeight>
 8001906:	4603      	mov	r3, r0
 8001908:	461d      	mov	r5, r3
 800190a:	f001 fd5d 	bl	80033c8 <tftGetWidth>
 800190e:	4603      	mov	r3, r0
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	1aeb      	subs	r3, r5, r3
 8001916:	b2db      	uxtb	r3, r3
 8001918:	3316      	adds	r3, #22
 800191a:	b2dd      	uxtb	r5, r3
 800191c:	f001 fd54 	bl	80033c8 <tftGetWidth>
 8001920:	4603      	mov	r3, r0
 8001922:	3b02      	subs	r3, #2
 8001924:	b2de      	uxtb	r6, r3
 8001926:	f001 fd5b 	bl	80033e0 <tftGetHeight>
 800192a:	4603      	mov	r3, r0
 800192c:	3b02      	subs	r3, #2
 800192e:	b2da      	uxtb	r2, r3
 8001930:	883b      	ldrh	r3, [r7, #0]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	4632      	mov	r2, r6
 8001938:	4629      	mov	r1, r5
 800193a:	4620      	mov	r0, r4
 800193c:	f001 f99e 	bl	8002c7c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, colorFocus);
 8001940:	f001 fd42 	bl	80033c8 <tftGetWidth>
 8001944:	4603      	mov	r3, r0
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b2dc      	uxtb	r4, r3
 800194e:	f001 fd47 	bl	80033e0 <tftGetHeight>
 8001952:	4603      	mov	r3, r0
 8001954:	461d      	mov	r5, r3
 8001956:	f001 fd37 	bl	80033c8 <tftGetWidth>
 800195a:	4603      	mov	r3, r0
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	1aeb      	subs	r3, r5, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	3315      	adds	r3, #21
 8001966:	b2dd      	uxtb	r5, r3
 8001968:	f001 fd2e 	bl	80033c8 <tftGetWidth>
 800196c:	4603      	mov	r3, r0
 800196e:	3b01      	subs	r3, #1
 8001970:	b2de      	uxtb	r6, r3
 8001972:	f001 fd35 	bl	80033e0 <tftGetHeight>
 8001976:	4603      	mov	r3, r0
 8001978:	3b01      	subs	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	883b      	ldrh	r3, [r7, #0]
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	4613      	mov	r3, r2
 8001982:	4632      	mov	r2, r6
 8001984:	4629      	mov	r1, r5
 8001986:	4620      	mov	r0, r4
 8001988:	f001 f978 	bl	8002c7c <tftDrawRect>
		break;
 800198c:	e04f      	b.n	8001a2e <visualisationMenuGridFocus+0x38a>
	case 3:
		tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 800198e:	f001 fd27 	bl	80033e0 <tftGetHeight>
 8001992:	4603      	mov	r3, r0
 8001994:	461c      	mov	r4, r3
 8001996:	f001 fd17 	bl	80033c8 <tftGetWidth>
 800199a:	4603      	mov	r3, r0
 800199c:	085b      	lsrs	r3, r3, #1
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	1ae3      	subs	r3, r4, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	3316      	adds	r3, #22
 80019a6:	b2dc      	uxtb	r4, r3
 80019a8:	f001 fd0e 	bl	80033c8 <tftGetWidth>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461d      	mov	r5, r3
 80019b0:	f001 fd0a 	bl	80033c8 <tftGetWidth>
 80019b4:	4603      	mov	r3, r0
 80019b6:	085b      	lsrs	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	1aeb      	subs	r3, r5, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	3b02      	subs	r3, #2
 80019c0:	b2dd      	uxtb	r5, r3
 80019c2:	f001 fd0d 	bl	80033e0 <tftGetHeight>
 80019c6:	4603      	mov	r3, r0
 80019c8:	3b02      	subs	r3, #2
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	883b      	ldrh	r3, [r7, #0]
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	462a      	mov	r2, r5
 80019d4:	4621      	mov	r1, r4
 80019d6:	2001      	movs	r0, #1
 80019d8:	f001 f950 	bl	8002c7c <tftDrawRect>
		tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, colorFocus);
 80019dc:	f001 fd00 	bl	80033e0 <tftGetHeight>
 80019e0:	4603      	mov	r3, r0
 80019e2:	461c      	mov	r4, r3
 80019e4:	f001 fcf0 	bl	80033c8 <tftGetWidth>
 80019e8:	4603      	mov	r3, r0
 80019ea:	085b      	lsrs	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	1ae3      	subs	r3, r4, r3
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3315      	adds	r3, #21
 80019f4:	b2dc      	uxtb	r4, r3
 80019f6:	f001 fce7 	bl	80033c8 <tftGetWidth>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461d      	mov	r5, r3
 80019fe:	f001 fce3 	bl	80033c8 <tftGetWidth>
 8001a02:	4603      	mov	r3, r0
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	1aeb      	subs	r3, r5, r3
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2dd      	uxtb	r5, r3
 8001a10:	f001 fce6 	bl	80033e0 <tftGetHeight>
 8001a14:	4603      	mov	r3, r0
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	462a      	mov	r2, r5
 8001a22:	4621      	mov	r1, r4
 8001a24:	2000      	movs	r0, #0
 8001a26:	f001 f929 	bl	8002c7c <tftDrawRect>
		break;
 8001a2a:	e000      	b.n	8001a2e <visualisationMenuGridFocus+0x38a>
	default:
		break;
 8001a2c:	bf00      	nop
	}
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a36:	bf00      	nop

08001a38 <visualisationMenu>:
 * @parameters:	 SCREEN_PAGES_t page:	menu page to be loaded
 * 				 bool initedTOF:		flag if TOF is initialized
 * 				 bool inited3DG:		flag if 3DG is initialized
 */
void visualisationMenu(SCREEN_PAGES_t page, bool initedTOF, bool inited3DG, TOFSensor_t* TOFSENS)
{
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	4603      	mov	r3, r0
 8001a42:	71fb      	strb	r3, [r7, #7]
 8001a44:	460b      	mov	r3, r1
 8001a46:	71bb      	strb	r3, [r7, #6]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	717b      	strb	r3, [r7, #5]
	// clear content
	visualisationClearBody();
 8001a4c:	f000 f952 	bl	8001cf4 <visualisationClearBody>

	// load right screen
	switch(page)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	f200 8116 	bhi.w	8001c84 <visualisationMenu+0x24c>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <visualisationMenu+0x28>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a75 	.word	0x08001a75
 8001a64:	08001b21 	.word	0x08001b21
 8001a68:	08001b45 	.word	0x08001b45
 8001a6c:	08001b81 	.word	0x08001b81
 8001a70:	08001c0d 	.word	0x08001c0d
	{
	case SCREEN_MAIN:
		visualisationMenuGridFocus((uint16_t)getRotaryPosition() % 4, tft_WHITE, tft_YELLOW);
 8001a74:	f000 fd1c 	bl	80024b0 <getRotaryPosition>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fe0b 	bl	80016a4 <visualisationMenuGridFocus>

		// 1. Submenu
		tftPrint("Sensor-",13,27,0);
 8001a8e:	2300      	movs	r3, #0
 8001a90:	221b      	movs	r2, #27
 8001a92:	210d      	movs	r1, #13
 8001a94:	487d      	ldr	r0, [pc, #500]	; (8001c8c <visualisationMenu+0x254>)
 8001a96:	f001 fb93 	bl	80031c0 <tftPrint>
		tftPrint("init",23,39,0);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2227      	movs	r2, #39	; 0x27
 8001a9e:	2117      	movs	r1, #23
 8001aa0:	487b      	ldr	r0, [pc, #492]	; (8001c90 <visualisationMenu+0x258>)
 8001aa2:	f001 fb8d 	bl	80031c0 <tftPrint>

		// 2. Submenu
		tftPrint("TOF", 28 + tftGetWidth()/2, 27, 0);
 8001aa6:	f001 fc8f 	bl	80033c8 <tftGetWidth>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	085b      	lsrs	r3, r3, #1
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f103 011c 	add.w	r1, r3, #28
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	221b      	movs	r2, #27
 8001ab8:	4876      	ldr	r0, [pc, #472]	; (8001c94 <visualisationMenu+0x25c>)
 8001aba:	f001 fb81 	bl	80031c0 <tftPrint>

		// show if sensor is not connected
		if(initedTOF == false)
 8001abe:	79bb      	ldrb	r3, [r7, #6]
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00a      	beq.n	8001ae0 <visualisationMenu+0xa8>
		{
			tftPrint("(discon.)", 3 + tftGetWidth()/2, 39, 0);
 8001aca:	f001 fc7d 	bl	80033c8 <tftGetWidth>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	085b      	lsrs	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	1cd9      	adds	r1, r3, #3
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2227      	movs	r2, #39	; 0x27
 8001ada:	486f      	ldr	r0, [pc, #444]	; (8001c98 <visualisationMenu+0x260>)
 8001adc:	f001 fb70 	bl	80031c0 <tftPrint>
		}

		// 3. Submenu
		tftPrint("Mode", 28 + tftGetWidth()/2, 20 + tftGetHeight()/2, 0);
 8001ae0:	f001 fc72 	bl	80033c8 <tftGetWidth>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	085b      	lsrs	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f103 041c 	add.w	r4, r3, #28
 8001aee:	f001 fc77 	bl	80033e0 <tftGetHeight>
 8001af2:	4603      	mov	r3, r0
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	f103 0214 	add.w	r2, r3, #20
 8001afc:	2300      	movs	r3, #0
 8001afe:	4621      	mov	r1, r4
 8001b00:	4866      	ldr	r0, [pc, #408]	; (8001c9c <visualisationMenu+0x264>)
 8001b02:	f001 fb5d 	bl	80031c0 <tftPrint>



		// 4. Submenu
		tftPrint("INFO", 24, 20 + tftGetHeight()/2, 0);
 8001b06:	f001 fc6b 	bl	80033e0 <tftGetHeight>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	085b      	lsrs	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f103 0214 	add.w	r2, r3, #20
 8001b14:	2300      	movs	r3, #0
 8001b16:	2118      	movs	r1, #24
 8001b18:	4861      	ldr	r0, [pc, #388]	; (8001ca0 <visualisationMenu+0x268>)
 8001b1a:	f001 fb51 	bl	80031c0 <tftPrint>
		break;
 8001b1e:	e0b1      	b.n	8001c84 <visualisationMenu+0x24c>
	case SCREEN_PAGE1:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fc8f 	bl	8001448 <visualisationMenuGrid>
		tftPrint("Sensor-init: i2c",POS_SCREEN_LINE_1);
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	2211      	movs	r2, #17
 8001b2e:	2104      	movs	r1, #4
 8001b30:	485c      	ldr	r0, [pc, #368]	; (8001ca4 <visualisationMenu+0x26c>)
 8001b32:	f001 fb45 	bl	80031c0 <tftPrint>
		tftPrint("Address:",POS_SCREEN_LINE_2);
 8001b36:	2300      	movs	r3, #0
 8001b38:	221e      	movs	r2, #30
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	485a      	ldr	r0, [pc, #360]	; (8001ca8 <visualisationMenu+0x270>)
 8001b3e:	f001 fb3f 	bl	80031c0 <tftPrint>
		break;
 8001b42:	e09f      	b.n	8001c84 <visualisationMenu+0x24c>
	case SCREEN_PAGE2:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b48:	2000      	movs	r0, #0
 8001b4a:	f7ff fc7d 	bl	8001448 <visualisationMenuGrid>
		tftPrint("Read distance with", POS_SCREEN_LINE_1);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2211      	movs	r2, #17
 8001b52:	2104      	movs	r1, #4
 8001b54:	4855      	ldr	r0, [pc, #340]	; (8001cac <visualisationMenu+0x274>)
 8001b56:	f001 fb33 	bl	80031c0 <tftPrint>
		tftPrint("TOF Sensor:", POS_SCREEN_LINE_2);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	221e      	movs	r2, #30
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4853      	ldr	r0, [pc, #332]	; (8001cb0 <visualisationMenu+0x278>)
 8001b62:	f001 fb2d 	bl	80031c0 <tftPrint>
		tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001b66:	2300      	movs	r3, #0
 8001b68:	2232      	movs	r2, #50	; 0x32
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4851      	ldr	r0, [pc, #324]	; (8001cb4 <visualisationMenu+0x27c>)
 8001b6e:	f001 fb27 	bl	80031c0 <tftPrint>

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001b72:	2300      	movs	r3, #0
 8001b74:	226e      	movs	r2, #110	; 0x6e
 8001b76:	2104      	movs	r1, #4
 8001b78:	484f      	ldr	r0, [pc, #316]	; (8001cb8 <visualisationMenu+0x280>)
 8001b7a:	f001 fb21 	bl	80031c0 <tftPrint>
		break;
 8001b7e:	e081      	b.n	8001c84 <visualisationMenu+0x24c>
	case SCREEN_PAGE3:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff fc5f 	bl	8001448 <visualisationMenuGrid>

		tftPrint("Current Mode", POS_SCREEN_LINE_3);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2228      	movs	r2, #40	; 0x28
 8001b8e:	2104      	movs	r1, #4
 8001b90:	484a      	ldr	r0, [pc, #296]	; (8001cbc <visualisationMenu+0x284>)
 8001b92:	f001 fb15 	bl	80031c0 <tftPrint>
		switch(TOFSENS->Ranging_Profiles_t) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	88db      	ldrh	r3, [r3, #6]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d827      	bhi.n	8001bf0 <visualisationMenu+0x1b8>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <visualisationMenu+0x170>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bb9 	.word	0x08001bb9
 8001bac:	08001bc7 	.word	0x08001bc7
 8001bb0:	08001bd5 	.word	0x08001bd5
 8001bb4:	08001be3 	.word	0x08001be3
		    case TOF_DEFAULT_MODE_D:
		        tftPrint("DEFAULT        ", POS_SCREEN_LINE_4);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2232      	movs	r2, #50	; 0x32
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4840      	ldr	r0, [pc, #256]	; (8001cc0 <visualisationMenu+0x288>)
 8001bc0:	f001 fafe 	bl	80031c0 <tftPrint>
		        break;
 8001bc4:	e01b      	b.n	8001bfe <visualisationMenu+0x1c6>

		    case TOF_HIGH_SPEED_MODE_S:
		        tftPrint("HIGH SPEED     ", POS_SCREEN_LINE_4);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2232      	movs	r2, #50	; 0x32
 8001bca:	2104      	movs	r1, #4
 8001bcc:	483d      	ldr	r0, [pc, #244]	; (8001cc4 <visualisationMenu+0x28c>)
 8001bce:	f001 faf7 	bl	80031c0 <tftPrint>
		        break;
 8001bd2:	e014      	b.n	8001bfe <visualisationMenu+0x1c6>

		    case TOF_HIGH_ACCURACY_MODE_A:
		        tftPrint("HIGH ACCURACY  ", POS_SCREEN_LINE_4);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2232      	movs	r2, #50	; 0x32
 8001bd8:	2104      	movs	r1, #4
 8001bda:	483b      	ldr	r0, [pc, #236]	; (8001cc8 <visualisationMenu+0x290>)
 8001bdc:	f001 faf0 	bl	80031c0 <tftPrint>
		        break;
 8001be0:	e00d      	b.n	8001bfe <visualisationMenu+0x1c6>

		    case TOF_LONG_RANGE_MODE_R:
		        tftPrint("LONG RANGE     ", POS_SCREEN_LINE_4);
 8001be2:	2300      	movs	r3, #0
 8001be4:	2232      	movs	r2, #50	; 0x32
 8001be6:	2104      	movs	r1, #4
 8001be8:	4838      	ldr	r0, [pc, #224]	; (8001ccc <visualisationMenu+0x294>)
 8001bea:	f001 fae9 	bl	80031c0 <tftPrint>
		        break;
 8001bee:	e006      	b.n	8001bfe <visualisationMenu+0x1c6>

		    default:
		        tftPrint("RANGINGERROR   ", POS_SCREEN_LINE_4);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2232      	movs	r2, #50	; 0x32
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4836      	ldr	r0, [pc, #216]	; (8001cd0 <visualisationMenu+0x298>)
 8001bf8:	f001 fae2 	bl	80031c0 <tftPrint>
		        break;
 8001bfc:	bf00      	nop
		}

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	226e      	movs	r2, #110	; 0x6e
 8001c02:	2104      	movs	r1, #4
 8001c04:	482c      	ldr	r0, [pc, #176]	; (8001cb8 <visualisationMenu+0x280>)
 8001c06:	f001 fadb 	bl	80031c0 <tftPrint>
		break;
 8001c0a:	e03b      	b.n	8001c84 <visualisationMenu+0x24c>
	case SCREEN_PAGE4:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fc19 	bl	8001448 <visualisationMenuGrid>
		tftPrint("INFO:", POS_SCREEN_LINE_1);
 8001c16:	2300      	movs	r3, #0
 8001c18:	2211      	movs	r2, #17
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <visualisationMenu+0x29c>)
 8001c1e:	f001 facf 	bl	80031c0 <tftPrint>
		tftPrint("NAVIGATION:", POS_SCREEN_LINE_2);
 8001c22:	2300      	movs	r3, #0
 8001c24:	221e      	movs	r2, #30
 8001c26:	2104      	movs	r1, #4
 8001c28:	482b      	ldr	r0, [pc, #172]	; (8001cd8 <visualisationMenu+0x2a0>)
 8001c2a:	f001 fac9 	bl	80031c0 <tftPrint>
		tftPrint("in the manual!     ", POS_SCREEN_LINE_9);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2264      	movs	r2, #100	; 0x64
 8001c32:	2104      	movs	r1, #4
 8001c34:	4829      	ldr	r0, [pc, #164]	; (8001cdc <visualisationMenu+0x2a4>)
 8001c36:	f001 fac3 	bl	80031c0 <tftPrint>
		tftPrint("Further information", POS_SCREEN_LINE_8);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	225a      	movs	r2, #90	; 0x5a
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <visualisationMenu+0x2a8>)
 8001c42:	f001 fabd 	bl	80031c0 <tftPrint>
		tftPrint("       through menu", POS_SCREEN_LINE_6);
 8001c46:	2300      	movs	r3, #0
 8001c48:	2246      	movs	r2, #70	; 0x46
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4825      	ldr	r0, [pc, #148]	; (8001ce4 <visualisationMenu+0x2ac>)
 8001c4e:	f001 fab7 	bl	80031c0 <tftPrint>
		tftPrint(" - rotate: navigate", POS_SCREEN_LINE_5);
 8001c52:	2300      	movs	r3, #0
 8001c54:	223c      	movs	r2, #60	; 0x3c
 8001c56:	2104      	movs	r1, #4
 8001c58:	4823      	ldr	r0, [pc, #140]	; (8001ce8 <visualisationMenu+0x2b0>)
 8001c5a:	f001 fab1 	bl	80031c0 <tftPrint>
		tftPrint("         - go back ", POS_SCREEN_LINE_4);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2232      	movs	r2, #50	; 0x32
 8001c62:	2104      	movs	r1, #4
 8001c64:	4821      	ldr	r0, [pc, #132]	; (8001cec <visualisationMenu+0x2b4>)
 8001c66:	f001 faab 	bl	80031c0 <tftPrint>
		tftPrint(" - push: - enter   ", POS_SCREEN_LINE_3);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2228      	movs	r2, #40	; 0x28
 8001c6e:	2104      	movs	r1, #4
 8001c70:	481f      	ldr	r0, [pc, #124]	; (8001cf0 <visualisationMenu+0x2b8>)
 8001c72:	f001 faa5 	bl	80031c0 <tftPrint>
		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001c76:	2300      	movs	r3, #0
 8001c78:	226e      	movs	r2, #110	; 0x6e
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <visualisationMenu+0x280>)
 8001c7e:	f001 fa9f 	bl	80031c0 <tftPrint>
		break;
 8001c82:	bf00      	nop
	}
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	0800af20 	.word	0x0800af20
 8001c90:	0800af28 	.word	0x0800af28
 8001c94:	0800af30 	.word	0x0800af30
 8001c98:	0800af34 	.word	0x0800af34
 8001c9c:	0800af40 	.word	0x0800af40
 8001ca0:	0800af48 	.word	0x0800af48
 8001ca4:	0800af50 	.word	0x0800af50
 8001ca8:	0800af64 	.word	0x0800af64
 8001cac:	0800af70 	.word	0x0800af70
 8001cb0:	0800af84 	.word	0x0800af84
 8001cb4:	0800af90 	.word	0x0800af90
 8001cb8:	0800afa0 	.word	0x0800afa0
 8001cbc:	0800afb4 	.word	0x0800afb4
 8001cc0:	0800afc4 	.word	0x0800afc4
 8001cc4:	0800afd4 	.word	0x0800afd4
 8001cc8:	0800afe4 	.word	0x0800afe4
 8001ccc:	0800aff4 	.word	0x0800aff4
 8001cd0:	0800b004 	.word	0x0800b004
 8001cd4:	0800b014 	.word	0x0800b014
 8001cd8:	0800b01c 	.word	0x0800b01c
 8001cdc:	0800b028 	.word	0x0800b028
 8001ce0:	0800b03c 	.word	0x0800b03c
 8001ce4:	0800b050 	.word	0x0800b050
 8001ce8:	0800b064 	.word	0x0800b064
 8001cec:	0800b078 	.word	0x0800b078
 8001cf0:	0800b08c 	.word	0x0800b08c

08001cf4 <visualisationClearBody>:
 * @function:	 visualisationClearBody
 *
 * @brief: 		 clear content field to black
 */
void visualisationClearBody(void)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af02      	add	r7, sp, #8
	tftFillRect(0, 14, tftGetWidth(), tftGetHeight() - 14, tft_BLACK);
 8001cfa:	f001 fb65 	bl	80033c8 <tftGetWidth>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b21c      	sxth	r4, r3
 8001d02:	f001 fb6d 	bl	80033e0 <tftGetHeight>
 8001d06:	4603      	mov	r3, r0
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b0e      	subs	r3, #14
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	9200      	str	r2, [sp, #0]
 8001d14:	4622      	mov	r2, r4
 8001d16:	210e      	movs	r1, #14
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 fe77 	bl	8002a0c <tftFillRect>
}
 8001d1e:	bf00      	nop
 8001d20:	3704      	adds	r7, #4
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
	...

08001d28 <visualisationShowError>:
 * @brief: 		 show error screen for not initialized sensor
 *
 * @parameters:	 SCREEN_PAGES_t page:	which sensor is not initialized
 */
void visualisationShowError(SCREEN_PAGES_t page)
{
 8001d28:	b590      	push	{r4, r7, lr}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
	tftFillRect(14, 14, tftGetWidth() - 28, tftGetHeight() - 28, tft_YELLOW);
 8001d32:	f001 fb49 	bl	80033c8 <tftGetWidth>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3b1c      	subs	r3, #28
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21c      	sxth	r4, r3
 8001d40:	f001 fb4e 	bl	80033e0 <tftGetHeight>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	3b1c      	subs	r3, #28
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d52:	9200      	str	r2, [sp, #0]
 8001d54:	4622      	mov	r2, r4
 8001d56:	210e      	movs	r1, #14
 8001d58:	200e      	movs	r0, #14
 8001d5a:	f000 fe57 	bl	8002a0c <tftFillRect>
	tftDrawRect(14, 14, tftGetWidth() - 14, tftGetHeight() - 14, tft_RED);
 8001d5e:	f001 fb33 	bl	80033c8 <tftGetWidth>
 8001d62:	4603      	mov	r3, r0
 8001d64:	3b0e      	subs	r3, #14
 8001d66:	b2dc      	uxtb	r4, r3
 8001d68:	f001 fb3a 	bl	80033e0 <tftGetHeight>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	3b0e      	subs	r3, #14
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d76:	9200      	str	r2, [sp, #0]
 8001d78:	4622      	mov	r2, r4
 8001d7a:	210e      	movs	r1, #14
 8001d7c:	200e      	movs	r0, #14
 8001d7e:	f000 ff7d 	bl	8002c7c <tftDrawRect>

	tftPrint("ERROR", 60, 25, 0);
 8001d82:	2300      	movs	r3, #0
 8001d84:	2219      	movs	r2, #25
 8001d86:	213c      	movs	r1, #60	; 0x3c
 8001d88:	4812      	ldr	r0, [pc, #72]	; (8001dd4 <visualisationShowError+0xac>)
 8001d8a:	f001 fa19 	bl	80031c0 <tftPrint>
	tftPrint("not connected", 27, 55, 0);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2237      	movs	r2, #55	; 0x37
 8001d92:	211b      	movs	r1, #27
 8001d94:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <visualisationShowError+0xb0>)
 8001d96:	f001 fa13 	bl	80031c0 <tftPrint>

	// which sensor
	switch(page)
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d002      	beq.n	8001da6 <visualisationShowError+0x7e>
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d007      	beq.n	8001db4 <visualisationShowError+0x8c>
			break;
		case SCREEN_PAGE2:
			tftPrint("Ranging-Mode", 40, 40, 0);
			break;
		default:
			break;
 8001da4:	e00d      	b.n	8001dc2 <visualisationShowError+0x9a>
			tftPrint("TOF-sensor", 40, 40, 0);
 8001da6:	2300      	movs	r3, #0
 8001da8:	2228      	movs	r2, #40	; 0x28
 8001daa:	2128      	movs	r1, #40	; 0x28
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <visualisationShowError+0xb4>)
 8001dae:	f001 fa07 	bl	80031c0 <tftPrint>
			break;
 8001db2:	e006      	b.n	8001dc2 <visualisationShowError+0x9a>
			tftPrint("Ranging-Mode", 40, 40, 0);
 8001db4:	2300      	movs	r3, #0
 8001db6:	2228      	movs	r2, #40	; 0x28
 8001db8:	2128      	movs	r1, #40	; 0x28
 8001dba:	4809      	ldr	r0, [pc, #36]	; (8001de0 <visualisationShowError+0xb8>)
 8001dbc:	f001 fa00 	bl	80031c0 <tftPrint>
			break;
 8001dc0:	bf00      	nop
	}

	// give time to read
	delayms(2500);
 8001dc2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001dc6:	f000 fc49 	bl	800265c <delayms>
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	0800b0a0 	.word	0x0800b0a0
 8001dd8:	0800b0a8 	.word	0x0800b0a8
 8001ddc:	0800b0b8 	.word	0x0800b0b8
 8001de0:	0800b0c4 	.word	0x0800b0c4

08001de4 <visualisationTOF>:
 *
 * @parameters:	 uint16_t distance:		current distance
 * 				 uint16_t *olddistance: old distance
 */
void visualisationTOF(TOFSensor_t* TOFSENS)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09c      	sub	sp, #112	; 0x70
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
    static uint16_t olddistance_var = TOF_VL53L0X_OUT_OF_RANGE; // Statische Variable zur Speicherung des alten Werts
    uint16_t* olddistance = &olddistance_var; // Pointer auf die statische Variable
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <visualisationTOF+0x70>)
 8001dee:	66fb      	str	r3, [r7, #108]	; 0x6c

    // if value is not out of range
    if (TOFSENS->distanceFromTOF != TOF_VL53L0X_OUT_OF_RANGE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	891b      	ldrh	r3, [r3, #8]
 8001df4:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d01c      	beq.n	8001e36 <visualisationTOF+0x52>
    {
        // if it was out of range, restore unit visualization
        if (*olddistance == TOF_VL53L0X_OUT_OF_RANGE)
 8001dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d105      	bne.n	8001e14 <visualisationTOF+0x30>
        {
            tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2232      	movs	r2, #50	; 0x32
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4812      	ldr	r0, [pc, #72]	; (8001e58 <visualisationTOF+0x74>)
 8001e10:	f001 f9d6 	bl	80031c0 <tftPrint>
        }

        // visualize mm in 4 digits
        char buffer[100];
        sprintf(buffer, "%04d", TOFSENS->distanceFromTOF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	891b      	ldrh	r3, [r3, #8]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	490f      	ldr	r1, [pc, #60]	; (8001e5c <visualisationTOF+0x78>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 fcd9 	bl	80077d8 <siprintf>
        tftPrint(buffer, POS_SCREEN_LINE_4);
 8001e26:	f107 0008 	add.w	r0, r7, #8
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2232      	movs	r2, #50	; 0x32
 8001e2e:	2104      	movs	r1, #4
 8001e30:	f001 f9c6 	bl	80031c0 <tftPrint>
 8001e34:	e005      	b.n	8001e42 <visualisationTOF+0x5e>
    }
    // if value is out of range
    else
    {
        tftPrint("out of range", POS_SCREEN_LINE_4);
 8001e36:	2300      	movs	r3, #0
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	4808      	ldr	r0, [pc, #32]	; (8001e60 <visualisationTOF+0x7c>)
 8001e3e:	f001 f9bf 	bl	80031c0 <tftPrint>
    }

    // store current distance to old value
    *olddistance = TOFSENS->distanceFromTOF;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	891a      	ldrh	r2, [r3, #8]
 8001e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e48:	801a      	strh	r2, [r3, #0]
}
 8001e4a:	bf00      	nop
 8001e4c:	3770      	adds	r7, #112	; 0x70
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000008 	.word	0x20000008
 8001e58:	0800af90 	.word	0x0800af90
 8001e5c:	0800b0d4 	.word	0x0800b0d4
 8001e60:	0800b0dc 	.word	0x0800b0dc

08001e64 <visualisationRangingProfileTOF>:


void visualisationRangingProfileTOF(MODE_PAGES_t* MODE){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	switch(*MODE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	d826      	bhi.n	8001ec4 <visualisationRangingProfileTOF+0x60>
 8001e76:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <visualisationRangingProfileTOF+0x18>)
 8001e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e7c:	08001e8d 	.word	0x08001e8d
 8001e80:	08001e9b 	.word	0x08001e9b
 8001e84:	08001ea9 	.word	0x08001ea9
 8001e88:	08001eb7 	.word	0x08001eb7
	{
		case DEFAULTMODE:
			tftPrint("DEFAULT MODE      ", POS_SCREEN_LINE_6);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2246      	movs	r2, #70	; 0x46
 8001e90:	2104      	movs	r1, #4
 8001e92:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <visualisationRangingProfileTOF+0x6c>)
 8001e94:	f001 f994 	bl	80031c0 <tftPrint>
			break;
 8001e98:	e015      	b.n	8001ec6 <visualisationRangingProfileTOF+0x62>
		case HIGHSPEEDMODE:
			tftPrint("HIGH SPEED MODE   ", POS_SCREEN_LINE_6);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2246      	movs	r2, #70	; 0x46
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <visualisationRangingProfileTOF+0x70>)
 8001ea2:	f001 f98d 	bl	80031c0 <tftPrint>
			break;
 8001ea6:	e00e      	b.n	8001ec6 <visualisationRangingProfileTOF+0x62>
		case HIGHACCURACYMODE:
			tftPrint("HIGH ACCURACY MODE", POS_SCREEN_LINE_6);
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2246      	movs	r2, #70	; 0x46
 8001eac:	2104      	movs	r1, #4
 8001eae:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <visualisationRangingProfileTOF+0x74>)
 8001eb0:	f001 f986 	bl	80031c0 <tftPrint>
			break;
 8001eb4:	e007      	b.n	8001ec6 <visualisationRangingProfileTOF+0x62>
		case LONGRANGEMODE:
			tftPrint("LONG RANGE MODE   ", POS_SCREEN_LINE_6);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2246      	movs	r2, #70	; 0x46
 8001eba:	2104      	movs	r1, #4
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <visualisationRangingProfileTOF+0x78>)
 8001ebe:	f001 f97f 	bl	80031c0 <tftPrint>
			break;
 8001ec2:	e000      	b.n	8001ec6 <visualisationRangingProfileTOF+0x62>
		default:
			break;
 8001ec4:	bf00      	nop
	}


}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	0800b0ec 	.word	0x0800b0ec
 8001ed4:	0800b100 	.word	0x0800b100
 8001ed8:	0800b114 	.word	0x0800b114
 8001edc:	0800b128 	.word	0x0800b128

08001ee0 <visualisationSensorRecognized>:
 * @brief: 		 show recognition of sensor
 *
 * @parameters:	 SENSOR_t sensor:	which sensor is recognized
 */
void visualisationSensorRecognized(SENSOR_t sensor)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	switch(sensor)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d852      	bhi.n	8001f96 <visualisationSensorRecognized+0xb6>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <visualisationSensorRecognized+0x18>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f0d 	.word	0x08001f0d
 8001efc:	08001f27 	.word	0x08001f27
 8001f00:	08001f41 	.word	0x08001f41
 8001f04:	08001f5b 	.word	0x08001f5b
 8001f08:	08001f75 	.word	0x08001f75
	{
	case VISUALISATION_BMA020:
		tftPrint("BMA020 recognized!", POS_SCREEN_LINE_2);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	221e      	movs	r2, #30
 8001f10:	2104      	movs	r1, #4
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <visualisationSensorRecognized+0xc0>)
 8001f14:	f001 f954 	bl	80031c0 <tftPrint>
		tftPrint("Address: 0x38", POS_SCREEN_LINE_3);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	2228      	movs	r2, #40	; 0x28
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4821      	ldr	r0, [pc, #132]	; (8001fa4 <visualisationSensorRecognized+0xc4>)
 8001f20:	f001 f94e 	bl	80031c0 <tftPrint>
		break;
 8001f24:	e037      	b.n	8001f96 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_MPU6050:
		tftPrint("MPU6050 recognized!", POS_SCREEN_LINE_2);
 8001f26:	2300      	movs	r3, #0
 8001f28:	221e      	movs	r2, #30
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	481e      	ldr	r0, [pc, #120]	; (8001fa8 <visualisationSensorRecognized+0xc8>)
 8001f2e:	f001 f947 	bl	80031c0 <tftPrint>
		tftPrint("Address: 0x68", POS_SCREEN_LINE_3);
 8001f32:	2300      	movs	r3, #0
 8001f34:	2228      	movs	r2, #40	; 0x28
 8001f36:	2104      	movs	r1, #4
 8001f38:	481c      	ldr	r0, [pc, #112]	; (8001fac <visualisationSensorRecognized+0xcc>)
 8001f3a:	f001 f941 	bl	80031c0 <tftPrint>
		break;
 8001f3e:	e02a      	b.n	8001f96 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_LIS3DH:
		tftPrint("LIS3DH recognized!", POS_SCREEN_LINE_2);
 8001f40:	2300      	movs	r3, #0
 8001f42:	221e      	movs	r2, #30
 8001f44:	2104      	movs	r1, #4
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <visualisationSensorRecognized+0xd0>)
 8001f48:	f001 f93a 	bl	80031c0 <tftPrint>
		tftPrint("Address: 0x18", POS_SCREEN_LINE_3);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2228      	movs	r2, #40	; 0x28
 8001f50:	2104      	movs	r1, #4
 8001f52:	4818      	ldr	r0, [pc, #96]	; (8001fb4 <visualisationSensorRecognized+0xd4>)
 8001f54:	f001 f934 	bl	80031c0 <tftPrint>
		break;
 8001f58:	e01d      	b.n	8001f96 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_VL53LOX:
		tftPrint("TOF recognized!", POS_SCREEN_LINE_2);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	221e      	movs	r2, #30
 8001f5e:	2104      	movs	r1, #4
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <visualisationSensorRecognized+0xd8>)
 8001f62:	f001 f92d 	bl	80031c0 <tftPrint>
		tftPrint("Address: 0x29", POS_SCREEN_LINE_3);
 8001f66:	2300      	movs	r3, #0
 8001f68:	2228      	movs	r2, #40	; 0x28
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4813      	ldr	r0, [pc, #76]	; (8001fbc <visualisationSensorRecognized+0xdc>)
 8001f6e:	f001 f927 	bl	80031c0 <tftPrint>
		break;
 8001f72:	e010      	b.n	8001f96 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_UNKNOWN:
		tftPrint("Unknown sensor!", POS_SCREEN_LINE_3);
 8001f74:	2300      	movs	r3, #0
 8001f76:	2228      	movs	r2, #40	; 0x28
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4811      	ldr	r0, [pc, #68]	; (8001fc0 <visualisationSensorRecognized+0xe0>)
 8001f7c:	f001 f920 	bl	80031c0 <tftPrint>
		delayms(1000);
 8001f80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f84:	f000 fb6a 	bl	800265c <delayms>
		tftPrint("               ", POS_SCREEN_LINE_3);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2228      	movs	r2, #40	; 0x28
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <visualisationSensorRecognized+0xe4>)
 8001f90:	f001 f916 	bl	80031c0 <tftPrint>
		break;
 8001f94:	bf00      	nop
	}
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	0800b13c 	.word	0x0800b13c
 8001fa4:	0800b150 	.word	0x0800b150
 8001fa8:	0800b160 	.word	0x0800b160
 8001fac:	0800b174 	.word	0x0800b174
 8001fb0:	0800b184 	.word	0x0800b184
 8001fb4:	0800b198 	.word	0x0800b198
 8001fb8:	0800b1a8 	.word	0x0800b1a8
 8001fbc:	0800b1b8 	.word	0x0800b1b8
 8001fc0:	0800b1c8 	.word	0x0800b1c8
 8001fc4:	0800b1d8 	.word	0x0800b1d8

08001fc8 <visualisationI2CScanDone>:
 * @brief: 		 show i2c scan through all addresses is done
 *
 * @parameters:	 uint8_t i2cInitAttempts:	attempts left
 */
void visualisationI2CScanDone(uint8_t i2cInitAttempts)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
	tftPrint("No Sensor found   ", POS_SCREEN_LINE_2);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	221e      	movs	r2, #30
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <visualisationI2CScanDone+0x60>)
 8001fda:	f001 f8f1 	bl	80031c0 <tftPrint>

	// if there are attempts left, trying again, otherwise leave
	if(i2cInitAttempts > 1)
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d906      	bls.n	8001ff2 <visualisationI2CScanDone+0x2a>
	{
		tftPrint("trying again!     ", POS_SCREEN_LINE_3);
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2228      	movs	r2, #40	; 0x28
 8001fe8:	2104      	movs	r1, #4
 8001fea:	4810      	ldr	r0, [pc, #64]	; (800202c <visualisationI2CScanDone+0x64>)
 8001fec:	f001 f8e8 	bl	80031c0 <tftPrint>
 8001ff0:	e005      	b.n	8001ffe <visualisationI2CScanDone+0x36>
	}
	else
	{
		tftPrint("max attempts!     ", POS_SCREEN_LINE_3);
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2228      	movs	r2, #40	; 0x28
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <visualisationI2CScanDone+0x68>)
 8001ffa:	f001 f8e1 	bl	80031c0 <tftPrint>
	}

	// give chance to read
	delayms(3000);
 8001ffe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002002:	f000 fb2b 	bl	800265c <delayms>


	// restore view
	tftPrint("Address:        ",POS_SCREEN_LINE_2);
 8002006:	2300      	movs	r3, #0
 8002008:	221e      	movs	r2, #30
 800200a:	2104      	movs	r1, #4
 800200c:	4809      	ldr	r0, [pc, #36]	; (8002034 <visualisationI2CScanDone+0x6c>)
 800200e:	f001 f8d7 	bl	80031c0 <tftPrint>
	tftPrint("                ",POS_SCREEN_LINE_3);
 8002012:	2300      	movs	r3, #0
 8002014:	2228      	movs	r2, #40	; 0x28
 8002016:	2104      	movs	r1, #4
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <visualisationI2CScanDone+0x70>)
 800201a:	f001 f8d1 	bl	80031c0 <tftPrint>
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0800b1e8 	.word	0x0800b1e8
 800202c:	0800b1fc 	.word	0x0800b1fc
 8002030:	0800b210 	.word	0x0800b210
 8002034:	0800b224 	.word	0x0800b224
 8002038:	0800b238 	.word	0x0800b238

0800203c <visualisationSensorInit>:
 * @brief: 		 visualize sensor init step: running or done
 *
 * @parameters:	 VIS_SENSOR_INIT_t step:	running or done
 */
void visualisationSensorInit(VIS_SENSOR_INIT_t step)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
	switch(step)
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <visualisationSensorInit+0x16>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d007      	beq.n	8002060 <visualisationSensorInit+0x24>
		break;
	case SENSOR_INIT_DONE:
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
		break;
	}
}
 8002050:	e00d      	b.n	800206e <visualisationSensorInit+0x32>
		tftPrint("Sensor Init running", POS_SCREEN_LINE_3);
 8002052:	2300      	movs	r3, #0
 8002054:	2228      	movs	r2, #40	; 0x28
 8002056:	2104      	movs	r1, #4
 8002058:	4807      	ldr	r0, [pc, #28]	; (8002078 <visualisationSensorInit+0x3c>)
 800205a:	f001 f8b1 	bl	80031c0 <tftPrint>
		break;
 800205e:	e006      	b.n	800206e <visualisationSensorInit+0x32>
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
 8002060:	2300      	movs	r3, #0
 8002062:	2228      	movs	r2, #40	; 0x28
 8002064:	2104      	movs	r1, #4
 8002066:	4805      	ldr	r0, [pc, #20]	; (800207c <visualisationSensorInit+0x40>)
 8002068:	f001 f8aa 	bl	80031c0 <tftPrint>
		break;
 800206c:	bf00      	nop
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	0800b24c 	.word	0x0800b24c
 800207c:	0800b260 	.word	0x0800b260

08002080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002080:	480d      	ldr	r0, [pc, #52]	; (80020b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002082:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002084:	f004 fe80 	bl	8006d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002088:	480c      	ldr	r0, [pc, #48]	; (80020bc <LoopForever+0x6>)
  ldr r1, =_edata
 800208a:	490d      	ldr	r1, [pc, #52]	; (80020c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800208c:	4a0d      	ldr	r2, [pc, #52]	; (80020c4 <LoopForever+0xe>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020a0:	4c0a      	ldr	r4, [pc, #40]	; (80020cc <LoopForever+0x16>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ae:	f004 fefd 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020b2:	f7fe ff03 	bl	8000ebc <main>

080020b6 <LoopForever>:

LoopForever:
  b LoopForever
 80020b6:	e7fe      	b.n	80020b6 <LoopForever>
  ldr   r0, =_estack
 80020b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80020c4:	0800bd80 	.word	0x0800bd80
  ldr r2, =_sbss
 80020c8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80020cc:	200002b4 	.word	0x200002b4

080020d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton(const PuBio_t* pPuBioset)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	RoPuBu.PORT_AB = pPuBioset->PORT_AB;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a53      	ldr	r2, [pc, #332]	; (800226c <initRotaryPushButton+0x15c>)
 800211e:	6013      	str	r3, [r2, #0]
	RoPuBu.PinA = pPuBioset->PinA;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	791a      	ldrb	r2, [r3, #4]
 8002124:	4b51      	ldr	r3, [pc, #324]	; (800226c <initRotaryPushButton+0x15c>)
 8002126:	711a      	strb	r2, [r3, #4]
	RoPuBu.PinB = pPuBioset->PinB;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	79da      	ldrb	r2, [r3, #7]
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <initRotaryPushButton+0x15c>)
 800212e:	71da      	strb	r2, [r3, #7]
	RoPuBu.PORT_SW = pPuBioset->PORT_SW;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a4d      	ldr	r2, [pc, #308]	; (800226c <initRotaryPushButton+0x15c>)
 8002136:	6093      	str	r3, [r2, #8]
	RoPuBu.PinSW   = pPuBioset->PinSW;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b1a      	ldrb	r2, [r3, #12]
 800213c:	4b4b      	ldr	r3, [pc, #300]	; (800226c <initRotaryPushButton+0x15c>)
 800213e:	731a      	strb	r2, [r3, #12]
	RoPuBu.RotA_IRQ   = pPuBioset->RotA_IRQ;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	795a      	ldrb	r2, [r3, #5]
 8002144:	4b49      	ldr	r3, [pc, #292]	; (800226c <initRotaryPushButton+0x15c>)
 8002146:	715a      	strb	r2, [r3, #5]
	RoPuBu.RotA_IRQn   = pPuBioset->RotA_IRQn;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <initRotaryPushButton+0x15c>)
 8002150:	719a      	strb	r2, [r3, #6]
	RoPuBu.RotSW_IRQ = pPuBioset->RotSW_IRQ;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7b5a      	ldrb	r2, [r3, #13]
 8002156:	4b45      	ldr	r3, [pc, #276]	; (800226c <initRotaryPushButton+0x15c>)
 8002158:	735a      	strb	r2, [r3, #13]
	RoPuBu.RotSW_IRQn = pPuBioset->RotSW_IRQn;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8002160:	4b42      	ldr	r3, [pc, #264]	; (800226c <initRotaryPushButton+0x15c>)
 8002162:	739a      	strb	r2, [r3, #14]
	RoPuBu.ccw   = pPuBioset->ccw;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <initRotaryPushButton+0x15c>)
 800216c:	821a      	strh	r2, [r3, #16]

	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(RoPuBu.PORT_AB);
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <initRotaryPushButton+0x15c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f003 fbca 	bl	800590c <gpioInitPort>
	gpioInitPort(RoPuBu.PORT_SW);
 8002178:	4b3c      	ldr	r3, [pc, #240]	; (800226c <initRotaryPushButton+0x15c>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fbc5 	bl	800590c <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002182:	b672      	cpsid	i
}
 8002184:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <initRotaryPushButton+0x160>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a39      	ldr	r2, [pc, #228]	; (8002270 <initRotaryPushButton+0x160>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinA, INPUT);
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <initRotaryPushButton+0x15c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a35      	ldr	r2, [pc, #212]	; (800226c <initRotaryPushButton+0x15c>)
 8002198:	7911      	ldrb	r1, [r2, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	4618      	mov	r0, r3
 800219e:	f003 fc7b 	bl	8005a98 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinA, PULLUP);
 80021a2:	4b32      	ldr	r3, [pc, #200]	; (800226c <initRotaryPushButton+0x15c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a31      	ldr	r2, [pc, #196]	; (800226c <initRotaryPushButton+0x15c>)
 80021a8:	7911      	ldrb	r1, [r2, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	4618      	mov	r0, r3
 80021ae:	f003 fdc7 	bl	8005d40 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(RoPuBu.PORT_AB, RoPuBu.PinB, INPUT);
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <initRotaryPushButton+0x15c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a2d      	ldr	r2, [pc, #180]	; (800226c <initRotaryPushButton+0x15c>)
 80021b8:	79d1      	ldrb	r1, [r2, #7]
 80021ba:	2200      	movs	r2, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f003 fc6b 	bl	8005a98 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_AB, RoPuBu.PinB, PULLUP);
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <initRotaryPushButton+0x15c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <initRotaryPushButton+0x15c>)
 80021c8:	79d1      	ldrb	r1, [r2, #7]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4618      	mov	r0, r3
 80021ce:	f003 fdb7 	bl	8005d40 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(RoPuBu.PORT_SW, RoPuBu.PinSW, INPUT);
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <initRotaryPushButton+0x15c>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	4a25      	ldr	r2, [pc, #148]	; (800226c <initRotaryPushButton+0x15c>)
 80021d8:	7b11      	ldrb	r1, [r2, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f003 fc5b 	bl	8005a98 <gpioSelectPinMode>
	gpioSelectPushPullMode(RoPuBu.PORT_SW, RoPuBu.PinSW, PULLUP);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <initRotaryPushButton+0x15c>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	4a21      	ldr	r2, [pc, #132]	; (800226c <initRotaryPushButton+0x15c>)
 80021e8:	7b11      	ldrb	r1, [r2, #12]
 80021ea:	2201      	movs	r2, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f003 fda7 	bl	8005d40 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 80021f2:	f003 f935 	bl	8005460 <extiInit>
	extiConfigIrq(RoPuBu.PORT_AB, RoPuBu.PinA);	//EXTI on ROT A
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <initRotaryPushButton+0x15c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <initRotaryPushButton+0x15c>)
 80021fc:	7912      	ldrb	r2, [r2, #4]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f003 f949 	bl	8005498 <extiConfigIrq>
	extiConfigIrq(RoPuBu.PORT_SW, RoPuBu.PinSW);	//EXTI on PUSH BUTTON
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <initRotaryPushButton+0x15c>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <initRotaryPushButton+0x15c>)
 800220c:	7b12      	ldrb	r2, [r2, #12]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f003 f941 	bl	8005498 <extiConfigIrq>
	extiEnableIrq(RoPuBu.RotA_IRQ);
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <initRotaryPushButton+0x15c>)
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	4618      	mov	r0, r3
 800221c:	f003 f9f0 	bl	8005600 <extiEnableIrq>
	extiEnableIrq(RoPuBu.RotSW_IRQ);
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <initRotaryPushButton+0x15c>)
 8002222:	7b5b      	ldrb	r3, [r3, #13]
 8002224:	4618      	mov	r0, r3
 8002226:	f003 f9eb 	bl	8005600 <extiEnableIrq>
	extiSetTriggerEdge(RoPuBu.RotA_IRQ, FALLING_EDGE);
 800222a:	4b10      	ldr	r3, [pc, #64]	; (800226c <initRotaryPushButton+0x15c>)
 800222c:	795b      	ldrb	r3, [r3, #5]
 800222e:	2101      	movs	r1, #1
 8002230:	4618      	mov	r0, r3
 8002232:	f003 fa07 	bl	8005644 <extiSetTriggerEdge>
	extiSetTriggerEdge(RoPuBu.RotSW_IRQ, RISING_EDGE);
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <initRotaryPushButton+0x15c>)
 8002238:	7b5b      	ldrb	r3, [r3, #13]
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f003 fa01 	bl	8005644 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(RoPuBu.RotA_IRQn);
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <initRotaryPushButton+0x15c>)
 8002244:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff43 	bl	80020d4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(RoPuBu.RotSW_IRQn);
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <initRotaryPushButton+0x15c>)
 8002250:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff3d 	bl	80020d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800225a:	b662      	cpsie	i
}
 800225c:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <initRotaryPushButton+0x164>)
 8002260:	2201      	movs	r2, #1
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000254 	.word	0x20000254
 8002270:	40023800 	.word	0x40023800
 8002274:	2000026d 	.word	0x2000026d

08002278 <initLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initLED(const LEDio_t* pLEDset)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	LED.PORT = pLEDset->PORT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a24      	ldr	r2, [pc, #144]	; (8002318 <initLED+0xa0>)
 8002286:	6013      	str	r3, [r2, #0]
	LED.red = pLEDset->red;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	791a      	ldrb	r2, [r3, #4]
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <initLED+0xa0>)
 800228e:	711a      	strb	r2, [r3, #4]
	LED.green = pLEDset->green;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	795a      	ldrb	r2, [r3, #5]
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <initLED+0xa0>)
 8002296:	715a      	strb	r2, [r3, #5]
	LED.blue = pLEDset->blue;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	799a      	ldrb	r2, [r3, #6]
 800229c:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <initLED+0xa0>)
 800229e:	719a      	strb	r2, [r3, #6]
	/* Initialize GPIO ports for LED Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(LED.PORT);
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <initLED+0xa0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fb31 	bl	800590c <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.red, OUTPUT);
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <initLED+0xa0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <initLED+0xa0>)
 80022b0:	7911      	ldrb	r1, [r2, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fbef 	bl	8005a98 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.green, OUTPUT);
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <initLED+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a16      	ldr	r2, [pc, #88]	; (8002318 <initLED+0xa0>)
 80022c0:	7951      	ldrb	r1, [r2, #5]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f003 fbe7 	bl	8005a98 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED.PORT,LED.blue, OUTPUT);
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <initLED+0xa0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <initLED+0xa0>)
 80022d0:	7991      	ldrb	r1, [r2, #6]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f003 fbdf 	bl	8005a98 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED.PORT,LED.red);
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <initLED+0xa0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <initLED+0xa0>)
 80022e0:	7912      	ldrb	r2, [r2, #4]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fc22 	bl	8005b2e <gpioSetPin>
	gpioSetPin(LED.PORT,LED.green);
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <initLED+0xa0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <initLED+0xa0>)
 80022f0:	7952      	ldrb	r2, [r2, #5]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f003 fc1a 	bl	8005b2e <gpioSetPin>
	gpioSetPin(LED.PORT,LED.blue);
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <initLED+0xa0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a06      	ldr	r2, [pc, #24]	; (8002318 <initLED+0xa0>)
 8002300:	7992      	ldrb	r2, [r2, #6]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fc12 	bl	8005b2e <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <initLED+0xa4>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
}
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	2000024c 	.word	0x2000024c
 800231c:	2000026e 	.word	0x2000026e

08002320 <setLED>:
 *        		 component (red, green, blue).
 *
 * @args:		 LED_OUTPUT_t color:	 color for LED
 */
void setLED(LED_COLOR_t color)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
	if (initRotaryPushButtonLEDDone == false)
 800232a:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <setLED+0x140>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f083 0301 	eor.w	r3, r3, #1
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <setLED+0x1e>
	{
		initLED(&LEDpgb);
 8002338:	484a      	ldr	r0, [pc, #296]	; (8002464 <setLED+0x144>)
 800233a:	f7ff ff9d 	bl	8002278 <initLED>
	}

	switch(color)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d845      	bhi.n	80023d0 <setLED+0xb0>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <setLED+0x2c>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	08002377 	.word	0x08002377
 8002350:	08002365 	.word	0x08002365
 8002354:	08002389 	.word	0x08002389
 8002358:	080023bf 	.word	0x080023bf
 800235c:	080023ad 	.word	0x080023ad
 8002360:	0800239b 	.word	0x0800239b
	{
		/**
		 *  Set only RED LED */
		case RED_on:
			gpioSetPin(LED.PORT,LED.red);
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <setLED+0x148>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <setLED+0x148>)
 800236a:	7912      	ldrb	r2, [r2, #4]
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fbdd 	bl	8005b2e <gpioSetPin>
		break;
 8002374:	e06f      	b.n	8002456 <setLED+0x136>
		case RED_off:
			gpioResetPin(LED.PORT,LED.red);
 8002376:	4b3c      	ldr	r3, [pc, #240]	; (8002468 <setLED+0x148>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <setLED+0x148>)
 800237c:	7912      	ldrb	r2, [r2, #4]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fbff 	bl	8005b84 <gpioResetPin>
		break;
 8002386:	e066      	b.n	8002456 <setLED+0x136>

		/**
		 *  Set only LED GREEN */
		case GREEN_on:
			gpioResetPin(LED.PORT,LED.green);
 8002388:	4b37      	ldr	r3, [pc, #220]	; (8002468 <setLED+0x148>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a36      	ldr	r2, [pc, #216]	; (8002468 <setLED+0x148>)
 800238e:	7952      	ldrb	r2, [r2, #5]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fbf6 	bl	8005b84 <gpioResetPin>
		break;
 8002398:	e05d      	b.n	8002456 <setLED+0x136>
		case GREEN_off:
					gpioSetPin(LED.PORT,LED.green);
 800239a:	4b33      	ldr	r3, [pc, #204]	; (8002468 <setLED+0x148>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a32      	ldr	r2, [pc, #200]	; (8002468 <setLED+0x148>)
 80023a0:	7952      	ldrb	r2, [r2, #5]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fbc2 	bl	8005b2e <gpioSetPin>
				break;
 80023aa:	e054      	b.n	8002456 <setLED+0x136>
		/**
		 *  Set only LED BLUE */
		case BLUE_on:
			gpioResetPin(LED.PORT,LED.blue);
 80023ac:	4b2e      	ldr	r3, [pc, #184]	; (8002468 <setLED+0x148>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a2d      	ldr	r2, [pc, #180]	; (8002468 <setLED+0x148>)
 80023b2:	7992      	ldrb	r2, [r2, #6]
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f003 fbe4 	bl	8005b84 <gpioResetPin>
		break;
 80023bc:	e04b      	b.n	8002456 <setLED+0x136>
		case BLUE_off:
			gpioSetPin(LED.PORT,LED.blue);
 80023be:	4b2a      	ldr	r3, [pc, #168]	; (8002468 <setLED+0x148>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <setLED+0x148>)
 80023c4:	7992      	ldrb	r2, [r2, #6]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fbb0 	bl	8005b2e <gpioSetPin>
		break;
 80023ce:	e042      	b.n	8002456 <setLED+0x136>

		/**
		 *  Set LEDs color RGB- matrix mix */
		default:
		{
			if ((color & 0b000001) != 0 )
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <setLED+0xcc>
			{gpioResetPin(LED.PORT,LED.red);}
 80023da:	4b23      	ldr	r3, [pc, #140]	; (8002468 <setLED+0x148>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a22      	ldr	r2, [pc, #136]	; (8002468 <setLED+0x148>)
 80023e0:	7912      	ldrb	r2, [r2, #4]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f003 fbcd 	bl	8005b84 <gpioResetPin>
 80023ea:	e007      	b.n	80023fc <setLED+0xdc>
			else {gpioSetPin(LED.PORT,LED.red);	}
 80023ec:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <setLED+0x148>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a1d      	ldr	r2, [pc, #116]	; (8002468 <setLED+0x148>)
 80023f2:	7912      	ldrb	r2, [r2, #4]
 80023f4:	4611      	mov	r1, r2
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 fb99 	bl	8005b2e <gpioSetPin>
			if ((color & 0b000010) != 0 )
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d008      	beq.n	8002418 <setLED+0xf8>
			{gpioResetPin(LED.PORT,LED.green);}
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <setLED+0x148>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a17      	ldr	r2, [pc, #92]	; (8002468 <setLED+0x148>)
 800240c:	7952      	ldrb	r2, [r2, #5]
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fbb7 	bl	8005b84 <gpioResetPin>
 8002416:	e007      	b.n	8002428 <setLED+0x108>
			else {gpioSetPin(LED.PORT,LED.green);}
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <setLED+0x148>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <setLED+0x148>)
 800241e:	7952      	ldrb	r2, [r2, #5]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 fb83 	bl	8005b2e <gpioSetPin>
			if ((color & 0b000100) != 0 )
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b00      	cmp	r3, #0
 8002430:	d008      	beq.n	8002444 <setLED+0x124>
			{gpioResetPin(LED.PORT,LED.blue);}
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <setLED+0x148>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <setLED+0x148>)
 8002438:	7992      	ldrb	r2, [r2, #6]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f003 fba1 	bl	8005b84 <gpioResetPin>
			else {gpioSetPin(LED.PORT,LED.blue);}
		}
		break;
 8002442:	e007      	b.n	8002454 <setLED+0x134>
			else {gpioSetPin(LED.PORT,LED.blue);}
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <setLED+0x148>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <setLED+0x148>)
 800244a:	7992      	ldrb	r2, [r2, #6]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fb6d 	bl	8005b2e <gpioSetPin>
		break;
 8002454:	bf00      	nop
	}
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000026e 	.word	0x2000026e
 8002464:	0800b280 	.word	0x0800b280
 8002468:	2000024c 	.word	0x2000024c

0800246c <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <getRotaryPushButton+0x3c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <getRotaryPushButton+0x18>
	{
		//initRotaryPushButton();
		return ERROR_VALUE;
 8002480:	2301      	movs	r3, #1
 8002482:	e00a      	b.n	800249a <getRotaryPushButton+0x2e>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <getRotaryPushButton+0x40>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <getRotaryPushButton+0x40>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <getRotaryPushButton+0x2c>
	{
		pushButtonFlag = false;
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <getRotaryPushButton+0x40>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8002498:	687b      	ldr	r3, [r7, #4]
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	2000026d 	.word	0x2000026d
 80024ac:	2000026c 	.word	0x2000026c

080024b0 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <getRotaryPosition+0x24>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e001      	b.n	80024ca <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <getRotaryPosition+0x28>)
 80024c8:	681b      	ldr	r3, [r3, #0]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	2000026d 	.word	0x2000026d
 80024d8:	20000268 	.word	0x20000268

080024dc <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <setRotaryPosition+0x30>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e003      	b.n	80024fe <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <setRotaryPosition+0x34>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6013      	str	r3, [r2, #0]

	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	2000026d 	.word	0x2000026d
 8002510:	20000268 	.word	0x20000268

08002514 <modifPositionCount>:
/**
 *    @function	 helper for ROTARY_A_HANDLER interrupt
 *    @brief Checks ROT B and updates the position accordingly.
 */
void modifPositionCount(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(RoPuBu.PORT_AB, RoPuBu.PinB) == true)
 8002518:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <modifPositionCount+0x44>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a0e      	ldr	r2, [pc, #56]	; (8002558 <modifPositionCount+0x44>)
 800251e:	79d2      	ldrb	r2, [r2, #7]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fc69 	bl	8005dfa <gpioGetPinState>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <modifPositionCount+0x2e>
	{
		rotoryPosition += RoPuBu.ccw;
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <modifPositionCount+0x44>)
 8002530:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002534:	461a      	mov	r2, r3
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <modifPositionCount+0x48>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <modifPositionCount+0x48>)
 800253e:	6013      	str	r3, [r2, #0]
	}
	else
	{
		rotoryPosition -= RoPuBu.ccw;
	}
}
 8002540:	e007      	b.n	8002552 <modifPositionCount+0x3e>
		rotoryPosition -= RoPuBu.ccw;
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <modifPositionCount+0x48>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <modifPositionCount+0x44>)
 8002548:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	4a03      	ldr	r2, [pc, #12]	; (800255c <modifPositionCount+0x48>)
 8002550:	6013      	str	r3, [r2, #0]
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000254 	.word	0x20000254
 800255c:	20000268 	.word	0x20000268

08002560 <EXTI0_IRQHandler>:
 * @function	 EXTI0_IRQHandler
 * 				  *
 * @brief		 EXTI Interrupt Handler for Pin0
 */
void EXTI0_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
	modifPositionCount(); //! Check ROT B and update position
 8002564:	f7ff ffd6 	bl	8002514 <modifPositionCount>
	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & EXTI_PR_PR0)
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <EXTI0_IRQHandler+0x24>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <EXTI0_IRQHandler+0x20>
	{
		EXTI->PR |= EXTI_PR_PR0;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <EXTI0_IRQHandler+0x24>)
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	4a02      	ldr	r2, [pc, #8]	; (8002584 <EXTI0_IRQHandler+0x24>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6153      	str	r3, [r2, #20]
	}
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40013c00 	.word	0x40013c00

08002588 <EXTI15_10_IRQHandler>:
 * 				 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void EXTI15_10_IRQHandler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 800258c:	4b09      	ldr	r3, [pc, #36]	; (80025b4 <EXTI15_10_IRQHandler+0x2c>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & EXTI_PR_PR10)
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <EXTI15_10_IRQHandler+0x30>)
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= EXTI_PR_PR10;
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <EXTI15_10_IRQHandler+0x30>)
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <EXTI15_10_IRQHandler+0x30>)
 80025a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a8:	6153      	str	r3, [r2, #20]
	}
}
 80025aa:	bf00      	nop
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	2000026c 	.word	0x2000026c
 80025b8:	40013c00 	.word	0x40013c00

080025bc <_DC1>:
 */
static ST7735io_t *TFT ;
static SPI_TypeDef  *spi ;

void _DC1(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->DC_PORT, TFT->DC);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <_DC1+0x1c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <_DC1+0x1c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	7b1b      	ldrb	r3, [r3, #12]
 80025cc:	4619      	mov	r1, r3
 80025ce:	4610      	mov	r0, r2
 80025d0:	f003 faad 	bl	8005b2e <gpioSetPin>
}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000270 	.word	0x20000270

080025dc <_DC0>:
void _DC0(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->DC_PORT, TFT->DC);
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <_DC0+0x1c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <_DC0+0x1c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	7b1b      	ldrb	r3, [r3, #12]
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f003 fac8 	bl	8005b84 <gpioResetPin>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000270 	.word	0x20000270

080025fc <_RST1>:

void _RST1(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	gpioSetPin(TFT->RST_PORT, TFT->RST);
 8002600:	4b05      	ldr	r3, [pc, #20]	; (8002618 <_RST1+0x1c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <_RST1+0x1c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	7d1b      	ldrb	r3, [r3, #20]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f003 fa8d 	bl	8005b2e <gpioSetPin>
}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000270 	.word	0x20000270

0800261c <_RST0>:

void _RST0(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->RST_PORT, TFT->RST);
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <_RST0+0x1c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691a      	ldr	r2, [r3, #16]
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <_RST0+0x1c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	7d1b      	ldrb	r3, [r3, #20]
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f003 faa8 	bl	8005b84 <gpioResetPin>
}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000270 	.word	0x20000270

0800263c <_CS0>:
void _CS1(void)
{
	gpioSetPin(TFT->CS_PORT, TFT->CS);
}
void _CS0(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	gpioResetPin(TFT->CS_PORT, TFT->CS);
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <_CS0+0x1c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <_CS0+0x1c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	791b      	ldrb	r3, [r3, #4]
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f003 fa98 	bl	8005b84 <gpioResetPin>
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000270 	.word	0x20000270

0800265c <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	4803      	ldr	r0, [pc, #12]	; (8002674 <delayms+0x18>)
 8002668:	f004 fb6a 	bl	8006d40 <systickDelay>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	2000023c 	.word	0x2000023c

08002678 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, TFT->CS_PORT, TFT->CS, data);
 8002682:	4b07      	ldr	r3, [pc, #28]	; (80026a0 <tftSPISenddata+0x28>)
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <tftSPISenddata+0x2c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6819      	ldr	r1, [r3, #0]
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <tftSPISenddata+0x2c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	791a      	ldrb	r2, [r3, #4]
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f004 fa45 	bl	8006b22 <spiWriteByte>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000274 	.word	0x20000274
 80026a4:	20000270 	.word	0x20000270

080026a8 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
	_DC0();
 80026b2:	f7ff ff93 	bl	80025dc <_DC0>
    tftSPISenddata(cmd);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ffdd 	bl	8002678 <tftSPISenddata>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
	_DC1();
 80026d0:	f7ff ff74 	bl	80025bc <_DC1>
    tftSPISenddata(data);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff ffce 	bl	8002678 <tftSPISenddata>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <IOspiInit>:

// Function that initializes the hardware configuration
void IOspiInit(ST7735io_t *TFTset)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af04      	add	r7, sp, #16
 80026ea:	6078      	str	r0, [r7, #4]
	TFT = TFTset;
 80026ec:	4a45      	ldr	r2, [pc, #276]	; (8002804 <IOspiInit+0x120>)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6013      	str	r3, [r2, #0]
	spi = TFT->SPI;
 80026f2:	4b44      	ldr	r3, [pc, #272]	; (8002804 <IOspiInit+0x120>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4a43      	ldr	r2, [pc, #268]	; (8002808 <IOspiInit+0x124>)
 80026fa:	6013      	str	r3, [r2, #0]
    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(TFT->RST_PORT);
 80026fc:	4b41      	ldr	r3, [pc, #260]	; (8002804 <IOspiInit+0x120>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	4618      	mov	r0, r3
 8002704:	f003 f964 	bl	80059d0 <gpioSelectPort>
    gpioSelectPinMode(TFT->RST_PORT, TFT->RST, OUTPUT);		// RESET
 8002708:	4b3e      	ldr	r3, [pc, #248]	; (8002804 <IOspiInit+0x120>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6918      	ldr	r0, [r3, #16]
 800270e:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <IOspiInit+0x120>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	7d1b      	ldrb	r3, [r3, #20]
 8002714:	2201      	movs	r2, #1
 8002716:	4619      	mov	r1, r3
 8002718:	f003 f9be 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectPort(TFT->DC_PORT);
 800271c:	4b39      	ldr	r3, [pc, #228]	; (8002804 <IOspiInit+0x120>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 f954 	bl	80059d0 <gpioSelectPort>
    gpioSelectPinMode(TFT->DC_PORT, TFT->DC, OUTPUT);		// DATA/Command
 8002728:	4b36      	ldr	r3, [pc, #216]	; (8002804 <IOspiInit+0x120>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6898      	ldr	r0, [r3, #8]
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <IOspiInit+0x120>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	7b1b      	ldrb	r3, [r3, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	4619      	mov	r1, r3
 8002738:	f003 f9ae 	bl	8005a98 <gpioSelectPinMode>



    gpioInitPort(TFT->CS_PORT);
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <IOspiInit+0x120>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f003 f8e2 	bl	800590c <gpioInitPort>
    gpioSelectPinMode(TFT->CS_PORT,TFT->CS, OUTPUT);        // CS
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <IOspiInit+0x120>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <IOspiInit+0x120>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	4619      	mov	r1, r3
 8002758:	f003 f99e 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectPushPullMode(TFT->CS_PORT, TFT->CS, PULLUP);
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <IOspiInit+0x120>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	4b28      	ldr	r3, [pc, #160]	; (8002804 <IOspiInit+0x120>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	4619      	mov	r1, r3
 800276c:	f003 fae8 	bl	8005d40 <gpioSelectPushPullMode>

    gpioInitPort(TFT->SPI_PORT);
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <IOspiInit+0x120>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f8c8 	bl	800590c <gpioInitPort>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->CLK, ALTFUNC);	// SPI1 Clock
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <IOspiInit+0x120>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	69d8      	ldr	r0, [r3, #28]
 8002782:	4b20      	ldr	r3, [pc, #128]	; (8002804 <IOspiInit+0x120>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800278a:	2202      	movs	r2, #2
 800278c:	4619      	mov	r1, r3
 800278e:	f003 f983 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->CLK, AF5);
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <IOspiInit+0x120>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69d8      	ldr	r0, [r3, #28]
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <IOspiInit+0x120>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027a0:	2205      	movs	r2, #5
 80027a2:	4619      	mov	r1, r3
 80027a4:	f003 fa1a 	bl	8005bdc <gpioSelectAltFunc>
    gpioSelectPinMode(TFT->SPI_PORT, TFT->MOSI, ALTFUNC);	// SPI1 MOSI
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <IOspiInit+0x120>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69d8      	ldr	r0, [r3, #28]
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <IOspiInit+0x120>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b6:	2202      	movs	r2, #2
 80027b8:	4619      	mov	r1, r3
 80027ba:	f003 f96d 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectAltFunc(TFT->SPI_PORT, TFT->MOSI, AF5);
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <IOspiInit+0x120>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	69d8      	ldr	r0, [r3, #28]
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <IOspiInit+0x120>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	2205      	movs	r2, #5
 80027ce:	4619      	mov	r1, r3
 80027d0:	f003 fa04 	bl	8005bdc <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <IOspiInit+0x124>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 f947 	bl	8006a6c <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <IOspiInit+0x124>)
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9303      	str	r3, [sp, #12]
 80027e6:	2300      	movs	r3, #0
 80027e8:	9302      	str	r3, [sp, #8]
 80027ea:	2300      	movs	r3, #0
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	2301      	movs	r3, #1
 80027f4:	2200      	movs	r2, #0
 80027f6:	2103      	movs	r1, #3
 80027f8:	f004 f84a 	bl	8006890 <spiInitSPI>

}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000270 	.word	0x20000270
 8002808:	20000274 	.word	0x20000274

0800280c <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 800281e:	e033      	b.n	8002888 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	1c5a      	adds	r2, r3, #1
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff3d 	bl	80026a8 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002838:	7bbb      	ldrb	r3, [r7, #14]
 800283a:	b29b      	uxth	r3, r3
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002848:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 800284a:	e006      	b.n	800285a <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff36 	bl	80026c6 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 800285a:	7bbb      	ldrb	r3, [r7, #14]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	73ba      	strb	r2, [r7, #14]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f3      	bne.n	800284c <commandList+0x40>
		}

		if(ms) {
 8002864:	89bb      	ldrh	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00e      	beq.n	8002888 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	2bff      	cmp	r3, #255	; 0xff
 8002878:	d102      	bne.n	8002880 <commandList+0x74>
 800287a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800287e:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8002880:	89bb      	ldrh	r3, [r7, #12]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff feea 	bl	800265c <delayms>
	while(numCommands--) {                 // For each command...
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	1e5a      	subs	r2, r3, #1
 800288c:	73fa      	strb	r2, [r7, #15]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1c6      	bne.n	8002820 <commandList+0x14>
		}
	}
}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	_CS0();
 80028a4:	f7ff feca 	bl	800263c <_CS0>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	_RST0();
 80028a8:	f7ff feb8 	bl	800261c <_RST0>
	delayms(50);  //default value 50
 80028ac:	2032      	movs	r0, #50	; 0x32
 80028ae:	f7ff fed5 	bl	800265c <delayms>
	_RST1();
 80028b2:	f7ff fea3 	bl	80025fc <_RST1>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <commonInit+0x26>
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffa5 	bl	800280c <commandList>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80028d6:	2032      	movs	r0, #50	; 0x32
 80028d8:	f7ff fec0 	bl	800265c <delayms>
	commonInit(Rcmd1);
 80028dc:	4811      	ldr	r0, [pc, #68]	; (8002924 <tftInitR+0x58>)
 80028de:	f7ff ffdd 	bl	800289c <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80028e8:	480f      	ldr	r0, [pc, #60]	; (8002928 <tftInitR+0x5c>)
 80028ea:	f7ff ff8f 	bl	800280c <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80028ee:	4b0f      	ldr	r3, [pc, #60]	; (800292c <tftInitR+0x60>)
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80028f4:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <tftInitR+0x64>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	e002      	b.n	8002902 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <tftInitR+0x68>)
 80028fe:	f7ff ff85 	bl	800280c <commandList>
	}
	commandList(Rcmd3);
 8002902:	480d      	ldr	r0, [pc, #52]	; (8002938 <tftInitR+0x6c>)
 8002904:	f7ff ff82 	bl	800280c <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d105      	bne.n	800291a <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 800290e:	2036      	movs	r0, #54	; 0x36
 8002910:	f7ff feca 	bl	80026a8 <tftSendCmd>
		tftSendData(0xC0);
 8002914:	20c0      	movs	r0, #192	; 0xc0
 8002916:	f7ff fed6 	bl	80026c6 <tftSendData>
	}

	//  tabcolor = options;
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	0800b714 	.word	0x0800b714
 8002928:	0800b750 	.word	0x0800b750
 800292c:	20000278 	.word	0x20000278
 8002930:	2000027c 	.word	0x2000027c
 8002934:	0800b760 	.word	0x0800b760
 8002938:	0800b770 	.word	0x0800b770

0800293c <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4604      	mov	r4, r0
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4623      	mov	r3, r4
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	4603      	mov	r3, r0
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	460b      	mov	r3, r1
 8002954:	717b      	strb	r3, [r7, #5]
 8002956:	4613      	mov	r3, r2
 8002958:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 800295a:	202a      	movs	r0, #42	; 0x2a
 800295c:	f7ff fea4 	bl	80026a8 <tftSendCmd>
	tftSendData(0x00);
 8002960:	2000      	movs	r0, #0
 8002962:	f7ff feb0 	bl	80026c6 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <tftSetAddrWindow+0x98>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4413      	add	r3, r2
 8002970:	b2db      	uxtb	r3, r3
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fea7 	bl	80026c6 <tftSendData>
	tftSendData(0x00);
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fea4 	bl	80026c6 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <tftSetAddrWindow+0x98>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	797b      	ldrb	r3, [r7, #5]
 8002986:	4413      	add	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe9b 	bl	80026c6 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002990:	202b      	movs	r0, #43	; 0x2b
 8002992:	f7ff fe89 	bl	80026a8 <tftSendCmd>
	tftSendData(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7ff fe95 	bl	80026c6 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 800299c:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <tftSetAddrWindow+0x9c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	79bb      	ldrb	r3, [r7, #6]
 80029a4:	4413      	add	r3, r2
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe8c 	bl	80026c6 <tftSendData>
	tftSendData(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7ff fe89 	bl	80026c6 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 80029b4:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <tftSetAddrWindow+0x9c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	793b      	ldrb	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fe80 	bl	80026c6 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 80029c6:	202c      	movs	r0, #44	; 0x2c
 80029c8:	f7ff fe6e 	bl	80026a8 <tftSendCmd>
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	20000278 	.word	0x20000278
 80029d8:	2000027c 	.word	0x2000027c

080029dc <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	80fb      	strh	r3, [r7, #6]
	_DC1();
 80029e6:	f7ff fde9 	bl	80025bc <_DC1>
	putpix(color);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	0a1b      	lsrs	r3, r3, #8
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fe40 	bl	8002678 <tftSPISenddata>
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe3b 	bl	8002678 <tftSPISenddata>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002a0c:	b590      	push	{r4, r7, lr}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4604      	mov	r4, r0
 8002a14:	4608      	mov	r0, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4623      	mov	r3, r4
 8002a1c:	80fb      	strh	r3, [r7, #6]
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80bb      	strh	r3, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	807b      	strh	r3, [r7, #2]
 8002a26:	4613      	mov	r3, r2
 8002a28:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8002a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a2e:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <tftFillRect+0xfc>)
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	4293      	cmp	r3, r2
 8002a34:	da63      	bge.n	8002afe <tftFillRect+0xf2>
 8002a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <tftFillRect+0x100>)
 8002a3c:	8812      	ldrh	r2, [r2, #0]
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	da5d      	bge.n	8002afe <tftFillRect+0xf2>
		{
		return;
		}

	if((x + w - 1) >= width)
 8002a42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <tftFillRect+0xfc>)
 8002a4e:	8812      	ldrh	r2, [r2, #0]
 8002a50:	4293      	cmp	r3, r2
 8002a52:	dd05      	ble.n	8002a60 <tftFillRect+0x54>
		{
		w = width  - x;
 8002a54:	4b2c      	ldr	r3, [pc, #176]	; (8002b08 <tftFillRect+0xfc>)
 8002a56:	881a      	ldrh	r2, [r3, #0]
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8002a60:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a68:	4413      	add	r3, r2
 8002a6a:	4a28      	ldr	r2, [pc, #160]	; (8002b0c <tftFillRect+0x100>)
 8002a6c:	8812      	ldrh	r2, [r2, #0]
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	dd05      	ble.n	8002a7e <tftFillRect+0x72>
		{
		h = height - y;
 8002a72:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <tftFillRect+0x100>)
 8002a74:	881a      	ldrh	r2, [r3, #0]
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	b2d8      	uxtb	r0, r3
 8002a82:	88bb      	ldrh	r3, [r7, #4]
 8002a84:	b2d9      	uxtb	r1, r3
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b2dc      	uxtb	r4, r3
 8002a96:	88bb      	ldrh	r3, [r7, #4]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	883b      	ldrh	r3, [r7, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	f7ff ff48 	bl	800293c <tftSetAddrWindow>

	_DC1();
 8002aac:	f7ff fd86 	bl	80025bc <_DC1>
	for(y=h; y>0; y--)
 8002ab0:	883b      	ldrh	r3, [r7, #0]
 8002ab2:	80bb      	strh	r3, [r7, #4]
 8002ab4:	e01e      	b.n	8002af4 <tftFillRect+0xe8>
	{
		for(x=w; x>0; x--)
 8002ab6:	887b      	ldrh	r3, [r7, #2]
 8002ab8:	80fb      	strh	r3, [r7, #6]
 8002aba:	e011      	b.n	8002ae0 <tftFillRect+0xd4>
		{
			putpix(color);
 8002abc:	8b3b      	ldrh	r3, [r7, #24]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fdd7 	bl	8002678 <tftSPISenddata>
 8002aca:	8b3b      	ldrh	r3, [r7, #24]
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fdd2 	bl	8002678 <tftSPISenddata>
		for(x=w; x>0; x--)
 8002ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	80fb      	strh	r3, [r7, #6]
 8002ae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	dce9      	bgt.n	8002abc <tftFillRect+0xb0>
	for(y=h; y>0; y--)
 8002ae8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	80bb      	strh	r3, [r7, #4]
 8002af4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	dcdc      	bgt.n	8002ab6 <tftFillRect+0xaa>
 8002afc:	e000      	b.n	8002b00 <tftFillRect+0xf4>
		return;
 8002afe:	bf00      	nop
		}
	}
}
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000000a 	.word	0x2000000a
 8002b0c:	2000000c 	.word	0x2000000c

08002b10 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4623      	mov	r3, r4
 8002b20:	80fb      	strh	r3, [r7, #6]
 8002b22:	4603      	mov	r3, r0
 8002b24:	80bb      	strh	r3, [r7, #4]
 8002b26:	460b      	mov	r3, r1
 8002b28:	807b      	strh	r3, [r7, #2]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8002b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b32:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <tftDrawFastVLine+0xb0>)
 8002b34:	8812      	ldrh	r2, [r2, #0]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	da3d      	bge.n	8002bb6 <tftDrawFastVLine+0xa6>
 8002b3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002b3e:	4a21      	ldr	r2, [pc, #132]	; (8002bc4 <tftDrawFastVLine+0xb4>)
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	4293      	cmp	r3, r2
 8002b44:	da37      	bge.n	8002bb6 <tftDrawFastVLine+0xa6>
	if((y+h-1) >= height) h = height-y;
 8002b46:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <tftDrawFastVLine+0xb4>)
 8002b52:	8812      	ldrh	r2, [r2, #0]
 8002b54:	4293      	cmp	r3, r2
 8002b56:	dd05      	ble.n	8002b64 <tftDrawFastVLine+0x54>
 8002b58:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <tftDrawFastVLine+0xb4>)
 8002b5a:	881a      	ldrh	r2, [r3, #0]
 8002b5c:	88bb      	ldrh	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	88bb      	ldrh	r3, [r7, #4]
 8002b6a:	b2d9      	uxtb	r1, r3
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	b2dc      	uxtb	r4, r3
 8002b70:	88bb      	ldrh	r3, [r7, #4]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4622      	mov	r2, r4
 8002b82:	f7ff fedb 	bl	800293c <tftSetAddrWindow>

	_DC1();
 8002b86:	f7ff fd19 	bl	80025bc <_DC1>
	while (h--) {
 8002b8a:	e00b      	b.n	8002ba4 <tftDrawFastVLine+0x94>
		putpix(color);
 8002b8c:	883b      	ldrh	r3, [r7, #0]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fd6f 	bl	8002678 <tftSPISenddata>
 8002b9a:	883b      	ldrh	r3, [r7, #0]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fd6a 	bl	8002678 <tftSPISenddata>
	while (h--) {
 8002ba4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	3a01      	subs	r2, #1
 8002bac:	b292      	uxth	r2, r2
 8002bae:	807a      	strh	r2, [r7, #2]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1eb      	bne.n	8002b8c <tftDrawFastVLine+0x7c>
 8002bb4:	e000      	b.n	8002bb8 <tftDrawFastVLine+0xa8>
	if((x >= width) || (y >= height)) return;
 8002bb6:	bf00      	nop
	}
}
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	2000000a 	.word	0x2000000a
 8002bc4:	2000000c 	.word	0x2000000c

08002bc8 <tftDrawFastHLine>:
 * draws horizontal line
 * x an y are starting point
 * w is width
 */
void tftDrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4604      	mov	r4, r0
 8002bd0:	4608      	mov	r0, r1
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4623      	mov	r3, r4
 8002bd8:	80fb      	strh	r3, [r7, #6]
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80bb      	strh	r3, [r7, #4]
 8002bde:	460b      	mov	r3, r1
 8002be0:	807b      	strh	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height))
 8002be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bea:	4a22      	ldr	r2, [pc, #136]	; (8002c74 <tftDrawFastHLine+0xac>)
 8002bec:	8812      	ldrh	r2, [r2, #0]
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	da3c      	bge.n	8002c6c <tftDrawFastHLine+0xa4>
 8002bf2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002bf6:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <tftDrawFastHLine+0xb0>)
 8002bf8:	8812      	ldrh	r2, [r2, #0]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	da36      	bge.n	8002c6c <tftDrawFastHLine+0xa4>
		{
		return;
		}

	if((x+w-1) >= width)
 8002bfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002c02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a1a      	ldr	r2, [pc, #104]	; (8002c74 <tftDrawFastHLine+0xac>)
 8002c0a:	8812      	ldrh	r2, [r2, #0]
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	dd05      	ble.n	8002c1c <tftDrawFastHLine+0x54>
		{
		w = width-x;
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <tftDrawFastHLine+0xac>)
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	88fb      	ldrh	r3, [r7, #6]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	807b      	strh	r3, [r7, #2]
		}

	tftSetAddrWindow(x, y, x+w-1, y);
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	b2d8      	uxtb	r0, r3
 8002c20:	88bb      	ldrh	r3, [r7, #4]
 8002c22:	b2d9      	uxtb	r1, r3
 8002c24:	88fb      	ldrh	r3, [r7, #6]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	88bb      	ldrh	r3, [r7, #4]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f7ff fe80 	bl	800293c <tftSetAddrWindow>

	_DC1();
 8002c3c:	f7ff fcbe 	bl	80025bc <_DC1>
	while (w--)
 8002c40:	e00b      	b.n	8002c5a <tftDrawFastHLine+0x92>
	{
		putpix(color);
 8002c42:	883b      	ldrh	r3, [r7, #0]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fd14 	bl	8002678 <tftSPISenddata>
 8002c50:	883b      	ldrh	r3, [r7, #0]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fd0f 	bl	8002678 <tftSPISenddata>
	while (w--)
 8002c5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	3a01      	subs	r2, #1
 8002c62:	b292      	uxth	r2, r2
 8002c64:	807a      	strh	r2, [r7, #2]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1eb      	bne.n	8002c42 <tftDrawFastHLine+0x7a>
 8002c6a:	e000      	b.n	8002c6e <tftDrawFastHLine+0xa6>
		return;
 8002c6c:	bf00      	nop
	}
}
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd90      	pop	{r4, r7, pc}
 8002c74:	2000000a 	.word	0x2000000a
 8002c78:	2000000c 	.word	0x2000000c

08002c7c <tftDrawRect>:
 * x2 is end parameter x
 * y1 is start parameter y
 * y2 is end parameter y
*/
void tftDrawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4623      	mov	r3, r4
 8002c8c:	71fb      	strb	r3, [r7, #7]
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71bb      	strb	r3, [r7, #6]
 8002c92:	460b      	mov	r3, r1
 8002c94:	717b      	strb	r3, [r7, #5]
 8002c96:	4613      	mov	r3, r2
 8002c98:	713b      	strb	r3, [r7, #4]
	tftDrawFastHLine(x1,y1,x2-x1, color);
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	b218      	sxth	r0, r3
 8002c9e:	79bb      	ldrb	r3, [r7, #6]
 8002ca0:	b219      	sxth	r1, r3
 8002ca2:	797b      	ldrb	r3, [r7, #5]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	8b3b      	ldrh	r3, [r7, #24]
 8002cb2:	f7ff ff89 	bl	8002bc8 <tftDrawFastHLine>
	tftDrawFastVLine(x2,y1,y2-y1, color);
 8002cb6:	797b      	ldrb	r3, [r7, #5]
 8002cb8:	b218      	sxth	r0, r3
 8002cba:	79bb      	ldrb	r3, [r7, #6]
 8002cbc:	b219      	sxth	r1, r3
 8002cbe:	793b      	ldrb	r3, [r7, #4]
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	79bb      	ldrb	r3, [r7, #6]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	8b3b      	ldrh	r3, [r7, #24]
 8002cce:	f7ff ff1f 	bl	8002b10 <tftDrawFastVLine>
	tftDrawFastHLine(x1,y2,x2-x1, color);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	b218      	sxth	r0, r3
 8002cd6:	793b      	ldrb	r3, [r7, #4]
 8002cd8:	b219      	sxth	r1, r3
 8002cda:	797b      	ldrb	r3, [r7, #5]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b21a      	sxth	r2, r3
 8002ce8:	8b3b      	ldrh	r3, [r7, #24]
 8002cea:	f7ff ff6d 	bl	8002bc8 <tftDrawFastHLine>
	tftDrawFastVLine(x1,y1,y2-y1, color);
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	b218      	sxth	r0, r3
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	b219      	sxth	r1, r3
 8002cf6:	793b      	ldrb	r3, [r7, #4]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b21a      	sxth	r2, r3
 8002d04:	8b3b      	ldrh	r3, [r7, #24]
 8002d06:	f7ff ff03 	bl	8002b10 <tftDrawFastVLine>
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}
	...

08002d14 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8002d1c:	4a0d      	ldr	r2, [pc, #52]	; (8002d54 <tftSetFont+0x40>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <tftSetFont+0x40>)
 8002d28:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	785a      	ldrb	r2, [r3, #1]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <tftSetFont+0x40>)
 8002d30:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	789a      	ldrb	r2, [r3, #2]
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <tftSetFont+0x40>)
 8002d38:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3303      	adds	r3, #3
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <tftSetFont+0x40>)
 8002d44:	811a      	strh	r2, [r3, #8]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000284 	.word	0x20000284

08002d58 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002d66:	4b74      	ldr	r3, [pc, #464]	; (8002f38 <tftPrintChar+0x1e0>)
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	2b07      	cmp	r3, #7
 8002d6c:	d803      	bhi.n	8002d76 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <tftPrintChar+0x1e0>)
 8002d70:	791b      	ldrb	r3, [r3, #4]
 8002d72:	77bb      	strb	r3, [r7, #30]
 8002d74:	e003      	b.n	8002d7e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002d76:	4b70      	ldr	r3, [pc, #448]	; (8002f38 <tftPrintChar+0x1e0>)
 8002d78:	791b      	ldrb	r3, [r3, #4]
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8002d7e:	4b6f      	ldr	r3, [pc, #444]	; (8002f3c <tftPrintChar+0x1e4>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d15e      	bne.n	8002e44 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	b2d8      	uxtb	r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	b2d9      	uxtb	r1, r3
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <tftPrintChar+0x1e0>)
 8002d90:	791a      	ldrb	r2, [r3, #4]
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b2dc      	uxtb	r4, r3
 8002d9e:	4b66      	ldr	r3, [pc, #408]	; (8002f38 <tftPrintChar+0x1e0>)
 8002da0:	795a      	ldrb	r2, [r3, #5]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	4622      	mov	r2, r4
 8002db0:	f7ff fdc4 	bl	800293c <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	4a60      	ldr	r2, [pc, #384]	; (8002f38 <tftPrintChar+0x1e0>)
 8002db8:	7992      	ldrb	r2, [r2, #6]
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	7fbb      	ldrb	r3, [r7, #30]
 8002dc0:	b299      	uxth	r1, r3
 8002dc2:	4b5d      	ldr	r3, [pc, #372]	; (8002f38 <tftPrintChar+0x1e0>)
 8002dc4:	795b      	ldrb	r3, [r3, #5]
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	fb11 f303 	smulbb	r3, r1, r3
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	fb12 f303 	smulbb	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	83bb      	strh	r3, [r7, #28]
 8002ddc:	e029      	b.n	8002e32 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8002dde:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <tftPrintChar+0x1e0>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	8b7b      	ldrh	r3, [r7, #26]
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e017      	b.n	8002e20 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002df0:	7cfa      	ldrb	r2, [r7, #19]
 8002df2:	7ffb      	ldrb	r3, [r7, #31]
 8002df4:	f1c3 0307 	rsb	r3, r3, #7
 8002df8:	fa42 f303 	asr.w	r3, r2, r3
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002e04:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <tftPrintChar+0x1e8>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fde7 	bl	80029dc <tftPushColor>
 8002e0e:	e004      	b.n	8002e1a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <tftPrintChar+0x1ec>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fde1 	bl	80029dc <tftPushColor>
			for(i=0;i<8;i++)
 8002e1a:	7ffb      	ldrb	r3, [r7, #31]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d9e4      	bls.n	8002df0 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002e26:	8b7b      	ldrh	r3, [r7, #26]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8002e2c:	8bbb      	ldrh	r3, [r7, #28]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	83bb      	strh	r3, [r7, #28]
 8002e32:	8bba      	ldrh	r2, [r7, #28]
 8002e34:	7fbb      	ldrb	r3, [r7, #30]
 8002e36:	4940      	ldr	r1, [pc, #256]	; (8002f38 <tftPrintChar+0x1e0>)
 8002e38:	7949      	ldrb	r1, [r1, #5]
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dbcd      	blt.n	8002dde <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002e42:	e075      	b.n	8002f30 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	4a3c      	ldr	r2, [pc, #240]	; (8002f38 <tftPrintChar+0x1e0>)
 8002e48:	7992      	ldrb	r2, [r2, #6]
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	7fbb      	ldrb	r3, [r7, #30]
 8002e50:	b299      	uxth	r1, r3
 8002e52:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <tftPrintChar+0x1e0>)
 8002e54:	795b      	ldrb	r3, [r3, #5]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	fb11 f303 	smulbb	r3, r1, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	fb12 f303 	smulbb	r3, r2, r3
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3304      	adds	r3, #4
 8002e66:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002e68:	2300      	movs	r3, #0
 8002e6a:	83bb      	strh	r3, [r7, #28]
 8002e6c:	e05a      	b.n	8002f24 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e04b      	b.n	8002f0c <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <tftPrintChar+0x1e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	8b79      	ldrh	r1, [r7, #26]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002e84:	2300      	movs	r3, #0
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e03a      	b.n	8002f00 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	4413      	add	r3, r2
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b2d8      	uxtb	r0, r3
 8002ea0:	8bbb      	ldrh	r3, [r7, #28]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	b2d9      	uxtb	r1, r3
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	b2da      	uxtb	r2, r3
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2dc      	uxtb	r4, r3
 8002ec6:	8bbb      	ldrh	r3, [r7, #28]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4622      	mov	r2, r4
 8002ed8:	f7ff fd30 	bl	800293c <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8002edc:	7cfa      	ldrb	r2, [r7, #19]
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	f1c3 0307 	rsb	r3, r3, #7
 8002ee4:	fa42 f303 	asr.w	r3, r2, r3
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <tftPrintChar+0x1e8>)
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fd71 	bl	80029dc <tftPushColor>
				for(i=0;i<8;i++)
 8002efa:	7ffb      	ldrb	r3, [r7, #31]
 8002efc:	3301      	adds	r3, #1
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d9c1      	bls.n	8002e8a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	7fbb      	ldrb	r3, [r7, #30]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbaf      	blt.n	8002e74 <tftPrintChar+0x11c>
			temp+=(fz);
 8002f14:	7fbb      	ldrb	r3, [r7, #30]
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	8b7b      	ldrh	r3, [r7, #26]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002f1e:	8bbb      	ldrh	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	83bb      	strh	r3, [r7, #28]
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <tftPrintChar+0x1e0>)
 8002f26:	795b      	ldrb	r3, [r3, #5]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	8bba      	ldrh	r2, [r7, #28]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d39e      	bcc.n	8002e6e <tftPrintChar+0x116>
}
 8002f30:	bf00      	nop
 8002f32:	3724      	adds	r7, #36	; 0x24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd90      	pop	{r4, r7, pc}
 8002f38:	20000284 	.word	0x20000284
 8002f3c:	20000290 	.word	0x20000290
 8002f40:	20000034 	.word	0x20000034
 8002f44:	20000292 	.word	0x20000292

08002f48 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b08e      	sub	sp, #56	; 0x38
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002f5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f5c:	f7fd faea 	bl	8000534 <__aeabi_i2d>
 8002f60:	a395      	add	r3, pc, #596	; (adr r3, 80031b8 <tftRotateChar+0x270>)
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	f7fd fb4f 	bl	8000608 <__aeabi_dmul>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002f72:	4b8d      	ldr	r3, [pc, #564]	; (80031a8 <tftRotateChar+0x260>)
 8002f74:	791b      	ldrb	r3, [r3, #4]
 8002f76:	2b07      	cmp	r3, #7
 8002f78:	d804      	bhi.n	8002f84 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <tftRotateChar+0x260>)
 8002f7c:	791b      	ldrb	r3, [r3, #4]
 8002f7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002f82:	e017      	b.n	8002fb4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002f84:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <tftRotateChar+0x260>)
 8002f86:	791b      	ldrb	r3, [r3, #4]
 8002f88:	08db      	lsrs	r3, r3, #3
 8002f8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	4a85      	ldr	r2, [pc, #532]	; (80031a8 <tftRotateChar+0x260>)
 8002f92:	7992      	ldrb	r2, [r2, #6]
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f9c:	b299      	uxth	r1, r3
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <tftRotateChar+0x260>)
 8002fa0:	795b      	ldrb	r3, [r3, #5]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	fb11 f303 	smulbb	r3, r1, r3
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	fb12 f303 	smulbb	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002fba:	e0e6      	b.n	800318a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc0:	e0d2      	b.n	8003168 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8002fc2:	4b79      	ldr	r3, [pc, #484]	; (80031a8 <tftRotateChar+0x260>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fca:	440a      	add	r2, r1
 8002fcc:	4413      	add	r3, r2
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002fd8:	e0be      	b.n	8003158 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8002fda:	68b8      	ldr	r0, [r7, #8]
 8002fdc:	f7fd faaa 	bl	8000534 <__aeabi_i2d>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	441a      	add	r2, r3
 8002fee:	4b6e      	ldr	r3, [pc, #440]	; (80031a8 <tftRotateChar+0x260>)
 8002ff0:	791b      	ldrb	r3, [r3, #4]
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fa99 	bl	8000534 <__aeabi_i2d>
 8003002:	4680      	mov	r8, r0
 8003004:	4689      	mov	r9, r1
 8003006:	ed97 0b08 	vldr	d0, [r7, #32]
 800300a:	f006 fe5d 	bl	8009cc8 <cos>
 800300e:	ec53 2b10 	vmov	r2, r3, d0
 8003012:	4640      	mov	r0, r8
 8003014:	4649      	mov	r1, r9
 8003016:	f7fd faf7 	bl	8000608 <__aeabi_dmul>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4692      	mov	sl, r2
 8003020:	469b      	mov	fp, r3
 8003022:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003026:	4618      	mov	r0, r3
 8003028:	f7fd fa84 	bl	8000534 <__aeabi_i2d>
 800302c:	4680      	mov	r8, r0
 800302e:	4689      	mov	r9, r1
 8003030:	ed97 0b08 	vldr	d0, [r7, #32]
 8003034:	f006 fe9c 	bl	8009d70 <sin>
 8003038:	ec53 2b10 	vmov	r2, r3, d0
 800303c:	4640      	mov	r0, r8
 800303e:	4649      	mov	r1, r9
 8003040:	f7fd fae2 	bl	8000608 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4650      	mov	r0, sl
 800304a:	4659      	mov	r1, fp
 800304c:	f7fd f924 	bl	8000298 <__aeabi_dsub>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4620      	mov	r0, r4
 8003056:	4629      	mov	r1, r5
 8003058:	f7fd f920 	bl	800029c <__adddf3>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fd80 	bl	8000b68 <__aeabi_d2iz>
 8003068:	4603      	mov	r3, r0
 800306a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7fd fa61 	bl	8000534 <__aeabi_i2d>
 8003072:	4604      	mov	r4, r0
 8003074:	460d      	mov	r5, r1
 8003076:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa5a 	bl	8000534 <__aeabi_i2d>
 8003080:	4680      	mov	r8, r0
 8003082:	4689      	mov	r9, r1
 8003084:	ed97 0b08 	vldr	d0, [r7, #32]
 8003088:	f006 fe1e 	bl	8009cc8 <cos>
 800308c:	ec53 2b10 	vmov	r2, r3, d0
 8003090:	4640      	mov	r0, r8
 8003092:	4649      	mov	r1, r9
 8003094:	f7fd fab8 	bl	8000608 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4692      	mov	sl, r2
 800309e:	469b      	mov	fp, r3
 80030a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80030a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	441a      	add	r2, r3
 80030aa:	4b3f      	ldr	r3, [pc, #252]	; (80031a8 <tftRotateChar+0x260>)
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	4619      	mov	r1, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fa3b 	bl	8000534 <__aeabi_i2d>
 80030be:	4680      	mov	r8, r0
 80030c0:	4689      	mov	r9, r1
 80030c2:	ed97 0b08 	vldr	d0, [r7, #32]
 80030c6:	f006 fe53 	bl	8009d70 <sin>
 80030ca:	ec53 2b10 	vmov	r2, r3, d0
 80030ce:	4640      	mov	r0, r8
 80030d0:	4649      	mov	r1, r9
 80030d2:	f7fd fa99 	bl	8000608 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4650      	mov	r0, sl
 80030dc:	4659      	mov	r1, fp
 80030de:	f7fd f8dd 	bl	800029c <__adddf3>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f8d7 	bl	800029c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fd37 	bl	8000b68 <__aeabi_d2iz>
 80030fa:	4603      	mov	r3, r0
 80030fc:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	b2d9      	uxtb	r1, r3
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	3301      	adds	r3, #1
 800310c:	b2da      	uxtb	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	3301      	adds	r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f7ff fc11 	bl	800293c <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 800311a:	7ffa      	ldrb	r2, [r7, #31]
 800311c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003120:	f1c3 0307 	rsb	r3, r3, #7
 8003124:	fa42 f303 	asr.w	r3, r2, r3
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <tftRotateChar+0x264>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff fc51 	bl	80029dc <tftPushColor>
 800313a:	e008      	b.n	800314e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 800313c:	4b1c      	ldr	r3, [pc, #112]	; (80031b0 <tftRotateChar+0x268>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <tftRotateChar+0x26c>)
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fc47 	bl	80029dc <tftPushColor>
			for(i=0;i<8;i++)
 800314e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003152:	3301      	adds	r3, #1
 8003154:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003158:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800315c:	2b07      	cmp	r3, #7
 800315e:	f67f af3c 	bls.w	8002fda <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8003162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003164:	3301      	adds	r3, #1
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003168:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800316c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800316e:	429a      	cmp	r2, r3
 8003170:	f6ff af27 	blt.w	8002fc2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8003174:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003178:	b29a      	uxth	r2, r3
 800317a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800317c:	4413      	add	r3, r2
 800317e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8003180:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003184:	3301      	adds	r3, #1
 8003186:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800318a:	4b07      	ldr	r3, [pc, #28]	; (80031a8 <tftRotateChar+0x260>)
 800318c:	795b      	ldrb	r3, [r3, #5]
 800318e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003192:	429a      	cmp	r2, r3
 8003194:	f4ff af12 	bcc.w	8002fbc <tftRotateChar+0x74>
	}
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3738      	adds	r7, #56	; 0x38
 800319e:	46bd      	mov	sp, r7
 80031a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a4:	f3af 8000 	nop.w
 80031a8:	20000284 	.word	0x20000284
 80031ac:	20000034 	.word	0x20000034
 80031b0:	20000290 	.word	0x20000290
 80031b4:	20000292 	.word	0x20000292
 80031b8:	1eb851ec 	.word	0x1eb851ec
 80031bc:	3f91eb85 	.word	0x3f91eb85

080031c0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7fd f800 	bl	80001e0 <strlen>
 80031e0:	4603      	mov	r3, r0
 80031e2:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f113 0f02 	cmn.w	r3, #2
 80031ea:	d10a      	bne.n	8003202 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80031ec:	4b3e      	ldr	r3, [pc, #248]	; (80032e8 <tftPrint+0x128>)
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	4b3e      	ldr	r3, [pc, #248]	; (80032ec <tftPrint+0x12c>)
 80031f4:	791b      	ldrb	r3, [r3, #4]
 80031f6:	4619      	mov	r1, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d10d      	bne.n	8003226 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 800320a:	4b39      	ldr	r3, [pc, #228]	; (80032f0 <tftPrint+0x130>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <tftPrint+0x12c>)
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	4619      	mov	r1, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	0fda      	lsrs	r2, r3, #31
 8003220:	4413      	add	r3, r2
 8003222:	105b      	asrs	r3, r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8003226:	2300      	movs	r3, #0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
 800322a:	e053      	b.n	80032d4 <tftPrint+0x114>
	{
		lettercount++;
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	3301      	adds	r3, #1
 8003230:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d112      	bne.n	800325e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	60fa      	str	r2, [r7, #12]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	69f9      	ldr	r1, [r7, #28]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fd87 	bl	8002d58 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 800324a:	4b28      	ldr	r3, [pc, #160]	; (80032ec <tftPrint+0x12c>)
 800324c:	791b      	ldrb	r3, [r3, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	e00a      	b.n	8003274 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	7818      	ldrb	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68b9      	ldr	r1, [r7, #8]
 8003270:	f7ff fe6a 	bl	8002f48 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8003274:	f000 f8a8 	bl	80033c8 <tftGetWidth>
 8003278:	4603      	mov	r3, r0
 800327a:	461a      	mov	r2, r3
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <tftPrint+0x12c>)
 800327e:	791b      	ldrb	r3, [r3, #4]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	4293      	cmp	r3, r2
 800328c:	db1f      	blt.n	80032ce <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <tftPrint+0x12c>)
 8003298:	795b      	ldrb	r3, [r3, #5]
 800329a:	461a      	mov	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 80032a2:	f000 f89d 	bl	80033e0 <tftGetHeight>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <tftPrint+0x12c>)
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	dd09      	ble.n	80032ca <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80032b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032ba:	f7ff f9cf 	bl	800265c <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 f818 	bl	80032f4 <tftFillScreen>
				y=0; // start at top left of new Page
 80032c4:	2300      	movs	r3, #0
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	e001      	b.n	80032ce <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	3301      	adds	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	dba7      	blt.n	800322c <tftPrint+0x6c>
			}

		}

	}
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000000a 	.word	0x2000000a
 80032ec:	20000284 	.word	0x20000284
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <tftFillScreen+0x2c>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b21a      	sxth	r2, r3
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <tftFillScreen+0x30>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b219      	sxth	r1, r3
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	460b      	mov	r3, r1
 8003310:	2100      	movs	r1, #0
 8003312:	2000      	movs	r0, #0
 8003314:	f7ff fb7a 	bl	8002a0c <tftFillRect>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	2000000a 	.word	0x2000000a
 8003324:	2000000c 	.word	0x2000000c

08003328 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800333a:	2036      	movs	r0, #54	; 0x36
 800333c:	f7ff f9b4 	bl	80026a8 <tftSendCmd>

	switch (rotation)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d836      	bhi.n	80033b4 <tftSetRotation+0x8c>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <tftSetRotation+0x24>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003371 	.word	0x08003371
 8003354:	08003385 	.word	0x08003385
 8003358:	08003399 	.word	0x08003399
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800335c:	20c0      	movs	r0, #192	; 0xc0
 800335e:	f7ff f9b2 	bl	80026c6 <tftSendData>
		width  = ST7735_TFTWIDTH;
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <tftSetRotation+0x94>)
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8003368:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <tftSetRotation+0x98>)
 800336a:	22a0      	movs	r2, #160	; 0xa0
 800336c:	801a      	strh	r2, [r3, #0]
		break;
 800336e:	e01d      	b.n	80033ac <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8003370:	20a0      	movs	r0, #160	; 0xa0
 8003372:	f7ff f9a8 	bl	80026c6 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <tftSetRotation+0x94>)
 8003378:	22a0      	movs	r2, #160	; 0xa0
 800337a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800337c:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <tftSetRotation+0x98>)
 800337e:	2280      	movs	r2, #128	; 0x80
 8003380:	801a      	strh	r2, [r3, #0]
		   break;
 8003382:	e013      	b.n	80033ac <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 8003384:	2000      	movs	r0, #0
 8003386:	f7ff f99e 	bl	80026c6 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <tftSetRotation+0x94>)
 800338c:	2280      	movs	r2, #128	; 0x80
 800338e:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8003390:	4b0b      	ldr	r3, [pc, #44]	; (80033c0 <tftSetRotation+0x98>)
 8003392:	22a0      	movs	r2, #160	; 0xa0
 8003394:	801a      	strh	r2, [r3, #0]
		   break;
 8003396:	e009      	b.n	80033ac <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8003398:	2060      	movs	r0, #96	; 0x60
 800339a:	f7ff f994 	bl	80026c6 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <tftSetRotation+0x94>)
 80033a0:	22a0      	movs	r2, #160	; 0xa0
 80033a2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <tftSetRotation+0x98>)
 80033a6:	2280      	movs	r2, #128	; 0x80
 80033a8:	801a      	strh	r2, [r3, #0]
		   break;
 80033aa:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80033ac:	4a05      	ldr	r2, [pc, #20]	; (80033c4 <tftSetRotation+0x9c>)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	7013      	strb	r3, [r2, #0]
 80033b2:	e000      	b.n	80033b6 <tftSetRotation+0x8e>
		   return;
 80033b4:	bf00      	nop
}
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000000a 	.word	0x2000000a
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	20000280 	.word	0x20000280

080033c8 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <tftGetWidth+0x14>)
 80033ce:	881b      	ldrh	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	2000000a 	.word	0x2000000a

080033e0 <tftGetHeight>:


uint8_t tftGetHeight()
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <tftGetHeight+0x14>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	2000000c 	.word	0x2000000c

080033f8 <convDecByteToHex>:
/*
 * Darstellung eines byte Value als hexadezimalen String mit zwei ascii Symbolen.
 * return: pointer auf den String hex[2]
 */
uint8_t *convDecByteToHex(uint8_t byte)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	f003 030f 	and.w	r3, r3, #15
 8003408:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b09      	cmp	r3, #9
 800340e:	d803      	bhi.n	8003418 <convDecByteToHex+0x20>
    {
        temp += '0';
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	3330      	adds	r3, #48	; 0x30
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e002      	b.n	800341e <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	3337      	adds	r3, #55	; 0x37
 800341c:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 800341e:	4a0d      	ldr	r2, [pc, #52]	; (8003454 <convDecByteToHex+0x5c>)
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	2b09      	cmp	r3, #9
 800342e:	d803      	bhi.n	8003438 <convDecByteToHex+0x40>
    {
        temp += '0';
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	3330      	adds	r3, #48	; 0x30
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	e002      	b.n	800343e <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	3337      	adds	r3, #55	; 0x37
 800343c:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 800343e:	4a05      	ldr	r2, [pc, #20]	; (8003454 <convDecByteToHex+0x5c>)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	7013      	strb	r3, [r2, #0]

    return hex;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <convDecByteToHex+0x5c>)
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000294 	.word	0x20000294

08003458 <I2C_SCAN>:
 *			and display on the ST7735 Display
 *
 *
 */
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 8003464:	4b30      	ldr	r3, [pc, #192]	; (8003528 <I2C_SCAN+0xd0>)
 8003466:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 18
	uint8_t foundAddr = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a2f      	ldr	r2, [pc, #188]	; (800352c <I2C_SCAN+0xd4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d102      	bne.n	800347a <I2C_SCAN+0x22>
    {
	   port = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
 8003478:	e001      	b.n	800347e <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <I2C_SCAN+0xd8>)
 8003486:	2212      	movs	r2, #18
 8003488:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 800348a:	4b29      	ldr	r3, [pc, #164]	; (8003530 <I2C_SCAN+0xd8>)
 800348c:	2212      	movs	r2, #18
 800348e:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f002 ffb2 	bl	80063fe <i2cFindSlaveAddr>
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 800349e:	7dfb      	ldrb	r3, [r7, #23]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <I2C_SCAN+0xd8>)
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d110      	bne.n	80034cc <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
 80034ac:	4a21      	ldr	r2, [pc, #132]	; (8003534 <I2C_SCAN+0xdc>)
 80034ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <I2C_SCAN+0xd8>)
 80034b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034ba:	2300      	movs	r3, #0
 80034bc:	6938      	ldr	r0, [r7, #16]
 80034be:	f7ff fe7f 	bl	80031c0 <tftPrint>
		yPos[port] = 66;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <I2C_SCAN+0xd8>)
 80034c6:	2142      	movs	r1, #66	; 0x42
 80034c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ff92 	bl	80033f8 <convDecByteToHex>
 80034d4:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01f      	beq.n	800351c <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <I2C_SCAN+0xdc>)
 80034e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	4a12      	ldr	r2, [pc, #72]	; (8003530 <I2C_SCAN+0xd8>)
 80034e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034ec:	2300      	movs	r3, #0
 80034ee:	68b8      	ldr	r0, [r7, #8]
 80034f0:	f7ff fe66 	bl	80031c0 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 80034f4:	7dfb      	ldrb	r3, [r7, #23]
 80034f6:	4a0e      	ldr	r2, [pc, #56]	; (8003530 <I2C_SCAN+0xd8>)
 80034f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
 80034fe:	320e      	adds	r2, #14
 8003500:	490b      	ldr	r1, [pc, #44]	; (8003530 <I2C_SCAN+0xd8>)
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	4a09      	ldr	r2, [pc, #36]	; (8003530 <I2C_SCAN+0xd8>)
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	2b64      	cmp	r3, #100	; 0x64
 8003510:	dd04      	ble.n	800351c <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
 8003514:	4a06      	ldr	r2, [pc, #24]	; (8003530 <I2C_SCAN+0xd8>)
 8003516:	2112      	movs	r1, #18
 8003518:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	0800b274 	.word	0x0800b274
 800352c:	40005400 	.word	0x40005400
 8003530:	20000038 	.word	0x20000038
 8003534:	20000040 	.word	0x20000040

08003538 <activateI2C1>:
#include "i2cDevices.h"



void activateI2C1()
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <activateI2C1+0x70>)
 8003540:	607b      	str	r3, [r7, #4]

	GPIO_TypeDef  *portB = GPIOB;
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <activateI2C1+0x74>)
 8003544:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f002 fcf0 	bl	8005f2c <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	f002 f9dd 	bl	800590c <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8003552:	2202      	movs	r2, #2
 8003554:	2108      	movs	r1, #8
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f002 fa9e 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 800355c:	2204      	movs	r2, #4
 800355e:	2108      	movs	r1, #8
 8003560:	6838      	ldr	r0, [r7, #0]
 8003562:	f002 fb3b 	bl	8005bdc <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 8003566:	2202      	movs	r2, #2
 8003568:	2109      	movs	r1, #9
 800356a:	6838      	ldr	r0, [r7, #0]
 800356c:	f002 fa94 	bl	8005a98 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8003570:	2204      	movs	r2, #4
 8003572:	2109      	movs	r1, #9
 8003574:	6838      	ldr	r0, [r7, #0]
 8003576:	f002 fb31 	bl	8005bdc <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 800357a:	2201      	movs	r2, #1
 800357c:	2108      	movs	r1, #8
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	f002 fb95 	bl	8005cae <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8003584:	2201      	movs	r2, #1
 8003586:	2109      	movs	r1, #9
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	f002 fb90 	bl	8005cae <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
 800358e:	2302      	movs	r3, #2
 8003590:	220f      	movs	r2, #15
 8003592:	2101      	movs	r1, #1
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f002 fd81 	bl	800609c <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f002 ff1e 	bl	80063dc <i2cEnableDevice>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40005400 	.word	0x40005400
 80035ac:	40020400 	.word	0x40020400

080035b0 <initTOFSensorData>:
//--------------------- SENSOR FUNCTIONS ------------------------

// Function to initialize the TOF sensor
// Initializes the sensor with given address, I2C interface, ranging profile, and measurement range.
void initTOFSensorData(TOFSensor_t* sensor, I2C_TypeDef *i2c_tof, uint16_t TOF_address_used, uint16_t Ranging_Profiles_t, uint16_t measuredRange)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4611      	mov	r1, r2
 80035bc:	461a      	mov	r2, r3
 80035be:	460b      	mov	r3, r1
 80035c0:	80fb      	strh	r3, [r7, #6]
 80035c2:	4613      	mov	r3, r2
 80035c4:	80bb      	strh	r3, [r7, #4]
	sensor->i2c_tof = i2c_tof;                    // Set the I2C interface (e.g., I2C1, I2C2)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	601a      	str	r2, [r3, #0]
	sensor->TOF_address_used = TOF_address_used;  // Set the TOF sensor address
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	809a      	strh	r2, [r3, #4]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the ranging profile (measurement mode)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88ba      	ldrh	r2, [r7, #4]
 80035d6:	80da      	strh	r2, [r3, #6]
    sensor->measuredRange = measuredRange;        // Set the maximum measurable range
 80035d8:	8b3a      	ldrh	r2, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	60da      	str	r2, [r3, #12]
    sensor->distanceFromTOF = 0;                  // Initialize the measured distance to zero
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	811a      	strh	r2, [r3, #8]
    sensor->enableTOFSensor = false;              // Default is to keep the sensor disabled
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	741a      	strb	r2, [r3, #16]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <configTOFSensor>:

// Function to configure the TOF sensor
// Configures the sensor's ranging profile and whether the sensor should be enabled or disabled.
void configTOFSensor(TOFSensor_t* sensor, uint16_t Ranging_Profiles_t, bool enable) {
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
 80035fe:	460b      	mov	r3, r1
 8003600:	807b      	strh	r3, [r7, #2]
 8003602:	4613      	mov	r3, r2
 8003604:	707b      	strb	r3, [r7, #1]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the new ranging profile
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	887a      	ldrh	r2, [r7, #2]
 800360a:	80da      	strh	r2, [r3, #6]
    sensor->enableTOFSensor = enable;                  // Enable or disable the TOF sensor
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	787a      	ldrb	r2, [r7, #1]
 8003610:	741a      	strb	r2, [r3, #16]
    if(sensor->enableTOFSensor == true)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7c1b      	ldrb	r3, [r3, #16]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <configTOFSensor+0x2a>
    {
    	TOF_set_ranging_profile(sensor);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f001 fba4 	bl	8004d68 <TOF_set_ranging_profile>
    }
}
 8003620:	bf00      	nop
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <TOF_configure_interrupt>:
 *
 *
 * @returns:     bool: true if the configuration is successful, otherwise false.
 */
bool TOF_configure_interrupt(TOFSensor_t* TOFSENS)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	889b      	ldrh	r3, [r3, #4]
 8003634:	b25a      	sxtb	r2, r3
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <TOF_configure_interrupt+0xc4>)
 8003638:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <TOF_configure_interrupt+0xc8>)
 8003640:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

	/* Interrupt on new sample ready */
	i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8003642:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <TOF_configure_interrupt+0xc8>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	4b29      	ldr	r3, [pc, #164]	; (80036ec <TOF_configure_interrupt+0xc4>)
 8003648:	f993 3000 	ldrsb.w	r3, [r3]
 800364c:	b2d9      	uxtb	r1, r3
 800364e:	2304      	movs	r3, #4
 8003650:	220a      	movs	r2, #10
 8003652:	f002 fd71 	bl	8006138 <i2cSendByteToSlaveReg>
 8003656:	4603      	mov	r3, r0
 8003658:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 800365a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <TOF_configure_interrupt+0x3e>
    {
        return false;
 8003662:	2300      	movs	r3, #0
 8003664:	e03e      	b.n	80036e4 <TOF_configure_interrupt+0xbc>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high[1];
    i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high, 1);
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <TOF_configure_interrupt+0xc8>)
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <TOF_configure_interrupt+0xc4>)
 800366c:	f993 3000 	ldrsb.w	r3, [r3]
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	2201      	movs	r2, #1
 8003678:	9200      	str	r2, [sp, #0]
 800367a:	2284      	movs	r2, #132	; 0x84
 800367c:	f002 fe16 	bl	80062ac <i2cBurstRegRead>
 8003680:	4603      	mov	r3, r0
 8003682:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 8003684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <TOF_configure_interrupt+0x68>
	{
		return false;
 800368c:	2300      	movs	r3, #0
 800368e:	e029      	b.n	80036e4 <TOF_configure_interrupt+0xbc>
	}

    gpio_hv_mux_active_high[0] &= ~0x10;
 8003690:	7b3b      	ldrb	r3, [r7, #12]
 8003692:	f023 0310 	bic.w	r3, r3, #16
 8003696:	b2db      	uxtb	r3, r3
 8003698:	733b      	strb	r3, [r7, #12]
    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH,  gpio_hv_mux_active_high[0]);
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <TOF_configure_interrupt+0xc8>)
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	4b13      	ldr	r3, [pc, #76]	; (80036ec <TOF_configure_interrupt+0xc4>)
 80036a0:	f993 3000 	ldrsb.w	r3, [r3]
 80036a4:	b2d9      	uxtb	r1, r3
 80036a6:	7b3b      	ldrb	r3, [r7, #12]
 80036a8:	2284      	movs	r2, #132	; 0x84
 80036aa:	f002 fd45 	bl	8006138 <i2cSendByteToSlaveReg>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <TOF_configure_interrupt+0x96>
	{
		return false;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e012      	b.n	80036e4 <TOF_configure_interrupt+0xbc>
	}

    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <TOF_configure_interrupt+0xc8>)
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <TOF_configure_interrupt+0xc4>)
 80036c4:	f993 3000 	ldrsb.w	r3, [r3]
 80036c8:	b2d9      	uxtb	r1, r3
 80036ca:	2301      	movs	r3, #1
 80036cc:	220b      	movs	r2, #11
 80036ce:	f002 fd33 	bl	8006138 <i2cSendByteToSlaveReg>
 80036d2:	4603      	mov	r3, r0
 80036d4:	73fb      	strb	r3, [r7, #15]
	if (i2c_return != I2C_OK)
 80036d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <TOF_configure_interrupt+0xba>
	{
		return false;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <TOF_configure_interrupt+0xbc>
	}

    return true;
 80036e2:	2301      	movs	r3, #1
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000048 	.word	0x20000048
 80036f0:	20000298 	.word	0x20000298

080036f4 <TOF_init_address>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the correct TOF sensor is connected and communication is successful, otherwise false.
 */
bool TOF_init_address(TOFSensor_t* TOFSENS)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	889b      	ldrh	r3, [r3, #4]
 8003700:	b25a      	sxtb	r2, r3
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <TOF_init_address+0x58>)
 8003704:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a11      	ldr	r2, [pc, #68]	; (8003750 <TOF_init_address+0x5c>)
 800370c:	6013      	str	r3, [r2, #0]
	//set i2c clock speed
	//i2cSetClkSpd(TOF_i2c, I2C_CLOCK_400);

	//check correct device by reading the ID
	uint8_t device_id[1];
	I2C_RETURN_CODE_t i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_IDENTIFICATION_MODEL_ID, device_id, 1);
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <TOF_init_address+0x5c>)
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	4b0e      	ldr	r3, [pc, #56]	; (800374c <TOF_init_address+0x58>)
 8003714:	f993 3000 	ldrsb.w	r3, [r3]
 8003718:	b2d9      	uxtb	r1, r3
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2201      	movs	r2, #1
 8003720:	9200      	str	r2, [sp, #0]
 8003722:	22c0      	movs	r2, #192	; 0xc0
 8003724:	f002 fdc2 	bl	80062ac <i2cBurstRegRead>
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]

	if (i2c_return != I2C_OK)
 800372c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <TOF_init_address+0x44>
	{
		// returns false, if i2cBurstRegRead was not successful
		return false;
 8003734:	2300      	movs	r3, #0
 8003736:	e005      	b.n	8003744 <TOF_init_address+0x50>
	}

	//returns true, if correct TOF sensor is connected, otherwise false
	return (device_id[0] == TOF_VL53L0X_EXPECTED_DEVICE_ID);
 8003738:	7b3b      	ldrb	r3, [r7, #12]
 800373a:	2bee      	cmp	r3, #238	; 0xee
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000048 	.word	0x20000048
 8003750:	20000298 	.word	0x20000298

08003754 <TOF_data_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the sensor is successfully initialized, otherwise false.
 */
bool TOF_data_init(TOFSensor_t* TOFSENS)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	889b      	ldrh	r3, [r3, #4]
 8003760:	b25a      	sxtb	r2, r3
 8003762:	4b5a      	ldr	r3, [pc, #360]	; (80038cc <TOF_data_init+0x178>)
 8003764:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a59      	ldr	r2, [pc, #356]	; (80038d0 <TOF_data_init+0x17c>)
 800376c:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = false;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]

	/* Set 2v8 mode */
	uint8_t vhv_config_scl_sda = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	73bb      	strb	r3, [r7, #14]
	success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda);
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <TOF_data_init+0x17c>)
 8003778:	6818      	ldr	r0, [r3, #0]
 800377a:	4b54      	ldr	r3, [pc, #336]	; (80038cc <TOF_data_init+0x178>)
 800377c:	f993 3000 	ldrsb.w	r3, [r3]
 8003780:	b2d9      	uxtb	r1, r3
 8003782:	f107 030e 	add.w	r3, r7, #14
 8003786:	2289      	movs	r2, #137	; 0x89
 8003788:	f002 fd24 	bl	80061d4 <i2cReadByteFromSlaveReg>
 800378c:	4603      	mov	r3, r0
 800378e:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 8003790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <TOF_data_init+0x48>
	{
		return false;
 8003798:	2300      	movs	r3, #0
 800379a:	e092      	b.n	80038c2 <TOF_data_init+0x16e>
	}

	vhv_config_scl_sda |= 0x01;
 800379c:	7bbb      	ldrb	r3, [r7, #14]
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	73bb      	strb	r3, [r7, #14]

	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda);
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <TOF_data_init+0x17c>)
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	4b48      	ldr	r3, [pc, #288]	; (80038cc <TOF_data_init+0x178>)
 80037ac:	f993 3000 	ldrsb.w	r3, [r3]
 80037b0:	b2d9      	uxtb	r1, r3
 80037b2:	7bbb      	ldrb	r3, [r7, #14]
 80037b4:	2289      	movs	r2, #137	; 0x89
 80037b6:	f002 fcbf 	bl	8006138 <i2cSendByteToSlaveReg>
 80037ba:	4603      	mov	r3, r0
 80037bc:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <TOF_data_init+0x76>
	{
		return false;
 80037c6:	2300      	movs	r3, #0
 80037c8:	e07b      	b.n	80038c2 <TOF_data_init+0x16e>
	}

	/* Set I2C standard mode */
	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_I2C_MODE, 0x00);
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <TOF_data_init+0x17c>)
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	4b3f      	ldr	r3, [pc, #252]	; (80038cc <TOF_data_init+0x178>)
 80037d0:	f993 3000 	ldrsb.w	r3, [r3]
 80037d4:	b2d9      	uxtb	r1, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	2288      	movs	r2, #136	; 0x88
 80037da:	f002 fcad 	bl	8006138 <i2cSendByteToSlaveReg>
 80037de:	4603      	mov	r3, r0
 80037e0:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <TOF_data_init+0x17c>)
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	4b39      	ldr	r3, [pc, #228]	; (80038cc <TOF_data_init+0x178>)
 80037e8:	f993 3000 	ldrsb.w	r3, [r3]
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	2301      	movs	r3, #1
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	f002 fca1 	bl	8006138 <i2cSendByteToSlaveReg>
 80037f6:	4603      	mov	r3, r0
 80037f8:	461a      	mov	r2, r3
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	4013      	ands	r3, r2
 80037fe:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003800:	4b33      	ldr	r3, [pc, #204]	; (80038d0 <TOF_data_init+0x17c>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <TOF_data_init+0x178>)
 8003806:	f993 3000 	ldrsb.w	r3, [r3]
 800380a:	b2d9      	uxtb	r1, r3
 800380c:	2301      	movs	r3, #1
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	f002 fc92 	bl	8006138 <i2cSendByteToSlaveReg>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	4013      	ands	r3, r2
 800381c:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 800381e:	4b2c      	ldr	r3, [pc, #176]	; (80038d0 <TOF_data_init+0x17c>)
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <TOF_data_init+0x178>)
 8003824:	f993 3000 	ldrsb.w	r3, [r3]
 8003828:	b2d9      	uxtb	r1, r3
 800382a:	2300      	movs	r3, #0
 800382c:	2200      	movs	r2, #0
 800382e:	f002 fc83 	bl	8006138 <i2cSendByteToSlaveReg>
 8003832:	4603      	mov	r3, r0
 8003834:	461a      	mov	r2, r3
 8003836:	7bfb      	ldrb	r3, [r7, #15]
 8003838:	4013      	ands	r3, r2
 800383a:	73fb      	strb	r3, [r7, #15]
	success &= i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, &TOF_stop_variable);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <TOF_data_init+0x17c>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4b22      	ldr	r3, [pc, #136]	; (80038cc <TOF_data_init+0x178>)
 8003842:	f993 3000 	ldrsb.w	r3, [r3]
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <TOF_data_init+0x180>)
 800384a:	2291      	movs	r2, #145	; 0x91
 800384c:	f002 fcc2 	bl	80061d4 <i2cReadByteFromSlaveReg>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	4013      	ands	r3, r2
 8003858:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 800385a:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <TOF_data_init+0x17c>)
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <TOF_data_init+0x178>)
 8003860:	f993 3000 	ldrsb.w	r3, [r3]
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	2301      	movs	r3, #1
 8003868:	2200      	movs	r2, #0
 800386a:	f002 fc65 	bl	8006138 <i2cSendByteToSlaveReg>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	4013      	ands	r3, r2
 8003876:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <TOF_data_init+0x17c>)
 800387a:	6818      	ldr	r0, [r3, #0]
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <TOF_data_init+0x178>)
 800387e:	f993 3000 	ldrsb.w	r3, [r3]
 8003882:	b2d9      	uxtb	r1, r3
 8003884:	2300      	movs	r3, #0
 8003886:	22ff      	movs	r2, #255	; 0xff
 8003888:	f002 fc56 	bl	8006138 <i2cSendByteToSlaveReg>
 800388c:	4603      	mov	r3, r0
 800388e:	461a      	mov	r2, r3
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	4013      	ands	r3, r2
 8003894:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <TOF_data_init+0x17c>)
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <TOF_data_init+0x178>)
 800389c:	f993 3000 	ldrsb.w	r3, [r3]
 80038a0:	b2d9      	uxtb	r1, r3
 80038a2:	2300      	movs	r3, #0
 80038a4:	2280      	movs	r2, #128	; 0x80
 80038a6:	f002 fc47 	bl	8006138 <i2cSendByteToSlaveReg>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	4013      	ands	r3, r2
 80038b2:	73fb      	strb	r3, [r7, #15]

	if (success != I2C_OK)
 80038b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <TOF_data_init+0x16c>
	{
		return false;
 80038bc:	2300      	movs	r3, #0
 80038be:	e000      	b.n	80038c2 <TOF_data_init+0x16e>
	}

	return true;
 80038c0:	2301      	movs	r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000048 	.word	0x20000048
 80038d0:	20000298 	.word	0x20000298
 80038d4:	2000029c 	.word	0x2000029c

080038d8 <TOF_get_spad_info_from_nvm>:
 * 				bool * type_is_aperture						indicating whether the SPADs are of the aperture type.
 *
 * @returns:    bool: true if the SPAD information is successfully retrieved, otherwise false.
 */
bool TOF_get_spad_info_from_nvm(TOFSensor_t* TOFSENS, uint8_t * count, bool * type_is_aperture)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	889b      	ldrh	r3, [r3, #4]
 80038e8:	b25a      	sxtb	r2, r3
 80038ea:	4b8a      	ldr	r3, [pc, #552]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80038ec:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a89      	ldr	r2, [pc, #548]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80038f4:	6013      	str	r3, [r2, #0]

	uint8_t tmp;

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80038f6:	4b88      	ldr	r3, [pc, #544]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	4b86      	ldr	r3, [pc, #536]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80038fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003900:	b2d9      	uxtb	r1, r3
 8003902:	2301      	movs	r3, #1
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	f002 fc17 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 800390a:	4b83      	ldr	r3, [pc, #524]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 800390c:	6818      	ldr	r0, [r3, #0]
 800390e:	4b81      	ldr	r3, [pc, #516]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003910:	f993 3000 	ldrsb.w	r3, [r3]
 8003914:	b2d9      	uxtb	r1, r3
 8003916:	2301      	movs	r3, #1
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	f002 fc0d 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 800391e:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003920:	6818      	ldr	r0, [r3, #0]
 8003922:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003924:	f993 3000 	ldrsb.w	r3, [r3]
 8003928:	b2d9      	uxtb	r1, r3
 800392a:	2300      	movs	r3, #0
 800392c:	2200      	movs	r2, #0
 800392e:	f002 fc03 	bl	8006138 <i2cSendByteToSlaveReg>

	uint8_t data = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 8003936:	4b78      	ldr	r3, [pc, #480]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	4b76      	ldr	r3, [pc, #472]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 800393c:	f993 3000 	ldrsb.w	r3, [r3]
 8003940:	b2d9      	uxtb	r1, r3
 8003942:	2306      	movs	r3, #6
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	f002 fbf7 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 800394a:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	4b71      	ldr	r3, [pc, #452]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003950:	f993 3000 	ldrsb.w	r3, [r3]
 8003954:	b2d9      	uxtb	r1, r3
 8003956:	f107 0315 	add.w	r3, r7, #21
 800395a:	2283      	movs	r2, #131	; 0x83
 800395c:	f002 fc3a 	bl	80061d4 <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data | 0x04);
 8003960:	4b6d      	ldr	r3, [pc, #436]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003966:	f993 3000 	ldrsb.w	r3, [r3]
 800396a:	b2d9      	uxtb	r1, r3
 800396c:	7d7b      	ldrb	r3, [r7, #21]
 800396e:	f043 0304 	orr.w	r3, r3, #4
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2283      	movs	r2, #131	; 0x83
 8003976:	f002 fbdf 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x07);
 800397a:	4b67      	ldr	r3, [pc, #412]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	4b65      	ldr	r3, [pc, #404]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003980:	f993 3000 	ldrsb.w	r3, [r3]
 8003984:	b2d9      	uxtb	r1, r3
 8003986:	2307      	movs	r3, #7
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	f002 fbd5 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x01);
 800398e:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	4b60      	ldr	r3, [pc, #384]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003994:	f993 3000 	ldrsb.w	r3, [r3]
 8003998:	b2d9      	uxtb	r1, r3
 800399a:	2301      	movs	r3, #1
 800399c:	2281      	movs	r2, #129	; 0x81
 800399e:	f002 fbcb 	bl	8006138 <i2cSendByteToSlaveReg>
	/// TF_July25 deleted by comment-> i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80039a8:	f993 3000 	ldrsb.w	r3, [r3]
 80039ac:	b2d9      	uxtb	r1, r3
 80039ae:	2301      	movs	r3, #1
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	f002 fbc1 	bl	8006138 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x94, 0x6b);
 80039b6:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80039bc:	f993 3000 	ldrsb.w	r3, [r3]
 80039c0:	b2d9      	uxtb	r1, r3
 80039c2:	236b      	movs	r3, #107	; 0x6b
 80039c4:	2294      	movs	r2, #148	; 0x94
 80039c6:	f002 fbb7 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x00);
 80039ca:	4b53      	ldr	r3, [pc, #332]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	4b51      	ldr	r3, [pc, #324]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80039d0:	f993 3000 	ldrsb.w	r3, [r3]
 80039d4:	b2d9      	uxtb	r1, r3
 80039d6:	2300      	movs	r3, #0
 80039d8:	2283      	movs	r2, #131	; 0x83
 80039da:	f002 fbad 	bl	8006138 <i2cSendByteToSlaveReg>

	data = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	757b      	strb	r3, [r7, #21]
	I2C_RETURN_CODE_t i2c_return;

	do
		{
			i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_INTERNAL_CONFIG_0x83, &data, 1);
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	4b4b      	ldr	r3, [pc, #300]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 80039e8:	f993 3000 	ldrsb.w	r3, [r3]
 80039ec:	b2d9      	uxtb	r1, r3
 80039ee:	f107 0315 	add.w	r3, r7, #21
 80039f2:	2201      	movs	r2, #1
 80039f4:	9200      	str	r2, [sp, #0]
 80039f6:	2283      	movs	r2, #131	; 0x83
 80039f8:	f002 fc58 	bl	80062ac <i2cBurstRegRead>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]
		} while (i2c_return == I2C_OK && data == 0x00);
 8003a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d102      	bne.n	8003a0e <TOF_get_spad_info_from_nvm+0x136>
 8003a08:	7d7b      	ldrb	r3, [r7, #21]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0e9      	beq.n	80039e2 <TOF_get_spad_info_from_nvm+0x10a>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	4b40      	ldr	r3, [pc, #256]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003a14:	f993 3000 	ldrsb.w	r3, [r3]
 8003a18:	b2d9      	uxtb	r1, r3
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	2283      	movs	r2, #131	; 0x83
 8003a1e:	f002 fb8b 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, 0x92, &tmp);
 8003a22:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	4b3b      	ldr	r3, [pc, #236]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003a28:	f993 3000 	ldrsb.w	r3, [r3]
 8003a2c:	b2d9      	uxtb	r1, r3
 8003a2e:	f107 0316 	add.w	r3, r7, #22
 8003a32:	2292      	movs	r2, #146	; 0x92
 8003a34:	f002 fbce 	bl	80061d4 <i2cReadByteFromSlaveReg>

	*count = tmp & 0x7f;
 8003a38:	7dbb      	ldrb	r3, [r7, #22]
 8003a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8003a44:	7dbb      	ldrb	r3, [r7, #22]
 8003a46:	09db      	lsrs	r3, r3, #7
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2301      	movne	r3, #1
 8003a54:	2300      	moveq	r3, #0
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	701a      	strb	r2, [r3, #0]

	data = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x00);
 8003a60:	4b2d      	ldr	r3, [pc, #180]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	4b2b      	ldr	r3, [pc, #172]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003a66:	f993 3000 	ldrsb.w	r3, [r3]
 8003a6a:	b2d9      	uxtb	r1, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	2281      	movs	r2, #129	; 0x81
 8003a70:	f002 fb62 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	4b26      	ldr	r3, [pc, #152]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8003a7e:	b2d9      	uxtb	r1, r3
 8003a80:	2306      	movs	r3, #6
 8003a82:	22ff      	movs	r2, #255	; 0xff
 8003a84:	f002 fb58 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 8003a88:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	f107 0315 	add.w	r3, r7, #21
 8003a98:	2283      	movs	r2, #131	; 0x83
 8003a9a:	f002 fb9b 	bl	80061d4 <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data  & ~0x04);
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8003aa8:	b2d9      	uxtb	r1, r3
 8003aaa:	7d7b      	ldrb	r3, [r7, #21]
 8003aac:	f023 0304 	bic.w	r3, r3, #4
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2283      	movs	r2, #131	; 0x83
 8003ab4:	f002 fb40 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003ab8:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003abe:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac2:	b2d9      	uxtb	r1, r3
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	22ff      	movs	r2, #255	; 0xff
 8003ac8:	f002 fb36 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003ace:	6818      	ldr	r0, [r3, #0]
 8003ad0:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003ad2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ad6:	b2d9      	uxtb	r1, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	2200      	movs	r2, #0
 8003adc:	f002 fb2c 	bl	8006138 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8003aea:	b2d9      	uxtb	r1, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	f002 fb22 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8003af4:	4b08      	ldr	r3, [pc, #32]	; (8003b18 <TOF_get_spad_info_from_nvm+0x240>)
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <TOF_get_spad_info_from_nvm+0x23c>)
 8003afa:	f993 3000 	ldrsb.w	r3, [r3]
 8003afe:	b2d9      	uxtb	r1, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	f002 fb18 	bl	8006138 <i2cSendByteToSlaveReg>

	return true;
 8003b08:	2301      	movs	r3, #1
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000048 	.word	0x20000048
 8003b18:	20000298 	.word	0x20000298

08003b1c <TOF_set_spads_from_nvm>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the SPAD configuration is successful, otherwise false.
 */
bool TOF_set_spads_from_nvm(TOFSensor_t* TOFSENS)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af02      	add	r7, sp, #8
 8003b22:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	889b      	ldrh	r3, [r3, #4]
 8003b28:	b25a      	sxtb	r2, r3
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003b2c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6e      	ldr	r2, [pc, #440]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003b34:	6013      	str	r3, [r2, #0]

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!TOF_get_spad_info_from_nvm(TOFSENS, &spad_count, &spad_type_is_aperture))
 8003b36:	f107 0213 	add.w	r2, r7, #19
 8003b3a:	f107 0314 	add.w	r3, r7, #20
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fec9 	bl	80038d8 <TOF_get_spad_info_from_nvm>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f083 0301 	eor.w	r3, r3, #1
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <TOF_set_spads_from_nvm+0x3a>
	{
		return false;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e0c4      	b.n	8003ce0 <TOF_set_spads_from_nvm+0x1c4>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8003b56:	4b65      	ldr	r3, [pc, #404]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	4b63      	ldr	r3, [pc, #396]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003b5c:	f993 3000 	ldrsb.w	r3, [r3]
 8003b60:	b2d9      	uxtb	r1, r3
 8003b62:	f107 030c 	add.w	r3, r7, #12
 8003b66:	2206      	movs	r2, #6
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	22b0      	movs	r2, #176	; 0xb0
 8003b6c:	f002 fb9e 	bl	80062ac <i2cBurstRegRead>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003b70:	4b5e      	ldr	r3, [pc, #376]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	4b5c      	ldr	r3, [pc, #368]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003b76:	f993 3000 	ldrsb.w	r3, [r3]
 8003b7a:	b2d9      	uxtb	r1, r3
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	22ff      	movs	r2, #255	; 0xff
 8003b80:	f002 fada 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8003b84:	4b59      	ldr	r3, [pc, #356]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003b8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003b8e:	b2d9      	uxtb	r1, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	224f      	movs	r2, #79	; 0x4f
 8003b94:	f002 fad0 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8003b98:	4b54      	ldr	r3, [pc, #336]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4b52      	ldr	r3, [pc, #328]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003b9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba2:	b2d9      	uxtb	r1, r3
 8003ba4:	232c      	movs	r3, #44	; 0x2c
 8003ba6:	224e      	movs	r2, #78	; 0x4e
 8003ba8:	f002 fac6 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003bac:	4b4f      	ldr	r3, [pc, #316]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003bae:	6818      	ldr	r0, [r3, #0]
 8003bb0:	4b4d      	ldr	r3, [pc, #308]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8003bb6:	b2d9      	uxtb	r1, r3
 8003bb8:	2300      	movs	r3, #0
 8003bba:	22ff      	movs	r2, #255	; 0xff
 8003bbc:	f002 fabc 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8003bc0:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003bc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003bca:	b2d9      	uxtb	r1, r3
 8003bcc:	23b4      	movs	r3, #180	; 0xb4
 8003bce:	22b6      	movs	r2, #182	; 0xb6
 8003bd0:	f002 fab2 	bl	8006138 <i2cSendByteToSlaveReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8003bd4:	7cfb      	ldrb	r3, [r7, #19]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <TOF_set_spads_from_nvm+0xc2>
 8003bda:	230c      	movs	r3, #12
 8003bdc:	e000      	b.n	8003be0 <TOF_set_spads_from_nvm+0xc4>
 8003bde:	2300      	movs	r3, #0
 8003be0:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 8003be6:	2300      	movs	r3, #0
 8003be8:	75bb      	strb	r3, [r7, #22]
 8003bea:	e039      	b.n	8003c60 <TOF_set_spads_from_nvm+0x144>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8003bec:	7dba      	ldrb	r2, [r7, #22]
 8003bee:	7d7b      	ldrb	r3, [r7, #21]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d303      	bcc.n	8003bfc <TOF_set_spads_from_nvm+0xe0>
 8003bf4:	7d3b      	ldrb	r3, [r7, #20]
 8003bf6:	7dfa      	ldrb	r2, [r7, #23]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d11a      	bne.n	8003c32 <TOF_set_spads_from_nvm+0x116>
		{
		// This bit is lower than the first one that should be enabled, or
		// (reference_spad_count) bits have already been enabled, so zero this bit
		ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8003bfc:	7dbb      	ldrb	r3, [r7, #22]
 8003bfe:	08db      	lsrs	r3, r3, #3
 8003c00:	b2d8      	uxtb	r0, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	3318      	adds	r3, #24
 8003c06:	443b      	add	r3, r7
 8003c08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c0c:	b25a      	sxtb	r2, r3
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	2101      	movs	r1, #1
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	b25b      	sxtb	r3, r3
 8003c1c:	43db      	mvns	r3, r3
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	4013      	ands	r3, r2
 8003c22:	b25a      	sxtb	r2, r3
 8003c24:	4603      	mov	r3, r0
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	3318      	adds	r3, #24
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003c30:	e013      	b.n	8003c5a <TOF_set_spads_from_nvm+0x13e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8003c32:	7dbb      	ldrb	r3, [r7, #22]
 8003c34:	08db      	lsrs	r3, r3, #3
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	3318      	adds	r3, #24
 8003c3a:	443b      	add	r3, r7
 8003c3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003c40:	461a      	mov	r2, r3
 8003c42:	7dbb      	ldrb	r3, [r7, #22]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	fa42 f303 	asr.w	r3, r2, r3
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <TOF_set_spads_from_nvm+0x13e>
		{
		spads_enabled++;
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	3301      	adds	r3, #1
 8003c58:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8003c5a:	7dbb      	ldrb	r3, [r7, #22]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	75bb      	strb	r3, [r7, #22]
 8003c60:	7dbb      	ldrb	r3, [r7, #22]
 8003c62:	2b2f      	cmp	r3, #47	; 0x2f
 8003c64:	d9c2      	bls.n	8003bec <TOF_set_spads_from_nvm+0xd0>
		}
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map[0]);
 8003c66:	4b21      	ldr	r3, [pc, #132]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003c6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c70:	b2d9      	uxtb	r1, r3
 8003c72:	7b3b      	ldrb	r3, [r7, #12]
 8003c74:	22b0      	movs	r2, #176	; 0xb0
 8003c76:	f002 fa5f 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 1, ref_spad_map[1]);
 8003c7a:	4b1c      	ldr	r3, [pc, #112]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003c80:	f993 3000 	ldrsb.w	r3, [r3]
 8003c84:	b2d9      	uxtb	r1, r3
 8003c86:	7b7b      	ldrb	r3, [r7, #13]
 8003c88:	22b1      	movs	r2, #177	; 0xb1
 8003c8a:	f002 fa55 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 2, ref_spad_map[2]);
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003c94:	f993 3000 	ldrsb.w	r3, [r3]
 8003c98:	b2d9      	uxtb	r1, r3
 8003c9a:	7bbb      	ldrb	r3, [r7, #14]
 8003c9c:	22b2      	movs	r2, #178	; 0xb2
 8003c9e:	f002 fa4b 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 3, ref_spad_map[3]);
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8003cac:	b2d9      	uxtb	r1, r3
 8003cae:	7bfb      	ldrb	r3, [r7, #15]
 8003cb0:	22b3      	movs	r2, #179	; 0xb3
 8003cb2:	f002 fa41 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 4, ref_spad_map[4]);
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003cb8:	6818      	ldr	r0, [r3, #0]
 8003cba:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003cbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003cc0:	b2d9      	uxtb	r1, r3
 8003cc2:	7c3b      	ldrb	r3, [r7, #16]
 8003cc4:	22b4      	movs	r2, #180	; 0xb4
 8003cc6:	f002 fa37 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 5, ref_spad_map[5]);
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <TOF_set_spads_from_nvm+0x1d0>)
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <TOF_set_spads_from_nvm+0x1cc>)
 8003cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd4:	b2d9      	uxtb	r1, r3
 8003cd6:	7c7b      	ldrb	r3, [r7, #17]
 8003cd8:	22b5      	movs	r2, #181	; 0xb5
 8003cda:	f002 fa2d 	bl	8006138 <i2cSendByteToSlaveReg>

	return true;
 8003cde:	2301      	movs	r3, #1
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20000048 	.word	0x20000048
 8003cec:	20000298 	.word	0x20000298

08003cf0 <TOF_load_default_tuning_settings>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the tuning configuration was successful, otherwise false.
 */
bool TOF_load_default_tuning_settings(TOFSensor_t* TOFSENS)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	889b      	ldrh	r3, [r3, #4]
 8003cfc:	b25a      	sxtb	r2, r3
 8003cfe:	4bc6      	ldr	r3, [pc, #792]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d00:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4ac5      	ldr	r2, [pc, #788]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d08:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003d0a:	4bc4      	ldr	r3, [pc, #784]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	4bc2      	ldr	r3, [pc, #776]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d10:	f993 3000 	ldrsb.w	r3, [r3]
 8003d14:	b2d9      	uxtb	r1, r3
 8003d16:	2301      	movs	r3, #1
 8003d18:	22ff      	movs	r2, #255	; 0xff
 8003d1a:	f002 fa0d 	bl	8006138 <i2cSendByteToSlaveReg>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x00);
 8003d22:	4bbe      	ldr	r3, [pc, #760]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	4bbc      	ldr	r3, [pc, #752]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d28:	f993 3000 	ldrsb.w	r3, [r3]
 8003d2c:	b2d9      	uxtb	r1, r3
 8003d2e:	2300      	movs	r3, #0
 8003d30:	2200      	movs	r2, #0
 8003d32:	f002 fa01 	bl	8006138 <i2cSendByteToSlaveReg>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003d40:	4bb6      	ldr	r3, [pc, #728]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	4bb4      	ldr	r3, [pc, #720]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d46:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4a:	b2d9      	uxtb	r1, r3
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	22ff      	movs	r2, #255	; 0xff
 8003d50:	f002 f9f2 	bl	8006138 <i2cSendByteToSlaveReg>
 8003d54:	4603      	mov	r3, r0
 8003d56:	461a      	mov	r2, r3
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_RANGE_CONFIG, TOF_DEFAULT_0x00);
 8003d5e:	4baf      	ldr	r3, [pc, #700]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	4bad      	ldr	r3, [pc, #692]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d64:	f993 3000 	ldrsb.w	r3, [r3]
 8003d68:	b2d9      	uxtb	r1, r3
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2209      	movs	r2, #9
 8003d6e:	f002 f9e3 	bl	8006138 <i2cSendByteToSlaveReg>
 8003d72:	4603      	mov	r3, r0
 8003d74:	461a      	mov	r2, r3
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x10, TOF_DEFAULT_0x00);
 8003d7c:	4ba7      	ldr	r3, [pc, #668]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	4ba5      	ldr	r3, [pc, #660]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003d82:	f993 3000 	ldrsb.w	r3, [r3]
 8003d86:	b2d9      	uxtb	r1, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	f002 f9d4 	bl	8006138 <i2cSendByteToSlaveReg>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	4013      	ands	r3, r2
 8003d98:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x11, TOF_DEFAULT_0x00);
 8003d9a:	4ba0      	ldr	r3, [pc, #640]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	4b9e      	ldr	r3, [pc, #632]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003da0:	f993 3000 	ldrsb.w	r3, [r3]
 8003da4:	b2d9      	uxtb	r1, r3
 8003da6:	2300      	movs	r3, #0
 8003da8:	2211      	movs	r2, #17
 8003daa:	f002 f9c5 	bl	8006138 <i2cSendByteToSlaveReg>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	4013      	ands	r3, r2
 8003db6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x24, TOF_DEFAULT_0x01);
 8003db8:	4b98      	ldr	r3, [pc, #608]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	4b96      	ldr	r3, [pc, #600]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003dbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc2:	b2d9      	uxtb	r1, r3
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	2224      	movs	r2, #36	; 0x24
 8003dc8:	f002 f9b6 	bl	8006138 <i2cSendByteToSlaveReg>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x25, TOF_DEFAULT_0xFF);
 8003dd6:	4b91      	ldr	r3, [pc, #580]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	4b8f      	ldr	r3, [pc, #572]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8003de0:	b2d9      	uxtb	r1, r3
 8003de2:	23ff      	movs	r3, #255	; 0xff
 8003de4:	2225      	movs	r2, #37	; 0x25
 8003de6:	f002 f9a7 	bl	8006138 <i2cSendByteToSlaveReg>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	4013      	ands	r3, r2
 8003df2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x75, TOF_DEFAULT_0x00);
 8003df4:	4b89      	ldr	r3, [pc, #548]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	4b87      	ldr	r3, [pc, #540]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8003dfe:	b2d9      	uxtb	r1, r3
 8003e00:	2300      	movs	r3, #0
 8003e02:	2275      	movs	r2, #117	; 0x75
 8003e04:	f002 f998 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003e12:	4b82      	ldr	r3, [pc, #520]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	4b80      	ldr	r3, [pc, #512]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003e18:	f993 3000 	ldrsb.w	r3, [r3]
 8003e1c:	b2d9      	uxtb	r1, r3
 8003e1e:	2301      	movs	r3, #1
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	f002 f989 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, TOF_DEFAULT_0x2C);
 8003e30:	4b7a      	ldr	r3, [pc, #488]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	4b78      	ldr	r3, [pc, #480]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003e36:	f993 3000 	ldrsb.w	r3, [r3]
 8003e3a:	b2d9      	uxtb	r1, r3
 8003e3c:	232c      	movs	r3, #44	; 0x2c
 8003e3e:	224e      	movs	r2, #78	; 0x4e
 8003e40:	f002 f97a 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x00);
 8003e4e:	4b73      	ldr	r3, [pc, #460]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	4b71      	ldr	r3, [pc, #452]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003e54:	f993 3000 	ldrsb.w	r3, [r3]
 8003e58:	b2d9      	uxtb	r1, r3
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2248      	movs	r2, #72	; 0x48
 8003e5e:	f002 f96b 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x20);
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	4b69      	ldr	r3, [pc, #420]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003e72:	f993 3000 	ldrsb.w	r3, [r3]
 8003e76:	b2d9      	uxtb	r1, r3
 8003e78:	2320      	movs	r3, #32
 8003e7a:	2230      	movs	r2, #48	; 0x30
 8003e7c:	f002 f95c 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	4013      	ands	r3, r2
 8003e88:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003e8a:	4b64      	ldr	r3, [pc, #400]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	4b62      	ldr	r3, [pc, #392]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003e90:	f993 3000 	ldrsb.w	r3, [r3]
 8003e94:	b2d9      	uxtb	r1, r3
 8003e96:	2300      	movs	r3, #0
 8003e98:	22ff      	movs	r2, #255	; 0xff
 8003e9a:	f002 f94d 	bl	8006138 <i2cSendByteToSlaveReg>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x09);
 8003ea8:	4b5c      	ldr	r3, [pc, #368]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	4b5a      	ldr	r3, [pc, #360]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003eae:	f993 3000 	ldrsb.w	r3, [r3]
 8003eb2:	b2d9      	uxtb	r1, r3
 8003eb4:	2309      	movs	r3, #9
 8003eb6:	2230      	movs	r2, #48	; 0x30
 8003eb8:	f002 f93e 	bl	8006138 <i2cSendByteToSlaveReg>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x54, TOF_DEFAULT_0x00);
 8003ec6:	4b55      	ldr	r3, [pc, #340]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed0:	b2d9      	uxtb	r1, r3
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2254      	movs	r2, #84	; 0x54
 8003ed6:	f002 f92f 	bl	8006138 <i2cSendByteToSlaveReg>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 8003ee4:	4b4d      	ldr	r3, [pc, #308]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003eea:	f993 3000 	ldrsb.w	r3, [r3]
 8003eee:	b2d9      	uxtb	r1, r3
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	2231      	movs	r2, #49	; 0x31
 8003ef4:	f002 f920 	bl	8006138 <i2cSendByteToSlaveReg>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	461a      	mov	r2, r3
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	4013      	ands	r3, r2
 8003f00:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_VCSEL_WIDTH, TOF_DEFAULT_0x03);
 8003f02:	4b46      	ldr	r3, [pc, #280]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	4b44      	ldr	r3, [pc, #272]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f08:	f993 3000 	ldrsb.w	r3, [r3]
 8003f0c:	b2d9      	uxtb	r1, r3
 8003f0e:	2303      	movs	r3, #3
 8003f10:	2232      	movs	r2, #50	; 0x32
 8003f12:	f002 f911 	bl	8006138 <i2cSendByteToSlaveReg>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x83);
 8003f20:	4b3e      	ldr	r3, [pc, #248]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	4b3c      	ldr	r3, [pc, #240]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f26:	f993 3000 	ldrsb.w	r3, [r3]
 8003f2a:	b2d9      	uxtb	r1, r3
 8003f2c:	2383      	movs	r3, #131	; 0x83
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	f002 f902 	bl	8006138 <i2cSendByteToSlaveReg>
 8003f34:	4603      	mov	r3, r0
 8003f36:	461a      	mov	r2, r3
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x25);
 8003f3e:	4b37      	ldr	r3, [pc, #220]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	4b35      	ldr	r3, [pc, #212]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f44:	f993 3000 	ldrsb.w	r3, [r3]
 8003f48:	b2d9      	uxtb	r1, r3
 8003f4a:	2325      	movs	r3, #37	; 0x25
 8003f4c:	2246      	movs	r2, #70	; 0x46
 8003f4e:	f002 f8f3 	bl	8006138 <i2cSendByteToSlaveReg>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_CONTROL, TOF_DEFAULT_0x00);
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f62:	f993 3000 	ldrsb.w	r3, [r3]
 8003f66:	b2d9      	uxtb	r1, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2260      	movs	r2, #96	; 0x60
 8003f6c:	f002 f8e4 	bl	8006138 <i2cSendByteToSlaveReg>
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	4013      	ands	r3, r2
 8003f78:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 8003f7a:	4b28      	ldr	r3, [pc, #160]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f7c:	6818      	ldr	r0, [r3, #0]
 8003f7e:	4b26      	ldr	r3, [pc, #152]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f80:	f993 3000 	ldrsb.w	r3, [r3]
 8003f84:	b2d9      	uxtb	r1, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	2227      	movs	r2, #39	; 0x27
 8003f8a:	f002 f8d5 	bl	8006138 <i2cSendByteToSlaveReg>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	461a      	mov	r2, r3
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	4013      	ands	r3, r2
 8003f96:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x06);
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003f9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003fa2:	b2d9      	uxtb	r1, r3
 8003fa4:	2306      	movs	r3, #6
 8003fa6:	2250      	movs	r2, #80	; 0x50
 8003fa8:	f002 f8c6 	bl	8006138 <i2cSendByteToSlaveReg>
 8003fac:	4603      	mov	r3, r0
 8003fae:	461a      	mov	r2, r3
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x00);
 8003fb6:	4b19      	ldr	r3, [pc, #100]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	4b17      	ldr	r3, [pc, #92]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc0:	b2d9      	uxtb	r1, r3
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2251      	movs	r2, #81	; 0x51
 8003fc6:	f002 f8b7 	bl	8006138 <i2cSendByteToSlaveReg>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	461a      	mov	r2, r3
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0x96);
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003fda:	f993 3000 	ldrsb.w	r3, [r3]
 8003fde:	b2d9      	uxtb	r1, r3
 8003fe0:	2396      	movs	r3, #150	; 0x96
 8003fe2:	2252      	movs	r2, #82	; 0x52
 8003fe4:	f002 f8a8 	bl	8006138 <i2cSendByteToSlaveReg>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	461a      	mov	r2, r3
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	4b08      	ldr	r3, [pc, #32]	; (8004018 <TOF_load_default_tuning_settings+0x328>)
 8003ff8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ffc:	b2d9      	uxtb	r1, r3
 8003ffe:	2308      	movs	r3, #8
 8004000:	2256      	movs	r2, #86	; 0x56
 8004002:	f002 f899 	bl	8006138 <i2cSendByteToSlaveReg>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	4013      	ands	r3, r2
 800400e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x30);
 8004010:	4b02      	ldr	r3, [pc, #8]	; (800401c <TOF_load_default_tuning_settings+0x32c>)
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	e004      	b.n	8004020 <TOF_load_default_tuning_settings+0x330>
 8004016:	bf00      	nop
 8004018:	20000048 	.word	0x20000048
 800401c:	20000298 	.word	0x20000298
 8004020:	4bc9      	ldr	r3, [pc, #804]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004022:	f993 3000 	ldrsb.w	r3, [r3]
 8004026:	b2d9      	uxtb	r1, r3
 8004028:	2330      	movs	r3, #48	; 0x30
 800402a:	2257      	movs	r2, #87	; 0x57
 800402c:	f002 f884 	bl	8006138 <i2cSendByteToSlaveReg>
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	4013      	ands	r3, r2
 8004038:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_HI, TOF_DEFAULT_0x00);
 800403a:	4bc4      	ldr	r3, [pc, #784]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800403c:	6818      	ldr	r0, [r3, #0]
 800403e:	4bc2      	ldr	r3, [pc, #776]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004040:	f993 3000 	ldrsb.w	r3, [r3]
 8004044:	b2d9      	uxtb	r1, r3
 8004046:	2300      	movs	r3, #0
 8004048:	2261      	movs	r2, #97	; 0x61
 800404a:	f002 f875 	bl	8006138 <i2cSendByteToSlaveReg>
 800404e:	4603      	mov	r3, r0
 8004050:	461a      	mov	r2, r3
 8004052:	7bfb      	ldrb	r3, [r7, #15]
 8004054:	4013      	ands	r3, r2
 8004056:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_LO, TOF_DEFAULT_0x00);
 8004058:	4bbc      	ldr	r3, [pc, #752]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4bba      	ldr	r3, [pc, #744]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800405e:	f993 3000 	ldrsb.w	r3, [r3]
 8004062:	b2d9      	uxtb	r1, r3
 8004064:	2300      	movs	r3, #0
 8004066:	2262      	movs	r2, #98	; 0x62
 8004068:	f002 f866 	bl	8006138 <i2cSendByteToSlaveReg>
 800406c:	4603      	mov	r3, r0
 800406e:	461a      	mov	r2, r3
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	4013      	ands	r3, r2
 8004074:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8004076:	4bb5      	ldr	r3, [pc, #724]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	4bb3      	ldr	r3, [pc, #716]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800407c:	f993 3000 	ldrsb.w	r3, [r3]
 8004080:	b2d9      	uxtb	r1, r3
 8004082:	2300      	movs	r3, #0
 8004084:	2264      	movs	r2, #100	; 0x64
 8004086:	f002 f857 	bl	8006138 <i2cSendByteToSlaveReg>
 800408a:	4603      	mov	r3, r0
 800408c:	461a      	mov	r2, r3
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	4013      	ands	r3, r2
 8004092:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x65, TOF_DEFAULT_0x00);
 8004094:	4bad      	ldr	r3, [pc, #692]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	4bab      	ldr	r3, [pc, #684]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800409a:	f993 3000 	ldrsb.w	r3, [r3]
 800409e:	b2d9      	uxtb	r1, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	2265      	movs	r2, #101	; 0x65
 80040a4:	f002 f848 	bl	8006138 <i2cSendByteToSlaveReg>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	4013      	ands	r3, r2
 80040b0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x66, TOF_DEFAULT_0xA0);
 80040b2:	4ba6      	ldr	r3, [pc, #664]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80040b4:	6818      	ldr	r0, [r3, #0]
 80040b6:	4ba4      	ldr	r3, [pc, #656]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80040b8:	f993 3000 	ldrsb.w	r3, [r3]
 80040bc:	b2d9      	uxtb	r1, r3
 80040be:	23a0      	movs	r3, #160	; 0xa0
 80040c0:	2266      	movs	r2, #102	; 0x66
 80040c2:	f002 f839 	bl	8006138 <i2cSendByteToSlaveReg>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	4013      	ands	r3, r2
 80040ce:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80040d0:	4b9e      	ldr	r3, [pc, #632]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	4b9c      	ldr	r3, [pc, #624]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80040d6:	f993 3000 	ldrsb.w	r3, [r3]
 80040da:	b2d9      	uxtb	r1, r3
 80040dc:	2301      	movs	r3, #1
 80040de:	22ff      	movs	r2, #255	; 0xff
 80040e0:	f002 f82a 	bl	8006138 <i2cSendByteToSlaveReg>
 80040e4:	4603      	mov	r3, r0
 80040e6:	461a      	mov	r2, r3
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	4013      	ands	r3, r2
 80040ec:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x22, TOF_DEFAULT_0x32);
 80040ee:	4b97      	ldr	r3, [pc, #604]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	4b95      	ldr	r3, [pc, #596]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80040f4:	f993 3000 	ldrsb.w	r3, [r3]
 80040f8:	b2d9      	uxtb	r1, r3
 80040fa:	2332      	movs	r3, #50	; 0x32
 80040fc:	2222      	movs	r2, #34	; 0x22
 80040fe:	f002 f81b 	bl	8006138 <i2cSendByteToSlaveReg>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	4013      	ands	r3, r2
 800410a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x14);
 800410c:	4b8f      	ldr	r3, [pc, #572]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	4b8d      	ldr	r3, [pc, #564]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004112:	f993 3000 	ldrsb.w	r3, [r3]
 8004116:	b2d9      	uxtb	r1, r3
 8004118:	2314      	movs	r3, #20
 800411a:	2247      	movs	r2, #71	; 0x47
 800411c:	f002 f80c 	bl	8006138 <i2cSendByteToSlaveReg>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	4013      	ands	r3, r2
 8004128:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x49, TOF_DEFAULT_0xFF);
 800412a:	4b88      	ldr	r3, [pc, #544]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	4b86      	ldr	r3, [pc, #536]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004130:	f993 3000 	ldrsb.w	r3, [r3]
 8004134:	b2d9      	uxtb	r1, r3
 8004136:	23ff      	movs	r3, #255	; 0xff
 8004138:	2249      	movs	r2, #73	; 0x49
 800413a:	f001 fffd 	bl	8006138 <i2cSendByteToSlaveReg>
 800413e:	4603      	mov	r3, r0
 8004140:	461a      	mov	r2, r3
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	4013      	ands	r3, r2
 8004146:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4A, TOF_DEFAULT_0x00);
 8004148:	4b80      	ldr	r3, [pc, #512]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	4b7e      	ldr	r3, [pc, #504]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800414e:	f993 3000 	ldrsb.w	r3, [r3]
 8004152:	b2d9      	uxtb	r1, r3
 8004154:	2300      	movs	r3, #0
 8004156:	224a      	movs	r2, #74	; 0x4a
 8004158:	f001 ffee 	bl	8006138 <i2cSendByteToSlaveReg>
 800415c:	4603      	mov	r3, r0
 800415e:	461a      	mov	r2, r3
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	4013      	ands	r3, r2
 8004164:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004166:	4b79      	ldr	r3, [pc, #484]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	4b77      	ldr	r3, [pc, #476]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800416c:	f993 3000 	ldrsb.w	r3, [r3]
 8004170:	b2d9      	uxtb	r1, r3
 8004172:	2300      	movs	r3, #0
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	f001 ffdf 	bl	8006138 <i2cSendByteToSlaveReg>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	4013      	ands	r3, r2
 8004182:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7A, TOF_DEFAULT_0x0A);  //!< TF_July25 data changed form 0xA0 to 0x0A
 8004184:	4b71      	ldr	r3, [pc, #452]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	4b6f      	ldr	r3, [pc, #444]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800418a:	f993 3000 	ldrsb.w	r3, [r3]
 800418e:	b2d9      	uxtb	r1, r3
 8004190:	230a      	movs	r3, #10
 8004192:	227a      	movs	r2, #122	; 0x7a
 8004194:	f001 ffd0 	bl	8006138 <i2cSendByteToSlaveReg>
 8004198:	4603      	mov	r3, r0
 800419a:	461a      	mov	r2, r3
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	4013      	ands	r3, r2
 80041a0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7B, TOF_DEFAULT_0x00);
 80041a2:	4b6a      	ldr	r3, [pc, #424]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	4b68      	ldr	r3, [pc, #416]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80041a8:	f993 3000 	ldrsb.w	r3, [r3]
 80041ac:	b2d9      	uxtb	r1, r3
 80041ae:	2300      	movs	r3, #0
 80041b0:	227b      	movs	r2, #123	; 0x7b
 80041b2:	f001 ffc1 	bl	8006138 <i2cSendByteToSlaveReg>
 80041b6:	4603      	mov	r3, r0
 80041b8:	461a      	mov	r2, r3
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	4013      	ands	r3, r2
 80041be:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x78, TOF_DEFAULT_0x21);
 80041c0:	4b62      	ldr	r3, [pc, #392]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80041c6:	f993 3000 	ldrsb.w	r3, [r3]
 80041ca:	b2d9      	uxtb	r1, r3
 80041cc:	2321      	movs	r3, #33	; 0x21
 80041ce:	2278      	movs	r2, #120	; 0x78
 80041d0:	f001 ffb2 	bl	8006138 <i2cSendByteToSlaveReg>
 80041d4:	4603      	mov	r3, r0
 80041d6:	461a      	mov	r2, r3
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	4013      	ands	r3, r2
 80041dc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80041de:	4b5b      	ldr	r3, [pc, #364]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	4b59      	ldr	r3, [pc, #356]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80041e4:	f993 3000 	ldrsb.w	r3, [r3]
 80041e8:	b2d9      	uxtb	r1, r3
 80041ea:	2301      	movs	r3, #1
 80041ec:	22ff      	movs	r2, #255	; 0xff
 80041ee:	f001 ffa3 	bl	8006138 <i2cSendByteToSlaveReg>
 80041f2:	4603      	mov	r3, r0
 80041f4:	461a      	mov	r2, r3
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	4013      	ands	r3, r2
 80041fa:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x23, TOF_DEFAULT_0x34);
 80041fc:	4b53      	ldr	r3, [pc, #332]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	4b51      	ldr	r3, [pc, #324]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004202:	f993 3000 	ldrsb.w	r3, [r3]
 8004206:	b2d9      	uxtb	r1, r3
 8004208:	2334      	movs	r3, #52	; 0x34
 800420a:	2223      	movs	r2, #35	; 0x23
 800420c:	f001 ff94 	bl	8006138 <i2cSendByteToSlaveReg>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	4013      	ands	r3, r2
 8004218:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x42, TOF_DEFAULT_0x00);
 800421a:	4b4c      	ldr	r3, [pc, #304]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	4b4a      	ldr	r3, [pc, #296]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004220:	f993 3000 	ldrsb.w	r3, [r3]
 8004224:	b2d9      	uxtb	r1, r3
 8004226:	2300      	movs	r3, #0
 8004228:	2242      	movs	r2, #66	; 0x42
 800422a:	f001 ff85 	bl	8006138 <i2cSendByteToSlaveReg>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	4013      	ands	r3, r2
 8004236:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0xFF);
 8004238:	4b44      	ldr	r3, [pc, #272]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	4b42      	ldr	r3, [pc, #264]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800423e:	f993 3000 	ldrsb.w	r3, [r3]
 8004242:	b2d9      	uxtb	r1, r3
 8004244:	23ff      	movs	r3, #255	; 0xff
 8004246:	2244      	movs	r2, #68	; 0x44
 8004248:	f001 ff76 	bl	8006138 <i2cSendByteToSlaveReg>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	4013      	ands	r3, r2
 8004254:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x26);
 8004256:	4b3d      	ldr	r3, [pc, #244]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800425c:	f993 3000 	ldrsb.w	r3, [r3]
 8004260:	b2d9      	uxtb	r1, r3
 8004262:	2326      	movs	r3, #38	; 0x26
 8004264:	2245      	movs	r2, #69	; 0x45
 8004266:	f001 ff67 	bl	8006138 <i2cSendByteToSlaveReg>
 800426a:	4603      	mov	r3, r0
 800426c:	461a      	mov	r2, r3
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	4013      	ands	r3, r2
 8004272:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x05);
 8004274:	4b35      	ldr	r3, [pc, #212]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	4b33      	ldr	r3, [pc, #204]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800427a:	f993 3000 	ldrsb.w	r3, [r3]
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	2305      	movs	r3, #5
 8004282:	2246      	movs	r2, #70	; 0x46
 8004284:	f001 ff58 	bl	8006138 <i2cSendByteToSlaveReg>
 8004288:	4603      	mov	r3, r0
 800428a:	461a      	mov	r2, r3
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	4013      	ands	r3, r2
 8004290:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x40);
 8004292:	4b2e      	ldr	r3, [pc, #184]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	4b2c      	ldr	r3, [pc, #176]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004298:	f993 3000 	ldrsb.w	r3, [r3]
 800429c:	b2d9      	uxtb	r1, r3
 800429e:	2340      	movs	r3, #64	; 0x40
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	f001 ff49 	bl	8006138 <i2cSendByteToSlaveReg>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
 80042ac:	4013      	ands	r3, r2
 80042ae:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_THRESH_LOW, TOF_DEFAULT_0x06);
 80042b0:	4b26      	ldr	r3, [pc, #152]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80042b6:	f993 3000 	ldrsb.w	r3, [r3]
 80042ba:	b2d9      	uxtb	r1, r3
 80042bc:	2306      	movs	r3, #6
 80042be:	220e      	movs	r2, #14
 80042c0:	f001 ff3a 	bl	8006138 <i2cSendByteToSlaveReg>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4013      	ands	r3, r2
 80042cc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x20, TOF_DEFAULT_0x1A);
 80042ce:	4b1f      	ldr	r3, [pc, #124]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80042d4:	f993 3000 	ldrsb.w	r3, [r3]
 80042d8:	b2d9      	uxtb	r1, r3
 80042da:	231a      	movs	r3, #26
 80042dc:	2220      	movs	r2, #32
 80042de:	f001 ff2b 	bl	8006138 <i2cSendByteToSlaveReg>
 80042e2:	4603      	mov	r3, r0
 80042e4:	461a      	mov	r2, r3
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	4013      	ands	r3, r2
 80042ea:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x43, TOF_DEFAULT_0x40);
 80042ec:	4b17      	ldr	r3, [pc, #92]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 80042f2:	f993 3000 	ldrsb.w	r3, [r3]
 80042f6:	b2d9      	uxtb	r1, r3
 80042f8:	2340      	movs	r3, #64	; 0x40
 80042fa:	2243      	movs	r2, #67	; 0x43
 80042fc:	f001 ff1c 	bl	8006138 <i2cSendByteToSlaveReg>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	7bfb      	ldrb	r3, [r7, #15]
 8004306:	4013      	ands	r3, r2
 8004308:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 800430a:	4b10      	ldr	r3, [pc, #64]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	4b0e      	ldr	r3, [pc, #56]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 8004310:	f993 3000 	ldrsb.w	r3, [r3]
 8004314:	b2d9      	uxtb	r1, r3
 8004316:	2300      	movs	r3, #0
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	f001 ff0d 	bl	8006138 <i2cSendByteToSlaveReg>
 800431e:	4603      	mov	r3, r0
 8004320:	461a      	mov	r2, r3
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	4013      	ands	r3, r2
 8004326:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x34, TOF_DEFAULT_0x03);
 8004328:	4b08      	ldr	r3, [pc, #32]	; (800434c <TOF_load_default_tuning_settings+0x65c>)
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	4b06      	ldr	r3, [pc, #24]	; (8004348 <TOF_load_default_tuning_settings+0x658>)
 800432e:	f993 3000 	ldrsb.w	r3, [r3]
 8004332:	b2d9      	uxtb	r1, r3
 8004334:	2303      	movs	r3, #3
 8004336:	2234      	movs	r2, #52	; 0x34
 8004338:	f001 fefe 	bl	8006138 <i2cSendByteToSlaveReg>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	4013      	ands	r3, r2
 8004344:	e004      	b.n	8004350 <TOF_load_default_tuning_settings+0x660>
 8004346:	bf00      	nop
 8004348:	20000048 	.word	0x20000048
 800434c:	20000298 	.word	0x20000298
 8004350:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x35, TOF_DEFAULT_0x44);
 8004352:	4bc8      	ldr	r3, [pc, #800]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	4bc8      	ldr	r3, [pc, #800]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004358:	f993 3000 	ldrsb.w	r3, [r3]
 800435c:	b2d9      	uxtb	r1, r3
 800435e:	2344      	movs	r3, #68	; 0x44
 8004360:	2235      	movs	r2, #53	; 0x35
 8004362:	f001 fee9 	bl	8006138 <i2cSendByteToSlaveReg>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	4013      	ands	r3, r2
 800436e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8004370:	4bc0      	ldr	r3, [pc, #768]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004372:	6818      	ldr	r0, [r3, #0]
 8004374:	4bc0      	ldr	r3, [pc, #768]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004376:	f993 3000 	ldrsb.w	r3, [r3]
 800437a:	b2d9      	uxtb	r1, r3
 800437c:	2301      	movs	r3, #1
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	f001 feda 	bl	8006138 <i2cSendByteToSlaveReg>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	4013      	ands	r3, r2
 800438c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 800438e:	4bb9      	ldr	r3, [pc, #740]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	4bb9      	ldr	r3, [pc, #740]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004394:	f993 3000 	ldrsb.w	r3, [r3]
 8004398:	b2d9      	uxtb	r1, r3
 800439a:	2304      	movs	r3, #4
 800439c:	2231      	movs	r2, #49	; 0x31
 800439e:	f001 fecb 	bl	8006138 <i2cSendByteToSlaveReg>
 80043a2:	4603      	mov	r3, r0
 80043a4:	461a      	mov	r2, r3
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	4013      	ands	r3, r2
 80043aa:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4B, TOF_DEFAULT_0x09);
 80043ac:	4bb1      	ldr	r3, [pc, #708]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80043ae:	6818      	ldr	r0, [r3, #0]
 80043b0:	4bb1      	ldr	r3, [pc, #708]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80043b2:	f993 3000 	ldrsb.w	r3, [r3]
 80043b6:	b2d9      	uxtb	r1, r3
 80043b8:	2309      	movs	r3, #9
 80043ba:	224b      	movs	r2, #75	; 0x4b
 80043bc:	f001 febc 	bl	8006138 <i2cSendByteToSlaveReg>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461a      	mov	r2, r3
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4013      	ands	r3, r2
 80043c8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4C, TOF_DEFAULT_0x05);
 80043ca:	4baa      	ldr	r3, [pc, #680]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	4baa      	ldr	r3, [pc, #680]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80043d0:	f993 3000 	ldrsb.w	r3, [r3]
 80043d4:	b2d9      	uxtb	r1, r3
 80043d6:	2305      	movs	r3, #5
 80043d8:	224c      	movs	r2, #76	; 0x4c
 80043da:	f001 fead 	bl	8006138 <i2cSendByteToSlaveReg>
 80043de:	4603      	mov	r3, r0
 80043e0:	461a      	mov	r2, r3
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	4013      	ands	r3, r2
 80043e6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4D, TOF_DEFAULT_0x04);
 80043e8:	4ba2      	ldr	r3, [pc, #648]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	4ba2      	ldr	r3, [pc, #648]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80043ee:	f993 3000 	ldrsb.w	r3, [r3]
 80043f2:	b2d9      	uxtb	r1, r3
 80043f4:	2304      	movs	r3, #4
 80043f6:	224d      	movs	r2, #77	; 0x4d
 80043f8:	f001 fe9e 	bl	8006138 <i2cSendByteToSlaveReg>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4013      	ands	r3, r2
 8004404:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004406:	4b9b      	ldr	r3, [pc, #620]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	4b9b      	ldr	r3, [pc, #620]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 800440c:	f993 3000 	ldrsb.w	r3, [r3]
 8004410:	b2d9      	uxtb	r1, r3
 8004412:	2300      	movs	r3, #0
 8004414:	22ff      	movs	r2, #255	; 0xff
 8004416:	f001 fe8f 	bl	8006138 <i2cSendByteToSlaveReg>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	4013      	ands	r3, r2
 8004422:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8004424:	4b93      	ldr	r3, [pc, #588]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4b93      	ldr	r3, [pc, #588]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 800442a:	f993 3000 	ldrsb.w	r3, [r3]
 800442e:	b2d9      	uxtb	r1, r3
 8004430:	2300      	movs	r3, #0
 8004432:	2244      	movs	r2, #68	; 0x44
 8004434:	f001 fe80 	bl	8006138 <i2cSendByteToSlaveReg>
 8004438:	4603      	mov	r3, r0
 800443a:	461a      	mov	r2, r3
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4013      	ands	r3, r2
 8004440:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x20);
 8004442:	4b8c      	ldr	r3, [pc, #560]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	4b8c      	ldr	r3, [pc, #560]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004448:	f993 3000 	ldrsb.w	r3, [r3]
 800444c:	b2d9      	uxtb	r1, r3
 800444e:	2320      	movs	r3, #32
 8004450:	2245      	movs	r2, #69	; 0x45
 8004452:	f001 fe71 	bl	8006138 <i2cSendByteToSlaveReg>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	4013      	ands	r3, r2
 800445e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8004460:	4b84      	ldr	r3, [pc, #528]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004466:	f993 3000 	ldrsb.w	r3, [r3]
 800446a:	b2d9      	uxtb	r1, r3
 800446c:	2308      	movs	r3, #8
 800446e:	2247      	movs	r2, #71	; 0x47
 8004470:	f001 fe62 	bl	8006138 <i2cSendByteToSlaveReg>
 8004474:	4603      	mov	r3, r0
 8004476:	461a      	mov	r2, r3
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	4013      	ands	r3, r2
 800447c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x28);
 800447e:	4b7d      	ldr	r3, [pc, #500]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	4b7d      	ldr	r3, [pc, #500]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004484:	f993 3000 	ldrsb.w	r3, [r3]
 8004488:	b2d9      	uxtb	r1, r3
 800448a:	2328      	movs	r3, #40	; 0x28
 800448c:	2248      	movs	r2, #72	; 0x48
 800448e:	f001 fe53 	bl	8006138 <i2cSendByteToSlaveReg>
 8004492:	4603      	mov	r3, r0
 8004494:	461a      	mov	r2, r3
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	4013      	ands	r3, r2
 800449a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 800449c:	4b75      	ldr	r3, [pc, #468]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	4b75      	ldr	r3, [pc, #468]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80044a2:	f993 3000 	ldrsb.w	r3, [r3]
 80044a6:	b2d9      	uxtb	r1, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	2267      	movs	r2, #103	; 0x67
 80044ac:	f001 fe44 	bl	8006138 <i2cSendByteToSlaveReg>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461a      	mov	r2, r3
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	4013      	ands	r3, r2
 80044b8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x04);
 80044ba:	4b6e      	ldr	r3, [pc, #440]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	4b6e      	ldr	r3, [pc, #440]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80044c0:	f993 3000 	ldrsb.w	r3, [r3]
 80044c4:	b2d9      	uxtb	r1, r3
 80044c6:	2304      	movs	r3, #4
 80044c8:	2270      	movs	r2, #112	; 0x70
 80044ca:	f001 fe35 	bl	8006138 <i2cSendByteToSlaveReg>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	4013      	ands	r3, r2
 80044d6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x01);
 80044d8:	4b66      	ldr	r3, [pc, #408]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	4b66      	ldr	r3, [pc, #408]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80044de:	f993 3000 	ldrsb.w	r3, [r3]
 80044e2:	b2d9      	uxtb	r1, r3
 80044e4:	2301      	movs	r3, #1
 80044e6:	2271      	movs	r2, #113	; 0x71
 80044e8:	f001 fe26 	bl	8006138 <i2cSendByteToSlaveReg>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	4013      	ands	r3, r2
 80044f4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0xFE);
 80044f6:	4b5f      	ldr	r3, [pc, #380]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80044fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004500:	b2d9      	uxtb	r1, r3
 8004502:	23fe      	movs	r3, #254	; 0xfe
 8004504:	2272      	movs	r2, #114	; 0x72
 8004506:	f001 fe17 	bl	8006138 <i2cSendByteToSlaveReg>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	4013      	ands	r3, r2
 8004512:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x76, TOF_DEFAULT_0x00);
 8004514:	4b57      	ldr	r3, [pc, #348]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	4b57      	ldr	r3, [pc, #348]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 800451a:	f993 3000 	ldrsb.w	r3, [r3]
 800451e:	b2d9      	uxtb	r1, r3
 8004520:	2300      	movs	r3, #0
 8004522:	2276      	movs	r2, #118	; 0x76
 8004524:	f001 fe08 	bl	8006138 <i2cSendByteToSlaveReg>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	4013      	ands	r3, r2
 8004530:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x77, TOF_DEFAULT_0x00);
 8004532:	4b50      	ldr	r3, [pc, #320]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	4b50      	ldr	r3, [pc, #320]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004538:	f993 3000 	ldrsb.w	r3, [r3]
 800453c:	b2d9      	uxtb	r1, r3
 800453e:	2300      	movs	r3, #0
 8004540:	2277      	movs	r2, #119	; 0x77
 8004542:	f001 fdf9 	bl	8006138 <i2cSendByteToSlaveReg>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	7bfb      	ldrb	r3, [r7, #15]
 800454c:	4013      	ands	r3, r2
 800454e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8004550:	4b48      	ldr	r3, [pc, #288]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	4b48      	ldr	r3, [pc, #288]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004556:	f993 3000 	ldrsb.w	r3, [r3]
 800455a:	b2d9      	uxtb	r1, r3
 800455c:	2301      	movs	r3, #1
 800455e:	22ff      	movs	r2, #255	; 0xff
 8004560:	f001 fdea 	bl	8006138 <i2cSendByteToSlaveReg>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	4013      	ands	r3, r2
 800456c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x0D, TOF_DEFAULT_0x01);
 800456e:	4b41      	ldr	r3, [pc, #260]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004574:	f993 3000 	ldrsb.w	r3, [r3]
 8004578:	b2d9      	uxtb	r1, r3
 800457a:	2301      	movs	r3, #1
 800457c:	220d      	movs	r2, #13
 800457e:	f001 fddb 	bl	8006138 <i2cSendByteToSlaveReg>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	4013      	ands	r3, r2
 800458a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	4b39      	ldr	r3, [pc, #228]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004592:	f993 3000 	ldrsb.w	r3, [r3]
 8004596:	b2d9      	uxtb	r1, r3
 8004598:	2300      	movs	r3, #0
 800459a:	22ff      	movs	r2, #255	; 0xff
 800459c:	f001 fdcc 	bl	8006138 <i2cSendByteToSlaveReg>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	4013      	ands	r3, r2
 80045a8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x01);
 80045aa:	4b32      	ldr	r3, [pc, #200]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	4b32      	ldr	r3, [pc, #200]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80045b0:	f993 3000 	ldrsb.w	r3, [r3]
 80045b4:	b2d9      	uxtb	r1, r3
 80045b6:	2301      	movs	r3, #1
 80045b8:	2280      	movs	r2, #128	; 0x80
 80045ba:	f001 fdbd 	bl	8006138 <i2cSendByteToSlaveReg>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	4013      	ands	r3, r2
 80045c6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, TOF_DEFAULT_0xF8);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80045ce:	f993 3000 	ldrsb.w	r3, [r3]
 80045d2:	b2d9      	uxtb	r1, r3
 80045d4:	23f8      	movs	r3, #248	; 0xf8
 80045d6:	2201      	movs	r2, #1
 80045d8:	f001 fdae 	bl	8006138 <i2cSendByteToSlaveReg>
 80045dc:	4603      	mov	r3, r0
 80045de:	461a      	mov	r2, r3
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	4013      	ands	r3, r2
 80045e4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80045e6:	4b23      	ldr	r3, [pc, #140]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	4b23      	ldr	r3, [pc, #140]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 80045ec:	f993 3000 	ldrsb.w	r3, [r3]
 80045f0:	b2d9      	uxtb	r1, r3
 80045f2:	2301      	movs	r3, #1
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	f001 fd9f 	bl	8006138 <i2cSendByteToSlaveReg>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	4013      	ands	r3, r2
 8004602:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x8E, TOF_DEFAULT_0x01);
 8004604:	4b1b      	ldr	r3, [pc, #108]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 800460a:	f993 3000 	ldrsb.w	r3, [r3]
 800460e:	b2d9      	uxtb	r1, r3
 8004610:	2301      	movs	r3, #1
 8004612:	228e      	movs	r2, #142	; 0x8e
 8004614:	f001 fd90 	bl	8006138 <i2cSendByteToSlaveReg>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	4013      	ands	r3, r2
 8004620:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x01);
 8004622:	4b14      	ldr	r3, [pc, #80]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	4b14      	ldr	r3, [pc, #80]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004628:	f993 3000 	ldrsb.w	r3, [r3]
 800462c:	b2d9      	uxtb	r1, r3
 800462e:	2301      	movs	r3, #1
 8004630:	2200      	movs	r2, #0
 8004632:	f001 fd81 	bl	8006138 <i2cSendByteToSlaveReg>
 8004636:	4603      	mov	r3, r0
 8004638:	461a      	mov	r2, r3
 800463a:	7bfb      	ldrb	r3, [r7, #15]
 800463c:	4013      	ands	r3, r2
 800463e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004640:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004646:	f993 3000 	ldrsb.w	r3, [r3]
 800464a:	b2d9      	uxtb	r1, r3
 800464c:	2300      	movs	r3, #0
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	f001 fd72 	bl	8006138 <i2cSendByteToSlaveReg>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	4013      	ands	r3, r2
 800465c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x00);
 800465e:	4b05      	ldr	r3, [pc, #20]	; (8004674 <TOF_load_default_tuning_settings+0x984>)
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <TOF_load_default_tuning_settings+0x988>)
 8004664:	f993 3000 	ldrsb.w	r3, [r3]
 8004668:	b2d9      	uxtb	r1, r3
 800466a:	2300      	movs	r3, #0
 800466c:	2280      	movs	r2, #128	; 0x80
 800466e:	f001 fd63 	bl	8006138 <i2cSendByteToSlaveReg>
 8004672:	e003      	b.n	800467c <TOF_load_default_tuning_settings+0x98c>
 8004674:	20000298 	.word	0x20000298
 8004678:	20000048 	.word	0x20000048
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	7bfb      	ldrb	r3, [r7, #15]
 8004682:	4013      	ands	r3, r2
 8004684:	73fb      	strb	r3, [r7, #15]

    if (success != I2C_OK)
 8004686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <TOF_load_default_tuning_settings+0x9a2>
	{
		return false;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <TOF_load_default_tuning_settings+0x9a4>
	}

	return true;
 8004692:	2301      	movs	r3, #1
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <TOF_set_sequence_steps_enabled>:
 *  														specific step in the sensor's operational sequence.
 *
 * @returns:     bool: true if the sequence configuration was successfully written to the sensor, otherwise false.
 */
bool TOF_set_sequence_steps_enabled(TOFSensor_t* TOFSENS, uint8_t sequence_step)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	889b      	ldrh	r3, [r3, #4]
 80046ac:	b25a      	sxtb	r2, r3
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <TOF_set_sequence_steps_enabled+0x50>)
 80046b0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <TOF_set_sequence_steps_enabled+0x54>)
 80046b8:	6013      	str	r3, [r2, #0]

	bool result = false;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <TOF_set_sequence_steps_enabled+0x54>)
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <TOF_set_sequence_steps_enabled+0x50>)
 80046c4:	f993 3000 	ldrsb.w	r3, [r3]
 80046c8:	b2d9      	uxtb	r1, r3
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f001 fd33 	bl	8006138 <i2cSendByteToSlaveReg>
 80046d2:	4603      	mov	r3, r0
 80046d4:	73bb      	strb	r3, [r7, #14]

	if(success == I2C_OK)
 80046d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <TOF_set_sequence_steps_enabled+0x46>
	{
		result = true;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20000048 	.word	0x20000048
 80046f0:	20000298 	.word	0x20000298

080046f4 <TOF_perform_single_ref_calibration>:
 *                  - TOF_CALIBRATION_TYPE_PHASE 			Calibrates phase measurements.
 *
 * @returns:     bool: true if the calibration was successfully performed, otherwise false.
 */
bool TOF_perform_single_ref_calibration(TOFSensor_t* TOFSENS, TOF_calibration_type_t calib_type)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	889b      	ldrh	r3, [r3, #4]
 8004704:	b25a      	sxtb	r2, r3
 8004706:	4b41      	ldr	r3, [pc, #260]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 8004708:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a40      	ldr	r2, [pc, #256]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 8004710:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success;

    uint8_t sysrange_start = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 800471a:	78fb      	ldrb	r3, [r7, #3]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <TOF_perform_single_ref_calibration+0x32>
 8004720:	2b01      	cmp	r3, #1
 8004722:	d005      	beq.n	8004730 <TOF_perform_single_ref_calibration+0x3c>
 8004724:	e009      	b.n	800473a <TOF_perform_single_ref_calibration+0x46>
    {
    case TOF_CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8004726:	2301      	movs	r3, #1
 8004728:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 800472a:	2341      	movs	r3, #65	; 0x41
 800472c:	73fb      	strb	r3, [r7, #15]
        break;
 800472e:	e004      	b.n	800473a <TOF_perform_single_ref_calibration+0x46>
    case TOF_CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8004730:	2302      	movs	r3, #2
 8004732:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8004734:	2301      	movs	r3, #1
 8004736:	73fb      	strb	r3, [r7, #15]
        break;
 8004738:	bf00      	nop
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_config);
 800473a:	4b35      	ldr	r3, [pc, #212]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	4b33      	ldr	r3, [pc, #204]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 8004740:	f993 3000 	ldrsb.w	r3, [r3]
 8004744:	b2d9      	uxtb	r1, r3
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	2201      	movs	r2, #1
 800474a:	f001 fcf5 	bl	8006138 <i2cSendByteToSlaveReg>
 800474e:	4603      	mov	r3, r0
 8004750:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 8004752:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <TOF_perform_single_ref_calibration+0x6a>
    {
        return false;
 800475a:	2300      	movs	r3, #0
 800475c:	e052      	b.n	8004804 <TOF_perform_single_ref_calibration+0x110>
    }
//ToDo Abfrage ob die jeweiligen Initialisierungen richtig gesetzt wurden.
    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, sysrange_start);
 800475e:	4b2c      	ldr	r3, [pc, #176]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	4b2a      	ldr	r3, [pc, #168]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 8004764:	f993 3000 	ldrsb.w	r3, [r3]
 8004768:	b2d9      	uxtb	r1, r3
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2200      	movs	r2, #0
 800476e:	f001 fce3 	bl	8006138 <i2cSendByteToSlaveReg>
 8004772:	4603      	mov	r3, r0
 8004774:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 8004776:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <TOF_perform_single_ref_calibration+0x8e>
    {
        return false;
 800477e:	2300      	movs	r3, #0
 8004780:	e040      	b.n	8004804 <TOF_perform_single_ref_calibration+0x110>

    /* Wait for interrupt */



    uint8_t interrupt_status = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	733b      	strb	r3, [r7, #12]
    do {		//Funktion in welcher der MCAL Fehler auftritt //ToDo i2cReadByteFromSlaveReg durch i2cBurstRegRead ersetzen

        //success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
        success = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status, 1);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 800478c:	f993 3000 	ldrsb.w	r3, [r3]
 8004790:	b2d9      	uxtb	r1, r3
 8004792:	f107 030c 	add.w	r3, r7, #12
 8004796:	2201      	movs	r2, #1
 8004798:	9200      	str	r2, [sp, #0]
 800479a:	2213      	movs	r2, #19
 800479c:	f001 fd86 	bl	80062ac <i2cBurstRegRead>
 80047a0:	4603      	mov	r3, r0
 80047a2:	737b      	strb	r3, [r7, #13]
    } while ((interrupt_status & 0x07) == 0);
 80047a4:	7b3b      	ldrb	r3, [r7, #12]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0eb      	beq.n	8004786 <TOF_perform_single_ref_calibration+0x92>

    //} while (success == I2C_OK && ((interrupt_status & 0x07) == 0));
    if (success != I2C_OK)
 80047ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <TOF_perform_single_ref_calibration+0xc6>
    {
        return false;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e024      	b.n	8004804 <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	4b13      	ldr	r3, [pc, #76]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 80047c0:	f993 3000 	ldrsb.w	r3, [r3]
 80047c4:	b2d9      	uxtb	r1, r3
 80047c6:	2301      	movs	r3, #1
 80047c8:	220b      	movs	r2, #11
 80047ca:	f001 fcb5 	bl	8006138 <i2cSendByteToSlaveReg>
 80047ce:	4603      	mov	r3, r0
 80047d0:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80047d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <TOF_perform_single_ref_calibration+0xea>
    {
        return false;
 80047da:	2300      	movs	r3, #0
 80047dc:	e012      	b.n	8004804 <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <TOF_perform_single_ref_calibration+0x11c>)
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <TOF_perform_single_ref_calibration+0x118>)
 80047e4:	f993 3000 	ldrsb.w	r3, [r3]
 80047e8:	b2d9      	uxtb	r1, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	2200      	movs	r2, #0
 80047ee:	f001 fca3 	bl	8006138 <i2cSendByteToSlaveReg>
 80047f2:	4603      	mov	r3, r0
 80047f4:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80047f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <TOF_perform_single_ref_calibration+0x10e>
    {
        return false;
 80047fe:	2300      	movs	r3, #0
 8004800:	e000      	b.n	8004804 <TOF_perform_single_ref_calibration+0x110>
    }

    return true;
 8004802:	2301      	movs	r3, #1
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000048 	.word	0x20000048
 8004810:	20000298 	.word	0x20000298

08004814 <TOF_perform_ref_calibration>:
 *               - After calibration, the sequence steps for measurement are re-enabled using
 *                 TOF_set_sequence_steps_enabled.
 *               - If any step in the calibration or configuration fails, the function returns false.
 */
bool TOF_perform_ref_calibration(TOFSensor_t* TOFSENS)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	889b      	ldrh	r3, [r3, #4]
 8004820:	b25a      	sxtb	r2, r3
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <TOF_perform_ref_calibration+0x6c>)
 8004824:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a16      	ldr	r2, [pc, #88]	; (8004884 <TOF_perform_ref_calibration+0x70>)
 800482c:	6013      	str	r3, [r2, #0]

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_VHV)) {
 800482e:	2100      	movs	r1, #0
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ff5f 	bl	80046f4 <TOF_perform_single_ref_calibration>
 8004836:	4603      	mov	r3, r0
 8004838:	f083 0301 	eor.w	r3, r3, #1
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <TOF_perform_ref_calibration+0x32>
		return false;
 8004842:	2300      	movs	r3, #0
 8004844:	e018      	b.n	8004878 <TOF_perform_ref_calibration+0x64>
	}

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_PHASE)) {		//Funktion in welcher der MCAL Fehler auftritt
 8004846:	2101      	movs	r1, #1
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ff53 	bl	80046f4 <TOF_perform_single_ref_calibration>
 800484e:	4603      	mov	r3, r0
 8004850:	f083 0301 	eor.w	r3, r3, #1
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <TOF_perform_ref_calibration+0x4a>
		return false;
 800485a:	2300      	movs	r3, #0
 800485c:	e00c      	b.n	8004878 <TOF_perform_ref_calibration+0x64>
	}


	/* Restore sequence steps enabled */

	if (!TOF_set_sequence_steps_enabled(TOFSENS, TOF_RANGE_SEQUENCE_STEP_DSS + TOF_RANGE_SEQUENCE_STEP_PRE_RANGE + TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
 800485e:	21e8      	movs	r1, #232	; 0xe8
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff1b 	bl	800469c <TOF_set_sequence_steps_enabled>
 8004866:	4603      	mov	r3, r0
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <TOF_perform_ref_calibration+0x62>
		return false;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <TOF_perform_ref_calibration+0x64>
	}

	return true;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000048 	.word	0x20000048
 8004884:	20000298 	.word	0x20000298

08004888 <TOF_init_device>:
 * @note:        - This function depends on several helper functions, each responsible for a specific initialization
 *                 task. If any step fails, the initialization halts and the function returns false.
 *               - Ensure the I2C communication setup is properly initialized before calling this function.
 */
bool TOF_init_device(TOFSensor_t* TOFSENS)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	889b      	ldrh	r3, [r3, #4]
 8004894:	b25a      	sxtb	r2, r3
 8004896:	4b27      	ldr	r3, [pc, #156]	; (8004934 <TOF_init_device+0xac>)
 8004898:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a26      	ldr	r2, [pc, #152]	; (8004938 <TOF_init_device+0xb0>)
 80048a0:	6013      	str	r3, [r2, #0]

	if (!TOF_data_init(TOFSENS))
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fe ff56 	bl	8003754 <TOF_data_init>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <TOF_init_device+0x30>
	{
		return false;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e038      	b.n	800492a <TOF_init_device+0xa2>
	}

	if (!TOF_set_spads_from_nvm(TOFSENS)) {
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff f92f 	bl	8003b1c <TOF_set_spads_from_nvm>
 80048be:	4603      	mov	r3, r0
 80048c0:	f083 0301 	eor.w	r3, r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <TOF_init_device+0x46>
		return false;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e02d      	b.n	800492a <TOF_init_device+0xa2>
	}

	if (!TOF_load_default_tuning_settings(TOFSENS))
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fa0e 	bl	8003cf0 <TOF_load_default_tuning_settings>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <TOF_init_device+0x5c>
	{
		return false;
 80048e0:	2300      	movs	r3, #0
 80048e2:	e022      	b.n	800492a <TOF_init_device+0xa2>
	}

	if (!TOF_configure_interrupt(TOFSENS))
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fe fe9f 	bl	8003628 <TOF_configure_interrupt>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f083 0301 	eor.w	r3, r3, #1
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <TOF_init_device+0x72>
	{
		return false;
 80048f6:	2300      	movs	r3, #0
 80048f8:	e017      	b.n	800492a <TOF_init_device+0xa2>
	}

	if (!TOF_set_sequence_steps_enabled(TOFSENS,
 80048fa:	21e8      	movs	r1, #232	; 0xe8
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fecd 	bl	800469c <TOF_set_sequence_steps_enabled>
 8004902:	4603      	mov	r3, r0
 8004904:	f083 0301 	eor.w	r3, r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <TOF_init_device+0x8a>
			TOF_RANGE_SEQUENCE_STEP_DSS +
			TOF_RANGE_SEQUENCE_STEP_PRE_RANGE +
			TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
		return false;
 800490e:	2300      	movs	r3, #0
 8004910:	e00b      	b.n	800492a <TOF_init_device+0xa2>
	}

    if (!TOF_perform_ref_calibration(TOFSENS))			//Funktion in welcher der MCAL Fehler auftritt
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff ff7e 	bl	8004814 <TOF_perform_ref_calibration>
 8004918:	4603      	mov	r3, r0
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d001      	beq.n	8004928 <TOF_init_device+0xa0>
    {
        return false;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <TOF_init_device+0xa2>
    }

	return true;
 8004928:	2301      	movs	r3, #1
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000048 	.word	0x20000048
 8004938:	20000298 	.word	0x20000298

0800493c <TOF_getMeasurement>:
 * @limitations:
 *               - If the range is out of the sensor's measurable distance, the value returned is defined
 *                 as TOF_VL53L0X_OUT_OF_RANGE.
 */
bool TOF_getMeasurement(TOFSensor_t* TOFSENS, uint16_t *range)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af02      	add	r7, sp, #8
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	I2C_RETURN_CODE_t i2c_return;
	TOF_address_used = TOFSENS->TOF_address_used;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	889b      	ldrh	r3, [r3, #4]
 800494a:	b25a      	sxtb	r2, r3
 800494c:	4b36      	ldr	r3, [pc, #216]	; (8004a28 <TOF_getMeasurement+0xec>)
 800494e:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a35      	ldr	r2, [pc, #212]	; (8004a2c <TOF_getMeasurement+0xf0>)
 8004956:	6013      	str	r3, [r2, #0]
	uint8_t interrupt_status[1];
	do
	{
		i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_RESULT_INTERRUPT_STATUS, interrupt_status, 1);
 8004958:	4b34      	ldr	r3, [pc, #208]	; (8004a2c <TOF_getMeasurement+0xf0>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <TOF_getMeasurement+0xec>)
 800495e:	f993 3000 	ldrsb.w	r3, [r3]
 8004962:	b2d9      	uxtb	r1, r3
 8004964:	f107 030c 	add.w	r3, r7, #12
 8004968:	2201      	movs	r2, #1
 800496a:	9200      	str	r2, [sp, #0]
 800496c:	2213      	movs	r2, #19
 800496e:	f001 fc9d 	bl	80062ac <i2cBurstRegRead>
 8004972:	4603      	mov	r3, r0
 8004974:	73fb      	strb	r3, [r7, #15]
	} while (i2c_return == I2C_OK && ((interrupt_status[0] & 0x07) == 0));
 8004976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d104      	bne.n	8004988 <TOF_getMeasurement+0x4c>
 800497e:	7b3b      	ldrb	r3, [r7, #12]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0e7      	beq.n	8004958 <TOF_getMeasurement+0x1c>
	if (i2c_return != I2C_OK)
 8004988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <TOF_getMeasurement+0x58>
	{
		return false;
 8004990:	2300      	movs	r3, #0
 8004992:	e045      	b.n	8004a20 <TOF_getMeasurement+0xe4>
	}

	uint8_t readBuffer[2];
	i2c_return = i2cBurstRegRead(
 8004994:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <TOF_getMeasurement+0xf0>)
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <TOF_getMeasurement+0xec>)
 800499a:	f993 3000 	ldrsb.w	r3, [r3]
 800499e:	b2d9      	uxtb	r1, r3
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	2202      	movs	r2, #2
 80049a6:	9200      	str	r2, [sp, #0]
 80049a8:	221e      	movs	r2, #30
 80049aa:	f001 fc7f 	bl	80062ac <i2cBurstRegRead>
 80049ae:	4603      	mov	r3, r0
 80049b0:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_RESULT_RANGE_STATUS + 10,
			readBuffer, 2);
	if (i2c_return != I2C_OK)
 80049b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <TOF_getMeasurement+0x82>
	{
		// returns false, if i2c communication was not successful
		return false;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e030      	b.n	8004a20 <TOF_getMeasurement+0xe4>
	}
	*range = (readBuffer[0] << 8) + readBuffer[1];
 80049be:	7a3b      	ldrb	r3, [r7, #8]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	7a7b      	ldrb	r3, [r7, #9]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	801a      	strh	r2, [r3, #0]

	TOFSENS->measuredRange = (uint32_t)readBuffer;
 80049d2:	f107 0208 	add.w	r2, r7, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	60da      	str	r2, [r3, #12]
	i2c_return = i2cSendByteToSlaveReg(
 80049da:	4b14      	ldr	r3, [pc, #80]	; (8004a2c <TOF_getMeasurement+0xf0>)
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <TOF_getMeasurement+0xec>)
 80049e0:	f993 3000 	ldrsb.w	r3, [r3]
 80049e4:	b2d9      	uxtb	r1, r3
 80049e6:	2301      	movs	r3, #1
 80049e8:	220b      	movs	r2, #11
 80049ea:	f001 fba5 	bl	8006138 <i2cSendByteToSlaveReg>
 80049ee:	4603      	mov	r3, r0
 80049f0:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
	if (i2c_return != I2C_OK)
 80049f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <TOF_getMeasurement+0xc2>
	{
		// returns false, if i2c communication was not successful
		return false;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e010      	b.n	8004a20 <TOF_getMeasurement+0xe4>
	}

	/* 8190 or 8191 may be returned when obstacle is out of range. */
	if (*range == 8190 || *range == 8191)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d005      	beq.n	8004a16 <TOF_getMeasurement+0xda>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d103      	bne.n	8004a1e <TOF_getMeasurement+0xe2>
	{
		*range = TOF_VL53L0X_OUT_OF_RANGE;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8004a1c:	801a      	strh	r2, [r3, #0]
	}

	return true;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000048 	.word	0x20000048
 8004a2c:	20000298 	.word	0x20000298

08004a30 <TOF_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the initialization was successful, otherwise false.
 */
bool TOF_init(TOFSensor_t* TOFSENS)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	889b      	ldrh	r3, [r3, #4]
 8004a3c:	b25a      	sxtb	r2, r3
 8004a3e:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <TOF_init+0x50>)
 8004a40:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a0f      	ldr	r2, [pc, #60]	; (8004a84 <TOF_init+0x54>)
 8004a48:	6013      	str	r3, [r2, #0]

	// Init i2c address and check connectivity
	if (!TOF_init_address(TOFSENS))
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe fe52 	bl	80036f4 <TOF_init_address>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <TOF_init+0x30>
	{
		return false;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e00b      	b.n	8004a78 <TOF_init+0x48>
	}

	//device initialization
	if (!TOF_init_device(TOFSENS))		//Funktion in welcher der MCAL Fehler auftritt
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff ff11 	bl	8004888 <TOF_init_device>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f083 0301 	eor.w	r3, r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <TOF_init+0x46>
	{
		return false;
 8004a72:	2300      	movs	r3, #0
 8004a74:	e000      	b.n	8004a78 <TOF_init+0x48>
	}

	// return true, if everything was fine
	return true;
 8004a76:	2301      	movs	r3, #1
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000048 	.word	0x20000048
 8004a84:	20000298 	.word	0x20000298

08004a88 <TOF_start_continuous>:
 * 				uint32_t period_ms							Measurement interval in milliseconds.
 *
 * @returns:     bool: true if continuous mode starts successfully, otherwise false.
 */
bool TOF_start_continuous(TOFSensor_t* TOFSENS)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b088      	sub	sp, #32
 8004a8c:	af02      	add	r7, sp, #8
 8004a8e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	889b      	ldrh	r3, [r3, #4]
 8004a94:	b25a      	sxtb	r2, r3
 8004a96:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004a98:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a67      	ldr	r2, [pc, #412]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004aa0:	6013      	str	r3, [r2, #0]

	uint32_t period_ms = TOFSENS->Ranging_Profile_time;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	617b      	str	r3, [r7, #20]
	I2C_RETURN_CODE_t i2c_return;

	TOF_address_used = TOFSENS->TOF_address_used;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	889b      	ldrh	r3, [r3, #4]
 8004aac:	b25a      	sxtb	r2, r3
 8004aae:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004ab0:	701a      	strb	r2, [r3, #0]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8004ab2:	4b62      	ldr	r3, [pc, #392]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004ab8:	f993 3000 	ldrsb.w	r3, [r3]
 8004abc:	b2d9      	uxtb	r1, r3
 8004abe:	2301      	movs	r3, #1
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	f001 fb39 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	4b5b      	ldr	r3, [pc, #364]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004acc:	f993 3000 	ldrsb.w	r3, [r3]
 8004ad0:	b2d9      	uxtb	r1, r3
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	f001 fb2f 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8004ada:	4b58      	ldr	r3, [pc, #352]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ae4:	b2d9      	uxtb	r1, r3
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f001 fb25 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, TOF_stop_variable);
 8004aee:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	4b51      	ldr	r3, [pc, #324]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004af4:	f993 3000 	ldrsb.w	r3, [r3]
 8004af8:	b2d9      	uxtb	r1, r3
 8004afa:	4b51      	ldr	r3, [pc, #324]	; (8004c40 <TOF_start_continuous+0x1b8>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2291      	movs	r2, #145	; 0x91
 8004b00:	f001 fb1a 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8004b04:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004b06:	6818      	ldr	r0, [r3, #0]
 8004b08:	4b4b      	ldr	r3, [pc, #300]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8004b0e:	b2d9      	uxtb	r1, r3
 8004b10:	2301      	movs	r3, #1
 8004b12:	2200      	movs	r2, #0
 8004b14:	f001 fb10 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004b18:	4b48      	ldr	r3, [pc, #288]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004b1a:	6818      	ldr	r0, [r3, #0]
 8004b1c:	4b46      	ldr	r3, [pc, #280]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004b1e:	f993 3000 	ldrsb.w	r3, [r3]
 8004b22:	b2d9      	uxtb	r1, r3
 8004b24:	2300      	movs	r3, #0
 8004b26:	22ff      	movs	r2, #255	; 0xff
 8004b28:	f001 fb06 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8004b2c:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004b2e:	6818      	ldr	r0, [r3, #0]
 8004b30:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004b32:	f993 3000 	ldrsb.w	r3, [r3]
 8004b36:	b2d9      	uxtb	r1, r3
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2280      	movs	r2, #128	; 0x80
 8004b3c:	f001 fafc 	bl	8006138 <i2cSendByteToSlaveReg>

	if (period_ms != 0)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d066      	beq.n	8004c14 <TOF_start_continuous+0x18c>
	{
		// continuous timed mode

		uint8_t readBuffer[2];

		i2c_return = i2cBurstRegRead(
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	4b3b      	ldr	r3, [pc, #236]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8004b50:	b2d9      	uxtb	r1, r3
 8004b52:	f107 030c 	add.w	r3, r7, #12
 8004b56:	2202      	movs	r2, #2
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	22f8      	movs	r2, #248	; 0xf8
 8004b5c:	f001 fba6 	bl	80062ac <i2cBurstRegRead>
 8004b60:	4603      	mov	r3, r0
 8004b62:	74fb      	strb	r3, [r7, #19]
				TOF_i2c, TOF_address_used,
				TOF_REG_OSC_CALIBRATE_VAL,
				readBuffer, 2);
		if (i2c_return != I2C_OK)
 8004b64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <TOF_start_continuous+0xe8>
		{
			// returns false, if i2c communication was not successful
			return false;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e05f      	b.n	8004c30 <TOF_start_continuous+0x1a8>
		}

		uint16_t osc_calibrate_val = (readBuffer[0]<<8) + readBuffer[1];
 8004b70:	7b3b      	ldrb	r3, [r7, #12]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	7b7b      	ldrb	r3, [r7, #13]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	823b      	strh	r3, [r7, #16]

		if (osc_calibrate_val != 0)
 8004b80:	8a3b      	ldrh	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <TOF_start_continuous+0x108>
		{
			period_ms *= osc_calibrate_val;
 8004b86:	8a3a      	ldrh	r2, [r7, #16]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	617b      	str	r3, [r7, #20]
		}

		uint8_t bytes[4];

		bytes[0] = (period_ms >> 24) & 0xFF;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	0e1b      	lsrs	r3, r3, #24
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	723b      	strb	r3, [r7, #8]
		bytes[1] = (period_ms >> 16) & 0xFF;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	727b      	strb	r3, [r7, #9]
		bytes[2] = (period_ms >> 8) & 0xFF;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	0a1b      	lsrs	r3, r3, #8
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	72bb      	strb	r3, [r7, #10]
		bytes[3] = period_ms & 0xFF;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	72fb      	strb	r3, [r7, #11]

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD, bytes[0]);
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004bb4:	f993 3000 	ldrsb.w	r3, [r3]
 8004bb8:	b2d9      	uxtb	r1, r3
 8004bba:	7a3b      	ldrb	r3, [r7, #8]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	f001 fabb 	bl	8006138 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 1, bytes[1]);
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	4b1c      	ldr	r3, [pc, #112]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004bc8:	f993 3000 	ldrsb.w	r3, [r3]
 8004bcc:	b2d9      	uxtb	r1, r3
 8004bce:	7a7b      	ldrb	r3, [r7, #9]
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	f001 fab1 	bl	8006138 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 2, bytes[2]);
 8004bd6:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	4b17      	ldr	r3, [pc, #92]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8004be0:	b2d9      	uxtb	r1, r3
 8004be2:	7abb      	ldrb	r3, [r7, #10]
 8004be4:	2206      	movs	r2, #6
 8004be6:	f001 faa7 	bl	8006138 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 3, bytes[3]);
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004bf0:	f993 3000 	ldrsb.w	r3, [r3]
 8004bf4:	b2d9      	uxtb	r1, r3
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	f001 fa9d 	bl	8006138 <i2cSendByteToSlaveReg>

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	4b0d      	ldr	r3, [pc, #52]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004c04:	f993 3000 	ldrsb.w	r3, [r3]
 8004c08:	b2d9      	uxtb	r1, r3
 8004c0a:	2304      	movs	r3, #4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f001 fa93 	bl	8006138 <i2cSendByteToSlaveReg>
 8004c12:	e009      	b.n	8004c28 <TOF_start_continuous+0x1a0>
	}
	else
	{
		// continuous back-to-back mode
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <TOF_start_continuous+0x1b4>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <TOF_start_continuous+0x1b0>)
 8004c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1e:	b2d9      	uxtb	r1, r3
 8004c20:	2302      	movs	r3, #2
 8004c22:	2200      	movs	r2, #0
 8004c24:	f001 fa88 	bl	8006138 <i2cSendByteToSlaveReg>
	}

	TOF_continuous_mode = true;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <TOF_start_continuous+0x1bc>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]

	return true;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20000048 	.word	0x20000048
 8004c3c:	20000298 	.word	0x20000298
 8004c40:	2000029c 	.word	0x2000029c
 8004c44:	2000029d 	.word	0x2000029d

08004c48 <TOF_stop_continuous>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if continuous mode stops successfully, false otherwise.
 */
bool TOF_stop_continuous(TOFSensor_t* TOFSENS)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	889b      	ldrh	r3, [r3, #4]
 8004c54:	b25a      	sxtb	r2, r3
 8004c56:	4b29      	ldr	r3, [pc, #164]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004c58:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a28      	ldr	r2, [pc, #160]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004c60:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 8004c62:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <TOF_stop_continuous+0xbc>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f083 0301 	eor.w	r3, r3, #1
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <TOF_stop_continuous+0x2c>
	{
		return false;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e03f      	b.n	8004cf4 <TOF_stop_continuous+0xac>
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
 8004c74:	4b22      	ldr	r3, [pc, #136]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	4b20      	ldr	r3, [pc, #128]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004c7a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c7e:	b2d9      	uxtb	r1, r3
 8004c80:	2301      	movs	r3, #1
 8004c82:	2200      	movs	r2, #0
 8004c84:	f001 fa58 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8004c92:	b2d9      	uxtb	r1, r3
 8004c94:	2301      	movs	r3, #1
 8004c96:	22ff      	movs	r2, #255	; 0xff
 8004c98:	f001 fa4e 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8004c9c:	4b18      	ldr	r3, [pc, #96]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004ca2:	f993 3000 	ldrsb.w	r3, [r3]
 8004ca6:	b2d9      	uxtb	r1, r3
 8004ca8:	2300      	movs	r3, #0
 8004caa:	2200      	movs	r2, #0
 8004cac:	f001 fa44 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, 0x00);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8004cba:	b2d9      	uxtb	r1, r3
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2291      	movs	r2, #145	; 0x91
 8004cc0:	f001 fa3a 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004cca:	f993 3000 	ldrsb.w	r3, [r3]
 8004cce:	b2d9      	uxtb	r1, r3
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f001 fa30 	bl	8006138 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004cd8:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <TOF_stop_continuous+0xb8>)
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <TOF_stop_continuous+0xb4>)
 8004cde:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce2:	b2d9      	uxtb	r1, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	22ff      	movs	r2, #255	; 0xff
 8004ce8:	f001 fa26 	bl	8006138 <i2cSendByteToSlaveReg>

	TOF_continuous_mode = false;
 8004cec:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <TOF_stop_continuous+0xbc>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

	return true;
 8004cf2:	2301      	movs	r3, #1
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	20000048 	.word	0x20000048
 8004d00:	20000298 	.word	0x20000298
 8004d04:	2000029d 	.word	0x2000029d

08004d08 <TOF_read_continuous_distance>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the distance is successfully read and updated, otherwise false.
 */
bool TOF_read_continuous_distance(TOFSensor_t* TOFSENS)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	889b      	ldrh	r3, [r3, #4]
 8004d14:	b25a      	sxtb	r2, r3
 8004d16:	4b11      	ldr	r3, [pc, #68]	; (8004d5c <TOF_read_continuous_distance+0x54>)
 8004d18:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <TOF_read_continuous_distance+0x58>)
 8004d20:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <TOF_read_continuous_distance+0x5c>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	f083 0301 	eor.w	r3, r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <TOF_read_continuous_distance+0x2c>
	{
		return false;
 8004d30:	2300      	movs	r3, #0
 8004d32:	e00e      	b.n	8004d52 <TOF_read_continuous_distance+0x4a>
	}

	if(!TOF_getMeasurement(TOFSENS, &TOFSENS->distanceFromTOF))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	3308      	adds	r3, #8
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fdfe 	bl	800493c <TOF_getMeasurement>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f083 0301 	eor.w	r3, r3, #1
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <TOF_read_continuous_distance+0x48>
	{
		return false;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <TOF_read_continuous_distance+0x4a>
	}

	return true;
 8004d50:	2301      	movs	r3, #1
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000048 	.word	0x20000048
 8004d60:	20000298 	.word	0x20000298
 8004d64:	2000029d 	.word	0x2000029d

08004d68 <TOF_set_ranging_profile>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the ranging profile was successfully set, otherwise false.
 */
bool TOF_set_ranging_profile(TOFSensor_t* TOFSENS)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	889b      	ldrh	r3, [r3, #4]
 8004d74:	b25a      	sxtb	r2, r3
 8004d76:	4b3b      	ldr	r3, [pc, #236]	; (8004e64 <TOF_set_ranging_profile+0xfc>)
 8004d78:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a3a      	ldr	r2, [pc, #232]	; (8004e68 <TOF_set_ranging_profile+0x100>)
 8004d80:	6013      	str	r3, [r2, #0]

	bool value = false;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
	bool prevalue = false;
 8004d86:	2300      	movs	r3, #0
 8004d88:	73bb      	strb	r3, [r7, #14]
    switch (TOFSENS->Ranging_Profiles_t) {
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	88db      	ldrh	r3, [r3, #6]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d860      	bhi.n	8004e56 <TOF_set_ranging_profile+0xee>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <TOF_set_ranging_profile+0x34>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dad 	.word	0x08004dad
 8004da0:	08004ddd 	.word	0x08004ddd
 8004da4:	08004e0b 	.word	0x08004e0b
 8004da8:	08004e37 	.word	0x08004e37
    case TOF_DEFAULT_MODE_D:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 30000) == true)
 8004dac:	f247 5130 	movw	r1, #30000	; 0x7530
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f95f 	bl	8005074 <TOF_set_measurement_timing_budget>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d008      	beq.n	8004dce <TOF_set_ranging_profile+0x66>
    	{
    		TOFSENS->Ranging_Profiles_t = TOF_DEFAULT_MODE_D;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	80da      	strh	r2, [r3, #6]
    		TOFSENS->Ranging_Profile_time = 30;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	221e      	movs	r2, #30
 8004dc6:	615a      	str	r2, [r3, #20]
    		value = true;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
    		break;
 8004dcc:	e045      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
    	}
    	else
    	{
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	80da      	strh	r2, [r3, #6]
        	value = TOF_RANGINGPROFILE_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
    		return false;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	e03f      	b.n	8004e5c <TOF_set_ranging_profile+0xf4>
    		break;
    	}

    case TOF_HIGH_SPEED_MODE_S:
        if(TOF_set_measurement_timing_budget(TOFSENS, 20000) == true)
 8004ddc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f947 	bl	8005074 <TOF_set_measurement_timing_budget>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <TOF_set_ranging_profile+0x96>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_SPEED_MODE_S;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 20;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2214      	movs	r2, #20
 8004df6:	615a      	str	r2, [r3, #20]
        	value = true;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
        	break;
 8004dfc:	e02d      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2205      	movs	r2, #5
 8004e06:	80da      	strh	r2, [r3, #6]

        	break;
 8004e08:	e027      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
        }

    case TOF_HIGH_ACCURACY_MODE_A:
        if(TOF_set_measurement_timing_budget(TOFSENS, 200) == true)
 8004e0a:	21c8      	movs	r1, #200	; 0xc8
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f931 	bl	8005074 <TOF_set_measurement_timing_budget>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <TOF_set_ranging_profile+0xc2>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_ACCURACY_MODE_A;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 200000;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <TOF_set_ranging_profile+0x104>)
 8004e22:	615a      	str	r2, [r3, #20]
        	value = true;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
        	break;
 8004e28:	e017      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2205      	movs	r2, #5
 8004e32:	80da      	strh	r2, [r3, #6]
        	break;
 8004e34:	e011      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
        }

    case TOF_LONG_RANGE_MODE_R:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 33) == true)
 8004e36:	2121      	movs	r1, #33	; 0x21
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f91b 	bl	8005074 <TOF_set_measurement_timing_budget>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <TOF_set_ranging_profile+0xe2>
    	        {
    	        	value = true;
 8004e44:	2301      	movs	r3, #1
 8004e46:	73fb      	strb	r3, [r7, #15]
    	        	break;
 8004e48:	e007      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
    	        }
    	        else
    	        {
    	        	value = TOF_RANGINGPROFILE_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
    	        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2205      	movs	r2, #5
 8004e52:	80da      	strh	r2, [r3, #6]
    	        	break;
 8004e54:	e001      	b.n	8004e5a <TOF_set_ranging_profile+0xf2>
    		break;
    	}

    default:
        // Handle an invalid profile case
        return value;
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	e000      	b.n	8004e5c <TOF_set_ranging_profile+0xf4>
    }

    return value;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000048 	.word	0x20000048
 8004e68:	20000298 	.word	0x20000298
 8004e6c:	00030d40 	.word	0x00030d40

08004e70 <TOF_get_sequence_step_enables>:
 *               - The SYSTEM_SEQUENCE_CONFIG register stores the configuration of the sequence steps used by the sensor.
 *               - Each bit in the byte represents an individual sequence step: TCC, DSS, MSRC, PRE_RANGE, FINAL_RANGE.
 *               - The SequenceStepEnables structure is populated with the status of each sequence step based on these bits.
 */
bool TOF_get_sequence_step_enables(TOFSensor_t* TOFSENS, SequenceStepEnables *enables)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	889b      	ldrh	r3, [r3, #4]
 8004e7e:	b25a      	sxtb	r2, r3
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <TOF_get_sequence_step_enables+0x98>)
 8004e82:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a20      	ldr	r2, [pc, #128]	; (8004f0c <TOF_get_sequence_step_enables+0x9c>)
 8004e8a:	6013      	str	r3, [r2, #0]

    I2C_RETURN_CODE_t i2c_return;
    uint8_t sequence_config;

    // Read the byte from the TOF_REG_SYSTEM_SEQUENCE_CONFIG register
    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8004e8c:	4b1f      	ldr	r3, [pc, #124]	; (8004f0c <TOF_get_sequence_step_enables+0x9c>)
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <TOF_get_sequence_step_enables+0x98>)
 8004e92:	f993 3000 	ldrsb.w	r3, [r3]
 8004e96:	b2d9      	uxtb	r1, r3
 8004e98:	f107 030e 	add.w	r3, r7, #14
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f001 f999 	bl	80061d4 <i2cReadByteFromSlaveReg>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	73fb      	strb	r3, [r7, #15]

    // Check if the I2C read was successful
    if (i2c_return != I2C_OK)
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <TOF_get_sequence_step_enables+0x42>
    {
        return false;  // Return false if there was an error
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e025      	b.n	8004efe <TOF_get_sequence_step_enables+0x8e>
    }

    // Extract bit values using shifts and masks
    enables->tcc         = (sequence_config >> 4) & 0x1;  // Extract the TCC bit
 8004eb2:	7bbb      	ldrb	r3, [r7, #14]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	701a      	strb	r2, [r3, #0]
    enables->dss         = (sequence_config >> 3) & 0x1;  // Extract the DSS bit
 8004ec2:	7bbb      	ldrb	r3, [r7, #14]
 8004ec4:	08db      	lsrs	r3, r3, #3
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	705a      	strb	r2, [r3, #1]
    enables->msrc        = (sequence_config >> 2) & 0x1;  // Extract the MSRC bit
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	709a      	strb	r2, [r3, #2]
    enables->pre_range   = (sequence_config >> 6) & 0x1;  // Extract the PRE_RANGE bit
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	70da      	strb	r2, [r3, #3]
    enables->final_range = (sequence_config >> 7) & 0x1;  // Extract the FINAL_RANGE bit
 8004ef2:	7bbb      	ldrb	r3, [r7, #14]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	711a      	strb	r2, [r3, #4]

    return true;  // Return true if everything succeeded
 8004efc:	2301      	movs	r3, #1
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000048 	.word	0x20000048
 8004f0c:	20000298 	.word	0x20000298

08004f10 <TOF_get_sequence_step_timeouts>:
 * @notes:
 *               - The calculated timeouts are in microseconds and are stored in the `timeouts` structure.
 *               - The VCSEL period for both pre-range and final-range steps is used to calculate the corresponding timeouts.
 */
bool TOF_get_sequence_step_timeouts(TOFSensor_t* TOFSENS, SequenceStepEnables *enables, SequenceStepTimeouts *timeouts)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	889b      	ldrh	r3, [r3, #4]
 8004f20:	b25a      	sxtb	r2, r3
 8004f22:	4b52      	ldr	r3, [pc, #328]	; (800506c <TOF_get_sequence_step_timeouts+0x15c>)
 8004f24:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a51      	ldr	r2, [pc, #324]	; (8005070 <TOF_get_sequence_step_timeouts+0x160>)
 8004f2c:	6013      	str	r3, [r2, #0]

	uint8_t data;
	I2C_RETURN_CODE_t i2c_return;

    timeouts->pre_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodPreRange);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f943 	bl	80051bc <TOF_get_vcsel_pulse_period>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	701a      	strb	r2, [r3, #0]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, &data);
 8004f3e:	4b4c      	ldr	r3, [pc, #304]	; (8005070 <TOF_get_sequence_step_timeouts+0x160>)
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	4b4a      	ldr	r3, [pc, #296]	; (800506c <TOF_get_sequence_step_timeouts+0x15c>)
 8004f44:	f993 3000 	ldrsb.w	r3, [r3]
 8004f48:	b2d9      	uxtb	r1, r3
 8004f4a:	f107 0316 	add.w	r3, r7, #22
 8004f4e:	2246      	movs	r2, #70	; 0x46
 8004f50:	f001 f940 	bl	80061d4 <i2cReadByteFromSlaveReg>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
    timeouts->msrc_dss_tcc_mclks = data;
 8004f58:	7dbb      	ldrb	r3, [r7, #22]
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	805a      	strh	r2, [r3, #2]

	if (i2c_return != I2C_OK)
 8004f60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <TOF_get_sequence_step_timeouts+0x5c>
	{
		return false;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e07b      	b.n	8005064 <TOF_get_sequence_step_timeouts+0x154>
	}
    timeouts->msrc_dss_tcc_mclks += 1;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	885b      	ldrh	r3, [r3, #2]
 8004f70:	3301      	adds	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	805a      	strh	r2, [r3, #2]
    timeouts->msrc_dss_tcc_us = timeout_mclks_to_microseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	885a      	ldrh	r2, [r3, #2]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f000 f9b4 	bl	80052f0 <timeout_mclks_to_microseconds>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	605a      	str	r2, [r3, #4]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004f8e:	4b38      	ldr	r3, [pc, #224]	; (8005070 <TOF_get_sequence_step_timeouts+0x160>)
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <TOF_get_sequence_step_timeouts+0x15c>)
 8004f94:	f993 3000 	ldrsb.w	r3, [r3]
 8004f98:	b2d9      	uxtb	r1, r3
 8004f9a:	f107 0316 	add.w	r3, r7, #22
 8004f9e:	2251      	movs	r2, #81	; 0x51
 8004fa0:	f001 f918 	bl	80061d4 <i2cReadByteFromSlaveReg>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8004fa8:	7dbb      	ldrb	r3, [r7, #22]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8004fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <TOF_get_sequence_step_timeouts+0xac>
    	{
    		return false;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	e053      	b.n	8005064 <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->pre_range_mclks = decode_timeout(timeouts->pre_range_mclks);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	891b      	ldrh	r3, [r3, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f97b 	bl	80052bc <decode_timeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	811a      	strh	r2, [r3, #8]
    timeouts->pre_range_us = timeout_mclks_to_microseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	891a      	ldrh	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f000 f989 	bl	80052f0 <timeout_mclks_to_microseconds>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]

    timeouts->final_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodFinalRange);
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f8e8 	bl	80051bc <TOF_get_vcsel_pulse_period>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	741a      	strb	r2, [r3, #16]


    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004ff4:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <TOF_get_sequence_step_timeouts+0x160>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	; (800506c <TOF_get_sequence_step_timeouts+0x15c>)
 8004ffa:	f993 3000 	ldrsb.w	r3, [r3]
 8004ffe:	b2d9      	uxtb	r1, r3
 8005000:	f107 0316 	add.w	r3, r7, #22
 8005004:	2271      	movs	r2, #113	; 0x71
 8005006:	f001 f8e5 	bl	80061d4 <i2cReadByteFromSlaveReg>
 800500a:	4603      	mov	r3, r0
 800500c:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 800500e:	7dbb      	ldrb	r3, [r7, #22]
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8005016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <TOF_get_sequence_step_timeouts+0x112>
    	{
    		return false;
 800501e:	2300      	movs	r3, #0
 8005020:	e020      	b.n	8005064 <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->final_range_mclks = decode_timeout(timeouts->final_range_mclks);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	8a5b      	ldrh	r3, [r3, #18]
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f948 	bl	80052bc <decode_timeout>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	825a      	strh	r2, [r3, #18]

    if (enables->pre_range)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	78db      	ldrb	r3, [r3, #3]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <TOF_get_sequence_step_timeouts+0x13c>
    {
        timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8a5a      	ldrh	r2, [r3, #18]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	891b      	ldrh	r3, [r3, #8]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	825a      	strh	r2, [r3, #18]
    }

    timeouts->final_range_us = timeout_mclks_to_microseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	8a5a      	ldrh	r2, [r3, #18]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	7c1b      	ldrb	r3, [r3, #16]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f000 f94a 	bl	80052f0 <timeout_mclks_to_microseconds>
 800505c:	4602      	mov	r2, r0
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	615a      	str	r2, [r3, #20]

    return true;
 8005062:	2301      	movs	r3, #1
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20000048 	.word	0x20000048
 8005070:	20000298 	.word	0x20000298

08005074 <TOF_set_measurement_timing_budget>:
 *               uint32_t budget_us							Desired timing budget in microseconds (µs).
 *
 * @returns:     bool: true if the timing budget was successfully set, otherwise false.
 */
bool TOF_set_measurement_timing_budget(TOFSensor_t* TOFSENS, uint32_t budget_us)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b092      	sub	sp, #72	; 0x48
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	889b      	ldrh	r3, [r3, #4]
 8005082:	b25a      	sxtb	r2, r3
 8005084:	4b4b      	ldr	r3, [pc, #300]	; (80051b4 <TOF_set_measurement_timing_budget+0x140>)
 8005086:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a4a      	ldr	r2, [pc, #296]	; (80051b8 <TOF_set_measurement_timing_budget+0x144>)
 800508e:	6013      	str	r3, [r2, #0]
	I2C_RETURN_CODE_t i2c_return;

    SequenceStepEnables enables;
    SequenceStepTimeouts timeouts;

    uint16_t StartOverhead     = 1910;
 8005090:	f240 7376 	movw	r3, #1910	; 0x776
 8005094:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint16_t EndOverhead       = 960;
 8005096:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800509a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t MsrcOverhead      = 660;
 800509c:	f44f 7325 	mov.w	r3, #660	; 0x294
 80050a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t TccOverhead       = 590;
 80050a2:	f240 234e 	movw	r3, #590	; 0x24e
 80050a6:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t DssOverhead       = 690;
 80050a8:	f240 23b2 	movw	r3, #690	; 0x2b2
 80050ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t PreRangeOverhead  = 660;
 80050ae:	f44f 7325 	mov.w	r3, #660	; 0x294
 80050b2:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t FinalRangeOverhead = 550;
 80050b4:	f240 2326 	movw	r3, #550	; 0x226
 80050b8:	867b      	strh	r3, [r7, #50]	; 0x32

    uint32_t used_budget_us = StartOverhead + EndOverhead;
 80050ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80050bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050be:	4413      	add	r3, r2
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44

    // Get sequence step enables and timeouts
    TOF_get_sequence_step_enables(TOFSENS, &enables);
 80050c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fed1 	bl	8004e70 <TOF_get_sequence_step_enables>
    TOF_get_sequence_step_timeouts(TOFSENS, &enables, &timeouts);
 80050ce:	f107 020c 	add.w	r2, r7, #12
 80050d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050d6:	4619      	mov	r1, r3
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f7ff ff19 	bl	8004f10 <TOF_get_sequence_step_timeouts>

    if (enables.tcc)
 80050de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <TOF_set_measurement_timing_budget+0x7e>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80050ea:	4413      	add	r3, r2
 80050ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ee:	4413      	add	r3, r2
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.dss)
 80050f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <TOF_set_measurement_timing_budget+0x96>
    {
        used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050fe:	4413      	add	r3, r2
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005104:	4413      	add	r3, r2
 8005106:	647b      	str	r3, [r7, #68]	; 0x44
 8005108:	e009      	b.n	800511e <TOF_set_measurement_timing_budget+0xaa>
    }
    else if (enables.msrc)
 800510a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <TOF_set_measurement_timing_budget+0xaa>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005116:	4413      	add	r3, r2
 8005118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511a:	4413      	add	r3, r2
 800511c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.pre_range)
 800511e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <TOF_set_measurement_timing_budget+0xbe>
    {
        used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800512a:	4413      	add	r3, r2
 800512c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800512e:	4413      	add	r3, r2
 8005130:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.final_range)
 8005132:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d037      	beq.n	80051aa <TOF_set_measurement_timing_budget+0x136>
    {
        used_budget_us += FinalRangeOverhead;
 800513a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800513c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800513e:	4413      	add	r3, r2
 8005140:	647b      	str	r3, [r7, #68]	; 0x44

        if (used_budget_us > budget_us)
 8005142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d901      	bls.n	800514e <TOF_set_measurement_timing_budget+0xda>
        {
            // Requested timeout too big
            return false;
 800514a:	2300      	movs	r3, #0
 800514c:	e02e      	b.n	80051ac <TOF_set_measurement_timing_budget+0x138>
        }

        uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Convert the final range timeout to MCLks
        uint32_t final_range_timeout_mclks =
        timeout_microseconds_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8005156:	7f3b      	ldrb	r3, [r7, #28]
 8005158:	4619      	mov	r1, r3
 800515a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800515c:	f000 f8f0 	bl	8005340 <timeout_microseconds_to_mclks>
 8005160:	6438      	str	r0, [r7, #64]	; 0x40

        if (enables.pre_range)
 8005162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <TOF_set_measurement_timing_budget+0x100>
        {
            final_range_timeout_mclks += timeouts.pre_range_mclks;
 800516a:	8abb      	ldrh	r3, [r7, #20]
 800516c:	461a      	mov	r2, r3
 800516e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005170:	4413      	add	r3, r2
 8005172:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Write the final range timeout to the register

        final_range_timeout_mclks = encode_timeOut(final_range_timeout_mclks);
 8005174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005176:	b29b      	uxth	r3, r3
 8005178:	4618      	mov	r0, r3
 800517a:	f000 f873 	bl	8005264 <encode_timeOut>
 800517e:	4603      	mov	r3, r0
 8005180:	643b      	str	r3, [r7, #64]	; 0x40
        i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, final_range_timeout_mclks);
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <TOF_set_measurement_timing_budget+0x144>)
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <TOF_set_measurement_timing_budget+0x140>)
 8005188:	f993 3000 	ldrsb.w	r3, [r3]
 800518c:	b2d9      	uxtb	r1, r3
 800518e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2271      	movs	r2, #113	; 0x71
 8005194:	f000 ffd0 	bl	8006138 <i2cSendByteToSlaveReg>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (i2c_return != I2C_OK){
 800519e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <TOF_set_measurement_timing_budget+0x136>
            		return false;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e000      	b.n	80051ac <TOF_set_measurement_timing_budget+0x138>
            	}
        // Store the timing budget for internal reuse
        //uint32_t measurement_timing_budget_us = budget_us;
    }

    return true;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3748      	adds	r7, #72	; 0x48
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	20000048 	.word	0x20000048
 80051b8:	20000298 	.word	0x20000298

080051bc <TOF_get_vcsel_pulse_period>:
 *               - This function reads the sensor register corresponding to the VCSEL period for either the pre-range or final-range mode.
 *               - The raw register values are decoded before returning.
 *               - A return value of 255 indicates an error during the process (either reading the register or decoding the value).
 */
uint8_t TOF_get_vcsel_pulse_period(TOFSensor_t* TOFSENS, vcselPeriodType type)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	889b      	ldrh	r3, [r3, #4]
 80051cc:	b25a      	sxtb	r2, r3
 80051ce:	4b23      	ldr	r3, [pc, #140]	; (800525c <TOF_get_vcsel_pulse_period+0xa0>)
 80051d0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a22      	ldr	r2, [pc, #136]	; (8005260 <TOF_get_vcsel_pulse_period+0xa4>)
 80051d8:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

    uint8_t vcsel_period = 255;  // Default to 255 (error case)
 80051da:	23ff      	movs	r3, #255	; 0xff
 80051dc:	73bb      	strb	r3, [r7, #14]

    if (type == VcselPeriodPreRange)
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d119      	bne.n	8005218 <TOF_get_vcsel_pulse_period+0x5c>
    {
        // Read the pre-range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 80051e4:	4b1e      	ldr	r3, [pc, #120]	; (8005260 <TOF_get_vcsel_pulse_period+0xa4>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <TOF_get_vcsel_pulse_period+0xa0>)
 80051ea:	f993 3000 	ldrsb.w	r3, [r3]
 80051ee:	b2d9      	uxtb	r1, r3
 80051f0:	f107 030e 	add.w	r3, r7, #14
 80051f4:	2250      	movs	r2, #80	; 0x50
 80051f6:	f000 ffed 	bl	80061d4 <i2cReadByteFromSlaveReg>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 80051fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <TOF_get_vcsel_pulse_period+0x4e>
    		return false;
 8005206:	2300      	movs	r3, #0
 8005208:	e023      	b.n	8005252 <TOF_get_vcsel_pulse_period+0x96>
    	}
        vcsel_period = decodeVcselPeriod(vcsel_period);
 800520a:	7bbb      	ldrb	r3, [r7, #14]
 800520c:	3301      	adds	r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	73bb      	strb	r3, [r7, #14]
 8005216:	e01b      	b.n	8005250 <TOF_get_vcsel_pulse_period+0x94>
    }
    else if (type == VcselPeriodFinalRange)
 8005218:	78fb      	ldrb	r3, [r7, #3]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d118      	bne.n	8005250 <TOF_get_vcsel_pulse_period+0x94>
    {
        // Read the final range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <TOF_get_vcsel_pulse_period+0xa4>)
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <TOF_get_vcsel_pulse_period+0xa0>)
 8005224:	f993 3000 	ldrsb.w	r3, [r3]
 8005228:	b2d9      	uxtb	r1, r3
 800522a:	f107 030e 	add.w	r3, r7, #14
 800522e:	2270      	movs	r2, #112	; 0x70
 8005230:	f000 ffd0 	bl	80061d4 <i2cReadByteFromSlaveReg>
 8005234:	4603      	mov	r3, r0
 8005236:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8005238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <TOF_get_vcsel_pulse_period+0x88>
    		return false;
 8005240:	2300      	movs	r3, #0
 8005242:	e006      	b.n	8005252 <TOF_get_vcsel_pulse_period+0x96>
    	}
    	vcsel_period = decodeVcselPeriod(vcsel_period);
 8005244:	7bbb      	ldrb	r3, [r7, #14]
 8005246:	3301      	adds	r3, #1
 8005248:	b2db      	uxtb	r3, r3
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	b2db      	uxtb	r3, r3
 800524e:	73bb      	strb	r3, [r7, #14]
    }

    return vcsel_period;
 8005250:	7bbb      	ldrb	r3, [r7, #14]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000048 	.word	0x20000048
 8005260:	20000298 	.word	0x20000298

08005264 <encode_timeOut>:
 *               - This function is crucial for converting a timeout value in macro clocks (MCLKs) into the format that can be used by the TOF sensor.
 *               - The encoded value is a 16-bit value where the higher byte represents the number of shifts, and the lower byte holds the adjusted value.
 *               - The input timeout value should be greater than zero, as the function is designed to handle positive timeouts.
 */
uint16_t encode_timeOut(uint16_t final_range_timeout_mclks)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	4603      	mov	r3, r0
 800526c:	80fb      	strh	r3, [r7, #6]
	uint32_t ls_byte = 0;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	817b      	strh	r3, [r7, #10]

	if (final_range_timeout_mclks > 0){
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d018      	beq.n	80052ae <encode_timeOut+0x4a>
	ls_byte = final_range_timeout_mclks - 1;
 800527c:	88fb      	ldrh	r3, [r7, #6]
 800527e:	3b01      	subs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0){
 8005282:	e005      	b.n	8005290 <encode_timeOut+0x2c>
	      ls_byte >>= 1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	3301      	adds	r3, #1
 800528e:	817b      	strh	r3, [r7, #10]
		while ((ls_byte & 0xFFFFFF00) > 0){
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f4      	bne.n	8005284 <encode_timeOut+0x20>
	    }

	    return (ms_byte << 8) | (ls_byte & 0xFF);
 800529a:	897b      	ldrh	r3, [r7, #10]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	b29a      	uxth	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	e000      	b.n	80052b0 <encode_timeOut+0x4c>
	  }
	  else { return 0; }
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <decode_timeout>:
 *               - This function is used to decode the timeout value from the format used by the TOF sensor's registers.
 *               - The formula used to calculate the timeout ensures that the timeout is a value greater than or equal to 1.
 *               - The decoded timeout can be used in further sensor configurations or calculations.
 */
uint16_t decode_timeout(uint16_t reg_val)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4603      	mov	r3, r0
 80052c4:	80fb      	strh	r3, [r7, #6]
    // Formula: (LSByte * 2^MSByte) + 1
    // reg_val is a 16-bit value; the MSByte (Most Significant Byte) is the upper 8 bits
    // and the LSByte (Least Significant Byte) is the lower 8 bits.

    uint8_t msb = (reg_val >> 8) & 0xFF;  // Extract the most significant byte
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = reg_val & 0xFF;         // Extract the least significant byte
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	73bb      	strb	r3, [r7, #14]

    // Calculate the timeout as per the formula
    uint16_t timeout = (lsb << msb) + 1;
 80052d2:	7bba      	ldrb	r2, [r7, #14]
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	81bb      	strh	r3, [r7, #12]

    return timeout;
 80052e0:	89bb      	ldrh	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3714      	adds	r7, #20
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
	...

080052f0 <timeout_mclks_to_microseconds>:
 * @notes:
 *               - This function is used to convert the sensor's timeout period (expressed in MCLKs) into a more human-readable form (microseconds).
 *               - The calculation ensures the proper timing conversion based on the VCSEL period, which varies depending on the sensor configuration.
 */
uint32_t timeout_mclks_to_microseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	460a      	mov	r2, r1
 80052fa:	80fb      	strh	r3, [r7, #6]
 80052fc:	4613      	mov	r3, r2
 80052fe:	717b      	strb	r3, [r7, #5]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005300:	797b      	ldrb	r3, [r7, #5]
 8005302:	4a0d      	ldr	r2, [pc, #52]	; (8005338 <timeout_mclks_to_microseconds+0x48>)
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800530c:	4a0b      	ldr	r2, [pc, #44]	; (800533c <timeout_mclks_to_microseconds+0x4c>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	099b      	lsrs	r3, r3, #6
 8005314:	60fb      	str	r3, [r7, #12]

    // Convert the timeout period in MCLKs to microseconds

    return (uint32_t)((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005322:	4a06      	ldr	r2, [pc, #24]	; (800533c <timeout_mclks_to_microseconds+0x4c>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	099b      	lsrs	r3, r3, #6
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	003a2f00 	.word	0x003a2f00
 800533c:	10624dd3 	.word	0x10624dd3

08005340 <timeout_microseconds_to_mclks>:
 * @notes:
 *               - This function is used to convert a timeout period from microseconds into the raw timing unit (MCLKs), which is suitable for sensor register configurations.
 *               - The conversion takes into account the VCSEL period (in PCLKs) to properly adjust for different sensor configurations.
 */
uint32_t timeout_microseconds_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <timeout_microseconds_to_mclks+0x48>)
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <timeout_microseconds_to_mclks+0x4c>)
 800535a:	fba2 2303 	umull	r2, r3, r2, r3
 800535e:	099b      	lsrs	r3, r3, #6
 8005360:	60fb      	str	r3, [r7, #12]

    // Convert timeout from microseconds to MCLKs
    // The formula uses rounding by adding (macro_period_ns / 2) before dividing
    uint32_t return_value = (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005368:	fb03 f202 	mul.w	r2, r3, r2
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	085b      	lsrs	r3, r3, #1
 8005370:	441a      	add	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	60bb      	str	r3, [r7, #8]
    return return_value;
 800537a:	68bb      	ldr	r3, [r7, #8]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	003a2f00 	.word	0x003a2f00
 800538c:	10624dd3 	.word	0x10624dd3

08005390 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03e      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053a0:	79fb      	ldrb	r3, [r7, #7]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d03b      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053a6:	79fb      	ldrb	r3, [r7, #7]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d038      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053ac:	79fb      	ldrb	r3, [r7, #7]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d035      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053b2:	79fb      	ldrb	r3, [r7, #7]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d032      	beq.n	800541e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d02f      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d02c      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053c4:	79fb      	ldrb	r3, [r7, #7]
 80053c6:	2b07      	cmp	r3, #7
 80053c8:	d029      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053ca:	79fb      	ldrb	r3, [r7, #7]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d026      	beq.n	800541e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	2b09      	cmp	r3, #9
 80053d4:	d023      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	2b0a      	cmp	r3, #10
 80053da:	d020      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	2b0b      	cmp	r3, #11
 80053e0:	d01d      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b0c      	cmp	r3, #12
 80053e6:	d01a      	beq.n	800541e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 80053e8:	79fb      	ldrb	r3, [r7, #7]
 80053ea:	2b0d      	cmp	r3, #13
 80053ec:	d017      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	2b0e      	cmp	r3, #14
 80053f2:	d014      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053f4:	79fb      	ldrb	r3, [r7, #7]
 80053f6:	2b0f      	cmp	r3, #15
 80053f8:	d011      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 80053fa:	79fb      	ldrb	r3, [r7, #7]
 80053fc:	2b10      	cmp	r3, #16
 80053fe:	d00e      	beq.n	800541e <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2b11      	cmp	r3, #17
 8005404:	d00b      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b12      	cmp	r3, #18
 800540a:	d008      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	2b14      	cmp	r3, #20
 8005410:	d005      	beq.n	800541e <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	2b15      	cmp	r3, #21
 8005416:	d002      	beq.n	800541e <extiVerifyIrqNum+0x8e>
 8005418:	79fb      	ldrb	r3, [r7, #7]
 800541a:	2b16      	cmp	r3, #22
 800541c:	d101      	bne.n	8005422 <extiVerifyIrqNum+0x92>
    {
        return true;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <extiVerifyIrqNum+0x94>
    }
    return false;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d005      	beq.n	800544c <extiVerifyTrigger+0x1c>
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	2b01      	cmp	r3, #1
 8005444:	d002      	beq.n	800544c <extiVerifyTrigger+0x1c>
 8005446:	79fb      	ldrb	r3, [r7, #7]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d101      	bne.n	8005450 <extiVerifyTrigger+0x20>
    {
        return true;
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <extiVerifyTrigger+0x22>
    }
    return false;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	370c      	adds	r7, #12
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
	...

08005460 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8005466:	2300      	movs	r3, #0
 8005468:	71fb      	strb	r3, [r7, #7]
 800546a:	e008      	b.n	800547e <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <extiInit+0x34>)
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	3302      	adds	r3, #2
 8005472:	2100      	movs	r1, #0
 8005474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	3301      	adds	r3, #1
 800547c:	71fb      	strb	r3, [r7, #7]
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	2b03      	cmp	r3, #3
 8005482:	d9f3      	bls.n	800546c <extiInit+0xc>
    }
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40013800 	.word	0x40013800

08005498 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	460b      	mov	r3, r1
 80054a2:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80054ac:	2300      	movs	r3, #0
 80054ae:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f937 	bl	8005724 <gpioVerifyPort>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f083 0301 	eor.w	r3, r3, #1
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 80054c2:	23ff      	movs	r3, #255	; 0xff
 80054c4:	e08a      	b.n	80055dc <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f95d 	bl	8005788 <gpioVerifyPin>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f083 0301 	eor.w	r3, r3, #1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 80054da:	23fe      	movs	r3, #254	; 0xfe
 80054dc:	e07e      	b.n	80055dc <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	2b0f      	cmp	r3, #15
 80054e2:	d841      	bhi.n	8005568 <extiConfigIrq+0xd0>
 80054e4:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <extiConfigIrq+0x54>)
 80054e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ea:	bf00      	nop
 80054ec:	0800552d 	.word	0x0800552d
 80054f0:	0800552d 	.word	0x0800552d
 80054f4:	0800552d 	.word	0x0800552d
 80054f8:	0800552d 	.word	0x0800552d
 80054fc:	08005539 	.word	0x08005539
 8005500:	08005539 	.word	0x08005539
 8005504:	08005539 	.word	0x08005539
 8005508:	08005539 	.word	0x08005539
 800550c:	08005549 	.word	0x08005549
 8005510:	08005549 	.word	0x08005549
 8005514:	08005549 	.word	0x08005549
 8005518:	08005549 	.word	0x08005549
 800551c:	08005559 	.word	0x08005559
 8005520:	08005559 	.word	0x08005559
 8005524:	08005559 	.word	0x08005559
 8005528:	08005559 	.word	0x08005559
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8005532:	2300      	movs	r3, #0
 8005534:	73fb      	strb	r3, [r7, #15]
            break;
 8005536:	e017      	b.n	8005568 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	3b04      	subs	r3, #4
 800553c:	b2db      	uxtb	r3, r3
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8005542:	2301      	movs	r3, #1
 8005544:	73fb      	strb	r3, [r7, #15]
            break;
 8005546:	e00f      	b.n	8005568 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	3b08      	subs	r3, #8
 800554c:	b2db      	uxtb	r3, r3
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8005552:	2302      	movs	r3, #2
 8005554:	73fb      	strb	r3, [r7, #15]
            break;
 8005556:	e007      	b.n	8005568 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	3b0c      	subs	r3, #12
 800555c:	b2db      	uxtb	r3, r3
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8005562:	2303      	movs	r3, #3
 8005564:	73fb      	strb	r3, [r7, #15]
            break;
 8005566:	bf00      	nop
    }

    if (GPIOA == port)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <extiConfigIrq+0x14c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d102      	bne.n	8005576 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8005570:	2300      	movs	r3, #0
 8005572:	737b      	strb	r3, [r7, #13]
 8005574:	e021      	b.n	80055ba <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1b      	ldr	r2, [pc, #108]	; (80055e8 <extiConfigIrq+0x150>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d102      	bne.n	8005584 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 800557e:	2301      	movs	r3, #1
 8005580:	737b      	strb	r3, [r7, #13]
 8005582:	e01a      	b.n	80055ba <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a19      	ldr	r2, [pc, #100]	; (80055ec <extiConfigIrq+0x154>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d102      	bne.n	8005592 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 800558c:	2302      	movs	r3, #2
 800558e:	737b      	strb	r3, [r7, #13]
 8005590:	e013      	b.n	80055ba <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <extiConfigIrq+0x158>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d102      	bne.n	80055a0 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 800559a:	2303      	movs	r3, #3
 800559c:	737b      	strb	r3, [r7, #13]
 800559e:	e00c      	b.n	80055ba <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a14      	ldr	r2, [pc, #80]	; (80055f4 <extiConfigIrq+0x15c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d102      	bne.n	80055ae <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80055a8:	2304      	movs	r3, #4
 80055aa:	737b      	strb	r3, [r7, #13]
 80055ac:	e005      	b.n	80055ba <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <extiConfigIrq+0x160>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d101      	bne.n	80055ba <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80055b6:	2307      	movs	r3, #7
 80055b8:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 80055ba:	4a10      	ldr	r2, [pc, #64]	; (80055fc <extiConfigIrq+0x164>)
 80055bc:	7bfb      	ldrb	r3, [r7, #15]
 80055be:	3302      	adds	r3, #2
 80055c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80055c4:	7b79      	ldrb	r1, [r7, #13]
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	fa01 f303 	lsl.w	r3, r1, r3
 80055cc:	4618      	mov	r0, r3
 80055ce:	490b      	ldr	r1, [pc, #44]	; (80055fc <extiConfigIrq+0x164>)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	4302      	orrs	r2, r0
 80055d4:	3302      	adds	r3, #2
 80055d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40020000 	.word	0x40020000
 80055e8:	40020400 	.word	0x40020400
 80055ec:	40020800 	.word	0x40020800
 80055f0:	40020c00 	.word	0x40020c00
 80055f4:	40021000 	.word	0x40021000
 80055f8:	40021c00 	.word	0x40021c00
 80055fc:	40013800 	.word	0x40013800

08005600 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff febf 	bl	8005390 <extiVerifyIrqNum>
 8005612:	4603      	mov	r3, r0
 8005614:	f083 0301 	eor.w	r3, r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 800561e:	23d8      	movs	r3, #216	; 0xd8
 8005620:	e00a      	b.n	8005638 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8005622:	4b07      	ldr	r3, [pc, #28]	; (8005640 <extiEnableIrq+0x40>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	79fa      	ldrb	r2, [r7, #7]
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f202 	lsl.w	r2, r1, r2
 800562e:	4611      	mov	r1, r2
 8005630:	4a03      	ldr	r2, [pc, #12]	; (8005640 <extiEnableIrq+0x40>)
 8005632:	430b      	orrs	r3, r1
 8005634:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40013c00 	.word	0x40013c00

08005644 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	4603      	mov	r3, r0
 800564c:	460a      	mov	r2, r1
 800564e:	71fb      	strb	r3, [r7, #7]
 8005650:	4613      	mov	r3, r2
 8005652:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8005654:	79fb      	ldrb	r3, [r7, #7]
 8005656:	4618      	mov	r0, r3
 8005658:	f7ff fe9a 	bl	8005390 <extiVerifyIrqNum>
 800565c:	4603      	mov	r3, r0
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8005668:	23d8      	movs	r3, #216	; 0xd8
 800566a:	e055      	b.n	8005718 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 800566c:	79bb      	ldrb	r3, [r7, #6]
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fede 	bl	8005430 <extiVerifyTrigger>
 8005674:	4603      	mov	r3, r0
 8005676:	f083 0301 	eor.w	r3, r3, #1
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8005680:	23d7      	movs	r3, #215	; 0xd7
 8005682:	e049      	b.n	8005718 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8005684:	79bb      	ldrb	r3, [r7, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d115      	bne.n	80056b6 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 800568a:	4b25      	ldr	r3, [pc, #148]	; (8005720 <extiSetTriggerEdge+0xdc>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	79fa      	ldrb	r2, [r7, #7]
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f202 	lsl.w	r2, r1, r2
 8005696:	4611      	mov	r1, r2
 8005698:	4a21      	ldr	r2, [pc, #132]	; (8005720 <extiSetTriggerEdge+0xdc>)
 800569a:	430b      	orrs	r3, r1
 800569c:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	79fa      	ldrb	r2, [r7, #7]
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	43d2      	mvns	r2, r2
 80056ac:	4611      	mov	r1, r2
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056b0:	400b      	ands	r3, r1
 80056b2:	60d3      	str	r3, [r2, #12]
 80056b4:	e02f      	b.n	8005716 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80056b6:	79bb      	ldrb	r3, [r7, #6]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d115      	bne.n	80056e8 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80056bc:	4b18      	ldr	r3, [pc, #96]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	79fa      	ldrb	r2, [r7, #7]
 80056c2:	2101      	movs	r1, #1
 80056c4:	fa01 f202 	lsl.w	r2, r1, r2
 80056c8:	4611      	mov	r1, r2
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056cc:	430b      	orrs	r3, r1
 80056ce:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	79fa      	ldrb	r2, [r7, #7]
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f202 	lsl.w	r2, r1, r2
 80056dc:	43d2      	mvns	r2, r2
 80056de:	4611      	mov	r1, r2
 80056e0:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056e2:	400b      	ands	r3, r1
 80056e4:	6093      	str	r3, [r2, #8]
 80056e6:	e016      	b.n	8005716 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 80056e8:	79bb      	ldrb	r3, [r7, #6]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d113      	bne.n	8005716 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80056ee:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	79fa      	ldrb	r2, [r7, #7]
 80056f4:	2101      	movs	r1, #1
 80056f6:	fa01 f202 	lsl.w	r2, r1, r2
 80056fa:	4611      	mov	r1, r2
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <extiSetTriggerEdge+0xdc>)
 80056fe:	430b      	orrs	r3, r1
 8005700:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8005702:	4b07      	ldr	r3, [pc, #28]	; (8005720 <extiSetTriggerEdge+0xdc>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	79fa      	ldrb	r2, [r7, #7]
 8005708:	2101      	movs	r1, #1
 800570a:	fa01 f202 	lsl.w	r2, r1, r2
 800570e:	4611      	mov	r1, r2
 8005710:	4a03      	ldr	r2, [pc, #12]	; (8005720 <extiSetTriggerEdge+0xdc>)
 8005712:	430b      	orrs	r3, r1
 8005714:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40013c00 	.word	0x40013c00

08005724 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <gpioVerifyPort+0x4c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <gpioVerifyPort+0x38>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <gpioVerifyPort+0x50>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00f      	beq.n	800575c <gpioVerifyPort+0x38>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a0e      	ldr	r2, [pc, #56]	; (8005778 <gpioVerifyPort+0x54>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <gpioVerifyPort+0x38>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a0d      	ldr	r2, [pc, #52]	; (800577c <gpioVerifyPort+0x58>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <gpioVerifyPort+0x5c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <gpioVerifyPort+0x38>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a0b      	ldr	r2, [pc, #44]	; (8005784 <gpioVerifyPort+0x60>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d101      	bne.n	8005760 <gpioVerifyPort+0x3c>
    {
        return true;
 800575c:	2301      	movs	r3, #1
 800575e:	e000      	b.n	8005762 <gpioVerifyPort+0x3e>
    }
    return false;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40020000 	.word	0x40020000
 8005774:	40020400 	.word	0x40020400
 8005778:	40020800 	.word	0x40020800
 800577c:	40020c00 	.word	0x40020c00
 8005780:	40021000 	.word	0x40021000
 8005784:	40021c00 	.word	0x40021c00

08005788 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02c      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d029      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 800579e:	79fb      	ldrb	r3, [r7, #7]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d026      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d023      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d020      	beq.n	80057f2 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d01d      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	2b06      	cmp	r3, #6
 80057ba:	d01a      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2b07      	cmp	r3, #7
 80057c0:	d017      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d014      	beq.n	80057f2 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80057c8:	79fb      	ldrb	r3, [r7, #7]
 80057ca:	2b09      	cmp	r3, #9
 80057cc:	d011      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b0a      	cmp	r3, #10
 80057d2:	d00e      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057d4:	79fb      	ldrb	r3, [r7, #7]
 80057d6:	2b0b      	cmp	r3, #11
 80057d8:	d00b      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d008      	beq.n	80057f2 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b0d      	cmp	r3, #13
 80057e4:	d005      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	2b0e      	cmp	r3, #14
 80057ea:	d002      	beq.n	80057f2 <gpioVerifyPin+0x6a>
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	2b0f      	cmp	r3, #15
 80057f0:	d101      	bne.n	80057f6 <gpioVerifyPin+0x6e>
    {
        return true;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <gpioVerifyPin+0x70>
    }
    return false;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d02c      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d029      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d026      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d023      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005826:	79fb      	ldrb	r3, [r7, #7]
 8005828:	2b04      	cmp	r3, #4
 800582a:	d020      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 800582c:	79fb      	ldrb	r3, [r7, #7]
 800582e:	2b05      	cmp	r3, #5
 8005830:	d01d      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	2b06      	cmp	r3, #6
 8005836:	d01a      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005838:	79fb      	ldrb	r3, [r7, #7]
 800583a:	2b07      	cmp	r3, #7
 800583c:	d017      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d014      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	2b09      	cmp	r3, #9
 8005848:	d011      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b0a      	cmp	r3, #10
 800584e:	d00e      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b0b      	cmp	r3, #11
 8005854:	d00b      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b0c      	cmp	r3, #12
 800585a:	d008      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	2b0d      	cmp	r3, #13
 8005860:	d005      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005862:	79fb      	ldrb	r3, [r7, #7]
 8005864:	2b0e      	cmp	r3, #14
 8005866:	d002      	beq.n	800586e <gpioVerifyAltFunc+0x6a>
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d101      	bne.n	8005872 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 800586e:	2301      	movs	r3, #1
 8005870:	e000      	b.n	8005874 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <gpioVerifyPinMode+0x22>
 8005890:	79fb      	ldrb	r3, [r7, #7]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d005      	beq.n	80058a2 <gpioVerifyPinMode+0x22>
 8005896:	79fb      	ldrb	r3, [r7, #7]
 8005898:	2b02      	cmp	r3, #2
 800589a:	d002      	beq.n	80058a2 <gpioVerifyPinMode+0x22>
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d101      	bne.n	80058a6 <gpioVerifyPinMode+0x26>
    {
        return true;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <gpioVerifyPinMode+0x28>
    }

    return false;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <gpioVerifyOutputType+0x16>
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d101      	bne.n	80058ce <gpioVerifyOutputType+0x1a>
    {
        return true;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e000      	b.n	80058d0 <gpioVerifyOutputType+0x1c>
    }

    return false;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <gpioVerifyPushPullMode+0x1c>
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d002      	beq.n	80058f8 <gpioVerifyPushPullMode+0x1c>
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d101      	bne.n	80058fc <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
	...

0800590c <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ff05 	bl	8005724 <gpioVerifyPort>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d042      	beq.n	80059a6 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <gpioInitPort+0xa8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d106      	bne.n	8005936 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005928:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <gpioInitPort+0xac>)
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	4a22      	ldr	r2, [pc, #136]	; (80059b8 <gpioInitPort+0xac>)
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	6313      	str	r3, [r2, #48]	; 0x30
 8005934:	e035      	b.n	80059a2 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <gpioInitPort+0xb0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d106      	bne.n	800594c <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800593e:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <gpioInitPort+0xac>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005942:	4a1d      	ldr	r2, [pc, #116]	; (80059b8 <gpioInitPort+0xac>)
 8005944:	f043 0302 	orr.w	r3, r3, #2
 8005948:	6313      	str	r3, [r2, #48]	; 0x30
 800594a:	e02a      	b.n	80059a2 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <gpioInitPort+0xb4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d106      	bne.n	8005962 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8005954:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <gpioInitPort+0xac>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	4a17      	ldr	r2, [pc, #92]	; (80059b8 <gpioInitPort+0xac>)
 800595a:	f043 0304 	orr.w	r3, r3, #4
 800595e:	6313      	str	r3, [r2, #48]	; 0x30
 8005960:	e01f      	b.n	80059a2 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a17      	ldr	r2, [pc, #92]	; (80059c4 <gpioInitPort+0xb8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d106      	bne.n	8005978 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <gpioInitPort+0xac>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <gpioInitPort+0xac>)
 8005970:	f043 0308 	orr.w	r3, r3, #8
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
 8005976:	e014      	b.n	80059a2 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a13      	ldr	r2, [pc, #76]	; (80059c8 <gpioInitPort+0xbc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d106      	bne.n	800598e <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <gpioInitPort+0xac>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <gpioInitPort+0xac>)
 8005986:	f043 0310 	orr.w	r3, r3, #16
 800598a:	6313      	str	r3, [r2, #48]	; 0x30
 800598c:	e009      	b.n	80059a2 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a0e      	ldr	r2, [pc, #56]	; (80059cc <gpioInitPort+0xc0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d105      	bne.n	80059a2 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <gpioInitPort+0xac>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	4a07      	ldr	r2, [pc, #28]	; (80059b8 <gpioInitPort+0xac>)
 800599c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a0:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e001      	b.n	80059aa <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40020000 	.word	0x40020000
 80059b8:	40023800 	.word	0x40023800
 80059bc:	40020400 	.word	0x40020400
 80059c0:	40020800 	.word	0x40020800
 80059c4:	40020c00 	.word	0x40020c00
 80059c8:	40021000 	.word	0x40021000
 80059cc:	40021c00 	.word	0x40021c00

080059d0 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff fea3 	bl	8005724 <gpioVerifyPort>
 80059de:	4603      	mov	r3, r0
 80059e0:	f083 0301 	eor.w	r3, r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	e041      	b.n	8005a74 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <gpioSelectPort+0xac>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d106      	bne.n	8005a06 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80059f8:	4b21      	ldr	r3, [pc, #132]	; (8005a80 <gpioSelectPort+0xb0>)
 80059fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fc:	4a20      	ldr	r2, [pc, #128]	; (8005a80 <gpioSelectPort+0xb0>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6313      	str	r3, [r2, #48]	; 0x30
 8005a04:	e035      	b.n	8005a72 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1e      	ldr	r2, [pc, #120]	; (8005a84 <gpioSelectPort+0xb4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d106      	bne.n	8005a1c <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	4a1b      	ldr	r2, [pc, #108]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a14:	f043 0302 	orr.w	r3, r3, #2
 8005a18:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1a:	e02a      	b.n	8005a72 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a1a      	ldr	r2, [pc, #104]	; (8005a88 <gpioSelectPort+0xb8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d106      	bne.n	8005a32 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8005a24:	4b16      	ldr	r3, [pc, #88]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	4a15      	ldr	r2, [pc, #84]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a2a:	f043 0304 	orr.w	r3, r3, #4
 8005a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8005a30:	e01f      	b.n	8005a72 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <gpioSelectPort+0xbc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d106      	bne.n	8005a48 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8005a3a:	4b11      	ldr	r3, [pc, #68]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a40:	f043 0308 	orr.w	r3, r3, #8
 8005a44:	6313      	str	r3, [r2, #48]	; 0x30
 8005a46:	e014      	b.n	8005a72 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a11      	ldr	r2, [pc, #68]	; (8005a90 <gpioSelectPort+0xc0>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d106      	bne.n	8005a5e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a56:	f043 0310 	orr.w	r3, r3, #16
 8005a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5c:	e009      	b.n	8005a72 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a0c      	ldr	r2, [pc, #48]	; (8005a94 <gpioSelectPort+0xc4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d105      	bne.n	8005a72 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <gpioSelectPort+0xb0>)
 8005a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40020000 	.word	0x40020000
 8005a80:	40023800 	.word	0x40023800
 8005a84:	40020400 	.word	0x40020400
 8005a88:	40020800 	.word	0x40020800
 8005a8c:	40020c00 	.word	0x40020c00
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40021c00 	.word	0x40021c00

08005a98 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fe3b 	bl	8005724 <gpioVerifyPort>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f083 0301 	eor.w	r3, r3, #1
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005aba:	f04f 33ff 	mov.w	r3, #4294967295
 8005abe:	e032      	b.n	8005b26 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fe60 	bl	8005788 <gpioVerifyPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	f083 0301 	eor.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005ad4:	f06f 0301 	mvn.w	r3, #1
 8005ad8:	e025      	b.n	8005b26 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8005ada:	78bb      	ldrb	r3, [r7, #2]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fecf 	bl	8005880 <gpioVerifyPinMode>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8005aee:	f06f 0305 	mvn.w	r3, #5
 8005af2:	e018      	b.n	8005b26 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	0052      	lsls	r2, r2, #1
 8005afc:	2103      	movs	r1, #3
 8005afe:	fa01 f202 	lsl.w	r2, r1, r2
 8005b02:	43d2      	mvns	r2, r2
 8005b04:	401a      	ands	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8005b0a:	78bb      	ldrb	r3, [r7, #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	78b9      	ldrb	r1, [r7, #2]
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	0052      	lsls	r2, r2, #1
 8005b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fdf2 	bl	8005724 <gpioVerifyPort>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f083 0301 	eor.w	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	e014      	b.n	8005b7c <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8005b52:	78fb      	ldrb	r3, [r7, #3]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fe17 	bl	8005788 <gpioVerifyPin>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f083 0301 	eor.w	r3, r3, #1
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005b66:	f06f 0301 	mvn.w	r3, #1
 8005b6a:	e007      	b.n	8005b7c <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff fdc7 	bl	8005724 <gpioVerifyPort>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8005ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba6:	e015      	b.n	8005bd4 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff fdec 	bl	8005788 <gpioVerifyPin>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f083 0301 	eor.w	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005bbc:	f06f 0301 	mvn.w	r3, #1
 8005bc0:	e008      	b.n	8005bd4 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	70fb      	strb	r3, [r7, #3]
 8005be8:	4613      	mov	r3, r2
 8005bea:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fd99 	bl	8005724 <gpioVerifyPort>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f083 0301 	eor.w	r3, r3, #1
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005c02:	e050      	b.n	8005ca6 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff fdbe 	bl	8005788 <gpioVerifyPin>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f083 0301 	eor.w	r3, r3, #1
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8005c18:	f06f 0301 	mvn.w	r3, #1
 8005c1c:	e043      	b.n	8005ca6 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8005c1e:	78bb      	ldrb	r3, [r7, #2]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fdef 	bl	8005804 <gpioVerifyAltFunc>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f083 0301 	eor.w	r3, r3, #1
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d002      	beq.n	8005c38 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8005c32:	f06f 0302 	mvn.w	r3, #2
 8005c36:	e036      	b.n	8005ca6 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8005c38:	78fb      	ldrb	r3, [r7, #3]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff ff2a 	bl	8005a98 <gpioSelectPinMode>

	if (pin <= PIN7)
 8005c44:	78fb      	ldrb	r3, [r7, #3]
 8005c46:	2b07      	cmp	r3, #7
 8005c48:	d815      	bhi.n	8005c76 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	78fa      	ldrb	r2, [r7, #3]
 8005c50:	0092      	lsls	r2, r2, #2
 8005c52:	210f      	movs	r1, #15
 8005c54:	fa01 f202 	lsl.w	r2, r1, r2
 8005c58:	43d2      	mvns	r2, r2
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6a1b      	ldr	r3, [r3, #32]
 8005c64:	78b9      	ldrb	r1, [r7, #2]
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	0092      	lsls	r2, r2, #2
 8005c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	621a      	str	r2, [r3, #32]
 8005c74:	e016      	b.n	8005ca4 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	78fa      	ldrb	r2, [r7, #3]
 8005c7c:	3a08      	subs	r2, #8
 8005c7e:	0092      	lsls	r2, r2, #2
 8005c80:	210f      	movs	r1, #15
 8005c82:	fa01 f202 	lsl.w	r2, r1, r2
 8005c86:	43d2      	mvns	r2, r2
 8005c88:	401a      	ands	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c92:	78b9      	ldrb	r1, [r7, #2]
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	3a08      	subs	r2, #8
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	70fb      	strb	r3, [r7, #3]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff fd30 	bl	8005724 <gpioVerifyPort>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8005cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd4:	e030      	b.n	8005d38 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fd55 	bl	8005788 <gpioVerifyPin>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f083 0301 	eor.w	r3, r3, #1
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d002      	beq.n	8005cf0 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8005cea:	f06f 0301 	mvn.w	r3, #1
 8005cee:	e023      	b.n	8005d38 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8005cf0:	78bb      	ldrb	r3, [r7, #2]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fdde 	bl	80058b4 <gpioVerifyOutputType>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8005d04:	f06f 0303 	mvn.w	r3, #3
 8005d08:	e016      	b.n	8005d38 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	78fa      	ldrb	r2, [r7, #3]
 8005d10:	2101      	movs	r1, #1
 8005d12:	fa01 f202 	lsl.w	r2, r1, r2
 8005d16:	43d2      	mvns	r2, r2
 8005d18:	401a      	ands	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8005d1e:	78bb      	ldrb	r3, [r7, #2]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d108      	bne.n	8005d36 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	2101      	movs	r1, #1
 8005d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff fce7 	bl	8005724 <gpioVerifyPort>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005d62:	f04f 33ff 	mov.w	r3, #4294967295
 8005d66:	e044      	b.n	8005df2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fd0c 	bl	8005788 <gpioVerifyPin>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f083 0301 	eor.w	r3, r3, #1
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005d7c:	f06f 0301 	mvn.w	r3, #1
 8005d80:	e037      	b.n	8005df2 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8005d82:	78bb      	ldrb	r3, [r7, #2]
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff fda9 	bl	80058dc <gpioVerifyPushPullMode>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f083 0301 	eor.w	r3, r3, #1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8005d96:	f06f 0306 	mvn.w	r3, #6
 8005d9a:	e02a      	b.n	8005df2 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	78fa      	ldrb	r2, [r7, #3]
 8005da2:	0052      	lsls	r2, r2, #1
 8005da4:	2103      	movs	r1, #3
 8005da6:	fa01 f202 	lsl.w	r2, r1, r2
 8005daa:	43d2      	mvns	r2, r2
 8005dac:	401a      	ands	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11a      	bne.n	8005df0 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8005dba:	78bb      	ldrb	r3, [r7, #2]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10a      	bne.n	8005dd6 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	78fa      	ldrb	r2, [r7, #3]
 8005dc6:	0052      	lsls	r2, r2, #1
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f202 	lsl.w	r2, r1, r2
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	e00c      	b.n	8005df0 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8005dd6:	78bb      	ldrb	r3, [r7, #2]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d109      	bne.n	8005df0 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	78fa      	ldrb	r2, [r7, #3]
 8005de2:	0052      	lsls	r2, r2, #1
 8005de4:	2102      	movs	r1, #2
 8005de6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	78fa      	ldrb	r2, [r7, #3]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e12:	4013      	ands	r3, r2
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	2101      	movs	r1, #1
 8005e18:	fa01 f202 	lsl.w	r2, r1, r2
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8005e46:	bf00      	nop
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f9      	beq.n	8005e48 <__i2c_start+0x16>
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8005e76:	bf00      	nop
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f9      	beq.n	8005e78 <__i2c_stop+0x16>
 }
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8005e9a:	bf00      	nop
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf0c      	ite	eq
 8005ea4:	2301      	moveq	r3, #1
 8005ea6:	2300      	movne	r3, #0
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf0c      	ite	eq
 8005eb2:	2301      	moveq	r3, #1
 8005eb4:	2300      	movne	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1ed      	bne.n	8005e9c <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	370c      	adds	r7, #12
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8005ed6:	bf00      	nop
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0f9      	beq.n	8005ed8 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e002      	b.n	8005ef0 <__i2c_Chk_TX_empty+0x22>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b13      	cmp	r3, #19
 8005ef4:	d9f9      	bls.n	8005eea <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8005ef6:	bf00      	nop
 8005ef8:	bf00      	nop
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <i2cVerifyDutyCycle+0x16>
 8005f14:	79fb      	ldrb	r3, [r7, #7]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a13      	ldr	r2, [pc, #76]	; (8005f84 <i2cSelectI2C+0x58>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d106      	bne.n	8005f4a <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005f3c:	4b12      	ldr	r3, [pc, #72]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f46:	6413      	str	r3, [r2, #64]	; 0x40
 8005f48:	e014      	b.n	8005f74 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a0f      	ldr	r2, [pc, #60]	; (8005f8c <i2cSelectI2C+0x60>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d106      	bne.n	8005f60 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f5e:	e009      	b.n	8005f74 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a0b      	ldr	r2, [pc, #44]	; (8005f90 <i2cSelectI2C+0x64>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d105      	bne.n	8005f74 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	4a06      	ldr	r2, [pc, #24]	; (8005f88 <i2cSelectI2C+0x5c>)
 8005f6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f72:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40005400 	.word	0x40005400
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	40005800 	.word	0x40005800
 8005f90:	40005c00 	.word	0x40005c00

08005f94 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <i2cSetClkSpd+0x2a>
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d008      	beq.n	8005fbe <i2cSetClkSpd+0x2a>
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d005      	beq.n	8005fbe <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d002      	beq.n	8005fbe <i2cSetClkSpd+0x2a>
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d166      	bne.n	800608c <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 8005fbe:	bf00      	nop
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f9      	bne.n	8005fc0 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005fda:	f023 030f 	bic.w	r3, r3, #15
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	2b04      	cmp	r3, #4
 8005ff2:	d836      	bhi.n	8006062 <i2cSetClkSpd+0xce>
 8005ff4:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <i2cSetClkSpd+0x68>)
 8005ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffa:	bf00      	nop
 8005ffc:	08006011 	.word	0x08006011
 8006000:	0800601f 	.word	0x0800601f
 8006004:	0800602d 	.word	0x0800602d
 8006008:	0800603b 	.word	0x0800603b
 800600c:	08006049 	.word	0x08006049
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	61da      	str	r2, [r3, #28]
				break;
 800601c:	e02e      	b.n	800607c <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	61da      	str	r2, [r3, #28]
    			break;
 800602a:	e027      	b.n	800607c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	61da      	str	r2, [r3, #28]
    				break;
 8006038:	e020      	b.n	800607c <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	f043 0214 	orr.w	r2, r3, #20
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	61da      	str	r2, [r3, #28]
    			break;
 8006046:	e019      	b.n	800607c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f043 0205 	orr.w	r2, r3, #5
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	61da      	str	r2, [r3, #28]
				break;
 8006060:	e00c      	b.n	800607c <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	61da      	str	r2, [r3, #28]
    			break;
 800607a:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	e001      	b.n	8006090 <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 800608c:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	4608      	mov	r0, r1
 80060a6:	4611      	mov	r1, r2
 80060a8:	461a      	mov	r2, r3
 80060aa:	4603      	mov	r3, r0
 80060ac:	70fb      	strb	r3, [r7, #3]
 80060ae:	460b      	mov	r3, r1
 80060b0:	70bb      	strb	r3, [r7, #2]
 80060b2:	4613      	mov	r3, r2
 80060b4:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ff23 	bl	8005f04 <i2cVerifyDutyCycle>
 80060be:	4603      	mov	r3, r0
 80060c0:	f083 0301 	eor.w	r3, r3, #1
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 80060ca:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 80060ce:	e02d      	b.n	800612c <i2cInitI2C+0x90>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060d6:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 80060ea:	f000 fae5 	bl	80066b8 <rccGetPclk1Freq>
 80060ee:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <i2cInitI2C+0x98>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	0c9a      	lsrs	r2, r3, #18
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 80060fe:	78ba      	ldrb	r2, [r7, #2]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8006118:	787b      	ldrb	r3, [r7, #1]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff ff39 	bl	8005f94 <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    i2cFindSlaveAddr(i2c, 1);			// first run find routine for Adr 0, work arround for result failure at first search run
 8006122:	2101      	movs	r1, #1
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f96a 	bl	80063fe <i2cFindSlaveAddr>


    return I2C_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	431bde83 	.word	0x431bde83

08006138 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4603      	mov	r3, r0
 8006148:	70fb      	strb	r3, [r7, #3]
 800614a:	460b      	mov	r3, r1
 800614c:	70bb      	strb	r3, [r7, #2]
 800614e:	4613      	mov	r3, r2
 8006150:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8006152:	bf00      	nop
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f9      	bne.n	8006154 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fe66 	bl	8005e32 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8006166:	bf00      	nop
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0f9      	beq.n	8006168 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800617e:	bf00      	nop
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0f9      	beq.n	8006180 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff fe80 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f7ff fe9b 	bl	8005ece <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8006198:	78ba      	ldrb	r2, [r7, #2]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fe95 	bl	8005ece <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fe74 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 80061aa:	787a      	ldrb	r2, [r7, #1]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 80061b0:	bf00      	nop
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f9      	beq.n	80061b2 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7ff fe67 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fe4c 	bl	8005e62 <__i2c_stop>


    return I2C_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	460b      	mov	r3, r1
 80061e0:	72fb      	strb	r3, [r7, #11]
 80061e2:	4613      	mov	r3, r2
 80061e4:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 80061e6:	bf00      	nop
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1f9      	bne.n	80061e8 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f7ff fe1c 	bl	8005e32 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80061fa:	bf00      	nop
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	f003 0301 	and.w	r3, r3, #1
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f9      	beq.n	80061fc <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8006208:	7afb      	ldrb	r3, [r7, #11]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	461a      	mov	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8006212:	bf00      	nop
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0f9      	beq.n	8006214 <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fe36 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8006226:	7aba      	ldrb	r2, [r7, #10]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff fe4e 	bl	8005ece <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f7ff fe2d 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8006244:	bf00      	nop
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	f003 0301 	and.w	r3, r3, #1
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f9      	beq.n	8006246 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 8006252:	7afb      	ldrb	r3, [r7, #11]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	f043 0301 	orr.w	r3, r3, #1
 800625a:	461a      	mov	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8006260:	bf00      	nop
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0f9      	beq.n	8006262 <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fe09 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff fdee 	bl	8005e62 <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 8006286:	bf00      	nop
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0f9      	beq.n	8006288 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6919      	ldr	r1, [r3, #16]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	b2ca      	uxtb	r2, r1
 80062a0:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	72fb      	strb	r3, [r7, #11]
 80062ba:	4613      	mov	r3, r2
 80062bc:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 80062be:	bf00      	nop
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f9      	bne.n	80062c0 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f7ff fdb0 	bl	8005e32 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 80062d2:	bf00      	nop
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f003 0301 	and.w	r3, r3, #1
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f9      	beq.n	80062d4 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	461a      	mov	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 80062ea:	bf00      	nop
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f9      	beq.n	80062ec <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fdca 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 80062fe:	7aba      	ldrb	r2, [r7, #10]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff fde2 	bl	8005ece <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 800630a:	bf00      	nop
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0f9      	beq.n	800630c <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f7ff fdba 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 800632a:	bf00      	nop
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0f9      	beq.n	800632c <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	461a      	mov	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8006346:	bf00      	nop
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0f9      	beq.n	8006348 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8006360:	e02e      	b.n	80063c0 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 8006362:	7e3b      	ldrb	r3, [r7, #24]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d117      	bne.n	8006398 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff fd8c 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 800637a:	bf00      	nop
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f9      	beq.n	800637c <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6919      	ldr	r1, [r3, #16]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	1c5a      	adds	r2, r3, #1
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	b2ca      	uxtb	r2, r1
 8006394:	701a      	strb	r2, [r3, #0]
            break;
 8006396:	e016      	b.n	80063c6 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fd7a 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 800639e:	bf00      	nop
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d0f9      	beq.n	80063a0 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6919      	ldr	r1, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	607a      	str	r2, [r7, #4]
 80063b6:	b2ca      	uxtb	r2, r1
 80063b8:	701a      	strb	r2, [r3, #0]
            num--;
 80063ba:	7e3b      	ldrb	r3, [r7, #24]
 80063bc:	3b01      	subs	r3, #1
 80063be:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 80063c0:	7e3b      	ldrb	r3, [r7, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cd      	bne.n	8006362 <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f7ff fd63 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f7ff fd48 	bl	8005e62 <__i2c_stop>

    return I2C_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f043 0201 	orr.w	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fd11 	bl	8005e32 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8006410:	78fb      	ldrb	r3, [r7, #3]
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	461a      	mov	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fd39 	bl	8005e92 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e002      	b.n	8006438 <i2cFindSlaveAddr+0x3a>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	3301      	adds	r3, #1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800643e:	d3f8      	bcc.n	8006432 <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	e000      	b.n	8006452 <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 8006450:	2300      	movs	r3, #0
    }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 800645c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006460:	b094      	sub	sp, #80	; 0x50
 8006462:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 8006464:	2300      	movs	r3, #0
 8006466:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8006468:	2300      	movs	r3, #0
 800646a:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 800646c:	2300      	movs	r3, #0
 800646e:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8006470:	2300      	movs	r3, #0
 8006472:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 8006474:	4b79      	ldr	r3, [pc, #484]	; (800665c <rccGetSysClock+0x200>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b08      	cmp	r3, #8
 800647e:	d00d      	beq.n	800649c <rccGetSysClock+0x40>
 8006480:	2b08      	cmp	r3, #8
 8006482:	f200 80e1 	bhi.w	8006648 <rccGetSysClock+0x1ec>
 8006486:	2b00      	cmp	r3, #0
 8006488:	d002      	beq.n	8006490 <rccGetSysClock+0x34>
 800648a:	2b04      	cmp	r3, #4
 800648c:	d003      	beq.n	8006496 <rccGetSysClock+0x3a>
 800648e:	e0db      	b.n	8006648 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8006490:	4b73      	ldr	r3, [pc, #460]	; (8006660 <rccGetSysClock+0x204>)
 8006492:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8006494:	e0db      	b.n	800664e <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 8006496:	4b73      	ldr	r3, [pc, #460]	; (8006664 <rccGetSysClock+0x208>)
 8006498:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800649a:	e0d8      	b.n	800664e <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800649c:	4b6f      	ldr	r3, [pc, #444]	; (800665c <rccGetSysClock+0x200>)
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a4:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80064a6:	4b6d      	ldr	r3, [pc, #436]	; (800665c <rccGetSysClock+0x200>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d063      	beq.n	800657a <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80064b2:	4b6a      	ldr	r3, [pc, #424]	; (800665c <rccGetSysClock+0x200>)
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	2200      	movs	r2, #0
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80064bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c4:	633b      	str	r3, [r7, #48]	; 0x30
 80064c6:	2300      	movs	r3, #0
 80064c8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064ce:	4622      	mov	r2, r4
 80064d0:	462b      	mov	r3, r5
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f04f 0100 	mov.w	r1, #0
 80064da:	0159      	lsls	r1, r3, #5
 80064dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064e0:	0150      	lsls	r0, r2, #5
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4621      	mov	r1, r4
 80064e8:	1a51      	subs	r1, r2, r1
 80064ea:	6139      	str	r1, [r7, #16]
 80064ec:	4629      	mov	r1, r5
 80064ee:	eb63 0301 	sbc.w	r3, r3, r1
 80064f2:	617b      	str	r3, [r7, #20]
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006500:	4659      	mov	r1, fp
 8006502:	018b      	lsls	r3, r1, #6
 8006504:	4651      	mov	r1, sl
 8006506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800650a:	4651      	mov	r1, sl
 800650c:	018a      	lsls	r2, r1, #6
 800650e:	4651      	mov	r1, sl
 8006510:	ebb2 0801 	subs.w	r8, r2, r1
 8006514:	4659      	mov	r1, fp
 8006516:	eb63 0901 	sbc.w	r9, r3, r1
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	f04f 0300 	mov.w	r3, #0
 8006522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800652a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800652e:	4690      	mov	r8, r2
 8006530:	4699      	mov	r9, r3
 8006532:	4623      	mov	r3, r4
 8006534:	eb18 0303 	adds.w	r3, r8, r3
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	462b      	mov	r3, r5
 800653c:	eb49 0303 	adc.w	r3, r9, r3
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800654e:	4629      	mov	r1, r5
 8006550:	024b      	lsls	r3, r1, #9
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006558:	4621      	mov	r1, r4
 800655a:	024a      	lsls	r2, r1, #9
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	2200      	movs	r2, #0
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
 8006566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656c:	f7fa fb24 	bl	8000bb8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8006574:	4613      	mov	r3, r2
 8006576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006578:	e058      	b.n	800662c <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <rccGetSysClock+0x200>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	099b      	lsrs	r3, r3, #6
 8006580:	2200      	movs	r2, #0
 8006582:	4618      	mov	r0, r3
 8006584:	4611      	mov	r1, r2
 8006586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800658a:	623b      	str	r3, [r7, #32]
 800658c:	2300      	movs	r3, #0
 800658e:	627b      	str	r3, [r7, #36]	; 0x24
 8006590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006594:	4642      	mov	r2, r8
 8006596:	464b      	mov	r3, r9
 8006598:	f04f 0000 	mov.w	r0, #0
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	0159      	lsls	r1, r3, #5
 80065a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065a6:	0150      	lsls	r0, r2, #5
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4641      	mov	r1, r8
 80065ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80065b2:	4649      	mov	r1, r9
 80065b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065cc:	ebb2 040a 	subs.w	r4, r2, sl
 80065d0:	eb63 050b 	sbc.w	r5, r3, fp
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	00eb      	lsls	r3, r5, #3
 80065de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065e2:	00e2      	lsls	r2, r4, #3
 80065e4:	4614      	mov	r4, r2
 80065e6:	461d      	mov	r5, r3
 80065e8:	4643      	mov	r3, r8
 80065ea:	18e3      	adds	r3, r4, r3
 80065ec:	603b      	str	r3, [r7, #0]
 80065ee:	464b      	mov	r3, r9
 80065f0:	eb45 0303 	adc.w	r3, r5, r3
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006602:	4629      	mov	r1, r5
 8006604:	028b      	lsls	r3, r1, #10
 8006606:	4621      	mov	r1, r4
 8006608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800660c:	4621      	mov	r1, r4
 800660e:	028a      	lsls	r2, r1, #10
 8006610:	4610      	mov	r0, r2
 8006612:	4619      	mov	r1, r3
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	2200      	movs	r2, #0
 8006618:	61bb      	str	r3, [r7, #24]
 800661a:	61fa      	str	r2, [r7, #28]
 800661c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006620:	f7fa faca 	bl	8000bb8 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8006628:	4613      	mov	r3, r2
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <rccGetSysClock+0x200>)
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	f003 0303 	and.w	r3, r3, #3
 8006636:	3301      	adds	r3, #1
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 800663c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800663e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006640:	fbb2 f3f3 	udiv	r3, r2, r3
 8006644:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8006646:	e002      	b.n	800664e <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <rccGetSysClock+0x204>)
 800664a:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800664c:	bf00      	nop
    }

    return sysClock;
 800664e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006650:	4618      	mov	r0, r3
 8006652:	3750      	adds	r7, #80	; 0x50
 8006654:	46bd      	mov	sp, r7
 8006656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800665a:	bf00      	nop
 800665c:	40023800 	.word	0x40023800
 8006660:	00f42400 	.word	0x00f42400
 8006664:	007a1200 	.word	0x007a1200

08006668 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 800666e:	f7ff fef5 	bl	800645c <rccGetSysClock>
 8006672:	4601      	mov	r1, r0
 8006674:	4b0d      	ldr	r3, [pc, #52]	; (80066ac <rccGetHclkFreq+0x44>)
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667c:	22f0      	movs	r2, #240	; 0xf0
 800667e:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	fa92 f2a2 	rbit	r2, r2
 8006686:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	fab2 f282 	clz	r2, r2
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	40d3      	lsrs	r3, r2
 8006692:	4a07      	ldr	r2, [pc, #28]	; (80066b0 <rccGetHclkFreq+0x48>)
 8006694:	5cd3      	ldrb	r3, [r2, r3]
 8006696:	fa21 f303 	lsr.w	r3, r1, r3
 800669a:	4a06      	ldr	r2, [pc, #24]	; (80066b4 <rccGetHclkFreq+0x4c>)
 800669c:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <rccGetHclkFreq+0x4c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40023800 	.word	0x40023800
 80066b0:	0800b79c 	.word	0x0800b79c
 80066b4:	2000004c 	.word	0x2000004c

080066b8 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80066be:	f7ff ffd3 	bl	8006668 <rccGetHclkFreq>
 80066c2:	4601      	mov	r1, r0
 80066c4:	4b0b      	ldr	r3, [pc, #44]	; (80066f4 <rccGetPclk1Freq+0x3c>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80066cc:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80066d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	fa92 f2a2 	rbit	r2, r2
 80066d8:	603a      	str	r2, [r7, #0]
  return result;
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	fab2 f282 	clz	r2, r2
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	40d3      	lsrs	r3, r2
 80066e4:	4a04      	ldr	r2, [pc, #16]	; (80066f8 <rccGetPclk1Freq+0x40>)
 80066e6:	5cd3      	ldrb	r3, [r2, r3]
 80066e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40023800 	.word	0x40023800
 80066f8:	0800b79c 	.word	0x0800b79c

080066fc <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 8006704:	bf00      	nop
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0f9      	beq.n	8006706 <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 8006712:	2300      	movs	r3, #0
 8006714:	81fb      	strh	r3, [r7, #14]
 8006716:	e002      	b.n	800671e <__spi_Chk_TX_empty+0x22>
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	3301      	adds	r3, #1
 800671c:	81fb      	strh	r3, [r7, #14]
 800671e:	89fb      	ldrh	r3, [r7, #14]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d9f9      	bls.n	8006718 <__spi_Chk_TX_empty+0x1c>

}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 800673a:	bf00      	nop
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f9      	bne.n	800673c <__spi_Chk_notBSY+0xa>
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a0c      	ldr	r2, [pc, #48]	; (8006794 <spiVerifySPI+0x3c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00b      	beq.n	8006780 <spiVerifySPI+0x28>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <spiVerifySPI+0x40>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d007      	beq.n	8006780 <spiVerifySPI+0x28>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <spiVerifySPI+0x44>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <spiVerifySPI+0x28>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <spiVerifySPI+0x48>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d101      	bne.n	8006784 <spiVerifySPI+0x2c>
    {
        return true;
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <spiVerifySPI+0x2e>
    }
    return false;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40013000 	.word	0x40013000
 8006798:	40003800 	.word	0x40003800
 800679c:	40003c00 	.word	0x40003c00
 80067a0:	40013400 	.word	0x40013400

080067a4 <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d014      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d011      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d00e      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b03      	cmp	r3, #3
 80067c4:	d00b      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	2b04      	cmp	r3, #4
 80067ca:	d008      	beq.n	80067de <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 80067cc:	79fb      	ldrb	r3, [r7, #7]
 80067ce:	2b05      	cmp	r3, #5
 80067d0:	d005      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	d002      	beq.n	80067de <spiVerifyClkDivider+0x3a>
 80067d8:	79fb      	ldrb	r3, [r7, #7]
 80067da:	2b07      	cmp	r3, #7
 80067dc:	d101      	bne.n	80067e2 <spiVerifyClkDivider+0x3e>
    {
        return true;
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <spiVerifyClkDivider+0x40>
    }
    return false;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d002      	beq.n	8006806 <spiVerifySSM+0x16>
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <spiVerifySSM+0x1a>
    {
        return true;
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <spiVerifySSM+0x1c>
    }
    return false;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	4603      	mov	r3, r0
 8006820:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <spiVerifyOpMode+0x16>
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <spiVerifyOpMode+0x1a>
    {
        return true;
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <spiVerifyOpMode+0x1c>
    }
    return false;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <spiVerifyPhase+0x16>
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d101      	bne.n	800685a <spiVerifyPhase+0x1a>
    {
        return true;
 8006856:	2301      	movs	r3, #1
 8006858:	e000      	b.n	800685c <spiVerifyPhase+0x1c>
    }
    return false;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 8006872:	79fb      	ldrb	r3, [r7, #7]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <spiVerifyIdlePolarity+0x16>
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d101      	bne.n	8006882 <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	4608      	mov	r0, r1
 800689a:	4611      	mov	r1, r2
 800689c:	461a      	mov	r2, r3
 800689e:	4603      	mov	r3, r0
 80068a0:	70fb      	strb	r3, [r7, #3]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70bb      	strb	r3, [r7, #2]
 80068a6:	4613      	mov	r3, r2
 80068a8:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff ff77 	bl	80067a4 <spiVerifyClkDivider>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f083 0301 	eor.w	r3, r3, #1
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 80068c2:	f06f 0350 	mvn.w	r3, #80	; 0x50
 80068c6:	e0cc      	b.n	8006a62 <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 80068c8:	787b      	ldrb	r3, [r7, #1]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ff90 	bl	80067f0 <spiVerifySSM>
 80068d0:	4603      	mov	r3, r0
 80068d2:	f083 0301 	eor.w	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 80068dc:	f06f 0352 	mvn.w	r3, #82	; 0x52
 80068e0:	e0bf      	b.n	8006a62 <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 80068e2:	7f3b      	ldrb	r3, [r7, #28]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff ff97 	bl	8006818 <spiVerifyOpMode>
 80068ea:	4603      	mov	r3, r0
 80068ec:	f083 0301 	eor.w	r3, r3, #1
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 80068f6:	f06f 0355 	mvn.w	r3, #85	; 0x55
 80068fa:	e0b2      	b.n	8006a62 <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 80068fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff ff9d 	bl	8006840 <spiVerifyPhase>
 8006906:	4603      	mov	r3, r0
 8006908:	f083 0301 	eor.w	r3, r3, #1
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 8006912:	f06f 0356 	mvn.w	r3, #86	; 0x56
 8006916:	e0a4      	b.n	8006a62 <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8006918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff ffa3 	bl	8006868 <spiVerifyIdlePolarity>
 8006922:	4603      	mov	r3, r0
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d002      	beq.n	8006934 <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 800692e:	f06f 0357 	mvn.w	r3, #87	; 0x57
 8006932:	e096      	b.n	8006a62 <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	2b07      	cmp	r3, #7
 8006938:	d83a      	bhi.n	80069b0 <spiInitSPI+0x120>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <spiInitSPI+0xb0>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006961 	.word	0x08006961
 8006944:	0800696b 	.word	0x0800696b
 8006948:	08006975 	.word	0x08006975
 800694c:	0800697f 	.word	0x0800697f
 8006950:	08006989 	.word	0x08006989
 8006954:	08006993 	.word	0x08006993
 8006958:	0800699d 	.word	0x0800699d
 800695c:	080069a7 	.word	0x080069a7
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006960:	89fb      	ldrh	r3, [r7, #14]
 8006962:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006966:	81fb      	strh	r3, [r7, #14]
            break;
 8006968:	e027      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 800696a:	89fb      	ldrh	r3, [r7, #14]
 800696c:	f043 0308 	orr.w	r3, r3, #8
 8006970:	81fb      	strh	r3, [r7, #14]
            break;
 8006972:	e022      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 8006974:	89fb      	ldrh	r3, [r7, #14]
 8006976:	f043 0310 	orr.w	r3, r3, #16
 800697a:	81fb      	strh	r3, [r7, #14]
            break;
 800697c:	e01d      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800697e:	89fb      	ldrh	r3, [r7, #14]
 8006980:	f043 0318 	orr.w	r3, r3, #24
 8006984:	81fb      	strh	r3, [r7, #14]
            break;
 8006986:	e018      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8006988:	89fb      	ldrh	r3, [r7, #14]
 800698a:	f043 0320 	orr.w	r3, r3, #32
 800698e:	81fb      	strh	r3, [r7, #14]
            break;
 8006990:	e013      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 8006992:	89fb      	ldrh	r3, [r7, #14]
 8006994:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006998:	81fb      	strh	r3, [r7, #14]
            break;
 800699a:	e00e      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 800699c:	89fb      	ldrh	r3, [r7, #14]
 800699e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80069a2:	81fb      	strh	r3, [r7, #14]
            break;
 80069a4:	e009      	b.n	80069ba <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80069a6:	89fb      	ldrh	r3, [r7, #14]
 80069a8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80069ac:	81fb      	strh	r3, [r7, #14]
            break;
 80069ae:	e004      	b.n	80069ba <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80069b0:	89fb      	ldrh	r3, [r7, #14]
 80069b2:	f043 0318 	orr.w	r3, r3, #24
 80069b6:	81fb      	strh	r3, [r7, #14]
            break;
 80069b8:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 80069ba:	78bb      	ldrb	r3, [r7, #2]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c6:	81fb      	strh	r3, [r7, #14]
 80069c8:	e003      	b.n	80069d2 <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 80069ca:	89fb      	ldrh	r3, [r7, #14]
 80069cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80069d0:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 80069d2:	787b      	ldrb	r3, [r7, #1]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d110      	bne.n	80069fa <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069de:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 80069e0:	7e3b      	ldrb	r3, [r7, #24]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d104      	bne.n	80069f0 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 80069e6:	89fb      	ldrh	r3, [r7, #14]
 80069e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ec:	81fb      	strh	r3, [r7, #14]
 80069ee:	e008      	b.n	8006a02 <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 80069f0:	89fb      	ldrh	r3, [r7, #14]
 80069f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069f6:	81fb      	strh	r3, [r7, #14]
 80069f8:	e003      	b.n	8006a02 <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 80069fa:	89fb      	ldrh	r3, [r7, #14]
 80069fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a00:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 8006a02:	7f3b      	ldrb	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8006a08:	89fb      	ldrh	r3, [r7, #14]
 8006a0a:	f043 0304 	orr.w	r3, r3, #4
 8006a0e:	81fb      	strh	r3, [r7, #14]
 8006a10:	e003      	b.n	8006a1a <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 8006a12:	89fb      	ldrh	r3, [r7, #14]
 8006a14:	f023 0304 	bic.w	r3, r3, #4
 8006a18:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8006a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d104      	bne.n	8006a2c <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 8006a22:	89fb      	ldrh	r3, [r7, #14]
 8006a24:	f023 0301 	bic.w	r3, r3, #1
 8006a28:	81fb      	strh	r3, [r7, #14]
 8006a2a:	e003      	b.n	8006a34 <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8006a2c:	89fb      	ldrh	r3, [r7, #14]
 8006a2e:	f043 0301 	orr.w	r3, r3, #1
 8006a32:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 8006a34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	f023 0302 	bic.w	r3, r3, #2
 8006a42:	81fb      	strh	r3, [r7, #14]
 8006a44:	e003      	b.n	8006a4e <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 8006a46:	89fb      	ldrh	r3, [r7, #14]
 8006a48:	f043 0302 	orr.w	r3, r3, #2
 8006a4c:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 8006a4e:	89fa      	ldrh	r2, [r7, #14]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f846 	bl	8006aec <spiEnableSPI>

    return SPI_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop

08006a6c <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <spiSelectSPI+0x6c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d106      	bne.n	8006a8a <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006a7c:	4b17      	ldr	r3, [pc, #92]	; (8006adc <spiSelectSPI+0x70>)
 8006a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a80:	4a16      	ldr	r2, [pc, #88]	; (8006adc <spiSelectSPI+0x70>)
 8006a82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a86:	6453      	str	r3, [r2, #68]	; 0x44
 8006a88:	e01f      	b.n	8006aca <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a14      	ldr	r2, [pc, #80]	; (8006ae0 <spiSelectSPI+0x74>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d106      	bne.n	8006aa0 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006a92:	4b12      	ldr	r3, [pc, #72]	; (8006adc <spiSelectSPI+0x70>)
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4a11      	ldr	r2, [pc, #68]	; (8006adc <spiSelectSPI+0x70>)
 8006a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a9e:	e014      	b.n	8006aca <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <spiSelectSPI+0x78>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d106      	bne.n	8006ab6 <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006aa8:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <spiSelectSPI+0x70>)
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	4a0b      	ldr	r2, [pc, #44]	; (8006adc <spiSelectSPI+0x70>)
 8006aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8006ab4:	e009      	b.n	8006aca <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a0b      	ldr	r2, [pc, #44]	; (8006ae8 <spiSelectSPI+0x7c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d105      	bne.n	8006aca <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <spiSelectSPI+0x70>)
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	4a06      	ldr	r2, [pc, #24]	; (8006adc <spiSelectSPI+0x70>)
 8006ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ac8:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr
 8006ad8:	40013000 	.word	0x40013000
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40003800 	.word	0x40003800
 8006ae4:	40003c00 	.word	0x40003c00
 8006ae8:	40013400 	.word	0x40013400

08006aec <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fe2f 	bl	8006758 <spiVerifySPI>
 8006afa:	4603      	mov	r3, r0
 8006afc:	f083 0301 	eor.w	r3, r3, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 8006b06:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8006b0a:	e006      	b.n	8006b1a <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	461a      	mov	r2, r3
 8006b30:	460b      	mov	r3, r1
 8006b32:	71fb      	strb	r3, [r7, #7]
 8006b34:	4613      	mov	r3, r2
 8006b36:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8006b38:	79fb      	ldrb	r3, [r7, #7]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7fe fe24 	bl	8005788 <gpioVerifyPin>
 8006b40:	4603      	mov	r3, r0
 8006b42:	f083 0301 	eor.w	r3, r3, #1
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 8006b4c:	f06f 0301 	mvn.w	r3, #1
 8006b50:	e016      	b.n	8006b80 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f7ff fdd2 	bl	80066fc <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	f7ff f811 	bl	8005b84 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 8006b62:	79ba      	ldrb	r2, [r7, #6]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f7ff fdc7 	bl	80066fc <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7ff fddf 	bl	8006732 <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	4619      	mov	r1, r3
 8006b78:	68b8      	ldr	r0, [r7, #8]
 8006b7a:	f7fe ffd8 	bl	8005b2e <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	6039      	str	r1, [r7, #0]
 8006b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	db0a      	blt.n	8006bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	b2da      	uxtb	r2, r3
 8006ba0:	490c      	ldr	r1, [pc, #48]	; (8006bd4 <__NVIC_SetPriority+0x4c>)
 8006ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba6:	0112      	lsls	r2, r2, #4
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	440b      	add	r3, r1
 8006bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bb0:	e00a      	b.n	8006bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	4908      	ldr	r1, [pc, #32]	; (8006bd8 <__NVIC_SetPriority+0x50>)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	3b04      	subs	r3, #4
 8006bc0:	0112      	lsls	r2, r2, #4
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	440b      	add	r3, r1
 8006bc6:	761a      	strb	r2, [r3, #24]
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	e000e100 	.word	0xe000e100
 8006bd8:	e000ed00 	.word	0xe000ed00

08006bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	3b01      	subs	r3, #1
 8006be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bec:	d301      	bcc.n	8006bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e00f      	b.n	8006c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <SysTick_Config+0x40>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bfa:	210f      	movs	r1, #15
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	f7ff ffc2 	bl	8006b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c04:	4b05      	ldr	r3, [pc, #20]	; (8006c1c <SysTick_Config+0x40>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c0a:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <SysTick_Config+0x40>)
 8006c0c:	2207      	movs	r2, #7
 8006c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	e000e010 	.word	0xe000e010

08006c20 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8006c44:	f000 f8b2 	bl	8006dac <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <systickInit+0x24>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff ffc2 	bl	8006bdc <SysTick_Config>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	2000004c 	.word	0x2000004c

08006c64 <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d101      	bne.n	8006c96 <isSystickExpired+0x16>
	{
		timerState = true;
 8006c92:	2301      	movs	r3, #1
 8006c94:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8006ca8:	4b03      	ldr	r3, [pc, #12]	; (8006cb8 <SysTick_Handler+0x14>)
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]
}
 8006cae:	bf00      	nop
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000248 	.word	0x20000248

08006cbc <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <systickUpdateTimer+0x1a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8006cd6:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <systickUpdateTimer+0x2c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	20000248 	.word	0x20000248

08006cec <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e011      	b.n	8006d22 <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	4413      	add	r3, r2
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <systickUpdateTimerList+0x30>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	1e5a      	subs	r2, r3, #1
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	73fb      	strb	r3, [r7, #15]
 8006d22:	7bfa      	ldrb	r2, [r7, #15]
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d3e9      	bcc.n	8006cfe <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8006d2a:	4b04      	ldr	r3, [pc, #16]	; (8006d3c <systickUpdateTimerList+0x50>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]
}
 8006d30:	bf00      	nop
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	20000248 	.word	0x20000248

08006d40 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff67 	bl	8006c20 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8006d52:	e006      	b.n	8006d62 <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8006d54:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <systickDelay+0x44>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff ffad 	bl	8006cbc <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7ff ff8a 	bl	8006c80 <isSystickExpired>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ed      	bne.n	8006d54 <systickDelay+0x14>
        }
    }
}
 8006d78:	bf00      	nop
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000248 	.word	0x20000248

08006d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <SystemInit+0x20>)
 8006d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d92:	4a05      	ldr	r2, [pc, #20]	; (8006da8 <SystemInit+0x20>)
 8006d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006d9c:	bf00      	nop
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	e000ed00 	.word	0xe000ed00

08006dac <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006db2:	2300      	movs	r3, #0
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	2300      	movs	r3, #0
 8006db8:	617b      	str	r3, [r7, #20]
 8006dba:	2302      	movs	r3, #2
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	2302      	movs	r3, #2
 8006dc4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8006dc6:	4b34      	ldr	r3, [pc, #208]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d011      	beq.n	8006dfa <SystemCoreClockUpdate+0x4e>
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d844      	bhi.n	8006e66 <SystemCoreClockUpdate+0xba>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <SystemCoreClockUpdate+0x3e>
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b04      	cmp	r3, #4
 8006de6:	d004      	beq.n	8006df2 <SystemCoreClockUpdate+0x46>
 8006de8:	e03d      	b.n	8006e66 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8006dea:	4b2c      	ldr	r3, [pc, #176]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006dec:	4a2c      	ldr	r2, [pc, #176]	; (8006ea0 <SystemCoreClockUpdate+0xf4>)
 8006dee:	601a      	str	r2, [r3, #0]
      break;
 8006df0:	e03d      	b.n	8006e6e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8006df2:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006df4:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <SystemCoreClockUpdate+0xf8>)
 8006df6:	601a      	str	r2, [r3, #0]
      break;
 8006df8:	e039      	b.n	8006e6e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8006dfa:	4b27      	ldr	r3, [pc, #156]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	0d9b      	lsrs	r3, r3, #22
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e06:	4b24      	ldr	r3, [pc, #144]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e0e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00c      	beq.n	8006e30 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006e16:	4a23      	ldr	r2, [pc, #140]	; (8006ea4 <SystemCoreClockUpdate+0xf8>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e1e:	4a1e      	ldr	r2, [pc, #120]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006e20:	6852      	ldr	r2, [r2, #4]
 8006e22:	0992      	lsrs	r2, r2, #6
 8006e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	e00b      	b.n	8006e48 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <SystemCoreClockUpdate+0xf4>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006e3a:	6852      	ldr	r2, [r2, #4]
 8006e3c:	0992      	lsrs	r2, r2, #6
 8006e3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	3301      	adds	r3, #1
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e60:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006e62:	6013      	str	r3, [r2, #0]
      break;
 8006e64:	e003      	b.n	8006e6e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006e68:	4a0d      	ldr	r2, [pc, #52]	; (8006ea0 <SystemCoreClockUpdate+0xf4>)
 8006e6a:	601a      	str	r2, [r3, #0]
      break;
 8006e6c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <SystemCoreClockUpdate+0xec>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	091b      	lsrs	r3, r3, #4
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	4a0b      	ldr	r2, [pc, #44]	; (8006ea8 <SystemCoreClockUpdate+0xfc>)
 8006e7a:	5cd3      	ldrb	r3, [r2, r3]
 8006e7c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006e7e:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
 8006e88:	4a04      	ldr	r2, [pc, #16]	; (8006e9c <SystemCoreClockUpdate+0xf0>)
 8006e8a:	6013      	str	r3, [r2, #0]
}
 8006e8c:	bf00      	nop
 8006e8e:	371c      	adds	r7, #28
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	2000004c 	.word	0x2000004c
 8006ea0:	00f42400 	.word	0x00f42400
 8006ea4:	007a1200 	.word	0x007a1200
 8006ea8:	0800b7ac 	.word	0x0800b7ac

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f003 fff0 	bl	800aea4 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	0800bd78 	.word	0x0800bd78
 8006ee8:	0800bd78 	.word	0x0800bd78
 8006eec:	0800bd78 	.word	0x0800bd78
 8006ef0:	0800bd7c 	.word	0x0800bd7c

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <__cvt>:
 8006f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	ec55 4b10 	vmov	r4, r5, d0
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4619      	mov	r1, r3
 8006f12:	462b      	mov	r3, r5
 8006f14:	bfbb      	ittet	lt
 8006f16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f1a:	461d      	movlt	r5, r3
 8006f1c:	2300      	movge	r3, #0
 8006f1e:	232d      	movlt	r3, #45	; 0x2d
 8006f20:	700b      	strb	r3, [r1, #0]
 8006f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f28:	4691      	mov	r9, r2
 8006f2a:	f023 0820 	bic.w	r8, r3, #32
 8006f2e:	bfbc      	itt	lt
 8006f30:	4622      	movlt	r2, r4
 8006f32:	4614      	movlt	r4, r2
 8006f34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f38:	d005      	beq.n	8006f46 <__cvt+0x42>
 8006f3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3e:	d100      	bne.n	8006f42 <__cvt+0x3e>
 8006f40:	3601      	adds	r6, #1
 8006f42:	2102      	movs	r1, #2
 8006f44:	e000      	b.n	8006f48 <__cvt+0x44>
 8006f46:	2103      	movs	r1, #3
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	ab02      	add	r3, sp, #8
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	ec45 4b10 	vmov	d0, r4, r5
 8006f54:	4653      	mov	r3, sl
 8006f56:	4632      	mov	r2, r6
 8006f58:	f000 fcea 	bl	8007930 <_dtoa_r>
 8006f5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f60:	4607      	mov	r7, r0
 8006f62:	d102      	bne.n	8006f6a <__cvt+0x66>
 8006f64:	f019 0f01 	tst.w	r9, #1
 8006f68:	d022      	beq.n	8006fb0 <__cvt+0xac>
 8006f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6e:	eb07 0906 	add.w	r9, r7, r6
 8006f72:	d110      	bne.n	8006f96 <__cvt+0x92>
 8006f74:	783b      	ldrb	r3, [r7, #0]
 8006f76:	2b30      	cmp	r3, #48	; 0x30
 8006f78:	d10a      	bne.n	8006f90 <__cvt+0x8c>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fda9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f86:	b918      	cbnz	r0, 8006f90 <__cvt+0x8c>
 8006f88:	f1c6 0601 	rsb	r6, r6, #1
 8006f8c:	f8ca 6000 	str.w	r6, [sl]
 8006f90:	f8da 3000 	ldr.w	r3, [sl]
 8006f94:	4499      	add	r9, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fd9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fa2:	b108      	cbz	r0, 8006fa8 <__cvt+0xa4>
 8006fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa8:	2230      	movs	r2, #48	; 0x30
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	454b      	cmp	r3, r9
 8006fae:	d307      	bcc.n	8006fc0 <__cvt+0xbc>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb4:	1bdb      	subs	r3, r3, r7
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	b004      	add	sp, #16
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	9103      	str	r1, [sp, #12]
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e7f0      	b.n	8006faa <__cvt+0xa6>

08006fc8 <__exponent>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	bfb8      	it	lt
 8006fd0:	4249      	neglt	r1, r1
 8006fd2:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd6:	bfb4      	ite	lt
 8006fd8:	222d      	movlt	r2, #45	; 0x2d
 8006fda:	222b      	movge	r2, #43	; 0x2b
 8006fdc:	2909      	cmp	r1, #9
 8006fde:	7042      	strb	r2, [r0, #1]
 8006fe0:	dd2a      	ble.n	8007038 <__exponent+0x70>
 8006fe2:	f10d 0407 	add.w	r4, sp, #7
 8006fe6:	46a4      	mov	ip, r4
 8006fe8:	270a      	movs	r7, #10
 8006fea:	46a6      	mov	lr, r4
 8006fec:	460a      	mov	r2, r1
 8006fee:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ff2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ff6:	3530      	adds	r5, #48	; 0x30
 8006ff8:	2a63      	cmp	r2, #99	; 0x63
 8006ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007002:	4631      	mov	r1, r6
 8007004:	dcf1      	bgt.n	8006fea <__exponent+0x22>
 8007006:	3130      	adds	r1, #48	; 0x30
 8007008:	f1ae 0502 	sub.w	r5, lr, #2
 800700c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007010:	1c44      	adds	r4, r0, #1
 8007012:	4629      	mov	r1, r5
 8007014:	4561      	cmp	r1, ip
 8007016:	d30a      	bcc.n	800702e <__exponent+0x66>
 8007018:	f10d 0209 	add.w	r2, sp, #9
 800701c:	eba2 020e 	sub.w	r2, r2, lr
 8007020:	4565      	cmp	r5, ip
 8007022:	bf88      	it	hi
 8007024:	2200      	movhi	r2, #0
 8007026:	4413      	add	r3, r2
 8007028:	1a18      	subs	r0, r3, r0
 800702a:	b003      	add	sp, #12
 800702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007032:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007036:	e7ed      	b.n	8007014 <__exponent+0x4c>
 8007038:	2330      	movs	r3, #48	; 0x30
 800703a:	3130      	adds	r1, #48	; 0x30
 800703c:	7083      	strb	r3, [r0, #2]
 800703e:	70c1      	strb	r1, [r0, #3]
 8007040:	1d03      	adds	r3, r0, #4
 8007042:	e7f1      	b.n	8007028 <__exponent+0x60>

08007044 <_printf_float>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	ed2d 8b02 	vpush	{d8}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	460c      	mov	r4, r1
 8007050:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007054:	4616      	mov	r6, r2
 8007056:	461f      	mov	r7, r3
 8007058:	4605      	mov	r5, r0
 800705a:	f001 fa57 	bl	800850c <_localeconv_r>
 800705e:	f8d0 a000 	ldr.w	sl, [r0]
 8007062:	4650      	mov	r0, sl
 8007064:	f7f9 f8bc 	bl	80001e0 <strlen>
 8007068:	2300      	movs	r3, #0
 800706a:	930a      	str	r3, [sp, #40]	; 0x28
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	f8d8 3000 	ldr.w	r3, [r8]
 8007074:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007078:	3307      	adds	r3, #7
 800707a:	f023 0307 	bic.w	r3, r3, #7
 800707e:	f103 0208 	add.w	r2, r3, #8
 8007082:	f8c8 2000 	str.w	r2, [r8]
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800708e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f8cd 8018 	str.w	r8, [sp, #24]
 800709c:	ee08 0a10 	vmov	s16, r0
 80070a0:	4b9f      	ldr	r3, [pc, #636]	; (8007320 <_printf_float+0x2dc>)
 80070a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	f7f9 fd47 	bl	8000b3c <__aeabi_dcmpun>
 80070ae:	bb88      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b4:	4b9a      	ldr	r3, [pc, #616]	; (8007320 <_printf_float+0x2dc>)
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	f7f9 fd21 	bl	8000b00 <__aeabi_dcmple>
 80070be:	bb48      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	4640      	mov	r0, r8
 80070c6:	4649      	mov	r1, r9
 80070c8:	f7f9 fd10 	bl	8000aec <__aeabi_dcmplt>
 80070cc:	b110      	cbz	r0, 80070d4 <_printf_float+0x90>
 80070ce:	232d      	movs	r3, #45	; 0x2d
 80070d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d4:	4b93      	ldr	r3, [pc, #588]	; (8007324 <_printf_float+0x2e0>)
 80070d6:	4894      	ldr	r0, [pc, #592]	; (8007328 <_printf_float+0x2e4>)
 80070d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070dc:	bf94      	ite	ls
 80070de:	4698      	movls	r8, r3
 80070e0:	4680      	movhi	r8, r0
 80070e2:	2303      	movs	r3, #3
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	f023 0204 	bic.w	r2, r3, #4
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	9700      	str	r7, [sp, #0]
 80070f4:	4633      	mov	r3, r6
 80070f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f8:	4621      	mov	r1, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 f9d8 	bl	80074b0 <_printf_common>
 8007100:	3001      	adds	r0, #1
 8007102:	f040 8090 	bne.w	8007226 <_printf_float+0x1e2>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	b00d      	add	sp, #52	; 0x34
 800710c:	ecbd 8b02 	vpop	{d8}
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fd0e 	bl	8000b3c <__aeabi_dcmpun>
 8007120:	b140      	cbz	r0, 8007134 <_printf_float+0xf0>
 8007122:	464b      	mov	r3, r9
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbc      	itt	lt
 8007128:	232d      	movlt	r3, #45	; 0x2d
 800712a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800712e:	487f      	ldr	r0, [pc, #508]	; (800732c <_printf_float+0x2e8>)
 8007130:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <_printf_float+0x2ec>)
 8007132:	e7d1      	b.n	80070d8 <_printf_float+0x94>
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800713a:	9206      	str	r2, [sp, #24]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	d13f      	bne.n	80071c0 <_printf_float+0x17c>
 8007140:	2306      	movs	r3, #6
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	9b05      	ldr	r3, [sp, #20]
 8007146:	6861      	ldr	r1, [r4, #4]
 8007148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	ab0a      	add	r3, sp, #40	; 0x28
 8007152:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007156:	ab09      	add	r3, sp, #36	; 0x24
 8007158:	ec49 8b10 	vmov	d0, r8, r9
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fecd 	bl	8006f04 <__cvt>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800716e:	2b47      	cmp	r3, #71	; 0x47
 8007170:	4680      	mov	r8, r0
 8007172:	d108      	bne.n	8007186 <_printf_float+0x142>
 8007174:	1cc8      	adds	r0, r1, #3
 8007176:	db02      	blt.n	800717e <_printf_float+0x13a>
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	4299      	cmp	r1, r3
 800717c:	dd41      	ble.n	8007202 <_printf_float+0x1be>
 800717e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007182:	fa5f fb8b 	uxtb.w	fp, fp
 8007186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800718a:	d820      	bhi.n	80071ce <_printf_float+0x18a>
 800718c:	3901      	subs	r1, #1
 800718e:	465a      	mov	r2, fp
 8007190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007194:	9109      	str	r1, [sp, #36]	; 0x24
 8007196:	f7ff ff17 	bl	8006fc8 <__exponent>
 800719a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719c:	1813      	adds	r3, r2, r0
 800719e:	2a01      	cmp	r2, #1
 80071a0:	4681      	mov	r9, r0
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	dc02      	bgt.n	80071ac <_printf_float+0x168>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	07d2      	lsls	r2, r2, #31
 80071aa:	d501      	bpl.n	80071b0 <_printf_float+0x16c>
 80071ac:	3301      	adds	r3, #1
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d09c      	beq.n	80070f2 <_printf_float+0xae>
 80071b8:	232d      	movs	r3, #45	; 0x2d
 80071ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071be:	e798      	b.n	80070f2 <_printf_float+0xae>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	2a47      	cmp	r2, #71	; 0x47
 80071c4:	d1be      	bne.n	8007144 <_printf_float+0x100>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1bc      	bne.n	8007144 <_printf_float+0x100>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7b9      	b.n	8007142 <_printf_float+0xfe>
 80071ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071d2:	d118      	bne.n	8007206 <_printf_float+0x1c2>
 80071d4:	2900      	cmp	r1, #0
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	dd0b      	ble.n	80071f2 <_printf_float+0x1ae>
 80071da:	6121      	str	r1, [r4, #16]
 80071dc:	b913      	cbnz	r3, 80071e4 <_printf_float+0x1a0>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d0      	lsls	r0, r2, #31
 80071e2:	d502      	bpl.n	80071ea <_printf_float+0x1a6>
 80071e4:	3301      	adds	r3, #1
 80071e6:	440b      	add	r3, r1
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	e7de      	b.n	80071b0 <_printf_float+0x16c>
 80071f2:	b913      	cbnz	r3, 80071fa <_printf_float+0x1b6>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	07d2      	lsls	r2, r2, #31
 80071f8:	d501      	bpl.n	80071fe <_printf_float+0x1ba>
 80071fa:	3302      	adds	r3, #2
 80071fc:	e7f4      	b.n	80071e8 <_printf_float+0x1a4>
 80071fe:	2301      	movs	r3, #1
 8007200:	e7f2      	b.n	80071e8 <_printf_float+0x1a4>
 8007202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	4299      	cmp	r1, r3
 800720a:	db05      	blt.n	8007218 <_printf_float+0x1d4>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6121      	str	r1, [r4, #16]
 8007210:	07d8      	lsls	r0, r3, #31
 8007212:	d5ea      	bpl.n	80071ea <_printf_float+0x1a6>
 8007214:	1c4b      	adds	r3, r1, #1
 8007216:	e7e7      	b.n	80071e8 <_printf_float+0x1a4>
 8007218:	2900      	cmp	r1, #0
 800721a:	bfd4      	ite	le
 800721c:	f1c1 0202 	rsble	r2, r1, #2
 8007220:	2201      	movgt	r2, #1
 8007222:	4413      	add	r3, r2
 8007224:	e7e0      	b.n	80071e8 <_printf_float+0x1a4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	055a      	lsls	r2, r3, #21
 800722a:	d407      	bmi.n	800723c <_printf_float+0x1f8>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	4642      	mov	r2, r8
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	d12c      	bne.n	8007294 <_printf_float+0x250>
 800723a:	e764      	b.n	8007106 <_printf_float+0xc2>
 800723c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007240:	f240 80e0 	bls.w	8007404 <_printf_float+0x3c0>
 8007244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	f7f9 fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 8007250:	2800      	cmp	r0, #0
 8007252:	d034      	beq.n	80072be <_printf_float+0x27a>
 8007254:	4a37      	ldr	r2, [pc, #220]	; (8007334 <_printf_float+0x2f0>)
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af51 	beq.w	8007106 <_printf_float+0xc2>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	429a      	cmp	r2, r3
 800726a:	db02      	blt.n	8007272 <_printf_float+0x22e>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07d8      	lsls	r0, r3, #31
 8007270:	d510      	bpl.n	8007294 <_printf_float+0x250>
 8007272:	ee18 3a10 	vmov	r3, s16
 8007276:	4652      	mov	r2, sl
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af41 	beq.w	8007106 <_printf_float+0xc2>
 8007284:	f04f 0800 	mov.w	r8, #0
 8007288:	f104 091a 	add.w	r9, r4, #26
 800728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728e:	3b01      	subs	r3, #1
 8007290:	4543      	cmp	r3, r8
 8007292:	dc09      	bgt.n	80072a8 <_printf_float+0x264>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	f100 8105 	bmi.w	80074a6 <_printf_float+0x462>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e730      	b.n	800710a <_printf_float+0xc6>
 80072a8:	2301      	movs	r3, #1
 80072aa:	464a      	mov	r2, r9
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af27 	beq.w	8007106 <_printf_float+0xc2>
 80072b8:	f108 0801 	add.w	r8, r8, #1
 80072bc:	e7e6      	b.n	800728c <_printf_float+0x248>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc39      	bgt.n	8007338 <_printf_float+0x2f4>
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <_printf_float+0x2f0>)
 80072c6:	2301      	movs	r3, #1
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af19 	beq.w	8007106 <_printf_float+0xc2>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	4313      	orrs	r3, r2
 80072da:	d102      	bne.n	80072e2 <_printf_float+0x29e>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d5d8      	bpl.n	8007294 <_printf_float+0x250>
 80072e2:	ee18 3a10 	vmov	r3, s16
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af09 	beq.w	8007106 <_printf_float+0xc2>
 80072f4:	f04f 0900 	mov.w	r9, #0
 80072f8:	f104 0a1a 	add.w	sl, r4, #26
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	425b      	negs	r3, r3
 8007300:	454b      	cmp	r3, r9
 8007302:	dc01      	bgt.n	8007308 <_printf_float+0x2c4>
 8007304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007306:	e792      	b.n	800722e <_printf_float+0x1ea>
 8007308:	2301      	movs	r3, #1
 800730a:	4652      	mov	r2, sl
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f aef7 	beq.w	8007106 <_printf_float+0xc2>
 8007318:	f109 0901 	add.w	r9, r9, #1
 800731c:	e7ee      	b.n	80072fc <_printf_float+0x2b8>
 800731e:	bf00      	nop
 8007320:	7fefffff 	.word	0x7fefffff
 8007324:	0800b7c0 	.word	0x0800b7c0
 8007328:	0800b7c4 	.word	0x0800b7c4
 800732c:	0800b7cc 	.word	0x0800b7cc
 8007330:	0800b7c8 	.word	0x0800b7c8
 8007334:	0800b7d0 	.word	0x0800b7d0
 8007338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800733c:	429a      	cmp	r2, r3
 800733e:	bfa8      	it	ge
 8007340:	461a      	movge	r2, r3
 8007342:	2a00      	cmp	r2, #0
 8007344:	4691      	mov	r9, r2
 8007346:	dc37      	bgt.n	80073b8 <_printf_float+0x374>
 8007348:	f04f 0b00 	mov.w	fp, #0
 800734c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007350:	f104 021a 	add.w	r2, r4, #26
 8007354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	eba3 0309 	sub.w	r3, r3, r9
 800735c:	455b      	cmp	r3, fp
 800735e:	dc33      	bgt.n	80073c8 <_printf_float+0x384>
 8007360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007364:	429a      	cmp	r2, r3
 8007366:	db3b      	blt.n	80073e0 <_printf_float+0x39c>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d438      	bmi.n	80073e0 <_printf_float+0x39c>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9a05      	ldr	r2, [sp, #20]
 8007372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007374:	1a9a      	subs	r2, r3, r2
 8007376:	eba3 0901 	sub.w	r9, r3, r1
 800737a:	4591      	cmp	r9, r2
 800737c:	bfa8      	it	ge
 800737e:	4691      	movge	r9, r2
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	dc35      	bgt.n	80073f2 <_printf_float+0x3ae>
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738e:	f104 0a1a 	add.w	sl, r4, #26
 8007392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	eba3 0309 	sub.w	r3, r3, r9
 800739c:	4543      	cmp	r3, r8
 800739e:	f77f af79 	ble.w	8007294 <_printf_float+0x250>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4652      	mov	r2, sl
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f aeaa 	beq.w	8007106 <_printf_float+0xc2>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	e7ec      	b.n	8007392 <_printf_float+0x34e>
 80073b8:	4613      	mov	r3, r2
 80073ba:	4631      	mov	r1, r6
 80073bc:	4642      	mov	r2, r8
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1c0      	bne.n	8007348 <_printf_float+0x304>
 80073c6:	e69e      	b.n	8007106 <_printf_float+0xc2>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	9205      	str	r2, [sp, #20]
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f ae97 	beq.w	8007106 <_printf_float+0xc2>
 80073d8:	9a05      	ldr	r2, [sp, #20]
 80073da:	f10b 0b01 	add.w	fp, fp, #1
 80073de:	e7b9      	b.n	8007354 <_printf_float+0x310>
 80073e0:	ee18 3a10 	vmov	r3, s16
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1be      	bne.n	800736e <_printf_float+0x32a>
 80073f0:	e689      	b.n	8007106 <_printf_float+0xc2>
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	464b      	mov	r3, r9
 80073f6:	4442      	add	r2, r8
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d1c1      	bne.n	8007386 <_printf_float+0x342>
 8007402:	e680      	b.n	8007106 <_printf_float+0xc2>
 8007404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007406:	2a01      	cmp	r2, #1
 8007408:	dc01      	bgt.n	800740e <_printf_float+0x3ca>
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d538      	bpl.n	8007480 <_printf_float+0x43c>
 800740e:	2301      	movs	r3, #1
 8007410:	4642      	mov	r2, r8
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f ae74 	beq.w	8007106 <_printf_float+0xc2>
 800741e:	ee18 3a10 	vmov	r3, s16
 8007422:	4652      	mov	r2, sl
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae6b 	beq.w	8007106 <_printf_float+0xc2>
 8007430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	f7f9 fb4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800743c:	b9d8      	cbnz	r0, 8007476 <_printf_float+0x432>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	f108 0201 	add.w	r2, r8, #1
 8007444:	3b01      	subs	r3, #1
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d10e      	bne.n	800746e <_printf_float+0x42a>
 8007450:	e659      	b.n	8007106 <_printf_float+0xc2>
 8007452:	2301      	movs	r3, #1
 8007454:	4652      	mov	r2, sl
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f ae52 	beq.w	8007106 <_printf_float+0xc2>
 8007462:	f108 0801 	add.w	r8, r8, #1
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	4543      	cmp	r3, r8
 800746c:	dcf1      	bgt.n	8007452 <_printf_float+0x40e>
 800746e:	464b      	mov	r3, r9
 8007470:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007474:	e6dc      	b.n	8007230 <_printf_float+0x1ec>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	f104 0a1a 	add.w	sl, r4, #26
 800747e:	e7f2      	b.n	8007466 <_printf_float+0x422>
 8007480:	2301      	movs	r3, #1
 8007482:	4642      	mov	r2, r8
 8007484:	e7df      	b.n	8007446 <_printf_float+0x402>
 8007486:	2301      	movs	r3, #1
 8007488:	464a      	mov	r2, r9
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae38 	beq.w	8007106 <_printf_float+0xc2>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749e:	1a5b      	subs	r3, r3, r1
 80074a0:	4543      	cmp	r3, r8
 80074a2:	dcf0      	bgt.n	8007486 <_printf_float+0x442>
 80074a4:	e6fa      	b.n	800729c <_printf_float+0x258>
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	f104 0919 	add.w	r9, r4, #25
 80074ae:	e7f4      	b.n	800749a <_printf_float+0x456>

080074b0 <_printf_common>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	4616      	mov	r6, r2
 80074b6:	4699      	mov	r9, r3
 80074b8:	688a      	ldr	r2, [r1, #8]
 80074ba:	690b      	ldr	r3, [r1, #16]
 80074bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bfb8      	it	lt
 80074c4:	4613      	movlt	r3, r2
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074cc:	4607      	mov	r7, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	b10a      	cbz	r2, 80074d6 <_printf_common+0x26>
 80074d2:	3301      	adds	r3, #1
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	0699      	lsls	r1, r3, #26
 80074da:	bf42      	ittt	mi
 80074dc:	6833      	ldrmi	r3, [r6, #0]
 80074de:	3302      	addmi	r3, #2
 80074e0:	6033      	strmi	r3, [r6, #0]
 80074e2:	6825      	ldr	r5, [r4, #0]
 80074e4:	f015 0506 	ands.w	r5, r5, #6
 80074e8:	d106      	bne.n	80074f8 <_printf_common+0x48>
 80074ea:	f104 0a19 	add.w	sl, r4, #25
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	6832      	ldr	r2, [r6, #0]
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dc26      	bgt.n	8007546 <_printf_common+0x96>
 80074f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074fc:	1e13      	subs	r3, r2, #0
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	2301      	movne	r3, #1
 8007504:	0692      	lsls	r2, r2, #26
 8007506:	d42b      	bmi.n	8007560 <_printf_common+0xb0>
 8007508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d01e      	beq.n	8007554 <_printf_common+0xa4>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	68e5      	ldr	r5, [r4, #12]
 800751a:	6832      	ldr	r2, [r6, #0]
 800751c:	f003 0306 	and.w	r3, r3, #6
 8007520:	2b04      	cmp	r3, #4
 8007522:	bf08      	it	eq
 8007524:	1aad      	subeq	r5, r5, r2
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	6922      	ldr	r2, [r4, #16]
 800752a:	bf0c      	ite	eq
 800752c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007530:	2500      	movne	r5, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	bfc4      	itt	gt
 8007536:	1a9b      	subgt	r3, r3, r2
 8007538:	18ed      	addgt	r5, r5, r3
 800753a:	2600      	movs	r6, #0
 800753c:	341a      	adds	r4, #26
 800753e:	42b5      	cmp	r5, r6
 8007540:	d11a      	bne.n	8007578 <_printf_common+0xc8>
 8007542:	2000      	movs	r0, #0
 8007544:	e008      	b.n	8007558 <_printf_common+0xa8>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4649      	mov	r1, r9
 800754c:	4638      	mov	r0, r7
 800754e:	47c0      	blx	r8
 8007550:	3001      	adds	r0, #1
 8007552:	d103      	bne.n	800755c <_printf_common+0xac>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	3501      	adds	r5, #1
 800755e:	e7c6      	b.n	80074ee <_printf_common+0x3e>
 8007560:	18e1      	adds	r1, r4, r3
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	2030      	movs	r0, #48	; 0x30
 8007566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756a:	4422      	add	r2, r4
 800756c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007574:	3302      	adds	r3, #2
 8007576:	e7c7      	b.n	8007508 <_printf_common+0x58>
 8007578:	2301      	movs	r3, #1
 800757a:	4622      	mov	r2, r4
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d0e6      	beq.n	8007554 <_printf_common+0xa4>
 8007586:	3601      	adds	r6, #1
 8007588:	e7d9      	b.n	800753e <_printf_common+0x8e>
	...

0800758c <_printf_i>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	7e0f      	ldrb	r7, [r1, #24]
 8007592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4691      	mov	r9, r2
 8007598:	4680      	mov	r8, r0
 800759a:	460c      	mov	r4, r1
 800759c:	469a      	mov	sl, r3
 800759e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a2:	d807      	bhi.n	80075b4 <_printf_i+0x28>
 80075a4:	2f62      	cmp	r7, #98	; 0x62
 80075a6:	d80a      	bhi.n	80075be <_printf_i+0x32>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f000 80d8 	beq.w	800775e <_printf_i+0x1d2>
 80075ae:	2f58      	cmp	r7, #88	; 0x58
 80075b0:	f000 80a3 	beq.w	80076fa <_printf_i+0x16e>
 80075b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075bc:	e03a      	b.n	8007634 <_printf_i+0xa8>
 80075be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c2:	2b15      	cmp	r3, #21
 80075c4:	d8f6      	bhi.n	80075b4 <_printf_i+0x28>
 80075c6:	a101      	add	r1, pc, #4	; (adr r1, 80075cc <_printf_i+0x40>)
 80075c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007639 	.word	0x08007639
 80075d4:	080075b5 	.word	0x080075b5
 80075d8:	080075b5 	.word	0x080075b5
 80075dc:	080075b5 	.word	0x080075b5
 80075e0:	080075b5 	.word	0x080075b5
 80075e4:	08007639 	.word	0x08007639
 80075e8:	080075b5 	.word	0x080075b5
 80075ec:	080075b5 	.word	0x080075b5
 80075f0:	080075b5 	.word	0x080075b5
 80075f4:	080075b5 	.word	0x080075b5
 80075f8:	08007745 	.word	0x08007745
 80075fc:	08007669 	.word	0x08007669
 8007600:	08007727 	.word	0x08007727
 8007604:	080075b5 	.word	0x080075b5
 8007608:	080075b5 	.word	0x080075b5
 800760c:	08007767 	.word	0x08007767
 8007610:	080075b5 	.word	0x080075b5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075b5 	.word	0x080075b5
 800761c:	080075b5 	.word	0x080075b5
 8007620:	0800772f 	.word	0x0800772f
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007634:	2301      	movs	r3, #1
 8007636:	e0a3      	b.n	8007780 <_printf_i+0x1f4>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	6829      	ldr	r1, [r5, #0]
 800763c:	0606      	lsls	r6, r0, #24
 800763e:	f101 0304 	add.w	r3, r1, #4
 8007642:	d50a      	bpl.n	800765a <_printf_i+0xce>
 8007644:	680e      	ldr	r6, [r1, #0]
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	2e00      	cmp	r6, #0
 800764a:	da03      	bge.n	8007654 <_printf_i+0xc8>
 800764c:	232d      	movs	r3, #45	; 0x2d
 800764e:	4276      	negs	r6, r6
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	485e      	ldr	r0, [pc, #376]	; (80077d0 <_printf_i+0x244>)
 8007656:	230a      	movs	r3, #10
 8007658:	e019      	b.n	800768e <_printf_i+0x102>
 800765a:	680e      	ldr	r6, [r1, #0]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007662:	bf18      	it	ne
 8007664:	b236      	sxthne	r6, r6
 8007666:	e7ef      	b.n	8007648 <_printf_i+0xbc>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	0601      	lsls	r1, r0, #24
 8007672:	d501      	bpl.n	8007678 <_printf_i+0xec>
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0xf2>
 8007678:	0646      	lsls	r6, r0, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0xe8>
 800767c:	881e      	ldrh	r6, [r3, #0]
 800767e:	4854      	ldr	r0, [pc, #336]	; (80077d0 <_printf_i+0x244>)
 8007680:	2f6f      	cmp	r7, #111	; 0x6f
 8007682:	bf0c      	ite	eq
 8007684:	2308      	moveq	r3, #8
 8007686:	230a      	movne	r3, #10
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768e:	6865      	ldr	r5, [r4, #4]
 8007690:	60a5      	str	r5, [r4, #8]
 8007692:	2d00      	cmp	r5, #0
 8007694:	bfa2      	ittt	ge
 8007696:	6821      	ldrge	r1, [r4, #0]
 8007698:	f021 0104 	bicge.w	r1, r1, #4
 800769c:	6021      	strge	r1, [r4, #0]
 800769e:	b90e      	cbnz	r6, 80076a4 <_printf_i+0x118>
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	d04d      	beq.n	8007740 <_printf_i+0x1b4>
 80076a4:	4615      	mov	r5, r2
 80076a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076aa:	fb03 6711 	mls	r7, r3, r1, r6
 80076ae:	5dc7      	ldrb	r7, [r0, r7]
 80076b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b4:	4637      	mov	r7, r6
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	460e      	mov	r6, r1
 80076ba:	d9f4      	bls.n	80076a6 <_printf_i+0x11a>
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d10b      	bne.n	80076d8 <_printf_i+0x14c>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07de      	lsls	r6, r3, #31
 80076c4:	d508      	bpl.n	80076d8 <_printf_i+0x14c>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	4299      	cmp	r1, r3
 80076cc:	bfde      	ittt	le
 80076ce:	2330      	movle	r3, #48	; 0x30
 80076d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d8:	1b52      	subs	r2, r2, r5
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	f8cd a000 	str.w	sl, [sp]
 80076e0:	464b      	mov	r3, r9
 80076e2:	aa03      	add	r2, sp, #12
 80076e4:	4621      	mov	r1, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7ff fee2 	bl	80074b0 <_printf_common>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d14c      	bne.n	800778a <_printf_i+0x1fe>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b004      	add	sp, #16
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	4835      	ldr	r0, [pc, #212]	; (80077d0 <_printf_i+0x244>)
 80076fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	f851 6b04 	ldr.w	r6, [r1], #4
 8007708:	6029      	str	r1, [r5, #0]
 800770a:	061d      	lsls	r5, r3, #24
 800770c:	d514      	bpl.n	8007738 <_printf_i+0x1ac>
 800770e:	07df      	lsls	r7, r3, #31
 8007710:	bf44      	itt	mi
 8007712:	f043 0320 	orrmi.w	r3, r3, #32
 8007716:	6023      	strmi	r3, [r4, #0]
 8007718:	b91e      	cbnz	r6, 8007722 <_printf_i+0x196>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	f023 0320 	bic.w	r3, r3, #32
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	2310      	movs	r3, #16
 8007724:	e7b0      	b.n	8007688 <_printf_i+0xfc>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f043 0320 	orr.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	2378      	movs	r3, #120	; 0x78
 8007730:	4828      	ldr	r0, [pc, #160]	; (80077d4 <_printf_i+0x248>)
 8007732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007736:	e7e3      	b.n	8007700 <_printf_i+0x174>
 8007738:	0659      	lsls	r1, r3, #25
 800773a:	bf48      	it	mi
 800773c:	b2b6      	uxthmi	r6, r6
 800773e:	e7e6      	b.n	800770e <_printf_i+0x182>
 8007740:	4615      	mov	r5, r2
 8007742:	e7bb      	b.n	80076bc <_printf_i+0x130>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	6826      	ldr	r6, [r4, #0]
 8007748:	6961      	ldr	r1, [r4, #20]
 800774a:	1d18      	adds	r0, r3, #4
 800774c:	6028      	str	r0, [r5, #0]
 800774e:	0635      	lsls	r5, r6, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	d501      	bpl.n	8007758 <_printf_i+0x1cc>
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e002      	b.n	800775e <_printf_i+0x1d2>
 8007758:	0670      	lsls	r0, r6, #25
 800775a:	d5fb      	bpl.n	8007754 <_printf_i+0x1c8>
 800775c:	8019      	strh	r1, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	4615      	mov	r5, r2
 8007764:	e7ba      	b.n	80076dc <_printf_i+0x150>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	4628      	mov	r0, r5
 8007774:	f7f8 fd3c 	bl	80001f0 <memchr>
 8007778:	b108      	cbz	r0, 800777e <_printf_i+0x1f2>
 800777a:	1b40      	subs	r0, r0, r5
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	e7a8      	b.n	80076dc <_printf_i+0x150>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	462a      	mov	r2, r5
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d0ab      	beq.n	80076f0 <_printf_i+0x164>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d413      	bmi.n	80077c6 <_printf_i+0x23a>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e7a4      	b.n	80076f4 <_printf_i+0x168>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4632      	mov	r2, r6
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d09b      	beq.n	80076f0 <_printf_i+0x164>
 80077b8:	3501      	adds	r5, #1
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	9903      	ldr	r1, [sp, #12]
 80077be:	1a5b      	subs	r3, r3, r1
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dcf2      	bgt.n	80077aa <_printf_i+0x21e>
 80077c4:	e7eb      	b.n	800779e <_printf_i+0x212>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f104 0619 	add.w	r6, r4, #25
 80077cc:	e7f5      	b.n	80077ba <_printf_i+0x22e>
 80077ce:	bf00      	nop
 80077d0:	0800b7d2 	.word	0x0800b7d2
 80077d4:	0800b7e3 	.word	0x0800b7e3

080077d8 <siprintf>:
 80077d8:	b40e      	push	{r1, r2, r3}
 80077da:	b500      	push	{lr}
 80077dc:	b09c      	sub	sp, #112	; 0x70
 80077de:	ab1d      	add	r3, sp, #116	; 0x74
 80077e0:	9002      	str	r0, [sp, #8]
 80077e2:	9006      	str	r0, [sp, #24]
 80077e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077e8:	4809      	ldr	r0, [pc, #36]	; (8007810 <siprintf+0x38>)
 80077ea:	9107      	str	r1, [sp, #28]
 80077ec:	9104      	str	r1, [sp, #16]
 80077ee:	4909      	ldr	r1, [pc, #36]	; (8007814 <siprintf+0x3c>)
 80077f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f4:	9105      	str	r1, [sp, #20]
 80077f6:	6800      	ldr	r0, [r0, #0]
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	a902      	add	r1, sp, #8
 80077fc:	f001 fb76 	bl	8008eec <_svfiprintf_r>
 8007800:	9b02      	ldr	r3, [sp, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	b01c      	add	sp, #112	; 0x70
 8007808:	f85d eb04 	ldr.w	lr, [sp], #4
 800780c:	b003      	add	sp, #12
 800780e:	4770      	bx	lr
 8007810:	20000050 	.word	0x20000050
 8007814:	ffff0208 	.word	0xffff0208

08007818 <quorem>:
 8007818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	6903      	ldr	r3, [r0, #16]
 800781e:	690c      	ldr	r4, [r1, #16]
 8007820:	42a3      	cmp	r3, r4
 8007822:	4607      	mov	r7, r0
 8007824:	f2c0 8081 	blt.w	800792a <quorem+0x112>
 8007828:	3c01      	subs	r4, #1
 800782a:	f101 0814 	add.w	r8, r1, #20
 800782e:	f100 0514 	add.w	r5, r0, #20
 8007832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800783c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007840:	3301      	adds	r3, #1
 8007842:	429a      	cmp	r2, r3
 8007844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800784c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007850:	d331      	bcc.n	80078b6 <quorem+0x9e>
 8007852:	f04f 0e00 	mov.w	lr, #0
 8007856:	4640      	mov	r0, r8
 8007858:	46ac      	mov	ip, r5
 800785a:	46f2      	mov	sl, lr
 800785c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007860:	b293      	uxth	r3, r2
 8007862:	fb06 e303 	mla	r3, r6, r3, lr
 8007866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800786a:	b29b      	uxth	r3, r3
 800786c:	ebaa 0303 	sub.w	r3, sl, r3
 8007870:	f8dc a000 	ldr.w	sl, [ip]
 8007874:	0c12      	lsrs	r2, r2, #16
 8007876:	fa13 f38a 	uxtah	r3, r3, sl
 800787a:	fb06 e202 	mla	r2, r6, r2, lr
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007886:	b292      	uxth	r2, r2
 8007888:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800788c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007890:	f8bd 3000 	ldrh.w	r3, [sp]
 8007894:	4581      	cmp	r9, r0
 8007896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800789a:	f84c 3b04 	str.w	r3, [ip], #4
 800789e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078a2:	d2db      	bcs.n	800785c <quorem+0x44>
 80078a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80078a8:	b92b      	cbnz	r3, 80078b6 <quorem+0x9e>
 80078aa:	9b01      	ldr	r3, [sp, #4]
 80078ac:	3b04      	subs	r3, #4
 80078ae:	429d      	cmp	r5, r3
 80078b0:	461a      	mov	r2, r3
 80078b2:	d32e      	bcc.n	8007912 <quorem+0xfa>
 80078b4:	613c      	str	r4, [r7, #16]
 80078b6:	4638      	mov	r0, r7
 80078b8:	f001 f8c4 	bl	8008a44 <__mcmp>
 80078bc:	2800      	cmp	r0, #0
 80078be:	db24      	blt.n	800790a <quorem+0xf2>
 80078c0:	3601      	adds	r6, #1
 80078c2:	4628      	mov	r0, r5
 80078c4:	f04f 0c00 	mov.w	ip, #0
 80078c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078cc:	f8d0 e000 	ldr.w	lr, [r0]
 80078d0:	b293      	uxth	r3, r2
 80078d2:	ebac 0303 	sub.w	r3, ip, r3
 80078d6:	0c12      	lsrs	r2, r2, #16
 80078d8:	fa13 f38e 	uxtah	r3, r3, lr
 80078dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ea:	45c1      	cmp	r9, r8
 80078ec:	f840 3b04 	str.w	r3, [r0], #4
 80078f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078f4:	d2e8      	bcs.n	80078c8 <quorem+0xb0>
 80078f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fe:	b922      	cbnz	r2, 800790a <quorem+0xf2>
 8007900:	3b04      	subs	r3, #4
 8007902:	429d      	cmp	r5, r3
 8007904:	461a      	mov	r2, r3
 8007906:	d30a      	bcc.n	800791e <quorem+0x106>
 8007908:	613c      	str	r4, [r7, #16]
 800790a:	4630      	mov	r0, r6
 800790c:	b003      	add	sp, #12
 800790e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007912:	6812      	ldr	r2, [r2, #0]
 8007914:	3b04      	subs	r3, #4
 8007916:	2a00      	cmp	r2, #0
 8007918:	d1cc      	bne.n	80078b4 <quorem+0x9c>
 800791a:	3c01      	subs	r4, #1
 800791c:	e7c7      	b.n	80078ae <quorem+0x96>
 800791e:	6812      	ldr	r2, [r2, #0]
 8007920:	3b04      	subs	r3, #4
 8007922:	2a00      	cmp	r2, #0
 8007924:	d1f0      	bne.n	8007908 <quorem+0xf0>
 8007926:	3c01      	subs	r4, #1
 8007928:	e7eb      	b.n	8007902 <quorem+0xea>
 800792a:	2000      	movs	r0, #0
 800792c:	e7ee      	b.n	800790c <quorem+0xf4>
	...

08007930 <_dtoa_r>:
 8007930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007934:	ed2d 8b04 	vpush	{d8-d9}
 8007938:	ec57 6b10 	vmov	r6, r7, d0
 800793c:	b093      	sub	sp, #76	; 0x4c
 800793e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007940:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007944:	9106      	str	r1, [sp, #24]
 8007946:	ee10 aa10 	vmov	sl, s0
 800794a:	4604      	mov	r4, r0
 800794c:	9209      	str	r2, [sp, #36]	; 0x24
 800794e:	930c      	str	r3, [sp, #48]	; 0x30
 8007950:	46bb      	mov	fp, r7
 8007952:	b975      	cbnz	r5, 8007972 <_dtoa_r+0x42>
 8007954:	2010      	movs	r0, #16
 8007956:	f000 fddd 	bl	8008514 <malloc>
 800795a:	4602      	mov	r2, r0
 800795c:	6260      	str	r0, [r4, #36]	; 0x24
 800795e:	b920      	cbnz	r0, 800796a <_dtoa_r+0x3a>
 8007960:	4ba7      	ldr	r3, [pc, #668]	; (8007c00 <_dtoa_r+0x2d0>)
 8007962:	21ea      	movs	r1, #234	; 0xea
 8007964:	48a7      	ldr	r0, [pc, #668]	; (8007c04 <_dtoa_r+0x2d4>)
 8007966:	f001 fbd1 	bl	800910c <__assert_func>
 800796a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800796e:	6005      	str	r5, [r0, #0]
 8007970:	60c5      	str	r5, [r0, #12]
 8007972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	b151      	cbz	r1, 800798e <_dtoa_r+0x5e>
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	604a      	str	r2, [r1, #4]
 800797c:	2301      	movs	r3, #1
 800797e:	4093      	lsls	r3, r2
 8007980:	608b      	str	r3, [r1, #8]
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fe1c 	bl	80085c0 <_Bfree>
 8007988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	1e3b      	subs	r3, r7, #0
 8007990:	bfaa      	itet	ge
 8007992:	2300      	movge	r3, #0
 8007994:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007998:	f8c8 3000 	strge.w	r3, [r8]
 800799c:	4b9a      	ldr	r3, [pc, #616]	; (8007c08 <_dtoa_r+0x2d8>)
 800799e:	bfbc      	itt	lt
 80079a0:	2201      	movlt	r2, #1
 80079a2:	f8c8 2000 	strlt.w	r2, [r8]
 80079a6:	ea33 030b 	bics.w	r3, r3, fp
 80079aa:	d11b      	bne.n	80079e4 <_dtoa_r+0xb4>
 80079ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079b8:	4333      	orrs	r3, r6
 80079ba:	f000 8592 	beq.w	80084e2 <_dtoa_r+0xbb2>
 80079be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079c0:	b963      	cbnz	r3, 80079dc <_dtoa_r+0xac>
 80079c2:	4b92      	ldr	r3, [pc, #584]	; (8007c0c <_dtoa_r+0x2dc>)
 80079c4:	e022      	b.n	8007a0c <_dtoa_r+0xdc>
 80079c6:	4b92      	ldr	r3, [pc, #584]	; (8007c10 <_dtoa_r+0x2e0>)
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	3308      	adds	r3, #8
 80079cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079ce:	6013      	str	r3, [r2, #0]
 80079d0:	9801      	ldr	r0, [sp, #4]
 80079d2:	b013      	add	sp, #76	; 0x4c
 80079d4:	ecbd 8b04 	vpop	{d8-d9}
 80079d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079dc:	4b8b      	ldr	r3, [pc, #556]	; (8007c0c <_dtoa_r+0x2dc>)
 80079de:	9301      	str	r3, [sp, #4]
 80079e0:	3303      	adds	r3, #3
 80079e2:	e7f3      	b.n	80079cc <_dtoa_r+0x9c>
 80079e4:	2200      	movs	r2, #0
 80079e6:	2300      	movs	r3, #0
 80079e8:	4650      	mov	r0, sl
 80079ea:	4659      	mov	r1, fp
 80079ec:	f7f9 f874 	bl	8000ad8 <__aeabi_dcmpeq>
 80079f0:	ec4b ab19 	vmov	d9, sl, fp
 80079f4:	4680      	mov	r8, r0
 80079f6:	b158      	cbz	r0, 8007a10 <_dtoa_r+0xe0>
 80079f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079fa:	2301      	movs	r3, #1
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f000 856b 	beq.w	80084dc <_dtoa_r+0xbac>
 8007a06:	4883      	ldr	r0, [pc, #524]	; (8007c14 <_dtoa_r+0x2e4>)
 8007a08:	6018      	str	r0, [r3, #0]
 8007a0a:	1e43      	subs	r3, r0, #1
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	e7df      	b.n	80079d0 <_dtoa_r+0xa0>
 8007a10:	ec4b ab10 	vmov	d0, sl, fp
 8007a14:	aa10      	add	r2, sp, #64	; 0x40
 8007a16:	a911      	add	r1, sp, #68	; 0x44
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f001 f8b9 	bl	8008b90 <__d2b>
 8007a1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a22:	ee08 0a10 	vmov	s16, r0
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	f000 8084 	beq.w	8007b34 <_dtoa_r+0x204>
 8007a2c:	ee19 3a90 	vmov	r3, s19
 8007a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a38:	4656      	mov	r6, sl
 8007a3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a46:	4b74      	ldr	r3, [pc, #464]	; (8007c18 <_dtoa_r+0x2e8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fc23 	bl	8000298 <__aeabi_dsub>
 8007a52:	a365      	add	r3, pc, #404	; (adr r3, 8007be8 <_dtoa_r+0x2b8>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	a364      	add	r3, pc, #400	; (adr r3, 8007bf0 <_dtoa_r+0x2c0>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc1b 	bl	800029c <__adddf3>
 8007a66:	4606      	mov	r6, r0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	460f      	mov	r7, r1
 8007a6c:	f7f8 fd62 	bl	8000534 <__aeabi_i2d>
 8007a70:	a361      	add	r3, pc, #388	; (adr r3, 8007bf8 <_dtoa_r+0x2c8>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fdc7 	bl	8000608 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f8 fc0b 	bl	800029c <__adddf3>
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	f7f9 f86d 	bl	8000b68 <__aeabi_d2iz>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	9000      	str	r0, [sp, #0]
 8007a92:	2300      	movs	r3, #0
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f9 f828 	bl	8000aec <__aeabi_dcmplt>
 8007a9c:	b150      	cbz	r0, 8007ab4 <_dtoa_r+0x184>
 8007a9e:	9800      	ldr	r0, [sp, #0]
 8007aa0:	f7f8 fd48 	bl	8000534 <__aeabi_i2d>
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	f7f9 f816 	bl	8000ad8 <__aeabi_dcmpeq>
 8007aac:	b910      	cbnz	r0, 8007ab4 <_dtoa_r+0x184>
 8007aae:	9b00      	ldr	r3, [sp, #0]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	9b00      	ldr	r3, [sp, #0]
 8007ab6:	2b16      	cmp	r3, #22
 8007ab8:	d85a      	bhi.n	8007b70 <_dtoa_r+0x240>
 8007aba:	9a00      	ldr	r2, [sp, #0]
 8007abc:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <_dtoa_r+0x2ec>)
 8007abe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	ec51 0b19 	vmov	r0, r1, d9
 8007aca:	f7f9 f80f 	bl	8000aec <__aeabi_dcmplt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d050      	beq.n	8007b74 <_dtoa_r+0x244>
 8007ad2:	9b00      	ldr	r3, [sp, #0]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	2300      	movs	r3, #0
 8007ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8007adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ade:	1b5d      	subs	r5, r3, r5
 8007ae0:	1e6b      	subs	r3, r5, #1
 8007ae2:	9305      	str	r3, [sp, #20]
 8007ae4:	bf45      	ittet	mi
 8007ae6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007aea:	9304      	strmi	r3, [sp, #16]
 8007aec:	2300      	movpl	r3, #0
 8007aee:	2300      	movmi	r3, #0
 8007af0:	bf4c      	ite	mi
 8007af2:	9305      	strmi	r3, [sp, #20]
 8007af4:	9304      	strpl	r3, [sp, #16]
 8007af6:	9b00      	ldr	r3, [sp, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	db3d      	blt.n	8007b78 <_dtoa_r+0x248>
 8007afc:	9b05      	ldr	r3, [sp, #20]
 8007afe:	9a00      	ldr	r2, [sp, #0]
 8007b00:	920a      	str	r2, [sp, #40]	; 0x28
 8007b02:	4413      	add	r3, r2
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9307      	str	r3, [sp, #28]
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	2b09      	cmp	r3, #9
 8007b0e:	f200 8089 	bhi.w	8007c24 <_dtoa_r+0x2f4>
 8007b12:	2b05      	cmp	r3, #5
 8007b14:	bfc4      	itt	gt
 8007b16:	3b04      	subgt	r3, #4
 8007b18:	9306      	strgt	r3, [sp, #24]
 8007b1a:	9b06      	ldr	r3, [sp, #24]
 8007b1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b20:	bfcc      	ite	gt
 8007b22:	2500      	movgt	r5, #0
 8007b24:	2501      	movle	r5, #1
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	f200 8087 	bhi.w	8007c3a <_dtoa_r+0x30a>
 8007b2c:	e8df f003 	tbb	[pc, r3]
 8007b30:	59383a2d 	.word	0x59383a2d
 8007b34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b38:	441d      	add	r5, r3
 8007b3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b3e:	2b20      	cmp	r3, #32
 8007b40:	bfc1      	itttt	gt
 8007b42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b52:	bfda      	itte	le
 8007b54:	f1c3 0320 	rsble	r3, r3, #32
 8007b58:	fa06 f003 	lslle.w	r0, r6, r3
 8007b5c:	4318      	orrgt	r0, r3
 8007b5e:	f7f8 fcd9 	bl	8000514 <__aeabi_ui2d>
 8007b62:	2301      	movs	r3, #1
 8007b64:	4606      	mov	r6, r0
 8007b66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b6a:	3d01      	subs	r5, #1
 8007b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b6e:	e76a      	b.n	8007a46 <_dtoa_r+0x116>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e7b2      	b.n	8007ada <_dtoa_r+0x1aa>
 8007b74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b76:	e7b1      	b.n	8007adc <_dtoa_r+0x1ac>
 8007b78:	9b04      	ldr	r3, [sp, #16]
 8007b7a:	9a00      	ldr	r2, [sp, #0]
 8007b7c:	1a9b      	subs	r3, r3, r2
 8007b7e:	9304      	str	r3, [sp, #16]
 8007b80:	4253      	negs	r3, r2
 8007b82:	9307      	str	r3, [sp, #28]
 8007b84:	2300      	movs	r3, #0
 8007b86:	930a      	str	r3, [sp, #40]	; 0x28
 8007b88:	e7bf      	b.n	8007b0a <_dtoa_r+0x1da>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9308      	str	r3, [sp, #32]
 8007b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc55      	bgt.n	8007c40 <_dtoa_r+0x310>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007b9e:	e00c      	b.n	8007bba <_dtoa_r+0x28a>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e7f3      	b.n	8007b8c <_dtoa_r+0x25c>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	9b00      	ldr	r3, [sp, #0]
 8007bac:	4413      	add	r3, r2
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	9303      	str	r3, [sp, #12]
 8007bb6:	bfb8      	it	lt
 8007bb8:	2301      	movlt	r3, #1
 8007bba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	6042      	str	r2, [r0, #4]
 8007bc0:	2204      	movs	r2, #4
 8007bc2:	f102 0614 	add.w	r6, r2, #20
 8007bc6:	429e      	cmp	r6, r3
 8007bc8:	6841      	ldr	r1, [r0, #4]
 8007bca:	d93d      	bls.n	8007c48 <_dtoa_r+0x318>
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fcb7 	bl	8008540 <_Balloc>
 8007bd2:	9001      	str	r0, [sp, #4]
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d13b      	bne.n	8007c50 <_dtoa_r+0x320>
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <_dtoa_r+0x2f0>)
 8007bda:	4602      	mov	r2, r0
 8007bdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007be0:	e6c0      	b.n	8007964 <_dtoa_r+0x34>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7df      	b.n	8007ba6 <_dtoa_r+0x276>
 8007be6:	bf00      	nop
 8007be8:	636f4361 	.word	0x636f4361
 8007bec:	3fd287a7 	.word	0x3fd287a7
 8007bf0:	8b60c8b3 	.word	0x8b60c8b3
 8007bf4:	3fc68a28 	.word	0x3fc68a28
 8007bf8:	509f79fb 	.word	0x509f79fb
 8007bfc:	3fd34413 	.word	0x3fd34413
 8007c00:	0800b801 	.word	0x0800b801
 8007c04:	0800b818 	.word	0x0800b818
 8007c08:	7ff00000 	.word	0x7ff00000
 8007c0c:	0800b7fd 	.word	0x0800b7fd
 8007c10:	0800b7f4 	.word	0x0800b7f4
 8007c14:	0800b7d1 	.word	0x0800b7d1
 8007c18:	3ff80000 	.word	0x3ff80000
 8007c1c:	0800b908 	.word	0x0800b908
 8007c20:	0800b873 	.word	0x0800b873
 8007c24:	2501      	movs	r5, #1
 8007c26:	2300      	movs	r3, #0
 8007c28:	9306      	str	r3, [sp, #24]
 8007c2a:	9508      	str	r5, [sp, #32]
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2312      	movs	r3, #18
 8007c38:	e7b0      	b.n	8007b9c <_dtoa_r+0x26c>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	9308      	str	r3, [sp, #32]
 8007c3e:	e7f5      	b.n	8007c2c <_dtoa_r+0x2fc>
 8007c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c46:	e7b8      	b.n	8007bba <_dtoa_r+0x28a>
 8007c48:	3101      	adds	r1, #1
 8007c4a:	6041      	str	r1, [r0, #4]
 8007c4c:	0052      	lsls	r2, r2, #1
 8007c4e:	e7b8      	b.n	8007bc2 <_dtoa_r+0x292>
 8007c50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c52:	9a01      	ldr	r2, [sp, #4]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	9b03      	ldr	r3, [sp, #12]
 8007c58:	2b0e      	cmp	r3, #14
 8007c5a:	f200 809d 	bhi.w	8007d98 <_dtoa_r+0x468>
 8007c5e:	2d00      	cmp	r5, #0
 8007c60:	f000 809a 	beq.w	8007d98 <_dtoa_r+0x468>
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	dd32      	ble.n	8007cd0 <_dtoa_r+0x3a0>
 8007c6a:	4ab7      	ldr	r2, [pc, #732]	; (8007f48 <_dtoa_r+0x618>)
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007c74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	05d8      	lsls	r0, r3, #23
 8007c7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007c80:	d516      	bpl.n	8007cb0 <_dtoa_r+0x380>
 8007c82:	4bb2      	ldr	r3, [pc, #712]	; (8007f4c <_dtoa_r+0x61c>)
 8007c84:	ec51 0b19 	vmov	r0, r1, d9
 8007c88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c8c:	f7f8 fde6 	bl	800085c <__aeabi_ddiv>
 8007c90:	f007 070f 	and.w	r7, r7, #15
 8007c94:	4682      	mov	sl, r0
 8007c96:	468b      	mov	fp, r1
 8007c98:	2503      	movs	r5, #3
 8007c9a:	4eac      	ldr	r6, [pc, #688]	; (8007f4c <_dtoa_r+0x61c>)
 8007c9c:	b957      	cbnz	r7, 8007cb4 <_dtoa_r+0x384>
 8007c9e:	4642      	mov	r2, r8
 8007ca0:	464b      	mov	r3, r9
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	4659      	mov	r1, fp
 8007ca6:	f7f8 fdd9 	bl	800085c <__aeabi_ddiv>
 8007caa:	4682      	mov	sl, r0
 8007cac:	468b      	mov	fp, r1
 8007cae:	e028      	b.n	8007d02 <_dtoa_r+0x3d2>
 8007cb0:	2502      	movs	r5, #2
 8007cb2:	e7f2      	b.n	8007c9a <_dtoa_r+0x36a>
 8007cb4:	07f9      	lsls	r1, r7, #31
 8007cb6:	d508      	bpl.n	8007cca <_dtoa_r+0x39a>
 8007cb8:	4640      	mov	r0, r8
 8007cba:	4649      	mov	r1, r9
 8007cbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cc0:	f7f8 fca2 	bl	8000608 <__aeabi_dmul>
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	4680      	mov	r8, r0
 8007cc8:	4689      	mov	r9, r1
 8007cca:	107f      	asrs	r7, r7, #1
 8007ccc:	3608      	adds	r6, #8
 8007cce:	e7e5      	b.n	8007c9c <_dtoa_r+0x36c>
 8007cd0:	f000 809b 	beq.w	8007e0a <_dtoa_r+0x4da>
 8007cd4:	9b00      	ldr	r3, [sp, #0]
 8007cd6:	4f9d      	ldr	r7, [pc, #628]	; (8007f4c <_dtoa_r+0x61c>)
 8007cd8:	425e      	negs	r6, r3
 8007cda:	4b9b      	ldr	r3, [pc, #620]	; (8007f48 <_dtoa_r+0x618>)
 8007cdc:	f006 020f 	and.w	r2, r6, #15
 8007ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	ec51 0b19 	vmov	r0, r1, d9
 8007cec:	f7f8 fc8c 	bl	8000608 <__aeabi_dmul>
 8007cf0:	1136      	asrs	r6, r6, #4
 8007cf2:	4682      	mov	sl, r0
 8007cf4:	468b      	mov	fp, r1
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2502      	movs	r5, #2
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	d17a      	bne.n	8007df4 <_dtoa_r+0x4c4>
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1d3      	bne.n	8007caa <_dtoa_r+0x37a>
 8007d02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8082 	beq.w	8007e0e <_dtoa_r+0x4de>
 8007d0a:	4b91      	ldr	r3, [pc, #580]	; (8007f50 <_dtoa_r+0x620>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	4650      	mov	r0, sl
 8007d10:	4659      	mov	r1, fp
 8007d12:	f7f8 feeb 	bl	8000aec <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d079      	beq.n	8007e0e <_dtoa_r+0x4de>
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d076      	beq.n	8007e0e <_dtoa_r+0x4de>
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	dd36      	ble.n	8007d94 <_dtoa_r+0x464>
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	4650      	mov	r0, sl
 8007d2a:	4659      	mov	r1, fp
 8007d2c:	1e5f      	subs	r7, r3, #1
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4b88      	ldr	r3, [pc, #544]	; (8007f54 <_dtoa_r+0x624>)
 8007d32:	f7f8 fc69 	bl	8000608 <__aeabi_dmul>
 8007d36:	9e02      	ldr	r6, [sp, #8]
 8007d38:	4682      	mov	sl, r0
 8007d3a:	468b      	mov	fp, r1
 8007d3c:	3501      	adds	r5, #1
 8007d3e:	4628      	mov	r0, r5
 8007d40:	f7f8 fbf8 	bl	8000534 <__aeabi_i2d>
 8007d44:	4652      	mov	r2, sl
 8007d46:	465b      	mov	r3, fp
 8007d48:	f7f8 fc5e 	bl	8000608 <__aeabi_dmul>
 8007d4c:	4b82      	ldr	r3, [pc, #520]	; (8007f58 <_dtoa_r+0x628>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f7f8 faa4 	bl	800029c <__adddf3>
 8007d54:	46d0      	mov	r8, sl
 8007d56:	46d9      	mov	r9, fp
 8007d58:	4682      	mov	sl, r0
 8007d5a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d158      	bne.n	8007e14 <_dtoa_r+0x4e4>
 8007d62:	4b7e      	ldr	r3, [pc, #504]	; (8007f5c <_dtoa_r+0x62c>)
 8007d64:	2200      	movs	r2, #0
 8007d66:	4640      	mov	r0, r8
 8007d68:	4649      	mov	r1, r9
 8007d6a:	f7f8 fa95 	bl	8000298 <__aeabi_dsub>
 8007d6e:	4652      	mov	r2, sl
 8007d70:	465b      	mov	r3, fp
 8007d72:	4680      	mov	r8, r0
 8007d74:	4689      	mov	r9, r1
 8007d76:	f7f8 fed7 	bl	8000b28 <__aeabi_dcmpgt>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f040 8295 	bne.w	80082aa <_dtoa_r+0x97a>
 8007d80:	4652      	mov	r2, sl
 8007d82:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 feaf 	bl	8000aec <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f040 8289 	bne.w	80082a6 <_dtoa_r+0x976>
 8007d94:	ec5b ab19 	vmov	sl, fp, d9
 8007d98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f2c0 8148 	blt.w	8008030 <_dtoa_r+0x700>
 8007da0:	9a00      	ldr	r2, [sp, #0]
 8007da2:	2a0e      	cmp	r2, #14
 8007da4:	f300 8144 	bgt.w	8008030 <_dtoa_r+0x700>
 8007da8:	4b67      	ldr	r3, [pc, #412]	; (8007f48 <_dtoa_r+0x618>)
 8007daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f280 80d5 	bge.w	8007f64 <_dtoa_r+0x634>
 8007dba:	9b03      	ldr	r3, [sp, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f300 80d1 	bgt.w	8007f64 <_dtoa_r+0x634>
 8007dc2:	f040 826f 	bne.w	80082a4 <_dtoa_r+0x974>
 8007dc6:	4b65      	ldr	r3, [pc, #404]	; (8007f5c <_dtoa_r+0x62c>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 fc1b 	bl	8000608 <__aeabi_dmul>
 8007dd2:	4652      	mov	r2, sl
 8007dd4:	465b      	mov	r3, fp
 8007dd6:	f7f8 fe9d 	bl	8000b14 <__aeabi_dcmpge>
 8007dda:	9e03      	ldr	r6, [sp, #12]
 8007ddc:	4637      	mov	r7, r6
 8007dde:	2800      	cmp	r0, #0
 8007de0:	f040 8245 	bne.w	800826e <_dtoa_r+0x93e>
 8007de4:	9d01      	ldr	r5, [sp, #4]
 8007de6:	2331      	movs	r3, #49	; 0x31
 8007de8:	f805 3b01 	strb.w	r3, [r5], #1
 8007dec:	9b00      	ldr	r3, [sp, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	9300      	str	r3, [sp, #0]
 8007df2:	e240      	b.n	8008276 <_dtoa_r+0x946>
 8007df4:	07f2      	lsls	r2, r6, #31
 8007df6:	d505      	bpl.n	8007e04 <_dtoa_r+0x4d4>
 8007df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dfc:	f7f8 fc04 	bl	8000608 <__aeabi_dmul>
 8007e00:	3501      	adds	r5, #1
 8007e02:	2301      	movs	r3, #1
 8007e04:	1076      	asrs	r6, r6, #1
 8007e06:	3708      	adds	r7, #8
 8007e08:	e777      	b.n	8007cfa <_dtoa_r+0x3ca>
 8007e0a:	2502      	movs	r5, #2
 8007e0c:	e779      	b.n	8007d02 <_dtoa_r+0x3d2>
 8007e0e:	9f00      	ldr	r7, [sp, #0]
 8007e10:	9e03      	ldr	r6, [sp, #12]
 8007e12:	e794      	b.n	8007d3e <_dtoa_r+0x40e>
 8007e14:	9901      	ldr	r1, [sp, #4]
 8007e16:	4b4c      	ldr	r3, [pc, #304]	; (8007f48 <_dtoa_r+0x618>)
 8007e18:	4431      	add	r1, r6
 8007e1a:	910d      	str	r1, [sp, #52]	; 0x34
 8007e1c:	9908      	ldr	r1, [sp, #32]
 8007e1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e22:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e26:	2900      	cmp	r1, #0
 8007e28:	d043      	beq.n	8007eb2 <_dtoa_r+0x582>
 8007e2a:	494d      	ldr	r1, [pc, #308]	; (8007f60 <_dtoa_r+0x630>)
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	f7f8 fd15 	bl	800085c <__aeabi_ddiv>
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	f7f8 fa2f 	bl	8000298 <__aeabi_dsub>
 8007e3a:	9d01      	ldr	r5, [sp, #4]
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	468b      	mov	fp, r1
 8007e40:	4649      	mov	r1, r9
 8007e42:	4640      	mov	r0, r8
 8007e44:	f7f8 fe90 	bl	8000b68 <__aeabi_d2iz>
 8007e48:	4606      	mov	r6, r0
 8007e4a:	f7f8 fb73 	bl	8000534 <__aeabi_i2d>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4640      	mov	r0, r8
 8007e54:	4649      	mov	r1, r9
 8007e56:	f7f8 fa1f 	bl	8000298 <__aeabi_dsub>
 8007e5a:	3630      	adds	r6, #48	; 0x30
 8007e5c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e60:	4652      	mov	r2, sl
 8007e62:	465b      	mov	r3, fp
 8007e64:	4680      	mov	r8, r0
 8007e66:	4689      	mov	r9, r1
 8007e68:	f7f8 fe40 	bl	8000aec <__aeabi_dcmplt>
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d163      	bne.n	8007f38 <_dtoa_r+0x608>
 8007e70:	4642      	mov	r2, r8
 8007e72:	464b      	mov	r3, r9
 8007e74:	4936      	ldr	r1, [pc, #216]	; (8007f50 <_dtoa_r+0x620>)
 8007e76:	2000      	movs	r0, #0
 8007e78:	f7f8 fa0e 	bl	8000298 <__aeabi_dsub>
 8007e7c:	4652      	mov	r2, sl
 8007e7e:	465b      	mov	r3, fp
 8007e80:	f7f8 fe34 	bl	8000aec <__aeabi_dcmplt>
 8007e84:	2800      	cmp	r0, #0
 8007e86:	f040 80b5 	bne.w	8007ff4 <_dtoa_r+0x6c4>
 8007e8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e8c:	429d      	cmp	r5, r3
 8007e8e:	d081      	beq.n	8007d94 <_dtoa_r+0x464>
 8007e90:	4b30      	ldr	r3, [pc, #192]	; (8007f54 <_dtoa_r+0x624>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	4650      	mov	r0, sl
 8007e96:	4659      	mov	r1, fp
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	4b2d      	ldr	r3, [pc, #180]	; (8007f54 <_dtoa_r+0x624>)
 8007e9e:	4682      	mov	sl, r0
 8007ea0:	468b      	mov	fp, r1
 8007ea2:	4640      	mov	r0, r8
 8007ea4:	4649      	mov	r1, r9
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f7f8 fbae 	bl	8000608 <__aeabi_dmul>
 8007eac:	4680      	mov	r8, r0
 8007eae:	4689      	mov	r9, r1
 8007eb0:	e7c6      	b.n	8007e40 <_dtoa_r+0x510>
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	4659      	mov	r1, fp
 8007eb6:	f7f8 fba7 	bl	8000608 <__aeabi_dmul>
 8007eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebc:	9d01      	ldr	r5, [sp, #4]
 8007ebe:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4640      	mov	r0, r8
 8007ec8:	f7f8 fe4e 	bl	8000b68 <__aeabi_d2iz>
 8007ecc:	4606      	mov	r6, r0
 8007ece:	f7f8 fb31 	bl	8000534 <__aeabi_i2d>
 8007ed2:	3630      	adds	r6, #48	; 0x30
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4640      	mov	r0, r8
 8007eda:	4649      	mov	r1, r9
 8007edc:	f7f8 f9dc 	bl	8000298 <__aeabi_dsub>
 8007ee0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee6:	429d      	cmp	r5, r3
 8007ee8:	4680      	mov	r8, r0
 8007eea:	4689      	mov	r9, r1
 8007eec:	f04f 0200 	mov.w	r2, #0
 8007ef0:	d124      	bne.n	8007f3c <_dtoa_r+0x60c>
 8007ef2:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <_dtoa_r+0x630>)
 8007ef4:	4650      	mov	r0, sl
 8007ef6:	4659      	mov	r1, fp
 8007ef8:	f7f8 f9d0 	bl	800029c <__adddf3>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	f7f8 fe10 	bl	8000b28 <__aeabi_dcmpgt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d173      	bne.n	8007ff4 <_dtoa_r+0x6c4>
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	465b      	mov	r3, fp
 8007f10:	4913      	ldr	r1, [pc, #76]	; (8007f60 <_dtoa_r+0x630>)
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 f9c0 	bl	8000298 <__aeabi_dsub>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4649      	mov	r1, r9
 8007f20:	f7f8 fde4 	bl	8000aec <__aeabi_dcmplt>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	f43f af35 	beq.w	8007d94 <_dtoa_r+0x464>
 8007f2a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f2c:	1e6b      	subs	r3, r5, #1
 8007f2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f30:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d0f8      	beq.n	8007f2a <_dtoa_r+0x5fa>
 8007f38:	9700      	str	r7, [sp, #0]
 8007f3a:	e049      	b.n	8007fd0 <_dtoa_r+0x6a0>
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <_dtoa_r+0x624>)
 8007f3e:	f7f8 fb63 	bl	8000608 <__aeabi_dmul>
 8007f42:	4680      	mov	r8, r0
 8007f44:	4689      	mov	r9, r1
 8007f46:	e7bd      	b.n	8007ec4 <_dtoa_r+0x594>
 8007f48:	0800b908 	.word	0x0800b908
 8007f4c:	0800b8e0 	.word	0x0800b8e0
 8007f50:	3ff00000 	.word	0x3ff00000
 8007f54:	40240000 	.word	0x40240000
 8007f58:	401c0000 	.word	0x401c0000
 8007f5c:	40140000 	.word	0x40140000
 8007f60:	3fe00000 	.word	0x3fe00000
 8007f64:	9d01      	ldr	r5, [sp, #4]
 8007f66:	4656      	mov	r6, sl
 8007f68:	465f      	mov	r7, fp
 8007f6a:	4642      	mov	r2, r8
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	4630      	mov	r0, r6
 8007f70:	4639      	mov	r1, r7
 8007f72:	f7f8 fc73 	bl	800085c <__aeabi_ddiv>
 8007f76:	f7f8 fdf7 	bl	8000b68 <__aeabi_d2iz>
 8007f7a:	4682      	mov	sl, r0
 8007f7c:	f7f8 fada 	bl	8000534 <__aeabi_i2d>
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	f7f8 fb40 	bl	8000608 <__aeabi_dmul>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	4639      	mov	r1, r7
 8007f90:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007f94:	f7f8 f980 	bl	8000298 <__aeabi_dsub>
 8007f98:	f805 6b01 	strb.w	r6, [r5], #1
 8007f9c:	9e01      	ldr	r6, [sp, #4]
 8007f9e:	9f03      	ldr	r7, [sp, #12]
 8007fa0:	1bae      	subs	r6, r5, r6
 8007fa2:	42b7      	cmp	r7, r6
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	d135      	bne.n	8008016 <_dtoa_r+0x6e6>
 8007faa:	f7f8 f977 	bl	800029c <__adddf3>
 8007fae:	4642      	mov	r2, r8
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 fdb7 	bl	8000b28 <__aeabi_dcmpgt>
 8007fba:	b9d0      	cbnz	r0, 8007ff2 <_dtoa_r+0x6c2>
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	f7f8 fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fc8:	b110      	cbz	r0, 8007fd0 <_dtoa_r+0x6a0>
 8007fca:	f01a 0f01 	tst.w	sl, #1
 8007fce:	d110      	bne.n	8007ff2 <_dtoa_r+0x6c2>
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	ee18 1a10 	vmov	r1, s16
 8007fd6:	f000 faf3 	bl	80085c0 <_Bfree>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9800      	ldr	r0, [sp, #0]
 8007fde:	702b      	strb	r3, [r5, #0]
 8007fe0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	6018      	str	r0, [r3, #0]
 8007fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f43f acf1 	beq.w	80079d0 <_dtoa_r+0xa0>
 8007fee:	601d      	str	r5, [r3, #0]
 8007ff0:	e4ee      	b.n	80079d0 <_dtoa_r+0xa0>
 8007ff2:	9f00      	ldr	r7, [sp, #0]
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	461d      	mov	r5, r3
 8007ff8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ffc:	2a39      	cmp	r2, #57	; 0x39
 8007ffe:	d106      	bne.n	800800e <_dtoa_r+0x6de>
 8008000:	9a01      	ldr	r2, [sp, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d1f7      	bne.n	8007ff6 <_dtoa_r+0x6c6>
 8008006:	9901      	ldr	r1, [sp, #4]
 8008008:	2230      	movs	r2, #48	; 0x30
 800800a:	3701      	adds	r7, #1
 800800c:	700a      	strb	r2, [r1, #0]
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	3201      	adds	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
 8008014:	e790      	b.n	8007f38 <_dtoa_r+0x608>
 8008016:	4ba6      	ldr	r3, [pc, #664]	; (80082b0 <_dtoa_r+0x980>)
 8008018:	2200      	movs	r2, #0
 800801a:	f7f8 faf5 	bl	8000608 <__aeabi_dmul>
 800801e:	2200      	movs	r2, #0
 8008020:	2300      	movs	r3, #0
 8008022:	4606      	mov	r6, r0
 8008024:	460f      	mov	r7, r1
 8008026:	f7f8 fd57 	bl	8000ad8 <__aeabi_dcmpeq>
 800802a:	2800      	cmp	r0, #0
 800802c:	d09d      	beq.n	8007f6a <_dtoa_r+0x63a>
 800802e:	e7cf      	b.n	8007fd0 <_dtoa_r+0x6a0>
 8008030:	9a08      	ldr	r2, [sp, #32]
 8008032:	2a00      	cmp	r2, #0
 8008034:	f000 80d7 	beq.w	80081e6 <_dtoa_r+0x8b6>
 8008038:	9a06      	ldr	r2, [sp, #24]
 800803a:	2a01      	cmp	r2, #1
 800803c:	f300 80ba 	bgt.w	80081b4 <_dtoa_r+0x884>
 8008040:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008042:	2a00      	cmp	r2, #0
 8008044:	f000 80b2 	beq.w	80081ac <_dtoa_r+0x87c>
 8008048:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800804c:	9e07      	ldr	r6, [sp, #28]
 800804e:	9d04      	ldr	r5, [sp, #16]
 8008050:	9a04      	ldr	r2, [sp, #16]
 8008052:	441a      	add	r2, r3
 8008054:	9204      	str	r2, [sp, #16]
 8008056:	9a05      	ldr	r2, [sp, #20]
 8008058:	2101      	movs	r1, #1
 800805a:	441a      	add	r2, r3
 800805c:	4620      	mov	r0, r4
 800805e:	9205      	str	r2, [sp, #20]
 8008060:	f000 fb66 	bl	8008730 <__i2b>
 8008064:	4607      	mov	r7, r0
 8008066:	2d00      	cmp	r5, #0
 8008068:	dd0c      	ble.n	8008084 <_dtoa_r+0x754>
 800806a:	9b05      	ldr	r3, [sp, #20]
 800806c:	2b00      	cmp	r3, #0
 800806e:	dd09      	ble.n	8008084 <_dtoa_r+0x754>
 8008070:	42ab      	cmp	r3, r5
 8008072:	9a04      	ldr	r2, [sp, #16]
 8008074:	bfa8      	it	ge
 8008076:	462b      	movge	r3, r5
 8008078:	1ad2      	subs	r2, r2, r3
 800807a:	9204      	str	r2, [sp, #16]
 800807c:	9a05      	ldr	r2, [sp, #20]
 800807e:	1aed      	subs	r5, r5, r3
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	9305      	str	r3, [sp, #20]
 8008084:	9b07      	ldr	r3, [sp, #28]
 8008086:	b31b      	cbz	r3, 80080d0 <_dtoa_r+0x7a0>
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80af 	beq.w	80081ee <_dtoa_r+0x8be>
 8008090:	2e00      	cmp	r6, #0
 8008092:	dd13      	ble.n	80080bc <_dtoa_r+0x78c>
 8008094:	4639      	mov	r1, r7
 8008096:	4632      	mov	r2, r6
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fc09 	bl	80088b0 <__pow5mult>
 800809e:	ee18 2a10 	vmov	r2, s16
 80080a2:	4601      	mov	r1, r0
 80080a4:	4607      	mov	r7, r0
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 fb58 	bl	800875c <__multiply>
 80080ac:	ee18 1a10 	vmov	r1, s16
 80080b0:	4680      	mov	r8, r0
 80080b2:	4620      	mov	r0, r4
 80080b4:	f000 fa84 	bl	80085c0 <_Bfree>
 80080b8:	ee08 8a10 	vmov	s16, r8
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	1b9a      	subs	r2, r3, r6
 80080c0:	d006      	beq.n	80080d0 <_dtoa_r+0x7a0>
 80080c2:	ee18 1a10 	vmov	r1, s16
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fbf2 	bl	80088b0 <__pow5mult>
 80080cc:	ee08 0a10 	vmov	s16, r0
 80080d0:	2101      	movs	r1, #1
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 fb2c 	bl	8008730 <__i2b>
 80080d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080da:	2b00      	cmp	r3, #0
 80080dc:	4606      	mov	r6, r0
 80080de:	f340 8088 	ble.w	80081f2 <_dtoa_r+0x8c2>
 80080e2:	461a      	mov	r2, r3
 80080e4:	4601      	mov	r1, r0
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 fbe2 	bl	80088b0 <__pow5mult>
 80080ec:	9b06      	ldr	r3, [sp, #24]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	4606      	mov	r6, r0
 80080f2:	f340 8081 	ble.w	80081f8 <_dtoa_r+0x8c8>
 80080f6:	f04f 0800 	mov.w	r8, #0
 80080fa:	6933      	ldr	r3, [r6, #16]
 80080fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008100:	6918      	ldr	r0, [r3, #16]
 8008102:	f000 fac5 	bl	8008690 <__hi0bits>
 8008106:	f1c0 0020 	rsb	r0, r0, #32
 800810a:	9b05      	ldr	r3, [sp, #20]
 800810c:	4418      	add	r0, r3
 800810e:	f010 001f 	ands.w	r0, r0, #31
 8008112:	f000 8092 	beq.w	800823a <_dtoa_r+0x90a>
 8008116:	f1c0 0320 	rsb	r3, r0, #32
 800811a:	2b04      	cmp	r3, #4
 800811c:	f340 808a 	ble.w	8008234 <_dtoa_r+0x904>
 8008120:	f1c0 001c 	rsb	r0, r0, #28
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	4403      	add	r3, r0
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	9b05      	ldr	r3, [sp, #20]
 800812c:	4403      	add	r3, r0
 800812e:	4405      	add	r5, r0
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd07      	ble.n	8008148 <_dtoa_r+0x818>
 8008138:	ee18 1a10 	vmov	r1, s16
 800813c:	461a      	mov	r2, r3
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fc10 	bl	8008964 <__lshift>
 8008144:	ee08 0a10 	vmov	s16, r0
 8008148:	9b05      	ldr	r3, [sp, #20]
 800814a:	2b00      	cmp	r3, #0
 800814c:	dd05      	ble.n	800815a <_dtoa_r+0x82a>
 800814e:	4631      	mov	r1, r6
 8008150:	461a      	mov	r2, r3
 8008152:	4620      	mov	r0, r4
 8008154:	f000 fc06 	bl	8008964 <__lshift>
 8008158:	4606      	mov	r6, r0
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	2b00      	cmp	r3, #0
 800815e:	d06e      	beq.n	800823e <_dtoa_r+0x90e>
 8008160:	ee18 0a10 	vmov	r0, s16
 8008164:	4631      	mov	r1, r6
 8008166:	f000 fc6d 	bl	8008a44 <__mcmp>
 800816a:	2800      	cmp	r0, #0
 800816c:	da67      	bge.n	800823e <_dtoa_r+0x90e>
 800816e:	9b00      	ldr	r3, [sp, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	220a      	movs	r2, #10
 800817a:	2300      	movs	r3, #0
 800817c:	4620      	mov	r0, r4
 800817e:	f000 fa41 	bl	8008604 <__multadd>
 8008182:	9b08      	ldr	r3, [sp, #32]
 8008184:	ee08 0a10 	vmov	s16, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 81b1 	beq.w	80084f0 <_dtoa_r+0xbc0>
 800818e:	2300      	movs	r3, #0
 8008190:	4639      	mov	r1, r7
 8008192:	220a      	movs	r2, #10
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fa35 	bl	8008604 <__multadd>
 800819a:	9b02      	ldr	r3, [sp, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	4607      	mov	r7, r0
 80081a0:	f300 808e 	bgt.w	80082c0 <_dtoa_r+0x990>
 80081a4:	9b06      	ldr	r3, [sp, #24]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	dc51      	bgt.n	800824e <_dtoa_r+0x91e>
 80081aa:	e089      	b.n	80082c0 <_dtoa_r+0x990>
 80081ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081b2:	e74b      	b.n	800804c <_dtoa_r+0x71c>
 80081b4:	9b03      	ldr	r3, [sp, #12]
 80081b6:	1e5e      	subs	r6, r3, #1
 80081b8:	9b07      	ldr	r3, [sp, #28]
 80081ba:	42b3      	cmp	r3, r6
 80081bc:	bfbf      	itttt	lt
 80081be:	9b07      	ldrlt	r3, [sp, #28]
 80081c0:	9607      	strlt	r6, [sp, #28]
 80081c2:	1af2      	sublt	r2, r6, r3
 80081c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081c6:	bfb6      	itet	lt
 80081c8:	189b      	addlt	r3, r3, r2
 80081ca:	1b9e      	subge	r6, r3, r6
 80081cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081ce:	9b03      	ldr	r3, [sp, #12]
 80081d0:	bfb8      	it	lt
 80081d2:	2600      	movlt	r6, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfb7      	itett	lt
 80081d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80081dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80081e0:	1a9d      	sublt	r5, r3, r2
 80081e2:	2300      	movlt	r3, #0
 80081e4:	e734      	b.n	8008050 <_dtoa_r+0x720>
 80081e6:	9e07      	ldr	r6, [sp, #28]
 80081e8:	9d04      	ldr	r5, [sp, #16]
 80081ea:	9f08      	ldr	r7, [sp, #32]
 80081ec:	e73b      	b.n	8008066 <_dtoa_r+0x736>
 80081ee:	9a07      	ldr	r2, [sp, #28]
 80081f0:	e767      	b.n	80080c2 <_dtoa_r+0x792>
 80081f2:	9b06      	ldr	r3, [sp, #24]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	dc18      	bgt.n	800822a <_dtoa_r+0x8fa>
 80081f8:	f1ba 0f00 	cmp.w	sl, #0
 80081fc:	d115      	bne.n	800822a <_dtoa_r+0x8fa>
 80081fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008202:	b993      	cbnz	r3, 800822a <_dtoa_r+0x8fa>
 8008204:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008208:	0d1b      	lsrs	r3, r3, #20
 800820a:	051b      	lsls	r3, r3, #20
 800820c:	b183      	cbz	r3, 8008230 <_dtoa_r+0x900>
 800820e:	9b04      	ldr	r3, [sp, #16]
 8008210:	3301      	adds	r3, #1
 8008212:	9304      	str	r3, [sp, #16]
 8008214:	9b05      	ldr	r3, [sp, #20]
 8008216:	3301      	adds	r3, #1
 8008218:	9305      	str	r3, [sp, #20]
 800821a:	f04f 0801 	mov.w	r8, #1
 800821e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008220:	2b00      	cmp	r3, #0
 8008222:	f47f af6a 	bne.w	80080fa <_dtoa_r+0x7ca>
 8008226:	2001      	movs	r0, #1
 8008228:	e76f      	b.n	800810a <_dtoa_r+0x7da>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	e7f6      	b.n	800821e <_dtoa_r+0x8ee>
 8008230:	4698      	mov	r8, r3
 8008232:	e7f4      	b.n	800821e <_dtoa_r+0x8ee>
 8008234:	f43f af7d 	beq.w	8008132 <_dtoa_r+0x802>
 8008238:	4618      	mov	r0, r3
 800823a:	301c      	adds	r0, #28
 800823c:	e772      	b.n	8008124 <_dtoa_r+0x7f4>
 800823e:	9b03      	ldr	r3, [sp, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dc37      	bgt.n	80082b4 <_dtoa_r+0x984>
 8008244:	9b06      	ldr	r3, [sp, #24]
 8008246:	2b02      	cmp	r3, #2
 8008248:	dd34      	ble.n	80082b4 <_dtoa_r+0x984>
 800824a:	9b03      	ldr	r3, [sp, #12]
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	b96b      	cbnz	r3, 800826e <_dtoa_r+0x93e>
 8008252:	4631      	mov	r1, r6
 8008254:	2205      	movs	r2, #5
 8008256:	4620      	mov	r0, r4
 8008258:	f000 f9d4 	bl	8008604 <__multadd>
 800825c:	4601      	mov	r1, r0
 800825e:	4606      	mov	r6, r0
 8008260:	ee18 0a10 	vmov	r0, s16
 8008264:	f000 fbee 	bl	8008a44 <__mcmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	f73f adbb 	bgt.w	8007de4 <_dtoa_r+0x4b4>
 800826e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008270:	9d01      	ldr	r5, [sp, #4]
 8008272:	43db      	mvns	r3, r3
 8008274:	9300      	str	r3, [sp, #0]
 8008276:	f04f 0800 	mov.w	r8, #0
 800827a:	4631      	mov	r1, r6
 800827c:	4620      	mov	r0, r4
 800827e:	f000 f99f 	bl	80085c0 <_Bfree>
 8008282:	2f00      	cmp	r7, #0
 8008284:	f43f aea4 	beq.w	8007fd0 <_dtoa_r+0x6a0>
 8008288:	f1b8 0f00 	cmp.w	r8, #0
 800828c:	d005      	beq.n	800829a <_dtoa_r+0x96a>
 800828e:	45b8      	cmp	r8, r7
 8008290:	d003      	beq.n	800829a <_dtoa_r+0x96a>
 8008292:	4641      	mov	r1, r8
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f993 	bl	80085c0 <_Bfree>
 800829a:	4639      	mov	r1, r7
 800829c:	4620      	mov	r0, r4
 800829e:	f000 f98f 	bl	80085c0 <_Bfree>
 80082a2:	e695      	b.n	8007fd0 <_dtoa_r+0x6a0>
 80082a4:	2600      	movs	r6, #0
 80082a6:	4637      	mov	r7, r6
 80082a8:	e7e1      	b.n	800826e <_dtoa_r+0x93e>
 80082aa:	9700      	str	r7, [sp, #0]
 80082ac:	4637      	mov	r7, r6
 80082ae:	e599      	b.n	8007de4 <_dtoa_r+0x4b4>
 80082b0:	40240000 	.word	0x40240000
 80082b4:	9b08      	ldr	r3, [sp, #32]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 80ca 	beq.w	8008450 <_dtoa_r+0xb20>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	9302      	str	r3, [sp, #8]
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	dd05      	ble.n	80082d0 <_dtoa_r+0x9a0>
 80082c4:	4639      	mov	r1, r7
 80082c6:	462a      	mov	r2, r5
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fb4b 	bl	8008964 <__lshift>
 80082ce:	4607      	mov	r7, r0
 80082d0:	f1b8 0f00 	cmp.w	r8, #0
 80082d4:	d05b      	beq.n	800838e <_dtoa_r+0xa5e>
 80082d6:	6879      	ldr	r1, [r7, #4]
 80082d8:	4620      	mov	r0, r4
 80082da:	f000 f931 	bl	8008540 <_Balloc>
 80082de:	4605      	mov	r5, r0
 80082e0:	b928      	cbnz	r0, 80082ee <_dtoa_r+0x9be>
 80082e2:	4b87      	ldr	r3, [pc, #540]	; (8008500 <_dtoa_r+0xbd0>)
 80082e4:	4602      	mov	r2, r0
 80082e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80082ea:	f7ff bb3b 	b.w	8007964 <_dtoa_r+0x34>
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	3202      	adds	r2, #2
 80082f2:	0092      	lsls	r2, r2, #2
 80082f4:	f107 010c 	add.w	r1, r7, #12
 80082f8:	300c      	adds	r0, #12
 80082fa:	f000 f913 	bl	8008524 <memcpy>
 80082fe:	2201      	movs	r2, #1
 8008300:	4629      	mov	r1, r5
 8008302:	4620      	mov	r0, r4
 8008304:	f000 fb2e 	bl	8008964 <__lshift>
 8008308:	9b01      	ldr	r3, [sp, #4]
 800830a:	f103 0901 	add.w	r9, r3, #1
 800830e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008312:	4413      	add	r3, r2
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	f00a 0301 	and.w	r3, sl, #1
 800831a:	46b8      	mov	r8, r7
 800831c:	9304      	str	r3, [sp, #16]
 800831e:	4607      	mov	r7, r0
 8008320:	4631      	mov	r1, r6
 8008322:	ee18 0a10 	vmov	r0, s16
 8008326:	f7ff fa77 	bl	8007818 <quorem>
 800832a:	4641      	mov	r1, r8
 800832c:	9002      	str	r0, [sp, #8]
 800832e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008332:	ee18 0a10 	vmov	r0, s16
 8008336:	f000 fb85 	bl	8008a44 <__mcmp>
 800833a:	463a      	mov	r2, r7
 800833c:	9003      	str	r0, [sp, #12]
 800833e:	4631      	mov	r1, r6
 8008340:	4620      	mov	r0, r4
 8008342:	f000 fb9b 	bl	8008a7c <__mdiff>
 8008346:	68c2      	ldr	r2, [r0, #12]
 8008348:	f109 3bff 	add.w	fp, r9, #4294967295
 800834c:	4605      	mov	r5, r0
 800834e:	bb02      	cbnz	r2, 8008392 <_dtoa_r+0xa62>
 8008350:	4601      	mov	r1, r0
 8008352:	ee18 0a10 	vmov	r0, s16
 8008356:	f000 fb75 	bl	8008a44 <__mcmp>
 800835a:	4602      	mov	r2, r0
 800835c:	4629      	mov	r1, r5
 800835e:	4620      	mov	r0, r4
 8008360:	9207      	str	r2, [sp, #28]
 8008362:	f000 f92d 	bl	80085c0 <_Bfree>
 8008366:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800836a:	ea43 0102 	orr.w	r1, r3, r2
 800836e:	9b04      	ldr	r3, [sp, #16]
 8008370:	430b      	orrs	r3, r1
 8008372:	464d      	mov	r5, r9
 8008374:	d10f      	bne.n	8008396 <_dtoa_r+0xa66>
 8008376:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800837a:	d02a      	beq.n	80083d2 <_dtoa_r+0xaa2>
 800837c:	9b03      	ldr	r3, [sp, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	dd02      	ble.n	8008388 <_dtoa_r+0xa58>
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008388:	f88b a000 	strb.w	sl, [fp]
 800838c:	e775      	b.n	800827a <_dtoa_r+0x94a>
 800838e:	4638      	mov	r0, r7
 8008390:	e7ba      	b.n	8008308 <_dtoa_r+0x9d8>
 8008392:	2201      	movs	r2, #1
 8008394:	e7e2      	b.n	800835c <_dtoa_r+0xa2c>
 8008396:	9b03      	ldr	r3, [sp, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	db04      	blt.n	80083a6 <_dtoa_r+0xa76>
 800839c:	9906      	ldr	r1, [sp, #24]
 800839e:	430b      	orrs	r3, r1
 80083a0:	9904      	ldr	r1, [sp, #16]
 80083a2:	430b      	orrs	r3, r1
 80083a4:	d122      	bne.n	80083ec <_dtoa_r+0xabc>
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	ddee      	ble.n	8008388 <_dtoa_r+0xa58>
 80083aa:	ee18 1a10 	vmov	r1, s16
 80083ae:	2201      	movs	r2, #1
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fad7 	bl	8008964 <__lshift>
 80083b6:	4631      	mov	r1, r6
 80083b8:	ee08 0a10 	vmov	s16, r0
 80083bc:	f000 fb42 	bl	8008a44 <__mcmp>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	dc03      	bgt.n	80083cc <_dtoa_r+0xa9c>
 80083c4:	d1e0      	bne.n	8008388 <_dtoa_r+0xa58>
 80083c6:	f01a 0f01 	tst.w	sl, #1
 80083ca:	d0dd      	beq.n	8008388 <_dtoa_r+0xa58>
 80083cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083d0:	d1d7      	bne.n	8008382 <_dtoa_r+0xa52>
 80083d2:	2339      	movs	r3, #57	; 0x39
 80083d4:	f88b 3000 	strb.w	r3, [fp]
 80083d8:	462b      	mov	r3, r5
 80083da:	461d      	mov	r5, r3
 80083dc:	3b01      	subs	r3, #1
 80083de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80083e2:	2a39      	cmp	r2, #57	; 0x39
 80083e4:	d071      	beq.n	80084ca <_dtoa_r+0xb9a>
 80083e6:	3201      	adds	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e746      	b.n	800827a <_dtoa_r+0x94a>
 80083ec:	2a00      	cmp	r2, #0
 80083ee:	dd07      	ble.n	8008400 <_dtoa_r+0xad0>
 80083f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083f4:	d0ed      	beq.n	80083d2 <_dtoa_r+0xaa2>
 80083f6:	f10a 0301 	add.w	r3, sl, #1
 80083fa:	f88b 3000 	strb.w	r3, [fp]
 80083fe:	e73c      	b.n	800827a <_dtoa_r+0x94a>
 8008400:	9b05      	ldr	r3, [sp, #20]
 8008402:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008406:	4599      	cmp	r9, r3
 8008408:	d047      	beq.n	800849a <_dtoa_r+0xb6a>
 800840a:	ee18 1a10 	vmov	r1, s16
 800840e:	2300      	movs	r3, #0
 8008410:	220a      	movs	r2, #10
 8008412:	4620      	mov	r0, r4
 8008414:	f000 f8f6 	bl	8008604 <__multadd>
 8008418:	45b8      	cmp	r8, r7
 800841a:	ee08 0a10 	vmov	s16, r0
 800841e:	f04f 0300 	mov.w	r3, #0
 8008422:	f04f 020a 	mov.w	r2, #10
 8008426:	4641      	mov	r1, r8
 8008428:	4620      	mov	r0, r4
 800842a:	d106      	bne.n	800843a <_dtoa_r+0xb0a>
 800842c:	f000 f8ea 	bl	8008604 <__multadd>
 8008430:	4680      	mov	r8, r0
 8008432:	4607      	mov	r7, r0
 8008434:	f109 0901 	add.w	r9, r9, #1
 8008438:	e772      	b.n	8008320 <_dtoa_r+0x9f0>
 800843a:	f000 f8e3 	bl	8008604 <__multadd>
 800843e:	4639      	mov	r1, r7
 8008440:	4680      	mov	r8, r0
 8008442:	2300      	movs	r3, #0
 8008444:	220a      	movs	r2, #10
 8008446:	4620      	mov	r0, r4
 8008448:	f000 f8dc 	bl	8008604 <__multadd>
 800844c:	4607      	mov	r7, r0
 800844e:	e7f1      	b.n	8008434 <_dtoa_r+0xb04>
 8008450:	9b03      	ldr	r3, [sp, #12]
 8008452:	9302      	str	r3, [sp, #8]
 8008454:	9d01      	ldr	r5, [sp, #4]
 8008456:	ee18 0a10 	vmov	r0, s16
 800845a:	4631      	mov	r1, r6
 800845c:	f7ff f9dc 	bl	8007818 <quorem>
 8008460:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	f805 ab01 	strb.w	sl, [r5], #1
 800846a:	1aea      	subs	r2, r5, r3
 800846c:	9b02      	ldr	r3, [sp, #8]
 800846e:	4293      	cmp	r3, r2
 8008470:	dd09      	ble.n	8008486 <_dtoa_r+0xb56>
 8008472:	ee18 1a10 	vmov	r1, s16
 8008476:	2300      	movs	r3, #0
 8008478:	220a      	movs	r2, #10
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f8c2 	bl	8008604 <__multadd>
 8008480:	ee08 0a10 	vmov	s16, r0
 8008484:	e7e7      	b.n	8008456 <_dtoa_r+0xb26>
 8008486:	9b02      	ldr	r3, [sp, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfc8      	it	gt
 800848c:	461d      	movgt	r5, r3
 800848e:	9b01      	ldr	r3, [sp, #4]
 8008490:	bfd8      	it	le
 8008492:	2501      	movle	r5, #1
 8008494:	441d      	add	r5, r3
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	ee18 1a10 	vmov	r1, s16
 800849e:	2201      	movs	r2, #1
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fa5f 	bl	8008964 <__lshift>
 80084a6:	4631      	mov	r1, r6
 80084a8:	ee08 0a10 	vmov	s16, r0
 80084ac:	f000 faca 	bl	8008a44 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	dc91      	bgt.n	80083d8 <_dtoa_r+0xaa8>
 80084b4:	d102      	bne.n	80084bc <_dtoa_r+0xb8c>
 80084b6:	f01a 0f01 	tst.w	sl, #1
 80084ba:	d18d      	bne.n	80083d8 <_dtoa_r+0xaa8>
 80084bc:	462b      	mov	r3, r5
 80084be:	461d      	mov	r5, r3
 80084c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084c4:	2a30      	cmp	r2, #48	; 0x30
 80084c6:	d0fa      	beq.n	80084be <_dtoa_r+0xb8e>
 80084c8:	e6d7      	b.n	800827a <_dtoa_r+0x94a>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d184      	bne.n	80083da <_dtoa_r+0xaaa>
 80084d0:	9b00      	ldr	r3, [sp, #0]
 80084d2:	3301      	adds	r3, #1
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2331      	movs	r3, #49	; 0x31
 80084d8:	7013      	strb	r3, [r2, #0]
 80084da:	e6ce      	b.n	800827a <_dtoa_r+0x94a>
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <_dtoa_r+0xbd4>)
 80084de:	f7ff ba95 	b.w	8007a0c <_dtoa_r+0xdc>
 80084e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f47f aa6e 	bne.w	80079c6 <_dtoa_r+0x96>
 80084ea:	4b07      	ldr	r3, [pc, #28]	; (8008508 <_dtoa_r+0xbd8>)
 80084ec:	f7ff ba8e 	b.w	8007a0c <_dtoa_r+0xdc>
 80084f0:	9b02      	ldr	r3, [sp, #8]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dcae      	bgt.n	8008454 <_dtoa_r+0xb24>
 80084f6:	9b06      	ldr	r3, [sp, #24]
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	f73f aea8 	bgt.w	800824e <_dtoa_r+0x91e>
 80084fe:	e7a9      	b.n	8008454 <_dtoa_r+0xb24>
 8008500:	0800b873 	.word	0x0800b873
 8008504:	0800b7d0 	.word	0x0800b7d0
 8008508:	0800b7f4 	.word	0x0800b7f4

0800850c <_localeconv_r>:
 800850c:	4800      	ldr	r0, [pc, #0]	; (8008510 <_localeconv_r+0x4>)
 800850e:	4770      	bx	lr
 8008510:	200001a4 	.word	0x200001a4

08008514 <malloc>:
 8008514:	4b02      	ldr	r3, [pc, #8]	; (8008520 <malloc+0xc>)
 8008516:	4601      	mov	r1, r0
 8008518:	6818      	ldr	r0, [r3, #0]
 800851a:	f000 bc17 	b.w	8008d4c <_malloc_r>
 800851e:	bf00      	nop
 8008520:	20000050 	.word	0x20000050

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853a:	4291      	cmp	r1, r2
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <_Balloc>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	b976      	cbnz	r6, 8008568 <_Balloc+0x28>
 800854a:	2010      	movs	r0, #16
 800854c:	f7ff ffe2 	bl	8008514 <malloc>
 8008550:	4602      	mov	r2, r0
 8008552:	6260      	str	r0, [r4, #36]	; 0x24
 8008554:	b920      	cbnz	r0, 8008560 <_Balloc+0x20>
 8008556:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <_Balloc+0x78>)
 8008558:	4818      	ldr	r0, [pc, #96]	; (80085bc <_Balloc+0x7c>)
 800855a:	2166      	movs	r1, #102	; 0x66
 800855c:	f000 fdd6 	bl	800910c <__assert_func>
 8008560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008564:	6006      	str	r6, [r0, #0]
 8008566:	60c6      	str	r6, [r0, #12]
 8008568:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800856a:	68f3      	ldr	r3, [r6, #12]
 800856c:	b183      	cbz	r3, 8008590 <_Balloc+0x50>
 800856e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008576:	b9b8      	cbnz	r0, 80085a8 <_Balloc+0x68>
 8008578:	2101      	movs	r1, #1
 800857a:	fa01 f605 	lsl.w	r6, r1, r5
 800857e:	1d72      	adds	r2, r6, #5
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	4620      	mov	r0, r4
 8008584:	f000 fb60 	bl	8008c48 <_calloc_r>
 8008588:	b160      	cbz	r0, 80085a4 <_Balloc+0x64>
 800858a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800858e:	e00e      	b.n	80085ae <_Balloc+0x6e>
 8008590:	2221      	movs	r2, #33	; 0x21
 8008592:	2104      	movs	r1, #4
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fb57 	bl	8008c48 <_calloc_r>
 800859a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800859c:	60f0      	str	r0, [r6, #12]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e4      	bne.n	800856e <_Balloc+0x2e>
 80085a4:	2000      	movs	r0, #0
 80085a6:	bd70      	pop	{r4, r5, r6, pc}
 80085a8:	6802      	ldr	r2, [r0, #0]
 80085aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085ae:	2300      	movs	r3, #0
 80085b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085b4:	e7f7      	b.n	80085a6 <_Balloc+0x66>
 80085b6:	bf00      	nop
 80085b8:	0800b801 	.word	0x0800b801
 80085bc:	0800b884 	.word	0x0800b884

080085c0 <_Bfree>:
 80085c0:	b570      	push	{r4, r5, r6, lr}
 80085c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085c4:	4605      	mov	r5, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	b976      	cbnz	r6, 80085e8 <_Bfree+0x28>
 80085ca:	2010      	movs	r0, #16
 80085cc:	f7ff ffa2 	bl	8008514 <malloc>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6268      	str	r0, [r5, #36]	; 0x24
 80085d4:	b920      	cbnz	r0, 80085e0 <_Bfree+0x20>
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <_Bfree+0x3c>)
 80085d8:	4809      	ldr	r0, [pc, #36]	; (8008600 <_Bfree+0x40>)
 80085da:	218a      	movs	r1, #138	; 0x8a
 80085dc:	f000 fd96 	bl	800910c <__assert_func>
 80085e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085e4:	6006      	str	r6, [r0, #0]
 80085e6:	60c6      	str	r6, [r0, #12]
 80085e8:	b13c      	cbz	r4, 80085fa <_Bfree+0x3a>
 80085ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085ec:	6862      	ldr	r2, [r4, #4]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80085f4:	6021      	str	r1, [r4, #0]
 80085f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	0800b801 	.word	0x0800b801
 8008600:	0800b884 	.word	0x0800b884

08008604 <__multadd>:
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	690d      	ldr	r5, [r1, #16]
 800860a:	4607      	mov	r7, r0
 800860c:	460c      	mov	r4, r1
 800860e:	461e      	mov	r6, r3
 8008610:	f101 0c14 	add.w	ip, r1, #20
 8008614:	2000      	movs	r0, #0
 8008616:	f8dc 3000 	ldr.w	r3, [ip]
 800861a:	b299      	uxth	r1, r3
 800861c:	fb02 6101 	mla	r1, r2, r1, r6
 8008620:	0c1e      	lsrs	r6, r3, #16
 8008622:	0c0b      	lsrs	r3, r1, #16
 8008624:	fb02 3306 	mla	r3, r2, r6, r3
 8008628:	b289      	uxth	r1, r1
 800862a:	3001      	adds	r0, #1
 800862c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008630:	4285      	cmp	r5, r0
 8008632:	f84c 1b04 	str.w	r1, [ip], #4
 8008636:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800863a:	dcec      	bgt.n	8008616 <__multadd+0x12>
 800863c:	b30e      	cbz	r6, 8008682 <__multadd+0x7e>
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	42ab      	cmp	r3, r5
 8008642:	dc19      	bgt.n	8008678 <__multadd+0x74>
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	4638      	mov	r0, r7
 8008648:	3101      	adds	r1, #1
 800864a:	f7ff ff79 	bl	8008540 <_Balloc>
 800864e:	4680      	mov	r8, r0
 8008650:	b928      	cbnz	r0, 800865e <__multadd+0x5a>
 8008652:	4602      	mov	r2, r0
 8008654:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <__multadd+0x84>)
 8008656:	480d      	ldr	r0, [pc, #52]	; (800868c <__multadd+0x88>)
 8008658:	21b5      	movs	r1, #181	; 0xb5
 800865a:	f000 fd57 	bl	800910c <__assert_func>
 800865e:	6922      	ldr	r2, [r4, #16]
 8008660:	3202      	adds	r2, #2
 8008662:	f104 010c 	add.w	r1, r4, #12
 8008666:	0092      	lsls	r2, r2, #2
 8008668:	300c      	adds	r0, #12
 800866a:	f7ff ff5b 	bl	8008524 <memcpy>
 800866e:	4621      	mov	r1, r4
 8008670:	4638      	mov	r0, r7
 8008672:	f7ff ffa5 	bl	80085c0 <_Bfree>
 8008676:	4644      	mov	r4, r8
 8008678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800867c:	3501      	adds	r5, #1
 800867e:	615e      	str	r6, [r3, #20]
 8008680:	6125      	str	r5, [r4, #16]
 8008682:	4620      	mov	r0, r4
 8008684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008688:	0800b873 	.word	0x0800b873
 800868c:	0800b884 	.word	0x0800b884

08008690 <__hi0bits>:
 8008690:	0c03      	lsrs	r3, r0, #16
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	b9d3      	cbnz	r3, 80086cc <__hi0bits+0x3c>
 8008696:	0400      	lsls	r0, r0, #16
 8008698:	2310      	movs	r3, #16
 800869a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800869e:	bf04      	itt	eq
 80086a0:	0200      	lsleq	r0, r0, #8
 80086a2:	3308      	addeq	r3, #8
 80086a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086a8:	bf04      	itt	eq
 80086aa:	0100      	lsleq	r0, r0, #4
 80086ac:	3304      	addeq	r3, #4
 80086ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086b2:	bf04      	itt	eq
 80086b4:	0080      	lsleq	r0, r0, #2
 80086b6:	3302      	addeq	r3, #2
 80086b8:	2800      	cmp	r0, #0
 80086ba:	db05      	blt.n	80086c8 <__hi0bits+0x38>
 80086bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086c0:	f103 0301 	add.w	r3, r3, #1
 80086c4:	bf08      	it	eq
 80086c6:	2320      	moveq	r3, #32
 80086c8:	4618      	mov	r0, r3
 80086ca:	4770      	bx	lr
 80086cc:	2300      	movs	r3, #0
 80086ce:	e7e4      	b.n	800869a <__hi0bits+0xa>

080086d0 <__lo0bits>:
 80086d0:	6803      	ldr	r3, [r0, #0]
 80086d2:	f013 0207 	ands.w	r2, r3, #7
 80086d6:	4601      	mov	r1, r0
 80086d8:	d00b      	beq.n	80086f2 <__lo0bits+0x22>
 80086da:	07da      	lsls	r2, r3, #31
 80086dc:	d423      	bmi.n	8008726 <__lo0bits+0x56>
 80086de:	0798      	lsls	r0, r3, #30
 80086e0:	bf49      	itett	mi
 80086e2:	085b      	lsrmi	r3, r3, #1
 80086e4:	089b      	lsrpl	r3, r3, #2
 80086e6:	2001      	movmi	r0, #1
 80086e8:	600b      	strmi	r3, [r1, #0]
 80086ea:	bf5c      	itt	pl
 80086ec:	600b      	strpl	r3, [r1, #0]
 80086ee:	2002      	movpl	r0, #2
 80086f0:	4770      	bx	lr
 80086f2:	b298      	uxth	r0, r3
 80086f4:	b9a8      	cbnz	r0, 8008722 <__lo0bits+0x52>
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	2010      	movs	r0, #16
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	b90a      	cbnz	r2, 8008702 <__lo0bits+0x32>
 80086fe:	3008      	adds	r0, #8
 8008700:	0a1b      	lsrs	r3, r3, #8
 8008702:	071a      	lsls	r2, r3, #28
 8008704:	bf04      	itt	eq
 8008706:	091b      	lsreq	r3, r3, #4
 8008708:	3004      	addeq	r0, #4
 800870a:	079a      	lsls	r2, r3, #30
 800870c:	bf04      	itt	eq
 800870e:	089b      	lsreq	r3, r3, #2
 8008710:	3002      	addeq	r0, #2
 8008712:	07da      	lsls	r2, r3, #31
 8008714:	d403      	bmi.n	800871e <__lo0bits+0x4e>
 8008716:	085b      	lsrs	r3, r3, #1
 8008718:	f100 0001 	add.w	r0, r0, #1
 800871c:	d005      	beq.n	800872a <__lo0bits+0x5a>
 800871e:	600b      	str	r3, [r1, #0]
 8008720:	4770      	bx	lr
 8008722:	4610      	mov	r0, r2
 8008724:	e7e9      	b.n	80086fa <__lo0bits+0x2a>
 8008726:	2000      	movs	r0, #0
 8008728:	4770      	bx	lr
 800872a:	2020      	movs	r0, #32
 800872c:	4770      	bx	lr
	...

08008730 <__i2b>:
 8008730:	b510      	push	{r4, lr}
 8008732:	460c      	mov	r4, r1
 8008734:	2101      	movs	r1, #1
 8008736:	f7ff ff03 	bl	8008540 <_Balloc>
 800873a:	4602      	mov	r2, r0
 800873c:	b928      	cbnz	r0, 800874a <__i2b+0x1a>
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <__i2b+0x24>)
 8008740:	4805      	ldr	r0, [pc, #20]	; (8008758 <__i2b+0x28>)
 8008742:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008746:	f000 fce1 	bl	800910c <__assert_func>
 800874a:	2301      	movs	r3, #1
 800874c:	6144      	str	r4, [r0, #20]
 800874e:	6103      	str	r3, [r0, #16]
 8008750:	bd10      	pop	{r4, pc}
 8008752:	bf00      	nop
 8008754:	0800b873 	.word	0x0800b873
 8008758:	0800b884 	.word	0x0800b884

0800875c <__multiply>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	4691      	mov	r9, r2
 8008762:	690a      	ldr	r2, [r1, #16]
 8008764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008768:	429a      	cmp	r2, r3
 800876a:	bfb8      	it	lt
 800876c:	460b      	movlt	r3, r1
 800876e:	460c      	mov	r4, r1
 8008770:	bfbc      	itt	lt
 8008772:	464c      	movlt	r4, r9
 8008774:	4699      	movlt	r9, r3
 8008776:	6927      	ldr	r7, [r4, #16]
 8008778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	6861      	ldr	r1, [r4, #4]
 8008780:	eb07 060a 	add.w	r6, r7, sl
 8008784:	42b3      	cmp	r3, r6
 8008786:	b085      	sub	sp, #20
 8008788:	bfb8      	it	lt
 800878a:	3101      	addlt	r1, #1
 800878c:	f7ff fed8 	bl	8008540 <_Balloc>
 8008790:	b930      	cbnz	r0, 80087a0 <__multiply+0x44>
 8008792:	4602      	mov	r2, r0
 8008794:	4b44      	ldr	r3, [pc, #272]	; (80088a8 <__multiply+0x14c>)
 8008796:	4845      	ldr	r0, [pc, #276]	; (80088ac <__multiply+0x150>)
 8008798:	f240 115d 	movw	r1, #349	; 0x15d
 800879c:	f000 fcb6 	bl	800910c <__assert_func>
 80087a0:	f100 0514 	add.w	r5, r0, #20
 80087a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087a8:	462b      	mov	r3, r5
 80087aa:	2200      	movs	r2, #0
 80087ac:	4543      	cmp	r3, r8
 80087ae:	d321      	bcc.n	80087f4 <__multiply+0x98>
 80087b0:	f104 0314 	add.w	r3, r4, #20
 80087b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80087b8:	f109 0314 	add.w	r3, r9, #20
 80087bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80087c0:	9202      	str	r2, [sp, #8]
 80087c2:	1b3a      	subs	r2, r7, r4
 80087c4:	3a15      	subs	r2, #21
 80087c6:	f022 0203 	bic.w	r2, r2, #3
 80087ca:	3204      	adds	r2, #4
 80087cc:	f104 0115 	add.w	r1, r4, #21
 80087d0:	428f      	cmp	r7, r1
 80087d2:	bf38      	it	cc
 80087d4:	2204      	movcc	r2, #4
 80087d6:	9201      	str	r2, [sp, #4]
 80087d8:	9a02      	ldr	r2, [sp, #8]
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d80c      	bhi.n	80087fa <__multiply+0x9e>
 80087e0:	2e00      	cmp	r6, #0
 80087e2:	dd03      	ble.n	80087ec <__multiply+0x90>
 80087e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d05a      	beq.n	80088a2 <__multiply+0x146>
 80087ec:	6106      	str	r6, [r0, #16]
 80087ee:	b005      	add	sp, #20
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	f843 2b04 	str.w	r2, [r3], #4
 80087f8:	e7d8      	b.n	80087ac <__multiply+0x50>
 80087fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80087fe:	f1ba 0f00 	cmp.w	sl, #0
 8008802:	d024      	beq.n	800884e <__multiply+0xf2>
 8008804:	f104 0e14 	add.w	lr, r4, #20
 8008808:	46a9      	mov	r9, r5
 800880a:	f04f 0c00 	mov.w	ip, #0
 800880e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008812:	f8d9 1000 	ldr.w	r1, [r9]
 8008816:	fa1f fb82 	uxth.w	fp, r2
 800881a:	b289      	uxth	r1, r1
 800881c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008824:	f8d9 2000 	ldr.w	r2, [r9]
 8008828:	4461      	add	r1, ip
 800882a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800882e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008836:	b289      	uxth	r1, r1
 8008838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800883c:	4577      	cmp	r7, lr
 800883e:	f849 1b04 	str.w	r1, [r9], #4
 8008842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008846:	d8e2      	bhi.n	800880e <__multiply+0xb2>
 8008848:	9a01      	ldr	r2, [sp, #4]
 800884a:	f845 c002 	str.w	ip, [r5, r2]
 800884e:	9a03      	ldr	r2, [sp, #12]
 8008850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008854:	3304      	adds	r3, #4
 8008856:	f1b9 0f00 	cmp.w	r9, #0
 800885a:	d020      	beq.n	800889e <__multiply+0x142>
 800885c:	6829      	ldr	r1, [r5, #0]
 800885e:	f104 0c14 	add.w	ip, r4, #20
 8008862:	46ae      	mov	lr, r5
 8008864:	f04f 0a00 	mov.w	sl, #0
 8008868:	f8bc b000 	ldrh.w	fp, [ip]
 800886c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008870:	fb09 220b 	mla	r2, r9, fp, r2
 8008874:	4492      	add	sl, r2
 8008876:	b289      	uxth	r1, r1
 8008878:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800887c:	f84e 1b04 	str.w	r1, [lr], #4
 8008880:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008884:	f8be 1000 	ldrh.w	r1, [lr]
 8008888:	0c12      	lsrs	r2, r2, #16
 800888a:	fb09 1102 	mla	r1, r9, r2, r1
 800888e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008892:	4567      	cmp	r7, ip
 8008894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008898:	d8e6      	bhi.n	8008868 <__multiply+0x10c>
 800889a:	9a01      	ldr	r2, [sp, #4]
 800889c:	50a9      	str	r1, [r5, r2]
 800889e:	3504      	adds	r5, #4
 80088a0:	e79a      	b.n	80087d8 <__multiply+0x7c>
 80088a2:	3e01      	subs	r6, #1
 80088a4:	e79c      	b.n	80087e0 <__multiply+0x84>
 80088a6:	bf00      	nop
 80088a8:	0800b873 	.word	0x0800b873
 80088ac:	0800b884 	.word	0x0800b884

080088b0 <__pow5mult>:
 80088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b4:	4615      	mov	r5, r2
 80088b6:	f012 0203 	ands.w	r2, r2, #3
 80088ba:	4606      	mov	r6, r0
 80088bc:	460f      	mov	r7, r1
 80088be:	d007      	beq.n	80088d0 <__pow5mult+0x20>
 80088c0:	4c25      	ldr	r4, [pc, #148]	; (8008958 <__pow5mult+0xa8>)
 80088c2:	3a01      	subs	r2, #1
 80088c4:	2300      	movs	r3, #0
 80088c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088ca:	f7ff fe9b 	bl	8008604 <__multadd>
 80088ce:	4607      	mov	r7, r0
 80088d0:	10ad      	asrs	r5, r5, #2
 80088d2:	d03d      	beq.n	8008950 <__pow5mult+0xa0>
 80088d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088d6:	b97c      	cbnz	r4, 80088f8 <__pow5mult+0x48>
 80088d8:	2010      	movs	r0, #16
 80088da:	f7ff fe1b 	bl	8008514 <malloc>
 80088de:	4602      	mov	r2, r0
 80088e0:	6270      	str	r0, [r6, #36]	; 0x24
 80088e2:	b928      	cbnz	r0, 80088f0 <__pow5mult+0x40>
 80088e4:	4b1d      	ldr	r3, [pc, #116]	; (800895c <__pow5mult+0xac>)
 80088e6:	481e      	ldr	r0, [pc, #120]	; (8008960 <__pow5mult+0xb0>)
 80088e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80088ec:	f000 fc0e 	bl	800910c <__assert_func>
 80088f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80088f4:	6004      	str	r4, [r0, #0]
 80088f6:	60c4      	str	r4, [r0, #12]
 80088f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80088fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008900:	b94c      	cbnz	r4, 8008916 <__pow5mult+0x66>
 8008902:	f240 2171 	movw	r1, #625	; 0x271
 8008906:	4630      	mov	r0, r6
 8008908:	f7ff ff12 	bl	8008730 <__i2b>
 800890c:	2300      	movs	r3, #0
 800890e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008912:	4604      	mov	r4, r0
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	07eb      	lsls	r3, r5, #31
 800891c:	d50a      	bpl.n	8008934 <__pow5mult+0x84>
 800891e:	4639      	mov	r1, r7
 8008920:	4622      	mov	r2, r4
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff1a 	bl	800875c <__multiply>
 8008928:	4639      	mov	r1, r7
 800892a:	4680      	mov	r8, r0
 800892c:	4630      	mov	r0, r6
 800892e:	f7ff fe47 	bl	80085c0 <_Bfree>
 8008932:	4647      	mov	r7, r8
 8008934:	106d      	asrs	r5, r5, #1
 8008936:	d00b      	beq.n	8008950 <__pow5mult+0xa0>
 8008938:	6820      	ldr	r0, [r4, #0]
 800893a:	b938      	cbnz	r0, 800894c <__pow5mult+0x9c>
 800893c:	4622      	mov	r2, r4
 800893e:	4621      	mov	r1, r4
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff ff0b 	bl	800875c <__multiply>
 8008946:	6020      	str	r0, [r4, #0]
 8008948:	f8c0 9000 	str.w	r9, [r0]
 800894c:	4604      	mov	r4, r0
 800894e:	e7e4      	b.n	800891a <__pow5mult+0x6a>
 8008950:	4638      	mov	r0, r7
 8008952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008956:	bf00      	nop
 8008958:	0800b9d0 	.word	0x0800b9d0
 800895c:	0800b801 	.word	0x0800b801
 8008960:	0800b884 	.word	0x0800b884

08008964 <__lshift>:
 8008964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008968:	460c      	mov	r4, r1
 800896a:	6849      	ldr	r1, [r1, #4]
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	4607      	mov	r7, r0
 8008976:	4691      	mov	r9, r2
 8008978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800897c:	f108 0601 	add.w	r6, r8, #1
 8008980:	42b3      	cmp	r3, r6
 8008982:	db0b      	blt.n	800899c <__lshift+0x38>
 8008984:	4638      	mov	r0, r7
 8008986:	f7ff fddb 	bl	8008540 <_Balloc>
 800898a:	4605      	mov	r5, r0
 800898c:	b948      	cbnz	r0, 80089a2 <__lshift+0x3e>
 800898e:	4602      	mov	r2, r0
 8008990:	4b2a      	ldr	r3, [pc, #168]	; (8008a3c <__lshift+0xd8>)
 8008992:	482b      	ldr	r0, [pc, #172]	; (8008a40 <__lshift+0xdc>)
 8008994:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008998:	f000 fbb8 	bl	800910c <__assert_func>
 800899c:	3101      	adds	r1, #1
 800899e:	005b      	lsls	r3, r3, #1
 80089a0:	e7ee      	b.n	8008980 <__lshift+0x1c>
 80089a2:	2300      	movs	r3, #0
 80089a4:	f100 0114 	add.w	r1, r0, #20
 80089a8:	f100 0210 	add.w	r2, r0, #16
 80089ac:	4618      	mov	r0, r3
 80089ae:	4553      	cmp	r3, sl
 80089b0:	db37      	blt.n	8008a22 <__lshift+0xbe>
 80089b2:	6920      	ldr	r0, [r4, #16]
 80089b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089b8:	f104 0314 	add.w	r3, r4, #20
 80089bc:	f019 091f 	ands.w	r9, r9, #31
 80089c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80089c8:	d02f      	beq.n	8008a2a <__lshift+0xc6>
 80089ca:	f1c9 0e20 	rsb	lr, r9, #32
 80089ce:	468a      	mov	sl, r1
 80089d0:	f04f 0c00 	mov.w	ip, #0
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	fa02 f209 	lsl.w	r2, r2, r9
 80089da:	ea42 020c 	orr.w	r2, r2, ip
 80089de:	f84a 2b04 	str.w	r2, [sl], #4
 80089e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e6:	4298      	cmp	r0, r3
 80089e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80089ec:	d8f2      	bhi.n	80089d4 <__lshift+0x70>
 80089ee:	1b03      	subs	r3, r0, r4
 80089f0:	3b15      	subs	r3, #21
 80089f2:	f023 0303 	bic.w	r3, r3, #3
 80089f6:	3304      	adds	r3, #4
 80089f8:	f104 0215 	add.w	r2, r4, #21
 80089fc:	4290      	cmp	r0, r2
 80089fe:	bf38      	it	cc
 8008a00:	2304      	movcc	r3, #4
 8008a02:	f841 c003 	str.w	ip, [r1, r3]
 8008a06:	f1bc 0f00 	cmp.w	ip, #0
 8008a0a:	d001      	beq.n	8008a10 <__lshift+0xac>
 8008a0c:	f108 0602 	add.w	r6, r8, #2
 8008a10:	3e01      	subs	r6, #1
 8008a12:	4638      	mov	r0, r7
 8008a14:	612e      	str	r6, [r5, #16]
 8008a16:	4621      	mov	r1, r4
 8008a18:	f7ff fdd2 	bl	80085c0 <_Bfree>
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a22:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a26:	3301      	adds	r3, #1
 8008a28:	e7c1      	b.n	80089ae <__lshift+0x4a>
 8008a2a:	3904      	subs	r1, #4
 8008a2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a30:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a34:	4298      	cmp	r0, r3
 8008a36:	d8f9      	bhi.n	8008a2c <__lshift+0xc8>
 8008a38:	e7ea      	b.n	8008a10 <__lshift+0xac>
 8008a3a:	bf00      	nop
 8008a3c:	0800b873 	.word	0x0800b873
 8008a40:	0800b884 	.word	0x0800b884

08008a44 <__mcmp>:
 8008a44:	b530      	push	{r4, r5, lr}
 8008a46:	6902      	ldr	r2, [r0, #16]
 8008a48:	690c      	ldr	r4, [r1, #16]
 8008a4a:	1b12      	subs	r2, r2, r4
 8008a4c:	d10e      	bne.n	8008a6c <__mcmp+0x28>
 8008a4e:	f100 0314 	add.w	r3, r0, #20
 8008a52:	3114      	adds	r1, #20
 8008a54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a64:	42a5      	cmp	r5, r4
 8008a66:	d003      	beq.n	8008a70 <__mcmp+0x2c>
 8008a68:	d305      	bcc.n	8008a76 <__mcmp+0x32>
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	4610      	mov	r0, r2
 8008a6e:	bd30      	pop	{r4, r5, pc}
 8008a70:	4283      	cmp	r3, r0
 8008a72:	d3f3      	bcc.n	8008a5c <__mcmp+0x18>
 8008a74:	e7fa      	b.n	8008a6c <__mcmp+0x28>
 8008a76:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7a:	e7f7      	b.n	8008a6c <__mcmp+0x28>

08008a7c <__mdiff>:
 8008a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	460c      	mov	r4, r1
 8008a82:	4606      	mov	r6, r0
 8008a84:	4611      	mov	r1, r2
 8008a86:	4620      	mov	r0, r4
 8008a88:	4690      	mov	r8, r2
 8008a8a:	f7ff ffdb 	bl	8008a44 <__mcmp>
 8008a8e:	1e05      	subs	r5, r0, #0
 8008a90:	d110      	bne.n	8008ab4 <__mdiff+0x38>
 8008a92:	4629      	mov	r1, r5
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff fd53 	bl	8008540 <_Balloc>
 8008a9a:	b930      	cbnz	r0, 8008aaa <__mdiff+0x2e>
 8008a9c:	4b3a      	ldr	r3, [pc, #232]	; (8008b88 <__mdiff+0x10c>)
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	f240 2132 	movw	r1, #562	; 0x232
 8008aa4:	4839      	ldr	r0, [pc, #228]	; (8008b8c <__mdiff+0x110>)
 8008aa6:	f000 fb31 	bl	800910c <__assert_func>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	bfa4      	itt	ge
 8008ab6:	4643      	movge	r3, r8
 8008ab8:	46a0      	movge	r8, r4
 8008aba:	4630      	mov	r0, r6
 8008abc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008ac0:	bfa6      	itte	ge
 8008ac2:	461c      	movge	r4, r3
 8008ac4:	2500      	movge	r5, #0
 8008ac6:	2501      	movlt	r5, #1
 8008ac8:	f7ff fd3a 	bl	8008540 <_Balloc>
 8008acc:	b920      	cbnz	r0, 8008ad8 <__mdiff+0x5c>
 8008ace:	4b2e      	ldr	r3, [pc, #184]	; (8008b88 <__mdiff+0x10c>)
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ad6:	e7e5      	b.n	8008aa4 <__mdiff+0x28>
 8008ad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008adc:	6926      	ldr	r6, [r4, #16]
 8008ade:	60c5      	str	r5, [r0, #12]
 8008ae0:	f104 0914 	add.w	r9, r4, #20
 8008ae4:	f108 0514 	add.w	r5, r8, #20
 8008ae8:	f100 0e14 	add.w	lr, r0, #20
 8008aec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008af0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008af4:	f108 0210 	add.w	r2, r8, #16
 8008af8:	46f2      	mov	sl, lr
 8008afa:	2100      	movs	r1, #0
 8008afc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b04:	fa1f f883 	uxth.w	r8, r3
 8008b08:	fa11 f18b 	uxtah	r1, r1, fp
 8008b0c:	0c1b      	lsrs	r3, r3, #16
 8008b0e:	eba1 0808 	sub.w	r8, r1, r8
 8008b12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b1a:	fa1f f888 	uxth.w	r8, r8
 8008b1e:	1419      	asrs	r1, r3, #16
 8008b20:	454e      	cmp	r6, r9
 8008b22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b26:	f84a 3b04 	str.w	r3, [sl], #4
 8008b2a:	d8e7      	bhi.n	8008afc <__mdiff+0x80>
 8008b2c:	1b33      	subs	r3, r6, r4
 8008b2e:	3b15      	subs	r3, #21
 8008b30:	f023 0303 	bic.w	r3, r3, #3
 8008b34:	3304      	adds	r3, #4
 8008b36:	3415      	adds	r4, #21
 8008b38:	42a6      	cmp	r6, r4
 8008b3a:	bf38      	it	cc
 8008b3c:	2304      	movcc	r3, #4
 8008b3e:	441d      	add	r5, r3
 8008b40:	4473      	add	r3, lr
 8008b42:	469e      	mov	lr, r3
 8008b44:	462e      	mov	r6, r5
 8008b46:	4566      	cmp	r6, ip
 8008b48:	d30e      	bcc.n	8008b68 <__mdiff+0xec>
 8008b4a:	f10c 0203 	add.w	r2, ip, #3
 8008b4e:	1b52      	subs	r2, r2, r5
 8008b50:	f022 0203 	bic.w	r2, r2, #3
 8008b54:	3d03      	subs	r5, #3
 8008b56:	45ac      	cmp	ip, r5
 8008b58:	bf38      	it	cc
 8008b5a:	2200      	movcc	r2, #0
 8008b5c:	441a      	add	r2, r3
 8008b5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b62:	b17b      	cbz	r3, 8008b84 <__mdiff+0x108>
 8008b64:	6107      	str	r7, [r0, #16]
 8008b66:	e7a3      	b.n	8008ab0 <__mdiff+0x34>
 8008b68:	f856 8b04 	ldr.w	r8, [r6], #4
 8008b6c:	fa11 f288 	uxtah	r2, r1, r8
 8008b70:	1414      	asrs	r4, r2, #16
 8008b72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008b76:	b292      	uxth	r2, r2
 8008b78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008b7c:	f84e 2b04 	str.w	r2, [lr], #4
 8008b80:	1421      	asrs	r1, r4, #16
 8008b82:	e7e0      	b.n	8008b46 <__mdiff+0xca>
 8008b84:	3f01      	subs	r7, #1
 8008b86:	e7ea      	b.n	8008b5e <__mdiff+0xe2>
 8008b88:	0800b873 	.word	0x0800b873
 8008b8c:	0800b884 	.word	0x0800b884

08008b90 <__d2b>:
 8008b90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b94:	4689      	mov	r9, r1
 8008b96:	2101      	movs	r1, #1
 8008b98:	ec57 6b10 	vmov	r6, r7, d0
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	f7ff fccf 	bl	8008540 <_Balloc>
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	b930      	cbnz	r0, 8008bb4 <__d2b+0x24>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b25      	ldr	r3, [pc, #148]	; (8008c40 <__d2b+0xb0>)
 8008baa:	4826      	ldr	r0, [pc, #152]	; (8008c44 <__d2b+0xb4>)
 8008bac:	f240 310a 	movw	r1, #778	; 0x30a
 8008bb0:	f000 faac 	bl	800910c <__assert_func>
 8008bb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008bb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bbc:	bb35      	cbnz	r5, 8008c0c <__d2b+0x7c>
 8008bbe:	2e00      	cmp	r6, #0
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	d028      	beq.n	8008c16 <__d2b+0x86>
 8008bc4:	4668      	mov	r0, sp
 8008bc6:	9600      	str	r6, [sp, #0]
 8008bc8:	f7ff fd82 	bl	80086d0 <__lo0bits>
 8008bcc:	9900      	ldr	r1, [sp, #0]
 8008bce:	b300      	cbz	r0, 8008c12 <__d2b+0x82>
 8008bd0:	9a01      	ldr	r2, [sp, #4]
 8008bd2:	f1c0 0320 	rsb	r3, r0, #32
 8008bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	40c2      	lsrs	r2, r0
 8008bde:	6163      	str	r3, [r4, #20]
 8008be0:	9201      	str	r2, [sp, #4]
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	61a3      	str	r3, [r4, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf14      	ite	ne
 8008bea:	2202      	movne	r2, #2
 8008bec:	2201      	moveq	r2, #1
 8008bee:	6122      	str	r2, [r4, #16]
 8008bf0:	b1d5      	cbz	r5, 8008c28 <__d2b+0x98>
 8008bf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008bf6:	4405      	add	r5, r0
 8008bf8:	f8c9 5000 	str.w	r5, [r9]
 8008bfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008c00:	f8c8 0000 	str.w	r0, [r8]
 8008c04:	4620      	mov	r0, r4
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c10:	e7d5      	b.n	8008bbe <__d2b+0x2e>
 8008c12:	6161      	str	r1, [r4, #20]
 8008c14:	e7e5      	b.n	8008be2 <__d2b+0x52>
 8008c16:	a801      	add	r0, sp, #4
 8008c18:	f7ff fd5a 	bl	80086d0 <__lo0bits>
 8008c1c:	9b01      	ldr	r3, [sp, #4]
 8008c1e:	6163      	str	r3, [r4, #20]
 8008c20:	2201      	movs	r2, #1
 8008c22:	6122      	str	r2, [r4, #16]
 8008c24:	3020      	adds	r0, #32
 8008c26:	e7e3      	b.n	8008bf0 <__d2b+0x60>
 8008c28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008c30:	f8c9 0000 	str.w	r0, [r9]
 8008c34:	6918      	ldr	r0, [r3, #16]
 8008c36:	f7ff fd2b 	bl	8008690 <__hi0bits>
 8008c3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c3e:	e7df      	b.n	8008c00 <__d2b+0x70>
 8008c40:	0800b873 	.word	0x0800b873
 8008c44:	0800b884 	.word	0x0800b884

08008c48 <_calloc_r>:
 8008c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c4a:	fba1 2402 	umull	r2, r4, r1, r2
 8008c4e:	b94c      	cbnz	r4, 8008c64 <_calloc_r+0x1c>
 8008c50:	4611      	mov	r1, r2
 8008c52:	9201      	str	r2, [sp, #4]
 8008c54:	f000 f87a 	bl	8008d4c <_malloc_r>
 8008c58:	9a01      	ldr	r2, [sp, #4]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	b930      	cbnz	r0, 8008c6c <_calloc_r+0x24>
 8008c5e:	4628      	mov	r0, r5
 8008c60:	b003      	add	sp, #12
 8008c62:	bd30      	pop	{r4, r5, pc}
 8008c64:	220c      	movs	r2, #12
 8008c66:	6002      	str	r2, [r0, #0]
 8008c68:	2500      	movs	r5, #0
 8008c6a:	e7f8      	b.n	8008c5e <_calloc_r+0x16>
 8008c6c:	4621      	mov	r1, r4
 8008c6e:	f7fe f941 	bl	8006ef4 <memset>
 8008c72:	e7f4      	b.n	8008c5e <_calloc_r+0x16>

08008c74 <_free_r>:
 8008c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008c76:	2900      	cmp	r1, #0
 8008c78:	d044      	beq.n	8008d04 <_free_r+0x90>
 8008c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7e:	9001      	str	r0, [sp, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f1a1 0404 	sub.w	r4, r1, #4
 8008c86:	bfb8      	it	lt
 8008c88:	18e4      	addlt	r4, r4, r3
 8008c8a:	f000 fa9b 	bl	80091c4 <__malloc_lock>
 8008c8e:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <_free_r+0x94>)
 8008c90:	9801      	ldr	r0, [sp, #4]
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	b933      	cbnz	r3, 8008ca4 <_free_r+0x30>
 8008c96:	6063      	str	r3, [r4, #4]
 8008c98:	6014      	str	r4, [r2, #0]
 8008c9a:	b003      	add	sp, #12
 8008c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ca0:	f000 ba96 	b.w	80091d0 <__malloc_unlock>
 8008ca4:	42a3      	cmp	r3, r4
 8008ca6:	d908      	bls.n	8008cba <_free_r+0x46>
 8008ca8:	6825      	ldr	r5, [r4, #0]
 8008caa:	1961      	adds	r1, r4, r5
 8008cac:	428b      	cmp	r3, r1
 8008cae:	bf01      	itttt	eq
 8008cb0:	6819      	ldreq	r1, [r3, #0]
 8008cb2:	685b      	ldreq	r3, [r3, #4]
 8008cb4:	1949      	addeq	r1, r1, r5
 8008cb6:	6021      	streq	r1, [r4, #0]
 8008cb8:	e7ed      	b.n	8008c96 <_free_r+0x22>
 8008cba:	461a      	mov	r2, r3
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b10b      	cbz	r3, 8008cc4 <_free_r+0x50>
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	d9fa      	bls.n	8008cba <_free_r+0x46>
 8008cc4:	6811      	ldr	r1, [r2, #0]
 8008cc6:	1855      	adds	r5, r2, r1
 8008cc8:	42a5      	cmp	r5, r4
 8008cca:	d10b      	bne.n	8008ce4 <_free_r+0x70>
 8008ccc:	6824      	ldr	r4, [r4, #0]
 8008cce:	4421      	add	r1, r4
 8008cd0:	1854      	adds	r4, r2, r1
 8008cd2:	42a3      	cmp	r3, r4
 8008cd4:	6011      	str	r1, [r2, #0]
 8008cd6:	d1e0      	bne.n	8008c9a <_free_r+0x26>
 8008cd8:	681c      	ldr	r4, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	6053      	str	r3, [r2, #4]
 8008cde:	4421      	add	r1, r4
 8008ce0:	6011      	str	r1, [r2, #0]
 8008ce2:	e7da      	b.n	8008c9a <_free_r+0x26>
 8008ce4:	d902      	bls.n	8008cec <_free_r+0x78>
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	e7d6      	b.n	8008c9a <_free_r+0x26>
 8008cec:	6825      	ldr	r5, [r4, #0]
 8008cee:	1961      	adds	r1, r4, r5
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	bf04      	itt	eq
 8008cf4:	6819      	ldreq	r1, [r3, #0]
 8008cf6:	685b      	ldreq	r3, [r3, #4]
 8008cf8:	6063      	str	r3, [r4, #4]
 8008cfa:	bf04      	itt	eq
 8008cfc:	1949      	addeq	r1, r1, r5
 8008cfe:	6021      	streq	r1, [r4, #0]
 8008d00:	6054      	str	r4, [r2, #4]
 8008d02:	e7ca      	b.n	8008c9a <_free_r+0x26>
 8008d04:	b003      	add	sp, #12
 8008d06:	bd30      	pop	{r4, r5, pc}
 8008d08:	200002a0 	.word	0x200002a0

08008d0c <sbrk_aligned>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4e0e      	ldr	r6, [pc, #56]	; (8008d48 <sbrk_aligned+0x3c>)
 8008d10:	460c      	mov	r4, r1
 8008d12:	6831      	ldr	r1, [r6, #0]
 8008d14:	4605      	mov	r5, r0
 8008d16:	b911      	cbnz	r1, 8008d1e <sbrk_aligned+0x12>
 8008d18:	f000 f9e8 	bl	80090ec <_sbrk_r>
 8008d1c:	6030      	str	r0, [r6, #0]
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 f9e3 	bl	80090ec <_sbrk_r>
 8008d26:	1c43      	adds	r3, r0, #1
 8008d28:	d00a      	beq.n	8008d40 <sbrk_aligned+0x34>
 8008d2a:	1cc4      	adds	r4, r0, #3
 8008d2c:	f024 0403 	bic.w	r4, r4, #3
 8008d30:	42a0      	cmp	r0, r4
 8008d32:	d007      	beq.n	8008d44 <sbrk_aligned+0x38>
 8008d34:	1a21      	subs	r1, r4, r0
 8008d36:	4628      	mov	r0, r5
 8008d38:	f000 f9d8 	bl	80090ec <_sbrk_r>
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	d101      	bne.n	8008d44 <sbrk_aligned+0x38>
 8008d40:	f04f 34ff 	mov.w	r4, #4294967295
 8008d44:	4620      	mov	r0, r4
 8008d46:	bd70      	pop	{r4, r5, r6, pc}
 8008d48:	200002a4 	.word	0x200002a4

08008d4c <_malloc_r>:
 8008d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d50:	1ccd      	adds	r5, r1, #3
 8008d52:	f025 0503 	bic.w	r5, r5, #3
 8008d56:	3508      	adds	r5, #8
 8008d58:	2d0c      	cmp	r5, #12
 8008d5a:	bf38      	it	cc
 8008d5c:	250c      	movcc	r5, #12
 8008d5e:	2d00      	cmp	r5, #0
 8008d60:	4607      	mov	r7, r0
 8008d62:	db01      	blt.n	8008d68 <_malloc_r+0x1c>
 8008d64:	42a9      	cmp	r1, r5
 8008d66:	d905      	bls.n	8008d74 <_malloc_r+0x28>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	2600      	movs	r6, #0
 8008d6e:	4630      	mov	r0, r6
 8008d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d74:	4e2e      	ldr	r6, [pc, #184]	; (8008e30 <_malloc_r+0xe4>)
 8008d76:	f000 fa25 	bl	80091c4 <__malloc_lock>
 8008d7a:	6833      	ldr	r3, [r6, #0]
 8008d7c:	461c      	mov	r4, r3
 8008d7e:	bb34      	cbnz	r4, 8008dce <_malloc_r+0x82>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4638      	mov	r0, r7
 8008d84:	f7ff ffc2 	bl	8008d0c <sbrk_aligned>
 8008d88:	1c43      	adds	r3, r0, #1
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	d14d      	bne.n	8008e2a <_malloc_r+0xde>
 8008d8e:	6834      	ldr	r4, [r6, #0]
 8008d90:	4626      	mov	r6, r4
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	d140      	bne.n	8008e18 <_malloc_r+0xcc>
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	4631      	mov	r1, r6
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	eb04 0803 	add.w	r8, r4, r3
 8008da0:	f000 f9a4 	bl	80090ec <_sbrk_r>
 8008da4:	4580      	cmp	r8, r0
 8008da6:	d13a      	bne.n	8008e1e <_malloc_r+0xd2>
 8008da8:	6821      	ldr	r1, [r4, #0]
 8008daa:	3503      	adds	r5, #3
 8008dac:	1a6d      	subs	r5, r5, r1
 8008dae:	f025 0503 	bic.w	r5, r5, #3
 8008db2:	3508      	adds	r5, #8
 8008db4:	2d0c      	cmp	r5, #12
 8008db6:	bf38      	it	cc
 8008db8:	250c      	movcc	r5, #12
 8008dba:	4629      	mov	r1, r5
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	f7ff ffa5 	bl	8008d0c <sbrk_aligned>
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d02b      	beq.n	8008e1e <_malloc_r+0xd2>
 8008dc6:	6823      	ldr	r3, [r4, #0]
 8008dc8:	442b      	add	r3, r5
 8008dca:	6023      	str	r3, [r4, #0]
 8008dcc:	e00e      	b.n	8008dec <_malloc_r+0xa0>
 8008dce:	6822      	ldr	r2, [r4, #0]
 8008dd0:	1b52      	subs	r2, r2, r5
 8008dd2:	d41e      	bmi.n	8008e12 <_malloc_r+0xc6>
 8008dd4:	2a0b      	cmp	r2, #11
 8008dd6:	d916      	bls.n	8008e06 <_malloc_r+0xba>
 8008dd8:	1961      	adds	r1, r4, r5
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	6025      	str	r5, [r4, #0]
 8008dde:	bf18      	it	ne
 8008de0:	6059      	strne	r1, [r3, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	bf08      	it	eq
 8008de6:	6031      	streq	r1, [r6, #0]
 8008de8:	5162      	str	r2, [r4, r5]
 8008dea:	604b      	str	r3, [r1, #4]
 8008dec:	4638      	mov	r0, r7
 8008dee:	f104 060b 	add.w	r6, r4, #11
 8008df2:	f000 f9ed 	bl	80091d0 <__malloc_unlock>
 8008df6:	f026 0607 	bic.w	r6, r6, #7
 8008dfa:	1d23      	adds	r3, r4, #4
 8008dfc:	1af2      	subs	r2, r6, r3
 8008dfe:	d0b6      	beq.n	8008d6e <_malloc_r+0x22>
 8008e00:	1b9b      	subs	r3, r3, r6
 8008e02:	50a3      	str	r3, [r4, r2]
 8008e04:	e7b3      	b.n	8008d6e <_malloc_r+0x22>
 8008e06:	6862      	ldr	r2, [r4, #4]
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	bf0c      	ite	eq
 8008e0c:	6032      	streq	r2, [r6, #0]
 8008e0e:	605a      	strne	r2, [r3, #4]
 8008e10:	e7ec      	b.n	8008dec <_malloc_r+0xa0>
 8008e12:	4623      	mov	r3, r4
 8008e14:	6864      	ldr	r4, [r4, #4]
 8008e16:	e7b2      	b.n	8008d7e <_malloc_r+0x32>
 8008e18:	4634      	mov	r4, r6
 8008e1a:	6876      	ldr	r6, [r6, #4]
 8008e1c:	e7b9      	b.n	8008d92 <_malloc_r+0x46>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	603b      	str	r3, [r7, #0]
 8008e22:	4638      	mov	r0, r7
 8008e24:	f000 f9d4 	bl	80091d0 <__malloc_unlock>
 8008e28:	e7a1      	b.n	8008d6e <_malloc_r+0x22>
 8008e2a:	6025      	str	r5, [r4, #0]
 8008e2c:	e7de      	b.n	8008dec <_malloc_r+0xa0>
 8008e2e:	bf00      	nop
 8008e30:	200002a0 	.word	0x200002a0

08008e34 <__ssputs_r>:
 8008e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e38:	688e      	ldr	r6, [r1, #8]
 8008e3a:	429e      	cmp	r6, r3
 8008e3c:	4682      	mov	sl, r0
 8008e3e:	460c      	mov	r4, r1
 8008e40:	4690      	mov	r8, r2
 8008e42:	461f      	mov	r7, r3
 8008e44:	d838      	bhi.n	8008eb8 <__ssputs_r+0x84>
 8008e46:	898a      	ldrh	r2, [r1, #12]
 8008e48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e4c:	d032      	beq.n	8008eb4 <__ssputs_r+0x80>
 8008e4e:	6825      	ldr	r5, [r4, #0]
 8008e50:	6909      	ldr	r1, [r1, #16]
 8008e52:	eba5 0901 	sub.w	r9, r5, r1
 8008e56:	6965      	ldr	r5, [r4, #20]
 8008e58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e60:	3301      	adds	r3, #1
 8008e62:	444b      	add	r3, r9
 8008e64:	106d      	asrs	r5, r5, #1
 8008e66:	429d      	cmp	r5, r3
 8008e68:	bf38      	it	cc
 8008e6a:	461d      	movcc	r5, r3
 8008e6c:	0553      	lsls	r3, r2, #21
 8008e6e:	d531      	bpl.n	8008ed4 <__ssputs_r+0xa0>
 8008e70:	4629      	mov	r1, r5
 8008e72:	f7ff ff6b 	bl	8008d4c <_malloc_r>
 8008e76:	4606      	mov	r6, r0
 8008e78:	b950      	cbnz	r0, 8008e90 <__ssputs_r+0x5c>
 8008e7a:	230c      	movs	r3, #12
 8008e7c:	f8ca 3000 	str.w	r3, [sl]
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e90:	6921      	ldr	r1, [r4, #16]
 8008e92:	464a      	mov	r2, r9
 8008e94:	f7ff fb46 	bl	8008524 <memcpy>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	6126      	str	r6, [r4, #16]
 8008ea6:	6165      	str	r5, [r4, #20]
 8008ea8:	444e      	add	r6, r9
 8008eaa:	eba5 0509 	sub.w	r5, r5, r9
 8008eae:	6026      	str	r6, [r4, #0]
 8008eb0:	60a5      	str	r5, [r4, #8]
 8008eb2:	463e      	mov	r6, r7
 8008eb4:	42be      	cmp	r6, r7
 8008eb6:	d900      	bls.n	8008eba <__ssputs_r+0x86>
 8008eb8:	463e      	mov	r6, r7
 8008eba:	6820      	ldr	r0, [r4, #0]
 8008ebc:	4632      	mov	r2, r6
 8008ebe:	4641      	mov	r1, r8
 8008ec0:	f000 f966 	bl	8009190 <memmove>
 8008ec4:	68a3      	ldr	r3, [r4, #8]
 8008ec6:	1b9b      	subs	r3, r3, r6
 8008ec8:	60a3      	str	r3, [r4, #8]
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	4433      	add	r3, r6
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7db      	b.n	8008e8c <__ssputs_r+0x58>
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	f000 f981 	bl	80091dc <_realloc_r>
 8008eda:	4606      	mov	r6, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d1e1      	bne.n	8008ea4 <__ssputs_r+0x70>
 8008ee0:	6921      	ldr	r1, [r4, #16]
 8008ee2:	4650      	mov	r0, sl
 8008ee4:	f7ff fec6 	bl	8008c74 <_free_r>
 8008ee8:	e7c7      	b.n	8008e7a <__ssputs_r+0x46>
	...

08008eec <_svfiprintf_r>:
 8008eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef0:	4698      	mov	r8, r3
 8008ef2:	898b      	ldrh	r3, [r1, #12]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	b09d      	sub	sp, #116	; 0x74
 8008ef8:	4607      	mov	r7, r0
 8008efa:	460d      	mov	r5, r1
 8008efc:	4614      	mov	r4, r2
 8008efe:	d50e      	bpl.n	8008f1e <_svfiprintf_r+0x32>
 8008f00:	690b      	ldr	r3, [r1, #16]
 8008f02:	b963      	cbnz	r3, 8008f1e <_svfiprintf_r+0x32>
 8008f04:	2140      	movs	r1, #64	; 0x40
 8008f06:	f7ff ff21 	bl	8008d4c <_malloc_r>
 8008f0a:	6028      	str	r0, [r5, #0]
 8008f0c:	6128      	str	r0, [r5, #16]
 8008f0e:	b920      	cbnz	r0, 8008f1a <_svfiprintf_r+0x2e>
 8008f10:	230c      	movs	r3, #12
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e0d1      	b.n	80090be <_svfiprintf_r+0x1d2>
 8008f1a:	2340      	movs	r3, #64	; 0x40
 8008f1c:	616b      	str	r3, [r5, #20]
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9309      	str	r3, [sp, #36]	; 0x24
 8008f22:	2320      	movs	r3, #32
 8008f24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2c:	2330      	movs	r3, #48	; 0x30
 8008f2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80090d8 <_svfiprintf_r+0x1ec>
 8008f32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f36:	f04f 0901 	mov.w	r9, #1
 8008f3a:	4623      	mov	r3, r4
 8008f3c:	469a      	mov	sl, r3
 8008f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f42:	b10a      	cbz	r2, 8008f48 <_svfiprintf_r+0x5c>
 8008f44:	2a25      	cmp	r2, #37	; 0x25
 8008f46:	d1f9      	bne.n	8008f3c <_svfiprintf_r+0x50>
 8008f48:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4c:	d00b      	beq.n	8008f66 <_svfiprintf_r+0x7a>
 8008f4e:	465b      	mov	r3, fp
 8008f50:	4622      	mov	r2, r4
 8008f52:	4629      	mov	r1, r5
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff ff6d 	bl	8008e34 <__ssputs_r>
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f000 80aa 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f62:	445a      	add	r2, fp
 8008f64:	9209      	str	r2, [sp, #36]	; 0x24
 8008f66:	f89a 3000 	ldrb.w	r3, [sl]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 80a2 	beq.w	80090b4 <_svfiprintf_r+0x1c8>
 8008f70:	2300      	movs	r3, #0
 8008f72:	f04f 32ff 	mov.w	r2, #4294967295
 8008f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f7a:	f10a 0a01 	add.w	sl, sl, #1
 8008f7e:	9304      	str	r3, [sp, #16]
 8008f80:	9307      	str	r3, [sp, #28]
 8008f82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f86:	931a      	str	r3, [sp, #104]	; 0x68
 8008f88:	4654      	mov	r4, sl
 8008f8a:	2205      	movs	r2, #5
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	4851      	ldr	r0, [pc, #324]	; (80090d8 <_svfiprintf_r+0x1ec>)
 8008f92:	f7f7 f92d 	bl	80001f0 <memchr>
 8008f96:	9a04      	ldr	r2, [sp, #16]
 8008f98:	b9d8      	cbnz	r0, 8008fd2 <_svfiprintf_r+0xe6>
 8008f9a:	06d0      	lsls	r0, r2, #27
 8008f9c:	bf44      	itt	mi
 8008f9e:	2320      	movmi	r3, #32
 8008fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa4:	0711      	lsls	r1, r2, #28
 8008fa6:	bf44      	itt	mi
 8008fa8:	232b      	movmi	r3, #43	; 0x2b
 8008faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fae:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb2:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb4:	d015      	beq.n	8008fe2 <_svfiprintf_r+0xf6>
 8008fb6:	9a07      	ldr	r2, [sp, #28]
 8008fb8:	4654      	mov	r4, sl
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f04f 0c0a 	mov.w	ip, #10
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc6:	3b30      	subs	r3, #48	; 0x30
 8008fc8:	2b09      	cmp	r3, #9
 8008fca:	d94e      	bls.n	800906a <_svfiprintf_r+0x17e>
 8008fcc:	b1b0      	cbz	r0, 8008ffc <_svfiprintf_r+0x110>
 8008fce:	9207      	str	r2, [sp, #28]
 8008fd0:	e014      	b.n	8008ffc <_svfiprintf_r+0x110>
 8008fd2:	eba0 0308 	sub.w	r3, r0, r8
 8008fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	9304      	str	r3, [sp, #16]
 8008fde:	46a2      	mov	sl, r4
 8008fe0:	e7d2      	b.n	8008f88 <_svfiprintf_r+0x9c>
 8008fe2:	9b03      	ldr	r3, [sp, #12]
 8008fe4:	1d19      	adds	r1, r3, #4
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	9103      	str	r1, [sp, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	bfbb      	ittet	lt
 8008fee:	425b      	neglt	r3, r3
 8008ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff4:	9307      	strge	r3, [sp, #28]
 8008ff6:	9307      	strlt	r3, [sp, #28]
 8008ff8:	bfb8      	it	lt
 8008ffa:	9204      	strlt	r2, [sp, #16]
 8008ffc:	7823      	ldrb	r3, [r4, #0]
 8008ffe:	2b2e      	cmp	r3, #46	; 0x2e
 8009000:	d10c      	bne.n	800901c <_svfiprintf_r+0x130>
 8009002:	7863      	ldrb	r3, [r4, #1]
 8009004:	2b2a      	cmp	r3, #42	; 0x2a
 8009006:	d135      	bne.n	8009074 <_svfiprintf_r+0x188>
 8009008:	9b03      	ldr	r3, [sp, #12]
 800900a:	1d1a      	adds	r2, r3, #4
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	9203      	str	r2, [sp, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfb8      	it	lt
 8009014:	f04f 33ff 	movlt.w	r3, #4294967295
 8009018:	3402      	adds	r4, #2
 800901a:	9305      	str	r3, [sp, #20]
 800901c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80090e8 <_svfiprintf_r+0x1fc>
 8009020:	7821      	ldrb	r1, [r4, #0]
 8009022:	2203      	movs	r2, #3
 8009024:	4650      	mov	r0, sl
 8009026:	f7f7 f8e3 	bl	80001f0 <memchr>
 800902a:	b140      	cbz	r0, 800903e <_svfiprintf_r+0x152>
 800902c:	2340      	movs	r3, #64	; 0x40
 800902e:	eba0 000a 	sub.w	r0, r0, sl
 8009032:	fa03 f000 	lsl.w	r0, r3, r0
 8009036:	9b04      	ldr	r3, [sp, #16]
 8009038:	4303      	orrs	r3, r0
 800903a:	3401      	adds	r4, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009042:	4826      	ldr	r0, [pc, #152]	; (80090dc <_svfiprintf_r+0x1f0>)
 8009044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009048:	2206      	movs	r2, #6
 800904a:	f7f7 f8d1 	bl	80001f0 <memchr>
 800904e:	2800      	cmp	r0, #0
 8009050:	d038      	beq.n	80090c4 <_svfiprintf_r+0x1d8>
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <_svfiprintf_r+0x1f4>)
 8009054:	bb1b      	cbnz	r3, 800909e <_svfiprintf_r+0x1b2>
 8009056:	9b03      	ldr	r3, [sp, #12]
 8009058:	3307      	adds	r3, #7
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	3308      	adds	r3, #8
 8009060:	9303      	str	r3, [sp, #12]
 8009062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009064:	4433      	add	r3, r6
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	e767      	b.n	8008f3a <_svfiprintf_r+0x4e>
 800906a:	fb0c 3202 	mla	r2, ip, r2, r3
 800906e:	460c      	mov	r4, r1
 8009070:	2001      	movs	r0, #1
 8009072:	e7a5      	b.n	8008fc0 <_svfiprintf_r+0xd4>
 8009074:	2300      	movs	r3, #0
 8009076:	3401      	adds	r4, #1
 8009078:	9305      	str	r3, [sp, #20]
 800907a:	4619      	mov	r1, r3
 800907c:	f04f 0c0a 	mov.w	ip, #10
 8009080:	4620      	mov	r0, r4
 8009082:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009086:	3a30      	subs	r2, #48	; 0x30
 8009088:	2a09      	cmp	r2, #9
 800908a:	d903      	bls.n	8009094 <_svfiprintf_r+0x1a8>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0c5      	beq.n	800901c <_svfiprintf_r+0x130>
 8009090:	9105      	str	r1, [sp, #20]
 8009092:	e7c3      	b.n	800901c <_svfiprintf_r+0x130>
 8009094:	fb0c 2101 	mla	r1, ip, r1, r2
 8009098:	4604      	mov	r4, r0
 800909a:	2301      	movs	r3, #1
 800909c:	e7f0      	b.n	8009080 <_svfiprintf_r+0x194>
 800909e:	ab03      	add	r3, sp, #12
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	462a      	mov	r2, r5
 80090a4:	4b0f      	ldr	r3, [pc, #60]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090a6:	a904      	add	r1, sp, #16
 80090a8:	4638      	mov	r0, r7
 80090aa:	f7fd ffcb 	bl	8007044 <_printf_float>
 80090ae:	1c42      	adds	r2, r0, #1
 80090b0:	4606      	mov	r6, r0
 80090b2:	d1d6      	bne.n	8009062 <_svfiprintf_r+0x176>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	065b      	lsls	r3, r3, #25
 80090b8:	f53f af2c 	bmi.w	8008f14 <_svfiprintf_r+0x28>
 80090bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090be:	b01d      	add	sp, #116	; 0x74
 80090c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	ab03      	add	r3, sp, #12
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <_svfiprintf_r+0x1f8>)
 80090cc:	a904      	add	r1, sp, #16
 80090ce:	4638      	mov	r0, r7
 80090d0:	f7fe fa5c 	bl	800758c <_printf_i>
 80090d4:	e7eb      	b.n	80090ae <_svfiprintf_r+0x1c2>
 80090d6:	bf00      	nop
 80090d8:	0800b9dc 	.word	0x0800b9dc
 80090dc:	0800b9e6 	.word	0x0800b9e6
 80090e0:	08007045 	.word	0x08007045
 80090e4:	08008e35 	.word	0x08008e35
 80090e8:	0800b9e2 	.word	0x0800b9e2

080090ec <_sbrk_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d06      	ldr	r5, [pc, #24]	; (8009108 <_sbrk_r+0x1c>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	f001 febc 	bl	800ae74 <_sbrk>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_sbrk_r+0x1a>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_sbrk_r+0x1a>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	200002a8 	.word	0x200002a8

0800910c <__assert_func>:
 800910c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800910e:	4614      	mov	r4, r2
 8009110:	461a      	mov	r2, r3
 8009112:	4b09      	ldr	r3, [pc, #36]	; (8009138 <__assert_func+0x2c>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4605      	mov	r5, r0
 8009118:	68d8      	ldr	r0, [r3, #12]
 800911a:	b14c      	cbz	r4, 8009130 <__assert_func+0x24>
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <__assert_func+0x30>)
 800911e:	9100      	str	r1, [sp, #0]
 8009120:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009124:	4906      	ldr	r1, [pc, #24]	; (8009140 <__assert_func+0x34>)
 8009126:	462b      	mov	r3, r5
 8009128:	f000 f80e 	bl	8009148 <fiprintf>
 800912c:	f000 faac 	bl	8009688 <abort>
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <__assert_func+0x38>)
 8009132:	461c      	mov	r4, r3
 8009134:	e7f3      	b.n	800911e <__assert_func+0x12>
 8009136:	bf00      	nop
 8009138:	20000050 	.word	0x20000050
 800913c:	0800b9ed 	.word	0x0800b9ed
 8009140:	0800b9fa 	.word	0x0800b9fa
 8009144:	0800ba28 	.word	0x0800ba28

08009148 <fiprintf>:
 8009148:	b40e      	push	{r1, r2, r3}
 800914a:	b503      	push	{r0, r1, lr}
 800914c:	4601      	mov	r1, r0
 800914e:	ab03      	add	r3, sp, #12
 8009150:	4805      	ldr	r0, [pc, #20]	; (8009168 <fiprintf+0x20>)
 8009152:	f853 2b04 	ldr.w	r2, [r3], #4
 8009156:	6800      	ldr	r0, [r0, #0]
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f000 f897 	bl	800928c <_vfiprintf_r>
 800915e:	b002      	add	sp, #8
 8009160:	f85d eb04 	ldr.w	lr, [sp], #4
 8009164:	b003      	add	sp, #12
 8009166:	4770      	bx	lr
 8009168:	20000050 	.word	0x20000050

0800916c <__ascii_mbtowc>:
 800916c:	b082      	sub	sp, #8
 800916e:	b901      	cbnz	r1, 8009172 <__ascii_mbtowc+0x6>
 8009170:	a901      	add	r1, sp, #4
 8009172:	b142      	cbz	r2, 8009186 <__ascii_mbtowc+0x1a>
 8009174:	b14b      	cbz	r3, 800918a <__ascii_mbtowc+0x1e>
 8009176:	7813      	ldrb	r3, [r2, #0]
 8009178:	600b      	str	r3, [r1, #0]
 800917a:	7812      	ldrb	r2, [r2, #0]
 800917c:	1e10      	subs	r0, r2, #0
 800917e:	bf18      	it	ne
 8009180:	2001      	movne	r0, #1
 8009182:	b002      	add	sp, #8
 8009184:	4770      	bx	lr
 8009186:	4610      	mov	r0, r2
 8009188:	e7fb      	b.n	8009182 <__ascii_mbtowc+0x16>
 800918a:	f06f 0001 	mvn.w	r0, #1
 800918e:	e7f8      	b.n	8009182 <__ascii_mbtowc+0x16>

08009190 <memmove>:
 8009190:	4288      	cmp	r0, r1
 8009192:	b510      	push	{r4, lr}
 8009194:	eb01 0402 	add.w	r4, r1, r2
 8009198:	d902      	bls.n	80091a0 <memmove+0x10>
 800919a:	4284      	cmp	r4, r0
 800919c:	4623      	mov	r3, r4
 800919e:	d807      	bhi.n	80091b0 <memmove+0x20>
 80091a0:	1e43      	subs	r3, r0, #1
 80091a2:	42a1      	cmp	r1, r4
 80091a4:	d008      	beq.n	80091b8 <memmove+0x28>
 80091a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ae:	e7f8      	b.n	80091a2 <memmove+0x12>
 80091b0:	4402      	add	r2, r0
 80091b2:	4601      	mov	r1, r0
 80091b4:	428a      	cmp	r2, r1
 80091b6:	d100      	bne.n	80091ba <memmove+0x2a>
 80091b8:	bd10      	pop	{r4, pc}
 80091ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091c2:	e7f7      	b.n	80091b4 <memmove+0x24>

080091c4 <__malloc_lock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__malloc_lock+0x8>)
 80091c6:	f000 bc1f 	b.w	8009a08 <__retarget_lock_acquire_recursive>
 80091ca:	bf00      	nop
 80091cc:	200002ac 	.word	0x200002ac

080091d0 <__malloc_unlock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_unlock+0x8>)
 80091d2:	f000 bc1a 	b.w	8009a0a <__retarget_lock_release_recursive>
 80091d6:	bf00      	nop
 80091d8:	200002ac 	.word	0x200002ac

080091dc <_realloc_r>:
 80091dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091e0:	4680      	mov	r8, r0
 80091e2:	4614      	mov	r4, r2
 80091e4:	460e      	mov	r6, r1
 80091e6:	b921      	cbnz	r1, 80091f2 <_realloc_r+0x16>
 80091e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091ec:	4611      	mov	r1, r2
 80091ee:	f7ff bdad 	b.w	8008d4c <_malloc_r>
 80091f2:	b92a      	cbnz	r2, 8009200 <_realloc_r+0x24>
 80091f4:	f7ff fd3e 	bl	8008c74 <_free_r>
 80091f8:	4625      	mov	r5, r4
 80091fa:	4628      	mov	r0, r5
 80091fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009200:	f000 fc6a 	bl	8009ad8 <_malloc_usable_size_r>
 8009204:	4284      	cmp	r4, r0
 8009206:	4607      	mov	r7, r0
 8009208:	d802      	bhi.n	8009210 <_realloc_r+0x34>
 800920a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800920e:	d812      	bhi.n	8009236 <_realloc_r+0x5a>
 8009210:	4621      	mov	r1, r4
 8009212:	4640      	mov	r0, r8
 8009214:	f7ff fd9a 	bl	8008d4c <_malloc_r>
 8009218:	4605      	mov	r5, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d0ed      	beq.n	80091fa <_realloc_r+0x1e>
 800921e:	42bc      	cmp	r4, r7
 8009220:	4622      	mov	r2, r4
 8009222:	4631      	mov	r1, r6
 8009224:	bf28      	it	cs
 8009226:	463a      	movcs	r2, r7
 8009228:	f7ff f97c 	bl	8008524 <memcpy>
 800922c:	4631      	mov	r1, r6
 800922e:	4640      	mov	r0, r8
 8009230:	f7ff fd20 	bl	8008c74 <_free_r>
 8009234:	e7e1      	b.n	80091fa <_realloc_r+0x1e>
 8009236:	4635      	mov	r5, r6
 8009238:	e7df      	b.n	80091fa <_realloc_r+0x1e>

0800923a <__sfputc_r>:
 800923a:	6893      	ldr	r3, [r2, #8]
 800923c:	3b01      	subs	r3, #1
 800923e:	2b00      	cmp	r3, #0
 8009240:	b410      	push	{r4}
 8009242:	6093      	str	r3, [r2, #8]
 8009244:	da08      	bge.n	8009258 <__sfputc_r+0x1e>
 8009246:	6994      	ldr	r4, [r2, #24]
 8009248:	42a3      	cmp	r3, r4
 800924a:	db01      	blt.n	8009250 <__sfputc_r+0x16>
 800924c:	290a      	cmp	r1, #10
 800924e:	d103      	bne.n	8009258 <__sfputc_r+0x1e>
 8009250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009254:	f000 b94a 	b.w	80094ec <__swbuf_r>
 8009258:	6813      	ldr	r3, [r2, #0]
 800925a:	1c58      	adds	r0, r3, #1
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	7019      	strb	r1, [r3, #0]
 8009260:	4608      	mov	r0, r1
 8009262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009266:	4770      	bx	lr

08009268 <__sfputs_r>:
 8009268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926a:	4606      	mov	r6, r0
 800926c:	460f      	mov	r7, r1
 800926e:	4614      	mov	r4, r2
 8009270:	18d5      	adds	r5, r2, r3
 8009272:	42ac      	cmp	r4, r5
 8009274:	d101      	bne.n	800927a <__sfputs_r+0x12>
 8009276:	2000      	movs	r0, #0
 8009278:	e007      	b.n	800928a <__sfputs_r+0x22>
 800927a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800927e:	463a      	mov	r2, r7
 8009280:	4630      	mov	r0, r6
 8009282:	f7ff ffda 	bl	800923a <__sfputc_r>
 8009286:	1c43      	adds	r3, r0, #1
 8009288:	d1f3      	bne.n	8009272 <__sfputs_r+0xa>
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800928c <_vfiprintf_r>:
 800928c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009290:	460d      	mov	r5, r1
 8009292:	b09d      	sub	sp, #116	; 0x74
 8009294:	4614      	mov	r4, r2
 8009296:	4698      	mov	r8, r3
 8009298:	4606      	mov	r6, r0
 800929a:	b118      	cbz	r0, 80092a4 <_vfiprintf_r+0x18>
 800929c:	6983      	ldr	r3, [r0, #24]
 800929e:	b90b      	cbnz	r3, 80092a4 <_vfiprintf_r+0x18>
 80092a0:	f000 fb14 	bl	80098cc <__sinit>
 80092a4:	4b89      	ldr	r3, [pc, #548]	; (80094cc <_vfiprintf_r+0x240>)
 80092a6:	429d      	cmp	r5, r3
 80092a8:	d11b      	bne.n	80092e2 <_vfiprintf_r+0x56>
 80092aa:	6875      	ldr	r5, [r6, #4]
 80092ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092ae:	07d9      	lsls	r1, r3, #31
 80092b0:	d405      	bmi.n	80092be <_vfiprintf_r+0x32>
 80092b2:	89ab      	ldrh	r3, [r5, #12]
 80092b4:	059a      	lsls	r2, r3, #22
 80092b6:	d402      	bmi.n	80092be <_vfiprintf_r+0x32>
 80092b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ba:	f000 fba5 	bl	8009a08 <__retarget_lock_acquire_recursive>
 80092be:	89ab      	ldrh	r3, [r5, #12]
 80092c0:	071b      	lsls	r3, r3, #28
 80092c2:	d501      	bpl.n	80092c8 <_vfiprintf_r+0x3c>
 80092c4:	692b      	ldr	r3, [r5, #16]
 80092c6:	b9eb      	cbnz	r3, 8009304 <_vfiprintf_r+0x78>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f000 f96e 	bl	80095ac <__swsetup_r>
 80092d0:	b1c0      	cbz	r0, 8009304 <_vfiprintf_r+0x78>
 80092d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d4:	07dc      	lsls	r4, r3, #31
 80092d6:	d50e      	bpl.n	80092f6 <_vfiprintf_r+0x6a>
 80092d8:	f04f 30ff 	mov.w	r0, #4294967295
 80092dc:	b01d      	add	sp, #116	; 0x74
 80092de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e2:	4b7b      	ldr	r3, [pc, #492]	; (80094d0 <_vfiprintf_r+0x244>)
 80092e4:	429d      	cmp	r5, r3
 80092e6:	d101      	bne.n	80092ec <_vfiprintf_r+0x60>
 80092e8:	68b5      	ldr	r5, [r6, #8]
 80092ea:	e7df      	b.n	80092ac <_vfiprintf_r+0x20>
 80092ec:	4b79      	ldr	r3, [pc, #484]	; (80094d4 <_vfiprintf_r+0x248>)
 80092ee:	429d      	cmp	r5, r3
 80092f0:	bf08      	it	eq
 80092f2:	68f5      	ldreq	r5, [r6, #12]
 80092f4:	e7da      	b.n	80092ac <_vfiprintf_r+0x20>
 80092f6:	89ab      	ldrh	r3, [r5, #12]
 80092f8:	0598      	lsls	r0, r3, #22
 80092fa:	d4ed      	bmi.n	80092d8 <_vfiprintf_r+0x4c>
 80092fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092fe:	f000 fb84 	bl	8009a0a <__retarget_lock_release_recursive>
 8009302:	e7e9      	b.n	80092d8 <_vfiprintf_r+0x4c>
 8009304:	2300      	movs	r3, #0
 8009306:	9309      	str	r3, [sp, #36]	; 0x24
 8009308:	2320      	movs	r3, #32
 800930a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800930e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009312:	2330      	movs	r3, #48	; 0x30
 8009314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094d8 <_vfiprintf_r+0x24c>
 8009318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800931c:	f04f 0901 	mov.w	r9, #1
 8009320:	4623      	mov	r3, r4
 8009322:	469a      	mov	sl, r3
 8009324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009328:	b10a      	cbz	r2, 800932e <_vfiprintf_r+0xa2>
 800932a:	2a25      	cmp	r2, #37	; 0x25
 800932c:	d1f9      	bne.n	8009322 <_vfiprintf_r+0x96>
 800932e:	ebba 0b04 	subs.w	fp, sl, r4
 8009332:	d00b      	beq.n	800934c <_vfiprintf_r+0xc0>
 8009334:	465b      	mov	r3, fp
 8009336:	4622      	mov	r2, r4
 8009338:	4629      	mov	r1, r5
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff ff94 	bl	8009268 <__sfputs_r>
 8009340:	3001      	adds	r0, #1
 8009342:	f000 80aa 	beq.w	800949a <_vfiprintf_r+0x20e>
 8009346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009348:	445a      	add	r2, fp
 800934a:	9209      	str	r2, [sp, #36]	; 0x24
 800934c:	f89a 3000 	ldrb.w	r3, [sl]
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 80a2 	beq.w	800949a <_vfiprintf_r+0x20e>
 8009356:	2300      	movs	r3, #0
 8009358:	f04f 32ff 	mov.w	r2, #4294967295
 800935c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009360:	f10a 0a01 	add.w	sl, sl, #1
 8009364:	9304      	str	r3, [sp, #16]
 8009366:	9307      	str	r3, [sp, #28]
 8009368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800936c:	931a      	str	r3, [sp, #104]	; 0x68
 800936e:	4654      	mov	r4, sl
 8009370:	2205      	movs	r2, #5
 8009372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009376:	4858      	ldr	r0, [pc, #352]	; (80094d8 <_vfiprintf_r+0x24c>)
 8009378:	f7f6 ff3a 	bl	80001f0 <memchr>
 800937c:	9a04      	ldr	r2, [sp, #16]
 800937e:	b9d8      	cbnz	r0, 80093b8 <_vfiprintf_r+0x12c>
 8009380:	06d1      	lsls	r1, r2, #27
 8009382:	bf44      	itt	mi
 8009384:	2320      	movmi	r3, #32
 8009386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800938a:	0713      	lsls	r3, r2, #28
 800938c:	bf44      	itt	mi
 800938e:	232b      	movmi	r3, #43	; 0x2b
 8009390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009394:	f89a 3000 	ldrb.w	r3, [sl]
 8009398:	2b2a      	cmp	r3, #42	; 0x2a
 800939a:	d015      	beq.n	80093c8 <_vfiprintf_r+0x13c>
 800939c:	9a07      	ldr	r2, [sp, #28]
 800939e:	4654      	mov	r4, sl
 80093a0:	2000      	movs	r0, #0
 80093a2:	f04f 0c0a 	mov.w	ip, #10
 80093a6:	4621      	mov	r1, r4
 80093a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093ac:	3b30      	subs	r3, #48	; 0x30
 80093ae:	2b09      	cmp	r3, #9
 80093b0:	d94e      	bls.n	8009450 <_vfiprintf_r+0x1c4>
 80093b2:	b1b0      	cbz	r0, 80093e2 <_vfiprintf_r+0x156>
 80093b4:	9207      	str	r2, [sp, #28]
 80093b6:	e014      	b.n	80093e2 <_vfiprintf_r+0x156>
 80093b8:	eba0 0308 	sub.w	r3, r0, r8
 80093bc:	fa09 f303 	lsl.w	r3, r9, r3
 80093c0:	4313      	orrs	r3, r2
 80093c2:	9304      	str	r3, [sp, #16]
 80093c4:	46a2      	mov	sl, r4
 80093c6:	e7d2      	b.n	800936e <_vfiprintf_r+0xe2>
 80093c8:	9b03      	ldr	r3, [sp, #12]
 80093ca:	1d19      	adds	r1, r3, #4
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	9103      	str	r1, [sp, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bfbb      	ittet	lt
 80093d4:	425b      	neglt	r3, r3
 80093d6:	f042 0202 	orrlt.w	r2, r2, #2
 80093da:	9307      	strge	r3, [sp, #28]
 80093dc:	9307      	strlt	r3, [sp, #28]
 80093de:	bfb8      	it	lt
 80093e0:	9204      	strlt	r2, [sp, #16]
 80093e2:	7823      	ldrb	r3, [r4, #0]
 80093e4:	2b2e      	cmp	r3, #46	; 0x2e
 80093e6:	d10c      	bne.n	8009402 <_vfiprintf_r+0x176>
 80093e8:	7863      	ldrb	r3, [r4, #1]
 80093ea:	2b2a      	cmp	r3, #42	; 0x2a
 80093ec:	d135      	bne.n	800945a <_vfiprintf_r+0x1ce>
 80093ee:	9b03      	ldr	r3, [sp, #12]
 80093f0:	1d1a      	adds	r2, r3, #4
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	9203      	str	r2, [sp, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	bfb8      	it	lt
 80093fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80093fe:	3402      	adds	r4, #2
 8009400:	9305      	str	r3, [sp, #20]
 8009402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094e8 <_vfiprintf_r+0x25c>
 8009406:	7821      	ldrb	r1, [r4, #0]
 8009408:	2203      	movs	r2, #3
 800940a:	4650      	mov	r0, sl
 800940c:	f7f6 fef0 	bl	80001f0 <memchr>
 8009410:	b140      	cbz	r0, 8009424 <_vfiprintf_r+0x198>
 8009412:	2340      	movs	r3, #64	; 0x40
 8009414:	eba0 000a 	sub.w	r0, r0, sl
 8009418:	fa03 f000 	lsl.w	r0, r3, r0
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	4303      	orrs	r3, r0
 8009420:	3401      	adds	r4, #1
 8009422:	9304      	str	r3, [sp, #16]
 8009424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009428:	482c      	ldr	r0, [pc, #176]	; (80094dc <_vfiprintf_r+0x250>)
 800942a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800942e:	2206      	movs	r2, #6
 8009430:	f7f6 fede 	bl	80001f0 <memchr>
 8009434:	2800      	cmp	r0, #0
 8009436:	d03f      	beq.n	80094b8 <_vfiprintf_r+0x22c>
 8009438:	4b29      	ldr	r3, [pc, #164]	; (80094e0 <_vfiprintf_r+0x254>)
 800943a:	bb1b      	cbnz	r3, 8009484 <_vfiprintf_r+0x1f8>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	3307      	adds	r3, #7
 8009440:	f023 0307 	bic.w	r3, r3, #7
 8009444:	3308      	adds	r3, #8
 8009446:	9303      	str	r3, [sp, #12]
 8009448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800944a:	443b      	add	r3, r7
 800944c:	9309      	str	r3, [sp, #36]	; 0x24
 800944e:	e767      	b.n	8009320 <_vfiprintf_r+0x94>
 8009450:	fb0c 3202 	mla	r2, ip, r2, r3
 8009454:	460c      	mov	r4, r1
 8009456:	2001      	movs	r0, #1
 8009458:	e7a5      	b.n	80093a6 <_vfiprintf_r+0x11a>
 800945a:	2300      	movs	r3, #0
 800945c:	3401      	adds	r4, #1
 800945e:	9305      	str	r3, [sp, #20]
 8009460:	4619      	mov	r1, r3
 8009462:	f04f 0c0a 	mov.w	ip, #10
 8009466:	4620      	mov	r0, r4
 8009468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800946c:	3a30      	subs	r2, #48	; 0x30
 800946e:	2a09      	cmp	r2, #9
 8009470:	d903      	bls.n	800947a <_vfiprintf_r+0x1ee>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0c5      	beq.n	8009402 <_vfiprintf_r+0x176>
 8009476:	9105      	str	r1, [sp, #20]
 8009478:	e7c3      	b.n	8009402 <_vfiprintf_r+0x176>
 800947a:	fb0c 2101 	mla	r1, ip, r1, r2
 800947e:	4604      	mov	r4, r0
 8009480:	2301      	movs	r3, #1
 8009482:	e7f0      	b.n	8009466 <_vfiprintf_r+0x1da>
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	462a      	mov	r2, r5
 800948a:	4b16      	ldr	r3, [pc, #88]	; (80094e4 <_vfiprintf_r+0x258>)
 800948c:	a904      	add	r1, sp, #16
 800948e:	4630      	mov	r0, r6
 8009490:	f7fd fdd8 	bl	8007044 <_printf_float>
 8009494:	4607      	mov	r7, r0
 8009496:	1c78      	adds	r0, r7, #1
 8009498:	d1d6      	bne.n	8009448 <_vfiprintf_r+0x1bc>
 800949a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800949c:	07d9      	lsls	r1, r3, #31
 800949e:	d405      	bmi.n	80094ac <_vfiprintf_r+0x220>
 80094a0:	89ab      	ldrh	r3, [r5, #12]
 80094a2:	059a      	lsls	r2, r3, #22
 80094a4:	d402      	bmi.n	80094ac <_vfiprintf_r+0x220>
 80094a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094a8:	f000 faaf 	bl	8009a0a <__retarget_lock_release_recursive>
 80094ac:	89ab      	ldrh	r3, [r5, #12]
 80094ae:	065b      	lsls	r3, r3, #25
 80094b0:	f53f af12 	bmi.w	80092d8 <_vfiprintf_r+0x4c>
 80094b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094b6:	e711      	b.n	80092dc <_vfiprintf_r+0x50>
 80094b8:	ab03      	add	r3, sp, #12
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	462a      	mov	r2, r5
 80094be:	4b09      	ldr	r3, [pc, #36]	; (80094e4 <_vfiprintf_r+0x258>)
 80094c0:	a904      	add	r1, sp, #16
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7fe f862 	bl	800758c <_printf_i>
 80094c8:	e7e4      	b.n	8009494 <_vfiprintf_r+0x208>
 80094ca:	bf00      	nop
 80094cc:	0800bb54 	.word	0x0800bb54
 80094d0:	0800bb74 	.word	0x0800bb74
 80094d4:	0800bb34 	.word	0x0800bb34
 80094d8:	0800b9dc 	.word	0x0800b9dc
 80094dc:	0800b9e6 	.word	0x0800b9e6
 80094e0:	08007045 	.word	0x08007045
 80094e4:	08009269 	.word	0x08009269
 80094e8:	0800b9e2 	.word	0x0800b9e2

080094ec <__swbuf_r>:
 80094ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ee:	460e      	mov	r6, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	4605      	mov	r5, r0
 80094f4:	b118      	cbz	r0, 80094fe <__swbuf_r+0x12>
 80094f6:	6983      	ldr	r3, [r0, #24]
 80094f8:	b90b      	cbnz	r3, 80094fe <__swbuf_r+0x12>
 80094fa:	f000 f9e7 	bl	80098cc <__sinit>
 80094fe:	4b21      	ldr	r3, [pc, #132]	; (8009584 <__swbuf_r+0x98>)
 8009500:	429c      	cmp	r4, r3
 8009502:	d12b      	bne.n	800955c <__swbuf_r+0x70>
 8009504:	686c      	ldr	r4, [r5, #4]
 8009506:	69a3      	ldr	r3, [r4, #24]
 8009508:	60a3      	str	r3, [r4, #8]
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	071a      	lsls	r2, r3, #28
 800950e:	d52f      	bpl.n	8009570 <__swbuf_r+0x84>
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	b36b      	cbz	r3, 8009570 <__swbuf_r+0x84>
 8009514:	6923      	ldr	r3, [r4, #16]
 8009516:	6820      	ldr	r0, [r4, #0]
 8009518:	1ac0      	subs	r0, r0, r3
 800951a:	6963      	ldr	r3, [r4, #20]
 800951c:	b2f6      	uxtb	r6, r6
 800951e:	4283      	cmp	r3, r0
 8009520:	4637      	mov	r7, r6
 8009522:	dc04      	bgt.n	800952e <__swbuf_r+0x42>
 8009524:	4621      	mov	r1, r4
 8009526:	4628      	mov	r0, r5
 8009528:	f000 f93c 	bl	80097a4 <_fflush_r>
 800952c:	bb30      	cbnz	r0, 800957c <__swbuf_r+0x90>
 800952e:	68a3      	ldr	r3, [r4, #8]
 8009530:	3b01      	subs	r3, #1
 8009532:	60a3      	str	r3, [r4, #8]
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	1c5a      	adds	r2, r3, #1
 8009538:	6022      	str	r2, [r4, #0]
 800953a:	701e      	strb	r6, [r3, #0]
 800953c:	6963      	ldr	r3, [r4, #20]
 800953e:	3001      	adds	r0, #1
 8009540:	4283      	cmp	r3, r0
 8009542:	d004      	beq.n	800954e <__swbuf_r+0x62>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	07db      	lsls	r3, r3, #31
 8009548:	d506      	bpl.n	8009558 <__swbuf_r+0x6c>
 800954a:	2e0a      	cmp	r6, #10
 800954c:	d104      	bne.n	8009558 <__swbuf_r+0x6c>
 800954e:	4621      	mov	r1, r4
 8009550:	4628      	mov	r0, r5
 8009552:	f000 f927 	bl	80097a4 <_fflush_r>
 8009556:	b988      	cbnz	r0, 800957c <__swbuf_r+0x90>
 8009558:	4638      	mov	r0, r7
 800955a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <__swbuf_r+0x9c>)
 800955e:	429c      	cmp	r4, r3
 8009560:	d101      	bne.n	8009566 <__swbuf_r+0x7a>
 8009562:	68ac      	ldr	r4, [r5, #8]
 8009564:	e7cf      	b.n	8009506 <__swbuf_r+0x1a>
 8009566:	4b09      	ldr	r3, [pc, #36]	; (800958c <__swbuf_r+0xa0>)
 8009568:	429c      	cmp	r4, r3
 800956a:	bf08      	it	eq
 800956c:	68ec      	ldreq	r4, [r5, #12]
 800956e:	e7ca      	b.n	8009506 <__swbuf_r+0x1a>
 8009570:	4621      	mov	r1, r4
 8009572:	4628      	mov	r0, r5
 8009574:	f000 f81a 	bl	80095ac <__swsetup_r>
 8009578:	2800      	cmp	r0, #0
 800957a:	d0cb      	beq.n	8009514 <__swbuf_r+0x28>
 800957c:	f04f 37ff 	mov.w	r7, #4294967295
 8009580:	e7ea      	b.n	8009558 <__swbuf_r+0x6c>
 8009582:	bf00      	nop
 8009584:	0800bb54 	.word	0x0800bb54
 8009588:	0800bb74 	.word	0x0800bb74
 800958c:	0800bb34 	.word	0x0800bb34

08009590 <__ascii_wctomb>:
 8009590:	b149      	cbz	r1, 80095a6 <__ascii_wctomb+0x16>
 8009592:	2aff      	cmp	r2, #255	; 0xff
 8009594:	bf85      	ittet	hi
 8009596:	238a      	movhi	r3, #138	; 0x8a
 8009598:	6003      	strhi	r3, [r0, #0]
 800959a:	700a      	strbls	r2, [r1, #0]
 800959c:	f04f 30ff 	movhi.w	r0, #4294967295
 80095a0:	bf98      	it	ls
 80095a2:	2001      	movls	r0, #1
 80095a4:	4770      	bx	lr
 80095a6:	4608      	mov	r0, r1
 80095a8:	4770      	bx	lr
	...

080095ac <__swsetup_r>:
 80095ac:	4b32      	ldr	r3, [pc, #200]	; (8009678 <__swsetup_r+0xcc>)
 80095ae:	b570      	push	{r4, r5, r6, lr}
 80095b0:	681d      	ldr	r5, [r3, #0]
 80095b2:	4606      	mov	r6, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	b125      	cbz	r5, 80095c2 <__swsetup_r+0x16>
 80095b8:	69ab      	ldr	r3, [r5, #24]
 80095ba:	b913      	cbnz	r3, 80095c2 <__swsetup_r+0x16>
 80095bc:	4628      	mov	r0, r5
 80095be:	f000 f985 	bl	80098cc <__sinit>
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <__swsetup_r+0xd0>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d10f      	bne.n	80095e8 <__swsetup_r+0x3c>
 80095c8:	686c      	ldr	r4, [r5, #4]
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d0:	0719      	lsls	r1, r3, #28
 80095d2:	d42c      	bmi.n	800962e <__swsetup_r+0x82>
 80095d4:	06dd      	lsls	r5, r3, #27
 80095d6:	d411      	bmi.n	80095fc <__swsetup_r+0x50>
 80095d8:	2309      	movs	r3, #9
 80095da:	6033      	str	r3, [r6, #0]
 80095dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	e03e      	b.n	8009666 <__swsetup_r+0xba>
 80095e8:	4b25      	ldr	r3, [pc, #148]	; (8009680 <__swsetup_r+0xd4>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d101      	bne.n	80095f2 <__swsetup_r+0x46>
 80095ee:	68ac      	ldr	r4, [r5, #8]
 80095f0:	e7eb      	b.n	80095ca <__swsetup_r+0x1e>
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <__swsetup_r+0xd8>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	bf08      	it	eq
 80095f8:	68ec      	ldreq	r4, [r5, #12]
 80095fa:	e7e6      	b.n	80095ca <__swsetup_r+0x1e>
 80095fc:	0758      	lsls	r0, r3, #29
 80095fe:	d512      	bpl.n	8009626 <__swsetup_r+0x7a>
 8009600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009602:	b141      	cbz	r1, 8009616 <__swsetup_r+0x6a>
 8009604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009608:	4299      	cmp	r1, r3
 800960a:	d002      	beq.n	8009612 <__swsetup_r+0x66>
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff fb31 	bl	8008c74 <_free_r>
 8009612:	2300      	movs	r3, #0
 8009614:	6363      	str	r3, [r4, #52]	; 0x34
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	2300      	movs	r3, #0
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f043 0308 	orr.w	r3, r3, #8
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	b94b      	cbnz	r3, 8009646 <__swsetup_r+0x9a>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800963c:	d003      	beq.n	8009646 <__swsetup_r+0x9a>
 800963e:	4621      	mov	r1, r4
 8009640:	4630      	mov	r0, r6
 8009642:	f000 fa09 	bl	8009a58 <__smakebuf_r>
 8009646:	89a0      	ldrh	r0, [r4, #12]
 8009648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800964c:	f010 0301 	ands.w	r3, r0, #1
 8009650:	d00a      	beq.n	8009668 <__swsetup_r+0xbc>
 8009652:	2300      	movs	r3, #0
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	6963      	ldr	r3, [r4, #20]
 8009658:	425b      	negs	r3, r3
 800965a:	61a3      	str	r3, [r4, #24]
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	b943      	cbnz	r3, 8009672 <__swsetup_r+0xc6>
 8009660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009664:	d1ba      	bne.n	80095dc <__swsetup_r+0x30>
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	0781      	lsls	r1, r0, #30
 800966a:	bf58      	it	pl
 800966c:	6963      	ldrpl	r3, [r4, #20]
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	e7f4      	b.n	800965c <__swsetup_r+0xb0>
 8009672:	2000      	movs	r0, #0
 8009674:	e7f7      	b.n	8009666 <__swsetup_r+0xba>
 8009676:	bf00      	nop
 8009678:	20000050 	.word	0x20000050
 800967c:	0800bb54 	.word	0x0800bb54
 8009680:	0800bb74 	.word	0x0800bb74
 8009684:	0800bb34 	.word	0x0800bb34

08009688 <abort>:
 8009688:	b508      	push	{r3, lr}
 800968a:	2006      	movs	r0, #6
 800968c:	f000 fa54 	bl	8009b38 <raise>
 8009690:	2001      	movs	r0, #1
 8009692:	f001 fc05 	bl	800aea0 <_exit>
	...

08009698 <__sflush_r>:
 8009698:	898a      	ldrh	r2, [r1, #12]
 800969a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800969e:	4605      	mov	r5, r0
 80096a0:	0710      	lsls	r0, r2, #28
 80096a2:	460c      	mov	r4, r1
 80096a4:	d458      	bmi.n	8009758 <__sflush_r+0xc0>
 80096a6:	684b      	ldr	r3, [r1, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	dc05      	bgt.n	80096b8 <__sflush_r+0x20>
 80096ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	dc02      	bgt.n	80096b8 <__sflush_r+0x20>
 80096b2:	2000      	movs	r0, #0
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ba:	2e00      	cmp	r6, #0
 80096bc:	d0f9      	beq.n	80096b2 <__sflush_r+0x1a>
 80096be:	2300      	movs	r3, #0
 80096c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096c4:	682f      	ldr	r7, [r5, #0]
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	d032      	beq.n	8009730 <__sflush_r+0x98>
 80096ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	075a      	lsls	r2, r3, #29
 80096d0:	d505      	bpl.n	80096de <__sflush_r+0x46>
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096d8:	b10b      	cbz	r3, 80096de <__sflush_r+0x46>
 80096da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	2300      	movs	r3, #0
 80096e0:	4602      	mov	r2, r0
 80096e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096e4:	6a21      	ldr	r1, [r4, #32]
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b0      	blx	r6
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	d106      	bne.n	80096fe <__sflush_r+0x66>
 80096f0:	6829      	ldr	r1, [r5, #0]
 80096f2:	291d      	cmp	r1, #29
 80096f4:	d82c      	bhi.n	8009750 <__sflush_r+0xb8>
 80096f6:	4a2a      	ldr	r2, [pc, #168]	; (80097a0 <__sflush_r+0x108>)
 80096f8:	40ca      	lsrs	r2, r1
 80096fa:	07d6      	lsls	r6, r2, #31
 80096fc:	d528      	bpl.n	8009750 <__sflush_r+0xb8>
 80096fe:	2200      	movs	r2, #0
 8009700:	6062      	str	r2, [r4, #4]
 8009702:	04d9      	lsls	r1, r3, #19
 8009704:	6922      	ldr	r2, [r4, #16]
 8009706:	6022      	str	r2, [r4, #0]
 8009708:	d504      	bpl.n	8009714 <__sflush_r+0x7c>
 800970a:	1c42      	adds	r2, r0, #1
 800970c:	d101      	bne.n	8009712 <__sflush_r+0x7a>
 800970e:	682b      	ldr	r3, [r5, #0]
 8009710:	b903      	cbnz	r3, 8009714 <__sflush_r+0x7c>
 8009712:	6560      	str	r0, [r4, #84]	; 0x54
 8009714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009716:	602f      	str	r7, [r5, #0]
 8009718:	2900      	cmp	r1, #0
 800971a:	d0ca      	beq.n	80096b2 <__sflush_r+0x1a>
 800971c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009720:	4299      	cmp	r1, r3
 8009722:	d002      	beq.n	800972a <__sflush_r+0x92>
 8009724:	4628      	mov	r0, r5
 8009726:	f7ff faa5 	bl	8008c74 <_free_r>
 800972a:	2000      	movs	r0, #0
 800972c:	6360      	str	r0, [r4, #52]	; 0x34
 800972e:	e7c1      	b.n	80096b4 <__sflush_r+0x1c>
 8009730:	6a21      	ldr	r1, [r4, #32]
 8009732:	2301      	movs	r3, #1
 8009734:	4628      	mov	r0, r5
 8009736:	47b0      	blx	r6
 8009738:	1c41      	adds	r1, r0, #1
 800973a:	d1c7      	bne.n	80096cc <__sflush_r+0x34>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0c4      	beq.n	80096cc <__sflush_r+0x34>
 8009742:	2b1d      	cmp	r3, #29
 8009744:	d001      	beq.n	800974a <__sflush_r+0xb2>
 8009746:	2b16      	cmp	r3, #22
 8009748:	d101      	bne.n	800974e <__sflush_r+0xb6>
 800974a:	602f      	str	r7, [r5, #0]
 800974c:	e7b1      	b.n	80096b2 <__sflush_r+0x1a>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	e7ad      	b.n	80096b4 <__sflush_r+0x1c>
 8009758:	690f      	ldr	r7, [r1, #16]
 800975a:	2f00      	cmp	r7, #0
 800975c:	d0a9      	beq.n	80096b2 <__sflush_r+0x1a>
 800975e:	0793      	lsls	r3, r2, #30
 8009760:	680e      	ldr	r6, [r1, #0]
 8009762:	bf08      	it	eq
 8009764:	694b      	ldreq	r3, [r1, #20]
 8009766:	600f      	str	r7, [r1, #0]
 8009768:	bf18      	it	ne
 800976a:	2300      	movne	r3, #0
 800976c:	eba6 0807 	sub.w	r8, r6, r7
 8009770:	608b      	str	r3, [r1, #8]
 8009772:	f1b8 0f00 	cmp.w	r8, #0
 8009776:	dd9c      	ble.n	80096b2 <__sflush_r+0x1a>
 8009778:	6a21      	ldr	r1, [r4, #32]
 800977a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800977c:	4643      	mov	r3, r8
 800977e:	463a      	mov	r2, r7
 8009780:	4628      	mov	r0, r5
 8009782:	47b0      	blx	r6
 8009784:	2800      	cmp	r0, #0
 8009786:	dc06      	bgt.n	8009796 <__sflush_r+0xfe>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800978e:	81a3      	strh	r3, [r4, #12]
 8009790:	f04f 30ff 	mov.w	r0, #4294967295
 8009794:	e78e      	b.n	80096b4 <__sflush_r+0x1c>
 8009796:	4407      	add	r7, r0
 8009798:	eba8 0800 	sub.w	r8, r8, r0
 800979c:	e7e9      	b.n	8009772 <__sflush_r+0xda>
 800979e:	bf00      	nop
 80097a0:	20400001 	.word	0x20400001

080097a4 <_fflush_r>:
 80097a4:	b538      	push	{r3, r4, r5, lr}
 80097a6:	690b      	ldr	r3, [r1, #16]
 80097a8:	4605      	mov	r5, r0
 80097aa:	460c      	mov	r4, r1
 80097ac:	b913      	cbnz	r3, 80097b4 <_fflush_r+0x10>
 80097ae:	2500      	movs	r5, #0
 80097b0:	4628      	mov	r0, r5
 80097b2:	bd38      	pop	{r3, r4, r5, pc}
 80097b4:	b118      	cbz	r0, 80097be <_fflush_r+0x1a>
 80097b6:	6983      	ldr	r3, [r0, #24]
 80097b8:	b90b      	cbnz	r3, 80097be <_fflush_r+0x1a>
 80097ba:	f000 f887 	bl	80098cc <__sinit>
 80097be:	4b14      	ldr	r3, [pc, #80]	; (8009810 <_fflush_r+0x6c>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	d11b      	bne.n	80097fc <_fflush_r+0x58>
 80097c4:	686c      	ldr	r4, [r5, #4]
 80097c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0ef      	beq.n	80097ae <_fflush_r+0xa>
 80097ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d0:	07d0      	lsls	r0, r2, #31
 80097d2:	d404      	bmi.n	80097de <_fflush_r+0x3a>
 80097d4:	0599      	lsls	r1, r3, #22
 80097d6:	d402      	bmi.n	80097de <_fflush_r+0x3a>
 80097d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097da:	f000 f915 	bl	8009a08 <__retarget_lock_acquire_recursive>
 80097de:	4628      	mov	r0, r5
 80097e0:	4621      	mov	r1, r4
 80097e2:	f7ff ff59 	bl	8009698 <__sflush_r>
 80097e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097e8:	07da      	lsls	r2, r3, #31
 80097ea:	4605      	mov	r5, r0
 80097ec:	d4e0      	bmi.n	80097b0 <_fflush_r+0xc>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	059b      	lsls	r3, r3, #22
 80097f2:	d4dd      	bmi.n	80097b0 <_fflush_r+0xc>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 f908 	bl	8009a0a <__retarget_lock_release_recursive>
 80097fa:	e7d9      	b.n	80097b0 <_fflush_r+0xc>
 80097fc:	4b05      	ldr	r3, [pc, #20]	; (8009814 <_fflush_r+0x70>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d101      	bne.n	8009806 <_fflush_r+0x62>
 8009802:	68ac      	ldr	r4, [r5, #8]
 8009804:	e7df      	b.n	80097c6 <_fflush_r+0x22>
 8009806:	4b04      	ldr	r3, [pc, #16]	; (8009818 <_fflush_r+0x74>)
 8009808:	429c      	cmp	r4, r3
 800980a:	bf08      	it	eq
 800980c:	68ec      	ldreq	r4, [r5, #12]
 800980e:	e7da      	b.n	80097c6 <_fflush_r+0x22>
 8009810:	0800bb54 	.word	0x0800bb54
 8009814:	0800bb74 	.word	0x0800bb74
 8009818:	0800bb34 	.word	0x0800bb34

0800981c <std>:
 800981c:	2300      	movs	r3, #0
 800981e:	b510      	push	{r4, lr}
 8009820:	4604      	mov	r4, r0
 8009822:	e9c0 3300 	strd	r3, r3, [r0]
 8009826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800982a:	6083      	str	r3, [r0, #8]
 800982c:	8181      	strh	r1, [r0, #12]
 800982e:	6643      	str	r3, [r0, #100]	; 0x64
 8009830:	81c2      	strh	r2, [r0, #14]
 8009832:	6183      	str	r3, [r0, #24]
 8009834:	4619      	mov	r1, r3
 8009836:	2208      	movs	r2, #8
 8009838:	305c      	adds	r0, #92	; 0x5c
 800983a:	f7fd fb5b 	bl	8006ef4 <memset>
 800983e:	4b05      	ldr	r3, [pc, #20]	; (8009854 <std+0x38>)
 8009840:	6263      	str	r3, [r4, #36]	; 0x24
 8009842:	4b05      	ldr	r3, [pc, #20]	; (8009858 <std+0x3c>)
 8009844:	62a3      	str	r3, [r4, #40]	; 0x28
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x40>)
 8009848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <std+0x44>)
 800984c:	6224      	str	r4, [r4, #32]
 800984e:	6323      	str	r3, [r4, #48]	; 0x30
 8009850:	bd10      	pop	{r4, pc}
 8009852:	bf00      	nop
 8009854:	08009b71 	.word	0x08009b71
 8009858:	08009b93 	.word	0x08009b93
 800985c:	08009bcb 	.word	0x08009bcb
 8009860:	08009bef 	.word	0x08009bef

08009864 <_cleanup_r>:
 8009864:	4901      	ldr	r1, [pc, #4]	; (800986c <_cleanup_r+0x8>)
 8009866:	f000 b8af 	b.w	80099c8 <_fwalk_reent>
 800986a:	bf00      	nop
 800986c:	080097a5 	.word	0x080097a5

08009870 <__sfmoreglue>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	2268      	movs	r2, #104	; 0x68
 8009874:	1e4d      	subs	r5, r1, #1
 8009876:	4355      	muls	r5, r2
 8009878:	460e      	mov	r6, r1
 800987a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800987e:	f7ff fa65 	bl	8008d4c <_malloc_r>
 8009882:	4604      	mov	r4, r0
 8009884:	b140      	cbz	r0, 8009898 <__sfmoreglue+0x28>
 8009886:	2100      	movs	r1, #0
 8009888:	e9c0 1600 	strd	r1, r6, [r0]
 800988c:	300c      	adds	r0, #12
 800988e:	60a0      	str	r0, [r4, #8]
 8009890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009894:	f7fd fb2e 	bl	8006ef4 <memset>
 8009898:	4620      	mov	r0, r4
 800989a:	bd70      	pop	{r4, r5, r6, pc}

0800989c <__sfp_lock_acquire>:
 800989c:	4801      	ldr	r0, [pc, #4]	; (80098a4 <__sfp_lock_acquire+0x8>)
 800989e:	f000 b8b3 	b.w	8009a08 <__retarget_lock_acquire_recursive>
 80098a2:	bf00      	nop
 80098a4:	200002ad 	.word	0x200002ad

080098a8 <__sfp_lock_release>:
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <__sfp_lock_release+0x8>)
 80098aa:	f000 b8ae 	b.w	8009a0a <__retarget_lock_release_recursive>
 80098ae:	bf00      	nop
 80098b0:	200002ad 	.word	0x200002ad

080098b4 <__sinit_lock_acquire>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sinit_lock_acquire+0x8>)
 80098b6:	f000 b8a7 	b.w	8009a08 <__retarget_lock_acquire_recursive>
 80098ba:	bf00      	nop
 80098bc:	200002ae 	.word	0x200002ae

080098c0 <__sinit_lock_release>:
 80098c0:	4801      	ldr	r0, [pc, #4]	; (80098c8 <__sinit_lock_release+0x8>)
 80098c2:	f000 b8a2 	b.w	8009a0a <__retarget_lock_release_recursive>
 80098c6:	bf00      	nop
 80098c8:	200002ae 	.word	0x200002ae

080098cc <__sinit>:
 80098cc:	b510      	push	{r4, lr}
 80098ce:	4604      	mov	r4, r0
 80098d0:	f7ff fff0 	bl	80098b4 <__sinit_lock_acquire>
 80098d4:	69a3      	ldr	r3, [r4, #24]
 80098d6:	b11b      	cbz	r3, 80098e0 <__sinit+0x14>
 80098d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098dc:	f7ff bff0 	b.w	80098c0 <__sinit_lock_release>
 80098e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098e4:	6523      	str	r3, [r4, #80]	; 0x50
 80098e6:	4b13      	ldr	r3, [pc, #76]	; (8009934 <__sinit+0x68>)
 80098e8:	4a13      	ldr	r2, [pc, #76]	; (8009938 <__sinit+0x6c>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80098ee:	42a3      	cmp	r3, r4
 80098f0:	bf04      	itt	eq
 80098f2:	2301      	moveq	r3, #1
 80098f4:	61a3      	streq	r3, [r4, #24]
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 f820 	bl	800993c <__sfp>
 80098fc:	6060      	str	r0, [r4, #4]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f81c 	bl	800993c <__sfp>
 8009904:	60a0      	str	r0, [r4, #8]
 8009906:	4620      	mov	r0, r4
 8009908:	f000 f818 	bl	800993c <__sfp>
 800990c:	2200      	movs	r2, #0
 800990e:	60e0      	str	r0, [r4, #12]
 8009910:	2104      	movs	r1, #4
 8009912:	6860      	ldr	r0, [r4, #4]
 8009914:	f7ff ff82 	bl	800981c <std>
 8009918:	68a0      	ldr	r0, [r4, #8]
 800991a:	2201      	movs	r2, #1
 800991c:	2109      	movs	r1, #9
 800991e:	f7ff ff7d 	bl	800981c <std>
 8009922:	68e0      	ldr	r0, [r4, #12]
 8009924:	2202      	movs	r2, #2
 8009926:	2112      	movs	r1, #18
 8009928:	f7ff ff78 	bl	800981c <std>
 800992c:	2301      	movs	r3, #1
 800992e:	61a3      	str	r3, [r4, #24]
 8009930:	e7d2      	b.n	80098d8 <__sinit+0xc>
 8009932:	bf00      	nop
 8009934:	0800b7bc 	.word	0x0800b7bc
 8009938:	08009865 	.word	0x08009865

0800993c <__sfp>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	4607      	mov	r7, r0
 8009940:	f7ff ffac 	bl	800989c <__sfp_lock_acquire>
 8009944:	4b1e      	ldr	r3, [pc, #120]	; (80099c0 <__sfp+0x84>)
 8009946:	681e      	ldr	r6, [r3, #0]
 8009948:	69b3      	ldr	r3, [r6, #24]
 800994a:	b913      	cbnz	r3, 8009952 <__sfp+0x16>
 800994c:	4630      	mov	r0, r6
 800994e:	f7ff ffbd 	bl	80098cc <__sinit>
 8009952:	3648      	adds	r6, #72	; 0x48
 8009954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009958:	3b01      	subs	r3, #1
 800995a:	d503      	bpl.n	8009964 <__sfp+0x28>
 800995c:	6833      	ldr	r3, [r6, #0]
 800995e:	b30b      	cbz	r3, 80099a4 <__sfp+0x68>
 8009960:	6836      	ldr	r6, [r6, #0]
 8009962:	e7f7      	b.n	8009954 <__sfp+0x18>
 8009964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009968:	b9d5      	cbnz	r5, 80099a0 <__sfp+0x64>
 800996a:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <__sfp+0x88>)
 800996c:	60e3      	str	r3, [r4, #12]
 800996e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009972:	6665      	str	r5, [r4, #100]	; 0x64
 8009974:	f000 f847 	bl	8009a06 <__retarget_lock_init_recursive>
 8009978:	f7ff ff96 	bl	80098a8 <__sfp_lock_release>
 800997c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009984:	6025      	str	r5, [r4, #0]
 8009986:	61a5      	str	r5, [r4, #24]
 8009988:	2208      	movs	r2, #8
 800998a:	4629      	mov	r1, r5
 800998c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009990:	f7fd fab0 	bl	8006ef4 <memset>
 8009994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800999c:	4620      	mov	r0, r4
 800999e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a0:	3468      	adds	r4, #104	; 0x68
 80099a2:	e7d9      	b.n	8009958 <__sfp+0x1c>
 80099a4:	2104      	movs	r1, #4
 80099a6:	4638      	mov	r0, r7
 80099a8:	f7ff ff62 	bl	8009870 <__sfmoreglue>
 80099ac:	4604      	mov	r4, r0
 80099ae:	6030      	str	r0, [r6, #0]
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d1d5      	bne.n	8009960 <__sfp+0x24>
 80099b4:	f7ff ff78 	bl	80098a8 <__sfp_lock_release>
 80099b8:	230c      	movs	r3, #12
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	e7ee      	b.n	800999c <__sfp+0x60>
 80099be:	bf00      	nop
 80099c0:	0800b7bc 	.word	0x0800b7bc
 80099c4:	ffff0001 	.word	0xffff0001

080099c8 <_fwalk_reent>:
 80099c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099cc:	4606      	mov	r6, r0
 80099ce:	4688      	mov	r8, r1
 80099d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099d4:	2700      	movs	r7, #0
 80099d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099da:	f1b9 0901 	subs.w	r9, r9, #1
 80099de:	d505      	bpl.n	80099ec <_fwalk_reent+0x24>
 80099e0:	6824      	ldr	r4, [r4, #0]
 80099e2:	2c00      	cmp	r4, #0
 80099e4:	d1f7      	bne.n	80099d6 <_fwalk_reent+0xe>
 80099e6:	4638      	mov	r0, r7
 80099e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ec:	89ab      	ldrh	r3, [r5, #12]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d907      	bls.n	8009a02 <_fwalk_reent+0x3a>
 80099f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099f6:	3301      	adds	r3, #1
 80099f8:	d003      	beq.n	8009a02 <_fwalk_reent+0x3a>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4630      	mov	r0, r6
 80099fe:	47c0      	blx	r8
 8009a00:	4307      	orrs	r7, r0
 8009a02:	3568      	adds	r5, #104	; 0x68
 8009a04:	e7e9      	b.n	80099da <_fwalk_reent+0x12>

08009a06 <__retarget_lock_init_recursive>:
 8009a06:	4770      	bx	lr

08009a08 <__retarget_lock_acquire_recursive>:
 8009a08:	4770      	bx	lr

08009a0a <__retarget_lock_release_recursive>:
 8009a0a:	4770      	bx	lr

08009a0c <__swhatbuf_r>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	460e      	mov	r6, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	2900      	cmp	r1, #0
 8009a16:	b096      	sub	sp, #88	; 0x58
 8009a18:	4614      	mov	r4, r2
 8009a1a:	461d      	mov	r5, r3
 8009a1c:	da08      	bge.n	8009a30 <__swhatbuf_r+0x24>
 8009a1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	602a      	str	r2, [r5, #0]
 8009a26:	061a      	lsls	r2, r3, #24
 8009a28:	d410      	bmi.n	8009a4c <__swhatbuf_r+0x40>
 8009a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2e:	e00e      	b.n	8009a4e <__swhatbuf_r+0x42>
 8009a30:	466a      	mov	r2, sp
 8009a32:	f000 f903 	bl	8009c3c <_fstat_r>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	dbf1      	blt.n	8009a1e <__swhatbuf_r+0x12>
 8009a3a:	9a01      	ldr	r2, [sp, #4]
 8009a3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a44:	425a      	negs	r2, r3
 8009a46:	415a      	adcs	r2, r3
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	e7ee      	b.n	8009a2a <__swhatbuf_r+0x1e>
 8009a4c:	2340      	movs	r3, #64	; 0x40
 8009a4e:	2000      	movs	r0, #0
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	b016      	add	sp, #88	; 0x58
 8009a54:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a58 <__smakebuf_r>:
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a5c:	079d      	lsls	r5, r3, #30
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	d507      	bpl.n	8009a74 <__smakebuf_r+0x1c>
 8009a64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	b002      	add	sp, #8
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	ab01      	add	r3, sp, #4
 8009a76:	466a      	mov	r2, sp
 8009a78:	f7ff ffc8 	bl	8009a0c <__swhatbuf_r>
 8009a7c:	9900      	ldr	r1, [sp, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	4630      	mov	r0, r6
 8009a82:	f7ff f963 	bl	8008d4c <_malloc_r>
 8009a86:	b948      	cbnz	r0, 8009a9c <__smakebuf_r+0x44>
 8009a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8c:	059a      	lsls	r2, r3, #22
 8009a8e:	d4ef      	bmi.n	8009a70 <__smakebuf_r+0x18>
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	f043 0302 	orr.w	r3, r3, #2
 8009a98:	81a3      	strh	r3, [r4, #12]
 8009a9a:	e7e3      	b.n	8009a64 <__smakebuf_r+0xc>
 8009a9c:	4b0d      	ldr	r3, [pc, #52]	; (8009ad4 <__smakebuf_r+0x7c>)
 8009a9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	6020      	str	r0, [r4, #0]
 8009aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa8:	81a3      	strh	r3, [r4, #12]
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	6163      	str	r3, [r4, #20]
 8009aae:	9b01      	ldr	r3, [sp, #4]
 8009ab0:	6120      	str	r0, [r4, #16]
 8009ab2:	b15b      	cbz	r3, 8009acc <__smakebuf_r+0x74>
 8009ab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 f8d1 	bl	8009c60 <_isatty_r>
 8009abe:	b128      	cbz	r0, 8009acc <__smakebuf_r+0x74>
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f023 0303 	bic.w	r3, r3, #3
 8009ac6:	f043 0301 	orr.w	r3, r3, #1
 8009aca:	81a3      	strh	r3, [r4, #12]
 8009acc:	89a0      	ldrh	r0, [r4, #12]
 8009ace:	4305      	orrs	r5, r0
 8009ad0:	81a5      	strh	r5, [r4, #12]
 8009ad2:	e7cd      	b.n	8009a70 <__smakebuf_r+0x18>
 8009ad4:	08009865 	.word	0x08009865

08009ad8 <_malloc_usable_size_r>:
 8009ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009adc:	1f18      	subs	r0, r3, #4
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bfbc      	itt	lt
 8009ae2:	580b      	ldrlt	r3, [r1, r0]
 8009ae4:	18c0      	addlt	r0, r0, r3
 8009ae6:	4770      	bx	lr

08009ae8 <_raise_r>:
 8009ae8:	291f      	cmp	r1, #31
 8009aea:	b538      	push	{r3, r4, r5, lr}
 8009aec:	4604      	mov	r4, r0
 8009aee:	460d      	mov	r5, r1
 8009af0:	d904      	bls.n	8009afc <_raise_r+0x14>
 8009af2:	2316      	movs	r3, #22
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	f04f 30ff 	mov.w	r0, #4294967295
 8009afa:	bd38      	pop	{r3, r4, r5, pc}
 8009afc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009afe:	b112      	cbz	r2, 8009b06 <_raise_r+0x1e>
 8009b00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009b04:	b94b      	cbnz	r3, 8009b1a <_raise_r+0x32>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 f830 	bl	8009b6c <_getpid_r>
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4601      	mov	r1, r0
 8009b10:	4620      	mov	r0, r4
 8009b12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b16:	f000 b817 	b.w	8009b48 <_kill_r>
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d00a      	beq.n	8009b34 <_raise_r+0x4c>
 8009b1e:	1c59      	adds	r1, r3, #1
 8009b20:	d103      	bne.n	8009b2a <_raise_r+0x42>
 8009b22:	2316      	movs	r3, #22
 8009b24:	6003      	str	r3, [r0, #0]
 8009b26:	2001      	movs	r0, #1
 8009b28:	e7e7      	b.n	8009afa <_raise_r+0x12>
 8009b2a:	2400      	movs	r4, #0
 8009b2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009b30:	4628      	mov	r0, r5
 8009b32:	4798      	blx	r3
 8009b34:	2000      	movs	r0, #0
 8009b36:	e7e0      	b.n	8009afa <_raise_r+0x12>

08009b38 <raise>:
 8009b38:	4b02      	ldr	r3, [pc, #8]	; (8009b44 <raise+0xc>)
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	6818      	ldr	r0, [r3, #0]
 8009b3e:	f7ff bfd3 	b.w	8009ae8 <_raise_r>
 8009b42:	bf00      	nop
 8009b44:	20000050 	.word	0x20000050

08009b48 <_kill_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	; (8009b68 <_kill_r+0x20>)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	4604      	mov	r4, r0
 8009b50:	4608      	mov	r0, r1
 8009b52:	4611      	mov	r1, r2
 8009b54:	602b      	str	r3, [r5, #0]
 8009b56:	f001 f975 	bl	800ae44 <_kill>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	d102      	bne.n	8009b64 <_kill_r+0x1c>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	b103      	cbz	r3, 8009b64 <_kill_r+0x1c>
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	bd38      	pop	{r3, r4, r5, pc}
 8009b66:	bf00      	nop
 8009b68:	200002a8 	.word	0x200002a8

08009b6c <_getpid_r>:
 8009b6c:	f001 b95a 	b.w	800ae24 <_getpid>

08009b70 <__sread>:
 8009b70:	b510      	push	{r4, lr}
 8009b72:	460c      	mov	r4, r1
 8009b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b78:	f000 f894 	bl	8009ca4 <_read_r>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	bfab      	itete	ge
 8009b80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b82:	89a3      	ldrhlt	r3, [r4, #12]
 8009b84:	181b      	addge	r3, r3, r0
 8009b86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b8a:	bfac      	ite	ge
 8009b8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b8e:	81a3      	strhlt	r3, [r4, #12]
 8009b90:	bd10      	pop	{r4, pc}

08009b92 <__swrite>:
 8009b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b96:	461f      	mov	r7, r3
 8009b98:	898b      	ldrh	r3, [r1, #12]
 8009b9a:	05db      	lsls	r3, r3, #23
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	460c      	mov	r4, r1
 8009ba0:	4616      	mov	r6, r2
 8009ba2:	d505      	bpl.n	8009bb0 <__swrite+0x1e>
 8009ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba8:	2302      	movs	r3, #2
 8009baa:	2200      	movs	r2, #0
 8009bac:	f000 f868 	bl	8009c80 <_lseek_r>
 8009bb0:	89a3      	ldrh	r3, [r4, #12]
 8009bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bba:	81a3      	strh	r3, [r4, #12]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	463b      	mov	r3, r7
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc6:	f000 b817 	b.w	8009bf8 <_write_r>

08009bca <__sseek>:
 8009bca:	b510      	push	{r4, lr}
 8009bcc:	460c      	mov	r4, r1
 8009bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd2:	f000 f855 	bl	8009c80 <_lseek_r>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	89a3      	ldrh	r3, [r4, #12]
 8009bda:	bf15      	itete	ne
 8009bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009be6:	81a3      	strheq	r3, [r4, #12]
 8009be8:	bf18      	it	ne
 8009bea:	81a3      	strhne	r3, [r4, #12]
 8009bec:	bd10      	pop	{r4, pc}

08009bee <__sclose>:
 8009bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bf2:	f000 b813 	b.w	8009c1c <_close_r>
	...

08009bf8 <_write_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	4d07      	ldr	r5, [pc, #28]	; (8009c18 <_write_r+0x20>)
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4608      	mov	r0, r1
 8009c00:	4611      	mov	r1, r2
 8009c02:	2200      	movs	r2, #0
 8009c04:	602a      	str	r2, [r5, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f001 f942 	bl	800ae90 <_write>
 8009c0c:	1c43      	adds	r3, r0, #1
 8009c0e:	d102      	bne.n	8009c16 <_write_r+0x1e>
 8009c10:	682b      	ldr	r3, [r5, #0]
 8009c12:	b103      	cbz	r3, 8009c16 <_write_r+0x1e>
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	bd38      	pop	{r3, r4, r5, pc}
 8009c18:	200002a8 	.word	0x200002a8

08009c1c <_close_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	4d06      	ldr	r5, [pc, #24]	; (8009c38 <_close_r+0x1c>)
 8009c20:	2300      	movs	r3, #0
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f001 f8ec 	bl	800ae04 <_close>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_close_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_close_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	200002a8 	.word	0x200002a8

08009c3c <_fstat_r>:
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	4d07      	ldr	r5, [pc, #28]	; (8009c5c <_fstat_r+0x20>)
 8009c40:	2300      	movs	r3, #0
 8009c42:	4604      	mov	r4, r0
 8009c44:	4608      	mov	r0, r1
 8009c46:	4611      	mov	r1, r2
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f001 f8e3 	bl	800ae14 <_fstat>
 8009c4e:	1c43      	adds	r3, r0, #1
 8009c50:	d102      	bne.n	8009c58 <_fstat_r+0x1c>
 8009c52:	682b      	ldr	r3, [r5, #0]
 8009c54:	b103      	cbz	r3, 8009c58 <_fstat_r+0x1c>
 8009c56:	6023      	str	r3, [r4, #0]
 8009c58:	bd38      	pop	{r3, r4, r5, pc}
 8009c5a:	bf00      	nop
 8009c5c:	200002a8 	.word	0x200002a8

08009c60 <_isatty_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	4d06      	ldr	r5, [pc, #24]	; (8009c7c <_isatty_r+0x1c>)
 8009c64:	2300      	movs	r3, #0
 8009c66:	4604      	mov	r4, r0
 8009c68:	4608      	mov	r0, r1
 8009c6a:	602b      	str	r3, [r5, #0]
 8009c6c:	f001 f8e2 	bl	800ae34 <_isatty>
 8009c70:	1c43      	adds	r3, r0, #1
 8009c72:	d102      	bne.n	8009c7a <_isatty_r+0x1a>
 8009c74:	682b      	ldr	r3, [r5, #0]
 8009c76:	b103      	cbz	r3, 8009c7a <_isatty_r+0x1a>
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	200002a8 	.word	0x200002a8

08009c80 <_lseek_r>:
 8009c80:	b538      	push	{r3, r4, r5, lr}
 8009c82:	4d07      	ldr	r5, [pc, #28]	; (8009ca0 <_lseek_r+0x20>)
 8009c84:	4604      	mov	r4, r0
 8009c86:	4608      	mov	r0, r1
 8009c88:	4611      	mov	r1, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	602a      	str	r2, [r5, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f001 f8e0 	bl	800ae54 <_lseek>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_lseek_r+0x1e>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_lseek_r+0x1e>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	200002a8 	.word	0x200002a8

08009ca4 <_read_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	; (8009cc4 <_read_r+0x20>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4608      	mov	r0, r1
 8009cac:	4611      	mov	r1, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f001 f8d6 	bl	800ae64 <_read>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_read_r+0x1e>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_read_r+0x1e>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	200002a8 	.word	0x200002a8

08009cc8 <cos>:
 8009cc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cca:	ec53 2b10 	vmov	r2, r3, d0
 8009cce:	4826      	ldr	r0, [pc, #152]	; (8009d68 <cos+0xa0>)
 8009cd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009cd4:	4281      	cmp	r1, r0
 8009cd6:	dc06      	bgt.n	8009ce6 <cos+0x1e>
 8009cd8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009d60 <cos+0x98>
 8009cdc:	b005      	add	sp, #20
 8009cde:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ce2:	f000 baa9 	b.w	800a238 <__kernel_cos>
 8009ce6:	4821      	ldr	r0, [pc, #132]	; (8009d6c <cos+0xa4>)
 8009ce8:	4281      	cmp	r1, r0
 8009cea:	dd09      	ble.n	8009d00 <cos+0x38>
 8009cec:	ee10 0a10 	vmov	r0, s0
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	f7f6 fad1 	bl	8000298 <__aeabi_dsub>
 8009cf6:	ec41 0b10 	vmov	d0, r0, r1
 8009cfa:	b005      	add	sp, #20
 8009cfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8009d00:	4668      	mov	r0, sp
 8009d02:	f000 f88d 	bl	8009e20 <__ieee754_rem_pio2>
 8009d06:	f000 0003 	and.w	r0, r0, #3
 8009d0a:	2801      	cmp	r0, #1
 8009d0c:	d00b      	beq.n	8009d26 <cos+0x5e>
 8009d0e:	2802      	cmp	r0, #2
 8009d10:	d016      	beq.n	8009d40 <cos+0x78>
 8009d12:	b9e0      	cbnz	r0, 8009d4e <cos+0x86>
 8009d14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d18:	ed9d 0b00 	vldr	d0, [sp]
 8009d1c:	f000 fa8c 	bl	800a238 <__kernel_cos>
 8009d20:	ec51 0b10 	vmov	r0, r1, d0
 8009d24:	e7e7      	b.n	8009cf6 <cos+0x2e>
 8009d26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d2a:	ed9d 0b00 	vldr	d0, [sp]
 8009d2e:	f000 fe9b 	bl	800aa68 <__kernel_sin>
 8009d32:	ec53 2b10 	vmov	r2, r3, d0
 8009d36:	ee10 0a10 	vmov	r0, s0
 8009d3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009d3e:	e7da      	b.n	8009cf6 <cos+0x2e>
 8009d40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d44:	ed9d 0b00 	vldr	d0, [sp]
 8009d48:	f000 fa76 	bl	800a238 <__kernel_cos>
 8009d4c:	e7f1      	b.n	8009d32 <cos+0x6a>
 8009d4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009d52:	ed9d 0b00 	vldr	d0, [sp]
 8009d56:	2001      	movs	r0, #1
 8009d58:	f000 fe86 	bl	800aa68 <__kernel_sin>
 8009d5c:	e7e0      	b.n	8009d20 <cos+0x58>
 8009d5e:	bf00      	nop
	...
 8009d68:	3fe921fb 	.word	0x3fe921fb
 8009d6c:	7fefffff 	.word	0x7fefffff

08009d70 <sin>:
 8009d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d72:	ec53 2b10 	vmov	r2, r3, d0
 8009d76:	4828      	ldr	r0, [pc, #160]	; (8009e18 <sin+0xa8>)
 8009d78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d7c:	4281      	cmp	r1, r0
 8009d7e:	dc07      	bgt.n	8009d90 <sin+0x20>
 8009d80:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009e10 <sin+0xa0>
 8009d84:	2000      	movs	r0, #0
 8009d86:	b005      	add	sp, #20
 8009d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d8c:	f000 be6c 	b.w	800aa68 <__kernel_sin>
 8009d90:	4822      	ldr	r0, [pc, #136]	; (8009e1c <sin+0xac>)
 8009d92:	4281      	cmp	r1, r0
 8009d94:	dd09      	ble.n	8009daa <sin+0x3a>
 8009d96:	ee10 0a10 	vmov	r0, s0
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	f7f6 fa7c 	bl	8000298 <__aeabi_dsub>
 8009da0:	ec41 0b10 	vmov	d0, r0, r1
 8009da4:	b005      	add	sp, #20
 8009da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8009daa:	4668      	mov	r0, sp
 8009dac:	f000 f838 	bl	8009e20 <__ieee754_rem_pio2>
 8009db0:	f000 0003 	and.w	r0, r0, #3
 8009db4:	2801      	cmp	r0, #1
 8009db6:	d00c      	beq.n	8009dd2 <sin+0x62>
 8009db8:	2802      	cmp	r0, #2
 8009dba:	d011      	beq.n	8009de0 <sin+0x70>
 8009dbc:	b9f0      	cbnz	r0, 8009dfc <sin+0x8c>
 8009dbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dc2:	ed9d 0b00 	vldr	d0, [sp]
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f000 fe4e 	bl	800aa68 <__kernel_sin>
 8009dcc:	ec51 0b10 	vmov	r0, r1, d0
 8009dd0:	e7e6      	b.n	8009da0 <sin+0x30>
 8009dd2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dd6:	ed9d 0b00 	vldr	d0, [sp]
 8009dda:	f000 fa2d 	bl	800a238 <__kernel_cos>
 8009dde:	e7f5      	b.n	8009dcc <sin+0x5c>
 8009de0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009de4:	ed9d 0b00 	vldr	d0, [sp]
 8009de8:	2001      	movs	r0, #1
 8009dea:	f000 fe3d 	bl	800aa68 <__kernel_sin>
 8009dee:	ec53 2b10 	vmov	r2, r3, d0
 8009df2:	ee10 0a10 	vmov	r0, s0
 8009df6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dfa:	e7d1      	b.n	8009da0 <sin+0x30>
 8009dfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e00:	ed9d 0b00 	vldr	d0, [sp]
 8009e04:	f000 fa18 	bl	800a238 <__kernel_cos>
 8009e08:	e7f1      	b.n	8009dee <sin+0x7e>
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w
	...
 8009e18:	3fe921fb 	.word	0x3fe921fb
 8009e1c:	7fefffff 	.word	0x7fefffff

08009e20 <__ieee754_rem_pio2>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	ed2d 8b02 	vpush	{d8}
 8009e28:	ec55 4b10 	vmov	r4, r5, d0
 8009e2c:	4bca      	ldr	r3, [pc, #808]	; (800a158 <__ieee754_rem_pio2+0x338>)
 8009e2e:	b08b      	sub	sp, #44	; 0x2c
 8009e30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009e34:	4598      	cmp	r8, r3
 8009e36:	4682      	mov	sl, r0
 8009e38:	9502      	str	r5, [sp, #8]
 8009e3a:	dc08      	bgt.n	8009e4e <__ieee754_rem_pio2+0x2e>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	ed80 0b00 	vstr	d0, [r0]
 8009e44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009e48:	f04f 0b00 	mov.w	fp, #0
 8009e4c:	e028      	b.n	8009ea0 <__ieee754_rem_pio2+0x80>
 8009e4e:	4bc3      	ldr	r3, [pc, #780]	; (800a15c <__ieee754_rem_pio2+0x33c>)
 8009e50:	4598      	cmp	r8, r3
 8009e52:	dc78      	bgt.n	8009f46 <__ieee754_rem_pio2+0x126>
 8009e54:	9b02      	ldr	r3, [sp, #8]
 8009e56:	4ec2      	ldr	r6, [pc, #776]	; (800a160 <__ieee754_rem_pio2+0x340>)
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	ee10 0a10 	vmov	r0, s0
 8009e5e:	a3b0      	add	r3, pc, #704	; (adr r3, 800a120 <__ieee754_rem_pio2+0x300>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	4629      	mov	r1, r5
 8009e66:	dd39      	ble.n	8009edc <__ieee754_rem_pio2+0xbc>
 8009e68:	f7f6 fa16 	bl	8000298 <__aeabi_dsub>
 8009e6c:	45b0      	cmp	r8, r6
 8009e6e:	4604      	mov	r4, r0
 8009e70:	460d      	mov	r5, r1
 8009e72:	d01b      	beq.n	8009eac <__ieee754_rem_pio2+0x8c>
 8009e74:	a3ac      	add	r3, pc, #688	; (adr r3, 800a128 <__ieee754_rem_pio2+0x308>)
 8009e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7a:	f7f6 fa0d 	bl	8000298 <__aeabi_dsub>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	e9ca 2300 	strd	r2, r3, [sl]
 8009e86:	4620      	mov	r0, r4
 8009e88:	4629      	mov	r1, r5
 8009e8a:	f7f6 fa05 	bl	8000298 <__aeabi_dsub>
 8009e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a128 <__ieee754_rem_pio2+0x308>)
 8009e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e94:	f7f6 fa00 	bl	8000298 <__aeabi_dsub>
 8009e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e9c:	f04f 0b01 	mov.w	fp, #1
 8009ea0:	4658      	mov	r0, fp
 8009ea2:	b00b      	add	sp, #44	; 0x2c
 8009ea4:	ecbd 8b02 	vpop	{d8}
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	a3a0      	add	r3, pc, #640	; (adr r3, 800a130 <__ieee754_rem_pio2+0x310>)
 8009eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb2:	f7f6 f9f1 	bl	8000298 <__aeabi_dsub>
 8009eb6:	a3a0      	add	r3, pc, #640	; (adr r3, 800a138 <__ieee754_rem_pio2+0x318>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	460d      	mov	r5, r1
 8009ec0:	f7f6 f9ea 	bl	8000298 <__aeabi_dsub>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	e9ca 2300 	strd	r2, r3, [sl]
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7f6 f9e2 	bl	8000298 <__aeabi_dsub>
 8009ed4:	a398      	add	r3, pc, #608	; (adr r3, 800a138 <__ieee754_rem_pio2+0x318>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	e7db      	b.n	8009e94 <__ieee754_rem_pio2+0x74>
 8009edc:	f7f6 f9de 	bl	800029c <__adddf3>
 8009ee0:	45b0      	cmp	r8, r6
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	d016      	beq.n	8009f16 <__ieee754_rem_pio2+0xf6>
 8009ee8:	a38f      	add	r3, pc, #572	; (adr r3, 800a128 <__ieee754_rem_pio2+0x308>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 f9d5 	bl	800029c <__adddf3>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	e9ca 2300 	strd	r2, r3, [sl]
 8009efa:	4620      	mov	r0, r4
 8009efc:	4629      	mov	r1, r5
 8009efe:	f7f6 f9cb 	bl	8000298 <__aeabi_dsub>
 8009f02:	a389      	add	r3, pc, #548	; (adr r3, 800a128 <__ieee754_rem_pio2+0x308>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	f7f6 f9c8 	bl	800029c <__adddf3>
 8009f0c:	f04f 3bff 	mov.w	fp, #4294967295
 8009f10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f14:	e7c4      	b.n	8009ea0 <__ieee754_rem_pio2+0x80>
 8009f16:	a386      	add	r3, pc, #536	; (adr r3, 800a130 <__ieee754_rem_pio2+0x310>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f9be 	bl	800029c <__adddf3>
 8009f20:	a385      	add	r3, pc, #532	; (adr r3, 800a138 <__ieee754_rem_pio2+0x318>)
 8009f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f26:	4604      	mov	r4, r0
 8009f28:	460d      	mov	r5, r1
 8009f2a:	f7f6 f9b7 	bl	800029c <__adddf3>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	460b      	mov	r3, r1
 8009f32:	e9ca 2300 	strd	r2, r3, [sl]
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 f9ad 	bl	8000298 <__aeabi_dsub>
 8009f3e:	a37e      	add	r3, pc, #504	; (adr r3, 800a138 <__ieee754_rem_pio2+0x318>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	e7e0      	b.n	8009f08 <__ieee754_rem_pio2+0xe8>
 8009f46:	4b87      	ldr	r3, [pc, #540]	; (800a164 <__ieee754_rem_pio2+0x344>)
 8009f48:	4598      	cmp	r8, r3
 8009f4a:	f300 80d9 	bgt.w	800a100 <__ieee754_rem_pio2+0x2e0>
 8009f4e:	f000 fe49 	bl	800abe4 <fabs>
 8009f52:	ec55 4b10 	vmov	r4, r5, d0
 8009f56:	ee10 0a10 	vmov	r0, s0
 8009f5a:	a379      	add	r3, pc, #484	; (adr r3, 800a140 <__ieee754_rem_pio2+0x320>)
 8009f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 fb51 	bl	8000608 <__aeabi_dmul>
 8009f66:	4b80      	ldr	r3, [pc, #512]	; (800a168 <__ieee754_rem_pio2+0x348>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f7f6 f997 	bl	800029c <__adddf3>
 8009f6e:	f7f6 fdfb 	bl	8000b68 <__aeabi_d2iz>
 8009f72:	4683      	mov	fp, r0
 8009f74:	f7f6 fade 	bl	8000534 <__aeabi_i2d>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	ec43 2b18 	vmov	d8, r2, r3
 8009f80:	a367      	add	r3, pc, #412	; (adr r3, 800a120 <__ieee754_rem_pio2+0x300>)
 8009f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f86:	f7f6 fb3f 	bl	8000608 <__aeabi_dmul>
 8009f8a:	4602      	mov	r2, r0
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	4620      	mov	r0, r4
 8009f90:	4629      	mov	r1, r5
 8009f92:	f7f6 f981 	bl	8000298 <__aeabi_dsub>
 8009f96:	a364      	add	r3, pc, #400	; (adr r3, 800a128 <__ieee754_rem_pio2+0x308>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	460f      	mov	r7, r1
 8009fa0:	ec51 0b18 	vmov	r0, r1, d8
 8009fa4:	f7f6 fb30 	bl	8000608 <__aeabi_dmul>
 8009fa8:	f1bb 0f1f 	cmp.w	fp, #31
 8009fac:	4604      	mov	r4, r0
 8009fae:	460d      	mov	r5, r1
 8009fb0:	dc0d      	bgt.n	8009fce <__ieee754_rem_pio2+0x1ae>
 8009fb2:	4b6e      	ldr	r3, [pc, #440]	; (800a16c <__ieee754_rem_pio2+0x34c>)
 8009fb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fbc:	4543      	cmp	r3, r8
 8009fbe:	d006      	beq.n	8009fce <__ieee754_rem_pio2+0x1ae>
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f966 	bl	8000298 <__aeabi_dsub>
 8009fcc:	e00f      	b.n	8009fee <__ieee754_rem_pio2+0x1ce>
 8009fce:	462b      	mov	r3, r5
 8009fd0:	4622      	mov	r2, r4
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f95f 	bl	8000298 <__aeabi_dsub>
 8009fda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009fde:	9303      	str	r3, [sp, #12]
 8009fe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fe4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009fe8:	f1b8 0f10 	cmp.w	r8, #16
 8009fec:	dc02      	bgt.n	8009ff4 <__ieee754_rem_pio2+0x1d4>
 8009fee:	e9ca 0100 	strd	r0, r1, [sl]
 8009ff2:	e039      	b.n	800a068 <__ieee754_rem_pio2+0x248>
 8009ff4:	a34e      	add	r3, pc, #312	; (adr r3, 800a130 <__ieee754_rem_pio2+0x310>)
 8009ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffa:	ec51 0b18 	vmov	r0, r1, d8
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	4604      	mov	r4, r0
 800a004:	460d      	mov	r5, r1
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 f943 	bl	8000298 <__aeabi_dsub>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4680      	mov	r8, r0
 800a018:	4689      	mov	r9, r1
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 f93b 	bl	8000298 <__aeabi_dsub>
 800a022:	4622      	mov	r2, r4
 800a024:	462b      	mov	r3, r5
 800a026:	f7f6 f937 	bl	8000298 <__aeabi_dsub>
 800a02a:	a343      	add	r3, pc, #268	; (adr r3, 800a138 <__ieee754_rem_pio2+0x318>)
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	4604      	mov	r4, r0
 800a032:	460d      	mov	r5, r1
 800a034:	ec51 0b18 	vmov	r0, r1, d8
 800a038:	f7f6 fae6 	bl	8000608 <__aeabi_dmul>
 800a03c:	4622      	mov	r2, r4
 800a03e:	462b      	mov	r3, r5
 800a040:	f7f6 f92a 	bl	8000298 <__aeabi_dsub>
 800a044:	4602      	mov	r2, r0
 800a046:	460b      	mov	r3, r1
 800a048:	4604      	mov	r4, r0
 800a04a:	460d      	mov	r5, r1
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 f922 	bl	8000298 <__aeabi_dsub>
 800a054:	9a03      	ldr	r2, [sp, #12]
 800a056:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	2b31      	cmp	r3, #49	; 0x31
 800a05e:	dc24      	bgt.n	800a0aa <__ieee754_rem_pio2+0x28a>
 800a060:	e9ca 0100 	strd	r0, r1, [sl]
 800a064:	4646      	mov	r6, r8
 800a066:	464f      	mov	r7, r9
 800a068:	e9da 8900 	ldrd	r8, r9, [sl]
 800a06c:	4630      	mov	r0, r6
 800a06e:	4642      	mov	r2, r8
 800a070:	464b      	mov	r3, r9
 800a072:	4639      	mov	r1, r7
 800a074:	f7f6 f910 	bl	8000298 <__aeabi_dsub>
 800a078:	462b      	mov	r3, r5
 800a07a:	4622      	mov	r2, r4
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	9b02      	ldr	r3, [sp, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a088:	f6bf af0a 	bge.w	8009ea0 <__ieee754_rem_pio2+0x80>
 800a08c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a090:	f8ca 3004 	str.w	r3, [sl, #4]
 800a094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a098:	f8ca 8000 	str.w	r8, [sl]
 800a09c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a0a0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a0a4:	f1cb 0b00 	rsb	fp, fp, #0
 800a0a8:	e6fa      	b.n	8009ea0 <__ieee754_rem_pio2+0x80>
 800a0aa:	a327      	add	r3, pc, #156	; (adr r3, 800a148 <__ieee754_rem_pio2+0x328>)
 800a0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b0:	ec51 0b18 	vmov	r0, r1, d8
 800a0b4:	f7f6 faa8 	bl	8000608 <__aeabi_dmul>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	460d      	mov	r5, r1
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4640      	mov	r0, r8
 800a0c2:	4649      	mov	r1, r9
 800a0c4:	f7f6 f8e8 	bl	8000298 <__aeabi_dsub>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4606      	mov	r6, r0
 800a0ce:	460f      	mov	r7, r1
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	f7f6 f8e0 	bl	8000298 <__aeabi_dsub>
 800a0d8:	4622      	mov	r2, r4
 800a0da:	462b      	mov	r3, r5
 800a0dc:	f7f6 f8dc 	bl	8000298 <__aeabi_dsub>
 800a0e0:	a31b      	add	r3, pc, #108	; (adr r3, 800a150 <__ieee754_rem_pio2+0x330>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	ec51 0b18 	vmov	r0, r1, d8
 800a0ee:	f7f6 fa8b 	bl	8000608 <__aeabi_dmul>
 800a0f2:	4622      	mov	r2, r4
 800a0f4:	462b      	mov	r3, r5
 800a0f6:	f7f6 f8cf 	bl	8000298 <__aeabi_dsub>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	460d      	mov	r5, r1
 800a0fe:	e75f      	b.n	8009fc0 <__ieee754_rem_pio2+0x1a0>
 800a100:	4b1b      	ldr	r3, [pc, #108]	; (800a170 <__ieee754_rem_pio2+0x350>)
 800a102:	4598      	cmp	r8, r3
 800a104:	dd36      	ble.n	800a174 <__ieee754_rem_pio2+0x354>
 800a106:	ee10 2a10 	vmov	r2, s0
 800a10a:	462b      	mov	r3, r5
 800a10c:	4620      	mov	r0, r4
 800a10e:	4629      	mov	r1, r5
 800a110:	f7f6 f8c2 	bl	8000298 <__aeabi_dsub>
 800a114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a118:	e9ca 0100 	strd	r0, r1, [sl]
 800a11c:	e694      	b.n	8009e48 <__ieee754_rem_pio2+0x28>
 800a11e:	bf00      	nop
 800a120:	54400000 	.word	0x54400000
 800a124:	3ff921fb 	.word	0x3ff921fb
 800a128:	1a626331 	.word	0x1a626331
 800a12c:	3dd0b461 	.word	0x3dd0b461
 800a130:	1a600000 	.word	0x1a600000
 800a134:	3dd0b461 	.word	0x3dd0b461
 800a138:	2e037073 	.word	0x2e037073
 800a13c:	3ba3198a 	.word	0x3ba3198a
 800a140:	6dc9c883 	.word	0x6dc9c883
 800a144:	3fe45f30 	.word	0x3fe45f30
 800a148:	2e000000 	.word	0x2e000000
 800a14c:	3ba3198a 	.word	0x3ba3198a
 800a150:	252049c1 	.word	0x252049c1
 800a154:	397b839a 	.word	0x397b839a
 800a158:	3fe921fb 	.word	0x3fe921fb
 800a15c:	4002d97b 	.word	0x4002d97b
 800a160:	3ff921fb 	.word	0x3ff921fb
 800a164:	413921fb 	.word	0x413921fb
 800a168:	3fe00000 	.word	0x3fe00000
 800a16c:	0800bb94 	.word	0x0800bb94
 800a170:	7fefffff 	.word	0x7fefffff
 800a174:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a178:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a17c:	ee10 0a10 	vmov	r0, s0
 800a180:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a184:	ee10 6a10 	vmov	r6, s0
 800a188:	460f      	mov	r7, r1
 800a18a:	f7f6 fced 	bl	8000b68 <__aeabi_d2iz>
 800a18e:	f7f6 f9d1 	bl	8000534 <__aeabi_i2d>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4630      	mov	r0, r6
 800a198:	4639      	mov	r1, r7
 800a19a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a19e:	f7f6 f87b 	bl	8000298 <__aeabi_dsub>
 800a1a2:	4b23      	ldr	r3, [pc, #140]	; (800a230 <__ieee754_rem_pio2+0x410>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f7f6 fa2f 	bl	8000608 <__aeabi_dmul>
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	f7f6 fcdb 	bl	8000b68 <__aeabi_d2iz>
 800a1b2:	f7f6 f9bf 	bl	8000534 <__aeabi_i2d>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a1c2:	f7f6 f869 	bl	8000298 <__aeabi_dsub>
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <__ieee754_rem_pio2+0x410>)
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f7f6 fa1d 	bl	8000608 <__aeabi_dmul>
 800a1ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a1d2:	ad04      	add	r5, sp, #16
 800a1d4:	f04f 0803 	mov.w	r8, #3
 800a1d8:	46a9      	mov	r9, r5
 800a1da:	2600      	movs	r6, #0
 800a1dc:	2700      	movs	r7, #0
 800a1de:	4632      	mov	r2, r6
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a1e6:	46c3      	mov	fp, r8
 800a1e8:	3d08      	subs	r5, #8
 800a1ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1ee:	f7f6 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d1f3      	bne.n	800a1de <__ieee754_rem_pio2+0x3be>
 800a1f6:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <__ieee754_rem_pio2+0x414>)
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4622      	mov	r2, r4
 800a200:	465b      	mov	r3, fp
 800a202:	4651      	mov	r1, sl
 800a204:	4648      	mov	r0, r9
 800a206:	f000 f8df 	bl	800a3c8 <__kernel_rem_pio2>
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	4683      	mov	fp, r0
 800a210:	f6bf ae46 	bge.w	8009ea0 <__ieee754_rem_pio2+0x80>
 800a214:	e9da 2100 	ldrd	r2, r1, [sl]
 800a218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a21c:	e9ca 2300 	strd	r2, r3, [sl]
 800a220:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a228:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a22c:	e73a      	b.n	800a0a4 <__ieee754_rem_pio2+0x284>
 800a22e:	bf00      	nop
 800a230:	41700000 	.word	0x41700000
 800a234:	0800bc14 	.word	0x0800bc14

0800a238 <__kernel_cos>:
 800a238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	ec57 6b10 	vmov	r6, r7, d0
 800a240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a248:	ed8d 1b00 	vstr	d1, [sp]
 800a24c:	da07      	bge.n	800a25e <__kernel_cos+0x26>
 800a24e:	ee10 0a10 	vmov	r0, s0
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 fc88 	bl	8000b68 <__aeabi_d2iz>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f000 8088 	beq.w	800a36e <__kernel_cos+0x136>
 800a25e:	4632      	mov	r2, r6
 800a260:	463b      	mov	r3, r7
 800a262:	4630      	mov	r0, r6
 800a264:	4639      	mov	r1, r7
 800a266:	f7f6 f9cf 	bl	8000608 <__aeabi_dmul>
 800a26a:	4b51      	ldr	r3, [pc, #324]	; (800a3b0 <__kernel_cos+0x178>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	460d      	mov	r5, r1
 800a272:	f7f6 f9c9 	bl	8000608 <__aeabi_dmul>
 800a276:	a340      	add	r3, pc, #256	; (adr r3, 800a378 <__kernel_cos+0x140>)
 800a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27c:	4682      	mov	sl, r0
 800a27e:	468b      	mov	fp, r1
 800a280:	4620      	mov	r0, r4
 800a282:	4629      	mov	r1, r5
 800a284:	f7f6 f9c0 	bl	8000608 <__aeabi_dmul>
 800a288:	a33d      	add	r3, pc, #244	; (adr r3, 800a380 <__kernel_cos+0x148>)
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 f805 	bl	800029c <__adddf3>
 800a292:	4622      	mov	r2, r4
 800a294:	462b      	mov	r3, r5
 800a296:	f7f6 f9b7 	bl	8000608 <__aeabi_dmul>
 800a29a:	a33b      	add	r3, pc, #236	; (adr r3, 800a388 <__kernel_cos+0x150>)
 800a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a0:	f7f5 fffa 	bl	8000298 <__aeabi_dsub>
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	462b      	mov	r3, r5
 800a2a8:	f7f6 f9ae 	bl	8000608 <__aeabi_dmul>
 800a2ac:	a338      	add	r3, pc, #224	; (adr r3, 800a390 <__kernel_cos+0x158>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	f7f5 fff3 	bl	800029c <__adddf3>
 800a2b6:	4622      	mov	r2, r4
 800a2b8:	462b      	mov	r3, r5
 800a2ba:	f7f6 f9a5 	bl	8000608 <__aeabi_dmul>
 800a2be:	a336      	add	r3, pc, #216	; (adr r3, 800a398 <__kernel_cos+0x160>)
 800a2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c4:	f7f5 ffe8 	bl	8000298 <__aeabi_dsub>
 800a2c8:	4622      	mov	r2, r4
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	f7f6 f99c 	bl	8000608 <__aeabi_dmul>
 800a2d0:	a333      	add	r3, pc, #204	; (adr r3, 800a3a0 <__kernel_cos+0x168>)
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	f7f5 ffe1 	bl	800029c <__adddf3>
 800a2da:	4622      	mov	r2, r4
 800a2dc:	462b      	mov	r3, r5
 800a2de:	f7f6 f993 	bl	8000608 <__aeabi_dmul>
 800a2e2:	4622      	mov	r2, r4
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	f7f6 f98f 	bl	8000608 <__aeabi_dmul>
 800a2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f6 f987 	bl	8000608 <__aeabi_dmul>
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	4629      	mov	r1, r5
 800a300:	4620      	mov	r0, r4
 800a302:	f7f5 ffc9 	bl	8000298 <__aeabi_dsub>
 800a306:	4b2b      	ldr	r3, [pc, #172]	; (800a3b4 <__kernel_cos+0x17c>)
 800a308:	4598      	cmp	r8, r3
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	dc10      	bgt.n	800a332 <__kernel_cos+0xfa>
 800a310:	4602      	mov	r2, r0
 800a312:	460b      	mov	r3, r1
 800a314:	4650      	mov	r0, sl
 800a316:	4659      	mov	r1, fp
 800a318:	f7f5 ffbe 	bl	8000298 <__aeabi_dsub>
 800a31c:	460b      	mov	r3, r1
 800a31e:	4926      	ldr	r1, [pc, #152]	; (800a3b8 <__kernel_cos+0x180>)
 800a320:	4602      	mov	r2, r0
 800a322:	2000      	movs	r0, #0
 800a324:	f7f5 ffb8 	bl	8000298 <__aeabi_dsub>
 800a328:	ec41 0b10 	vmov	d0, r0, r1
 800a32c:	b003      	add	sp, #12
 800a32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a332:	4b22      	ldr	r3, [pc, #136]	; (800a3bc <__kernel_cos+0x184>)
 800a334:	4920      	ldr	r1, [pc, #128]	; (800a3b8 <__kernel_cos+0x180>)
 800a336:	4598      	cmp	r8, r3
 800a338:	bfcc      	ite	gt
 800a33a:	4d21      	ldrgt	r5, [pc, #132]	; (800a3c0 <__kernel_cos+0x188>)
 800a33c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a340:	2400      	movs	r4, #0
 800a342:	4622      	mov	r2, r4
 800a344:	462b      	mov	r3, r5
 800a346:	2000      	movs	r0, #0
 800a348:	f7f5 ffa6 	bl	8000298 <__aeabi_dsub>
 800a34c:	4622      	mov	r2, r4
 800a34e:	4680      	mov	r8, r0
 800a350:	4689      	mov	r9, r1
 800a352:	462b      	mov	r3, r5
 800a354:	4650      	mov	r0, sl
 800a356:	4659      	mov	r1, fp
 800a358:	f7f5 ff9e 	bl	8000298 <__aeabi_dsub>
 800a35c:	4632      	mov	r2, r6
 800a35e:	463b      	mov	r3, r7
 800a360:	f7f5 ff9a 	bl	8000298 <__aeabi_dsub>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4640      	mov	r0, r8
 800a36a:	4649      	mov	r1, r9
 800a36c:	e7da      	b.n	800a324 <__kernel_cos+0xec>
 800a36e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a3a8 <__kernel_cos+0x170>
 800a372:	e7db      	b.n	800a32c <__kernel_cos+0xf4>
 800a374:	f3af 8000 	nop.w
 800a378:	be8838d4 	.word	0xbe8838d4
 800a37c:	bda8fae9 	.word	0xbda8fae9
 800a380:	bdb4b1c4 	.word	0xbdb4b1c4
 800a384:	3e21ee9e 	.word	0x3e21ee9e
 800a388:	809c52ad 	.word	0x809c52ad
 800a38c:	3e927e4f 	.word	0x3e927e4f
 800a390:	19cb1590 	.word	0x19cb1590
 800a394:	3efa01a0 	.word	0x3efa01a0
 800a398:	16c15177 	.word	0x16c15177
 800a39c:	3f56c16c 	.word	0x3f56c16c
 800a3a0:	5555554c 	.word	0x5555554c
 800a3a4:	3fa55555 	.word	0x3fa55555
 800a3a8:	00000000 	.word	0x00000000
 800a3ac:	3ff00000 	.word	0x3ff00000
 800a3b0:	3fe00000 	.word	0x3fe00000
 800a3b4:	3fd33332 	.word	0x3fd33332
 800a3b8:	3ff00000 	.word	0x3ff00000
 800a3bc:	3fe90000 	.word	0x3fe90000
 800a3c0:	3fd20000 	.word	0x3fd20000
 800a3c4:	00000000 	.word	0x00000000

0800a3c8 <__kernel_rem_pio2>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	ed2d 8b02 	vpush	{d8}
 800a3d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a3d4:	f112 0f14 	cmn.w	r2, #20
 800a3d8:	9308      	str	r3, [sp, #32]
 800a3da:	9101      	str	r1, [sp, #4]
 800a3dc:	4bc4      	ldr	r3, [pc, #784]	; (800a6f0 <__kernel_rem_pio2+0x328>)
 800a3de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a3e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3e6:	9302      	str	r3, [sp, #8]
 800a3e8:	9b08      	ldr	r3, [sp, #32]
 800a3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ee:	bfa8      	it	ge
 800a3f0:	1ed4      	subge	r4, r2, #3
 800a3f2:	9306      	str	r3, [sp, #24]
 800a3f4:	bfb2      	itee	lt
 800a3f6:	2400      	movlt	r4, #0
 800a3f8:	2318      	movge	r3, #24
 800a3fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800a3fe:	f06f 0317 	mvn.w	r3, #23
 800a402:	fb04 3303 	mla	r3, r4, r3, r3
 800a406:	eb03 0a02 	add.w	sl, r3, r2
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	9a06      	ldr	r2, [sp, #24]
 800a40e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a6e0 <__kernel_rem_pio2+0x318>
 800a412:	eb03 0802 	add.w	r8, r3, r2
 800a416:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a418:	1aa7      	subs	r7, r4, r2
 800a41a:	ae22      	add	r6, sp, #136	; 0x88
 800a41c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a420:	2500      	movs	r5, #0
 800a422:	4545      	cmp	r5, r8
 800a424:	dd13      	ble.n	800a44e <__kernel_rem_pio2+0x86>
 800a426:	9b08      	ldr	r3, [sp, #32]
 800a428:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a6e0 <__kernel_rem_pio2+0x318>
 800a42c:	aa22      	add	r2, sp, #136	; 0x88
 800a42e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a432:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a436:	f04f 0800 	mov.w	r8, #0
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	4598      	cmp	r8, r3
 800a43e:	dc2f      	bgt.n	800a4a0 <__kernel_rem_pio2+0xd8>
 800a440:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a444:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a448:	462f      	mov	r7, r5
 800a44a:	2600      	movs	r6, #0
 800a44c:	e01b      	b.n	800a486 <__kernel_rem_pio2+0xbe>
 800a44e:	42ef      	cmn	r7, r5
 800a450:	d407      	bmi.n	800a462 <__kernel_rem_pio2+0x9a>
 800a452:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a456:	f7f6 f86d 	bl	8000534 <__aeabi_i2d>
 800a45a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a45e:	3501      	adds	r5, #1
 800a460:	e7df      	b.n	800a422 <__kernel_rem_pio2+0x5a>
 800a462:	ec51 0b18 	vmov	r0, r1, d8
 800a466:	e7f8      	b.n	800a45a <__kernel_rem_pio2+0x92>
 800a468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a46c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a470:	f7f6 f8ca 	bl	8000608 <__aeabi_dmul>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a47c:	f7f5 ff0e 	bl	800029c <__adddf3>
 800a480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a484:	3601      	adds	r6, #1
 800a486:	9b06      	ldr	r3, [sp, #24]
 800a488:	429e      	cmp	r6, r3
 800a48a:	f1a7 0708 	sub.w	r7, r7, #8
 800a48e:	ddeb      	ble.n	800a468 <__kernel_rem_pio2+0xa0>
 800a490:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a494:	f108 0801 	add.w	r8, r8, #1
 800a498:	ecab 7b02 	vstmia	fp!, {d7}
 800a49c:	3508      	adds	r5, #8
 800a49e:	e7cc      	b.n	800a43a <__kernel_rem_pio2+0x72>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	aa0e      	add	r2, sp, #56	; 0x38
 800a4a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a4a8:	930d      	str	r3, [sp, #52]	; 0x34
 800a4aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a4ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a4b0:	9c02      	ldr	r4, [sp, #8]
 800a4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4b4:	00e3      	lsls	r3, r4, #3
 800a4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4b8:	ab9a      	add	r3, sp, #616	; 0x268
 800a4ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a4c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a4c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a4c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a4cc:	46c3      	mov	fp, r8
 800a4ce:	46a1      	mov	r9, r4
 800a4d0:	f1b9 0f00 	cmp.w	r9, #0
 800a4d4:	f1a5 0508 	sub.w	r5, r5, #8
 800a4d8:	dc77      	bgt.n	800a5ca <__kernel_rem_pio2+0x202>
 800a4da:	ec47 6b10 	vmov	d0, r6, r7
 800a4de:	4650      	mov	r0, sl
 800a4e0:	f000 fc0a 	bl	800acf8 <scalbn>
 800a4e4:	ec57 6b10 	vmov	r6, r7, d0
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a4ee:	ee10 0a10 	vmov	r0, s0
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	f7f6 f888 	bl	8000608 <__aeabi_dmul>
 800a4f8:	ec41 0b10 	vmov	d0, r0, r1
 800a4fc:	f000 fb7c 	bl	800abf8 <floor>
 800a500:	4b7c      	ldr	r3, [pc, #496]	; (800a6f4 <__kernel_rem_pio2+0x32c>)
 800a502:	ec51 0b10 	vmov	r0, r1, d0
 800a506:	2200      	movs	r2, #0
 800a508:	f7f6 f87e 	bl	8000608 <__aeabi_dmul>
 800a50c:	4602      	mov	r2, r0
 800a50e:	460b      	mov	r3, r1
 800a510:	4630      	mov	r0, r6
 800a512:	4639      	mov	r1, r7
 800a514:	f7f5 fec0 	bl	8000298 <__aeabi_dsub>
 800a518:	460f      	mov	r7, r1
 800a51a:	4606      	mov	r6, r0
 800a51c:	f7f6 fb24 	bl	8000b68 <__aeabi_d2iz>
 800a520:	9004      	str	r0, [sp, #16]
 800a522:	f7f6 f807 	bl	8000534 <__aeabi_i2d>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4630      	mov	r0, r6
 800a52c:	4639      	mov	r1, r7
 800a52e:	f7f5 feb3 	bl	8000298 <__aeabi_dsub>
 800a532:	f1ba 0f00 	cmp.w	sl, #0
 800a536:	4606      	mov	r6, r0
 800a538:	460f      	mov	r7, r1
 800a53a:	dd6d      	ble.n	800a618 <__kernel_rem_pio2+0x250>
 800a53c:	1e62      	subs	r2, r4, #1
 800a53e:	ab0e      	add	r3, sp, #56	; 0x38
 800a540:	9d04      	ldr	r5, [sp, #16]
 800a542:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a546:	f1ca 0118 	rsb	r1, sl, #24
 800a54a:	fa40 f301 	asr.w	r3, r0, r1
 800a54e:	441d      	add	r5, r3
 800a550:	408b      	lsls	r3, r1
 800a552:	1ac0      	subs	r0, r0, r3
 800a554:	ab0e      	add	r3, sp, #56	; 0x38
 800a556:	9504      	str	r5, [sp, #16]
 800a558:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a55c:	f1ca 0317 	rsb	r3, sl, #23
 800a560:	fa40 fb03 	asr.w	fp, r0, r3
 800a564:	f1bb 0f00 	cmp.w	fp, #0
 800a568:	dd65      	ble.n	800a636 <__kernel_rem_pio2+0x26e>
 800a56a:	9b04      	ldr	r3, [sp, #16]
 800a56c:	2200      	movs	r2, #0
 800a56e:	3301      	adds	r3, #1
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	4615      	mov	r5, r2
 800a574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a578:	4294      	cmp	r4, r2
 800a57a:	f300 809c 	bgt.w	800a6b6 <__kernel_rem_pio2+0x2ee>
 800a57e:	f1ba 0f00 	cmp.w	sl, #0
 800a582:	dd07      	ble.n	800a594 <__kernel_rem_pio2+0x1cc>
 800a584:	f1ba 0f01 	cmp.w	sl, #1
 800a588:	f000 80c0 	beq.w	800a70c <__kernel_rem_pio2+0x344>
 800a58c:	f1ba 0f02 	cmp.w	sl, #2
 800a590:	f000 80c6 	beq.w	800a720 <__kernel_rem_pio2+0x358>
 800a594:	f1bb 0f02 	cmp.w	fp, #2
 800a598:	d14d      	bne.n	800a636 <__kernel_rem_pio2+0x26e>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	4956      	ldr	r1, [pc, #344]	; (800a6f8 <__kernel_rem_pio2+0x330>)
 800a5a0:	2000      	movs	r0, #0
 800a5a2:	f7f5 fe79 	bl	8000298 <__aeabi_dsub>
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460f      	mov	r7, r1
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	d043      	beq.n	800a636 <__kernel_rem_pio2+0x26e>
 800a5ae:	4650      	mov	r0, sl
 800a5b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a6e8 <__kernel_rem_pio2+0x320>
 800a5b4:	f000 fba0 	bl	800acf8 <scalbn>
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	ec53 2b10 	vmov	r2, r3, d0
 800a5c0:	f7f5 fe6a 	bl	8000298 <__aeabi_dsub>
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	e035      	b.n	800a636 <__kernel_rem_pio2+0x26e>
 800a5ca:	4b4c      	ldr	r3, [pc, #304]	; (800a6fc <__kernel_rem_pio2+0x334>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f6 f819 	bl	8000608 <__aeabi_dmul>
 800a5d6:	f7f6 fac7 	bl	8000b68 <__aeabi_d2iz>
 800a5da:	f7f5 ffab 	bl	8000534 <__aeabi_i2d>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	ec43 2b18 	vmov	d8, r2, r3
 800a5e6:	4b46      	ldr	r3, [pc, #280]	; (800a700 <__kernel_rem_pio2+0x338>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f7f6 f80d 	bl	8000608 <__aeabi_dmul>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	4639      	mov	r1, r7
 800a5f6:	f7f5 fe4f 	bl	8000298 <__aeabi_dsub>
 800a5fa:	f7f6 fab5 	bl	8000b68 <__aeabi_d2iz>
 800a5fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a602:	f84b 0b04 	str.w	r0, [fp], #4
 800a606:	ec51 0b18 	vmov	r0, r1, d8
 800a60a:	f7f5 fe47 	bl	800029c <__adddf3>
 800a60e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a612:	4606      	mov	r6, r0
 800a614:	460f      	mov	r7, r1
 800a616:	e75b      	b.n	800a4d0 <__kernel_rem_pio2+0x108>
 800a618:	d106      	bne.n	800a628 <__kernel_rem_pio2+0x260>
 800a61a:	1e63      	subs	r3, r4, #1
 800a61c:	aa0e      	add	r2, sp, #56	; 0x38
 800a61e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a622:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a626:	e79d      	b.n	800a564 <__kernel_rem_pio2+0x19c>
 800a628:	4b36      	ldr	r3, [pc, #216]	; (800a704 <__kernel_rem_pio2+0x33c>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	f7f6 fa72 	bl	8000b14 <__aeabi_dcmpge>
 800a630:	2800      	cmp	r0, #0
 800a632:	d13d      	bne.n	800a6b0 <__kernel_rem_pio2+0x2e8>
 800a634:	4683      	mov	fp, r0
 800a636:	2200      	movs	r2, #0
 800a638:	2300      	movs	r3, #0
 800a63a:	4630      	mov	r0, r6
 800a63c:	4639      	mov	r1, r7
 800a63e:	f7f6 fa4b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a642:	2800      	cmp	r0, #0
 800a644:	f000 80c0 	beq.w	800a7c8 <__kernel_rem_pio2+0x400>
 800a648:	1e65      	subs	r5, r4, #1
 800a64a:	462b      	mov	r3, r5
 800a64c:	2200      	movs	r2, #0
 800a64e:	9902      	ldr	r1, [sp, #8]
 800a650:	428b      	cmp	r3, r1
 800a652:	da6c      	bge.n	800a72e <__kernel_rem_pio2+0x366>
 800a654:	2a00      	cmp	r2, #0
 800a656:	f000 8089 	beq.w	800a76c <__kernel_rem_pio2+0x3a4>
 800a65a:	ab0e      	add	r3, sp, #56	; 0x38
 800a65c:	f1aa 0a18 	sub.w	sl, sl, #24
 800a660:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80ad 	beq.w	800a7c4 <__kernel_rem_pio2+0x3fc>
 800a66a:	4650      	mov	r0, sl
 800a66c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a6e8 <__kernel_rem_pio2+0x320>
 800a670:	f000 fb42 	bl	800acf8 <scalbn>
 800a674:	ab9a      	add	r3, sp, #616	; 0x268
 800a676:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a67a:	ec57 6b10 	vmov	r6, r7, d0
 800a67e:	00ec      	lsls	r4, r5, #3
 800a680:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a684:	46aa      	mov	sl, r5
 800a686:	f1ba 0f00 	cmp.w	sl, #0
 800a68a:	f280 80d6 	bge.w	800a83a <__kernel_rem_pio2+0x472>
 800a68e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a6e0 <__kernel_rem_pio2+0x318>
 800a692:	462e      	mov	r6, r5
 800a694:	2e00      	cmp	r6, #0
 800a696:	f2c0 8104 	blt.w	800a8a2 <__kernel_rem_pio2+0x4da>
 800a69a:	ab72      	add	r3, sp, #456	; 0x1c8
 800a69c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a6a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a708 <__kernel_rem_pio2+0x340>
 800a6a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a6a8:	f04f 0800 	mov.w	r8, #0
 800a6ac:	1baf      	subs	r7, r5, r6
 800a6ae:	e0ea      	b.n	800a886 <__kernel_rem_pio2+0x4be>
 800a6b0:	f04f 0b02 	mov.w	fp, #2
 800a6b4:	e759      	b.n	800a56a <__kernel_rem_pio2+0x1a2>
 800a6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ba:	b955      	cbnz	r5, 800a6d2 <__kernel_rem_pio2+0x30a>
 800a6bc:	b123      	cbz	r3, 800a6c8 <__kernel_rem_pio2+0x300>
 800a6be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a6c2:	f8c8 3000 	str.w	r3, [r8]
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	3201      	adds	r2, #1
 800a6ca:	f108 0804 	add.w	r8, r8, #4
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	e752      	b.n	800a578 <__kernel_rem_pio2+0x1b0>
 800a6d2:	1acb      	subs	r3, r1, r3
 800a6d4:	f8c8 3000 	str.w	r3, [r8]
 800a6d8:	462b      	mov	r3, r5
 800a6da:	e7f5      	b.n	800a6c8 <__kernel_rem_pio2+0x300>
 800a6dc:	f3af 8000 	nop.w
	...
 800a6ec:	3ff00000 	.word	0x3ff00000
 800a6f0:	0800bd60 	.word	0x0800bd60
 800a6f4:	40200000 	.word	0x40200000
 800a6f8:	3ff00000 	.word	0x3ff00000
 800a6fc:	3e700000 	.word	0x3e700000
 800a700:	41700000 	.word	0x41700000
 800a704:	3fe00000 	.word	0x3fe00000
 800a708:	0800bd20 	.word	0x0800bd20
 800a70c:	1e62      	subs	r2, r4, #1
 800a70e:	ab0e      	add	r3, sp, #56	; 0x38
 800a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a714:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a718:	a90e      	add	r1, sp, #56	; 0x38
 800a71a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a71e:	e739      	b.n	800a594 <__kernel_rem_pio2+0x1cc>
 800a720:	1e62      	subs	r2, r4, #1
 800a722:	ab0e      	add	r3, sp, #56	; 0x38
 800a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a728:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a72c:	e7f4      	b.n	800a718 <__kernel_rem_pio2+0x350>
 800a72e:	a90e      	add	r1, sp, #56	; 0x38
 800a730:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a734:	3b01      	subs	r3, #1
 800a736:	430a      	orrs	r2, r1
 800a738:	e789      	b.n	800a64e <__kernel_rem_pio2+0x286>
 800a73a:	3301      	adds	r3, #1
 800a73c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a740:	2900      	cmp	r1, #0
 800a742:	d0fa      	beq.n	800a73a <__kernel_rem_pio2+0x372>
 800a744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a746:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a74a:	446a      	add	r2, sp
 800a74c:	3a98      	subs	r2, #152	; 0x98
 800a74e:	920a      	str	r2, [sp, #40]	; 0x28
 800a750:	9a08      	ldr	r2, [sp, #32]
 800a752:	18e3      	adds	r3, r4, r3
 800a754:	18a5      	adds	r5, r4, r2
 800a756:	aa22      	add	r2, sp, #136	; 0x88
 800a758:	f104 0801 	add.w	r8, r4, #1
 800a75c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a760:	9304      	str	r3, [sp, #16]
 800a762:	9b04      	ldr	r3, [sp, #16]
 800a764:	4543      	cmp	r3, r8
 800a766:	da04      	bge.n	800a772 <__kernel_rem_pio2+0x3aa>
 800a768:	461c      	mov	r4, r3
 800a76a:	e6a3      	b.n	800a4b4 <__kernel_rem_pio2+0xec>
 800a76c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a76e:	2301      	movs	r3, #1
 800a770:	e7e4      	b.n	800a73c <__kernel_rem_pio2+0x374>
 800a772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a774:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a778:	f7f5 fedc 	bl	8000534 <__aeabi_i2d>
 800a77c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a782:	46ab      	mov	fp, r5
 800a784:	461c      	mov	r4, r3
 800a786:	f04f 0900 	mov.w	r9, #0
 800a78a:	2600      	movs	r6, #0
 800a78c:	2700      	movs	r7, #0
 800a78e:	9b06      	ldr	r3, [sp, #24]
 800a790:	4599      	cmp	r9, r3
 800a792:	dd06      	ble.n	800a7a2 <__kernel_rem_pio2+0x3da>
 800a794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a796:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a79a:	f108 0801 	add.w	r8, r8, #1
 800a79e:	930a      	str	r3, [sp, #40]	; 0x28
 800a7a0:	e7df      	b.n	800a762 <__kernel_rem_pio2+0x39a>
 800a7a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a7a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a7aa:	f7f5 ff2d 	bl	8000608 <__aeabi_dmul>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	f7f5 fd71 	bl	800029c <__adddf3>
 800a7ba:	f109 0901 	add.w	r9, r9, #1
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460f      	mov	r7, r1
 800a7c2:	e7e4      	b.n	800a78e <__kernel_rem_pio2+0x3c6>
 800a7c4:	3d01      	subs	r5, #1
 800a7c6:	e748      	b.n	800a65a <__kernel_rem_pio2+0x292>
 800a7c8:	ec47 6b10 	vmov	d0, r6, r7
 800a7cc:	f1ca 0000 	rsb	r0, sl, #0
 800a7d0:	f000 fa92 	bl	800acf8 <scalbn>
 800a7d4:	ec57 6b10 	vmov	r6, r7, d0
 800a7d8:	4ba0      	ldr	r3, [pc, #640]	; (800aa5c <__kernel_rem_pio2+0x694>)
 800a7da:	ee10 0a10 	vmov	r0, s0
 800a7de:	2200      	movs	r2, #0
 800a7e0:	4639      	mov	r1, r7
 800a7e2:	f7f6 f997 	bl	8000b14 <__aeabi_dcmpge>
 800a7e6:	b1f8      	cbz	r0, 800a828 <__kernel_rem_pio2+0x460>
 800a7e8:	4b9d      	ldr	r3, [pc, #628]	; (800aa60 <__kernel_rem_pio2+0x698>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f5 ff0a 	bl	8000608 <__aeabi_dmul>
 800a7f4:	f7f6 f9b8 	bl	8000b68 <__aeabi_d2iz>
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	f7f5 fe9b 	bl	8000534 <__aeabi_i2d>
 800a7fe:	4b97      	ldr	r3, [pc, #604]	; (800aa5c <__kernel_rem_pio2+0x694>)
 800a800:	2200      	movs	r2, #0
 800a802:	f7f5 ff01 	bl	8000608 <__aeabi_dmul>
 800a806:	460b      	mov	r3, r1
 800a808:	4602      	mov	r2, r0
 800a80a:	4639      	mov	r1, r7
 800a80c:	4630      	mov	r0, r6
 800a80e:	f7f5 fd43 	bl	8000298 <__aeabi_dsub>
 800a812:	f7f6 f9a9 	bl	8000b68 <__aeabi_d2iz>
 800a816:	1c65      	adds	r5, r4, #1
 800a818:	ab0e      	add	r3, sp, #56	; 0x38
 800a81a:	f10a 0a18 	add.w	sl, sl, #24
 800a81e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a822:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a826:	e720      	b.n	800a66a <__kernel_rem_pio2+0x2a2>
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f99c 	bl	8000b68 <__aeabi_d2iz>
 800a830:	ab0e      	add	r3, sp, #56	; 0x38
 800a832:	4625      	mov	r5, r4
 800a834:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a838:	e717      	b.n	800a66a <__kernel_rem_pio2+0x2a2>
 800a83a:	ab0e      	add	r3, sp, #56	; 0x38
 800a83c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a840:	f7f5 fe78 	bl	8000534 <__aeabi_i2d>
 800a844:	4632      	mov	r2, r6
 800a846:	463b      	mov	r3, r7
 800a848:	f7f5 fede 	bl	8000608 <__aeabi_dmul>
 800a84c:	4b84      	ldr	r3, [pc, #528]	; (800aa60 <__kernel_rem_pio2+0x698>)
 800a84e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a852:	2200      	movs	r2, #0
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fed6 	bl	8000608 <__aeabi_dmul>
 800a85c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a860:	4606      	mov	r6, r0
 800a862:	460f      	mov	r7, r1
 800a864:	e70f      	b.n	800a686 <__kernel_rem_pio2+0x2be>
 800a866:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a86a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a86e:	f7f5 fecb 	bl	8000608 <__aeabi_dmul>
 800a872:	4602      	mov	r2, r0
 800a874:	460b      	mov	r3, r1
 800a876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a87a:	f7f5 fd0f 	bl	800029c <__adddf3>
 800a87e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a882:	f108 0801 	add.w	r8, r8, #1
 800a886:	9b02      	ldr	r3, [sp, #8]
 800a888:	4598      	cmp	r8, r3
 800a88a:	dc01      	bgt.n	800a890 <__kernel_rem_pio2+0x4c8>
 800a88c:	45b8      	cmp	r8, r7
 800a88e:	ddea      	ble.n	800a866 <__kernel_rem_pio2+0x49e>
 800a890:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a894:	ab4a      	add	r3, sp, #296	; 0x128
 800a896:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a89a:	ed87 7b00 	vstr	d7, [r7]
 800a89e:	3e01      	subs	r6, #1
 800a8a0:	e6f8      	b.n	800a694 <__kernel_rem_pio2+0x2cc>
 800a8a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	dc0b      	bgt.n	800a8c0 <__kernel_rem_pio2+0x4f8>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc35      	bgt.n	800a918 <__kernel_rem_pio2+0x550>
 800a8ac:	d059      	beq.n	800a962 <__kernel_rem_pio2+0x59a>
 800a8ae:	9b04      	ldr	r3, [sp, #16]
 800a8b0:	f003 0007 	and.w	r0, r3, #7
 800a8b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a8b8:	ecbd 8b02 	vpop	{d8}
 800a8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d1f3      	bne.n	800a8ae <__kernel_rem_pio2+0x4e6>
 800a8c6:	ab4a      	add	r3, sp, #296	; 0x128
 800a8c8:	4423      	add	r3, r4
 800a8ca:	9306      	str	r3, [sp, #24]
 800a8cc:	461c      	mov	r4, r3
 800a8ce:	469a      	mov	sl, r3
 800a8d0:	9502      	str	r5, [sp, #8]
 800a8d2:	9b02      	ldr	r3, [sp, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f1aa 0a08 	sub.w	sl, sl, #8
 800a8da:	dc6b      	bgt.n	800a9b4 <__kernel_rem_pio2+0x5ec>
 800a8dc:	46aa      	mov	sl, r5
 800a8de:	f1ba 0f01 	cmp.w	sl, #1
 800a8e2:	f1a4 0408 	sub.w	r4, r4, #8
 800a8e6:	f300 8085 	bgt.w	800a9f4 <__kernel_rem_pio2+0x62c>
 800a8ea:	9c06      	ldr	r4, [sp, #24]
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	3408      	adds	r4, #8
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	2d01      	cmp	r5, #1
 800a8f4:	f300 809d 	bgt.w	800aa32 <__kernel_rem_pio2+0x66a>
 800a8f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a8fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a900:	f1bb 0f00 	cmp.w	fp, #0
 800a904:	f040 809b 	bne.w	800aa3e <__kernel_rem_pio2+0x676>
 800a908:	9b01      	ldr	r3, [sp, #4]
 800a90a:	e9c3 5600 	strd	r5, r6, [r3]
 800a90e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a912:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a916:	e7ca      	b.n	800a8ae <__kernel_rem_pio2+0x4e6>
 800a918:	3408      	adds	r4, #8
 800a91a:	ab4a      	add	r3, sp, #296	; 0x128
 800a91c:	441c      	add	r4, r3
 800a91e:	462e      	mov	r6, r5
 800a920:	2000      	movs	r0, #0
 800a922:	2100      	movs	r1, #0
 800a924:	2e00      	cmp	r6, #0
 800a926:	da36      	bge.n	800a996 <__kernel_rem_pio2+0x5ce>
 800a928:	f1bb 0f00 	cmp.w	fp, #0
 800a92c:	d039      	beq.n	800a9a2 <__kernel_rem_pio2+0x5da>
 800a92e:	4602      	mov	r2, r0
 800a930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a934:	9c01      	ldr	r4, [sp, #4]
 800a936:	e9c4 2300 	strd	r2, r3, [r4]
 800a93a:	4602      	mov	r2, r0
 800a93c:	460b      	mov	r3, r1
 800a93e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a942:	f7f5 fca9 	bl	8000298 <__aeabi_dsub>
 800a946:	ae4c      	add	r6, sp, #304	; 0x130
 800a948:	2401      	movs	r4, #1
 800a94a:	42a5      	cmp	r5, r4
 800a94c:	da2c      	bge.n	800a9a8 <__kernel_rem_pio2+0x5e0>
 800a94e:	f1bb 0f00 	cmp.w	fp, #0
 800a952:	d002      	beq.n	800a95a <__kernel_rem_pio2+0x592>
 800a954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a958:	4619      	mov	r1, r3
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a960:	e7a5      	b.n	800a8ae <__kernel_rem_pio2+0x4e6>
 800a962:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a966:	eb0d 0403 	add.w	r4, sp, r3
 800a96a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a96e:	2000      	movs	r0, #0
 800a970:	2100      	movs	r1, #0
 800a972:	2d00      	cmp	r5, #0
 800a974:	da09      	bge.n	800a98a <__kernel_rem_pio2+0x5c2>
 800a976:	f1bb 0f00 	cmp.w	fp, #0
 800a97a:	d002      	beq.n	800a982 <__kernel_rem_pio2+0x5ba>
 800a97c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a980:	4619      	mov	r1, r3
 800a982:	9b01      	ldr	r3, [sp, #4]
 800a984:	e9c3 0100 	strd	r0, r1, [r3]
 800a988:	e791      	b.n	800a8ae <__kernel_rem_pio2+0x4e6>
 800a98a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a98e:	f7f5 fc85 	bl	800029c <__adddf3>
 800a992:	3d01      	subs	r5, #1
 800a994:	e7ed      	b.n	800a972 <__kernel_rem_pio2+0x5aa>
 800a996:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a99a:	f7f5 fc7f 	bl	800029c <__adddf3>
 800a99e:	3e01      	subs	r6, #1
 800a9a0:	e7c0      	b.n	800a924 <__kernel_rem_pio2+0x55c>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	e7c5      	b.n	800a934 <__kernel_rem_pio2+0x56c>
 800a9a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a9ac:	f7f5 fc76 	bl	800029c <__adddf3>
 800a9b0:	3401      	adds	r4, #1
 800a9b2:	e7ca      	b.n	800a94a <__kernel_rem_pio2+0x582>
 800a9b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	9302      	str	r3, [sp, #8]
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	4640      	mov	r0, r8
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	f7f5 fc67 	bl	800029c <__adddf3>
 800a9ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	4649      	mov	r1, r9
 800a9da:	f7f5 fc5d 	bl	8000298 <__aeabi_dsub>
 800a9de:	4632      	mov	r2, r6
 800a9e0:	463b      	mov	r3, r7
 800a9e2:	f7f5 fc5b 	bl	800029c <__adddf3>
 800a9e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a9ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9ee:	ed8a 7b00 	vstr	d7, [sl]
 800a9f2:	e76e      	b.n	800a8d2 <__kernel_rem_pio2+0x50a>
 800a9f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a9f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a9fc:	4640      	mov	r0, r8
 800a9fe:	4632      	mov	r2, r6
 800aa00:	463b      	mov	r3, r7
 800aa02:	4649      	mov	r1, r9
 800aa04:	f7f5 fc4a 	bl	800029c <__adddf3>
 800aa08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	460b      	mov	r3, r1
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	f7f5 fc40 	bl	8000298 <__aeabi_dsub>
 800aa18:	4632      	mov	r2, r6
 800aa1a:	463b      	mov	r3, r7
 800aa1c:	f7f5 fc3e 	bl	800029c <__adddf3>
 800aa20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa28:	ed84 7b00 	vstr	d7, [r4]
 800aa2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa30:	e755      	b.n	800a8de <__kernel_rem_pio2+0x516>
 800aa32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aa36:	f7f5 fc31 	bl	800029c <__adddf3>
 800aa3a:	3d01      	subs	r5, #1
 800aa3c:	e759      	b.n	800a8f2 <__kernel_rem_pio2+0x52a>
 800aa3e:	9b01      	ldr	r3, [sp, #4]
 800aa40:	9a01      	ldr	r2, [sp, #4]
 800aa42:	601d      	str	r5, [r3, #0]
 800aa44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800aa48:	605c      	str	r4, [r3, #4]
 800aa4a:	609f      	str	r7, [r3, #8]
 800aa4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800aa50:	60d3      	str	r3, [r2, #12]
 800aa52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa56:	6110      	str	r0, [r2, #16]
 800aa58:	6153      	str	r3, [r2, #20]
 800aa5a:	e728      	b.n	800a8ae <__kernel_rem_pio2+0x4e6>
 800aa5c:	41700000 	.word	0x41700000
 800aa60:	3e700000 	.word	0x3e700000
 800aa64:	00000000 	.word	0x00000000

0800aa68 <__kernel_sin>:
 800aa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa6c:	ed2d 8b04 	vpush	{d8-d9}
 800aa70:	eeb0 8a41 	vmov.f32	s16, s2
 800aa74:	eef0 8a61 	vmov.f32	s17, s3
 800aa78:	ec55 4b10 	vmov	r4, r5, d0
 800aa7c:	b083      	sub	sp, #12
 800aa7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aa86:	9001      	str	r0, [sp, #4]
 800aa88:	da06      	bge.n	800aa98 <__kernel_sin+0x30>
 800aa8a:	ee10 0a10 	vmov	r0, s0
 800aa8e:	4629      	mov	r1, r5
 800aa90:	f7f6 f86a 	bl	8000b68 <__aeabi_d2iz>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	d051      	beq.n	800ab3c <__kernel_sin+0xd4>
 800aa98:	4622      	mov	r2, r4
 800aa9a:	462b      	mov	r3, r5
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f5 fdb2 	bl	8000608 <__aeabi_dmul>
 800aaa4:	4682      	mov	sl, r0
 800aaa6:	468b      	mov	fp, r1
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	460b      	mov	r3, r1
 800aaac:	4620      	mov	r0, r4
 800aaae:	4629      	mov	r1, r5
 800aab0:	f7f5 fdaa 	bl	8000608 <__aeabi_dmul>
 800aab4:	a341      	add	r3, pc, #260	; (adr r3, 800abbc <__kernel_sin+0x154>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	4680      	mov	r8, r0
 800aabc:	4689      	mov	r9, r1
 800aabe:	4650      	mov	r0, sl
 800aac0:	4659      	mov	r1, fp
 800aac2:	f7f5 fda1 	bl	8000608 <__aeabi_dmul>
 800aac6:	a33f      	add	r3, pc, #252	; (adr r3, 800abc4 <__kernel_sin+0x15c>)
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	f7f5 fbe4 	bl	8000298 <__aeabi_dsub>
 800aad0:	4652      	mov	r2, sl
 800aad2:	465b      	mov	r3, fp
 800aad4:	f7f5 fd98 	bl	8000608 <__aeabi_dmul>
 800aad8:	a33c      	add	r3, pc, #240	; (adr r3, 800abcc <__kernel_sin+0x164>)
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f7f5 fbdd 	bl	800029c <__adddf3>
 800aae2:	4652      	mov	r2, sl
 800aae4:	465b      	mov	r3, fp
 800aae6:	f7f5 fd8f 	bl	8000608 <__aeabi_dmul>
 800aaea:	a33a      	add	r3, pc, #232	; (adr r3, 800abd4 <__kernel_sin+0x16c>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	f7f5 fbd2 	bl	8000298 <__aeabi_dsub>
 800aaf4:	4652      	mov	r2, sl
 800aaf6:	465b      	mov	r3, fp
 800aaf8:	f7f5 fd86 	bl	8000608 <__aeabi_dmul>
 800aafc:	a337      	add	r3, pc, #220	; (adr r3, 800abdc <__kernel_sin+0x174>)
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f7f5 fbcb 	bl	800029c <__adddf3>
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	4606      	mov	r6, r0
 800ab0a:	460f      	mov	r7, r1
 800ab0c:	b9eb      	cbnz	r3, 800ab4a <__kernel_sin+0xe2>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	460b      	mov	r3, r1
 800ab12:	4650      	mov	r0, sl
 800ab14:	4659      	mov	r1, fp
 800ab16:	f7f5 fd77 	bl	8000608 <__aeabi_dmul>
 800ab1a:	a325      	add	r3, pc, #148	; (adr r3, 800abb0 <__kernel_sin+0x148>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fbba 	bl	8000298 <__aeabi_dsub>
 800ab24:	4642      	mov	r2, r8
 800ab26:	464b      	mov	r3, r9
 800ab28:	f7f5 fd6e 	bl	8000608 <__aeabi_dmul>
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4620      	mov	r0, r4
 800ab32:	4629      	mov	r1, r5
 800ab34:	f7f5 fbb2 	bl	800029c <__adddf3>
 800ab38:	4604      	mov	r4, r0
 800ab3a:	460d      	mov	r5, r1
 800ab3c:	ec45 4b10 	vmov	d0, r4, r5
 800ab40:	b003      	add	sp, #12
 800ab42:	ecbd 8b04 	vpop	{d8-d9}
 800ab46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <__kernel_sin+0x150>)
 800ab4c:	ec51 0b18 	vmov	r0, r1, d8
 800ab50:	2200      	movs	r2, #0
 800ab52:	f7f5 fd59 	bl	8000608 <__aeabi_dmul>
 800ab56:	4632      	mov	r2, r6
 800ab58:	ec41 0b19 	vmov	d9, r0, r1
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	4640      	mov	r0, r8
 800ab60:	4649      	mov	r1, r9
 800ab62:	f7f5 fd51 	bl	8000608 <__aeabi_dmul>
 800ab66:	4602      	mov	r2, r0
 800ab68:	460b      	mov	r3, r1
 800ab6a:	ec51 0b19 	vmov	r0, r1, d9
 800ab6e:	f7f5 fb93 	bl	8000298 <__aeabi_dsub>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 fd47 	bl	8000608 <__aeabi_dmul>
 800ab7a:	ec53 2b18 	vmov	r2, r3, d8
 800ab7e:	f7f5 fb8b 	bl	8000298 <__aeabi_dsub>
 800ab82:	a30b      	add	r3, pc, #44	; (adr r3, 800abb0 <__kernel_sin+0x148>)
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	4606      	mov	r6, r0
 800ab8a:	460f      	mov	r7, r1
 800ab8c:	4640      	mov	r0, r8
 800ab8e:	4649      	mov	r1, r9
 800ab90:	f7f5 fd3a 	bl	8000608 <__aeabi_dmul>
 800ab94:	4602      	mov	r2, r0
 800ab96:	460b      	mov	r3, r1
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	f7f5 fb7e 	bl	800029c <__adddf3>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4620      	mov	r0, r4
 800aba6:	4629      	mov	r1, r5
 800aba8:	f7f5 fb76 	bl	8000298 <__aeabi_dsub>
 800abac:	e7c4      	b.n	800ab38 <__kernel_sin+0xd0>
 800abae:	bf00      	nop
 800abb0:	55555549 	.word	0x55555549
 800abb4:	3fc55555 	.word	0x3fc55555
 800abb8:	3fe00000 	.word	0x3fe00000
 800abbc:	5acfd57c 	.word	0x5acfd57c
 800abc0:	3de5d93a 	.word	0x3de5d93a
 800abc4:	8a2b9ceb 	.word	0x8a2b9ceb
 800abc8:	3e5ae5e6 	.word	0x3e5ae5e6
 800abcc:	57b1fe7d 	.word	0x57b1fe7d
 800abd0:	3ec71de3 	.word	0x3ec71de3
 800abd4:	19c161d5 	.word	0x19c161d5
 800abd8:	3f2a01a0 	.word	0x3f2a01a0
 800abdc:	1110f8a6 	.word	0x1110f8a6
 800abe0:	3f811111 	.word	0x3f811111

0800abe4 <fabs>:
 800abe4:	ec51 0b10 	vmov	r0, r1, d0
 800abe8:	ee10 2a10 	vmov	r2, s0
 800abec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800abf0:	ec43 2b10 	vmov	d0, r2, r3
 800abf4:	4770      	bx	lr
	...

0800abf8 <floor>:
 800abf8:	ec51 0b10 	vmov	r0, r1, d0
 800abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ac04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ac08:	2e13      	cmp	r6, #19
 800ac0a:	ee10 5a10 	vmov	r5, s0
 800ac0e:	ee10 8a10 	vmov	r8, s0
 800ac12:	460c      	mov	r4, r1
 800ac14:	dc32      	bgt.n	800ac7c <floor+0x84>
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	da14      	bge.n	800ac44 <floor+0x4c>
 800ac1a:	a333      	add	r3, pc, #204	; (adr r3, 800ace8 <floor+0xf0>)
 800ac1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac20:	f7f5 fb3c 	bl	800029c <__adddf3>
 800ac24:	2200      	movs	r2, #0
 800ac26:	2300      	movs	r3, #0
 800ac28:	f7f5 ff7e 	bl	8000b28 <__aeabi_dcmpgt>
 800ac2c:	b138      	cbz	r0, 800ac3e <floor+0x46>
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	da57      	bge.n	800ace2 <floor+0xea>
 800ac32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ac36:	431d      	orrs	r5, r3
 800ac38:	d001      	beq.n	800ac3e <floor+0x46>
 800ac3a:	4c2d      	ldr	r4, [pc, #180]	; (800acf0 <floor+0xf8>)
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	e025      	b.n	800ac90 <floor+0x98>
 800ac44:	4f2b      	ldr	r7, [pc, #172]	; (800acf4 <floor+0xfc>)
 800ac46:	4137      	asrs	r7, r6
 800ac48:	ea01 0307 	and.w	r3, r1, r7
 800ac4c:	4303      	orrs	r3, r0
 800ac4e:	d01f      	beq.n	800ac90 <floor+0x98>
 800ac50:	a325      	add	r3, pc, #148	; (adr r3, 800ace8 <floor+0xf0>)
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f7f5 fb21 	bl	800029c <__adddf3>
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f7f5 ff63 	bl	8000b28 <__aeabi_dcmpgt>
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d0eb      	beq.n	800ac3e <floor+0x46>
 800ac66:	2c00      	cmp	r4, #0
 800ac68:	bfbe      	ittt	lt
 800ac6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ac6e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ac72:	19a4      	addlt	r4, r4, r6
 800ac74:	ea24 0407 	bic.w	r4, r4, r7
 800ac78:	2500      	movs	r5, #0
 800ac7a:	e7e0      	b.n	800ac3e <floor+0x46>
 800ac7c:	2e33      	cmp	r6, #51	; 0x33
 800ac7e:	dd0b      	ble.n	800ac98 <floor+0xa0>
 800ac80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ac84:	d104      	bne.n	800ac90 <floor+0x98>
 800ac86:	ee10 2a10 	vmov	r2, s0
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	f7f5 fb06 	bl	800029c <__adddf3>
 800ac90:	ec41 0b10 	vmov	d0, r0, r1
 800ac94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ac9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aca0:	fa23 f707 	lsr.w	r7, r3, r7
 800aca4:	4207      	tst	r7, r0
 800aca6:	d0f3      	beq.n	800ac90 <floor+0x98>
 800aca8:	a30f      	add	r3, pc, #60	; (adr r3, 800ace8 <floor+0xf0>)
 800acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acae:	f7f5 faf5 	bl	800029c <__adddf3>
 800acb2:	2200      	movs	r2, #0
 800acb4:	2300      	movs	r3, #0
 800acb6:	f7f5 ff37 	bl	8000b28 <__aeabi_dcmpgt>
 800acba:	2800      	cmp	r0, #0
 800acbc:	d0bf      	beq.n	800ac3e <floor+0x46>
 800acbe:	2c00      	cmp	r4, #0
 800acc0:	da02      	bge.n	800acc8 <floor+0xd0>
 800acc2:	2e14      	cmp	r6, #20
 800acc4:	d103      	bne.n	800acce <floor+0xd6>
 800acc6:	3401      	adds	r4, #1
 800acc8:	ea25 0507 	bic.w	r5, r5, r7
 800accc:	e7b7      	b.n	800ac3e <floor+0x46>
 800acce:	2301      	movs	r3, #1
 800acd0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800acd4:	fa03 f606 	lsl.w	r6, r3, r6
 800acd8:	4435      	add	r5, r6
 800acda:	4545      	cmp	r5, r8
 800acdc:	bf38      	it	cc
 800acde:	18e4      	addcc	r4, r4, r3
 800ace0:	e7f2      	b.n	800acc8 <floor+0xd0>
 800ace2:	2500      	movs	r5, #0
 800ace4:	462c      	mov	r4, r5
 800ace6:	e7aa      	b.n	800ac3e <floor+0x46>
 800ace8:	8800759c 	.word	0x8800759c
 800acec:	7e37e43c 	.word	0x7e37e43c
 800acf0:	bff00000 	.word	0xbff00000
 800acf4:	000fffff 	.word	0x000fffff

0800acf8 <scalbn>:
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	ec55 4b10 	vmov	r4, r5, d0
 800acfe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ad02:	4606      	mov	r6, r0
 800ad04:	462b      	mov	r3, r5
 800ad06:	b99a      	cbnz	r2, 800ad30 <scalbn+0x38>
 800ad08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ad0c:	4323      	orrs	r3, r4
 800ad0e:	d036      	beq.n	800ad7e <scalbn+0x86>
 800ad10:	4b39      	ldr	r3, [pc, #228]	; (800adf8 <scalbn+0x100>)
 800ad12:	4629      	mov	r1, r5
 800ad14:	ee10 0a10 	vmov	r0, s0
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f7f5 fc75 	bl	8000608 <__aeabi_dmul>
 800ad1e:	4b37      	ldr	r3, [pc, #220]	; (800adfc <scalbn+0x104>)
 800ad20:	429e      	cmp	r6, r3
 800ad22:	4604      	mov	r4, r0
 800ad24:	460d      	mov	r5, r1
 800ad26:	da10      	bge.n	800ad4a <scalbn+0x52>
 800ad28:	a32b      	add	r3, pc, #172	; (adr r3, 800add8 <scalbn+0xe0>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	e03a      	b.n	800ada6 <scalbn+0xae>
 800ad30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ad34:	428a      	cmp	r2, r1
 800ad36:	d10c      	bne.n	800ad52 <scalbn+0x5a>
 800ad38:	ee10 2a10 	vmov	r2, s0
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 faac 	bl	800029c <__adddf3>
 800ad44:	4604      	mov	r4, r0
 800ad46:	460d      	mov	r5, r1
 800ad48:	e019      	b.n	800ad7e <scalbn+0x86>
 800ad4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ad4e:	460b      	mov	r3, r1
 800ad50:	3a36      	subs	r2, #54	; 0x36
 800ad52:	4432      	add	r2, r6
 800ad54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ad58:	428a      	cmp	r2, r1
 800ad5a:	dd08      	ble.n	800ad6e <scalbn+0x76>
 800ad5c:	2d00      	cmp	r5, #0
 800ad5e:	a120      	add	r1, pc, #128	; (adr r1, 800ade0 <scalbn+0xe8>)
 800ad60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad64:	da1c      	bge.n	800ada0 <scalbn+0xa8>
 800ad66:	a120      	add	r1, pc, #128	; (adr r1, 800ade8 <scalbn+0xf0>)
 800ad68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6c:	e018      	b.n	800ada0 <scalbn+0xa8>
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	dd08      	ble.n	800ad84 <scalbn+0x8c>
 800ad72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ad76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ad7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ad7e:	ec45 4b10 	vmov	d0, r4, r5
 800ad82:	bd70      	pop	{r4, r5, r6, pc}
 800ad84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ad88:	da19      	bge.n	800adbe <scalbn+0xc6>
 800ad8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ad8e:	429e      	cmp	r6, r3
 800ad90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ad94:	dd0a      	ble.n	800adac <scalbn+0xb4>
 800ad96:	a112      	add	r1, pc, #72	; (adr r1, 800ade0 <scalbn+0xe8>)
 800ad98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e2      	bne.n	800ad66 <scalbn+0x6e>
 800ada0:	a30f      	add	r3, pc, #60	; (adr r3, 800ade0 <scalbn+0xe8>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fc2f 	bl	8000608 <__aeabi_dmul>
 800adaa:	e7cb      	b.n	800ad44 <scalbn+0x4c>
 800adac:	a10a      	add	r1, pc, #40	; (adr r1, 800add8 <scalbn+0xe0>)
 800adae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d0b8      	beq.n	800ad28 <scalbn+0x30>
 800adb6:	a10e      	add	r1, pc, #56	; (adr r1, 800adf0 <scalbn+0xf8>)
 800adb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adbc:	e7b4      	b.n	800ad28 <scalbn+0x30>
 800adbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800adc2:	3236      	adds	r2, #54	; 0x36
 800adc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800adc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800adcc:	4620      	mov	r0, r4
 800adce:	4b0c      	ldr	r3, [pc, #48]	; (800ae00 <scalbn+0x108>)
 800add0:	2200      	movs	r2, #0
 800add2:	e7e8      	b.n	800ada6 <scalbn+0xae>
 800add4:	f3af 8000 	nop.w
 800add8:	c2f8f359 	.word	0xc2f8f359
 800addc:	01a56e1f 	.word	0x01a56e1f
 800ade0:	8800759c 	.word	0x8800759c
 800ade4:	7e37e43c 	.word	0x7e37e43c
 800ade8:	8800759c 	.word	0x8800759c
 800adec:	fe37e43c 	.word	0xfe37e43c
 800adf0:	c2f8f359 	.word	0xc2f8f359
 800adf4:	81a56e1f 	.word	0x81a56e1f
 800adf8:	43500000 	.word	0x43500000
 800adfc:	ffff3cb0 	.word	0xffff3cb0
 800ae00:	3c900000 	.word	0x3c900000

0800ae04 <_close>:
 800ae04:	4b02      	ldr	r3, [pc, #8]	; (800ae10 <_close+0xc>)
 800ae06:	2258      	movs	r2, #88	; 0x58
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0e:	4770      	bx	lr
 800ae10:	200002a8 	.word	0x200002a8

0800ae14 <_fstat>:
 800ae14:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <_fstat+0xc>)
 800ae16:	2258      	movs	r2, #88	; 0x58
 800ae18:	601a      	str	r2, [r3, #0]
 800ae1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1e:	4770      	bx	lr
 800ae20:	200002a8 	.word	0x200002a8

0800ae24 <_getpid>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	; (800ae30 <_getpid+0xc>)
 800ae26:	2258      	movs	r2, #88	; 0x58
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae2e:	4770      	bx	lr
 800ae30:	200002a8 	.word	0x200002a8

0800ae34 <_isatty>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	; (800ae40 <_isatty+0xc>)
 800ae36:	2258      	movs	r2, #88	; 0x58
 800ae38:	601a      	str	r2, [r3, #0]
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	200002a8 	.word	0x200002a8

0800ae44 <_kill>:
 800ae44:	4b02      	ldr	r3, [pc, #8]	; (800ae50 <_kill+0xc>)
 800ae46:	2258      	movs	r2, #88	; 0x58
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae4e:	4770      	bx	lr
 800ae50:	200002a8 	.word	0x200002a8

0800ae54 <_lseek>:
 800ae54:	4b02      	ldr	r3, [pc, #8]	; (800ae60 <_lseek+0xc>)
 800ae56:	2258      	movs	r2, #88	; 0x58
 800ae58:	601a      	str	r2, [r3, #0]
 800ae5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5e:	4770      	bx	lr
 800ae60:	200002a8 	.word	0x200002a8

0800ae64 <_read>:
 800ae64:	4b02      	ldr	r3, [pc, #8]	; (800ae70 <_read+0xc>)
 800ae66:	2258      	movs	r2, #88	; 0x58
 800ae68:	601a      	str	r2, [r3, #0]
 800ae6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ae6e:	4770      	bx	lr
 800ae70:	200002a8 	.word	0x200002a8

0800ae74 <_sbrk>:
 800ae74:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <_sbrk+0x14>)
 800ae76:	6811      	ldr	r1, [r2, #0]
 800ae78:	4603      	mov	r3, r0
 800ae7a:	b909      	cbnz	r1, 800ae80 <_sbrk+0xc>
 800ae7c:	4903      	ldr	r1, [pc, #12]	; (800ae8c <_sbrk+0x18>)
 800ae7e:	6011      	str	r1, [r2, #0]
 800ae80:	6810      	ldr	r0, [r2, #0]
 800ae82:	4403      	add	r3, r0
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	4770      	bx	lr
 800ae88:	200002b0 	.word	0x200002b0
 800ae8c:	200002b8 	.word	0x200002b8

0800ae90 <_write>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	; (800ae9c <_write+0xc>)
 800ae92:	2258      	movs	r2, #88	; 0x58
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9a:	4770      	bx	lr
 800ae9c:	200002a8 	.word	0x200002a8

0800aea0 <_exit>:
 800aea0:	e7fe      	b.n	800aea0 <_exit>
	...

0800aea4 <_init>:
 800aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea6:	bf00      	nop
 800aea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeaa:	bc08      	pop	{r3}
 800aeac:	469e      	mov	lr, r3
 800aeae:	4770      	bx	lr

0800aeb0 <_fini>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	bf00      	nop
 800aeb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aeb6:	bc08      	pop	{r3}
 800aeb8:	469e      	mov	lr, r3
 800aeba:	4770      	bx	lr
