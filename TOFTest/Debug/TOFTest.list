
TOFTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab74  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ec0  0800ad18  0800ad18  0001ad18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbd8  0800bbd8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bbe0  0800bbe0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bbe0  0800bbe0  0001bbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bbe4  0800bbe4  0001bbe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bbe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001fc  0800bde4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800bde4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000987b  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  00029aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a8  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000083e0  00000000  00000000  0002c7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00058bb7  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008d777  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000037e8  00000000  00000000  0008d7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000ffd8  00000000  00000000  00090fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a0f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a1054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acfc 	.word	0x0800acfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800acfc 	.word	0x0800acfc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
 * @function:	 main
 *
 * @brief: 		 executable function, timing control and trigger
 */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af02      	add	r7, sp, #8

	enableTOFSensor = true;
 8000ec2:	4b98      	ldr	r3, [pc, #608]	; (8001124 <main+0x268>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	TOF_sensor_used = 0x29;
 8000ec8:	4b97      	ldr	r3, [pc, #604]	; (8001128 <main+0x26c>)
 8000eca:	2229      	movs	r2, #41	; 0x29
 8000ecc:	701a      	strb	r2, [r3, #0]

	// variables to store rotation and push button
	int32_t position = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t oldPosition = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
	bool buttonPushed = false;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// variables to store the distance
	uint16_t TOF_DISTANCE_1 = 100;
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	//uint16_t olddistance = TOF_VL53L0X_OUT_OF_RANGE;


	// timer variables
	uint32_t TimerExec = 0UL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t TimerVisu = 0UL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t TimerLED = 0UL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38

	// Array with all timer variables and calculation of size
	uint32_t *timerList[] = { &TimerExec, &TimerVisu, &TimerLED};
 8000eee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8000efa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
	size_t arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8000f00:	2303      	movs	r3, #3
 8000f02:	64bb      	str	r3, [r7, #72]	; 0x48

	// init project
	initBala();
 8000f04:	f000 f98a 	bl	800121c <initBala>

	// TOF-Instanz deklarieren
	TOFSensor_t TOF_Sensor_1;

	// Initialisieren des TOF-Sensors
	initTOFSensorData(&TOF_Sensor_1, I2C1, TOF_ADDR_VL53LOX, TOF_DEFAULT_MODE_D, TOF_DISTANCE_1);
 8000f08:	1d38      	adds	r0, r7, #4
 8000f0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2229      	movs	r2, #41	; 0x29
 8000f14:	4985      	ldr	r1, [pc, #532]	; (800112c <main+0x270>)
 8000f16:	f002 fa4b 	bl	80033b0 <initTOFSensorData>

	// Konfigurieren und Aktivieren des Sensors
	configTOFSensor(&TOF_Sensor_1, TOF_DEFAULT_MODE_D, true);
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fa68 	bl	80033f6 <configTOFSensor>
	//TOF_set_ranging_profile(&TOF_Sensor_1);


	while (1)
	{
		if (true == timerTrigger)
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <main+0x274>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <main+0x82>
		{
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8000f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fe03 	bl	8006b44 <systickUpdateTimerList>
		}

		// if timer execute is expired
		if (isSystickExpired(TimerExec))
 8000f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 fdc9 	bl	8006ad8 <isSystickExpired>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8124 	beq.w	8001196 <main+0x2da>
		{
			position = getRotaryPosition();
 8000f4e:	f001 fb0d 	bl	800256c <getRotaryPosition>
 8000f52:	6538      	str	r0, [r7, #80]	; 0x50
			buttonPushed = getRotaryPushButton();
 8000f54:	f001 fae8 	bl	8002528 <getRotaryPushButton>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			// switch case for different screen pages
			switch(page)
 8000f66:	4b73      	ldr	r3, [pc, #460]	; (8001134 <main+0x278>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	f200 80ef 	bhi.w	800114e <main+0x292>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <main+0xbc>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f8d 	.word	0x08000f8d
 8000f7c:	08001031 	.word	0x08001031
 8000f80:	0800105b 	.word	0x0800105b
 8000f84:	0800107b 	.word	0x0800107b
 8000f88:	0800110d 	.word	0x0800110d
			{
			case SCREEN_MAIN:
				if(buttonPushed)
 8000f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d03a      	beq.n	800100a <main+0x14e>
					{
					page = (uint16_t)position % 4 + 1;
 8000f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b64      	ldr	r3, [pc, #400]	; (8001134 <main+0x278>)
 8000fa4:	701a      	strb	r2, [r3, #0]

					// check if it is tried to go to the page of an not initialized sensor
					if(page == 2 && initedTOF == false)
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <main+0x278>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d10c      	bne.n	8000fc8 <main+0x10c>
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <main+0x27c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <main+0x10c>
					{
						page = 0;
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <main+0x278>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 feb6 	bl	8001d34 <visualisationShowError>
					}

					if(page == 3 && initedTOF == false)
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <main+0x278>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d10c      	bne.n	8000fea <main+0x12e>
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <main+0x27c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f083 0301 	eor.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <main+0x12e>
					{
						page = 0;
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <main+0x278>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fea5 	bl	8001d34 <visualisationShowError>
					}


					// change menu page
					visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <main+0x278>)
 8000fec:	7818      	ldrb	r0, [r3, #0]
 8000fee:	4b52      	ldr	r3, [pc, #328]	; (8001138 <main+0x27c>)
 8000ff0:	7819      	ldrb	r1, [r3, #0]
 8000ff2:	4b52      	ldr	r3, [pc, #328]	; (800113c <main+0x280>)
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	f000 fd24 	bl	8001a44 <visualisationMenu>
					initSubMenu(page, &TOF_Sensor_1);
 8000ffc:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <main+0x278>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1d3a      	adds	r2, r7, #4
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f927 	bl	8001258 <initSubMenu>
					}

				if(oldPosition != position)
 800100a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800100c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800100e:	429a      	cmp	r2, r3
 8001010:	f000 8084 	beq.w	800111c <main+0x260>
				{
					oldPosition = position;
 8001014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001016:	657b      	str	r3, [r7, #84]	; 0x54

					visualisationMenuGridFocus((uint16_t)position % 4, tft_WHITE, tft_YELLOW);
 8001018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800101a:	b29b      	uxth	r3, r3
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001024:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fb41 	bl	80016b0 <visualisationMenuGridFocus>
				}
				break;
 800102e:	e075      	b.n	800111c <main+0x260>

			// init I2C page
			case SCREEN_PAGE1:
				if(buttonPushed)
 8001030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <main+0x182>
				{
					exitMenu = EXIT_FROMSUB1;
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <main+0x284>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				}
				switch(i2cInitPort)
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <main+0x288>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d002      	beq.n	800104c <main+0x190>
 8001046:	2b02      	cmp	r3, #2
 8001048:	d005      	beq.n	8001056 <main+0x19a>
				case I2C_2:
					//i2cScanAndInit(i2c2);
					break;
				}

				break;
 800104a:	e080      	b.n	800114e <main+0x292>
					i2cScanAndInit(&TOF_Sensor_1);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f936 	bl	80012c0 <i2cScanAndInit>
					break;
 8001054:	e000      	b.n	8001058 <main+0x19c>
					break;
 8001056:	bf00      	nop
				break;
 8001058:	e079      	b.n	800114e <main+0x292>

			// TOF page
			case SCREEN_PAGE2:
				if(buttonPushed)
 800105a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <main+0x1b4>
				{
					TOF_stop_continuous(&TOF_Sensor_1);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fcef 	bl	8004a48 <TOF_stop_continuous>
					exitMenu = EXIT_FROMSUB2;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <main+0x284>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
				}
				TOF_read_continuous_distance(&TOF_Sensor_1);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fd48 	bl	8004b08 <TOF_read_continuous_distance>
				break;
 8001078:	e069      	b.n	800114e <main+0x292>

			// Ranging Mode Page page
			case SCREEN_PAGE3:
				position = getRotaryPosition();
 800107a:	f001 fa77 	bl	800256c <getRotaryPosition>
 800107e:	6538      	str	r0, [r7, #80]	; 0x50
				uint16_t MODE = (uint16_t)position % 4 + 1;
 8001080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001082:	b29b      	uxth	r3, r3
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	b29b      	uxth	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				visualisationRangingProfileTOF(MODE);
 8001090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001094:	4618      	mov	r0, r3
 8001096:	f000 feeb 	bl	8001e70 <visualisationRangingProfileTOF>

				if(buttonPushed)
 800109a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d03e      	beq.n	8001120 <main+0x264>
				{
					configTOFSensor(&TOF_Sensor_1, MODE, true);
 80010a2:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2201      	movs	r2, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f9a3 	bl	80033f6 <configTOFSensor>
					//TOF_set_ranging_profile(&TOF_Sensor_1);

					switch(MODE){		//change timerexecution time to recommended +3ms to make shure works
 80010b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010b4:	3b01      	subs	r3, #1
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81a      	bhi.n	80010f0 <main+0x234>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <main+0x204>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
					case 1:
						timeTimerExec = 35;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <main+0x28c>)
 80010d2:	2223      	movs	r2, #35	; 0x23
 80010d4:	801a      	strh	r2, [r3, #0]
						break;
 80010d6:	e00f      	b.n	80010f8 <main+0x23c>
					case 2:
						timeTimerExec = 23;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0x28c>)
 80010da:	2217      	movs	r2, #23
 80010dc:	801a      	strh	r2, [r3, #0]
						break;
 80010de:	e00b      	b.n	80010f8 <main+0x23c>
					case 3:
						timeTimerExec = 203;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <main+0x28c>)
 80010e2:	22cb      	movs	r2, #203	; 0xcb
 80010e4:	801a      	strh	r2, [r3, #0]
						break;
 80010e6:	e007      	b.n	80010f8 <main+0x23c>
					case 4:
						timeTimerExec = 36;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <main+0x28c>)
 80010ea:	2224      	movs	r2, #36	; 0x24
 80010ec:	801a      	strh	r2, [r3, #0]
						break;
 80010ee:	e003      	b.n	80010f8 <main+0x23c>
					default:
						timeTimerExec = 30;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <main+0x28c>)
 80010f2:	221e      	movs	r2, #30
 80010f4:	801a      	strh	r2, [r3, #0]
						break;
 80010f6:	bf00      	nop
					}
					TimerExec = 0UL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
					TimerVisu = 0UL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
					TimerLED = 0UL;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38

					exitMenu = EXIT_FROMSUB3;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0x284>)
 8001106:	2202      	movs	r2, #2
 8001108:	701a      	strb	r2, [r3, #0]
				}
				break;
 800110a:	e009      	b.n	8001120 <main+0x264>

			case SCREEN_PAGE4:
				if(buttonPushed)
 800110c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01b      	beq.n	800114c <main+0x290>
				{
					exitMenu = EXIT_FROMSUB4;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x284>)
 8001116:	2203      	movs	r2, #3
 8001118:	701a      	strb	r2, [r3, #0]
				}
				break;
 800111a:	e017      	b.n	800114c <main+0x290>
				break;
 800111c:	bf00      	nop
 800111e:	e016      	b.n	800114e <main+0x292>
				break;
 8001120:	bf00      	nop
 8001122:	e014      	b.n	800114e <main+0x292>
 8001124:	2000021f 	.word	0x2000021f
 8001128:	20000002 	.word	0x20000002
 800112c:	40005400 	.word	0x40005400
 8001130:	20000224 	.word	0x20000224
 8001134:	2000021e 	.word	0x2000021e
 8001138:	2000021d 	.word	0x2000021d
 800113c:	2000021c 	.word	0x2000021c
 8001140:	20000005 	.word	0x20000005
 8001144:	20000003 	.word	0x20000003
 8001148:	20000000 	.word	0x20000000
				break;
 800114c:	bf00      	nop
			}

			// exit sub page to main menu, focus right menu item
			if(exitMenu != EXIT_FALSE)
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <main+0x348>)
 8001150:	f993 3000 	ldrsb.w	r3, [r3]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d014      	beq.n	8001184 <main+0x2c8>
			{
				page = SCREEN_MAIN;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <main+0x34c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
				setRotaryPosition(exitMenu);
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <main+0x348>)
 8001162:	f993 3000 	ldrsb.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fa16 	bl	8002598 <setRotaryPosition>
				visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <main+0x34c>)
 800116e:	7818      	ldrb	r0, [r3, #0]
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <main+0x350>)
 8001172:	7819      	ldrb	r1, [r3, #0]
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <main+0x354>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	f000 fc63 	bl	8001a44 <visualisationMenu>

				exitMenu = EXIT_FALSE;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <main+0x348>)
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	701a      	strb	r2, [r3, #0]
			}

			systickSetTicktime(&TimerExec, timeTimerExec);
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <main+0x358>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fc93 	bl	8006abc <systickSetTicktime>
		}

		// if timer visualization is expired
		if (isSystickExpired(TimerVisu))
 8001196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fc9d 	bl	8006ad8 <isSystickExpired>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01c      	beq.n	80011de <main+0x322>
		{
			// switch case for dynamic display update
			switch(page)
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <main+0x34c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d812      	bhi.n	80011d2 <main+0x316>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <main+0x2f8>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011d3 	.word	0x080011d3
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011c9 	.word	0x080011c9
 80011c0:	080011d3 	.word	0x080011d3
 80011c4:	080011d3 	.word	0x080011d3
						delayms(200);
						visualisationTOF(&TOF_Sensor_1);

					}
*/
				visualisationTOF(&TOF_Sensor_1);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fe10 	bl	8001df0 <visualisationTOF>

				break;
 80011d0:	bf00      	nop
				break;
			case SCREEN_PAGE4:
				break;
			}

			systickSetTicktime(&TimerVisu, timeTimerVisu);
 80011d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011d6:	2132      	movs	r1, #50	; 0x32
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 fc6f 	bl	8006abc <systickSetTicktime>
		}

		// if timer LED is expired
		if (isSystickExpired(TimerLED))
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fc79 	bl	8006ad8 <isSystickExpired>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f43f ae9c 	beq.w	8000f26 <main+0x6a>
		{
			// toggle LED to show current speed of system
			gpioTogglePin(LED_BLUE_ADR);
 80011ee:	210d      	movs	r1, #13
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <main+0x35c>)
 80011f2:	f004 fbf3 	bl	80059dc <gpioTogglePin>

			systickSetTicktime(&TimerLED, timeTimerLED);
 80011f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fa:	21fa      	movs	r1, #250	; 0xfa
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fc5d 	bl	8006abc <systickSetTicktime>
		if (true == timerTrigger)
 8001202:	e690      	b.n	8000f26 <main+0x6a>
 8001204:	20000005 	.word	0x20000005
 8001208:	2000021e 	.word	0x2000021e
 800120c:	2000021d 	.word	0x2000021d
 8001210:	2000021c 	.word	0x2000021c
 8001214:	20000000 	.word	0x20000000
 8001218:	40020400 	.word	0x40020400

0800121c <initBala>:
 *
 * @brief: 		 initialization the Bala-system, initialization hardware
 * 				 from Balancer library and start visualization
 */
void initBala(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	// initialization bala-library
	//BalaHWsetup();

	 ledActivate();		// at BALO.c
 8001220:	f000 ffe4 	bl	80021ec <ledActivate>
	 i2cActivate();		// at BALO.c
 8001224:	f000 ff78 	bl	8002118 <i2cActivate>
	 LED_red_on;
 8001228:	210f      	movs	r1, #15
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <initBala+0x38>)
 800122c:	f004 fbaa 	bl	8005984 <gpioResetPin>
	 //adcActivate();



	// initialization rotary push button
	initRotaryPushButton();
 8001230:	f001 f8dc 	bl	80023ec <initRotaryPushButton>

	// initialization LED
	initRotaryPushButtonLED();
 8001234:	f001 f940 	bl	80024b8 <initRotaryPushButtonLED>

	// Configure of SysTick-Timers
	systickInit(SYSTICK_1MS);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f005 fc2a 	bl	8006a94 <systickInit>

	//initialization needed for TFT Display
	spiInit();
 8001240:	f001 fa52 	bl	80026e8 <spiInit>
	tftInitR(INITR_REDTAB);
 8001244:	2001      	movs	r0, #1
 8001246:	f001 fb0d 	bl	8002864 <tftInitR>
	// start visualization
	visualisationStart();
 800124a:	f000 f8c7 	bl	80013dc <visualisationStart>

	//start page 1: i2c sensor connect
	//page = SCREEN_PAGE1;
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020400 	.word	0x40020400

08001258 <initSubMenu>:
 * 				 with correct transition initialization
 *
 * @parameters:	 SCREEN_PAGES_t page:	 page to be initialized
 */
void initSubMenu(SCREEN_PAGES_t page, TOFSensor_t* TOFSENS)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
	// switch case for menu pages
	switch(page)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d81e      	bhi.n	80012a8 <initSubMenu+0x50>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <initSubMenu+0x18>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	080012a7 	.word	0x080012a7
 8001274:	08001285 	.word	0x08001285
 8001278:	0800129f 	.word	0x0800129f
 800127c:	080012a7 	.word	0x080012a7
 8001280:	080012a7 	.word	0x080012a7
			break;
	case SCREEN_PAGE1:
		//enable3DGSensor = false;
		// disable "sensor enable" to be able to initialize all sensors

		enableTOFSensor = false;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <initSubMenu+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

		// reset i2c scan
		//scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_1;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <initSubMenu+0x5c>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
		i2cInitAttempts = I2C_MAXATTEMPTS;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <initSubMenu+0x60>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]

		// reset sensor initialization
		initedTOF = false;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <initSubMenu+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
		break;
 800129c:	e004      	b.n	80012a8 <initSubMenu+0x50>
	case SCREEN_PAGE2:
		TOF_start_continuous(TOFSENS);
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f003 faf2 	bl	8004888 <TOF_start_continuous>
			break;
 80012a4:	e000      	b.n	80012a8 <initSubMenu+0x50>
			break;
 80012a6:	bf00      	nop
	case SCREEN_PAGE3:
			break;
	case SCREEN_PAGE4:
			break;
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000021f 	.word	0x2000021f
 80012b4:	20000003 	.word	0x20000003
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2000021d 	.word	0x2000021d

080012c0 <i2cScanAndInit>:
 * 				 with correct transition initialization
 *
 * @parameters:	 I2C_TypeDef   *i2c:	 i2c to be scanned
 */
void i2cScanAndInit(TOFSensor_t *TOFSENS) //
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	static uint8_t scanAddr = (uint8_t)I2C_MAXADRESS;			// scan I2C address
	uint8_t scanResult;
	bool InitResult;
	I2C_TypeDef *i2c ;
	i2c = TOFSENS->i2c_tof;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
	scanResult =I2C_SCAN(i2c, scanAddr);
 80012ce:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <i2cScanAndInit+0xfc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fffb 	bl	80022d0 <I2C_SCAN>
 80012da:	4603      	mov	r3, r0
 80012dc:	72fb      	strb	r3, [r7, #11]
	if (scanResult != 0)
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00f      	beq.n	8001304 <i2cScanAndInit+0x44>

			enable3DGSensor = true;
		}

		else		*/
		if(scanResult == TOF_ADDR_VL53LOX)
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	2b29      	cmp	r3, #41	; 0x29
 80012e8:	d109      	bne.n	80012fe <i2cScanAndInit+0x3e>
		{
			TOF_sensor_used = TOF_ADDR_VL53LOX;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <i2cScanAndInit+0x100>)
 80012ec:	2229      	movs	r2, #41	; 0x29
 80012ee:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_VL53LOX);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fdfb 	bl	8001eec <visualisationSensorRecognized>

			enableTOFSensor = true;
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <i2cScanAndInit+0x104>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e002      	b.n	8001304 <i2cScanAndInit+0x44>
		}
		else
		{
			// show that an unknown sensor was found
			visualisationSensorRecognized(VISUALISATION_UNKNOWN);
 80012fe:	2004      	movs	r0, #4
 8001300:	f000 fdf4 	bl	8001eec <visualisationSensorRecognized>
		}


	}
	// check if all i2c addresses are searched
	if (scanAddr <= 0)
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <i2cScanAndInit+0xfc>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <i2cScanAndInit+0x7e>
	{
		visualisationI2CScanDone(i2cInitAttempts);
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <i2cScanAndInit+0x108>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fe5f 	bl	8001fd4 <visualisationI2CScanDone>

		i2cInitAttempts -= 1;
 8001316:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <i2cScanAndInit+0x108>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3b01      	subs	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <i2cScanAndInit+0x108>)
 8001320:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <i2cScanAndInit+0xfc>)
 8001324:	222f      	movs	r2, #47	; 0x2f
 8001326:	701a      	strb	r2, [r3, #0]

		if(i2cInitAttempts < 1)
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <i2cScanAndInit+0x108>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10c      	bne.n	800134a <i2cScanAndInit+0x8a>
		{
			exitMenu = EXIT_FROMSUB1;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <i2cScanAndInit+0x10c>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
			i2cInitAttempts = I2C_MAXATTEMPTS;
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <i2cScanAndInit+0x108>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e005      	b.n	800134a <i2cScanAndInit+0x8a>
		}
	}
	// otherwise decrement scan address and search next i2c address
	else
	{
		scanAddr -= 1;
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <i2cScanAndInit+0xfc>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <i2cScanAndInit+0xfc>)
 8001348:	701a      	strb	r2, [r3, #0]
	}

	// initialize TOF sensor if one is found
	if(enableTOFSensor != ENABLE_TOF_FALSE && enableTOFSensor == (ENABLE_TOF_SENSOR_t)i2cInitPort)
 800134a:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <i2cScanAndInit+0x104>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01c      	beq.n	800138c <i2cScanAndInit+0xcc>
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <i2cScanAndInit+0x104>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <i2cScanAndInit+0x110>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d116      	bne.n	800138c <i2cScanAndInit+0xcc>
	{
		// do TOF sensor initialization
		visualisationSensorInit(SENSOR_INIT_RUNNING);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fe72 	bl	8002048 <visualisationSensorInit>

		i2c_tof = i2c;
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <i2cScanAndInit+0x114>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6013      	str	r3, [r2, #0]

		InitResult = TOF_init(TOFSENS);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f003 fa60 	bl	8004830 <TOF_init>
 8001370:	4603      	mov	r3, r0
 8001372:	72bb      	strb	r3, [r7, #10]

		// check if init was successful
		if(InitResult)
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <i2cScanAndInit+0xcc>
		{
			// show if init was successful
			visualisationSensorInit(SENSOR_INIT_DONE);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fe64 	bl	8002048 <visualisationSensorInit>
			initedTOF = true;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <i2cScanAndInit+0x118>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]

			// give chance to read success-massage
			//delayms(500);

			exitMenu = EXIT_FROMSUB1;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <i2cScanAndInit+0x10c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		}
	}

	// if bala24 is defined, there are 2 i2c ports available, both must be initialized
	#ifdef BALA2024
	if(i2cInitPort == I2C_1 && exitMenu == EXIT_FROMSUB1)
 800138c:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <i2cScanAndInit+0x110>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d10f      	bne.n	80013b4 <i2cScanAndInit+0xf4>
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <i2cScanAndInit+0x10c>)
 8001396:	f993 3000 	ldrsb.w	r3, [r3]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10a      	bne.n	80013b4 <i2cScanAndInit+0xf4>
	{
		exitMenu = EXIT_FALSE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <i2cScanAndInit+0x10c>)
 80013a0:	22ff      	movs	r2, #255	; 0xff
 80013a2:	701a      	strb	r2, [r3, #0]
		visualisationI2C2();
 80013a4:	f000 fe72 	bl	800208c <visualisationI2C2>

		scanAddr = I2C_MAXADRESS;
 80013a8:	4b04      	ldr	r3, [pc, #16]	; (80013bc <i2cScanAndInit+0xfc>)
 80013aa:	222f      	movs	r2, #47	; 0x2f
 80013ac:	701a      	strb	r2, [r3, #0]
		i2cInitPort = I2C_2;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <i2cScanAndInit+0x110>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	701a      	strb	r2, [r3, #0]

	}
	#endif /* BALA2024 */
}
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000006 	.word	0x20000006
 80013c0:	20000002 	.word	0x20000002
 80013c4:	2000021f 	.word	0x2000021f
 80013c8:	20000004 	.word	0x20000004
 80013cc:	20000005 	.word	0x20000005
 80013d0:	20000003 	.word	0x20000003
 80013d4:	20000220 	.word	0x20000220
 80013d8:	2000021d 	.word	0x2000021d

080013dc <visualisationStart>:
 * @function:	 visualisationStart
 *
 * @brief: 		 start visualization and start menu
 */
void visualisationStart(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	//display setup
	tftSetRotation(LANDSCAPE_FLIP);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f001 ff7d 	bl	80032e0 <tftSetRotation>
	tftSetFont((uint8_t *)&SmallFont[0]);
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <visualisationStart+0x50>)
 80013e8:	f001 fc70 	bl	8002ccc <tftSetFont>
	tftFillScreen(tft_BLACK);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f001 ff5d 	bl	80032ac <tftFillScreen>

	// show header on screen
	visualisationHeader();
 80013f2:	f000 f823 	bl	800143c <visualisationHeader>

	// welcome massage
	tftPrint("----------------",0,10,0);
 80013f6:	2300      	movs	r3, #0
 80013f8:	220a      	movs	r2, #10
 80013fa:	2100      	movs	r1, #0
 80013fc:	480c      	ldr	r0, [pc, #48]	; (8001430 <visualisationStart+0x54>)
 80013fe:	f001 febb 	bl	8003178 <tftPrint>
	tftPrint("TimeOfFlight Sensor",0,30,0);
 8001402:	2300      	movs	r3, #0
 8001404:	221e      	movs	r2, #30
 8001406:	2100      	movs	r1, #0
 8001408:	480a      	ldr	r0, [pc, #40]	; (8001434 <visualisationStart+0x58>)
 800140a:	f001 feb5 	bl	8003178 <tftPrint>
	tftPrint("Philipp & Andreas",0,50,0);
 800140e:	2300      	movs	r3, #0
 8001410:	2232      	movs	r2, #50	; 0x32
 8001412:	2100      	movs	r1, #0
 8001414:	4808      	ldr	r0, [pc, #32]	; (8001438 <visualisationStart+0x5c>)
 8001416:	f001 feaf 	bl	8003178 <tftPrint>
	tftPrint("----------------",0,70,0);
 800141a:	2300      	movs	r3, #0
 800141c:	2246      	movs	r2, #70	; 0x46
 800141e:	2100      	movs	r1, #0
 8001420:	4803      	ldr	r0, [pc, #12]	; (8001430 <visualisationStart+0x54>)
 8001422:	f001 fea9 	bl	8003178 <tftPrint>
	// wait, that it can be read
	//delayms(20000);

	// start menu scan i2c
	//visualisationMenu(SCREEN_PAGE3, false, false);
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800b100 	.word	0x0800b100
 8001430:	0800ad18 	.word	0x0800ad18
 8001434:	0800ad2c 	.word	0x0800ad2c
 8001438:	0800ad40 	.word	0x0800ad40

0800143c <visualisationHeader>:
 * @function:	 visualisationHeader
 *
 * @brief: 		 show screen header
 */
void visualisationHeader(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	tftPrint("ARM-TMT22GR2",0,0,0);
 8001440:	2300      	movs	r3, #0
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	4802      	ldr	r0, [pc, #8]	; (8001450 <visualisationHeader+0x14>)
 8001448:	f001 fe96 	bl	8003178 <tftPrint>
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0800ad54 	.word	0x0800ad54

08001454 <visualisationMenuGrid>:
 *
 * @parameters:	 MENU_GRID_t grid:	 which grid should be visualized
 * 				 uint16_t color:	 color for grid
 */
void visualisationMenuGrid(MENU_GRID_t grid, uint16_t color)
{
 8001454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af02      	add	r7, sp, #8
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
	//reset rectangle, print it black, if we don't want to draw black
	if(grid != GRID4)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d003      	beq.n	8001472 <visualisationMenuGrid+0x1e>
	{
		visualisationMenuGrid(GRID4, tft_BLACK);
 800146a:	2100      	movs	r1, #0
 800146c:	2003      	movs	r0, #3
 800146e:	f7ff fff1 	bl	8001454 <visualisationMenuGrid>
	}

	// switch different grids to be visualized
	switch(grid)
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2b03      	cmp	r3, #3
 8001476:	f200 8117 	bhi.w	80016a8 <visualisationMenuGrid+0x254>
 800147a:	a201      	add	r2, pc, #4	; (adr r2, 8001480 <visualisationMenuGrid+0x2c>)
 800147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001480:	08001491 	.word	0x08001491
 8001484:	08001513 	.word	0x08001513
 8001488:	080014b7 	.word	0x080014b7
 800148c:	08001587 	.word	0x08001587
	{
		// just a frame
		case GRID1:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8001490:	f001 ff76 	bl	8003380 <tftGetWidth>
 8001494:	4603      	mov	r3, r0
 8001496:	3b01      	subs	r3, #1
 8001498:	b2dc      	uxtb	r4, r3
 800149a:	f001 ff7d 	bl	8003398 <tftGetHeight>
 800149e:	4603      	mov	r3, r0
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	4613      	mov	r3, r2
 80014aa:	4622      	mov	r2, r4
 80014ac:	210e      	movs	r1, #14
 80014ae:	2000      	movs	r0, #0
 80014b0:	f001 fbc0 	bl	8002c34 <tftDrawRect>
			break;
 80014b4:	e0f8      	b.n	80016a8 <visualisationMenuGrid+0x254>
		// two frame grid vertical
		case GRID2V:
			tftDrawRect(0, 14, tftGetWidth()/2 -1, tftGetHeight() - 1, color);
 80014b6:	f001 ff63 	bl	8003380 <tftGetWidth>
 80014ba:	4603      	mov	r3, r0
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2dc      	uxtb	r4, r3
 80014c4:	f001 ff68 	bl	8003398 <tftGetHeight>
 80014c8:	4603      	mov	r3, r0
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	4613      	mov	r3, r2
 80014d4:	4622      	mov	r2, r4
 80014d6:	210e      	movs	r1, #14
 80014d8:	2000      	movs	r0, #0
 80014da:	f001 fbab 	bl	8002c34 <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 -1, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 80014de:	f001 ff4f 	bl	8003380 <tftGetWidth>
 80014e2:	4603      	mov	r3, r0
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b2dc      	uxtb	r4, r3
 80014ec:	f001 ff48 	bl	8003380 <tftGetWidth>
 80014f0:	4603      	mov	r3, r0
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b2dd      	uxtb	r5, r3
 80014f6:	f001 ff4f 	bl	8003398 <tftGetHeight>
 80014fa:	4603      	mov	r3, r0
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	88bb      	ldrh	r3, [r7, #4]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4613      	mov	r3, r2
 8001506:	462a      	mov	r2, r5
 8001508:	210e      	movs	r1, #14
 800150a:	4620      	mov	r0, r4
 800150c:	f001 fb92 	bl	8002c34 <tftDrawRect>
			break;
 8001510:	e0ca      	b.n	80016a8 <visualisationMenuGrid+0x254>
		// two frame grid horizontal
		case GRID2H:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 8001512:	f001 ff35 	bl	8003380 <tftGetWidth>
 8001516:	4603      	mov	r3, r0
 8001518:	3b01      	subs	r3, #1
 800151a:	b2dc      	uxtb	r4, r3
 800151c:	f001 ff3c 	bl	8003398 <tftGetHeight>
 8001520:	4603      	mov	r3, r0
 8001522:	461d      	mov	r5, r3
 8001524:	f001 ff2c 	bl	8003380 <tftGetWidth>
 8001528:	4603      	mov	r3, r0
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	1aeb      	subs	r3, r5, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3315      	adds	r3, #21
 8001534:	b2da      	uxtb	r2, r3
 8001536:	88bb      	ldrh	r3, [r7, #4]
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	4613      	mov	r3, r2
 800153c:	4622      	mov	r2, r4
 800153e:	210e      	movs	r1, #14
 8001540:	2000      	movs	r0, #0
 8001542:	f001 fb77 	bl	8002c34 <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8001546:	f001 ff27 	bl	8003398 <tftGetHeight>
 800154a:	4603      	mov	r3, r0
 800154c:	461c      	mov	r4, r3
 800154e:	f001 ff17 	bl	8003380 <tftGetWidth>
 8001552:	4603      	mov	r3, r0
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	1ae3      	subs	r3, r4, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3315      	adds	r3, #21
 800155e:	b2dc      	uxtb	r4, r3
 8001560:	f001 ff0e 	bl	8003380 <tftGetWidth>
 8001564:	4603      	mov	r3, r0
 8001566:	3b01      	subs	r3, #1
 8001568:	b2dd      	uxtb	r5, r3
 800156a:	f001 ff15 	bl	8003398 <tftGetHeight>
 800156e:	4603      	mov	r3, r0
 8001570:	3b01      	subs	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	462a      	mov	r2, r5
 800157c:	4621      	mov	r1, r4
 800157e:	2000      	movs	r0, #0
 8001580:	f001 fb58 	bl	8002c34 <tftDrawRect>
			break;
 8001584:	e090      	b.n	80016a8 <visualisationMenuGrid+0x254>
		// four frame grid
		case GRID4:
			tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 8001586:	f001 fefb 	bl	8003380 <tftGetWidth>
 800158a:	4603      	mov	r3, r0
 800158c:	461c      	mov	r4, r3
 800158e:	f001 fef7 	bl	8003380 <tftGetWidth>
 8001592:	4603      	mov	r3, r0
 8001594:	085b      	lsrs	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	1ae3      	subs	r3, r4, r3
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b2dc      	uxtb	r4, r3
 80015a0:	f001 fefa 	bl	8003398 <tftGetHeight>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461d      	mov	r5, r3
 80015a8:	f001 feea 	bl	8003380 <tftGetWidth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	1aeb      	subs	r3, r5, r3
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3315      	adds	r3, #21
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	4613      	mov	r3, r2
 80015c0:	4622      	mov	r2, r4
 80015c2:	210e      	movs	r1, #14
 80015c4:	2000      	movs	r0, #0
 80015c6:	f001 fb35 	bl	8002c34 <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 80015ca:	f001 fed9 	bl	8003380 <tftGetWidth>
 80015ce:	4603      	mov	r3, r0
 80015d0:	085b      	lsrs	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b2dc      	uxtb	r4, r3
 80015d8:	f001 fed2 	bl	8003380 <tftGetWidth>
 80015dc:	4603      	mov	r3, r0
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2dd      	uxtb	r5, r3
 80015e2:	f001 fed9 	bl	8003398 <tftGetHeight>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461e      	mov	r6, r3
 80015ea:	f001 fec9 	bl	8003380 <tftGetWidth>
 80015ee:	4603      	mov	r3, r0
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	1af3      	subs	r3, r6, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	3315      	adds	r3, #21
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	88bb      	ldrh	r3, [r7, #4]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	462a      	mov	r2, r5
 8001604:	210e      	movs	r1, #14
 8001606:	4620      	mov	r0, r4
 8001608:	f001 fb14 	bl	8002c34 <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, color);
 800160c:	f001 fec4 	bl	8003398 <tftGetHeight>
 8001610:	4603      	mov	r3, r0
 8001612:	461c      	mov	r4, r3
 8001614:	f001 feb4 	bl	8003380 <tftGetWidth>
 8001618:	4603      	mov	r3, r0
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	b2db      	uxtb	r3, r3
 800161e:	1ae3      	subs	r3, r4, r3
 8001620:	b2db      	uxtb	r3, r3
 8001622:	3315      	adds	r3, #21
 8001624:	b2dc      	uxtb	r4, r3
 8001626:	f001 feab 	bl	8003380 <tftGetWidth>
 800162a:	4603      	mov	r3, r0
 800162c:	461d      	mov	r5, r3
 800162e:	f001 fea7 	bl	8003380 <tftGetWidth>
 8001632:	4603      	mov	r3, r0
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	1aeb      	subs	r3, r5, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b2dd      	uxtb	r5, r3
 8001640:	f001 feaa 	bl	8003398 <tftGetHeight>
 8001644:	4603      	mov	r3, r0
 8001646:	3b01      	subs	r3, #1
 8001648:	b2da      	uxtb	r2, r3
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4613      	mov	r3, r2
 8001650:	462a      	mov	r2, r5
 8001652:	4621      	mov	r1, r4
 8001654:	2000      	movs	r0, #0
 8001656:	f001 faed 	bl	8002c34 <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 800165a:	f001 fe91 	bl	8003380 <tftGetWidth>
 800165e:	4603      	mov	r3, r0
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	b2db      	uxtb	r3, r3
 8001664:	3b01      	subs	r3, #1
 8001666:	b2dc      	uxtb	r4, r3
 8001668:	f001 fe96 	bl	8003398 <tftGetHeight>
 800166c:	4603      	mov	r3, r0
 800166e:	461d      	mov	r5, r3
 8001670:	f001 fe86 	bl	8003380 <tftGetWidth>
 8001674:	4603      	mov	r3, r0
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	1aeb      	subs	r3, r5, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3315      	adds	r3, #21
 8001680:	b2dd      	uxtb	r5, r3
 8001682:	f001 fe7d 	bl	8003380 <tftGetWidth>
 8001686:	4603      	mov	r3, r0
 8001688:	3b01      	subs	r3, #1
 800168a:	b2de      	uxtb	r6, r3
 800168c:	f001 fe84 	bl	8003398 <tftGetHeight>
 8001690:	4603      	mov	r3, r0
 8001692:	3b01      	subs	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4613      	mov	r3, r2
 800169c:	4632      	mov	r2, r6
 800169e:	4629      	mov	r1, r5
 80016a0:	4620      	mov	r0, r4
 80016a2:	f001 fac7 	bl	8002c34 <tftDrawRect>
			break;
 80016a6:	bf00      	nop
	}
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016b0 <visualisationMenuGridFocus>:
 * @parameters:	 int32_t position:	 	position to focus
 * 				 uint16_t colorDefault:	default color to reset focus
 * 				 uint16_t colorFocus:	focus color
 */
void visualisationMenuGridFocus(int32_t position, uint16_t colorDefault, uint16_t colorFocus)
{
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	803b      	strh	r3, [r7, #0]
	//reset rectangle from focus
	visualisationMenuGrid(GRID4, colorDefault);
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	4619      	mov	r1, r3
 80016c4:	2003      	movs	r0, #3
 80016c6:	f7ff fec5 	bl	8001454 <visualisationMenuGrid>
	tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 80016ca:	f001 fe59 	bl	8003380 <tftGetWidth>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461c      	mov	r4, r3
 80016d2:	f001 fe55 	bl	8003380 <tftGetWidth>
 80016d6:	4603      	mov	r3, r0
 80016d8:	085b      	lsrs	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	1ae3      	subs	r3, r4, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	3b02      	subs	r3, #2
 80016e2:	b2dc      	uxtb	r4, r3
 80016e4:	f001 fe58 	bl	8003398 <tftGetHeight>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461d      	mov	r5, r3
 80016ec:	f001 fe48 	bl	8003380 <tftGetWidth>
 80016f0:	4603      	mov	r3, r0
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	1aeb      	subs	r3, r5, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	3314      	adds	r3, #20
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2200      	movs	r2, #0
 8001700:	9200      	str	r2, [sp, #0]
 8001702:	4622      	mov	r2, r4
 8001704:	210f      	movs	r1, #15
 8001706:	2001      	movs	r0, #1
 8001708:	f001 fa94 	bl	8002c34 <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 800170c:	f001 fe38 	bl	8003380 <tftGetWidth>
 8001710:	4603      	mov	r3, r0
 8001712:	085b      	lsrs	r3, r3, #1
 8001714:	b2dc      	uxtb	r4, r3
 8001716:	f001 fe33 	bl	8003380 <tftGetWidth>
 800171a:	4603      	mov	r3, r0
 800171c:	3b02      	subs	r3, #2
 800171e:	b2dd      	uxtb	r5, r3
 8001720:	f001 fe3a 	bl	8003398 <tftGetHeight>
 8001724:	4603      	mov	r3, r0
 8001726:	461e      	mov	r6, r3
 8001728:	f001 fe2a 	bl	8003380 <tftGetWidth>
 800172c:	4603      	mov	r3, r0
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	1af3      	subs	r3, r6, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3314      	adds	r3, #20
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2200      	movs	r2, #0
 800173c:	9200      	str	r2, [sp, #0]
 800173e:	462a      	mov	r2, r5
 8001740:	210f      	movs	r1, #15
 8001742:	4620      	mov	r0, r4
 8001744:	f001 fa76 	bl	8002c34 <tftDrawRect>
	tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8001748:	f001 fe26 	bl	8003398 <tftGetHeight>
 800174c:	4603      	mov	r3, r0
 800174e:	461c      	mov	r4, r3
 8001750:	f001 fe16 	bl	8003380 <tftGetWidth>
 8001754:	4603      	mov	r3, r0
 8001756:	085b      	lsrs	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	1ae3      	subs	r3, r4, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	3316      	adds	r3, #22
 8001760:	b2dc      	uxtb	r4, r3
 8001762:	f001 fe0d 	bl	8003380 <tftGetWidth>
 8001766:	4603      	mov	r3, r0
 8001768:	461d      	mov	r5, r3
 800176a:	f001 fe09 	bl	8003380 <tftGetWidth>
 800176e:	4603      	mov	r3, r0
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	1aeb      	subs	r3, r5, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	3b02      	subs	r3, #2
 800177a:	b2dd      	uxtb	r5, r3
 800177c:	f001 fe0c 	bl	8003398 <tftGetHeight>
 8001780:	4603      	mov	r3, r0
 8001782:	3b02      	subs	r3, #2
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2200      	movs	r2, #0
 8001788:	9200      	str	r2, [sp, #0]
 800178a:	462a      	mov	r2, r5
 800178c:	4621      	mov	r1, r4
 800178e:	2001      	movs	r0, #1
 8001790:	f001 fa50 	bl	8002c34 <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8001794:	f001 fdf4 	bl	8003380 <tftGetWidth>
 8001798:	4603      	mov	r3, r0
 800179a:	085b      	lsrs	r3, r3, #1
 800179c:	b2dc      	uxtb	r4, r3
 800179e:	f001 fdfb 	bl	8003398 <tftGetHeight>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461d      	mov	r5, r3
 80017a6:	f001 fdeb 	bl	8003380 <tftGetWidth>
 80017aa:	4603      	mov	r3, r0
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	1aeb      	subs	r3, r5, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3316      	adds	r3, #22
 80017b6:	b2dd      	uxtb	r5, r3
 80017b8:	f001 fde2 	bl	8003380 <tftGetWidth>
 80017bc:	4603      	mov	r3, r0
 80017be:	3b02      	subs	r3, #2
 80017c0:	b2de      	uxtb	r6, r3
 80017c2:	f001 fde9 	bl	8003398 <tftGetHeight>
 80017c6:	4603      	mov	r3, r0
 80017c8:	3b02      	subs	r3, #2
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2200      	movs	r2, #0
 80017ce:	9200      	str	r2, [sp, #0]
 80017d0:	4632      	mov	r2, r6
 80017d2:	4629      	mov	r1, r5
 80017d4:	4620      	mov	r0, r4
 80017d6:	f001 fa2d 	bl	8002c34 <tftDrawRect>

	// which frame should be focused
	switch(position)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	f200 812b 	bhi.w	8001a38 <visualisationMenuGridFocus+0x388>
 80017e2:	a201      	add	r2, pc, #4	; (adr r2, 80017e8 <visualisationMenuGridFocus+0x138>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	080017f9 	.word	0x080017f9
 80017ec:	08001883 	.word	0x08001883
 80017f0:	08001905 	.word	0x08001905
 80017f4:	0800199b 	.word	0x0800199b
	{
	case 0:
		tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 80017f8:	f001 fdc2 	bl	8003380 <tftGetWidth>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461c      	mov	r4, r3
 8001800:	f001 fdbe 	bl	8003380 <tftGetWidth>
 8001804:	4603      	mov	r3, r0
 8001806:	085b      	lsrs	r3, r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	1ae3      	subs	r3, r4, r3
 800180c:	b2db      	uxtb	r3, r3
 800180e:	3b02      	subs	r3, #2
 8001810:	b2dc      	uxtb	r4, r3
 8001812:	f001 fdc1 	bl	8003398 <tftGetHeight>
 8001816:	4603      	mov	r3, r0
 8001818:	461d      	mov	r5, r3
 800181a:	f001 fdb1 	bl	8003380 <tftGetWidth>
 800181e:	4603      	mov	r3, r0
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	1aeb      	subs	r3, r5, r3
 8001826:	b2db      	uxtb	r3, r3
 8001828:	3314      	adds	r3, #20
 800182a:	b2da      	uxtb	r2, r3
 800182c:	883b      	ldrh	r3, [r7, #0]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	4622      	mov	r2, r4
 8001834:	210f      	movs	r1, #15
 8001836:	2001      	movs	r0, #1
 8001838:	f001 f9fc 	bl	8002c34 <tftDrawRect>
		tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 800183c:	f001 fda0 	bl	8003380 <tftGetWidth>
 8001840:	4603      	mov	r3, r0
 8001842:	461c      	mov	r4, r3
 8001844:	f001 fd9c 	bl	8003380 <tftGetWidth>
 8001848:	4603      	mov	r3, r0
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	1ae3      	subs	r3, r4, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b2dc      	uxtb	r4, r3
 8001856:	f001 fd9f 	bl	8003398 <tftGetHeight>
 800185a:	4603      	mov	r3, r0
 800185c:	461d      	mov	r5, r3
 800185e:	f001 fd8f 	bl	8003380 <tftGetWidth>
 8001862:	4603      	mov	r3, r0
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	1aeb      	subs	r3, r5, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	3315      	adds	r3, #21
 800186e:	b2da      	uxtb	r2, r3
 8001870:	883b      	ldrh	r3, [r7, #0]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	4613      	mov	r3, r2
 8001876:	4622      	mov	r2, r4
 8001878:	210e      	movs	r1, #14
 800187a:	2000      	movs	r0, #0
 800187c:	f001 f9da 	bl	8002c34 <tftDrawRect>
		break;
 8001880:	e0db      	b.n	8001a3a <visualisationMenuGridFocus+0x38a>
	case 1:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 8001882:	f001 fd7d 	bl	8003380 <tftGetWidth>
 8001886:	4603      	mov	r3, r0
 8001888:	085b      	lsrs	r3, r3, #1
 800188a:	b2dc      	uxtb	r4, r3
 800188c:	f001 fd78 	bl	8003380 <tftGetWidth>
 8001890:	4603      	mov	r3, r0
 8001892:	3b02      	subs	r3, #2
 8001894:	b2dd      	uxtb	r5, r3
 8001896:	f001 fd7f 	bl	8003398 <tftGetHeight>
 800189a:	4603      	mov	r3, r0
 800189c:	461e      	mov	r6, r3
 800189e:	f001 fd6f 	bl	8003380 <tftGetWidth>
 80018a2:	4603      	mov	r3, r0
 80018a4:	085b      	lsrs	r3, r3, #1
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	1af3      	subs	r3, r6, r3
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	3314      	adds	r3, #20
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	883b      	ldrh	r3, [r7, #0]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	462a      	mov	r2, r5
 80018b8:	210f      	movs	r1, #15
 80018ba:	4620      	mov	r0, r4
 80018bc:	f001 f9ba 	bl	8002c34 <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 80018c0:	f001 fd5e 	bl	8003380 <tftGetWidth>
 80018c4:	4603      	mov	r3, r0
 80018c6:	085b      	lsrs	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	3b01      	subs	r3, #1
 80018cc:	b2dc      	uxtb	r4, r3
 80018ce:	f001 fd57 	bl	8003380 <tftGetWidth>
 80018d2:	4603      	mov	r3, r0
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b2dd      	uxtb	r5, r3
 80018d8:	f001 fd5e 	bl	8003398 <tftGetHeight>
 80018dc:	4603      	mov	r3, r0
 80018de:	461e      	mov	r6, r3
 80018e0:	f001 fd4e 	bl	8003380 <tftGetWidth>
 80018e4:	4603      	mov	r3, r0
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	1af3      	subs	r3, r6, r3
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3315      	adds	r3, #21
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	883b      	ldrh	r3, [r7, #0]
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	462a      	mov	r2, r5
 80018fa:	210e      	movs	r1, #14
 80018fc:	4620      	mov	r0, r4
 80018fe:	f001 f999 	bl	8002c34 <tftDrawRect>
		break;
 8001902:	e09a      	b.n	8001a3a <visualisationMenuGridFocus+0x38a>
	case 2:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 8001904:	f001 fd3c 	bl	8003380 <tftGetWidth>
 8001908:	4603      	mov	r3, r0
 800190a:	085b      	lsrs	r3, r3, #1
 800190c:	b2dc      	uxtb	r4, r3
 800190e:	f001 fd43 	bl	8003398 <tftGetHeight>
 8001912:	4603      	mov	r3, r0
 8001914:	461d      	mov	r5, r3
 8001916:	f001 fd33 	bl	8003380 <tftGetWidth>
 800191a:	4603      	mov	r3, r0
 800191c:	085b      	lsrs	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	1aeb      	subs	r3, r5, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3316      	adds	r3, #22
 8001926:	b2dd      	uxtb	r5, r3
 8001928:	f001 fd2a 	bl	8003380 <tftGetWidth>
 800192c:	4603      	mov	r3, r0
 800192e:	3b02      	subs	r3, #2
 8001930:	b2de      	uxtb	r6, r3
 8001932:	f001 fd31 	bl	8003398 <tftGetHeight>
 8001936:	4603      	mov	r3, r0
 8001938:	3b02      	subs	r3, #2
 800193a:	b2da      	uxtb	r2, r3
 800193c:	883b      	ldrh	r3, [r7, #0]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	4632      	mov	r2, r6
 8001944:	4629      	mov	r1, r5
 8001946:	4620      	mov	r0, r4
 8001948:	f001 f974 	bl	8002c34 <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, colorFocus);
 800194c:	f001 fd18 	bl	8003380 <tftGetWidth>
 8001950:	4603      	mov	r3, r0
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	3b01      	subs	r3, #1
 8001958:	b2dc      	uxtb	r4, r3
 800195a:	f001 fd1d 	bl	8003398 <tftGetHeight>
 800195e:	4603      	mov	r3, r0
 8001960:	461d      	mov	r5, r3
 8001962:	f001 fd0d 	bl	8003380 <tftGetWidth>
 8001966:	4603      	mov	r3, r0
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	1aeb      	subs	r3, r5, r3
 800196e:	b2db      	uxtb	r3, r3
 8001970:	3315      	adds	r3, #21
 8001972:	b2dd      	uxtb	r5, r3
 8001974:	f001 fd04 	bl	8003380 <tftGetWidth>
 8001978:	4603      	mov	r3, r0
 800197a:	3b01      	subs	r3, #1
 800197c:	b2de      	uxtb	r6, r3
 800197e:	f001 fd0b 	bl	8003398 <tftGetHeight>
 8001982:	4603      	mov	r3, r0
 8001984:	3b01      	subs	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	883b      	ldrh	r3, [r7, #0]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4613      	mov	r3, r2
 800198e:	4632      	mov	r2, r6
 8001990:	4629      	mov	r1, r5
 8001992:	4620      	mov	r0, r4
 8001994:	f001 f94e 	bl	8002c34 <tftDrawRect>
		break;
 8001998:	e04f      	b.n	8001a3a <visualisationMenuGridFocus+0x38a>
	case 3:
		tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 800199a:	f001 fcfd 	bl	8003398 <tftGetHeight>
 800199e:	4603      	mov	r3, r0
 80019a0:	461c      	mov	r4, r3
 80019a2:	f001 fced 	bl	8003380 <tftGetWidth>
 80019a6:	4603      	mov	r3, r0
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	1ae3      	subs	r3, r4, r3
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	3316      	adds	r3, #22
 80019b2:	b2dc      	uxtb	r4, r3
 80019b4:	f001 fce4 	bl	8003380 <tftGetWidth>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461d      	mov	r5, r3
 80019bc:	f001 fce0 	bl	8003380 <tftGetWidth>
 80019c0:	4603      	mov	r3, r0
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	1aeb      	subs	r3, r5, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3b02      	subs	r3, #2
 80019cc:	b2dd      	uxtb	r5, r3
 80019ce:	f001 fce3 	bl	8003398 <tftGetHeight>
 80019d2:	4603      	mov	r3, r0
 80019d4:	3b02      	subs	r3, #2
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	4613      	mov	r3, r2
 80019de:	462a      	mov	r2, r5
 80019e0:	4621      	mov	r1, r4
 80019e2:	2001      	movs	r0, #1
 80019e4:	f001 f926 	bl	8002c34 <tftDrawRect>
		tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, colorFocus);
 80019e8:	f001 fcd6 	bl	8003398 <tftGetHeight>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461c      	mov	r4, r3
 80019f0:	f001 fcc6 	bl	8003380 <tftGetWidth>
 80019f4:	4603      	mov	r3, r0
 80019f6:	085b      	lsrs	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	1ae3      	subs	r3, r4, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	3315      	adds	r3, #21
 8001a00:	b2dc      	uxtb	r4, r3
 8001a02:	f001 fcbd 	bl	8003380 <tftGetWidth>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461d      	mov	r5, r3
 8001a0a:	f001 fcb9 	bl	8003380 <tftGetWidth>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	1aeb      	subs	r3, r5, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b2dd      	uxtb	r5, r3
 8001a1c:	f001 fcbc 	bl	8003398 <tftGetHeight>
 8001a20:	4603      	mov	r3, r0
 8001a22:	3b01      	subs	r3, #1
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	883b      	ldrh	r3, [r7, #0]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	462a      	mov	r2, r5
 8001a2e:	4621      	mov	r1, r4
 8001a30:	2000      	movs	r0, #0
 8001a32:	f001 f8ff 	bl	8002c34 <tftDrawRect>
		break;
 8001a36:	e000      	b.n	8001a3a <visualisationMenuGridFocus+0x38a>
	default:
		break;
 8001a38:	bf00      	nop
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a42:	bf00      	nop

08001a44 <visualisationMenu>:
 * @parameters:	 SCREEN_PAGES_t page:	menu page to be loaded
 * 				 bool initedTOF:		flag if TOF is initialized
 * 				 bool inited3DG:		flag if 3DG is initialized
 */
void visualisationMenu(SCREEN_PAGES_t page, bool initedTOF, bool inited3DG, TOFSensor_t* TOFSENS)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
 8001a50:	460b      	mov	r3, r1
 8001a52:	71bb      	strb	r3, [r7, #6]
 8001a54:	4613      	mov	r3, r2
 8001a56:	717b      	strb	r3, [r7, #5]
	// clear content
	visualisationClearBody();
 8001a58:	f000 f952 	bl	8001d00 <visualisationClearBody>

	// load right screen
	switch(page)
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	f200 8116 	bhi.w	8001c90 <visualisationMenu+0x24c>
 8001a64:	a201      	add	r2, pc, #4	; (adr r2, 8001a6c <visualisationMenu+0x28>)
 8001a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6a:	bf00      	nop
 8001a6c:	08001a81 	.word	0x08001a81
 8001a70:	08001b2d 	.word	0x08001b2d
 8001a74:	08001b51 	.word	0x08001b51
 8001a78:	08001b8d 	.word	0x08001b8d
 8001a7c:	08001c19 	.word	0x08001c19
	{
	case SCREEN_MAIN:
		visualisationMenuGridFocus((uint16_t)getRotaryPosition() % 4, tft_WHITE, tft_YELLOW);
 8001a80:	f000 fd74 	bl	800256c <getRotaryPosition>
 8001a84:	4603      	mov	r3, r0
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe0b 	bl	80016b0 <visualisationMenuGridFocus>

		// 1. Submenu
		tftPrint("Sensor-",13,27,0);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	221b      	movs	r2, #27
 8001a9e:	210d      	movs	r1, #13
 8001aa0:	487d      	ldr	r0, [pc, #500]	; (8001c98 <visualisationMenu+0x254>)
 8001aa2:	f001 fb69 	bl	8003178 <tftPrint>
		tftPrint("init",23,39,0);
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	2227      	movs	r2, #39	; 0x27
 8001aaa:	2117      	movs	r1, #23
 8001aac:	487b      	ldr	r0, [pc, #492]	; (8001c9c <visualisationMenu+0x258>)
 8001aae:	f001 fb63 	bl	8003178 <tftPrint>

		// 2. Submenu
		tftPrint("TOF", 28 + tftGetWidth()/2, 27, 0);
 8001ab2:	f001 fc65 	bl	8003380 <tftGetWidth>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f103 011c 	add.w	r1, r3, #28
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	221b      	movs	r2, #27
 8001ac4:	4876      	ldr	r0, [pc, #472]	; (8001ca0 <visualisationMenu+0x25c>)
 8001ac6:	f001 fb57 	bl	8003178 <tftPrint>

		// show if sensor is not connected
		if(initedTOF == false)
 8001aca:	79bb      	ldrb	r3, [r7, #6]
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <visualisationMenu+0xa8>
		{
			tftPrint("(discon.)", 3 + tftGetWidth()/2, 39, 0);
 8001ad6:	f001 fc53 	bl	8003380 <tftGetWidth>
 8001ada:	4603      	mov	r3, r0
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	1cd9      	adds	r1, r3, #3
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2227      	movs	r2, #39	; 0x27
 8001ae6:	486f      	ldr	r0, [pc, #444]	; (8001ca4 <visualisationMenu+0x260>)
 8001ae8:	f001 fb46 	bl	8003178 <tftPrint>
		}

		// 3. Submenu
		tftPrint("Mode", 28 + tftGetWidth()/2, 20 + tftGetHeight()/2, 0);
 8001aec:	f001 fc48 	bl	8003380 <tftGetWidth>
 8001af0:	4603      	mov	r3, r0
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f103 041c 	add.w	r4, r3, #28
 8001afa:	f001 fc4d 	bl	8003398 <tftGetHeight>
 8001afe:	4603      	mov	r3, r0
 8001b00:	085b      	lsrs	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f103 0214 	add.w	r2, r3, #20
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	4866      	ldr	r0, [pc, #408]	; (8001ca8 <visualisationMenu+0x264>)
 8001b0e:	f001 fb33 	bl	8003178 <tftPrint>



		// 4. Submenu
		tftPrint("INFO", 24, 20 + tftGetHeight()/2, 0);
 8001b12:	f001 fc41 	bl	8003398 <tftGetHeight>
 8001b16:	4603      	mov	r3, r0
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f103 0214 	add.w	r2, r3, #20
 8001b20:	2300      	movs	r3, #0
 8001b22:	2118      	movs	r1, #24
 8001b24:	4861      	ldr	r0, [pc, #388]	; (8001cac <visualisationMenu+0x268>)
 8001b26:	f001 fb27 	bl	8003178 <tftPrint>
		break;
 8001b2a:	e0b1      	b.n	8001c90 <visualisationMenu+0x24c>
	case SCREEN_PAGE1:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b30:	2000      	movs	r0, #0
 8001b32:	f7ff fc8f 	bl	8001454 <visualisationMenuGrid>
		tftPrint("Sensor-init: i2c",POS_SCREEN_LINE_1);
 8001b36:	2300      	movs	r3, #0
 8001b38:	2211      	movs	r2, #17
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	485c      	ldr	r0, [pc, #368]	; (8001cb0 <visualisationMenu+0x26c>)
 8001b3e:	f001 fb1b 	bl	8003178 <tftPrint>
		tftPrint("Address:",POS_SCREEN_LINE_2);
 8001b42:	2300      	movs	r3, #0
 8001b44:	221e      	movs	r2, #30
 8001b46:	2104      	movs	r1, #4
 8001b48:	485a      	ldr	r0, [pc, #360]	; (8001cb4 <visualisationMenu+0x270>)
 8001b4a:	f001 fb15 	bl	8003178 <tftPrint>
		break;
 8001b4e:	e09f      	b.n	8001c90 <visualisationMenu+0x24c>
	case SCREEN_PAGE2:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fc7d 	bl	8001454 <visualisationMenuGrid>
		tftPrint("Read distance with", POS_SCREEN_LINE_1);
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2211      	movs	r2, #17
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4855      	ldr	r0, [pc, #340]	; (8001cb8 <visualisationMenu+0x274>)
 8001b62:	f001 fb09 	bl	8003178 <tftPrint>
		tftPrint("TOF Sensor:", POS_SCREEN_LINE_2);
 8001b66:	2300      	movs	r3, #0
 8001b68:	221e      	movs	r2, #30
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4853      	ldr	r0, [pc, #332]	; (8001cbc <visualisationMenu+0x278>)
 8001b6e:	f001 fb03 	bl	8003178 <tftPrint>
		tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001b72:	2300      	movs	r3, #0
 8001b74:	2232      	movs	r2, #50	; 0x32
 8001b76:	2104      	movs	r1, #4
 8001b78:	4851      	ldr	r0, [pc, #324]	; (8001cc0 <visualisationMenu+0x27c>)
 8001b7a:	f001 fafd 	bl	8003178 <tftPrint>

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001b7e:	2300      	movs	r3, #0
 8001b80:	226e      	movs	r2, #110	; 0x6e
 8001b82:	2104      	movs	r1, #4
 8001b84:	484f      	ldr	r0, [pc, #316]	; (8001cc4 <visualisationMenu+0x280>)
 8001b86:	f001 faf7 	bl	8003178 <tftPrint>
		break;
 8001b8a:	e081      	b.n	8001c90 <visualisationMenu+0x24c>
	case SCREEN_PAGE3:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fc5f 	bl	8001454 <visualisationMenuGrid>

		tftPrint("Current Mode", POS_SCREEN_LINE_3);
 8001b96:	2300      	movs	r3, #0
 8001b98:	2228      	movs	r2, #40	; 0x28
 8001b9a:	2104      	movs	r1, #4
 8001b9c:	484a      	ldr	r0, [pc, #296]	; (8001cc8 <visualisationMenu+0x284>)
 8001b9e:	f001 faeb 	bl	8003178 <tftPrint>
		switch(TOFSENS->Ranging_Profiles_t) {
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	88db      	ldrh	r3, [r3, #6]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d827      	bhi.n	8001bfc <visualisationMenu+0x1b8>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <visualisationMenu+0x170>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bd3 	.word	0x08001bd3
 8001bbc:	08001be1 	.word	0x08001be1
 8001bc0:	08001bef 	.word	0x08001bef
		    case TOF_DEFAULT_MODE_D:
		        tftPrint("DEFAULT        ", POS_SCREEN_LINE_4);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	2232      	movs	r2, #50	; 0x32
 8001bc8:	2104      	movs	r1, #4
 8001bca:	4840      	ldr	r0, [pc, #256]	; (8001ccc <visualisationMenu+0x288>)
 8001bcc:	f001 fad4 	bl	8003178 <tftPrint>
		        break;
 8001bd0:	e01b      	b.n	8001c0a <visualisationMenu+0x1c6>

		    case TOF_HIGH_SPEED_MODE_S:
		        tftPrint("HIGH SPEED     ", POS_SCREEN_LINE_4);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2232      	movs	r2, #50	; 0x32
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	483d      	ldr	r0, [pc, #244]	; (8001cd0 <visualisationMenu+0x28c>)
 8001bda:	f001 facd 	bl	8003178 <tftPrint>
		        break;
 8001bde:	e014      	b.n	8001c0a <visualisationMenu+0x1c6>

		    case TOF_HIGH_ACCURACY_MODE_A:
		        tftPrint("HIGH ACCURACY  ", POS_SCREEN_LINE_4);
 8001be0:	2300      	movs	r3, #0
 8001be2:	2232      	movs	r2, #50	; 0x32
 8001be4:	2104      	movs	r1, #4
 8001be6:	483b      	ldr	r0, [pc, #236]	; (8001cd4 <visualisationMenu+0x290>)
 8001be8:	f001 fac6 	bl	8003178 <tftPrint>
		        break;
 8001bec:	e00d      	b.n	8001c0a <visualisationMenu+0x1c6>

		    case TOF_LONG_RANGE_MODE_R:
		        tftPrint("LONG RANGE     ", POS_SCREEN_LINE_4);
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2232      	movs	r2, #50	; 0x32
 8001bf2:	2104      	movs	r1, #4
 8001bf4:	4838      	ldr	r0, [pc, #224]	; (8001cd8 <visualisationMenu+0x294>)
 8001bf6:	f001 fabf 	bl	8003178 <tftPrint>
		        break;
 8001bfa:	e006      	b.n	8001c0a <visualisationMenu+0x1c6>

		    default:
		        tftPrint("RANGINGERROR   ", POS_SCREEN_LINE_4);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2232      	movs	r2, #50	; 0x32
 8001c00:	2104      	movs	r1, #4
 8001c02:	4836      	ldr	r0, [pc, #216]	; (8001cdc <visualisationMenu+0x298>)
 8001c04:	f001 fab8 	bl	8003178 <tftPrint>
		        break;
 8001c08:	bf00      	nop
		}

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	226e      	movs	r2, #110	; 0x6e
 8001c0e:	2104      	movs	r1, #4
 8001c10:	482c      	ldr	r0, [pc, #176]	; (8001cc4 <visualisationMenu+0x280>)
 8001c12:	f001 fab1 	bl	8003178 <tftPrint>
		break;
 8001c16:	e03b      	b.n	8001c90 <visualisationMenu+0x24c>
	case SCREEN_PAGE4:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001c18:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fc19 	bl	8001454 <visualisationMenuGrid>
		tftPrint("INFO:", POS_SCREEN_LINE_1);
 8001c22:	2300      	movs	r3, #0
 8001c24:	2211      	movs	r2, #17
 8001c26:	2104      	movs	r1, #4
 8001c28:	482d      	ldr	r0, [pc, #180]	; (8001ce0 <visualisationMenu+0x29c>)
 8001c2a:	f001 faa5 	bl	8003178 <tftPrint>
		tftPrint("NAVIGATION:", POS_SCREEN_LINE_2);
 8001c2e:	2300      	movs	r3, #0
 8001c30:	221e      	movs	r2, #30
 8001c32:	2104      	movs	r1, #4
 8001c34:	482b      	ldr	r0, [pc, #172]	; (8001ce4 <visualisationMenu+0x2a0>)
 8001c36:	f001 fa9f 	bl	8003178 <tftPrint>
		tftPrint("in the manual!     ", POS_SCREEN_LINE_9);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2264      	movs	r2, #100	; 0x64
 8001c3e:	2104      	movs	r1, #4
 8001c40:	4829      	ldr	r0, [pc, #164]	; (8001ce8 <visualisationMenu+0x2a4>)
 8001c42:	f001 fa99 	bl	8003178 <tftPrint>
		tftPrint("Further information", POS_SCREEN_LINE_8);
 8001c46:	2300      	movs	r3, #0
 8001c48:	225a      	movs	r2, #90	; 0x5a
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4827      	ldr	r0, [pc, #156]	; (8001cec <visualisationMenu+0x2a8>)
 8001c4e:	f001 fa93 	bl	8003178 <tftPrint>
		tftPrint("       through menu", POS_SCREEN_LINE_6);
 8001c52:	2300      	movs	r3, #0
 8001c54:	2246      	movs	r2, #70	; 0x46
 8001c56:	2104      	movs	r1, #4
 8001c58:	4825      	ldr	r0, [pc, #148]	; (8001cf0 <visualisationMenu+0x2ac>)
 8001c5a:	f001 fa8d 	bl	8003178 <tftPrint>
		tftPrint(" - rotate: navigate", POS_SCREEN_LINE_5);
 8001c5e:	2300      	movs	r3, #0
 8001c60:	223c      	movs	r2, #60	; 0x3c
 8001c62:	2104      	movs	r1, #4
 8001c64:	4823      	ldr	r0, [pc, #140]	; (8001cf4 <visualisationMenu+0x2b0>)
 8001c66:	f001 fa87 	bl	8003178 <tftPrint>
		tftPrint("         - go back ", POS_SCREEN_LINE_4);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2232      	movs	r2, #50	; 0x32
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <visualisationMenu+0x2b4>)
 8001c72:	f001 fa81 	bl	8003178 <tftPrint>
		tftPrint(" - push: - enter   ", POS_SCREEN_LINE_3);
 8001c76:	2300      	movs	r3, #0
 8001c78:	2228      	movs	r2, #40	; 0x28
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	481f      	ldr	r0, [pc, #124]	; (8001cfc <visualisationMenu+0x2b8>)
 8001c7e:	f001 fa7b 	bl	8003178 <tftPrint>
		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001c82:	2300      	movs	r3, #0
 8001c84:	226e      	movs	r2, #110	; 0x6e
 8001c86:	2104      	movs	r1, #4
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <visualisationMenu+0x280>)
 8001c8a:	f001 fa75 	bl	8003178 <tftPrint>
		break;
 8001c8e:	bf00      	nop
	}
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}
 8001c98:	0800ad64 	.word	0x0800ad64
 8001c9c:	0800ad6c 	.word	0x0800ad6c
 8001ca0:	0800ad74 	.word	0x0800ad74
 8001ca4:	0800ad78 	.word	0x0800ad78
 8001ca8:	0800ad84 	.word	0x0800ad84
 8001cac:	0800ad8c 	.word	0x0800ad8c
 8001cb0:	0800ad94 	.word	0x0800ad94
 8001cb4:	0800ada8 	.word	0x0800ada8
 8001cb8:	0800adb4 	.word	0x0800adb4
 8001cbc:	0800adc8 	.word	0x0800adc8
 8001cc0:	0800add4 	.word	0x0800add4
 8001cc4:	0800ade4 	.word	0x0800ade4
 8001cc8:	0800adf8 	.word	0x0800adf8
 8001ccc:	0800ae08 	.word	0x0800ae08
 8001cd0:	0800ae18 	.word	0x0800ae18
 8001cd4:	0800ae28 	.word	0x0800ae28
 8001cd8:	0800ae38 	.word	0x0800ae38
 8001cdc:	0800ae48 	.word	0x0800ae48
 8001ce0:	0800ae58 	.word	0x0800ae58
 8001ce4:	0800ae60 	.word	0x0800ae60
 8001ce8:	0800ae6c 	.word	0x0800ae6c
 8001cec:	0800ae80 	.word	0x0800ae80
 8001cf0:	0800ae94 	.word	0x0800ae94
 8001cf4:	0800aea8 	.word	0x0800aea8
 8001cf8:	0800aebc 	.word	0x0800aebc
 8001cfc:	0800aed0 	.word	0x0800aed0

08001d00 <visualisationClearBody>:
 * @function:	 visualisationClearBody
 *
 * @brief: 		 clear content field to black
 */
void visualisationClearBody(void)
{
 8001d00:	b590      	push	{r4, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af02      	add	r7, sp, #8
	tftFillRect(0, 14, tftGetWidth(), tftGetHeight() - 14, tft_BLACK);
 8001d06:	f001 fb3b 	bl	8003380 <tftGetWidth>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b21c      	sxth	r4, r3
 8001d0e:	f001 fb43 	bl	8003398 <tftGetHeight>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b0e      	subs	r3, #14
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	9200      	str	r2, [sp, #0]
 8001d20:	4622      	mov	r2, r4
 8001d22:	210e      	movs	r1, #14
 8001d24:	2000      	movs	r0, #0
 8001d26:	f000 fe41 	bl	80029ac <tftFillRect>
}
 8001d2a:	bf00      	nop
 8001d2c:	3704      	adds	r7, #4
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
	...

08001d34 <visualisationShowError>:
 * @brief: 		 show error screen for not initialized sensor
 *
 * @parameters:	 SCREEN_PAGES_t page:	which sensor is not initialized
 */
void visualisationShowError(SCREEN_PAGES_t page)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af02      	add	r7, sp, #8
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	tftFillRect(14, 14, tftGetWidth() - 28, tftGetHeight() - 28, tft_YELLOW);
 8001d3e:	f001 fb1f 	bl	8003380 <tftGetWidth>
 8001d42:	4603      	mov	r3, r0
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b1c      	subs	r3, #28
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	b21c      	sxth	r4, r3
 8001d4c:	f001 fb24 	bl	8003398 <tftGetHeight>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b1c      	subs	r3, #28
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d5e:	9200      	str	r2, [sp, #0]
 8001d60:	4622      	mov	r2, r4
 8001d62:	210e      	movs	r1, #14
 8001d64:	200e      	movs	r0, #14
 8001d66:	f000 fe21 	bl	80029ac <tftFillRect>
	tftDrawRect(14, 14, tftGetWidth() - 14, tftGetHeight() - 14, tft_RED);
 8001d6a:	f001 fb09 	bl	8003380 <tftGetWidth>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	3b0e      	subs	r3, #14
 8001d72:	b2dc      	uxtb	r4, r3
 8001d74:	f001 fb10 	bl	8003398 <tftGetHeight>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	3b0e      	subs	r3, #14
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d82:	9200      	str	r2, [sp, #0]
 8001d84:	4622      	mov	r2, r4
 8001d86:	210e      	movs	r1, #14
 8001d88:	200e      	movs	r0, #14
 8001d8a:	f000 ff53 	bl	8002c34 <tftDrawRect>

	tftPrint("ERROR", 60, 25, 0);
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2219      	movs	r2, #25
 8001d92:	213c      	movs	r1, #60	; 0x3c
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <visualisationShowError+0xac>)
 8001d96:	f001 f9ef 	bl	8003178 <tftPrint>
	tftPrint("not connected", 27, 55, 0);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2237      	movs	r2, #55	; 0x37
 8001d9e:	211b      	movs	r1, #27
 8001da0:	4810      	ldr	r0, [pc, #64]	; (8001de4 <visualisationShowError+0xb0>)
 8001da2:	f001 f9e9 	bl	8003178 <tftPrint>

	// which sensor
	switch(page)
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d002      	beq.n	8001db2 <visualisationShowError+0x7e>
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d007      	beq.n	8001dc0 <visualisationShowError+0x8c>
			break;
		case SCREEN_PAGE2:
			tftPrint("Ranging-Mode", 40, 40, 0);
			break;
		default:
			break;
 8001db0:	e00d      	b.n	8001dce <visualisationShowError+0x9a>
			tftPrint("TOF-sensor", 40, 40, 0);
 8001db2:	2300      	movs	r3, #0
 8001db4:	2228      	movs	r2, #40	; 0x28
 8001db6:	2128      	movs	r1, #40	; 0x28
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <visualisationShowError+0xb4>)
 8001dba:	f001 f9dd 	bl	8003178 <tftPrint>
			break;
 8001dbe:	e006      	b.n	8001dce <visualisationShowError+0x9a>
			tftPrint("Ranging-Mode", 40, 40, 0);
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	2228      	movs	r2, #40	; 0x28
 8001dc4:	2128      	movs	r1, #40	; 0x28
 8001dc6:	4809      	ldr	r0, [pc, #36]	; (8001dec <visualisationShowError+0xb8>)
 8001dc8:	f001 f9d6 	bl	8003178 <tftPrint>
			break;
 8001dcc:	bf00      	nop
	}

	// give time to read
	delayms(2500);
 8001dce:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001dd2:	f000 fc3f 	bl	8002654 <delayms>
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	0800aee4 	.word	0x0800aee4
 8001de4:	0800aeec 	.word	0x0800aeec
 8001de8:	0800aefc 	.word	0x0800aefc
 8001dec:	0800af08 	.word	0x0800af08

08001df0 <visualisationTOF>:
 *
 * @parameters:	 uint16_t distance:		current distance
 * 				 uint16_t *olddistance: old distance
 */
void visualisationTOF(TOFSensor_t* TOFSENS)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b09c      	sub	sp, #112	; 0x70
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    static uint16_t olddistance_var = TOF_VL53L0X_OUT_OF_RANGE; // Statische Variable zur Speicherung des alten Werts
    uint16_t* olddistance = &olddistance_var; // Pointer auf die statische Variable
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <visualisationTOF+0x70>)
 8001dfa:	66fb      	str	r3, [r7, #108]	; 0x6c

    // if value is not out of range
    if (TOFSENS->distanceFromTOF != TOF_VL53L0X_OUT_OF_RANGE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	891b      	ldrh	r3, [r3, #8]
 8001e00:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d01c      	beq.n	8001e42 <visualisationTOF+0x52>
    {
        // if it was out of range, restore unit visualization
        if (*olddistance == TOF_VL53L0X_OUT_OF_RANGE)
 8001e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d105      	bne.n	8001e20 <visualisationTOF+0x30>
        {
            tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001e14:	2300      	movs	r3, #0
 8001e16:	2232      	movs	r2, #50	; 0x32
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4812      	ldr	r0, [pc, #72]	; (8001e64 <visualisationTOF+0x74>)
 8001e1c:	f001 f9ac 	bl	8003178 <tftPrint>
        }

        // visualize mm in 4 digits
        char buffer[100];
        sprintf(buffer, "%04d", TOFSENS->distanceFromTOF);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	891b      	ldrh	r3, [r3, #8]
 8001e24:	461a      	mov	r2, r3
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	490f      	ldr	r1, [pc, #60]	; (8001e68 <visualisationTOF+0x78>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f005 fbff 	bl	8007630 <siprintf>
        tftPrint(buffer, POS_SCREEN_LINE_4);
 8001e32:	f107 0008 	add.w	r0, r7, #8
 8001e36:	2300      	movs	r3, #0
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	2104      	movs	r1, #4
 8001e3c:	f001 f99c 	bl	8003178 <tftPrint>
 8001e40:	e005      	b.n	8001e4e <visualisationTOF+0x5e>
    }
    // if value is out of range
    else
    {
        tftPrint("out of range", POS_SCREEN_LINE_4);
 8001e42:	2300      	movs	r3, #0
 8001e44:	2232      	movs	r2, #50	; 0x32
 8001e46:	2104      	movs	r1, #4
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <visualisationTOF+0x7c>)
 8001e4a:	f001 f995 	bl	8003178 <tftPrint>
    }

    // store current distance to old value
    *olddistance = TOFSENS->distanceFromTOF;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	891a      	ldrh	r2, [r3, #8]
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	801a      	strh	r2, [r3, #0]
}
 8001e56:	bf00      	nop
 8001e58:	3770      	adds	r7, #112	; 0x70
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	0800add4 	.word	0x0800add4
 8001e68:	0800af18 	.word	0x0800af18
 8001e6c:	0800af20 	.word	0x0800af20

08001e70 <visualisationRangingProfileTOF>:


void visualisationRangingProfileTOF(MODE_PAGES_t* MODE){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	switch(*MODE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d826      	bhi.n	8001ed0 <visualisationRangingProfileTOF+0x60>
 8001e82:	a201      	add	r2, pc, #4	; (adr r2, 8001e88 <visualisationRangingProfileTOF+0x18>)
 8001e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e88:	08001e99 	.word	0x08001e99
 8001e8c:	08001ea7 	.word	0x08001ea7
 8001e90:	08001eb5 	.word	0x08001eb5
 8001e94:	08001ec3 	.word	0x08001ec3
	{
		case DEFAULTMODE:
			tftPrint("DEFAULT MODE      ", POS_SCREEN_LINE_6);
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2246      	movs	r2, #70	; 0x46
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	480f      	ldr	r0, [pc, #60]	; (8001edc <visualisationRangingProfileTOF+0x6c>)
 8001ea0:	f001 f96a 	bl	8003178 <tftPrint>
			break;
 8001ea4:	e015      	b.n	8001ed2 <visualisationRangingProfileTOF+0x62>
		case HIGHSPEEDMODE:
			tftPrint("HIGH SPEED MODE   ", POS_SCREEN_LINE_6);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2246      	movs	r2, #70	; 0x46
 8001eaa:	2104      	movs	r1, #4
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <visualisationRangingProfileTOF+0x70>)
 8001eae:	f001 f963 	bl	8003178 <tftPrint>
			break;
 8001eb2:	e00e      	b.n	8001ed2 <visualisationRangingProfileTOF+0x62>
		case HIGHACCURACYMODE:
			tftPrint("HIGH ACCURACY MODE", POS_SCREEN_LINE_6);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	2246      	movs	r2, #70	; 0x46
 8001eb8:	2104      	movs	r1, #4
 8001eba:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <visualisationRangingProfileTOF+0x74>)
 8001ebc:	f001 f95c 	bl	8003178 <tftPrint>
			break;
 8001ec0:	e007      	b.n	8001ed2 <visualisationRangingProfileTOF+0x62>
		case LONGRANGEMODE:
			tftPrint("LONG RANGE MODE   ", POS_SCREEN_LINE_6);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2246      	movs	r2, #70	; 0x46
 8001ec6:	2104      	movs	r1, #4
 8001ec8:	4807      	ldr	r0, [pc, #28]	; (8001ee8 <visualisationRangingProfileTOF+0x78>)
 8001eca:	f001 f955 	bl	8003178 <tftPrint>
			break;
 8001ece:	e000      	b.n	8001ed2 <visualisationRangingProfileTOF+0x62>
		default:
			break;
 8001ed0:	bf00      	nop
	}


}
 8001ed2:	bf00      	nop
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800af30 	.word	0x0800af30
 8001ee0:	0800af44 	.word	0x0800af44
 8001ee4:	0800af58 	.word	0x0800af58
 8001ee8:	0800af6c 	.word	0x0800af6c

08001eec <visualisationSensorRecognized>:
 * @brief: 		 show recognition of sensor
 *
 * @parameters:	 SENSOR_t sensor:	which sensor is recognized
 */
void visualisationSensorRecognized(SENSOR_t sensor)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
	switch(sensor)
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d852      	bhi.n	8001fa2 <visualisationSensorRecognized+0xb6>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <visualisationSensorRecognized+0x18>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f19 	.word	0x08001f19
 8001f08:	08001f33 	.word	0x08001f33
 8001f0c:	08001f4d 	.word	0x08001f4d
 8001f10:	08001f67 	.word	0x08001f67
 8001f14:	08001f81 	.word	0x08001f81
	{
	case VISUALISATION_BMA020:
		tftPrint("BMA020 recognized!", POS_SCREEN_LINE_2);
 8001f18:	2300      	movs	r3, #0
 8001f1a:	221e      	movs	r2, #30
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <visualisationSensorRecognized+0xc0>)
 8001f20:	f001 f92a 	bl	8003178 <tftPrint>
		tftPrint("Address: 0x38", POS_SCREEN_LINE_3);
 8001f24:	2300      	movs	r3, #0
 8001f26:	2228      	movs	r2, #40	; 0x28
 8001f28:	2104      	movs	r1, #4
 8001f2a:	4821      	ldr	r0, [pc, #132]	; (8001fb0 <visualisationSensorRecognized+0xc4>)
 8001f2c:	f001 f924 	bl	8003178 <tftPrint>
		break;
 8001f30:	e037      	b.n	8001fa2 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_MPU6050:
		tftPrint("MPU6050 recognized!", POS_SCREEN_LINE_2);
 8001f32:	2300      	movs	r3, #0
 8001f34:	221e      	movs	r2, #30
 8001f36:	2104      	movs	r1, #4
 8001f38:	481e      	ldr	r0, [pc, #120]	; (8001fb4 <visualisationSensorRecognized+0xc8>)
 8001f3a:	f001 f91d 	bl	8003178 <tftPrint>
		tftPrint("Address: 0x68", POS_SCREEN_LINE_3);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2228      	movs	r2, #40	; 0x28
 8001f42:	2104      	movs	r1, #4
 8001f44:	481c      	ldr	r0, [pc, #112]	; (8001fb8 <visualisationSensorRecognized+0xcc>)
 8001f46:	f001 f917 	bl	8003178 <tftPrint>
		break;
 8001f4a:	e02a      	b.n	8001fa2 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_LIS3DH:
		tftPrint("LIS3DH recognized!", POS_SCREEN_LINE_2);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	221e      	movs	r2, #30
 8001f50:	2104      	movs	r1, #4
 8001f52:	481a      	ldr	r0, [pc, #104]	; (8001fbc <visualisationSensorRecognized+0xd0>)
 8001f54:	f001 f910 	bl	8003178 <tftPrint>
		tftPrint("Address: 0x18", POS_SCREEN_LINE_3);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2228      	movs	r2, #40	; 0x28
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4818      	ldr	r0, [pc, #96]	; (8001fc0 <visualisationSensorRecognized+0xd4>)
 8001f60:	f001 f90a 	bl	8003178 <tftPrint>
		break;
 8001f64:	e01d      	b.n	8001fa2 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_VL53LOX:
		tftPrint("TOF recognized!", POS_SCREEN_LINE_2);
 8001f66:	2300      	movs	r3, #0
 8001f68:	221e      	movs	r2, #30
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4815      	ldr	r0, [pc, #84]	; (8001fc4 <visualisationSensorRecognized+0xd8>)
 8001f6e:	f001 f903 	bl	8003178 <tftPrint>
		tftPrint("Address: 0x29", POS_SCREEN_LINE_3);
 8001f72:	2300      	movs	r3, #0
 8001f74:	2228      	movs	r2, #40	; 0x28
 8001f76:	2104      	movs	r1, #4
 8001f78:	4813      	ldr	r0, [pc, #76]	; (8001fc8 <visualisationSensorRecognized+0xdc>)
 8001f7a:	f001 f8fd 	bl	8003178 <tftPrint>
		break;
 8001f7e:	e010      	b.n	8001fa2 <visualisationSensorRecognized+0xb6>
	case VISUALISATION_UNKNOWN:
		tftPrint("Unknown sensor!", POS_SCREEN_LINE_3);
 8001f80:	2300      	movs	r3, #0
 8001f82:	2228      	movs	r2, #40	; 0x28
 8001f84:	2104      	movs	r1, #4
 8001f86:	4811      	ldr	r0, [pc, #68]	; (8001fcc <visualisationSensorRecognized+0xe0>)
 8001f88:	f001 f8f6 	bl	8003178 <tftPrint>
		delayms(1000);
 8001f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f90:	f000 fb60 	bl	8002654 <delayms>
		tftPrint("               ", POS_SCREEN_LINE_3);
 8001f94:	2300      	movs	r3, #0
 8001f96:	2228      	movs	r2, #40	; 0x28
 8001f98:	2104      	movs	r1, #4
 8001f9a:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <visualisationSensorRecognized+0xe4>)
 8001f9c:	f001 f8ec 	bl	8003178 <tftPrint>
		break;
 8001fa0:	bf00      	nop
	}
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	0800af80 	.word	0x0800af80
 8001fb0:	0800af94 	.word	0x0800af94
 8001fb4:	0800afa4 	.word	0x0800afa4
 8001fb8:	0800afb8 	.word	0x0800afb8
 8001fbc:	0800afc8 	.word	0x0800afc8
 8001fc0:	0800afdc 	.word	0x0800afdc
 8001fc4:	0800afec 	.word	0x0800afec
 8001fc8:	0800affc 	.word	0x0800affc
 8001fcc:	0800b00c 	.word	0x0800b00c
 8001fd0:	0800b01c 	.word	0x0800b01c

08001fd4 <visualisationI2CScanDone>:
 * @brief: 		 show i2c scan through all addresses is done
 *
 * @parameters:	 uint8_t i2cInitAttempts:	attempts left
 */
void visualisationI2CScanDone(uint8_t i2cInitAttempts)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
	tftPrint("No Sensor found   ", POS_SCREEN_LINE_2);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	221e      	movs	r2, #30
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	4813      	ldr	r0, [pc, #76]	; (8002034 <visualisationI2CScanDone+0x60>)
 8001fe6:	f001 f8c7 	bl	8003178 <tftPrint>

	// if there are attempts left, trying again, otherwise leave
	if(i2cInitAttempts > 1)
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d906      	bls.n	8001ffe <visualisationI2CScanDone+0x2a>
	{
		tftPrint("trying again!     ", POS_SCREEN_LINE_3);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	2228      	movs	r2, #40	; 0x28
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	4810      	ldr	r0, [pc, #64]	; (8002038 <visualisationI2CScanDone+0x64>)
 8001ff8:	f001 f8be 	bl	8003178 <tftPrint>
 8001ffc:	e005      	b.n	800200a <visualisationI2CScanDone+0x36>
	}
	else
	{
		tftPrint("max attempts!     ", POS_SCREEN_LINE_3);
 8001ffe:	2300      	movs	r3, #0
 8002000:	2228      	movs	r2, #40	; 0x28
 8002002:	2104      	movs	r1, #4
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <visualisationI2CScanDone+0x68>)
 8002006:	f001 f8b7 	bl	8003178 <tftPrint>
	}

	// give chance to read
	delayms(3000);
 800200a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800200e:	f000 fb21 	bl	8002654 <delayms>


	// restore view
	tftPrint("Address:        ",POS_SCREEN_LINE_2);
 8002012:	2300      	movs	r3, #0
 8002014:	221e      	movs	r2, #30
 8002016:	2104      	movs	r1, #4
 8002018:	4809      	ldr	r0, [pc, #36]	; (8002040 <visualisationI2CScanDone+0x6c>)
 800201a:	f001 f8ad 	bl	8003178 <tftPrint>
	tftPrint("                ",POS_SCREEN_LINE_3);
 800201e:	2300      	movs	r3, #0
 8002020:	2228      	movs	r2, #40	; 0x28
 8002022:	2104      	movs	r1, #4
 8002024:	4807      	ldr	r0, [pc, #28]	; (8002044 <visualisationI2CScanDone+0x70>)
 8002026:	f001 f8a7 	bl	8003178 <tftPrint>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	0800b02c 	.word	0x0800b02c
 8002038:	0800b040 	.word	0x0800b040
 800203c:	0800b054 	.word	0x0800b054
 8002040:	0800b068 	.word	0x0800b068
 8002044:	0800b07c 	.word	0x0800b07c

08002048 <visualisationSensorInit>:
 * @brief: 		 visualize sensor init step: running or done
 *
 * @parameters:	 VIS_SENSOR_INIT_t step:	running or done
 */
void visualisationSensorInit(VIS_SENSOR_INIT_t step)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	switch(step)
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <visualisationSensorInit+0x16>
 8002058:	2b01      	cmp	r3, #1
 800205a:	d007      	beq.n	800206c <visualisationSensorInit+0x24>
		break;
	case SENSOR_INIT_DONE:
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
		break;
	}
}
 800205c:	e00d      	b.n	800207a <visualisationSensorInit+0x32>
		tftPrint("Sensor Init running", POS_SCREEN_LINE_3);
 800205e:	2300      	movs	r3, #0
 8002060:	2228      	movs	r2, #40	; 0x28
 8002062:	2104      	movs	r1, #4
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <visualisationSensorInit+0x3c>)
 8002066:	f001 f887 	bl	8003178 <tftPrint>
		break;
 800206a:	e006      	b.n	800207a <visualisationSensorInit+0x32>
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
 800206c:	2300      	movs	r3, #0
 800206e:	2228      	movs	r2, #40	; 0x28
 8002070:	2104      	movs	r1, #4
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <visualisationSensorInit+0x40>)
 8002074:	f001 f880 	bl	8003178 <tftPrint>
		break;
 8002078:	bf00      	nop
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	0800b090 	.word	0x0800b090
 8002088:	0800b0a4 	.word	0x0800b0a4

0800208c <visualisationI2C2>:
 * @function:	 visualisationI2C2
 *
 * @brief: 		 visualization of Sensor init for i2c 2
 */
void visualisationI2C2(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
	tftPrint("Sensor-init: i2c2 ",POS_SCREEN_LINE_1);
 8002090:	2300      	movs	r3, #0
 8002092:	2211      	movs	r2, #17
 8002094:	2104      	movs	r1, #4
 8002096:	4808      	ldr	r0, [pc, #32]	; (80020b8 <visualisationI2C2+0x2c>)
 8002098:	f001 f86e 	bl	8003178 <tftPrint>
	tftPrint("Address:          ",POS_SCREEN_LINE_2);
 800209c:	2300      	movs	r3, #0
 800209e:	221e      	movs	r2, #30
 80020a0:	2104      	movs	r1, #4
 80020a2:	4806      	ldr	r0, [pc, #24]	; (80020bc <visualisationI2C2+0x30>)
 80020a4:	f001 f868 	bl	8003178 <tftPrint>
	tftPrint("                  ",POS_SCREEN_LINE_3);
 80020a8:	2300      	movs	r3, #0
 80020aa:	2228      	movs	r2, #40	; 0x28
 80020ac:	2104      	movs	r1, #4
 80020ae:	4804      	ldr	r0, [pc, #16]	; (80020c0 <visualisationI2C2+0x34>)
 80020b0:	f001 f862 	bl	8003178 <tftPrint>

}
 80020b4:	bf00      	nop
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	0800b0b8 	.word	0x0800b0b8
 80020bc:	0800b0cc 	.word	0x0800b0cc
 80020c0:	0800b0e0 	.word	0x0800b0e0

080020c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020c8:	f004 fd8a 	bl	8006be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <LoopForever+0x6>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	; (8002104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <LoopForever+0xe>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	; (8002110 <LoopForever+0x16>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020f2:	f004 fe07 	bl	8006d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020f6:	f7fe fee1 	bl	8000ebc <main>

080020fa <LoopForever>:

LoopForever:
  b LoopForever
 80020fa:	e7fe      	b.n	80020fa <LoopForever>
  ldr   r0, =_estack
 80020fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002108:	0800bbe8 	.word	0x0800bbe8
  ldr r2, =_sbss
 800210c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002110:	2000026c 	.word	0x2000026c

08002114 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>
	...

08002118 <i2cActivate>:
}



void i2cActivate()
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 800211e:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <i2cActivate+0xc8>)
 8002120:	60fb      	str	r3, [r7, #12]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
 8002122:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <i2cActivate+0xcc>)
 8002124:	60bb      	str	r3, [r7, #8]
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 8002126:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <i2cActivate+0xd0>)
 8002128:	607b      	str	r3, [r7, #4]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f003 fe2a 	bl	8005d84 <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f003 faeb 	bl	800570c <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 8002136:	2202      	movs	r2, #2
 8002138:	2108      	movs	r1, #8
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f003 fbac 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 8002140:	2204      	movs	r2, #4
 8002142:	2108      	movs	r1, #8
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f003 fc74 	bl	8005a32 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 800214a:	2202      	movs	r2, #2
 800214c:	2109      	movs	r1, #9
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f003 fba2 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 8002154:	2204      	movs	r2, #4
 8002156:	2109      	movs	r1, #9
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f003 fc6a 	bl	8005a32 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 800215e:	2201      	movs	r2, #1
 8002160:	2108      	movs	r1, #8
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f003 fcce 	bl	8005b04 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8002168:	2201      	movs	r2, #1
 800216a:	2109      	movs	r1, #9
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f003 fcc9 	bl	8005b04 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
 8002172:	2302      	movs	r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	2101      	movs	r1, #1
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f003 febb 	bl	8005ef4 <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f004 f858 	bl	8006234 <i2cEnableDevice>
#ifdef BALA2024

    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB10/PB3 (I2C).
    i2cSelectI2C(i2c2);                           // I2C2: Bustakt aktivieren
 8002184:	68b8      	ldr	r0, [r7, #8]
 8002186:	f003 fdfd 	bl	8005d84 <i2cSelectI2C>
    gpioSelectPinMode(portB, PIN10, ALTFUNC);
 800218a:	2202      	movs	r2, #2
 800218c:	210a      	movs	r1, #10
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f003 fb82 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN10, AF4);         // PB10 : I2C2 SCL
 8002194:	2204      	movs	r2, #4
 8002196:	210a      	movs	r1, #10
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f003 fc4a 	bl	8005a32 <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN3, ALTFUNC);
 800219e:	2202      	movs	r2, #2
 80021a0:	2103      	movs	r1, #3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f003 fb78 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN3, AF9);         // PB3 : 	I2C2 SDA
 80021a8:	2209      	movs	r2, #9
 80021aa:	2103      	movs	r1, #3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f003 fc40 	bl	8005a32 <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN10, OPENDRAIN);   // Immer externe Pull-up-
 80021b2:	2201      	movs	r2, #1
 80021b4:	210a      	movs	r1, #10
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f003 fca4 	bl	8005b04 <gpioSetOutputType>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
 80021bc:	2201      	movs	r2, #1
 80021be:	2103      	movs	r1, #3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f003 fc9f 	bl	8005b04 <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
 80021c6:	2302      	movs	r3, #2
 80021c8:	220f      	movs	r2, #15
 80021ca:	2101      	movs	r1, #1
 80021cc:	68b8      	ldr	r0, [r7, #8]
 80021ce:	f003 fe91 	bl	8005ef4 <i2cInitI2C>
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
 80021d2:	68b8      	ldr	r0, [r7, #8]
 80021d4:	f004 f82e 	bl	8006234 <i2cEnableDevice>
#endif /* BALA2024 */
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40005400 	.word	0x40005400
 80021e4:	40005800 	.word	0x40005800
 80021e8:	40020400 	.word	0x40020400

080021ec <ledActivate>:




void ledActivate(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 80021f0:	481e      	ldr	r0, [pc, #120]	; (800226c <ledActivate+0x80>)
 80021f2:	f003 faed 	bl	80057d0 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 80021f6:	2201      	movs	r2, #1
 80021f8:	210f      	movs	r1, #15
 80021fa:	481c      	ldr	r0, [pc, #112]	; (800226c <ledActivate+0x80>)
 80021fc:	f003 fb4c 	bl	8005898 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8002200:	2200      	movs	r2, #0
 8002202:	210f      	movs	r1, #15
 8002204:	4819      	ldr	r0, [pc, #100]	; (800226c <ledActivate+0x80>)
 8002206:	f003 fc7d 	bl	8005b04 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800220a:	2201      	movs	r2, #1
 800220c:	210f      	movs	r1, #15
 800220e:	4817      	ldr	r0, [pc, #92]	; (800226c <ledActivate+0x80>)
 8002210:	f003 fcc1 	bl	8005b96 <gpioSelectPushPullMode>
    LED_red_off;
 8002214:	210f      	movs	r1, #15
 8002216:	4815      	ldr	r0, [pc, #84]	; (800226c <ledActivate+0x80>)
 8002218:	f003 fb89 	bl	800592e <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 800221c:	2201      	movs	r2, #1
 800221e:	210e      	movs	r1, #14
 8002220:	4812      	ldr	r0, [pc, #72]	; (800226c <ledActivate+0x80>)
 8002222:	f003 fb39 	bl	8005898 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 8002226:	2200      	movs	r2, #0
 8002228:	210e      	movs	r1, #14
 800222a:	4810      	ldr	r0, [pc, #64]	; (800226c <ledActivate+0x80>)
 800222c:	f003 fc6a 	bl	8005b04 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8002230:	2201      	movs	r2, #1
 8002232:	210e      	movs	r1, #14
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <ledActivate+0x80>)
 8002236:	f003 fcae 	bl	8005b96 <gpioSelectPushPullMode>
    LED_green_off;
 800223a:	210e      	movs	r1, #14
 800223c:	480b      	ldr	r0, [pc, #44]	; (800226c <ledActivate+0x80>)
 800223e:	f003 fb76 	bl	800592e <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8002242:	2201      	movs	r2, #1
 8002244:	210d      	movs	r1, #13
 8002246:	4809      	ldr	r0, [pc, #36]	; (800226c <ledActivate+0x80>)
 8002248:	f003 fb26 	bl	8005898 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 800224c:	2200      	movs	r2, #0
 800224e:	210d      	movs	r1, #13
 8002250:	4806      	ldr	r0, [pc, #24]	; (800226c <ledActivate+0x80>)
 8002252:	f003 fc57 	bl	8005b04 <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 8002256:	2201      	movs	r2, #1
 8002258:	210d      	movs	r1, #13
 800225a:	4804      	ldr	r0, [pc, #16]	; (800226c <ledActivate+0x80>)
 800225c:	f003 fc9b 	bl	8005b96 <gpioSelectPushPullMode>
    LED_blue_off;
 8002260:	210d      	movs	r1, #13
 8002262:	4802      	ldr	r0, [pc, #8]	; (800226c <ledActivate+0x80>)
 8002264:	f003 fb63 	bl	800592e <gpioSetPin>
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40020400 	.word	0x40020400

08002270 <convDecByteToHex>:
/*
 * Darstellung eines byte Value als hexadezimalen String mit zwei ascii Symbolen.
 * return: pointer auf den String hex[2]
 */
uint8_t *convDecByteToHex(uint8_t byte)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d803      	bhi.n	8002290 <convDecByteToHex+0x20>
    {
        temp += '0';
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	3330      	adds	r3, #48	; 0x30
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	e002      	b.n	8002296 <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3337      	adds	r3, #55	; 0x37
 8002294:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 8002296:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <convDecByteToHex+0x5c>)
 8002298:	7bfb      	ldrb	r3, [r7, #15]
 800229a:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	091b      	lsrs	r3, r3, #4
 80022a0:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	d803      	bhi.n	80022b0 <convDecByteToHex+0x40>
    {
        temp += '0';
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3330      	adds	r3, #48	; 0x30
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e002      	b.n	80022b6 <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	3337      	adds	r3, #55	; 0x37
 80022b4:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 80022b6:	4a05      	ldr	r2, [pc, #20]	; (80022cc <convDecByteToHex+0x5c>)
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	7013      	strb	r3, [r2, #0]

    return hex;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <convDecByteToHex+0x5c>)
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000228 	.word	0x20000228

080022d0 <I2C_SCAN>:
 *			and display on the ST7735 Display
 *
 *
 */
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <I2C_SCAN+0xd0>)
 80022de:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 18
	uint8_t foundAddr = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <I2C_SCAN+0xd4>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d102      	bne.n	80022f2 <I2C_SCAN+0x22>
    {
	   port = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	75fb      	strb	r3, [r7, #23]
 80022f0:	e001      	b.n	80022f6 <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <I2C_SCAN+0xd8>)
 80022fe:	2212      	movs	r2, #18
 8002300:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <I2C_SCAN+0xd8>)
 8002304:	2212      	movs	r2, #18
 8002306:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	4619      	mov	r1, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f003 ffa2 	bl	8006256 <i2cFindSlaveAddr>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	4a23      	ldr	r2, [pc, #140]	; (80023a8 <I2C_SCAN+0xd8>)
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d110      	bne.n	8002344 <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 8002322:	7dfb      	ldrb	r3, [r7, #23]
 8002324:	4a21      	ldr	r2, [pc, #132]	; (80023ac <I2C_SCAN+0xdc>)
 8002326:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800232a:	7dfb      	ldrb	r3, [r7, #23]
 800232c:	4a1e      	ldr	r2, [pc, #120]	; (80023a8 <I2C_SCAN+0xd8>)
 800232e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002332:	2300      	movs	r3, #0
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f000 ff1f 	bl	8003178 <tftPrint>
		yPos[port] = 66;
 800233a:	7dfb      	ldrb	r3, [r7, #23]
 800233c:	4a1a      	ldr	r2, [pc, #104]	; (80023a8 <I2C_SCAN+0xd8>)
 800233e:	2142      	movs	r1, #66	; 0x42
 8002340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff ff92 	bl	8002270 <convDecByteToHex>
 800234c:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d01f      	beq.n	8002394 <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <I2C_SCAN+0xdc>)
 8002358:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800235c:	7dfb      	ldrb	r3, [r7, #23]
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <I2C_SCAN+0xd8>)
 8002360:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002364:	2300      	movs	r3, #0
 8002366:	68b8      	ldr	r0, [r7, #8]
 8002368:	f000 ff06 	bl	8003178 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <I2C_SCAN+0xd8>)
 8002370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	320e      	adds	r2, #14
 8002378:	490b      	ldr	r1, [pc, #44]	; (80023a8 <I2C_SCAN+0xd8>)
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	4a09      	ldr	r2, [pc, #36]	; (80023a8 <I2C_SCAN+0xd8>)
 8002382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	dd04      	ble.n	8002394 <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <I2C_SCAN+0xd8>)
 800238e:	2112      	movs	r1, #18
 8002390:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	0800b0f4 	.word	0x0800b0f4
 80023a4:	40005400 	.word	0x40005400
 80023a8:	2000000c 	.word	0x2000000c
 80023ac:	20000014 	.word	0x20000014

080023b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	db0b      	blt.n	80023da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	f003 021f 	and.w	r2, r3, #31
 80023c8:	4907      	ldr	r1, [pc, #28]	; (80023e8 <__NVIC_EnableIRQ+0x38>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	2001      	movs	r0, #1
 80023d2:	fa00 f202 	lsl.w	r2, r0, r2
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	e000e100 	.word	0xe000e100

080023ec <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80023f0:	482b      	ldr	r0, [pc, #172]	; (80024a0 <initRotaryPushButton+0xb4>)
 80023f2:	f003 f98b 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOB);
 80023f6:	482b      	ldr	r0, [pc, #172]	; (80024a4 <initRotaryPushButton+0xb8>)
 80023f8:	f003 f988 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOC);
 80023fc:	482a      	ldr	r0, [pc, #168]	; (80024a8 <initRotaryPushButton+0xbc>)
 80023fe:	f003 f985 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOD);
 8002402:	482a      	ldr	r0, [pc, #168]	; (80024ac <initRotaryPushButton+0xc0>)
 8002404:	f003 f982 	bl	800570c <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <initRotaryPushButton+0xc4>)
 800240e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <initRotaryPushButton+0xc4>)
 8002412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002416:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 8002418:	2200      	movs	r2, #0
 800241a:	2100      	movs	r1, #0
 800241c:	4821      	ldr	r0, [pc, #132]	; (80024a4 <initRotaryPushButton+0xb8>)
 800241e:	f003 fa3b 	bl	8005898 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8002422:	2201      	movs	r2, #1
 8002424:	2100      	movs	r1, #0
 8002426:	481f      	ldr	r0, [pc, #124]	; (80024a4 <initRotaryPushButton+0xb8>)
 8002428:	f003 fbb5 	bl	8005b96 <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 800242c:	2200      	movs	r2, #0
 800242e:	2101      	movs	r1, #1
 8002430:	481c      	ldr	r0, [pc, #112]	; (80024a4 <initRotaryPushButton+0xb8>)
 8002432:	f003 fa31 	bl	8005898 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 8002436:	2201      	movs	r2, #1
 8002438:	2101      	movs	r1, #1
 800243a:	481a      	ldr	r0, [pc, #104]	; (80024a4 <initRotaryPushButton+0xb8>)
 800243c:	f003 fbab 	bl	8005b96 <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8002440:	2200      	movs	r2, #0
 8002442:	210a      	movs	r1, #10
 8002444:	4816      	ldr	r0, [pc, #88]	; (80024a0 <initRotaryPushButton+0xb4>)
 8002446:	f003 fa27 	bl	8005898 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800244a:	2201      	movs	r2, #1
 800244c:	210a      	movs	r1, #10
 800244e:	4814      	ldr	r0, [pc, #80]	; (80024a0 <initRotaryPushButton+0xb4>)
 8002450:	f003 fba1 	bl	8005b96 <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8002454:	f002 ff04 	bl	8005260 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 8002458:	2100      	movs	r1, #0
 800245a:	4812      	ldr	r0, [pc, #72]	; (80024a4 <initRotaryPushButton+0xb8>)
 800245c:	f002 ff1c 	bl	8005298 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 8002460:	210a      	movs	r1, #10
 8002462:	480f      	ldr	r0, [pc, #60]	; (80024a0 <initRotaryPushButton+0xb4>)
 8002464:	f002 ff18 	bl	8005298 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 8002468:	2000      	movs	r0, #0
 800246a:	f002 ffc9 	bl	8005400 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 800246e:	200a      	movs	r0, #10
 8002470:	f002 ffc6 	bl	8005400 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 8002474:	2101      	movs	r1, #1
 8002476:	2000      	movs	r0, #0
 8002478:	f002 ffe4 	bl	8005444 <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 800247c:	2100      	movs	r1, #0
 800247e:	200a      	movs	r0, #10
 8002480:	f002 ffe0 	bl	8005444 <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 8002484:	2006      	movs	r0, #6
 8002486:	f7ff ff93 	bl	80023b0 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 800248a:	2028      	movs	r0, #40	; 0x28
 800248c:	f7ff ff90 	bl	80023b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8002490:	b662      	cpsie	i
}
 8002492:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <initRotaryPushButton+0xc8>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40020000 	.word	0x40020000
 80024a4:	40020400 	.word	0x40020400
 80024a8:	40020800 	.word	0x40020800
 80024ac:	40020c00 	.word	0x40020c00
 80024b0:	40023800 	.word	0x40023800
 80024b4:	20000231 	.word	0x20000231

080024b8 <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 80024bc:	4815      	ldr	r0, [pc, #84]	; (8002514 <initRotaryPushButtonLED+0x5c>)
 80024be:	f003 f925 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOB);
 80024c2:	4815      	ldr	r0, [pc, #84]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024c4:	f003 f922 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOC);
 80024c8:	4814      	ldr	r0, [pc, #80]	; (800251c <initRotaryPushButtonLED+0x64>)
 80024ca:	f003 f91f 	bl	800570c <gpioInitPort>
	gpioInitPort(GPIOD);
 80024ce:	4814      	ldr	r0, [pc, #80]	; (8002520 <initRotaryPushButtonLED+0x68>)
 80024d0:	f003 f91c 	bl	800570c <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 80024d4:	2201      	movs	r2, #1
 80024d6:	210f      	movs	r1, #15
 80024d8:	480f      	ldr	r0, [pc, #60]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024da:	f003 f9dd 	bl	8005898 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 80024de:	2201      	movs	r2, #1
 80024e0:	210e      	movs	r1, #14
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024e4:	f003 f9d8 	bl	8005898 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 80024e8:	2201      	movs	r2, #1
 80024ea:	210d      	movs	r1, #13
 80024ec:	480a      	ldr	r0, [pc, #40]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024ee:	f003 f9d3 	bl	8005898 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 80024f2:	210f      	movs	r1, #15
 80024f4:	4808      	ldr	r0, [pc, #32]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024f6:	f003 fa1a 	bl	800592e <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 80024fa:	210e      	movs	r1, #14
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <initRotaryPushButtonLED+0x60>)
 80024fe:	f003 fa16 	bl	800592e <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 8002502:	210d      	movs	r1, #13
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <initRotaryPushButtonLED+0x60>)
 8002506:	f003 fa12 	bl	800592e <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <initRotaryPushButtonLED+0x6c>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40020800 	.word	0x40020800
 8002520:	40020c00 	.word	0x40020c00
 8002524:	20000232 	.word	0x20000232

08002528 <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <getRotaryPushButton+0x3c>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f083 0301 	eor.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 800253c:	f7ff ff56 	bl	80023ec <initRotaryPushButton>
		return ERROR_VALUE;
 8002540:	2301      	movs	r3, #1
 8002542:	e00a      	b.n	800255a <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8002544:	4b08      	ldr	r3, [pc, #32]	; (8002568 <getRotaryPushButton+0x40>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <getRotaryPushButton+0x40>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <getRotaryPushButton+0x40>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000231 	.word	0x20000231
 8002568:	20000230 	.word	0x20000230

0800256c <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <getRotaryPosition+0x24>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	f083 0301 	eor.w	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 800257e:	2301      	movs	r3, #1
 8002580:	e001      	b.n	8002586 <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 8002582:	4b04      	ldr	r3, [pc, #16]	; (8002594 <getRotaryPosition+0x28>)
 8002584:	681b      	ldr	r3, [r3, #0]
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000231 	.word	0x20000231
 8002594:	2000022c 	.word	0x2000022c

08002598 <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <setRotaryPosition+0x30>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e003      	b.n	80025ba <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 80025b2:	4a06      	ldr	r2, [pc, #24]	; (80025cc <setRotaryPosition+0x34>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]

	return 0;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20000231 	.word	0x20000231
 80025cc:	2000022c 	.word	0x2000022c

080025d0 <EXTI0_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 80025d4:	2101      	movs	r1, #1
 80025d6:	480f      	ldr	r0, [pc, #60]	; (8002614 <EXTI0_IRQHandler+0x44>)
 80025d8:	f003 fb3a 	bl	8005c50 <gpioGetPinState>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <EXTI0_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <EXTI0_IRQHandler+0x48>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <EXTI0_IRQHandler+0x48>)
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	e004      	b.n	80025f8 <EXTI0_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <EXTI0_IRQHandler+0x48>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	4a08      	ldr	r2, [pc, #32]	; (8002618 <EXTI0_IRQHandler+0x48>)
 80025f6:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <EXTI0_IRQHandler+0x4c>)
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d005      	beq.n	8002610 <EXTI0_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <EXTI0_IRQHandler+0x4c>)
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <EXTI0_IRQHandler+0x4c>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6153      	str	r3, [r2, #20]
	}
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40020400 	.word	0x40020400
 8002618:	2000022c 	.word	0x2000022c
 800261c:	40013c00 	.word	0x40013c00

08002620 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <EXTI15_10_IRQHandler+0x2c>)
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <EXTI15_10_IRQHandler+0x30>)
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <EXTI15_10_IRQHandler+0x30>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <EXTI15_10_IRQHandler+0x30>)
 800263c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002640:	6153      	str	r3, [r2, #20]
	}
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	20000230 	.word	0x20000230
 8002650:	40013c00 	.word	0x40013c00

08002654 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	4803      	ldr	r0, [pc, #12]	; (800266c <delayms+0x18>)
 8002660:	f004 fa9a 	bl	8006b98 <systickDelay>
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000218 	.word	0x20000218

08002670 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <tftSPISenddata+0x20>)
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	220f      	movs	r2, #15
 8002682:	4904      	ldr	r1, [pc, #16]	; (8002694 <tftSPISenddata+0x24>)
 8002684:	f004 f979 	bl	800697a <spiWriteByte>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000020 	.word	0x20000020
 8002694:	40020000 	.word	0x40020000

08002698 <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80026a2:	2105      	movs	r1, #5
 80026a4:	4805      	ldr	r0, [pc, #20]	; (80026bc <tftSendCmd+0x24>)
 80026a6:	f003 f96d 	bl	8005984 <gpioResetPin>
    tftSPISenddata(cmd);
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffdf 	bl	8002670 <tftSPISenddata>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40020400 	.word	0x40020400

080026c0 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 80026ca:	2105      	movs	r1, #5
 80026cc:	4805      	ldr	r0, [pc, #20]	; (80026e4 <tftSendData+0x24>)
 80026ce:	f003 f92e 	bl	800592e <gpioSetPin>
    tftSPISenddata(data);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ffcb 	bl	8002670 <tftSPISenddata>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40020400 	.word	0x40020400

080026e8 <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 80026ee:	4825      	ldr	r0, [pc, #148]	; (8002784 <spiInit+0x9c>)
 80026f0:	f003 f86e 	bl	80057d0 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 80026f4:	2201      	movs	r2, #1
 80026f6:	2104      	movs	r1, #4
 80026f8:	4822      	ldr	r0, [pc, #136]	; (8002784 <spiInit+0x9c>)
 80026fa:	f003 f8cd 	bl	8005898 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 80026fe:	4821      	ldr	r0, [pc, #132]	; (8002784 <spiInit+0x9c>)
 8002700:	f003 f866 	bl	80057d0 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002704:	2201      	movs	r2, #1
 8002706:	2105      	movs	r1, #5
 8002708:	481e      	ldr	r0, [pc, #120]	; (8002784 <spiInit+0x9c>)
 800270a:	f003 f8c5 	bl	8005898 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 800270e:	481e      	ldr	r0, [pc, #120]	; (8002788 <spiInit+0xa0>)
 8002710:	f002 fffc 	bl	800570c <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002714:	2201      	movs	r2, #1
 8002716:	210f      	movs	r1, #15
 8002718:	481b      	ldr	r0, [pc, #108]	; (8002788 <spiInit+0xa0>)
 800271a:	f003 f8bd 	bl	8005898 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 800271e:	2201      	movs	r2, #1
 8002720:	210f      	movs	r1, #15
 8002722:	4819      	ldr	r0, [pc, #100]	; (8002788 <spiInit+0xa0>)
 8002724:	f003 fa37 	bl	8005b96 <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 8002728:	4817      	ldr	r0, [pc, #92]	; (8002788 <spiInit+0xa0>)
 800272a:	f002 ffef 	bl	800570c <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 800272e:	2202      	movs	r2, #2
 8002730:	2105      	movs	r1, #5
 8002732:	4815      	ldr	r0, [pc, #84]	; (8002788 <spiInit+0xa0>)
 8002734:	f003 f8b0 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 8002738:	2205      	movs	r2, #5
 800273a:	2105      	movs	r1, #5
 800273c:	4812      	ldr	r0, [pc, #72]	; (8002788 <spiInit+0xa0>)
 800273e:	f003 f978 	bl	8005a32 <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8002742:	2202      	movs	r2, #2
 8002744:	2107      	movs	r1, #7
 8002746:	4810      	ldr	r0, [pc, #64]	; (8002788 <spiInit+0xa0>)
 8002748:	f003 f8a6 	bl	8005898 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 800274c:	2205      	movs	r2, #5
 800274e:	2107      	movs	r1, #7
 8002750:	480d      	ldr	r0, [pc, #52]	; (8002788 <spiInit+0xa0>)
 8002752:	f003 f96e 	bl	8005a32 <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <spiInit+0xa4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f004 f8b2 	bl	80068c4 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <spiInit+0xa4>)
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	9303      	str	r3, [sp, #12]
 8002768:	2300      	movs	r3, #0
 800276a:	9302      	str	r3, [sp, #8]
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2301      	movs	r3, #1
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2301      	movs	r3, #1
 8002776:	2200      	movs	r2, #0
 8002778:	2103      	movs	r1, #3
 800277a:	f003 ffb5 	bl	80066e8 <spiInitSPI>

}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40020400 	.word	0x40020400
 8002788:	40020000 	.word	0x40020000
 800278c:	20000020 	.word	0x20000020

08002790 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80027a2:	e033      	b.n	800280c <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff73 	bl	8002698 <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 80027bc:	7bbb      	ldrb	r3, [r7, #14]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 80027c6:	7bbb      	ldrb	r3, [r7, #14]
 80027c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027cc:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 80027ce:	e006      	b.n	80027de <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff ff71 	bl	80026c0 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 80027de:	7bbb      	ldrb	r3, [r7, #14]
 80027e0:	1e5a      	subs	r2, r3, #1
 80027e2:	73ba      	strb	r2, [r7, #14]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f3      	bne.n	80027d0 <commandList+0x40>
		}

		if(ms) {
 80027e8:	89bb      	ldrh	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80027f8:	89bb      	ldrh	r3, [r7, #12]
 80027fa:	2bff      	cmp	r3, #255	; 0xff
 80027fc:	d102      	bne.n	8002804 <commandList+0x74>
 80027fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002802:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 8002804:	89bb      	ldrh	r3, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff ff24 	bl	8002654 <delayms>
	while(numCommands--) {                 // For each command...
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	1e5a      	subs	r2, r3, #1
 8002810:	73fa      	strb	r2, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1c6      	bne.n	80027a4 <commandList+0x14>
		}
	}
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8002828:	210f      	movs	r1, #15
 800282a:	480c      	ldr	r0, [pc, #48]	; (800285c <commonInit+0x3c>)
 800282c:	f003 f8aa 	bl	8005984 <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8002830:	2104      	movs	r1, #4
 8002832:	480b      	ldr	r0, [pc, #44]	; (8002860 <commonInit+0x40>)
 8002834:	f003 f8a6 	bl	8005984 <gpioResetPin>
	delayms(50);  //default value 500
 8002838:	2032      	movs	r0, #50	; 0x32
 800283a:	f7ff ff0b 	bl	8002654 <delayms>
	ST7735_RST1;
 800283e:	2104      	movs	r1, #4
 8002840:	4807      	ldr	r0, [pc, #28]	; (8002860 <commonInit+0x40>)
 8002842:	f003 f874 	bl	800592e <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <commonInit+0x32>
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff9f 	bl	8002790 <commandList>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400

08002864 <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 800286e:	2032      	movs	r0, #50	; 0x32
 8002870:	f7ff fef0 	bl	8002654 <delayms>
	commonInit(Rcmd1);
 8002874:	4811      	ldr	r0, [pc, #68]	; (80028bc <tftInitR+0x58>)
 8002876:	f7ff ffd3 	bl	8002820 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 8002880:	480f      	ldr	r0, [pc, #60]	; (80028c0 <tftInitR+0x5c>)
 8002882:	f7ff ff85 	bl	8002790 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <tftInitR+0x60>)
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <tftInitR+0x64>)
 800288e:	2201      	movs	r2, #1
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e002      	b.n	800289a <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 8002894:	480d      	ldr	r0, [pc, #52]	; (80028cc <tftInitR+0x68>)
 8002896:	f7ff ff7b 	bl	8002790 <commandList>
	}
	commandList(Rcmd3);
 800289a:	480d      	ldr	r0, [pc, #52]	; (80028d0 <tftInitR+0x6c>)
 800289c:	f7ff ff78 	bl	8002790 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d105      	bne.n	80028b2 <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80028a6:	2036      	movs	r0, #54	; 0x36
 80028a8:	f7ff fef6 	bl	8002698 <tftSendCmd>
		tftSendData(0xC0);
 80028ac:	20c0      	movs	r0, #192	; 0xc0
 80028ae:	f7ff ff07 	bl	80026c0 <tftSendData>
	}

	//  tabcolor = options;
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	0800b578 	.word	0x0800b578
 80028c0:	0800b5b4 	.word	0x0800b5b4
 80028c4:	20000234 	.word	0x20000234
 80028c8:	20000238 	.word	0x20000238
 80028cc:	0800b5c4 	.word	0x0800b5c4
 80028d0:	0800b5d4 	.word	0x0800b5d4

080028d4 <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80028d4:	b590      	push	{r4, r7, lr}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4604      	mov	r4, r0
 80028dc:	4608      	mov	r0, r1
 80028de:	4611      	mov	r1, r2
 80028e0:	461a      	mov	r2, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	4603      	mov	r3, r0
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	460b      	mov	r3, r1
 80028ec:	717b      	strb	r3, [r7, #5]
 80028ee:	4613      	mov	r3, r2
 80028f0:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 80028f2:	202a      	movs	r0, #42	; 0x2a
 80028f4:	f7ff fed0 	bl	8002698 <tftSendCmd>
	tftSendData(0x00);
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff fee1 	bl	80026c0 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 80028fe:	4b1b      	ldr	r3, [pc, #108]	; (800296c <tftSetAddrWindow+0x98>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	4413      	add	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fed8 	bl	80026c0 <tftSendData>
	tftSendData(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f7ff fed5 	bl	80026c0 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <tftSetAddrWindow+0x98>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	797b      	ldrb	r3, [r7, #5]
 800291e:	4413      	add	r3, r2
 8002920:	b2db      	uxtb	r3, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fecc 	bl	80026c0 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002928:	202b      	movs	r0, #43	; 0x2b
 800292a:	f7ff feb5 	bl	8002698 <tftSendCmd>
	tftSendData(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff fec6 	bl	80026c0 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <tftSetAddrWindow+0x9c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	79bb      	ldrb	r3, [r7, #6]
 800293c:	4413      	add	r3, r2
 800293e:	b2db      	uxtb	r3, r3
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff febd 	bl	80026c0 <tftSendData>
	tftSendData(0x00);
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff feba 	bl	80026c0 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <tftSetAddrWindow+0x9c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	793b      	ldrb	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff feb1 	bl	80026c0 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 800295e:	202c      	movs	r0, #44	; 0x2c
 8002960:	f7ff fe9a 	bl	8002698 <tftSendCmd>
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bd90      	pop	{r4, r7, pc}
 800296c:	20000234 	.word	0x20000234
 8002970:	20000238 	.word	0x20000238

08002974 <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 800297e:	2105      	movs	r1, #5
 8002980:	4809      	ldr	r0, [pc, #36]	; (80029a8 <tftPushColor+0x34>)
 8002982:	f002 ffd4 	bl	800592e <gpioSetPin>
	putpix(color);
 8002986:	88fb      	ldrh	r3, [r7, #6]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	b29b      	uxth	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fe6e 	bl	8002670 <tftSPISenddata>
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fe69 	bl	8002670 <tftSPISenddata>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40020400 	.word	0x40020400

080029ac <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4604      	mov	r4, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	80fb      	strh	r3, [r7, #6]
 80029be:	4603      	mov	r3, r0
 80029c0:	80bb      	strh	r3, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	807b      	strh	r3, [r7, #2]
 80029c6:	4613      	mov	r3, r2
 80029c8:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 80029ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029ce:	4a37      	ldr	r2, [pc, #220]	; (8002aac <tftFillRect+0x100>)
 80029d0:	8812      	ldrh	r2, [r2, #0]
 80029d2:	4293      	cmp	r3, r2
 80029d4:	da65      	bge.n	8002aa2 <tftFillRect+0xf6>
 80029d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029da:	4a35      	ldr	r2, [pc, #212]	; (8002ab0 <tftFillRect+0x104>)
 80029dc:	8812      	ldrh	r2, [r2, #0]
 80029de:	4293      	cmp	r3, r2
 80029e0:	da5f      	bge.n	8002aa2 <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 80029e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <tftFillRect+0x100>)
 80029ee:	8812      	ldrh	r2, [r2, #0]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	dd05      	ble.n	8002a00 <tftFillRect+0x54>
		{
		w = width  - x;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <tftFillRect+0x100>)
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	88fb      	ldrh	r3, [r7, #6]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8002a00:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a04:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <tftFillRect+0x104>)
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	dd05      	ble.n	8002a1e <tftFillRect+0x72>
		{
		h = height - y;
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <tftFillRect+0x104>)
 8002a14:	881a      	ldrh	r2, [r3, #0]
 8002a16:	88bb      	ldrh	r3, [r7, #4]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	b2d8      	uxtb	r0, r3
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	b2d9      	uxtb	r1, r3
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	887b      	ldrh	r3, [r7, #2]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b2dc      	uxtb	r4, r3
 8002a36:	88bb      	ldrh	r3, [r7, #4]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	883b      	ldrh	r3, [r7, #0]
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4622      	mov	r2, r4
 8002a48:	f7ff ff44 	bl	80028d4 <tftSetAddrWindow>

	ST7735_DC1;
 8002a4c:	2105      	movs	r1, #5
 8002a4e:	4819      	ldr	r0, [pc, #100]	; (8002ab4 <tftFillRect+0x108>)
 8002a50:	f002 ff6d 	bl	800592e <gpioSetPin>
	for(y=h; y>0; y--)
 8002a54:	883b      	ldrh	r3, [r7, #0]
 8002a56:	80bb      	strh	r3, [r7, #4]
 8002a58:	e01e      	b.n	8002a98 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	80fb      	strh	r3, [r7, #6]
 8002a5e:	e011      	b.n	8002a84 <tftFillRect+0xd8>
		{
			putpix(color);
 8002a60:	8b3b      	ldrh	r3, [r7, #24]
 8002a62:	0a1b      	lsrs	r3, r3, #8
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe01 	bl	8002670 <tftSPISenddata>
 8002a6e:	8b3b      	ldrh	r3, [r7, #24]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fdfc 	bl	8002670 <tftSPISenddata>
		for(x=w; x>0; x--)
 8002a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	80fb      	strh	r3, [r7, #6]
 8002a84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	dce9      	bgt.n	8002a60 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 8002a8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	80bb      	strh	r3, [r7, #4]
 8002a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dcdc      	bgt.n	8002a5a <tftFillRect+0xae>
 8002aa0:	e000      	b.n	8002aa4 <tftFillRect+0xf8>
		return;
 8002aa2:	bf00      	nop
		}
	}
}
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000001c 	.word	0x2000001c
 8002ab0:	2000001e 	.word	0x2000001e
 8002ab4:	40020400 	.word	0x40020400

08002ab8 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	80fb      	strh	r3, [r7, #6]
 8002aca:	4603      	mov	r3, r0
 8002acc:	80bb      	strh	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	807b      	strh	r3, [r7, #2]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8002ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ada:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <tftDrawFastVLine+0xb4>)
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	da3f      	bge.n	8002b62 <tftDrawFastVLine+0xaa>
 8002ae2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <tftDrawFastVLine+0xb8>)
 8002ae8:	8812      	ldrh	r2, [r2, #0]
 8002aea:	4293      	cmp	r3, r2
 8002aec:	da39      	bge.n	8002b62 <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8002aee:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002af2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002af6:	4413      	add	r3, r2
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <tftDrawFastVLine+0xb8>)
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	4293      	cmp	r3, r2
 8002afe:	dd05      	ble.n	8002b0c <tftDrawFastVLine+0x54>
 8002b00:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <tftDrawFastVLine+0xb8>)
 8002b02:	881a      	ldrh	r2, [r3, #0]
 8002b04:	88bb      	ldrh	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	88bb      	ldrh	r3, [r7, #4]
 8002b12:	b2d9      	uxtb	r1, r3
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	b2dc      	uxtb	r4, r3
 8002b18:	88bb      	ldrh	r3, [r7, #4]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	887b      	ldrh	r3, [r7, #2]
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4622      	mov	r2, r4
 8002b2a:	f7ff fed3 	bl	80028d4 <tftSetAddrWindow>

	ST7735_DC1;
 8002b2e:	2105      	movs	r1, #5
 8002b30:	4810      	ldr	r0, [pc, #64]	; (8002b74 <tftDrawFastVLine+0xbc>)
 8002b32:	f002 fefc 	bl	800592e <gpioSetPin>
	while (h--) {
 8002b36:	e00b      	b.n	8002b50 <tftDrawFastVLine+0x98>
		putpix(color);
 8002b38:	883b      	ldrh	r3, [r7, #0]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fd95 	bl	8002670 <tftSPISenddata>
 8002b46:	883b      	ldrh	r3, [r7, #0]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fd90 	bl	8002670 <tftSPISenddata>
	while (h--) {
 8002b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	3a01      	subs	r2, #1
 8002b58:	b292      	uxth	r2, r2
 8002b5a:	807a      	strh	r2, [r7, #2]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1eb      	bne.n	8002b38 <tftDrawFastVLine+0x80>
 8002b60:	e000      	b.n	8002b64 <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8002b62:	bf00      	nop
	}
}
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000001c 	.word	0x2000001c
 8002b70:	2000001e 	.word	0x2000001e
 8002b74:	40020400 	.word	0x40020400

08002b78 <tftDrawFastHLine>:
 * draws horizontal line
 * x an y are starting point
 * w is width
 */
void tftDrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4604      	mov	r4, r0
 8002b80:	4608      	mov	r0, r1
 8002b82:	4611      	mov	r1, r2
 8002b84:	461a      	mov	r2, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	80fb      	strh	r3, [r7, #6]
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	80bb      	strh	r3, [r7, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	807b      	strh	r3, [r7, #2]
 8002b92:	4613      	mov	r3, r2
 8002b94:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height))
 8002b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9a:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <tftDrawFastHLine+0xb0>)
 8002b9c:	8812      	ldrh	r2, [r2, #0]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	da3e      	bge.n	8002c20 <tftDrawFastHLine+0xa8>
 8002ba2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <tftDrawFastHLine+0xb4>)
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	da38      	bge.n	8002c20 <tftDrawFastHLine+0xa8>
		{
		return;
		}

	if((x+w-1) >= width)
 8002bae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002bb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a1b      	ldr	r2, [pc, #108]	; (8002c28 <tftDrawFastHLine+0xb0>)
 8002bba:	8812      	ldrh	r2, [r2, #0]
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	dd05      	ble.n	8002bcc <tftDrawFastHLine+0x54>
		{
		w = width-x;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <tftDrawFastHLine+0xb0>)
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	88fb      	ldrh	r3, [r7, #6]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	807b      	strh	r3, [r7, #2]
		}

	tftSetAddrWindow(x, y, x+w-1, y);
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	b2d8      	uxtb	r0, r3
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	b2d9      	uxtb	r1, r3
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	88bb      	ldrh	r3, [r7, #4]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f7ff fe74 	bl	80028d4 <tftSetAddrWindow>

	ST7735_DC1;
 8002bec:	2105      	movs	r1, #5
 8002bee:	4810      	ldr	r0, [pc, #64]	; (8002c30 <tftDrawFastHLine+0xb8>)
 8002bf0:	f002 fe9d 	bl	800592e <gpioSetPin>
	while (w--)
 8002bf4:	e00b      	b.n	8002c0e <tftDrawFastHLine+0x96>
	{
		putpix(color);
 8002bf6:	883b      	ldrh	r3, [r7, #0]
 8002bf8:	0a1b      	lsrs	r3, r3, #8
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fd36 	bl	8002670 <tftSPISenddata>
 8002c04:	883b      	ldrh	r3, [r7, #0]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fd31 	bl	8002670 <tftSPISenddata>
	while (w--)
 8002c0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	3a01      	subs	r2, #1
 8002c16:	b292      	uxth	r2, r2
 8002c18:	807a      	strh	r2, [r7, #2]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1eb      	bne.n	8002bf6 <tftDrawFastHLine+0x7e>
 8002c1e:	e000      	b.n	8002c22 <tftDrawFastHLine+0xaa>
		return;
 8002c20:	bf00      	nop
	}
}
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}
 8002c28:	2000001c 	.word	0x2000001c
 8002c2c:	2000001e 	.word	0x2000001e
 8002c30:	40020400 	.word	0x40020400

08002c34 <tftDrawRect>:
 * x2 is end parameter x
 * y1 is start parameter y
 * y2 is end parameter y
*/
void tftDrawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	461a      	mov	r2, r3
 8002c42:	4623      	mov	r3, r4
 8002c44:	71fb      	strb	r3, [r7, #7]
 8002c46:	4603      	mov	r3, r0
 8002c48:	71bb      	strb	r3, [r7, #6]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	717b      	strb	r3, [r7, #5]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	713b      	strb	r3, [r7, #4]
	tftDrawFastHLine(x1,y1,x2-x1, color);
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	b218      	sxth	r0, r3
 8002c56:	79bb      	ldrb	r3, [r7, #6]
 8002c58:	b219      	sxth	r1, r3
 8002c5a:	797b      	ldrb	r3, [r7, #5]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21a      	sxth	r2, r3
 8002c68:	8b3b      	ldrh	r3, [r7, #24]
 8002c6a:	f7ff ff85 	bl	8002b78 <tftDrawFastHLine>
	tftDrawFastVLine(x2,y1,y2-y1, color);
 8002c6e:	797b      	ldrb	r3, [r7, #5]
 8002c70:	b218      	sxth	r0, r3
 8002c72:	79bb      	ldrb	r3, [r7, #6]
 8002c74:	b219      	sxth	r1, r3
 8002c76:	793b      	ldrb	r3, [r7, #4]
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	79bb      	ldrb	r3, [r7, #6]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	8b3b      	ldrh	r3, [r7, #24]
 8002c86:	f7ff ff17 	bl	8002ab8 <tftDrawFastVLine>
	tftDrawFastHLine(x1,y2,x2-x1, color);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	b218      	sxth	r0, r3
 8002c8e:	793b      	ldrb	r3, [r7, #4]
 8002c90:	b219      	sxth	r1, r3
 8002c92:	797b      	ldrb	r3, [r7, #5]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	8b3b      	ldrh	r3, [r7, #24]
 8002ca2:	f7ff ff69 	bl	8002b78 <tftDrawFastHLine>
	tftDrawFastVLine(x1,y1,y2-y1, color);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	b218      	sxth	r0, r3
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	b219      	sxth	r1, r3
 8002cae:	793b      	ldrb	r3, [r7, #4]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	79bb      	ldrb	r3, [r7, #6]
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b21a      	sxth	r2, r3
 8002cbc:	8b3b      	ldrh	r3, [r7, #24]
 8002cbe:	f7ff fefb 	bl	8002ab8 <tftDrawFastVLine>
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
	...

08002ccc <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <tftSetFont+0x40>)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <tftSetFont+0x40>)
 8002ce0:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	785a      	ldrb	r2, [r3, #1]
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <tftSetFont+0x40>)
 8002ce8:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	789a      	ldrb	r2, [r3, #2]
 8002cee:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <tftSetFont+0x40>)
 8002cf0:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <tftSetFont+0x40>)
 8002cfc:	811a      	strh	r2, [r3, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000240 	.word	0x20000240

08002d10 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8002d10:	b590      	push	{r4, r7, lr}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002d1e:	4b74      	ldr	r3, [pc, #464]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d20:	791b      	ldrb	r3, [r3, #4]
 8002d22:	2b07      	cmp	r3, #7
 8002d24:	d803      	bhi.n	8002d2e <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8002d26:	4b72      	ldr	r3, [pc, #456]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d28:	791b      	ldrb	r3, [r3, #4]
 8002d2a:	77bb      	strb	r3, [r7, #30]
 8002d2c:	e003      	b.n	8002d36 <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002d2e:	4b70      	ldr	r3, [pc, #448]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d30:	791b      	ldrb	r3, [r3, #4]
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <tftPrintChar+0x1e4>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d15e      	bne.n	8002dfc <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	b2d8      	uxtb	r0, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	b2d9      	uxtb	r1, r3
 8002d46:	4b6a      	ldr	r3, [pc, #424]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d48:	791a      	ldrb	r2, [r3, #4]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b2dc      	uxtb	r4, r3
 8002d56:	4b66      	ldr	r3, [pc, #408]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d58:	795a      	ldrb	r2, [r3, #5]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	4622      	mov	r2, r4
 8002d68:	f7ff fdb4 	bl	80028d4 <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	4a60      	ldr	r2, [pc, #384]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d70:	7992      	ldrb	r2, [r2, #6]
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	7fbb      	ldrb	r3, [r7, #30]
 8002d78:	b299      	uxth	r1, r3
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d7c:	795b      	ldrb	r3, [r3, #5]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	fb11 f303 	smulbb	r3, r1, r3
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	fb12 f303 	smulbb	r3, r2, r3
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	83bb      	strh	r3, [r7, #28]
 8002d94:	e029      	b.n	8002dea <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8002d96:	4b56      	ldr	r3, [pc, #344]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	8b7b      	ldrh	r3, [r7, #26]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e017      	b.n	8002dd8 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002da8:	7cfa      	ldrb	r2, [r7, #19]
 8002daa:	7ffb      	ldrb	r3, [r7, #31]
 8002dac:	f1c3 0307 	rsb	r3, r3, #7
 8002db0:	fa42 f303 	asr.w	r3, r2, r3
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002dbc:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <tftPrintChar+0x1e8>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fdd7 	bl	8002974 <tftPushColor>
 8002dc6:	e004      	b.n	8002dd2 <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002dc8:	4b4c      	ldr	r3, [pc, #304]	; (8002efc <tftPrintChar+0x1ec>)
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fdd1 	bl	8002974 <tftPushColor>
			for(i=0;i<8;i++)
 8002dd2:	7ffb      	ldrb	r3, [r7, #31]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	7ffb      	ldrb	r3, [r7, #31]
 8002dda:	2b07      	cmp	r3, #7
 8002ddc:	d9e4      	bls.n	8002da8 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002dde:	8b7b      	ldrh	r3, [r7, #26]
 8002de0:	3301      	adds	r3, #1
 8002de2:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8002de4:	8bbb      	ldrh	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	83bb      	strh	r3, [r7, #28]
 8002dea:	8bba      	ldrh	r2, [r7, #28]
 8002dec:	7fbb      	ldrb	r3, [r7, #30]
 8002dee:	4940      	ldr	r1, [pc, #256]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002df0:	7949      	ldrb	r1, [r1, #5]
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	429a      	cmp	r2, r3
 8002df8:	dbcd      	blt.n	8002d96 <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002dfa:	e075      	b.n	8002ee8 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002e00:	7992      	ldrb	r2, [r2, #6]
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	7fbb      	ldrb	r3, [r7, #30]
 8002e08:	b299      	uxth	r1, r3
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002e0c:	795b      	ldrb	r3, [r3, #5]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	fb11 f303 	smulbb	r3, r1, r3
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	fb12 f303 	smulbb	r3, r2, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002e20:	2300      	movs	r3, #0
 8002e22:	83bb      	strh	r3, [r7, #28]
 8002e24:	e05a      	b.n	8002edc <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
 8002e2a:	e04b      	b.n	8002ec4 <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002e2c:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	8b79      	ldrh	r1, [r7, #26]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	440a      	add	r2, r1
 8002e36:	4413      	add	r3, r2
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e03a      	b.n	8002eb8 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
 8002e48:	4413      	add	r3, r2
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	8bbb      	ldrh	r3, [r7, #28]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	b2d9      	uxtb	r1, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	7ffb      	ldrb	r3, [r7, #31]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b2dc      	uxtb	r4, r3
 8002e7e:	8bbb      	ldrh	r3, [r7, #28]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	4622      	mov	r2, r4
 8002e90:	f7ff fd20 	bl	80028d4 <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8002e94:	7cfa      	ldrb	r2, [r7, #19]
 8002e96:	7ffb      	ldrb	r3, [r7, #31]
 8002e98:	f1c3 0307 	rsb	r3, r3, #7
 8002e9c:	fa42 f303 	asr.w	r3, r2, r3
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <tftPrintChar+0x1e8>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fd61 	bl	8002974 <tftPushColor>
				for(i=0;i<8;i++)
 8002eb2:	7ffb      	ldrb	r3, [r7, #31]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	77fb      	strb	r3, [r7, #31]
 8002eb8:	7ffb      	ldrb	r3, [r7, #31]
 8002eba:	2b07      	cmp	r3, #7
 8002ebc:	d9c1      	bls.n	8002e42 <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	7fbb      	ldrb	r3, [r7, #30]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	dbaf      	blt.n	8002e2c <tftPrintChar+0x11c>
			temp+=(fz);
 8002ecc:	7fbb      	ldrb	r3, [r7, #30]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	8b7b      	ldrh	r3, [r7, #26]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002ed6:	8bbb      	ldrh	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	83bb      	strh	r3, [r7, #28]
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <tftPrintChar+0x1e0>)
 8002ede:	795b      	ldrb	r3, [r3, #5]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	8bba      	ldrh	r2, [r7, #28]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d39e      	bcc.n	8002e26 <tftPrintChar+0x116>
}
 8002ee8:	bf00      	nop
 8002eea:	3724      	adds	r7, #36	; 0x24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}
 8002ef0:	20000240 	.word	0x20000240
 8002ef4:	2000024c 	.word	0x2000024c
 8002ef8:	20000024 	.word	0x20000024
 8002efc:	2000024e 	.word	0x2000024e

08002f00 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f04:	b08e      	sub	sp, #56	; 0x38
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002f12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002f14:	f7fd fb0e 	bl	8000534 <__aeabi_i2d>
 8002f18:	a395      	add	r3, pc, #596	; (adr r3, 8003170 <tftRotateChar+0x270>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f7fd fb73 	bl	8000608 <__aeabi_dmul>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002f2a:	4b8d      	ldr	r3, [pc, #564]	; (8003160 <tftRotateChar+0x260>)
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	2b07      	cmp	r3, #7
 8002f30:	d804      	bhi.n	8002f3c <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002f32:	4b8b      	ldr	r3, [pc, #556]	; (8003160 <tftRotateChar+0x260>)
 8002f34:	791b      	ldrb	r3, [r3, #4]
 8002f36:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002f3a:	e017      	b.n	8002f6c <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <tftRotateChar+0x260>)
 8002f3e:	791b      	ldrb	r3, [r3, #4]
 8002f40:	08db      	lsrs	r3, r3, #3
 8002f42:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	4a85      	ldr	r2, [pc, #532]	; (8003160 <tftRotateChar+0x260>)
 8002f4a:	7992      	ldrb	r2, [r2, #6]
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002f54:	b299      	uxth	r1, r3
 8002f56:	4b82      	ldr	r3, [pc, #520]	; (8003160 <tftRotateChar+0x260>)
 8002f58:	795b      	ldrb	r3, [r3, #5]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	fb11 f303 	smulbb	r3, r1, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	fb12 f303 	smulbb	r3, r2, r3
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3304      	adds	r3, #4
 8002f6a:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002f72:	e0e6      	b.n	8003142 <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	e0d2      	b.n	8003120 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8002f7a:	4b79      	ldr	r3, [pc, #484]	; (8003160 <tftRotateChar+0x260>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f82:	440a      	add	r2, r1
 8002f84:	4413      	add	r3, r2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f90:	e0be      	b.n	8003110 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8002f92:	68b8      	ldr	r0, [r7, #8]
 8002f94:	f7fd face 	bl	8000534 <__aeabi_i2d>
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	441a      	add	r2, r3
 8002fa6:	4b6e      	ldr	r3, [pc, #440]	; (8003160 <tftRotateChar+0x260>)
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	4619      	mov	r1, r3
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fabd 	bl	8000534 <__aeabi_i2d>
 8002fba:	4680      	mov	r8, r0
 8002fbc:	4689      	mov	r9, r1
 8002fbe:	ed97 0b08 	vldr	d0, [r7, #32]
 8002fc2:	f006 fdad 	bl	8009b20 <cos>
 8002fc6:	ec53 2b10 	vmov	r2, r3, d0
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4649      	mov	r1, r9
 8002fce:	f7fd fb1b 	bl	8000608 <__aeabi_dmul>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4692      	mov	sl, r2
 8002fd8:	469b      	mov	fp, r3
 8002fda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd faa8 	bl	8000534 <__aeabi_i2d>
 8002fe4:	4680      	mov	r8, r0
 8002fe6:	4689      	mov	r9, r1
 8002fe8:	ed97 0b08 	vldr	d0, [r7, #32]
 8002fec:	f006 fdec 	bl	8009bc8 <sin>
 8002ff0:	ec53 2b10 	vmov	r2, r3, d0
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	f7fd fb06 	bl	8000608 <__aeabi_dmul>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4650      	mov	r0, sl
 8003002:	4659      	mov	r1, fp
 8003004:	f7fd f948 	bl	8000298 <__aeabi_dsub>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4620      	mov	r0, r4
 800300e:	4629      	mov	r1, r5
 8003010:	f7fd f944 	bl	800029c <__adddf3>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4610      	mov	r0, r2
 800301a:	4619      	mov	r1, r3
 800301c:	f7fd fda4 	bl	8000b68 <__aeabi_d2iz>
 8003020:	4603      	mov	r3, r0
 8003022:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7fd fa85 	bl	8000534 <__aeabi_i2d>
 800302a:	4604      	mov	r4, r0
 800302c:	460d      	mov	r5, r1
 800302e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa7e 	bl	8000534 <__aeabi_i2d>
 8003038:	4680      	mov	r8, r0
 800303a:	4689      	mov	r9, r1
 800303c:	ed97 0b08 	vldr	d0, [r7, #32]
 8003040:	f006 fd6e 	bl	8009b20 <cos>
 8003044:	ec53 2b10 	vmov	r2, r3, d0
 8003048:	4640      	mov	r0, r8
 800304a:	4649      	mov	r1, r9
 800304c:	f7fd fadc 	bl	8000608 <__aeabi_dmul>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4692      	mov	sl, r2
 8003056:	469b      	mov	fp, r3
 8003058:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	441a      	add	r2, r3
 8003062:	4b3f      	ldr	r3, [pc, #252]	; (8003160 <tftRotateChar+0x260>)
 8003064:	791b      	ldrb	r3, [r3, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa5f 	bl	8000534 <__aeabi_i2d>
 8003076:	4680      	mov	r8, r0
 8003078:	4689      	mov	r9, r1
 800307a:	ed97 0b08 	vldr	d0, [r7, #32]
 800307e:	f006 fda3 	bl	8009bc8 <sin>
 8003082:	ec53 2b10 	vmov	r2, r3, d0
 8003086:	4640      	mov	r0, r8
 8003088:	4649      	mov	r1, r9
 800308a:	f7fd fabd 	bl	8000608 <__aeabi_dmul>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4650      	mov	r0, sl
 8003094:	4659      	mov	r1, fp
 8003096:	f7fd f901 	bl	800029c <__adddf3>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4620      	mov	r0, r4
 80030a0:	4629      	mov	r1, r5
 80030a2:	f7fd f8fb 	bl	800029c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fd5b 	bl	8000b68 <__aeabi_d2iz>
 80030b2:	4603      	mov	r3, r0
 80030b4:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	b2d8      	uxtb	r0, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	b2d9      	uxtb	r1, r3
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f7ff fc01 	bl	80028d4 <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 80030d2:	7ffa      	ldrb	r2, [r7, #31]
 80030d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80030d8:	f1c3 0307 	rsb	r3, r3, #7
 80030dc:	fa42 f303 	asr.w	r3, r2, r3
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 80030e8:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <tftRotateChar+0x264>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff fc41 	bl	8002974 <tftPushColor>
 80030f2:	e008      	b.n	8003106 <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 80030f4:	4b1c      	ldr	r3, [pc, #112]	; (8003168 <tftRotateChar+0x268>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <tftRotateChar+0x26c>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fc37 	bl	8002974 <tftPushColor>
			for(i=0;i<8;i++)
 8003106:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800310a:	3301      	adds	r3, #1
 800310c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003114:	2b07      	cmp	r3, #7
 8003116:	f67f af3c 	bls.w	8002f92 <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	3301      	adds	r3, #1
 800311e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003120:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003124:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003126:	429a      	cmp	r2, r3
 8003128:	f6ff af27 	blt.w	8002f7a <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 800312c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003130:	b29a      	uxth	r2, r3
 8003132:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003134:	4413      	add	r3, r2
 8003136:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8003138:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800313c:	3301      	adds	r3, #1
 800313e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <tftRotateChar+0x260>)
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800314a:	429a      	cmp	r2, r3
 800314c:	f4ff af12 	bcc.w	8002f74 <tftRotateChar+0x74>
	}
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3738      	adds	r7, #56	; 0x38
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315c:	f3af 8000 	nop.w
 8003160:	20000240 	.word	0x20000240
 8003164:	20000024 	.word	0x20000024
 8003168:	2000024c 	.word	0x2000024c
 800316c:	2000024e 	.word	0x2000024e
 8003170:	1eb851ec 	.word	0x1eb851ec
 8003174:	3f91eb85 	.word	0x3f91eb85

08003178 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7fd f824 	bl	80001e0 <strlen>
 8003198:	4603      	mov	r3, r0
 800319a:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f113 0f02 	cmn.w	r3, #2
 80031a2:	d10a      	bne.n	80031ba <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <tftPrint+0x128>)
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <tftPrint+0x12c>)
 80031ac:	791b      	ldrb	r3, [r3, #4]
 80031ae:	4619      	mov	r1, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d10d      	bne.n	80031de <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 80031c2:	4b39      	ldr	r3, [pc, #228]	; (80032a8 <tftPrint+0x130>)
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <tftPrint+0x12c>)
 80031ca:	791b      	ldrb	r3, [r3, #4]
 80031cc:	4619      	mov	r1, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	0fda      	lsrs	r2, r3, #31
 80031d8:	4413      	add	r3, r2
 80031da:	105b      	asrs	r3, r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	e053      	b.n	800328c <tftPrint+0x114>
	{
		lettercount++;
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	3301      	adds	r3, #1
 80031e8:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d112      	bne.n	8003216 <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	60fa      	str	r2, [r7, #12]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fd87 	bl	8002d10 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 8003202:	4b28      	ldr	r3, [pc, #160]	; (80032a4 <tftPrint+0x12c>)
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	461a      	mov	r2, r3
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]
 8003214:	e00a      	b.n	800322c <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	60fa      	str	r2, [r7, #12]
 800321c:	7818      	ldrb	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	68b9      	ldr	r1, [r7, #8]
 8003228:	f7ff fe6a 	bl	8002f00 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 800322c:	f000 f8a8 	bl	8003380 <tftGetWidth>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <tftPrint+0x12c>)
 8003236:	791b      	ldrb	r3, [r3, #4]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	4293      	cmp	r3, r2
 8003244:	db1f      	blt.n	8003286 <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <tftPrint+0x12c>)
 8003250:	795b      	ldrb	r3, [r3, #5]
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 800325a:	f000 f89d 	bl	8003398 <tftGetHeight>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <tftPrint+0x12c>)
 8003264:	795b      	ldrb	r3, [r3, #5]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	429a      	cmp	r2, r3
 800326c:	dd09      	ble.n	8003282 <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 800326e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003272:	f7ff f9ef 	bl	8002654 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 8003276:	2000      	movs	r0, #0
 8003278:	f000 f818 	bl	80032ac <tftFillScreen>
				y=0; // start at top left of new Page
 800327c:	2300      	movs	r3, #0
 800327e:	607b      	str	r3, [r7, #4]
 8003280:	e001      	b.n	8003286 <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	dba7      	blt.n	80031e4 <tftPrint+0x6c>
			}

		}

	}
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2000001c 	.word	0x2000001c
 80032a4:	20000240 	.word	0x20000240
 80032a8:	2000001e 	.word	0x2000001e

080032ac <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	4603      	mov	r3, r0
 80032b4:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <tftFillScreen+0x2c>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b21a      	sxth	r2, r3
 80032bc:	4b07      	ldr	r3, [pc, #28]	; (80032dc <tftFillScreen+0x30>)
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	b219      	sxth	r1, r3
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	9300      	str	r3, [sp, #0]
 80032c6:	460b      	mov	r3, r1
 80032c8:	2100      	movs	r1, #0
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7ff fb6e 	bl	80029ac <tftFillRect>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000001c 	.word	0x2000001c
 80032dc:	2000001e 	.word	0x2000001e

080032e0 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 80032f2:	2036      	movs	r0, #54	; 0x36
 80032f4:	f7ff f9d0 	bl	8002698 <tftSendCmd>

	switch (rotation)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d836      	bhi.n	800336c <tftSetRotation+0x8c>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <tftSetRotation+0x24>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003315 	.word	0x08003315
 8003308:	08003329 	.word	0x08003329
 800330c:	0800333d 	.word	0x0800333d
 8003310:	08003351 	.word	0x08003351
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 8003314:	20c0      	movs	r0, #192	; 0xc0
 8003316:	f7ff f9d3 	bl	80026c0 <tftSendData>
		width  = ST7735_TFTWIDTH;
 800331a:	4b16      	ldr	r3, [pc, #88]	; (8003374 <tftSetRotation+0x94>)
 800331c:	2280      	movs	r2, #128	; 0x80
 800331e:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8003320:	4b15      	ldr	r3, [pc, #84]	; (8003378 <tftSetRotation+0x98>)
 8003322:	22a0      	movs	r2, #160	; 0xa0
 8003324:	801a      	strh	r2, [r3, #0]
		break;
 8003326:	e01d      	b.n	8003364 <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8003328:	20a0      	movs	r0, #160	; 0xa0
 800332a:	f7ff f9c9 	bl	80026c0 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <tftSetRotation+0x94>)
 8003330:	22a0      	movs	r2, #160	; 0xa0
 8003332:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <tftSetRotation+0x98>)
 8003336:	2280      	movs	r2, #128	; 0x80
 8003338:	801a      	strh	r2, [r3, #0]
		   break;
 800333a:	e013      	b.n	8003364 <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 800333c:	2000      	movs	r0, #0
 800333e:	f7ff f9bf 	bl	80026c0 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 8003342:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <tftSetRotation+0x94>)
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <tftSetRotation+0x98>)
 800334a:	22a0      	movs	r2, #160	; 0xa0
 800334c:	801a      	strh	r2, [r3, #0]
		   break;
 800334e:	e009      	b.n	8003364 <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8003350:	2060      	movs	r0, #96	; 0x60
 8003352:	f7ff f9b5 	bl	80026c0 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <tftSetRotation+0x94>)
 8003358:	22a0      	movs	r2, #160	; 0xa0
 800335a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <tftSetRotation+0x98>)
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	801a      	strh	r2, [r3, #0]
		   break;
 8003362:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <tftSetRotation+0x9c>)
 8003366:	79fb      	ldrb	r3, [r7, #7]
 8003368:	7013      	strb	r3, [r2, #0]
 800336a:	e000      	b.n	800336e <tftSetRotation+0x8e>
		   return;
 800336c:	bf00      	nop
}
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000001c 	.word	0x2000001c
 8003378:	2000001e 	.word	0x2000001e
 800337c:	2000023c 	.word	0x2000023c

08003380 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <tftGetWidth+0x14>)
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	b2db      	uxtb	r3, r3
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	2000001c 	.word	0x2000001c

08003398 <tftGetHeight>:


uint8_t tftGetHeight()
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 800339c:	4b03      	ldr	r3, [pc, #12]	; (80033ac <tftGetHeight+0x14>)
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	2000001e 	.word	0x2000001e

080033b0 <initTOFSensorData>:
//--------------------- SENSOR FUNCTIONS ------------------------

// Function to initialize the TOF sensor
// Initializes the sensor with given address, I2C interface, ranging profile, and measurement range.
void initTOFSensorData(TOFSensor_t* sensor, I2C_TypeDef *i2c_tof, uint16_t TOF_address_used, uint16_t Ranging_Profiles_t, uint16_t measuredRange)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	4611      	mov	r1, r2
 80033bc:	461a      	mov	r2, r3
 80033be:	460b      	mov	r3, r1
 80033c0:	80fb      	strh	r3, [r7, #6]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80bb      	strh	r3, [r7, #4]
	sensor->i2c_tof = i2c_tof;                    // Set the I2C interface (e.g., I2C1, I2C2)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	601a      	str	r2, [r3, #0]
	sensor->TOF_address_used = TOF_address_used;  // Set the TOF sensor address
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	88fa      	ldrh	r2, [r7, #6]
 80033d0:	809a      	strh	r2, [r3, #4]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the ranging profile (measurement mode)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	88ba      	ldrh	r2, [r7, #4]
 80033d6:	80da      	strh	r2, [r3, #6]
    sensor->measuredRange = measuredRange;        // Set the maximum measurable range
 80033d8:	8b3a      	ldrh	r2, [r7, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	60da      	str	r2, [r3, #12]
    sensor->distanceFromTOF = 0;                  // Initialize the measured distance to zero
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	811a      	strh	r2, [r3, #8]
    sensor->enableTOFSensor = false;              // Default is to keep the sensor disabled
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	741a      	strb	r2, [r3, #16]
}
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <configTOFSensor>:

// Function to configure the TOF sensor
// Configures the sensor's ranging profile and whether the sensor should be enabled or disabled.
void configTOFSensor(TOFSensor_t* sensor, uint16_t Ranging_Profiles_t, bool enable) {
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
 8003402:	4613      	mov	r3, r2
 8003404:	707b      	strb	r3, [r7, #1]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the new ranging profile
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	887a      	ldrh	r2, [r7, #2]
 800340a:	80da      	strh	r2, [r3, #6]
    sensor->enableTOFSensor = enable;                  // Enable or disable the TOF sensor
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	787a      	ldrb	r2, [r7, #1]
 8003410:	741a      	strb	r2, [r3, #16]
    if(sensor->enableTOFSensor == true)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7c1b      	ldrb	r3, [r3, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <configTOFSensor+0x2a>
    {
    	TOF_set_ranging_profile(sensor);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f001 fba4 	bl	8004b68 <TOF_set_ranging_profile>
    }
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <TOF_configure_interrupt>:
 *
 *
 * @returns:     bool: true if the configuration is successful, otherwise false.
 */
bool TOF_configure_interrupt(TOFSensor_t* TOFSENS)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	889b      	ldrh	r3, [r3, #4]
 8003434:	b25a      	sxtb	r2, r3
 8003436:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <TOF_configure_interrupt+0xc4>)
 8003438:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <TOF_configure_interrupt+0xc8>)
 8003440:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

	/* Interrupt on new sample ready */
	i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8003442:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <TOF_configure_interrupt+0xc8>)
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <TOF_configure_interrupt+0xc4>)
 8003448:	f993 3000 	ldrsb.w	r3, [r3]
 800344c:	b2d9      	uxtb	r1, r3
 800344e:	2304      	movs	r3, #4
 8003450:	220a      	movs	r2, #10
 8003452:	f002 fd9d 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003456:	4603      	mov	r3, r0
 8003458:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 800345a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <TOF_configure_interrupt+0x3e>
    {
        return false;
 8003462:	2300      	movs	r3, #0
 8003464:	e03e      	b.n	80034e4 <TOF_configure_interrupt+0xbc>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high[1];
    i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high, 1);
 8003466:	4b22      	ldr	r3, [pc, #136]	; (80034f0 <TOF_configure_interrupt+0xc8>)
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <TOF_configure_interrupt+0xc4>)
 800346c:	f993 3000 	ldrsb.w	r3, [r3]
 8003470:	b2d9      	uxtb	r1, r3
 8003472:	f107 030c 	add.w	r3, r7, #12
 8003476:	2201      	movs	r2, #1
 8003478:	9200      	str	r2, [sp, #0]
 800347a:	2284      	movs	r2, #132	; 0x84
 800347c:	f002 fe42 	bl	8006104 <i2cBurstRegRead>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 8003484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <TOF_configure_interrupt+0x68>
	{
		return false;
 800348c:	2300      	movs	r3, #0
 800348e:	e029      	b.n	80034e4 <TOF_configure_interrupt+0xbc>
	}

    gpio_hv_mux_active_high[0] &= ~0x10;
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	b2db      	uxtb	r3, r3
 8003498:	733b      	strb	r3, [r7, #12]
    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH,  gpio_hv_mux_active_high[0]);
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <TOF_configure_interrupt+0xc8>)
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <TOF_configure_interrupt+0xc4>)
 80034a0:	f993 3000 	ldrsb.w	r3, [r3]
 80034a4:	b2d9      	uxtb	r1, r3
 80034a6:	7b3b      	ldrb	r3, [r7, #12]
 80034a8:	2284      	movs	r2, #132	; 0x84
 80034aa:	f002 fd71 	bl	8005f90 <i2cSendByteToSlaveReg>
 80034ae:	4603      	mov	r3, r0
 80034b0:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80034b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <TOF_configure_interrupt+0x96>
	{
		return false;
 80034ba:	2300      	movs	r3, #0
 80034bc:	e012      	b.n	80034e4 <TOF_configure_interrupt+0xbc>
	}

    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 80034be:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <TOF_configure_interrupt+0xc8>)
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <TOF_configure_interrupt+0xc4>)
 80034c4:	f993 3000 	ldrsb.w	r3, [r3]
 80034c8:	b2d9      	uxtb	r1, r3
 80034ca:	2301      	movs	r3, #1
 80034cc:	220b      	movs	r2, #11
 80034ce:	f002 fd5f 	bl	8005f90 <i2cSendByteToSlaveReg>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]
	if (i2c_return != I2C_OK)
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <TOF_configure_interrupt+0xba>
	{
		return false;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <TOF_configure_interrupt+0xbc>
	}

    return true;
 80034e2:	2301      	movs	r3, #1
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000026 	.word	0x20000026
 80034f0:	20000250 	.word	0x20000250

080034f4 <TOF_init_address>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the correct TOF sensor is connected and communication is successful, otherwise false.
 */
bool TOF_init_address(TOFSensor_t* TOFSENS)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	889b      	ldrh	r3, [r3, #4]
 8003500:	b25a      	sxtb	r2, r3
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <TOF_init_address+0x58>)
 8003504:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <TOF_init_address+0x5c>)
 800350c:	6013      	str	r3, [r2, #0]
	//set i2c clock speed
	//i2cSetClkSpd(TOF_i2c, I2C_CLOCK_400);

	//check correct device by reading the ID
	uint8_t device_id[1];
	I2C_RETURN_CODE_t i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_IDENTIFICATION_MODEL_ID, device_id, 1);
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <TOF_init_address+0x5c>)
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	4b0e      	ldr	r3, [pc, #56]	; (800354c <TOF_init_address+0x58>)
 8003514:	f993 3000 	ldrsb.w	r3, [r3]
 8003518:	b2d9      	uxtb	r1, r3
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	2201      	movs	r2, #1
 8003520:	9200      	str	r2, [sp, #0]
 8003522:	22c0      	movs	r2, #192	; 0xc0
 8003524:	f002 fdee 	bl	8006104 <i2cBurstRegRead>
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]

	if (i2c_return != I2C_OK)
 800352c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <TOF_init_address+0x44>
	{
		// returns false, if i2cBurstRegRead was not successful
		return false;
 8003534:	2300      	movs	r3, #0
 8003536:	e005      	b.n	8003544 <TOF_init_address+0x50>
	}

	//returns true, if correct TOF sensor is connected, otherwise false
	return (device_id[0] == TOF_VL53L0X_EXPECTED_DEVICE_ID);
 8003538:	7b3b      	ldrb	r3, [r7, #12]
 800353a:	2bee      	cmp	r3, #238	; 0xee
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000026 	.word	0x20000026
 8003550:	20000250 	.word	0x20000250

08003554 <TOF_data_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the sensor is successfully initialized, otherwise false.
 */
bool TOF_data_init(TOFSensor_t* TOFSENS)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	889b      	ldrh	r3, [r3, #4]
 8003560:	b25a      	sxtb	r2, r3
 8003562:	4b5a      	ldr	r3, [pc, #360]	; (80036cc <TOF_data_init+0x178>)
 8003564:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a59      	ldr	r2, [pc, #356]	; (80036d0 <TOF_data_init+0x17c>)
 800356c:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = false;
 800356e:	2300      	movs	r3, #0
 8003570:	73fb      	strb	r3, [r7, #15]

	/* Set 2v8 mode */
	uint8_t vhv_config_scl_sda = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	73bb      	strb	r3, [r7, #14]
	success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda);
 8003576:	4b56      	ldr	r3, [pc, #344]	; (80036d0 <TOF_data_init+0x17c>)
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	4b54      	ldr	r3, [pc, #336]	; (80036cc <TOF_data_init+0x178>)
 800357c:	f993 3000 	ldrsb.w	r3, [r3]
 8003580:	b2d9      	uxtb	r1, r3
 8003582:	f107 030e 	add.w	r3, r7, #14
 8003586:	2289      	movs	r2, #137	; 0x89
 8003588:	f002 fd50 	bl	800602c <i2cReadByteFromSlaveReg>
 800358c:	4603      	mov	r3, r0
 800358e:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 8003590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <TOF_data_init+0x48>
	{
		return false;
 8003598:	2300      	movs	r3, #0
 800359a:	e092      	b.n	80036c2 <TOF_data_init+0x16e>
	}

	vhv_config_scl_sda |= 0x01;
 800359c:	7bbb      	ldrb	r3, [r7, #14]
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	73bb      	strb	r3, [r7, #14]

	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda);
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <TOF_data_init+0x17c>)
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	4b48      	ldr	r3, [pc, #288]	; (80036cc <TOF_data_init+0x178>)
 80035ac:	f993 3000 	ldrsb.w	r3, [r3]
 80035b0:	b2d9      	uxtb	r1, r3
 80035b2:	7bbb      	ldrb	r3, [r7, #14]
 80035b4:	2289      	movs	r2, #137	; 0x89
 80035b6:	f002 fceb 	bl	8005f90 <i2cSendByteToSlaveReg>
 80035ba:	4603      	mov	r3, r0
 80035bc:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 80035be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <TOF_data_init+0x76>
	{
		return false;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e07b      	b.n	80036c2 <TOF_data_init+0x16e>
	}

	/* Set I2C standard mode */
	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_I2C_MODE, 0x00);
 80035ca:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <TOF_data_init+0x17c>)
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	4b3f      	ldr	r3, [pc, #252]	; (80036cc <TOF_data_init+0x178>)
 80035d0:	f993 3000 	ldrsb.w	r3, [r3]
 80035d4:	b2d9      	uxtb	r1, r3
 80035d6:	2300      	movs	r3, #0
 80035d8:	2288      	movs	r2, #136	; 0x88
 80035da:	f002 fcd9 	bl	8005f90 <i2cSendByteToSlaveReg>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <TOF_data_init+0x17c>)
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	4b39      	ldr	r3, [pc, #228]	; (80036cc <TOF_data_init+0x178>)
 80035e8:	f993 3000 	ldrsb.w	r3, [r3]
 80035ec:	b2d9      	uxtb	r1, r3
 80035ee:	2301      	movs	r3, #1
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	f002 fccd 	bl	8005f90 <i2cSendByteToSlaveReg>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	4013      	ands	r3, r2
 80035fe:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003600:	4b33      	ldr	r3, [pc, #204]	; (80036d0 <TOF_data_init+0x17c>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4b31      	ldr	r3, [pc, #196]	; (80036cc <TOF_data_init+0x178>)
 8003606:	f993 3000 	ldrsb.w	r3, [r3]
 800360a:	b2d9      	uxtb	r1, r3
 800360c:	2301      	movs	r3, #1
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	f002 fcbe 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	7bfb      	ldrb	r3, [r7, #15]
 800361a:	4013      	ands	r3, r2
 800361c:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 800361e:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <TOF_data_init+0x17c>)
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <TOF_data_init+0x178>)
 8003624:	f993 3000 	ldrsb.w	r3, [r3]
 8003628:	b2d9      	uxtb	r1, r3
 800362a:	2300      	movs	r3, #0
 800362c:	2200      	movs	r2, #0
 800362e:	f002 fcaf 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	7bfb      	ldrb	r3, [r7, #15]
 8003638:	4013      	ands	r3, r2
 800363a:	73fb      	strb	r3, [r7, #15]
	success &= i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, &TOF_stop_variable);
 800363c:	4b24      	ldr	r3, [pc, #144]	; (80036d0 <TOF_data_init+0x17c>)
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	4b22      	ldr	r3, [pc, #136]	; (80036cc <TOF_data_init+0x178>)
 8003642:	f993 3000 	ldrsb.w	r3, [r3]
 8003646:	b2d9      	uxtb	r1, r3
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <TOF_data_init+0x180>)
 800364a:	2291      	movs	r2, #145	; 0x91
 800364c:	f002 fcee 	bl	800602c <i2cReadByteFromSlaveReg>
 8003650:	4603      	mov	r3, r0
 8003652:	461a      	mov	r2, r3
 8003654:	7bfb      	ldrb	r3, [r7, #15]
 8003656:	4013      	ands	r3, r2
 8003658:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <TOF_data_init+0x17c>)
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <TOF_data_init+0x178>)
 8003660:	f993 3000 	ldrsb.w	r3, [r3]
 8003664:	b2d9      	uxtb	r1, r3
 8003666:	2301      	movs	r3, #1
 8003668:	2200      	movs	r2, #0
 800366a:	f002 fc91 	bl	8005f90 <i2cSendByteToSlaveReg>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	4013      	ands	r3, r2
 8003676:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <TOF_data_init+0x17c>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <TOF_data_init+0x178>)
 800367e:	f993 3000 	ldrsb.w	r3, [r3]
 8003682:	b2d9      	uxtb	r1, r3
 8003684:	2300      	movs	r3, #0
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f002 fc82 	bl	8005f90 <i2cSendByteToSlaveReg>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	4013      	ands	r3, r2
 8003694:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8003696:	4b0e      	ldr	r3, [pc, #56]	; (80036d0 <TOF_data_init+0x17c>)
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <TOF_data_init+0x178>)
 800369c:	f993 3000 	ldrsb.w	r3, [r3]
 80036a0:	b2d9      	uxtb	r1, r3
 80036a2:	2300      	movs	r3, #0
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	f002 fc73 	bl	8005f90 <i2cSendByteToSlaveReg>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	4013      	ands	r3, r2
 80036b2:	73fb      	strb	r3, [r7, #15]

	if (success != I2C_OK)
 80036b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <TOF_data_init+0x16c>
	{
		return false;
 80036bc:	2300      	movs	r3, #0
 80036be:	e000      	b.n	80036c2 <TOF_data_init+0x16e>
	}

	return true;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	20000026 	.word	0x20000026
 80036d0:	20000250 	.word	0x20000250
 80036d4:	20000254 	.word	0x20000254

080036d8 <TOF_get_spad_info_from_nvm>:
 * 				bool * type_is_aperture						indicating whether the SPADs are of the aperture type.
 *
 * @returns:    bool: true if the SPAD information is successfully retrieved, otherwise false.
 */
bool TOF_get_spad_info_from_nvm(TOFSensor_t* TOFSENS, uint8_t * count, bool * type_is_aperture)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af02      	add	r7, sp, #8
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	889b      	ldrh	r3, [r3, #4]
 80036e8:	b25a      	sxtb	r2, r3
 80036ea:	4b8a      	ldr	r3, [pc, #552]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80036ec:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a89      	ldr	r2, [pc, #548]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80036f4:	6013      	str	r3, [r2, #0]

	uint8_t tmp;

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80036f6:	4b88      	ldr	r3, [pc, #544]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	4b86      	ldr	r3, [pc, #536]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80036fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003700:	b2d9      	uxtb	r1, r3
 8003702:	2301      	movs	r3, #1
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	f002 fc43 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 800370a:	4b83      	ldr	r3, [pc, #524]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	4b81      	ldr	r3, [pc, #516]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003710:	f993 3000 	ldrsb.w	r3, [r3]
 8003714:	b2d9      	uxtb	r1, r3
 8003716:	2301      	movs	r3, #1
 8003718:	22ff      	movs	r2, #255	; 0xff
 800371a:	f002 fc39 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 800371e:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003720:	6818      	ldr	r0, [r3, #0]
 8003722:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003724:	f993 3000 	ldrsb.w	r3, [r3]
 8003728:	b2d9      	uxtb	r1, r3
 800372a:	2300      	movs	r3, #0
 800372c:	2200      	movs	r2, #0
 800372e:	f002 fc2f 	bl	8005f90 <i2cSendByteToSlaveReg>

	uint8_t data = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 8003736:	4b78      	ldr	r3, [pc, #480]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 800373c:	f993 3000 	ldrsb.w	r3, [r3]
 8003740:	b2d9      	uxtb	r1, r3
 8003742:	2306      	movs	r3, #6
 8003744:	22ff      	movs	r2, #255	; 0xff
 8003746:	f002 fc23 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 800374a:	4b73      	ldr	r3, [pc, #460]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 800374c:	6818      	ldr	r0, [r3, #0]
 800374e:	4b71      	ldr	r3, [pc, #452]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003750:	f993 3000 	ldrsb.w	r3, [r3]
 8003754:	b2d9      	uxtb	r1, r3
 8003756:	f107 0315 	add.w	r3, r7, #21
 800375a:	2283      	movs	r2, #131	; 0x83
 800375c:	f002 fc66 	bl	800602c <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data | 0x04);
 8003760:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003766:	f993 3000 	ldrsb.w	r3, [r3]
 800376a:	b2d9      	uxtb	r1, r3
 800376c:	7d7b      	ldrb	r3, [r7, #21]
 800376e:	f043 0304 	orr.w	r3, r3, #4
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2283      	movs	r2, #131	; 0x83
 8003776:	f002 fc0b 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x07);
 800377a:	4b67      	ldr	r3, [pc, #412]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003780:	f993 3000 	ldrsb.w	r3, [r3]
 8003784:	b2d9      	uxtb	r1, r3
 8003786:	2307      	movs	r3, #7
 8003788:	22ff      	movs	r2, #255	; 0xff
 800378a:	f002 fc01 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x01);
 800378e:	4b62      	ldr	r3, [pc, #392]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	4b60      	ldr	r3, [pc, #384]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003794:	f993 3000 	ldrsb.w	r3, [r3]
 8003798:	b2d9      	uxtb	r1, r3
 800379a:	2301      	movs	r3, #1
 800379c:	2281      	movs	r2, #129	; 0x81
 800379e:	f002 fbf7 	bl	8005f90 <i2cSendByteToSlaveReg>
	//TF01 i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	4b5b      	ldr	r3, [pc, #364]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80037a8:	f993 3000 	ldrsb.w	r3, [r3]
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	2301      	movs	r3, #1
 80037b0:	2280      	movs	r2, #128	; 0x80
 80037b2:	f002 fbed 	bl	8005f90 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x94, 0x6b);
 80037b6:	4b58      	ldr	r3, [pc, #352]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	4b56      	ldr	r3, [pc, #344]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80037bc:	f993 3000 	ldrsb.w	r3, [r3]
 80037c0:	b2d9      	uxtb	r1, r3
 80037c2:	236b      	movs	r3, #107	; 0x6b
 80037c4:	2294      	movs	r2, #148	; 0x94
 80037c6:	f002 fbe3 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x00);
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	4b51      	ldr	r3, [pc, #324]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80037d0:	f993 3000 	ldrsb.w	r3, [r3]
 80037d4:	b2d9      	uxtb	r1, r3
 80037d6:	2300      	movs	r3, #0
 80037d8:	2283      	movs	r2, #131	; 0x83
 80037da:	f002 fbd9 	bl	8005f90 <i2cSendByteToSlaveReg>

	data = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	757b      	strb	r3, [r7, #21]
	I2C_RETURN_CODE_t i2c_return;

	do
		{
			i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_INTERNAL_CONFIG_0x83, &data, 1);
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80037e8:	f993 3000 	ldrsb.w	r3, [r3]
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	f107 0315 	add.w	r3, r7, #21
 80037f2:	2201      	movs	r2, #1
 80037f4:	9200      	str	r2, [sp, #0]
 80037f6:	2283      	movs	r2, #131	; 0x83
 80037f8:	f002 fc84 	bl	8006104 <i2cBurstRegRead>
 80037fc:	4603      	mov	r3, r0
 80037fe:	75fb      	strb	r3, [r7, #23]
		} while (i2c_return == I2C_OK && data == 0x00);
 8003800:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <TOF_get_spad_info_from_nvm+0x136>
 8003808:	7d7b      	ldrb	r3, [r7, #21]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0e9      	beq.n	80037e2 <TOF_get_spad_info_from_nvm+0x10a>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);
 800380e:	4b42      	ldr	r3, [pc, #264]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	4b40      	ldr	r3, [pc, #256]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003814:	f993 3000 	ldrsb.w	r3, [r3]
 8003818:	b2d9      	uxtb	r1, r3
 800381a:	2301      	movs	r3, #1
 800381c:	2283      	movs	r2, #131	; 0x83
 800381e:	f002 fbb7 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, 0x92, &tmp);
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003828:	f993 3000 	ldrsb.w	r3, [r3]
 800382c:	b2d9      	uxtb	r1, r3
 800382e:	f107 0316 	add.w	r3, r7, #22
 8003832:	2292      	movs	r2, #146	; 0x92
 8003834:	f002 fbfa 	bl	800602c <i2cReadByteFromSlaveReg>

	*count = tmp & 0x7f;
 8003838:	7dbb      	ldrb	r3, [r7, #22]
 800383a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 8003844:	7dbb      	ldrb	r3, [r7, #22]
 8003846:	09db      	lsrs	r3, r3, #7
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2301      	movne	r3, #1
 8003854:	2300      	moveq	r3, #0
 8003856:	b2da      	uxtb	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	701a      	strb	r2, [r3, #0]

	data = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x00);
 8003860:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 8003866:	f993 3000 	ldrsb.w	r3, [r3]
 800386a:	b2d9      	uxtb	r1, r3
 800386c:	2300      	movs	r3, #0
 800386e:	2281      	movs	r2, #129	; 0x81
 8003870:	f002 fb8e 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 800387a:	f993 3000 	ldrsb.w	r3, [r3]
 800387e:	b2d9      	uxtb	r1, r3
 8003880:	2306      	movs	r3, #6
 8003882:	22ff      	movs	r2, #255	; 0xff
 8003884:	f002 fb84 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 800388e:	f993 3000 	ldrsb.w	r3, [r3]
 8003892:	b2d9      	uxtb	r1, r3
 8003894:	f107 0315 	add.w	r3, r7, #21
 8003898:	2283      	movs	r2, #131	; 0x83
 800389a:	f002 fbc7 	bl	800602c <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data  & ~0x04);
 800389e:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80038a4:	f993 3000 	ldrsb.w	r3, [r3]
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	7d7b      	ldrb	r3, [r7, #21]
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2283      	movs	r2, #131	; 0x83
 80038b4:	f002 fb6c 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80038be:	f993 3000 	ldrsb.w	r3, [r3]
 80038c2:	b2d9      	uxtb	r1, r3
 80038c4:	2301      	movs	r3, #1
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f002 fb62 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80038d2:	f993 3000 	ldrsb.w	r3, [r3]
 80038d6:	b2d9      	uxtb	r1, r3
 80038d8:	2301      	movs	r3, #1
 80038da:	2200      	movs	r2, #0
 80038dc:	f002 fb58 	bl	8005f90 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80038e6:	f993 3000 	ldrsb.w	r3, [r3]
 80038ea:	b2d9      	uxtb	r1, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	f002 fb4e 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80038f4:	4b08      	ldr	r3, [pc, #32]	; (8003918 <TOF_get_spad_info_from_nvm+0x240>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <TOF_get_spad_info_from_nvm+0x23c>)
 80038fa:	f993 3000 	ldrsb.w	r3, [r3]
 80038fe:	b2d9      	uxtb	r1, r3
 8003900:	2300      	movs	r3, #0
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	f002 fb44 	bl	8005f90 <i2cSendByteToSlaveReg>

	return true;
 8003908:	2301      	movs	r3, #1
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000026 	.word	0x20000026
 8003918:	20000250 	.word	0x20000250

0800391c <TOF_set_spads_from_nvm>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the SPAD configuration is successful, otherwise false.
 */
bool TOF_set_spads_from_nvm(TOFSensor_t* TOFSENS)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af02      	add	r7, sp, #8
 8003922:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	889b      	ldrh	r3, [r3, #4]
 8003928:	b25a      	sxtb	r2, r3
 800392a:	4b6f      	ldr	r3, [pc, #444]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 800392c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003934:	6013      	str	r3, [r2, #0]

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!TOF_get_spad_info_from_nvm(TOFSENS, &spad_count, &spad_type_is_aperture))
 8003936:	f107 0213 	add.w	r2, r7, #19
 800393a:	f107 0314 	add.w	r3, r7, #20
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fec9 	bl	80036d8 <TOF_get_spad_info_from_nvm>
 8003946:	4603      	mov	r3, r0
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <TOF_set_spads_from_nvm+0x3a>
	{
		return false;
 8003952:	2300      	movs	r3, #0
 8003954:	e0c4      	b.n	8003ae0 <TOF_set_spads_from_nvm+0x1c4>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8003956:	4b65      	ldr	r3, [pc, #404]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 800395c:	f993 3000 	ldrsb.w	r3, [r3]
 8003960:	b2d9      	uxtb	r1, r3
 8003962:	f107 030c 	add.w	r3, r7, #12
 8003966:	2206      	movs	r2, #6
 8003968:	9200      	str	r2, [sp, #0]
 800396a:	22b0      	movs	r2, #176	; 0xb0
 800396c:	f002 fbca 	bl	8006104 <i2cBurstRegRead>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003970:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003976:	f993 3000 	ldrsb.w	r3, [r3]
 800397a:	b2d9      	uxtb	r1, r3
 800397c:	2301      	movs	r3, #1
 800397e:	22ff      	movs	r2, #255	; 0xff
 8003980:	f002 fb06 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	4b57      	ldr	r3, [pc, #348]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 800398a:	f993 3000 	ldrsb.w	r3, [r3]
 800398e:	b2d9      	uxtb	r1, r3
 8003990:	2300      	movs	r3, #0
 8003992:	224f      	movs	r2, #79	; 0x4f
 8003994:	f002 fafc 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8003998:	4b54      	ldr	r3, [pc, #336]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4b52      	ldr	r3, [pc, #328]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 800399e:	f993 3000 	ldrsb.w	r3, [r3]
 80039a2:	b2d9      	uxtb	r1, r3
 80039a4:	232c      	movs	r3, #44	; 0x2c
 80039a6:	224e      	movs	r2, #78	; 0x4e
 80039a8:	f002 faf2 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 80039ac:	4b4f      	ldr	r3, [pc, #316]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	4b4d      	ldr	r3, [pc, #308]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 80039b2:	f993 3000 	ldrsb.w	r3, [r3]
 80039b6:	b2d9      	uxtb	r1, r3
 80039b8:	2300      	movs	r3, #0
 80039ba:	22ff      	movs	r2, #255	; 0xff
 80039bc:	f002 fae8 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 80039c0:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 80039c2:	6818      	ldr	r0, [r3, #0]
 80039c4:	4b48      	ldr	r3, [pc, #288]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 80039c6:	f993 3000 	ldrsb.w	r3, [r3]
 80039ca:	b2d9      	uxtb	r1, r3
 80039cc:	23b4      	movs	r3, #180	; 0xb4
 80039ce:	22b6      	movs	r2, #182	; 0xb6
 80039d0:	f002 fade 	bl	8005f90 <i2cSendByteToSlaveReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <TOF_set_spads_from_nvm+0xc2>
 80039da:	230c      	movs	r3, #12
 80039dc:	e000      	b.n	80039e0 <TOF_set_spads_from_nvm+0xc4>
 80039de:	2300      	movs	r3, #0
 80039e0:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 80039e6:	2300      	movs	r3, #0
 80039e8:	75bb      	strb	r3, [r7, #22]
 80039ea:	e039      	b.n	8003a60 <TOF_set_spads_from_nvm+0x144>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 80039ec:	7dba      	ldrb	r2, [r7, #22]
 80039ee:	7d7b      	ldrb	r3, [r7, #21]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d303      	bcc.n	80039fc <TOF_set_spads_from_nvm+0xe0>
 80039f4:	7d3b      	ldrb	r3, [r7, #20]
 80039f6:	7dfa      	ldrb	r2, [r7, #23]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d11a      	bne.n	8003a32 <TOF_set_spads_from_nvm+0x116>
		{
		// This bit is lower than the first one that should be enabled, or
		// (reference_spad_count) bits have already been enabled, so zero this bit
		ref_spad_map[i / 8] &= ~(1 << (i % 8));
 80039fc:	7dbb      	ldrb	r3, [r7, #22]
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	b2d8      	uxtb	r0, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	3318      	adds	r3, #24
 8003a06:	443b      	add	r3, r7
 8003a08:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a0c:	b25a      	sxtb	r2, r3
 8003a0e:	7dbb      	ldrb	r3, [r7, #22]
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	b25b      	sxtb	r3, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	b25b      	sxtb	r3, r3
 8003a20:	4013      	ands	r3, r2
 8003a22:	b25a      	sxtb	r2, r3
 8003a24:	4603      	mov	r3, r0
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	3318      	adds	r3, #24
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003a30:	e013      	b.n	8003a5a <TOF_set_spads_from_nvm+0x13e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	08db      	lsrs	r3, r3, #3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	3318      	adds	r3, #24
 8003a3a:	443b      	add	r3, r7
 8003a3c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a40:	461a      	mov	r2, r3
 8003a42:	7dbb      	ldrb	r3, [r7, #22]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	fa42 f303 	asr.w	r3, r2, r3
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <TOF_set_spads_from_nvm+0x13e>
		{
		spads_enabled++;
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	3301      	adds	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 8003a5a:	7dbb      	ldrb	r3, [r7, #22]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	75bb      	strb	r3, [r7, #22]
 8003a60:	7dbb      	ldrb	r3, [r7, #22]
 8003a62:	2b2f      	cmp	r3, #47	; 0x2f
 8003a64:	d9c2      	bls.n	80039ec <TOF_set_spads_from_nvm+0xd0>
		}
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map[0]);
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003a6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003a70:	b2d9      	uxtb	r1, r3
 8003a72:	7b3b      	ldrb	r3, [r7, #12]
 8003a74:	22b0      	movs	r2, #176	; 0xb0
 8003a76:	f002 fa8b 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 1, ref_spad_map[1]);
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003a80:	f993 3000 	ldrsb.w	r3, [r3]
 8003a84:	b2d9      	uxtb	r1, r3
 8003a86:	7b7b      	ldrb	r3, [r7, #13]
 8003a88:	22b1      	movs	r2, #177	; 0xb1
 8003a8a:	f002 fa81 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 2, ref_spad_map[2]);
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003a94:	f993 3000 	ldrsb.w	r3, [r3]
 8003a98:	b2d9      	uxtb	r1, r3
 8003a9a:	7bbb      	ldrb	r3, [r7, #14]
 8003a9c:	22b2      	movs	r2, #178	; 0xb2
 8003a9e:	f002 fa77 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 3, ref_spad_map[3]);
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8003aac:	b2d9      	uxtb	r1, r3
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	22b3      	movs	r2, #179	; 0xb3
 8003ab2:	f002 fa6d 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 4, ref_spad_map[4]);
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003abc:	f993 3000 	ldrsb.w	r3, [r3]
 8003ac0:	b2d9      	uxtb	r1, r3
 8003ac2:	7c3b      	ldrb	r3, [r7, #16]
 8003ac4:	22b4      	movs	r2, #180	; 0xb4
 8003ac6:	f002 fa63 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 5, ref_spad_map[5]);
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <TOF_set_spads_from_nvm+0x1d0>)
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <TOF_set_spads_from_nvm+0x1cc>)
 8003ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ad4:	b2d9      	uxtb	r1, r3
 8003ad6:	7c7b      	ldrb	r3, [r7, #17]
 8003ad8:	22b5      	movs	r2, #181	; 0xb5
 8003ada:	f002 fa59 	bl	8005f90 <i2cSendByteToSlaveReg>

	return true;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000026 	.word	0x20000026
 8003aec:	20000250 	.word	0x20000250

08003af0 <TOF_load_default_tuning_settings>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the tuning configuration was successful, otherwise false.
 */
bool TOF_load_default_tuning_settings(TOFSensor_t* TOFSENS)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	889b      	ldrh	r3, [r3, #4]
 8003afc:	b25a      	sxtb	r2, r3
 8003afe:	4bc6      	ldr	r3, [pc, #792]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b00:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4ac5      	ldr	r2, [pc, #788]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b08:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003b0a:	4bc4      	ldr	r3, [pc, #784]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	4bc2      	ldr	r3, [pc, #776]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b10:	f993 3000 	ldrsb.w	r3, [r3]
 8003b14:	b2d9      	uxtb	r1, r3
 8003b16:	2301      	movs	r3, #1
 8003b18:	22ff      	movs	r2, #255	; 0xff
 8003b1a:	f002 fa39 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x00);
 8003b22:	4bbe      	ldr	r3, [pc, #760]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	4bbc      	ldr	r3, [pc, #752]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b28:	f993 3000 	ldrsb.w	r3, [r3]
 8003b2c:	b2d9      	uxtb	r1, r3
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2200      	movs	r2, #0
 8003b32:	f002 fa2d 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003b36:	4603      	mov	r3, r0
 8003b38:	461a      	mov	r2, r3
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003b40:	4bb6      	ldr	r3, [pc, #728]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4bb4      	ldr	r3, [pc, #720]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b46:	f993 3000 	ldrsb.w	r3, [r3]
 8003b4a:	b2d9      	uxtb	r1, r3
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	22ff      	movs	r2, #255	; 0xff
 8003b50:	f002 fa1e 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003b54:	4603      	mov	r3, r0
 8003b56:	461a      	mov	r2, r3
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_RANGE_CONFIG, TOF_DEFAULT_0x00);
 8003b5e:	4baf      	ldr	r3, [pc, #700]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	4bad      	ldr	r3, [pc, #692]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b64:	f993 3000 	ldrsb.w	r3, [r3]
 8003b68:	b2d9      	uxtb	r1, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2209      	movs	r2, #9
 8003b6e:	f002 fa0f 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x10, TOF_DEFAULT_0x00);
 8003b7c:	4ba7      	ldr	r3, [pc, #668]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	4ba5      	ldr	r3, [pc, #660]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003b82:	f993 3000 	ldrsb.w	r3, [r3]
 8003b86:	b2d9      	uxtb	r1, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2210      	movs	r2, #16
 8003b8c:	f002 fa00 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003b90:	4603      	mov	r3, r0
 8003b92:	461a      	mov	r2, r3
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	4013      	ands	r3, r2
 8003b98:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x11, TOF_DEFAULT_0x00);
 8003b9a:	4ba0      	ldr	r3, [pc, #640]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	4b9e      	ldr	r3, [pc, #632]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003ba0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba4:	b2d9      	uxtb	r1, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2211      	movs	r2, #17
 8003baa:	f002 f9f1 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x24, TOF_DEFAULT_0x01);
 8003bb8:	4b98      	ldr	r3, [pc, #608]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	4b96      	ldr	r3, [pc, #600]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003bbe:	f993 3000 	ldrsb.w	r3, [r3]
 8003bc2:	b2d9      	uxtb	r1, r3
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f002 f9e2 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	461a      	mov	r2, r3
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x25, TOF_DEFAULT_0xFF);
 8003bd6:	4b91      	ldr	r3, [pc, #580]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	4b8f      	ldr	r3, [pc, #572]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8003be0:	b2d9      	uxtb	r1, r3
 8003be2:	23ff      	movs	r3, #255	; 0xff
 8003be4:	2225      	movs	r2, #37	; 0x25
 8003be6:	f002 f9d3 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003bea:	4603      	mov	r3, r0
 8003bec:	461a      	mov	r2, r3
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x75, TOF_DEFAULT_0x00);
 8003bf4:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	4b87      	ldr	r3, [pc, #540]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003bfa:	f993 3000 	ldrsb.w	r3, [r3]
 8003bfe:	b2d9      	uxtb	r1, r3
 8003c00:	2300      	movs	r3, #0
 8003c02:	2275      	movs	r2, #117	; 0x75
 8003c04:	f002 f9c4 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003c12:	4b82      	ldr	r3, [pc, #520]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003c14:	6818      	ldr	r0, [r3, #0]
 8003c16:	4b80      	ldr	r3, [pc, #512]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003c18:	f993 3000 	ldrsb.w	r3, [r3]
 8003c1c:	b2d9      	uxtb	r1, r3
 8003c1e:	2301      	movs	r3, #1
 8003c20:	22ff      	movs	r2, #255	; 0xff
 8003c22:	f002 f9b5 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c26:	4603      	mov	r3, r0
 8003c28:	461a      	mov	r2, r3
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, TOF_DEFAULT_0x2C);
 8003c30:	4b7a      	ldr	r3, [pc, #488]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4b78      	ldr	r3, [pc, #480]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003c36:	f993 3000 	ldrsb.w	r3, [r3]
 8003c3a:	b2d9      	uxtb	r1, r3
 8003c3c:	232c      	movs	r3, #44	; 0x2c
 8003c3e:	224e      	movs	r2, #78	; 0x4e
 8003c40:	f002 f9a6 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x00);
 8003c4e:	4b73      	ldr	r3, [pc, #460]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003c54:	f993 3000 	ldrsb.w	r3, [r3]
 8003c58:	b2d9      	uxtb	r1, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2248      	movs	r2, #72	; 0x48
 8003c5e:	f002 f997 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c62:	4603      	mov	r3, r0
 8003c64:	461a      	mov	r2, r3
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x20);
 8003c6c:	4b6b      	ldr	r3, [pc, #428]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003c72:	f993 3000 	ldrsb.w	r3, [r3]
 8003c76:	b2d9      	uxtb	r1, r3
 8003c78:	2320      	movs	r3, #32
 8003c7a:	2230      	movs	r2, #48	; 0x30
 8003c7c:	f002 f988 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c80:	4603      	mov	r3, r0
 8003c82:	461a      	mov	r2, r3
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	4013      	ands	r3, r2
 8003c88:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003c8a:	4b64      	ldr	r3, [pc, #400]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	4b62      	ldr	r3, [pc, #392]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003c90:	f993 3000 	ldrsb.w	r3, [r3]
 8003c94:	b2d9      	uxtb	r1, r3
 8003c96:	2300      	movs	r3, #0
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	f002 f979 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x09);
 8003ca8:	4b5c      	ldr	r3, [pc, #368]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	4b5a      	ldr	r3, [pc, #360]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003cae:	f993 3000 	ldrsb.w	r3, [r3]
 8003cb2:	b2d9      	uxtb	r1, r3
 8003cb4:	2309      	movs	r3, #9
 8003cb6:	2230      	movs	r2, #48	; 0x30
 8003cb8:	f002 f96a 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x54, TOF_DEFAULT_0x00);
 8003cc6:	4b55      	ldr	r3, [pc, #340]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	4b53      	ldr	r3, [pc, #332]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8003cd0:	b2d9      	uxtb	r1, r3
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	2254      	movs	r2, #84	; 0x54
 8003cd6:	f002 f95b 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	461a      	mov	r2, r3
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 8003ce4:	4b4d      	ldr	r3, [pc, #308]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003cea:	f993 3000 	ldrsb.w	r3, [r3]
 8003cee:	b2d9      	uxtb	r1, r3
 8003cf0:	2304      	movs	r3, #4
 8003cf2:	2231      	movs	r2, #49	; 0x31
 8003cf4:	f002 f94c 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_VCSEL_WIDTH, TOF_DEFAULT_0x03);
 8003d02:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d08:	f993 3000 	ldrsb.w	r3, [r3]
 8003d0c:	b2d9      	uxtb	r1, r3
 8003d0e:	2303      	movs	r3, #3
 8003d10:	2232      	movs	r2, #50	; 0x32
 8003d12:	f002 f93d 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x83);
 8003d20:	4b3e      	ldr	r3, [pc, #248]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d26:	f993 3000 	ldrsb.w	r3, [r3]
 8003d2a:	b2d9      	uxtb	r1, r3
 8003d2c:	2383      	movs	r3, #131	; 0x83
 8003d2e:	2240      	movs	r2, #64	; 0x40
 8003d30:	f002 f92e 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x25);
 8003d3e:	4b37      	ldr	r3, [pc, #220]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d44:	f993 3000 	ldrsb.w	r3, [r3]
 8003d48:	b2d9      	uxtb	r1, r3
 8003d4a:	2325      	movs	r3, #37	; 0x25
 8003d4c:	2246      	movs	r2, #70	; 0x46
 8003d4e:	f002 f91f 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_CONTROL, TOF_DEFAULT_0x00);
 8003d5c:	4b2f      	ldr	r3, [pc, #188]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d62:	f993 3000 	ldrsb.w	r3, [r3]
 8003d66:	b2d9      	uxtb	r1, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2260      	movs	r2, #96	; 0x60
 8003d6c:	f002 f910 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	4013      	ands	r3, r2
 8003d78:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 8003d7a:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d80:	f993 3000 	ldrsb.w	r3, [r3]
 8003d84:	b2d9      	uxtb	r1, r3
 8003d86:	2300      	movs	r3, #0
 8003d88:	2227      	movs	r2, #39	; 0x27
 8003d8a:	f002 f901 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	461a      	mov	r2, r3
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	4013      	ands	r3, r2
 8003d96:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x06);
 8003d98:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8003da2:	b2d9      	uxtb	r1, r3
 8003da4:	2306      	movs	r3, #6
 8003da6:	2250      	movs	r2, #80	; 0x50
 8003da8:	f002 f8f2 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461a      	mov	r2, r3
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	4013      	ands	r3, r2
 8003db4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x00);
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	4b17      	ldr	r3, [pc, #92]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2251      	movs	r2, #81	; 0x51
 8003dc6:	f002 f8e3 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	461a      	mov	r2, r3
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0x96);
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003dda:	f993 3000 	ldrsb.w	r3, [r3]
 8003dde:	b2d9      	uxtb	r1, r3
 8003de0:	2396      	movs	r3, #150	; 0x96
 8003de2:	2252      	movs	r2, #82	; 0x52
 8003de4:	f002 f8d4 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
 8003dee:	4013      	ands	r3, r2
 8003df0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <TOF_load_default_tuning_settings+0x328>)
 8003df8:	f993 3000 	ldrsb.w	r3, [r3]
 8003dfc:	b2d9      	uxtb	r1, r3
 8003dfe:	2308      	movs	r3, #8
 8003e00:	2256      	movs	r2, #86	; 0x56
 8003e02:	f002 f8c5 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461a      	mov	r2, r3
 8003e0a:	7bfb      	ldrb	r3, [r7, #15]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x30);
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <TOF_load_default_tuning_settings+0x32c>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	e004      	b.n	8003e20 <TOF_load_default_tuning_settings+0x330>
 8003e16:	bf00      	nop
 8003e18:	20000026 	.word	0x20000026
 8003e1c:	20000250 	.word	0x20000250
 8003e20:	4bc9      	ldr	r3, [pc, #804]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003e22:	f993 3000 	ldrsb.w	r3, [r3]
 8003e26:	b2d9      	uxtb	r1, r3
 8003e28:	2330      	movs	r3, #48	; 0x30
 8003e2a:	2257      	movs	r2, #87	; 0x57
 8003e2c:	f002 f8b0 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	4013      	ands	r3, r2
 8003e38:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_HI, TOF_DEFAULT_0x00);
 8003e3a:	4bc4      	ldr	r3, [pc, #784]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	4bc2      	ldr	r3, [pc, #776]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003e40:	f993 3000 	ldrsb.w	r3, [r3]
 8003e44:	b2d9      	uxtb	r1, r3
 8003e46:	2300      	movs	r3, #0
 8003e48:	2261      	movs	r2, #97	; 0x61
 8003e4a:	f002 f8a1 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	4013      	ands	r3, r2
 8003e56:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_LO, TOF_DEFAULT_0x00);
 8003e58:	4bbc      	ldr	r3, [pc, #752]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003e5a:	6818      	ldr	r0, [r3, #0]
 8003e5c:	4bba      	ldr	r3, [pc, #744]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003e5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e62:	b2d9      	uxtb	r1, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	2262      	movs	r2, #98	; 0x62
 8003e68:	f002 f892 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	461a      	mov	r2, r3
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	4013      	ands	r3, r2
 8003e74:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8003e76:	4bb5      	ldr	r3, [pc, #724]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	4bb3      	ldr	r3, [pc, #716]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003e7c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e80:	b2d9      	uxtb	r1, r3
 8003e82:	2300      	movs	r3, #0
 8003e84:	2264      	movs	r2, #100	; 0x64
 8003e86:	f002 f883 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	4013      	ands	r3, r2
 8003e92:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x65, TOF_DEFAULT_0x00);
 8003e94:	4bad      	ldr	r3, [pc, #692]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	4bab      	ldr	r3, [pc, #684]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003e9a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e9e:	b2d9      	uxtb	r1, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2265      	movs	r2, #101	; 0x65
 8003ea4:	f002 f874 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	461a      	mov	r2, r3
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x66, TOF_DEFAULT_0xA0);
 8003eb2:	4ba6      	ldr	r3, [pc, #664]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003eb4:	6818      	ldr	r0, [r3, #0]
 8003eb6:	4ba4      	ldr	r3, [pc, #656]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003eb8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ebc:	b2d9      	uxtb	r1, r3
 8003ebe:	23a0      	movs	r3, #160	; 0xa0
 8003ec0:	2266      	movs	r2, #102	; 0x66
 8003ec2:	f002 f865 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	461a      	mov	r2, r3
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003ed0:	4b9e      	ldr	r3, [pc, #632]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	4b9c      	ldr	r3, [pc, #624]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8003eda:	b2d9      	uxtb	r1, r3
 8003edc:	2301      	movs	r3, #1
 8003ede:	22ff      	movs	r2, #255	; 0xff
 8003ee0:	f002 f856 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
 8003eea:	4013      	ands	r3, r2
 8003eec:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x22, TOF_DEFAULT_0x32);
 8003eee:	4b97      	ldr	r3, [pc, #604]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	4b95      	ldr	r3, [pc, #596]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef8:	b2d9      	uxtb	r1, r3
 8003efa:	2332      	movs	r3, #50	; 0x32
 8003efc:	2222      	movs	r2, #34	; 0x22
 8003efe:	f002 f847 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f02:	4603      	mov	r3, r0
 8003f04:	461a      	mov	r2, r3
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x14);
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	4b8d      	ldr	r3, [pc, #564]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003f12:	f993 3000 	ldrsb.w	r3, [r3]
 8003f16:	b2d9      	uxtb	r1, r3
 8003f18:	2314      	movs	r3, #20
 8003f1a:	2247      	movs	r2, #71	; 0x47
 8003f1c:	f002 f838 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	4013      	ands	r3, r2
 8003f28:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x49, TOF_DEFAULT_0xFF);
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003f2c:	6818      	ldr	r0, [r3, #0]
 8003f2e:	4b86      	ldr	r3, [pc, #536]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003f30:	f993 3000 	ldrsb.w	r3, [r3]
 8003f34:	b2d9      	uxtb	r1, r3
 8003f36:	23ff      	movs	r3, #255	; 0xff
 8003f38:	2249      	movs	r2, #73	; 0x49
 8003f3a:	f002 f829 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	461a      	mov	r2, r3
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
 8003f44:	4013      	ands	r3, r2
 8003f46:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4A, TOF_DEFAULT_0x00);
 8003f48:	4b80      	ldr	r3, [pc, #512]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003f4e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f52:	b2d9      	uxtb	r1, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	224a      	movs	r2, #74	; 0x4a
 8003f58:	f002 f81a 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	461a      	mov	r2, r3
 8003f60:	7bfb      	ldrb	r3, [r7, #15]
 8003f62:	4013      	ands	r3, r2
 8003f64:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003f66:	4b79      	ldr	r3, [pc, #484]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	4b77      	ldr	r3, [pc, #476]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f70:	b2d9      	uxtb	r1, r3
 8003f72:	2300      	movs	r3, #0
 8003f74:	22ff      	movs	r2, #255	; 0xff
 8003f76:	f002 f80b 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	4013      	ands	r3, r2
 8003f82:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7A, TOF_DEFAULT_0x0A);  //TF01 change form, 0xA0 to 0x0A
 8003f84:	4b71      	ldr	r3, [pc, #452]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003f8a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f8e:	b2d9      	uxtb	r1, r3
 8003f90:	230a      	movs	r3, #10
 8003f92:	227a      	movs	r2, #122	; 0x7a
 8003f94:	f001 fffc 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7B, TOF_DEFAULT_0x00);
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	4b68      	ldr	r3, [pc, #416]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8003fac:	b2d9      	uxtb	r1, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	227b      	movs	r2, #123	; 0x7b
 8003fb2:	f001 ffed 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	461a      	mov	r2, r3
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x78, TOF_DEFAULT_0x21);
 8003fc0:	4b62      	ldr	r3, [pc, #392]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4b60      	ldr	r3, [pc, #384]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8003fca:	b2d9      	uxtb	r1, r3
 8003fcc:	2321      	movs	r3, #33	; 0x21
 8003fce:	2278      	movs	r2, #120	; 0x78
 8003fd0:	f001 ffde 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003fde:	4b5b      	ldr	r3, [pc, #364]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	4b59      	ldr	r3, [pc, #356]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8003fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8003fe8:	b2d9      	uxtb	r1, r3
 8003fea:	2301      	movs	r3, #1
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	f001 ffcf 	bl	8005f90 <i2cSendByteToSlaveReg>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x23, TOF_DEFAULT_0x34);
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	4b51      	ldr	r3, [pc, #324]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8004002:	f993 3000 	ldrsb.w	r3, [r3]
 8004006:	b2d9      	uxtb	r1, r3
 8004008:	2334      	movs	r3, #52	; 0x34
 800400a:	2223      	movs	r2, #35	; 0x23
 800400c:	f001 ffc0 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004010:	4603      	mov	r3, r0
 8004012:	461a      	mov	r2, r3
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	4013      	ands	r3, r2
 8004018:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x42, TOF_DEFAULT_0x00);
 800401a:	4b4c      	ldr	r3, [pc, #304]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	4b4a      	ldr	r3, [pc, #296]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8004020:	f993 3000 	ldrsb.w	r3, [r3]
 8004024:	b2d9      	uxtb	r1, r3
 8004026:	2300      	movs	r3, #0
 8004028:	2242      	movs	r2, #66	; 0x42
 800402a:	f001 ffb1 	bl	8005f90 <i2cSendByteToSlaveReg>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	4013      	ands	r3, r2
 8004036:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0xFF);
 8004038:	4b44      	ldr	r3, [pc, #272]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4b42      	ldr	r3, [pc, #264]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 800403e:	f993 3000 	ldrsb.w	r3, [r3]
 8004042:	b2d9      	uxtb	r1, r3
 8004044:	23ff      	movs	r3, #255	; 0xff
 8004046:	2244      	movs	r2, #68	; 0x44
 8004048:	f001 ffa2 	bl	8005f90 <i2cSendByteToSlaveReg>
 800404c:	4603      	mov	r3, r0
 800404e:	461a      	mov	r2, r3
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	4013      	ands	r3, r2
 8004054:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x26);
 8004056:	4b3d      	ldr	r3, [pc, #244]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 800405c:	f993 3000 	ldrsb.w	r3, [r3]
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	2326      	movs	r3, #38	; 0x26
 8004064:	2245      	movs	r2, #69	; 0x45
 8004066:	f001 ff93 	bl	8005f90 <i2cSendByteToSlaveReg>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	4013      	ands	r3, r2
 8004072:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x05);
 8004074:	4b35      	ldr	r3, [pc, #212]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4b33      	ldr	r3, [pc, #204]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 800407a:	f993 3000 	ldrsb.w	r3, [r3]
 800407e:	b2d9      	uxtb	r1, r3
 8004080:	2305      	movs	r3, #5
 8004082:	2246      	movs	r2, #70	; 0x46
 8004084:	f001 ff84 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004088:	4603      	mov	r3, r0
 800408a:	461a      	mov	r2, r3
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	4013      	ands	r3, r2
 8004090:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x40);
 8004092:	4b2e      	ldr	r3, [pc, #184]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8004098:	f993 3000 	ldrsb.w	r3, [r3]
 800409c:	b2d9      	uxtb	r1, r3
 800409e:	2340      	movs	r3, #64	; 0x40
 80040a0:	2240      	movs	r2, #64	; 0x40
 80040a2:	f001 ff75 	bl	8005f90 <i2cSendByteToSlaveReg>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	4013      	ands	r3, r2
 80040ae:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_THRESH_LOW, TOF_DEFAULT_0x06);
 80040b0:	4b26      	ldr	r3, [pc, #152]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4b24      	ldr	r3, [pc, #144]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 80040b6:	f993 3000 	ldrsb.w	r3, [r3]
 80040ba:	b2d9      	uxtb	r1, r3
 80040bc:	2306      	movs	r3, #6
 80040be:	220e      	movs	r2, #14
 80040c0:	f001 ff66 	bl	8005f90 <i2cSendByteToSlaveReg>
 80040c4:	4603      	mov	r3, r0
 80040c6:	461a      	mov	r2, r3
 80040c8:	7bfb      	ldrb	r3, [r7, #15]
 80040ca:	4013      	ands	r3, r2
 80040cc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x20, TOF_DEFAULT_0x1A);
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 80040d4:	f993 3000 	ldrsb.w	r3, [r3]
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	231a      	movs	r3, #26
 80040dc:	2220      	movs	r2, #32
 80040de:	f001 ff57 	bl	8005f90 <i2cSendByteToSlaveReg>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
 80040e8:	4013      	ands	r3, r2
 80040ea:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x43, TOF_DEFAULT_0x40);
 80040ec:	4b17      	ldr	r3, [pc, #92]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	4b15      	ldr	r3, [pc, #84]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 80040f2:	f993 3000 	ldrsb.w	r3, [r3]
 80040f6:	b2d9      	uxtb	r1, r3
 80040f8:	2340      	movs	r3, #64	; 0x40
 80040fa:	2243      	movs	r2, #67	; 0x43
 80040fc:	f001 ff48 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	4013      	ands	r3, r2
 8004108:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 8004110:	f993 3000 	ldrsb.w	r3, [r3]
 8004114:	b2d9      	uxtb	r1, r3
 8004116:	2300      	movs	r3, #0
 8004118:	22ff      	movs	r2, #255	; 0xff
 800411a:	f001 ff39 	bl	8005f90 <i2cSendByteToSlaveReg>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	4013      	ands	r3, r2
 8004126:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x34, TOF_DEFAULT_0x03);
 8004128:	4b08      	ldr	r3, [pc, #32]	; (800414c <TOF_load_default_tuning_settings+0x65c>)
 800412a:	6818      	ldr	r0, [r3, #0]
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <TOF_load_default_tuning_settings+0x658>)
 800412e:	f993 3000 	ldrsb.w	r3, [r3]
 8004132:	b2d9      	uxtb	r1, r3
 8004134:	2303      	movs	r3, #3
 8004136:	2234      	movs	r2, #52	; 0x34
 8004138:	f001 ff2a 	bl	8005f90 <i2cSendByteToSlaveReg>
 800413c:	4603      	mov	r3, r0
 800413e:	461a      	mov	r2, r3
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	4013      	ands	r3, r2
 8004144:	e004      	b.n	8004150 <TOF_load_default_tuning_settings+0x660>
 8004146:	bf00      	nop
 8004148:	20000026 	.word	0x20000026
 800414c:	20000250 	.word	0x20000250
 8004150:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x35, TOF_DEFAULT_0x44);
 8004152:	4bc8      	ldr	r3, [pc, #800]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	4bc8      	ldr	r3, [pc, #800]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004158:	f993 3000 	ldrsb.w	r3, [r3]
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	2344      	movs	r3, #68	; 0x44
 8004160:	2235      	movs	r2, #53	; 0x35
 8004162:	f001 ff15 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	4013      	ands	r3, r2
 800416e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8004170:	4bc0      	ldr	r3, [pc, #768]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	4bc0      	ldr	r3, [pc, #768]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004176:	f993 3000 	ldrsb.w	r3, [r3]
 800417a:	b2d9      	uxtb	r1, r3
 800417c:	2301      	movs	r3, #1
 800417e:	22ff      	movs	r2, #255	; 0xff
 8004180:	f001 ff06 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004184:	4603      	mov	r3, r0
 8004186:	461a      	mov	r2, r3
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	4013      	ands	r3, r2
 800418c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 800418e:	4bb9      	ldr	r3, [pc, #740]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	4bb9      	ldr	r3, [pc, #740]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004194:	f993 3000 	ldrsb.w	r3, [r3]
 8004198:	b2d9      	uxtb	r1, r3
 800419a:	2304      	movs	r3, #4
 800419c:	2231      	movs	r2, #49	; 0x31
 800419e:	f001 fef7 	bl	8005f90 <i2cSendByteToSlaveReg>
 80041a2:	4603      	mov	r3, r0
 80041a4:	461a      	mov	r2, r3
 80041a6:	7bfb      	ldrb	r3, [r7, #15]
 80041a8:	4013      	ands	r3, r2
 80041aa:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4B, TOF_DEFAULT_0x09);
 80041ac:	4bb1      	ldr	r3, [pc, #708]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4bb1      	ldr	r3, [pc, #708]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80041b2:	f993 3000 	ldrsb.w	r3, [r3]
 80041b6:	b2d9      	uxtb	r1, r3
 80041b8:	2309      	movs	r3, #9
 80041ba:	224b      	movs	r2, #75	; 0x4b
 80041bc:	f001 fee8 	bl	8005f90 <i2cSendByteToSlaveReg>
 80041c0:	4603      	mov	r3, r0
 80041c2:	461a      	mov	r2, r3
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	4013      	ands	r3, r2
 80041c8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4C, TOF_DEFAULT_0x05);
 80041ca:	4baa      	ldr	r3, [pc, #680]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	4baa      	ldr	r3, [pc, #680]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80041d0:	f993 3000 	ldrsb.w	r3, [r3]
 80041d4:	b2d9      	uxtb	r1, r3
 80041d6:	2305      	movs	r3, #5
 80041d8:	224c      	movs	r2, #76	; 0x4c
 80041da:	f001 fed9 	bl	8005f90 <i2cSendByteToSlaveReg>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	4013      	ands	r3, r2
 80041e6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4D, TOF_DEFAULT_0x04);
 80041e8:	4ba2      	ldr	r3, [pc, #648]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	4ba2      	ldr	r3, [pc, #648]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80041ee:	f993 3000 	ldrsb.w	r3, [r3]
 80041f2:	b2d9      	uxtb	r1, r3
 80041f4:	2304      	movs	r3, #4
 80041f6:	224d      	movs	r2, #77	; 0x4d
 80041f8:	f001 feca 	bl	8005f90 <i2cSendByteToSlaveReg>
 80041fc:	4603      	mov	r3, r0
 80041fe:	461a      	mov	r2, r3
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	4013      	ands	r3, r2
 8004204:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004206:	4b9b      	ldr	r3, [pc, #620]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	4b9b      	ldr	r3, [pc, #620]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 800420c:	f993 3000 	ldrsb.w	r3, [r3]
 8004210:	b2d9      	uxtb	r1, r3
 8004212:	2300      	movs	r3, #0
 8004214:	22ff      	movs	r2, #255	; 0xff
 8004216:	f001 febb 	bl	8005f90 <i2cSendByteToSlaveReg>
 800421a:	4603      	mov	r3, r0
 800421c:	461a      	mov	r2, r3
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	4013      	ands	r3, r2
 8004222:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8004224:	4b93      	ldr	r3, [pc, #588]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	4b93      	ldr	r3, [pc, #588]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 800422a:	f993 3000 	ldrsb.w	r3, [r3]
 800422e:	b2d9      	uxtb	r1, r3
 8004230:	2300      	movs	r3, #0
 8004232:	2244      	movs	r2, #68	; 0x44
 8004234:	f001 feac 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	4013      	ands	r3, r2
 8004240:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x20);
 8004242:	4b8c      	ldr	r3, [pc, #560]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	4b8c      	ldr	r3, [pc, #560]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004248:	f993 3000 	ldrsb.w	r3, [r3]
 800424c:	b2d9      	uxtb	r1, r3
 800424e:	2320      	movs	r3, #32
 8004250:	2245      	movs	r2, #69	; 0x45
 8004252:	f001 fe9d 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	4013      	ands	r3, r2
 800425e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8004260:	4b84      	ldr	r3, [pc, #528]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	4b84      	ldr	r3, [pc, #528]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004266:	f993 3000 	ldrsb.w	r3, [r3]
 800426a:	b2d9      	uxtb	r1, r3
 800426c:	2308      	movs	r3, #8
 800426e:	2247      	movs	r2, #71	; 0x47
 8004270:	f001 fe8e 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	7bfb      	ldrb	r3, [r7, #15]
 800427a:	4013      	ands	r3, r2
 800427c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x28);
 800427e:	4b7d      	ldr	r3, [pc, #500]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	4b7d      	ldr	r3, [pc, #500]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004284:	f993 3000 	ldrsb.w	r3, [r3]
 8004288:	b2d9      	uxtb	r1, r3
 800428a:	2328      	movs	r3, #40	; 0x28
 800428c:	2248      	movs	r2, #72	; 0x48
 800428e:	f001 fe7f 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	4013      	ands	r3, r2
 800429a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 800429c:	4b75      	ldr	r3, [pc, #468]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80042a2:	f993 3000 	ldrsb.w	r3, [r3]
 80042a6:	b2d9      	uxtb	r1, r3
 80042a8:	2300      	movs	r3, #0
 80042aa:	2267      	movs	r2, #103	; 0x67
 80042ac:	f001 fe70 	bl	8005f90 <i2cSendByteToSlaveReg>
 80042b0:	4603      	mov	r3, r0
 80042b2:	461a      	mov	r2, r3
 80042b4:	7bfb      	ldrb	r3, [r7, #15]
 80042b6:	4013      	ands	r3, r2
 80042b8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x04);
 80042ba:	4b6e      	ldr	r3, [pc, #440]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	4b6e      	ldr	r3, [pc, #440]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80042c0:	f993 3000 	ldrsb.w	r3, [r3]
 80042c4:	b2d9      	uxtb	r1, r3
 80042c6:	2304      	movs	r3, #4
 80042c8:	2270      	movs	r2, #112	; 0x70
 80042ca:	f001 fe61 	bl	8005f90 <i2cSendByteToSlaveReg>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	4013      	ands	r3, r2
 80042d6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x01);
 80042d8:	4b66      	ldr	r3, [pc, #408]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80042de:	f993 3000 	ldrsb.w	r3, [r3]
 80042e2:	b2d9      	uxtb	r1, r3
 80042e4:	2301      	movs	r3, #1
 80042e6:	2271      	movs	r2, #113	; 0x71
 80042e8:	f001 fe52 	bl	8005f90 <i2cSendByteToSlaveReg>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	4013      	ands	r3, r2
 80042f4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0xFE);
 80042f6:	4b5f      	ldr	r3, [pc, #380]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	4b5f      	ldr	r3, [pc, #380]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80042fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004300:	b2d9      	uxtb	r1, r3
 8004302:	23fe      	movs	r3, #254	; 0xfe
 8004304:	2272      	movs	r2, #114	; 0x72
 8004306:	f001 fe43 	bl	8005f90 <i2cSendByteToSlaveReg>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	4013      	ands	r3, r2
 8004312:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x76, TOF_DEFAULT_0x00);
 8004314:	4b57      	ldr	r3, [pc, #348]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4b57      	ldr	r3, [pc, #348]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 800431a:	f993 3000 	ldrsb.w	r3, [r3]
 800431e:	b2d9      	uxtb	r1, r3
 8004320:	2300      	movs	r3, #0
 8004322:	2276      	movs	r2, #118	; 0x76
 8004324:	f001 fe34 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	4013      	ands	r3, r2
 8004330:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x77, TOF_DEFAULT_0x00);
 8004332:	4b50      	ldr	r3, [pc, #320]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	4b50      	ldr	r3, [pc, #320]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004338:	f993 3000 	ldrsb.w	r3, [r3]
 800433c:	b2d9      	uxtb	r1, r3
 800433e:	2300      	movs	r3, #0
 8004340:	2277      	movs	r2, #119	; 0x77
 8004342:	f001 fe25 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004346:	4603      	mov	r3, r0
 8004348:	461a      	mov	r2, r3
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	4013      	ands	r3, r2
 800434e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8004350:	4b48      	ldr	r3, [pc, #288]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	4b48      	ldr	r3, [pc, #288]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004356:	f993 3000 	ldrsb.w	r3, [r3]
 800435a:	b2d9      	uxtb	r1, r3
 800435c:	2301      	movs	r3, #1
 800435e:	22ff      	movs	r2, #255	; 0xff
 8004360:	f001 fe16 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	4013      	ands	r3, r2
 800436c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x0D, TOF_DEFAULT_0x01);
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	4b41      	ldr	r3, [pc, #260]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004374:	f993 3000 	ldrsb.w	r3, [r3]
 8004378:	b2d9      	uxtb	r1, r3
 800437a:	2301      	movs	r3, #1
 800437c:	220d      	movs	r2, #13
 800437e:	f001 fe07 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004382:	4603      	mov	r3, r0
 8004384:	461a      	mov	r2, r3
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	4013      	ands	r3, r2
 800438a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004392:	f993 3000 	ldrsb.w	r3, [r3]
 8004396:	b2d9      	uxtb	r1, r3
 8004398:	2300      	movs	r3, #0
 800439a:	22ff      	movs	r2, #255	; 0xff
 800439c:	f001 fdf8 	bl	8005f90 <i2cSendByteToSlaveReg>
 80043a0:	4603      	mov	r3, r0
 80043a2:	461a      	mov	r2, r3
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
 80043a6:	4013      	ands	r3, r2
 80043a8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x01);
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	4b32      	ldr	r3, [pc, #200]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80043b0:	f993 3000 	ldrsb.w	r3, [r3]
 80043b4:	b2d9      	uxtb	r1, r3
 80043b6:	2301      	movs	r3, #1
 80043b8:	2280      	movs	r2, #128	; 0x80
 80043ba:	f001 fde9 	bl	8005f90 <i2cSendByteToSlaveReg>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
 80043c4:	4013      	ands	r3, r2
 80043c6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, TOF_DEFAULT_0xF8);
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80043ce:	f993 3000 	ldrsb.w	r3, [r3]
 80043d2:	b2d9      	uxtb	r1, r3
 80043d4:	23f8      	movs	r3, #248	; 0xf8
 80043d6:	2201      	movs	r2, #1
 80043d8:	f001 fdda 	bl	8005f90 <i2cSendByteToSlaveReg>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	4013      	ands	r3, r2
 80043e4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80043e6:	4b23      	ldr	r3, [pc, #140]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 80043ec:	f993 3000 	ldrsb.w	r3, [r3]
 80043f0:	b2d9      	uxtb	r1, r3
 80043f2:	2301      	movs	r3, #1
 80043f4:	22ff      	movs	r2, #255	; 0xff
 80043f6:	f001 fdcb 	bl	8005f90 <i2cSendByteToSlaveReg>
 80043fa:	4603      	mov	r3, r0
 80043fc:	461a      	mov	r2, r3
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	4013      	ands	r3, r2
 8004402:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x8E, TOF_DEFAULT_0x01);
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 800440a:	f993 3000 	ldrsb.w	r3, [r3]
 800440e:	b2d9      	uxtb	r1, r3
 8004410:	2301      	movs	r3, #1
 8004412:	228e      	movs	r2, #142	; 0x8e
 8004414:	f001 fdbc 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	4013      	ands	r3, r2
 8004420:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x01);
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004428:	f993 3000 	ldrsb.w	r3, [r3]
 800442c:	b2d9      	uxtb	r1, r3
 800442e:	2301      	movs	r3, #1
 8004430:	2200      	movs	r2, #0
 8004432:	f001 fdad 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	4013      	ands	r3, r2
 800443e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004440:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004446:	f993 3000 	ldrsb.w	r3, [r3]
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	2300      	movs	r3, #0
 800444e:	22ff      	movs	r2, #255	; 0xff
 8004450:	f001 fd9e 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004454:	4603      	mov	r3, r0
 8004456:	461a      	mov	r2, r3
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4013      	ands	r3, r2
 800445c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x00);
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <TOF_load_default_tuning_settings+0x984>)
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	4b05      	ldr	r3, [pc, #20]	; (8004478 <TOF_load_default_tuning_settings+0x988>)
 8004464:	f993 3000 	ldrsb.w	r3, [r3]
 8004468:	b2d9      	uxtb	r1, r3
 800446a:	2300      	movs	r3, #0
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	f001 fd8f 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004472:	e003      	b.n	800447c <TOF_load_default_tuning_settings+0x98c>
 8004474:	20000250 	.word	0x20000250
 8004478:	20000026 	.word	0x20000026
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	4013      	ands	r3, r2
 8004484:	73fb      	strb	r3, [r7, #15]

    if (success != I2C_OK)
 8004486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <TOF_load_default_tuning_settings+0x9a2>
	{
		return false;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <TOF_load_default_tuning_settings+0x9a4>
	}

	return true;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <TOF_set_sequence_steps_enabled>:
 *  														specific step in the sensor's operational sequence.
 *
 * @returns:     bool: true if the sequence configuration was successfully written to the sensor, otherwise false.
 */
bool TOF_set_sequence_steps_enabled(TOFSensor_t* TOFSENS, uint8_t sequence_step)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	889b      	ldrh	r3, [r3, #4]
 80044ac:	b25a      	sxtb	r2, r3
 80044ae:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <TOF_set_sequence_steps_enabled+0x50>)
 80044b0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <TOF_set_sequence_steps_enabled+0x54>)
 80044b8:	6013      	str	r3, [r2, #0]

	bool result = false;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <TOF_set_sequence_steps_enabled+0x54>)
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <TOF_set_sequence_steps_enabled+0x50>)
 80044c4:	f993 3000 	ldrsb.w	r3, [r3]
 80044c8:	b2d9      	uxtb	r1, r3
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f001 fd5f 	bl	8005f90 <i2cSendByteToSlaveReg>
 80044d2:	4603      	mov	r3, r0
 80044d4:	73bb      	strb	r3, [r7, #14]

	if(success == I2C_OK)
 80044d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <TOF_set_sequence_steps_enabled+0x46>
	{
		result = true;
 80044de:	2301      	movs	r3, #1
 80044e0:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80044e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000026 	.word	0x20000026
 80044f0:	20000250 	.word	0x20000250

080044f4 <TOF_perform_single_ref_calibration>:
 *                  - TOF_CALIBRATION_TYPE_PHASE 			Calibrates phase measurements.
 *
 * @returns:     bool: true if the calibration was successfully performed, otherwise false.
 */
bool TOF_perform_single_ref_calibration(TOFSensor_t* TOFSENS, TOF_calibration_type_t calib_type)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	460b      	mov	r3, r1
 80044fe:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	889b      	ldrh	r3, [r3, #4]
 8004504:	b25a      	sxtb	r2, r3
 8004506:	4b41      	ldr	r3, [pc, #260]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 8004508:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 8004510:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success;

    uint8_t sysrange_start = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 800451a:	78fb      	ldrb	r3, [r7, #3]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <TOF_perform_single_ref_calibration+0x32>
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <TOF_perform_single_ref_calibration+0x3c>
 8004524:	e009      	b.n	800453a <TOF_perform_single_ref_calibration+0x46>
    {
    case TOF_CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 8004526:	2301      	movs	r3, #1
 8004528:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 800452a:	2341      	movs	r3, #65	; 0x41
 800452c:	73fb      	strb	r3, [r7, #15]
        break;
 800452e:	e004      	b.n	800453a <TOF_perform_single_ref_calibration+0x46>
    case TOF_CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8004530:	2302      	movs	r3, #2
 8004532:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
        break;
 8004538:	bf00      	nop
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_config);
 800453a:	4b35      	ldr	r3, [pc, #212]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	4b33      	ldr	r3, [pc, #204]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 8004540:	f993 3000 	ldrsb.w	r3, [r3]
 8004544:	b2d9      	uxtb	r1, r3
 8004546:	7bbb      	ldrb	r3, [r7, #14]
 8004548:	2201      	movs	r2, #1
 800454a:	f001 fd21 	bl	8005f90 <i2cSendByteToSlaveReg>
 800454e:	4603      	mov	r3, r0
 8004550:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 8004552:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <TOF_perform_single_ref_calibration+0x6a>
    {
        return false;
 800455a:	2300      	movs	r3, #0
 800455c:	e052      	b.n	8004604 <TOF_perform_single_ref_calibration+0x110>
    }
//ToDo Abfrage ob die jeweiligen Initialisierungen richtig gesetzt wurden.
    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, sysrange_start);
 800455e:	4b2c      	ldr	r3, [pc, #176]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 8004564:	f993 3000 	ldrsb.w	r3, [r3]
 8004568:	b2d9      	uxtb	r1, r3
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2200      	movs	r2, #0
 800456e:	f001 fd0f 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004572:	4603      	mov	r3, r0
 8004574:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 8004576:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <TOF_perform_single_ref_calibration+0x8e>
    {
        return false;
 800457e:	2300      	movs	r3, #0
 8004580:	e040      	b.n	8004604 <TOF_perform_single_ref_calibration+0x110>

    /* Wait for interrupt */



    uint8_t interrupt_status = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	733b      	strb	r3, [r7, #12]
    do {		//Funktion in welcher der MCAL Fehler auftritt //ToDo i2cReadByteFromSlaveReg durch i2cBurstRegRead ersetzen

        //success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
        success = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status, 1);
 8004586:	4b22      	ldr	r3, [pc, #136]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 800458c:	f993 3000 	ldrsb.w	r3, [r3]
 8004590:	b2d9      	uxtb	r1, r3
 8004592:	f107 030c 	add.w	r3, r7, #12
 8004596:	2201      	movs	r2, #1
 8004598:	9200      	str	r2, [sp, #0]
 800459a:	2213      	movs	r2, #19
 800459c:	f001 fdb2 	bl	8006104 <i2cBurstRegRead>
 80045a0:	4603      	mov	r3, r0
 80045a2:	737b      	strb	r3, [r7, #13]
    } while ((interrupt_status & 0x07) == 0);
 80045a4:	7b3b      	ldrb	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0eb      	beq.n	8004586 <TOF_perform_single_ref_calibration+0x92>

    //} while (success == I2C_OK && ((interrupt_status & 0x07) == 0));
    if (success != I2C_OK)
 80045ae:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <TOF_perform_single_ref_calibration+0xc6>
    {
        return false;
 80045b6:	2300      	movs	r3, #0
 80045b8:	e024      	b.n	8004604 <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 80045ba:	4b15      	ldr	r3, [pc, #84]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 80045c0:	f993 3000 	ldrsb.w	r3, [r3]
 80045c4:	b2d9      	uxtb	r1, r3
 80045c6:	2301      	movs	r3, #1
 80045c8:	220b      	movs	r2, #11
 80045ca:	f001 fce1 	bl	8005f90 <i2cSendByteToSlaveReg>
 80045ce:	4603      	mov	r3, r0
 80045d0:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80045d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <TOF_perform_single_ref_calibration+0xea>
    {
        return false;
 80045da:	2300      	movs	r3, #0
 80045dc:	e012      	b.n	8004604 <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <TOF_perform_single_ref_calibration+0x11c>)
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <TOF_perform_single_ref_calibration+0x118>)
 80045e4:	f993 3000 	ldrsb.w	r3, [r3]
 80045e8:	b2d9      	uxtb	r1, r3
 80045ea:	2300      	movs	r3, #0
 80045ec:	2200      	movs	r2, #0
 80045ee:	f001 fccf 	bl	8005f90 <i2cSendByteToSlaveReg>
 80045f2:	4603      	mov	r3, r0
 80045f4:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80045f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <TOF_perform_single_ref_calibration+0x10e>
    {
        return false;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <TOF_perform_single_ref_calibration+0x110>
    }

    return true;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000026 	.word	0x20000026
 8004610:	20000250 	.word	0x20000250

08004614 <TOF_perform_ref_calibration>:
 *               - After calibration, the sequence steps for measurement are re-enabled using
 *                 TOF_set_sequence_steps_enabled.
 *               - If any step in the calibration or configuration fails, the function returns false.
 */
bool TOF_perform_ref_calibration(TOFSensor_t* TOFSENS)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	889b      	ldrh	r3, [r3, #4]
 8004620:	b25a      	sxtb	r2, r3
 8004622:	4b17      	ldr	r3, [pc, #92]	; (8004680 <TOF_perform_ref_calibration+0x6c>)
 8004624:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a16      	ldr	r2, [pc, #88]	; (8004684 <TOF_perform_ref_calibration+0x70>)
 800462c:	6013      	str	r3, [r2, #0]

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_VHV)) {
 800462e:	2100      	movs	r1, #0
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff5f 	bl	80044f4 <TOF_perform_single_ref_calibration>
 8004636:	4603      	mov	r3, r0
 8004638:	f083 0301 	eor.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <TOF_perform_ref_calibration+0x32>
		return false;
 8004642:	2300      	movs	r3, #0
 8004644:	e018      	b.n	8004678 <TOF_perform_ref_calibration+0x64>
	}

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_PHASE)) {		//Funktion in welcher der MCAL Fehler auftritt
 8004646:	2101      	movs	r1, #1
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff53 	bl	80044f4 <TOF_perform_single_ref_calibration>
 800464e:	4603      	mov	r3, r0
 8004650:	f083 0301 	eor.w	r3, r3, #1
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <TOF_perform_ref_calibration+0x4a>
		return false;
 800465a:	2300      	movs	r3, #0
 800465c:	e00c      	b.n	8004678 <TOF_perform_ref_calibration+0x64>
	}


	/* Restore sequence steps enabled */

	if (!TOF_set_sequence_steps_enabled(TOFSENS, TOF_RANGE_SEQUENCE_STEP_DSS + TOF_RANGE_SEQUENCE_STEP_PRE_RANGE + TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
 800465e:	21e8      	movs	r1, #232	; 0xe8
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff1b 	bl	800449c <TOF_set_sequence_steps_enabled>
 8004666:	4603      	mov	r3, r0
 8004668:	f083 0301 	eor.w	r3, r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <TOF_perform_ref_calibration+0x62>
		return false;
 8004672:	2300      	movs	r3, #0
 8004674:	e000      	b.n	8004678 <TOF_perform_ref_calibration+0x64>
	}

	return true;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000026 	.word	0x20000026
 8004684:	20000250 	.word	0x20000250

08004688 <TOF_init_device>:
 * @note:        - This function depends on several helper functions, each responsible for a specific initialization
 *                 task. If any step fails, the initialization halts and the function returns false.
 *               - Ensure the I2C communication setup is properly initialized before calling this function.
 */
bool TOF_init_device(TOFSensor_t* TOFSENS)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	889b      	ldrh	r3, [r3, #4]
 8004694:	b25a      	sxtb	r2, r3
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <TOF_init_device+0xac>)
 8004698:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a26      	ldr	r2, [pc, #152]	; (8004738 <TOF_init_device+0xb0>)
 80046a0:	6013      	str	r3, [r2, #0]

	if (!TOF_data_init(TOFSENS))
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fe ff56 	bl	8003554 <TOF_data_init>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f083 0301 	eor.w	r3, r3, #1
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <TOF_init_device+0x30>
	{
		return false;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e038      	b.n	800472a <TOF_init_device+0xa2>
	}

	if (!TOF_set_spads_from_nvm(TOFSENS)) {
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff f92f 	bl	800391c <TOF_set_spads_from_nvm>
 80046be:	4603      	mov	r3, r0
 80046c0:	f083 0301 	eor.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <TOF_init_device+0x46>
		return false;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e02d      	b.n	800472a <TOF_init_device+0xa2>
	}

	if (!TOF_load_default_tuning_settings(TOFSENS))
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff fa0e 	bl	8003af0 <TOF_load_default_tuning_settings>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f083 0301 	eor.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <TOF_init_device+0x5c>
	{
		return false;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e022      	b.n	800472a <TOF_init_device+0xa2>
	}

	if (!TOF_configure_interrupt(TOFSENS))
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7fe fe9f 	bl	8003428 <TOF_configure_interrupt>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f083 0301 	eor.w	r3, r3, #1
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <TOF_init_device+0x72>
	{
		return false;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e017      	b.n	800472a <TOF_init_device+0xa2>
	}

	if (!TOF_set_sequence_steps_enabled(TOFSENS,
 80046fa:	21e8      	movs	r1, #232	; 0xe8
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff fecd 	bl	800449c <TOF_set_sequence_steps_enabled>
 8004702:	4603      	mov	r3, r0
 8004704:	f083 0301 	eor.w	r3, r3, #1
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <TOF_init_device+0x8a>
			TOF_RANGE_SEQUENCE_STEP_DSS +
			TOF_RANGE_SEQUENCE_STEP_PRE_RANGE +
			TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
		return false;
 800470e:	2300      	movs	r3, #0
 8004710:	e00b      	b.n	800472a <TOF_init_device+0xa2>
	}

    if (!TOF_perform_ref_calibration(TOFSENS))			//Funktion in welcher der MCAL Fehler auftritt
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff ff7e 	bl	8004614 <TOF_perform_ref_calibration>
 8004718:	4603      	mov	r3, r0
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <TOF_init_device+0xa0>
    {
        return false;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <TOF_init_device+0xa2>
    }

	return true;
 8004728:	2301      	movs	r3, #1
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	20000026 	.word	0x20000026
 8004738:	20000250 	.word	0x20000250

0800473c <TOF_getMeasurement>:
 * @limitations:
 *               - If the range is out of the sensor's measurable distance, the value returned is defined
 *                 as TOF_VL53L0X_OUT_OF_RANGE.
 */
bool TOF_getMeasurement(TOFSensor_t* TOFSENS, uint16_t *range)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
	I2C_RETURN_CODE_t i2c_return;
	TOF_address_used = TOFSENS->TOF_address_used;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	889b      	ldrh	r3, [r3, #4]
 800474a:	b25a      	sxtb	r2, r3
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <TOF_getMeasurement+0xec>)
 800474e:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a35      	ldr	r2, [pc, #212]	; (800482c <TOF_getMeasurement+0xf0>)
 8004756:	6013      	str	r3, [r2, #0]
	uint8_t interrupt_status[1];
	do
	{
		i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_RESULT_INTERRUPT_STATUS, interrupt_status, 1);
 8004758:	4b34      	ldr	r3, [pc, #208]	; (800482c <TOF_getMeasurement+0xf0>)
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	4b32      	ldr	r3, [pc, #200]	; (8004828 <TOF_getMeasurement+0xec>)
 800475e:	f993 3000 	ldrsb.w	r3, [r3]
 8004762:	b2d9      	uxtb	r1, r3
 8004764:	f107 030c 	add.w	r3, r7, #12
 8004768:	2201      	movs	r2, #1
 800476a:	9200      	str	r2, [sp, #0]
 800476c:	2213      	movs	r2, #19
 800476e:	f001 fcc9 	bl	8006104 <i2cBurstRegRead>
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]
	} while (i2c_return == I2C_OK && ((interrupt_status[0] & 0x07) == 0));
 8004776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <TOF_getMeasurement+0x4c>
 800477e:	7b3b      	ldrb	r3, [r7, #12]
 8004780:	f003 0307 	and.w	r3, r3, #7
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0e7      	beq.n	8004758 <TOF_getMeasurement+0x1c>
	if (i2c_return != I2C_OK)
 8004788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <TOF_getMeasurement+0x58>
	{
		return false;
 8004790:	2300      	movs	r3, #0
 8004792:	e045      	b.n	8004820 <TOF_getMeasurement+0xe4>
	}

	uint8_t readBuffer[2];
	i2c_return = i2cBurstRegRead(
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <TOF_getMeasurement+0xf0>)
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <TOF_getMeasurement+0xec>)
 800479a:	f993 3000 	ldrsb.w	r3, [r3]
 800479e:	b2d9      	uxtb	r1, r3
 80047a0:	f107 0308 	add.w	r3, r7, #8
 80047a4:	2202      	movs	r2, #2
 80047a6:	9200      	str	r2, [sp, #0]
 80047a8:	221e      	movs	r2, #30
 80047aa:	f001 fcab 	bl	8006104 <i2cBurstRegRead>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_RESULT_RANGE_STATUS + 10,
			readBuffer, 2);
	if (i2c_return != I2C_OK)
 80047b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <TOF_getMeasurement+0x82>
	{
		// returns false, if i2c communication was not successful
		return false;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e030      	b.n	8004820 <TOF_getMeasurement+0xe4>
	}
	*range = (readBuffer[0] << 8) + readBuffer[1];
 80047be:	7a3b      	ldrb	r3, [r7, #8]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	7a7b      	ldrb	r3, [r7, #9]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	801a      	strh	r2, [r3, #0]

	TOFSENS->measuredRange = (uint32_t)readBuffer;
 80047d2:	f107 0208 	add.w	r2, r7, #8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	60da      	str	r2, [r3, #12]
	i2c_return = i2cSendByteToSlaveReg(
 80047da:	4b14      	ldr	r3, [pc, #80]	; (800482c <TOF_getMeasurement+0xf0>)
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	4b12      	ldr	r3, [pc, #72]	; (8004828 <TOF_getMeasurement+0xec>)
 80047e0:	f993 3000 	ldrsb.w	r3, [r3]
 80047e4:	b2d9      	uxtb	r1, r3
 80047e6:	2301      	movs	r3, #1
 80047e8:	220b      	movs	r2, #11
 80047ea:	f001 fbd1 	bl	8005f90 <i2cSendByteToSlaveReg>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
	if (i2c_return != I2C_OK)
 80047f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <TOF_getMeasurement+0xc2>
	{
		// returns false, if i2c communication was not successful
		return false;
 80047fa:	2300      	movs	r3, #0
 80047fc:	e010      	b.n	8004820 <TOF_getMeasurement+0xe4>
	}

	/* 8190 or 8191 may be returned when obstacle is out of range. */
	if (*range == 8190 || *range == 8191)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8004806:	4293      	cmp	r3, r2
 8004808:	d005      	beq.n	8004816 <TOF_getMeasurement+0xda>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8004812:	4293      	cmp	r3, r2
 8004814:	d103      	bne.n	800481e <TOF_getMeasurement+0xe2>
	{
		*range = TOF_VL53L0X_OUT_OF_RANGE;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800481c:	801a      	strh	r2, [r3, #0]
	}

	return true;
 800481e:	2301      	movs	r3, #1
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000026 	.word	0x20000026
 800482c:	20000250 	.word	0x20000250

08004830 <TOF_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the initialization was successful, otherwise false.
 */
bool TOF_init(TOFSensor_t* TOFSENS)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	889b      	ldrh	r3, [r3, #4]
 800483c:	b25a      	sxtb	r2, r3
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <TOF_init+0x50>)
 8004840:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a0f      	ldr	r2, [pc, #60]	; (8004884 <TOF_init+0x54>)
 8004848:	6013      	str	r3, [r2, #0]

	// Init i2c address and check connectivity
	if (!TOF_init_address(TOFSENS))
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fe fe52 	bl	80034f4 <TOF_init_address>
 8004850:	4603      	mov	r3, r0
 8004852:	f083 0301 	eor.w	r3, r3, #1
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <TOF_init+0x30>
	{
		return false;
 800485c:	2300      	movs	r3, #0
 800485e:	e00b      	b.n	8004878 <TOF_init+0x48>
	}

	//device initialization
	if (!TOF_init_device(TOFSENS))		//Funktion in welcher der MCAL Fehler auftritt
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f7ff ff11 	bl	8004688 <TOF_init_device>
 8004866:	4603      	mov	r3, r0
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <TOF_init+0x46>
	{
		return false;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <TOF_init+0x48>
	}

	// return true, if everything was fine
	return true;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000026 	.word	0x20000026
 8004884:	20000250 	.word	0x20000250

08004888 <TOF_start_continuous>:
 * 				uint32_t period_ms							Measurement interval in milliseconds.
 *
 * @returns:     bool: true if continuous mode starts successfully, otherwise false.
 */
bool TOF_start_continuous(TOFSensor_t* TOFSENS)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	889b      	ldrh	r3, [r3, #4]
 8004894:	b25a      	sxtb	r2, r3
 8004896:	4b68      	ldr	r3, [pc, #416]	; (8004a38 <TOF_start_continuous+0x1b0>)
 8004898:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a67      	ldr	r2, [pc, #412]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80048a0:	6013      	str	r3, [r2, #0]

	uint32_t period_ms = TOFSENS->Ranging_Profile_time;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	617b      	str	r3, [r7, #20]
	I2C_RETURN_CODE_t i2c_return;

	TOF_address_used = TOFSENS->TOF_address_used;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	889b      	ldrh	r3, [r3, #4]
 80048ac:	b25a      	sxtb	r2, r3
 80048ae:	4b62      	ldr	r3, [pc, #392]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80048b0:	701a      	strb	r2, [r3, #0]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80048b2:	4b62      	ldr	r3, [pc, #392]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	4b60      	ldr	r3, [pc, #384]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80048b8:	f993 3000 	ldrsb.w	r3, [r3]
 80048bc:	b2d9      	uxtb	r1, r3
 80048be:	2301      	movs	r3, #1
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	f001 fb65 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	4b5b      	ldr	r3, [pc, #364]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80048cc:	f993 3000 	ldrsb.w	r3, [r3]
 80048d0:	b2d9      	uxtb	r1, r3
 80048d2:	2301      	movs	r3, #1
 80048d4:	22ff      	movs	r2, #255	; 0xff
 80048d6:	f001 fb5b 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 80048da:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80048dc:	6818      	ldr	r0, [r3, #0]
 80048de:	4b56      	ldr	r3, [pc, #344]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80048e0:	f993 3000 	ldrsb.w	r3, [r3]
 80048e4:	b2d9      	uxtb	r1, r3
 80048e6:	2300      	movs	r3, #0
 80048e8:	2200      	movs	r2, #0
 80048ea:	f001 fb51 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, TOF_stop_variable);
 80048ee:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	4b51      	ldr	r3, [pc, #324]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80048f4:	f993 3000 	ldrsb.w	r3, [r3]
 80048f8:	b2d9      	uxtb	r1, r3
 80048fa:	4b51      	ldr	r3, [pc, #324]	; (8004a40 <TOF_start_continuous+0x1b8>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2291      	movs	r2, #145	; 0x91
 8004900:	f001 fb46 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <TOF_start_continuous+0x1b4>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4b4b      	ldr	r3, [pc, #300]	; (8004a38 <TOF_start_continuous+0x1b0>)
 800490a:	f993 3000 	ldrsb.w	r3, [r3]
 800490e:	b2d9      	uxtb	r1, r3
 8004910:	2301      	movs	r3, #1
 8004912:	2200      	movs	r2, #0
 8004914:	f001 fb3c 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004918:	4b48      	ldr	r3, [pc, #288]	; (8004a3c <TOF_start_continuous+0x1b4>)
 800491a:	6818      	ldr	r0, [r3, #0]
 800491c:	4b46      	ldr	r3, [pc, #280]	; (8004a38 <TOF_start_continuous+0x1b0>)
 800491e:	f993 3000 	ldrsb.w	r3, [r3]
 8004922:	b2d9      	uxtb	r1, r3
 8004924:	2300      	movs	r3, #0
 8004926:	22ff      	movs	r2, #255	; 0xff
 8004928:	f001 fb32 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 800492c:	4b43      	ldr	r3, [pc, #268]	; (8004a3c <TOF_start_continuous+0x1b4>)
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <TOF_start_continuous+0x1b0>)
 8004932:	f993 3000 	ldrsb.w	r3, [r3]
 8004936:	b2d9      	uxtb	r1, r3
 8004938:	2300      	movs	r3, #0
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	f001 fb28 	bl	8005f90 <i2cSendByteToSlaveReg>

	if (period_ms != 0)
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d066      	beq.n	8004a14 <TOF_start_continuous+0x18c>
	{
		// continuous timed mode

		uint8_t readBuffer[2];

		i2c_return = i2cBurstRegRead(
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <TOF_start_continuous+0x1b4>)
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <TOF_start_continuous+0x1b0>)
 800494c:	f993 3000 	ldrsb.w	r3, [r3]
 8004950:	b2d9      	uxtb	r1, r3
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	2202      	movs	r2, #2
 8004958:	9200      	str	r2, [sp, #0]
 800495a:	22f8      	movs	r2, #248	; 0xf8
 800495c:	f001 fbd2 	bl	8006104 <i2cBurstRegRead>
 8004960:	4603      	mov	r3, r0
 8004962:	74fb      	strb	r3, [r7, #19]
				TOF_i2c, TOF_address_used,
				TOF_REG_OSC_CALIBRATE_VAL,
				readBuffer, 2);
		if (i2c_return != I2C_OK)
 8004964:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <TOF_start_continuous+0xe8>
		{
			// returns false, if i2c communication was not successful
			return false;
 800496c:	2300      	movs	r3, #0
 800496e:	e05f      	b.n	8004a30 <TOF_start_continuous+0x1a8>
		}

		uint16_t osc_calibrate_val = (readBuffer[0]<<8) + readBuffer[1];
 8004970:	7b3b      	ldrb	r3, [r7, #12]
 8004972:	b29b      	uxth	r3, r3
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	b29a      	uxth	r2, r3
 8004978:	7b7b      	ldrb	r3, [r7, #13]
 800497a:	b29b      	uxth	r3, r3
 800497c:	4413      	add	r3, r2
 800497e:	823b      	strh	r3, [r7, #16]

		if (osc_calibrate_val != 0)
 8004980:	8a3b      	ldrh	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <TOF_start_continuous+0x108>
		{
			period_ms *= osc_calibrate_val;
 8004986:	8a3a      	ldrh	r2, [r7, #16]
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	617b      	str	r3, [r7, #20]
		}

		uint8_t bytes[4];

		bytes[0] = (period_ms >> 24) & 0xFF;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0e1b      	lsrs	r3, r3, #24
 8004994:	b2db      	uxtb	r3, r3
 8004996:	723b      	strb	r3, [r7, #8]
		bytes[1] = (period_ms >> 16) & 0xFF;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	b2db      	uxtb	r3, r3
 800499e:	727b      	strb	r3, [r7, #9]
		bytes[2] = (period_ms >> 8) & 0xFF;
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	0a1b      	lsrs	r3, r3, #8
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	72bb      	strb	r3, [r7, #10]
		bytes[3] = period_ms & 0xFF;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	72fb      	strb	r3, [r7, #11]

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD, bytes[0]);
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80049b4:	f993 3000 	ldrsb.w	r3, [r3]
 80049b8:	b2d9      	uxtb	r1, r3
 80049ba:	7a3b      	ldrb	r3, [r7, #8]
 80049bc:	2204      	movs	r2, #4
 80049be:	f001 fae7 	bl	8005f90 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 1, bytes[1]);
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80049c4:	6818      	ldr	r0, [r3, #0]
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80049c8:	f993 3000 	ldrsb.w	r3, [r3]
 80049cc:	b2d9      	uxtb	r1, r3
 80049ce:	7a7b      	ldrb	r3, [r7, #9]
 80049d0:	2205      	movs	r2, #5
 80049d2:	f001 fadd 	bl	8005f90 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 2, bytes[2]);
 80049d6:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80049dc:	f993 3000 	ldrsb.w	r3, [r3]
 80049e0:	b2d9      	uxtb	r1, r3
 80049e2:	7abb      	ldrb	r3, [r7, #10]
 80049e4:	2206      	movs	r2, #6
 80049e6:	f001 fad3 	bl	8005f90 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 3, bytes[3]);
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <TOF_start_continuous+0x1b4>)
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	4b12      	ldr	r3, [pc, #72]	; (8004a38 <TOF_start_continuous+0x1b0>)
 80049f0:	f993 3000 	ldrsb.w	r3, [r3]
 80049f4:	b2d9      	uxtb	r1, r3
 80049f6:	7afb      	ldrb	r3, [r7, #11]
 80049f8:	2207      	movs	r2, #7
 80049fa:	f001 fac9 	bl	8005f90 <i2cSendByteToSlaveReg>

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 80049fe:	4b0f      	ldr	r3, [pc, #60]	; (8004a3c <TOF_start_continuous+0x1b4>)
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <TOF_start_continuous+0x1b0>)
 8004a04:	f993 3000 	ldrsb.w	r3, [r3]
 8004a08:	b2d9      	uxtb	r1, r3
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f001 fabf 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004a12:	e009      	b.n	8004a28 <TOF_start_continuous+0x1a0>
	}
	else
	{
		// continuous back-to-back mode
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <TOF_start_continuous+0x1b4>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <TOF_start_continuous+0x1b0>)
 8004a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a1e:	b2d9      	uxtb	r1, r3
 8004a20:	2302      	movs	r3, #2
 8004a22:	2200      	movs	r2, #0
 8004a24:	f001 fab4 	bl	8005f90 <i2cSendByteToSlaveReg>
	}

	TOF_continuous_mode = true;
 8004a28:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <TOF_start_continuous+0x1bc>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]

	return true;
 8004a2e:	2301      	movs	r3, #1
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20000026 	.word	0x20000026
 8004a3c:	20000250 	.word	0x20000250
 8004a40:	20000254 	.word	0x20000254
 8004a44:	20000255 	.word	0x20000255

08004a48 <TOF_stop_continuous>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if continuous mode stops successfully, false otherwise.
 */
bool TOF_stop_continuous(TOFSensor_t* TOFSENS)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	889b      	ldrh	r3, [r3, #4]
 8004a54:	b25a      	sxtb	r2, r3
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004a58:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004a60:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 8004a62:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <TOF_stop_continuous+0xbc>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f083 0301 	eor.w	r3, r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <TOF_stop_continuous+0x2c>
	{
		return false;
 8004a70:	2300      	movs	r3, #0
 8004a72:	e03f      	b.n	8004af4 <TOF_stop_continuous+0xac>
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	4b20      	ldr	r3, [pc, #128]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004a7a:	f993 3000 	ldrsb.w	r3, [r3]
 8004a7e:	b2d9      	uxtb	r1, r3
 8004a80:	2301      	movs	r3, #1
 8004a82:	2200      	movs	r2, #0
 8004a84:	f001 fa84 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8004a88:	4b1d      	ldr	r3, [pc, #116]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8004a92:	b2d9      	uxtb	r1, r3
 8004a94:	2301      	movs	r3, #1
 8004a96:	22ff      	movs	r2, #255	; 0xff
 8004a98:	f001 fa7a 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8004a9c:	4b18      	ldr	r3, [pc, #96]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	4b16      	ldr	r3, [pc, #88]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004aa2:	f993 3000 	ldrsb.w	r3, [r3]
 8004aa6:	b2d9      	uxtb	r1, r3
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f001 fa70 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, 0x00);
 8004ab0:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004ab6:	f993 3000 	ldrsb.w	r3, [r3]
 8004aba:	b2d9      	uxtb	r1, r3
 8004abc:	2300      	movs	r3, #0
 8004abe:	2291      	movs	r2, #145	; 0x91
 8004ac0:	f001 fa66 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004aca:	f993 3000 	ldrsb.w	r3, [r3]
 8004ace:	b2d9      	uxtb	r1, r3
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f001 fa5c 	bl	8005f90 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004ad8:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <TOF_stop_continuous+0xb8>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <TOF_stop_continuous+0xb4>)
 8004ade:	f993 3000 	ldrsb.w	r3, [r3]
 8004ae2:	b2d9      	uxtb	r1, r3
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	22ff      	movs	r2, #255	; 0xff
 8004ae8:	f001 fa52 	bl	8005f90 <i2cSendByteToSlaveReg>

	TOF_continuous_mode = false;
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <TOF_stop_continuous+0xbc>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]

	return true;
 8004af2:	2301      	movs	r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20000026 	.word	0x20000026
 8004b00:	20000250 	.word	0x20000250
 8004b04:	20000255 	.word	0x20000255

08004b08 <TOF_read_continuous_distance>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the distance is successfully read and updated, otherwise false.
 */
bool TOF_read_continuous_distance(TOFSensor_t* TOFSENS)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	889b      	ldrh	r3, [r3, #4]
 8004b14:	b25a      	sxtb	r2, r3
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <TOF_read_continuous_distance+0x54>)
 8004b18:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <TOF_read_continuous_distance+0x58>)
 8004b20:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 8004b22:	4b10      	ldr	r3, [pc, #64]	; (8004b64 <TOF_read_continuous_distance+0x5c>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f083 0301 	eor.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <TOF_read_continuous_distance+0x2c>
	{
		return false;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e00e      	b.n	8004b52 <TOF_read_continuous_distance+0x4a>
	}

	if(!TOF_getMeasurement(TOFSENS, &TOFSENS->distanceFromTOF))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3308      	adds	r3, #8
 8004b38:	4619      	mov	r1, r3
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fdfe 	bl	800473c <TOF_getMeasurement>
 8004b40:	4603      	mov	r3, r0
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <TOF_read_continuous_distance+0x48>
	{
		return false;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	e000      	b.n	8004b52 <TOF_read_continuous_distance+0x4a>
	}

	return true;
 8004b50:	2301      	movs	r3, #1
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000026 	.word	0x20000026
 8004b60:	20000250 	.word	0x20000250
 8004b64:	20000255 	.word	0x20000255

08004b68 <TOF_set_ranging_profile>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the ranging profile was successfully set, otherwise false.
 */
bool TOF_set_ranging_profile(TOFSensor_t* TOFSENS)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	889b      	ldrh	r3, [r3, #4]
 8004b74:	b25a      	sxtb	r2, r3
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <TOF_set_ranging_profile+0xfc>)
 8004b78:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3a      	ldr	r2, [pc, #232]	; (8004c68 <TOF_set_ranging_profile+0x100>)
 8004b80:	6013      	str	r3, [r2, #0]

	bool value = false;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
	bool prevalue = false;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73bb      	strb	r3, [r7, #14]
    switch (TOFSENS->Ranging_Profiles_t) {
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	88db      	ldrh	r3, [r3, #6]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d860      	bhi.n	8004c56 <TOF_set_ranging_profile+0xee>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <TOF_set_ranging_profile+0x34>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bad 	.word	0x08004bad
 8004ba0:	08004bdd 	.word	0x08004bdd
 8004ba4:	08004c0b 	.word	0x08004c0b
 8004ba8:	08004c37 	.word	0x08004c37
    case TOF_DEFAULT_MODE_D:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 30000) == true)
 8004bac:	f247 5130 	movw	r1, #30000	; 0x7530
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f95f 	bl	8004e74 <TOF_set_measurement_timing_budget>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <TOF_set_ranging_profile+0x66>
    	{
    		TOFSENS->Ranging_Profiles_t = TOF_DEFAULT_MODE_D;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	80da      	strh	r2, [r3, #6]
    		TOFSENS->Ranging_Profile_time = 30;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	221e      	movs	r2, #30
 8004bc6:	615a      	str	r2, [r3, #20]
    		value = true;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
    		break;
 8004bcc:	e045      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
    	}
    	else
    	{
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2205      	movs	r2, #5
 8004bd2:	80da      	strh	r2, [r3, #6]
        	value = TOF_RANGINGPROFILE_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	73fb      	strb	r3, [r7, #15]
    		return false;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e03f      	b.n	8004c5c <TOF_set_ranging_profile+0xf4>
    		break;
    	}

    case TOF_HIGH_SPEED_MODE_S:
        if(TOF_set_measurement_timing_budget(TOFSENS, 20000) == true)
 8004bdc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f947 	bl	8004e74 <TOF_set_measurement_timing_budget>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d008      	beq.n	8004bfe <TOF_set_ranging_profile+0x96>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_SPEED_MODE_S;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 20;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2214      	movs	r2, #20
 8004bf6:	615a      	str	r2, [r3, #20]
        	value = true;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
        	break;
 8004bfc:	e02d      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2205      	movs	r2, #5
 8004c06:	80da      	strh	r2, [r3, #6]

        	break;
 8004c08:	e027      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
        }

    case TOF_HIGH_ACCURACY_MODE_A:
        if(TOF_set_measurement_timing_budget(TOFSENS, 200) == true)
 8004c0a:	21c8      	movs	r1, #200	; 0xc8
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f931 	bl	8004e74 <TOF_set_measurement_timing_budget>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d008      	beq.n	8004c2a <TOF_set_ranging_profile+0xc2>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_ACCURACY_MODE_A;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 200000;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <TOF_set_ranging_profile+0x104>)
 8004c22:	615a      	str	r2, [r3, #20]
        	value = true;
 8004c24:	2301      	movs	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
        	break;
 8004c28:	e017      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2205      	movs	r2, #5
 8004c32:	80da      	strh	r2, [r3, #6]
        	break;
 8004c34:	e011      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
        }

    case TOF_LONG_RANGE_MODE_R:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 33) == true)
 8004c36:	2121      	movs	r1, #33	; 0x21
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f91b 	bl	8004e74 <TOF_set_measurement_timing_budget>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <TOF_set_ranging_profile+0xe2>
    	        {
    	        	value = true;
 8004c44:	2301      	movs	r3, #1
 8004c46:	73fb      	strb	r3, [r7, #15]
    	        	break;
 8004c48:	e007      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
    	        }
    	        else
    	        {
    	        	value = TOF_RANGINGPROFILE_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
    	        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2205      	movs	r2, #5
 8004c52:	80da      	strh	r2, [r3, #6]
    	        	break;
 8004c54:	e001      	b.n	8004c5a <TOF_set_ranging_profile+0xf2>
    		break;
    	}

    default:
        // Handle an invalid profile case
        return value;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	e000      	b.n	8004c5c <TOF_set_ranging_profile+0xf4>
    }

    return value;
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000026 	.word	0x20000026
 8004c68:	20000250 	.word	0x20000250
 8004c6c:	00030d40 	.word	0x00030d40

08004c70 <TOF_get_sequence_step_enables>:
 *               - The SYSTEM_SEQUENCE_CONFIG register stores the configuration of the sequence steps used by the sensor.
 *               - Each bit in the byte represents an individual sequence step: TCC, DSS, MSRC, PRE_RANGE, FINAL_RANGE.
 *               - The SequenceStepEnables structure is populated with the status of each sequence step based on these bits.
 */
bool TOF_get_sequence_step_enables(TOFSensor_t* TOFSENS, SequenceStepEnables *enables)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	889b      	ldrh	r3, [r3, #4]
 8004c7e:	b25a      	sxtb	r2, r3
 8004c80:	4b21      	ldr	r3, [pc, #132]	; (8004d08 <TOF_get_sequence_step_enables+0x98>)
 8004c82:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <TOF_get_sequence_step_enables+0x9c>)
 8004c8a:	6013      	str	r3, [r2, #0]

    I2C_RETURN_CODE_t i2c_return;
    uint8_t sequence_config;

    // Read the byte from the TOF_REG_SYSTEM_SEQUENCE_CONFIG register
    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8004c8c:	4b1f      	ldr	r3, [pc, #124]	; (8004d0c <TOF_get_sequence_step_enables+0x9c>)
 8004c8e:	6818      	ldr	r0, [r3, #0]
 8004c90:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <TOF_get_sequence_step_enables+0x98>)
 8004c92:	f993 3000 	ldrsb.w	r3, [r3]
 8004c96:	b2d9      	uxtb	r1, r3
 8004c98:	f107 030e 	add.w	r3, r7, #14
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f001 f9c5 	bl	800602c <i2cReadByteFromSlaveReg>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	73fb      	strb	r3, [r7, #15]

    // Check if the I2C read was successful
    if (i2c_return != I2C_OK)
 8004ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <TOF_get_sequence_step_enables+0x42>
    {
        return false;  // Return false if there was an error
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e025      	b.n	8004cfe <TOF_get_sequence_step_enables+0x8e>
    }

    // Extract bit values using shifts and masks
    enables->tcc         = (sequence_config >> 4) & 0x1;  // Extract the TCC bit
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	701a      	strb	r2, [r3, #0]
    enables->dss         = (sequence_config >> 3) & 0x1;  // Extract the DSS bit
 8004cc2:	7bbb      	ldrb	r3, [r7, #14]
 8004cc4:	08db      	lsrs	r3, r3, #3
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	705a      	strb	r2, [r3, #1]
    enables->msrc        = (sequence_config >> 2) & 0x1;  // Extract the MSRC bit
 8004cd2:	7bbb      	ldrb	r3, [r7, #14]
 8004cd4:	089b      	lsrs	r3, r3, #2
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	709a      	strb	r2, [r3, #2]
    enables->pre_range   = (sequence_config >> 6) & 0x1;  // Extract the PRE_RANGE bit
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	099b      	lsrs	r3, r3, #6
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	70da      	strb	r2, [r3, #3]
    enables->final_range = (sequence_config >> 7) & 0x1;  // Extract the FINAL_RANGE bit
 8004cf2:	7bbb      	ldrb	r3, [r7, #14]
 8004cf4:	09db      	lsrs	r3, r3, #7
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	711a      	strb	r2, [r3, #4]

    return true;  // Return true if everything succeeded
 8004cfc:	2301      	movs	r3, #1
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000026 	.word	0x20000026
 8004d0c:	20000250 	.word	0x20000250

08004d10 <TOF_get_sequence_step_timeouts>:
 * @notes:
 *               - The calculated timeouts are in microseconds and are stored in the `timeouts` structure.
 *               - The VCSEL period for both pre-range and final-range steps is used to calculate the corresponding timeouts.
 */
bool TOF_get_sequence_step_timeouts(TOFSensor_t* TOFSENS, SequenceStepEnables *enables, SequenceStepTimeouts *timeouts)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	889b      	ldrh	r3, [r3, #4]
 8004d20:	b25a      	sxtb	r2, r3
 8004d22:	4b52      	ldr	r3, [pc, #328]	; (8004e6c <TOF_get_sequence_step_timeouts+0x15c>)
 8004d24:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a51      	ldr	r2, [pc, #324]	; (8004e70 <TOF_get_sequence_step_timeouts+0x160>)
 8004d2c:	6013      	str	r3, [r2, #0]

	uint8_t data;
	I2C_RETURN_CODE_t i2c_return;

    timeouts->pre_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodPreRange);
 8004d2e:	2100      	movs	r1, #0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f943 	bl	8004fbc <TOF_get_vcsel_pulse_period>
 8004d36:	4603      	mov	r3, r0
 8004d38:	461a      	mov	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	701a      	strb	r2, [r3, #0]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, &data);
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	; (8004e70 <TOF_get_sequence_step_timeouts+0x160>)
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <TOF_get_sequence_step_timeouts+0x15c>)
 8004d44:	f993 3000 	ldrsb.w	r3, [r3]
 8004d48:	b2d9      	uxtb	r1, r3
 8004d4a:	f107 0316 	add.w	r3, r7, #22
 8004d4e:	2246      	movs	r2, #70	; 0x46
 8004d50:	f001 f96c 	bl	800602c <i2cReadByteFromSlaveReg>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]
    timeouts->msrc_dss_tcc_mclks = data;
 8004d58:	7dbb      	ldrb	r3, [r7, #22]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	805a      	strh	r2, [r3, #2]

	if (i2c_return != I2C_OK)
 8004d60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <TOF_get_sequence_step_timeouts+0x5c>
	{
		return false;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	e07b      	b.n	8004e64 <TOF_get_sequence_step_timeouts+0x154>
	}
    timeouts->msrc_dss_tcc_mclks += 1;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	885b      	ldrh	r3, [r3, #2]
 8004d70:	3301      	adds	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	805a      	strh	r2, [r3, #2]
    timeouts->msrc_dss_tcc_us = timeout_mclks_to_microseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	885a      	ldrh	r2, [r3, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	4610      	mov	r0, r2
 8004d84:	f000 f9b4 	bl	80050f0 <timeout_mclks_to_microseconds>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	605a      	str	r2, [r3, #4]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004d8e:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <TOF_get_sequence_step_timeouts+0x160>)
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <TOF_get_sequence_step_timeouts+0x15c>)
 8004d94:	f993 3000 	ldrsb.w	r3, [r3]
 8004d98:	b2d9      	uxtb	r1, r3
 8004d9a:	f107 0316 	add.w	r3, r7, #22
 8004d9e:	2251      	movs	r2, #81	; 0x51
 8004da0:	f001 f944 	bl	800602c <i2cReadByteFromSlaveReg>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8004da8:	7dbb      	ldrb	r3, [r7, #22]
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8004db0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <TOF_get_sequence_step_timeouts+0xac>
    	{
    		return false;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e053      	b.n	8004e64 <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->pre_range_mclks = decode_timeout(timeouts->pre_range_mclks);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	891b      	ldrh	r3, [r3, #8]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 f97b 	bl	80050bc <decode_timeout>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	811a      	strh	r2, [r3, #8]
    timeouts->pre_range_us = timeout_mclks_to_microseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	891a      	ldrh	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f000 f989 	bl	80050f0 <timeout_mclks_to_microseconds>
 8004dde:	4602      	mov	r2, r0
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	60da      	str	r2, [r3, #12]

    timeouts->final_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodFinalRange);
 8004de4:	2101      	movs	r1, #1
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8e8 	bl	8004fbc <TOF_get_vcsel_pulse_period>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	741a      	strb	r2, [r3, #16]


    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004df4:	4b1e      	ldr	r3, [pc, #120]	; (8004e70 <TOF_get_sequence_step_timeouts+0x160>)
 8004df6:	6818      	ldr	r0, [r3, #0]
 8004df8:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <TOF_get_sequence_step_timeouts+0x15c>)
 8004dfa:	f993 3000 	ldrsb.w	r3, [r3]
 8004dfe:	b2d9      	uxtb	r1, r3
 8004e00:	f107 0316 	add.w	r3, r7, #22
 8004e04:	2271      	movs	r2, #113	; 0x71
 8004e06:	f001 f911 	bl	800602c <i2cReadByteFromSlaveReg>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8004e0e:	7dbb      	ldrb	r3, [r7, #22]
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8004e16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <TOF_get_sequence_step_timeouts+0x112>
    	{
    		return false;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e020      	b.n	8004e64 <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->final_range_mclks = decode_timeout(timeouts->final_range_mclks);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8a5b      	ldrh	r3, [r3, #18]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f948 	bl	80050bc <decode_timeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461a      	mov	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	825a      	strh	r2, [r3, #18]

    if (enables->pre_range)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	78db      	ldrb	r3, [r3, #3]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <TOF_get_sequence_step_timeouts+0x13c>
    {
        timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8a5a      	ldrh	r2, [r3, #18]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	891b      	ldrh	r3, [r3, #8]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	825a      	strh	r2, [r3, #18]
    }

    timeouts->final_range_us = timeout_mclks_to_microseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8a5a      	ldrh	r2, [r3, #18]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	7c1b      	ldrb	r3, [r3, #16]
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f000 f94a 	bl	80050f0 <timeout_mclks_to_microseconds>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	615a      	str	r2, [r3, #20]

    return true;
 8004e62:	2301      	movs	r3, #1
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000026 	.word	0x20000026
 8004e70:	20000250 	.word	0x20000250

08004e74 <TOF_set_measurement_timing_budget>:
 *               uint32_t budget_us							Desired timing budget in microseconds (µs).
 *
 * @returns:     bool: true if the timing budget was successfully set, otherwise false.
 */
bool TOF_set_measurement_timing_budget(TOFSensor_t* TOFSENS, uint32_t budget_us)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b092      	sub	sp, #72	; 0x48
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	889b      	ldrh	r3, [r3, #4]
 8004e82:	b25a      	sxtb	r2, r3
 8004e84:	4b4b      	ldr	r3, [pc, #300]	; (8004fb4 <TOF_set_measurement_timing_budget+0x140>)
 8004e86:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a4a      	ldr	r2, [pc, #296]	; (8004fb8 <TOF_set_measurement_timing_budget+0x144>)
 8004e8e:	6013      	str	r3, [r2, #0]
	I2C_RETURN_CODE_t i2c_return;

    SequenceStepEnables enables;
    SequenceStepTimeouts timeouts;

    uint16_t StartOverhead     = 1910;
 8004e90:	f240 7376 	movw	r3, #1910	; 0x776
 8004e94:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint16_t EndOverhead       = 960;
 8004e96:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004e9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t MsrcOverhead      = 660;
 8004e9c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004ea0:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t TccOverhead       = 590;
 8004ea2:	f240 234e 	movw	r3, #590	; 0x24e
 8004ea6:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t DssOverhead       = 690;
 8004ea8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004eac:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t PreRangeOverhead  = 660;
 8004eae:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004eb2:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t FinalRangeOverhead = 550;
 8004eb4:	f240 2326 	movw	r3, #550	; 0x226
 8004eb8:	867b      	strh	r3, [r7, #50]	; 0x32

    uint32_t used_budget_us = StartOverhead + EndOverhead;
 8004eba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004ebc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ebe:	4413      	add	r3, r2
 8004ec0:	647b      	str	r3, [r7, #68]	; 0x44

    // Get sequence step enables and timeouts
    TOF_get_sequence_step_enables(TOFSENS, &enables);
 8004ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7ff fed1 	bl	8004c70 <TOF_get_sequence_step_enables>
    TOF_get_sequence_step_timeouts(TOFSENS, &enables, &timeouts);
 8004ece:	f107 020c 	add.w	r2, r7, #12
 8004ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff19 	bl	8004d10 <TOF_get_sequence_step_timeouts>

    if (enables.tcc)
 8004ede:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <TOF_set_measurement_timing_budget+0x7e>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eea:	4413      	add	r3, r2
 8004eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004eee:	4413      	add	r3, r2
 8004ef0:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.dss)
 8004ef2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <TOF_set_measurement_timing_budget+0x96>
    {
        used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8004efa:	693a      	ldr	r2, [r7, #16]
 8004efc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004efe:	4413      	add	r3, r2
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f04:	4413      	add	r3, r2
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
 8004f08:	e009      	b.n	8004f1e <TOF_set_measurement_timing_budget+0xaa>
    }
    else if (enables.msrc)
 8004f0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <TOF_set_measurement_timing_budget+0xaa>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004f16:	4413      	add	r3, r2
 8004f18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f1a:	4413      	add	r3, r2
 8004f1c:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.pre_range)
 8004f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d005      	beq.n	8004f32 <TOF_set_measurement_timing_budget+0xbe>
    {
        used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f2a:	4413      	add	r3, r2
 8004f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2e:	4413      	add	r3, r2
 8004f30:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.final_range)
 8004f32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d037      	beq.n	8004faa <TOF_set_measurement_timing_budget+0x136>
    {
        used_budget_us += FinalRangeOverhead;
 8004f3a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3e:	4413      	add	r3, r2
 8004f40:	647b      	str	r3, [r7, #68]	; 0x44

        if (used_budget_us > budget_us)
 8004f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d901      	bls.n	8004f4e <TOF_set_measurement_timing_budget+0xda>
        {
            // Requested timeout too big
            return false;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e02e      	b.n	8004fac <TOF_set_measurement_timing_budget+0x138>
        }

        uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Convert the final range timeout to MCLks
        uint32_t final_range_timeout_mclks =
        timeout_microseconds_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8004f56:	7f3b      	ldrb	r3, [r7, #28]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f5c:	f000 f8f0 	bl	8005140 <timeout_microseconds_to_mclks>
 8004f60:	6438      	str	r0, [r7, #64]	; 0x40

        if (enables.pre_range)
 8004f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <TOF_set_measurement_timing_budget+0x100>
        {
            final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004f6a:	8abb      	ldrh	r3, [r7, #20]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f70:	4413      	add	r3, r2
 8004f72:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Write the final range timeout to the register

        final_range_timeout_mclks = encode_timeOut(final_range_timeout_mclks);
 8004f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 f873 	bl	8005064 <encode_timeOut>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	643b      	str	r3, [r7, #64]	; 0x40
        i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, final_range_timeout_mclks);
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <TOF_set_measurement_timing_budget+0x144>)
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	4b0b      	ldr	r3, [pc, #44]	; (8004fb4 <TOF_set_measurement_timing_budget+0x140>)
 8004f88:	f993 3000 	ldrsb.w	r3, [r3]
 8004f8c:	b2d9      	uxtb	r1, r3
 8004f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2271      	movs	r2, #113	; 0x71
 8004f94:	f000 fffc 	bl	8005f90 <i2cSendByteToSlaveReg>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (i2c_return != I2C_OK){
 8004f9e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <TOF_set_measurement_timing_budget+0x136>
            		return false;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <TOF_set_measurement_timing_budget+0x138>
            	}
        // Store the timing budget for internal reuse
        //uint32_t measurement_timing_budget_us = budget_us;
    }

    return true;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3748      	adds	r7, #72	; 0x48
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20000026 	.word	0x20000026
 8004fb8:	20000250 	.word	0x20000250

08004fbc <TOF_get_vcsel_pulse_period>:
 *               - This function reads the sensor register corresponding to the VCSEL period for either the pre-range or final-range mode.
 *               - The raw register values are decoded before returning.
 *               - A return value of 255 indicates an error during the process (either reading the register or decoding the value).
 */
uint8_t TOF_get_vcsel_pulse_period(TOFSensor_t* TOFSENS, vcselPeriodType type)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	889b      	ldrh	r3, [r3, #4]
 8004fcc:	b25a      	sxtb	r2, r3
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <TOF_get_vcsel_pulse_period+0xa0>)
 8004fd0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a22      	ldr	r2, [pc, #136]	; (8005060 <TOF_get_vcsel_pulse_period+0xa4>)
 8004fd8:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

    uint8_t vcsel_period = 255;  // Default to 255 (error case)
 8004fda:	23ff      	movs	r3, #255	; 0xff
 8004fdc:	73bb      	strb	r3, [r7, #14]

    if (type == VcselPeriodPreRange)
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d119      	bne.n	8005018 <TOF_get_vcsel_pulse_period+0x5c>
    {
        // Read the pre-range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 8004fe4:	4b1e      	ldr	r3, [pc, #120]	; (8005060 <TOF_get_vcsel_pulse_period+0xa4>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	; (800505c <TOF_get_vcsel_pulse_period+0xa0>)
 8004fea:	f993 3000 	ldrsb.w	r3, [r3]
 8004fee:	b2d9      	uxtb	r1, r3
 8004ff0:	f107 030e 	add.w	r3, r7, #14
 8004ff4:	2250      	movs	r2, #80	; 0x50
 8004ff6:	f001 f819 	bl	800602c <i2cReadByteFromSlaveReg>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8004ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <TOF_get_vcsel_pulse_period+0x4e>
    		return false;
 8005006:	2300      	movs	r3, #0
 8005008:	e023      	b.n	8005052 <TOF_get_vcsel_pulse_period+0x96>
    	}
        vcsel_period = decodeVcselPeriod(vcsel_period);
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	3301      	adds	r3, #1
 800500e:	b2db      	uxtb	r3, r3
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	73bb      	strb	r3, [r7, #14]
 8005016:	e01b      	b.n	8005050 <TOF_get_vcsel_pulse_period+0x94>
    }
    else if (type == VcselPeriodFinalRange)
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d118      	bne.n	8005050 <TOF_get_vcsel_pulse_period+0x94>
    {
        // Read the final range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <TOF_get_vcsel_pulse_period+0xa4>)
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	4b0e      	ldr	r3, [pc, #56]	; (800505c <TOF_get_vcsel_pulse_period+0xa0>)
 8005024:	f993 3000 	ldrsb.w	r3, [r3]
 8005028:	b2d9      	uxtb	r1, r3
 800502a:	f107 030e 	add.w	r3, r7, #14
 800502e:	2270      	movs	r2, #112	; 0x70
 8005030:	f000 fffc 	bl	800602c <i2cReadByteFromSlaveReg>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8005038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <TOF_get_vcsel_pulse_period+0x88>
    		return false;
 8005040:	2300      	movs	r3, #0
 8005042:	e006      	b.n	8005052 <TOF_get_vcsel_pulse_period+0x96>
    	}
    	vcsel_period = decodeVcselPeriod(vcsel_period);
 8005044:	7bbb      	ldrb	r3, [r7, #14]
 8005046:	3301      	adds	r3, #1
 8005048:	b2db      	uxtb	r3, r3
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	b2db      	uxtb	r3, r3
 800504e:	73bb      	strb	r3, [r7, #14]
    }

    return vcsel_period;
 8005050:	7bbb      	ldrb	r3, [r7, #14]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000026 	.word	0x20000026
 8005060:	20000250 	.word	0x20000250

08005064 <encode_timeOut>:
 *               - This function is crucial for converting a timeout value in macro clocks (MCLKs) into the format that can be used by the TOF sensor.
 *               - The encoded value is a 16-bit value where the higher byte represents the number of shifts, and the lower byte holds the adjusted value.
 *               - The input timeout value should be greater than zero, as the function is designed to handle positive timeouts.
 */
uint16_t encode_timeOut(uint16_t final_range_timeout_mclks)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	80fb      	strh	r3, [r7, #6]
	uint32_t ls_byte = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8005072:	2300      	movs	r3, #0
 8005074:	817b      	strh	r3, [r7, #10]

	if (final_range_timeout_mclks > 0){
 8005076:	88fb      	ldrh	r3, [r7, #6]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d018      	beq.n	80050ae <encode_timeOut+0x4a>
	ls_byte = final_range_timeout_mclks - 1;
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	3b01      	subs	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0){
 8005082:	e005      	b.n	8005090 <encode_timeOut+0x2c>
	      ls_byte >>= 1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	085b      	lsrs	r3, r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 800508a:	897b      	ldrh	r3, [r7, #10]
 800508c:	3301      	adds	r3, #1
 800508e:	817b      	strh	r3, [r7, #10]
		while ((ls_byte & 0xFFFFFF00) > 0){
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f4      	bne.n	8005084 <encode_timeOut+0x20>
	    }

	    return (ms_byte << 8) | (ls_byte & 0xFF);
 800509a:	897b      	ldrh	r3, [r7, #10]
 800509c:	021b      	lsls	r3, r3, #8
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	4313      	orrs	r3, r2
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	e000      	b.n	80050b0 <encode_timeOut+0x4c>
	  }
	  else { return 0; }
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <decode_timeout>:
 *               - This function is used to decode the timeout value from the format used by the TOF sensor's registers.
 *               - The formula used to calculate the timeout ensures that the timeout is a value greater than or equal to 1.
 *               - The decoded timeout can be used in further sensor configurations or calculations.
 */
uint16_t decode_timeout(uint16_t reg_val)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	80fb      	strh	r3, [r7, #6]
    // Formula: (LSByte * 2^MSByte) + 1
    // reg_val is a 16-bit value; the MSByte (Most Significant Byte) is the upper 8 bits
    // and the LSByte (Least Significant Byte) is the lower 8 bits.

    uint8_t msb = (reg_val >> 8) & 0xFF;  // Extract the most significant byte
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	0a1b      	lsrs	r3, r3, #8
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = reg_val & 0xFF;         // Extract the least significant byte
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	73bb      	strb	r3, [r7, #14]

    // Calculate the timeout as per the formula
    uint16_t timeout = (lsb << msb) + 1;
 80050d2:	7bba      	ldrb	r2, [r7, #14]
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	3301      	adds	r3, #1
 80050de:	81bb      	strh	r3, [r7, #12]

    return timeout;
 80050e0:	89bb      	ldrh	r3, [r7, #12]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <timeout_mclks_to_microseconds>:
 * @notes:
 *               - This function is used to convert the sensor's timeout period (expressed in MCLKs) into a more human-readable form (microseconds).
 *               - The calculation ensures the proper timing conversion based on the VCSEL period, which varies depending on the sensor configuration.
 */
uint32_t timeout_mclks_to_microseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	460a      	mov	r2, r1
 80050fa:	80fb      	strh	r3, [r7, #6]
 80050fc:	4613      	mov	r3, r2
 80050fe:	717b      	strb	r3, [r7, #5]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005100:	797b      	ldrb	r3, [r7, #5]
 8005102:	4a0d      	ldr	r2, [pc, #52]	; (8005138 <timeout_mclks_to_microseconds+0x48>)
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800510c:	4a0b      	ldr	r2, [pc, #44]	; (800513c <timeout_mclks_to_microseconds+0x4c>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	60fb      	str	r3, [r7, #12]

    // Convert the timeout period in MCLKs to microseconds

    return (uint32_t)((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8005116:	88fb      	ldrh	r3, [r7, #6]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	fb02 f303 	mul.w	r3, r2, r3
 800511e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005122:	4a06      	ldr	r2, [pc, #24]	; (800513c <timeout_mclks_to_microseconds+0x4c>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	099b      	lsrs	r3, r3, #6
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	003a2f00 	.word	0x003a2f00
 800513c:	10624dd3 	.word	0x10624dd3

08005140 <timeout_microseconds_to_mclks>:
 * @notes:
 *               - This function is used to convert a timeout period from microseconds into the raw timing unit (MCLKs), which is suitable for sensor register configurations.
 *               - The conversion takes into account the VCSEL period (in PCLKs) to properly adjust for different sensor configurations.
 */
uint32_t timeout_microseconds_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	70fb      	strb	r3, [r7, #3]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <timeout_microseconds_to_mclks+0x48>)
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005158:	4a0c      	ldr	r2, [pc, #48]	; (800518c <timeout_microseconds_to_mclks+0x4c>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	60fb      	str	r3, [r7, #12]

    // Convert timeout from microseconds to MCLKs
    // The formula uses rounding by adding (macro_period_ns / 2) before dividing
    uint32_t return_value = (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005168:	fb03 f202 	mul.w	r2, r3, r2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	085b      	lsrs	r3, r3, #1
 8005170:	441a      	add	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	60bb      	str	r3, [r7, #8]
    return return_value;
 800517a:	68bb      	ldr	r3, [r7, #8]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	003a2f00 	.word	0x003a2f00
 800518c:	10624dd3 	.word	0x10624dd3

08005190 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d03e      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051a0:	79fb      	ldrb	r3, [r7, #7]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d03b      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d038      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051ac:	79fb      	ldrb	r3, [r7, #7]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d035      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	2b04      	cmp	r3, #4
 80051b6:	d032      	beq.n	800521e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	2b05      	cmp	r3, #5
 80051bc:	d02f      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d02c      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051c4:	79fb      	ldrb	r3, [r7, #7]
 80051c6:	2b07      	cmp	r3, #7
 80051c8:	d029      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051ca:	79fb      	ldrb	r3, [r7, #7]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d026      	beq.n	800521e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b09      	cmp	r3, #9
 80051d4:	d023      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b0a      	cmp	r3, #10
 80051da:	d020      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051dc:	79fb      	ldrb	r3, [r7, #7]
 80051de:	2b0b      	cmp	r3, #11
 80051e0:	d01d      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d01a      	beq.n	800521e <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	2b0d      	cmp	r3, #13
 80051ec:	d017      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051ee:	79fb      	ldrb	r3, [r7, #7]
 80051f0:	2b0e      	cmp	r3, #14
 80051f2:	d014      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d011      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d00e      	beq.n	800521e <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	2b11      	cmp	r3, #17
 8005204:	d00b      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	2b12      	cmp	r3, #18
 800520a:	d008      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	2b14      	cmp	r3, #20
 8005210:	d005      	beq.n	800521e <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2b15      	cmp	r3, #21
 8005216:	d002      	beq.n	800521e <extiVerifyIrqNum+0x8e>
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	2b16      	cmp	r3, #22
 800521c:	d101      	bne.n	8005222 <extiVerifyIrqNum+0x92>
    {
        return true;
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <extiVerifyIrqNum+0x94>
    }
    return false;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d005      	beq.n	800524c <extiVerifyTrigger+0x1c>
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d002      	beq.n	800524c <extiVerifyTrigger+0x1c>
 8005246:	79fb      	ldrb	r3, [r7, #7]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d101      	bne.n	8005250 <extiVerifyTrigger+0x20>
    {
        return true;
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <extiVerifyTrigger+0x22>
    }
    return false;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
	...

08005260 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 8005266:	2300      	movs	r3, #0
 8005268:	71fb      	strb	r3, [r7, #7]
 800526a:	e008      	b.n	800527e <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <extiInit+0x34>)
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	3302      	adds	r3, #2
 8005272:	2100      	movs	r1, #0
 8005274:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	3301      	adds	r3, #1
 800527c:	71fb      	strb	r3, [r7, #7]
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	2b03      	cmp	r3, #3
 8005282:	d9f3      	bls.n	800526c <extiInit+0xc>
    }
}
 8005284:	bf00      	nop
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40013800 	.word	0x40013800

08005298 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f937 	bl	8005524 <gpioVerifyPort>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f083 0301 	eor.w	r3, r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 80052c2:	23ff      	movs	r3, #255	; 0xff
 80052c4:	e08a      	b.n	80053dc <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f95d 	bl	8005588 <gpioVerifyPin>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f083 0301 	eor.w	r3, r3, #1
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 80052da:	23fe      	movs	r3, #254	; 0xfe
 80052dc:	e07e      	b.n	80053dc <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	2b0f      	cmp	r3, #15
 80052e2:	d841      	bhi.n	8005368 <extiConfigIrq+0xd0>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <extiConfigIrq+0x54>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	0800532d 	.word	0x0800532d
 80052f0:	0800532d 	.word	0x0800532d
 80052f4:	0800532d 	.word	0x0800532d
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	08005339 	.word	0x08005339
 8005300:	08005339 	.word	0x08005339
 8005304:	08005339 	.word	0x08005339
 8005308:	08005339 	.word	0x08005339
 800530c:	08005349 	.word	0x08005349
 8005310:	08005349 	.word	0x08005349
 8005314:	08005349 	.word	0x08005349
 8005318:	08005349 	.word	0x08005349
 800531c:	08005359 	.word	0x08005359
 8005320:	08005359 	.word	0x08005359
 8005324:	08005359 	.word	0x08005359
 8005328:	08005359 	.word	0x08005359
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
            break;
 8005336:	e017      	b.n	8005368 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	3b04      	subs	r3, #4
 800533c:	b2db      	uxtb	r3, r3
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	73bb      	strb	r3, [r7, #14]
            index = 1;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
            break;
 8005346:	e00f      	b.n	8005368 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	3b08      	subs	r3, #8
 800534c:	b2db      	uxtb	r3, r3
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	73bb      	strb	r3, [r7, #14]
            index = 2;
 8005352:	2302      	movs	r3, #2
 8005354:	73fb      	strb	r3, [r7, #15]
            break;
 8005356:	e007      	b.n	8005368 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	3b0c      	subs	r3, #12
 800535c:	b2db      	uxtb	r3, r3
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	73bb      	strb	r3, [r7, #14]
            index = 3;
 8005362:	2303      	movs	r3, #3
 8005364:	73fb      	strb	r3, [r7, #15]
            break;
 8005366:	bf00      	nop
    }

    if (GPIOA == port)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <extiConfigIrq+0x14c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d102      	bne.n	8005376 <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 8005370:	2300      	movs	r3, #0
 8005372:	737b      	strb	r3, [r7, #13]
 8005374:	e021      	b.n	80053ba <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <extiConfigIrq+0x150>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d102      	bne.n	8005384 <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 800537e:	2301      	movs	r3, #1
 8005380:	737b      	strb	r3, [r7, #13]
 8005382:	e01a      	b.n	80053ba <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a19      	ldr	r2, [pc, #100]	; (80053ec <extiConfigIrq+0x154>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d102      	bne.n	8005392 <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 800538c:	2302      	movs	r3, #2
 800538e:	737b      	strb	r3, [r7, #13]
 8005390:	e013      	b.n	80053ba <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a16      	ldr	r2, [pc, #88]	; (80053f0 <extiConfigIrq+0x158>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d102      	bne.n	80053a0 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 800539a:	2303      	movs	r3, #3
 800539c:	737b      	strb	r3, [r7, #13]
 800539e:	e00c      	b.n	80053ba <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <extiConfigIrq+0x15c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d102      	bne.n	80053ae <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80053a8:	2304      	movs	r3, #4
 80053aa:	737b      	strb	r3, [r7, #13]
 80053ac:	e005      	b.n	80053ba <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <extiConfigIrq+0x160>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d101      	bne.n	80053ba <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80053b6:	2307      	movs	r3, #7
 80053b8:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 80053ba:	4a10      	ldr	r2, [pc, #64]	; (80053fc <extiConfigIrq+0x164>)
 80053bc:	7bfb      	ldrb	r3, [r7, #15]
 80053be:	3302      	adds	r3, #2
 80053c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053c4:	7b79      	ldrb	r1, [r7, #13]
 80053c6:	7bbb      	ldrb	r3, [r7, #14]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	4618      	mov	r0, r3
 80053ce:	490b      	ldr	r1, [pc, #44]	; (80053fc <extiConfigIrq+0x164>)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	4302      	orrs	r2, r0
 80053d4:	3302      	adds	r3, #2
 80053d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40020000 	.word	0x40020000
 80053e8:	40020400 	.word	0x40020400
 80053ec:	40020800 	.word	0x40020800
 80053f0:	40020c00 	.word	0x40020c00
 80053f4:	40021000 	.word	0x40021000
 80053f8:	40021c00 	.word	0x40021c00
 80053fc:	40013800 	.word	0x40013800

08005400 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff febf 	bl	8005190 <extiVerifyIrqNum>
 8005412:	4603      	mov	r3, r0
 8005414:	f083 0301 	eor.w	r3, r3, #1
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 800541e:	23d8      	movs	r3, #216	; 0xd8
 8005420:	e00a      	b.n	8005438 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 8005422:	4b07      	ldr	r3, [pc, #28]	; (8005440 <extiEnableIrq+0x40>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	79fa      	ldrb	r2, [r7, #7]
 8005428:	2101      	movs	r1, #1
 800542a:	fa01 f202 	lsl.w	r2, r1, r2
 800542e:	4611      	mov	r1, r2
 8005430:	4a03      	ldr	r2, [pc, #12]	; (8005440 <extiEnableIrq+0x40>)
 8005432:	430b      	orrs	r3, r1
 8005434:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40013c00 	.word	0x40013c00

08005444 <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	460a      	mov	r2, r1
 800544e:	71fb      	strb	r3, [r7, #7]
 8005450:	4613      	mov	r3, r2
 8005452:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff fe9a 	bl	8005190 <extiVerifyIrqNum>
 800545c:	4603      	mov	r3, r0
 800545e:	f083 0301 	eor.w	r3, r3, #1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 8005468:	23d8      	movs	r3, #216	; 0xd8
 800546a:	e055      	b.n	8005518 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 800546c:	79bb      	ldrb	r3, [r7, #6]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fede 	bl	8005230 <extiVerifyTrigger>
 8005474:	4603      	mov	r3, r0
 8005476:	f083 0301 	eor.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 8005480:	23d7      	movs	r3, #215	; 0xd7
 8005482:	e049      	b.n	8005518 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 8005484:	79bb      	ldrb	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d115      	bne.n	80054b6 <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 800548a:	4b25      	ldr	r3, [pc, #148]	; (8005520 <extiSetTriggerEdge+0xdc>)
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	79fa      	ldrb	r2, [r7, #7]
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	4611      	mov	r1, r2
 8005498:	4a21      	ldr	r2, [pc, #132]	; (8005520 <extiSetTriggerEdge+0xdc>)
 800549a:	430b      	orrs	r3, r1
 800549c:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	79fa      	ldrb	r2, [r7, #7]
 80054a4:	2101      	movs	r1, #1
 80054a6:	fa01 f202 	lsl.w	r2, r1, r2
 80054aa:	43d2      	mvns	r2, r2
 80054ac:	4611      	mov	r1, r2
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054b0:	400b      	ands	r3, r1
 80054b2:	60d3      	str	r3, [r2, #12]
 80054b4:	e02f      	b.n	8005516 <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80054b6:	79bb      	ldrb	r3, [r7, #6]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d115      	bne.n	80054e8 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 80054bc:	4b18      	ldr	r3, [pc, #96]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	79fa      	ldrb	r2, [r7, #7]
 80054c2:	2101      	movs	r1, #1
 80054c4:	fa01 f202 	lsl.w	r2, r1, r2
 80054c8:	4611      	mov	r1, r2
 80054ca:	4a15      	ldr	r2, [pc, #84]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054cc:	430b      	orrs	r3, r1
 80054ce:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 80054d0:	4b13      	ldr	r3, [pc, #76]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	79fa      	ldrb	r2, [r7, #7]
 80054d6:	2101      	movs	r1, #1
 80054d8:	fa01 f202 	lsl.w	r2, r1, r2
 80054dc:	43d2      	mvns	r2, r2
 80054de:	4611      	mov	r1, r2
 80054e0:	4a0f      	ldr	r2, [pc, #60]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054e2:	400b      	ands	r3, r1
 80054e4:	6093      	str	r3, [r2, #8]
 80054e6:	e016      	b.n	8005516 <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 80054e8:	79bb      	ldrb	r3, [r7, #6]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d113      	bne.n	8005516 <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	79fa      	ldrb	r2, [r7, #7]
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	4611      	mov	r1, r2
 80054fc:	4a08      	ldr	r2, [pc, #32]	; (8005520 <extiSetTriggerEdge+0xdc>)
 80054fe:	430b      	orrs	r3, r1
 8005500:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <extiSetTriggerEdge+0xdc>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	79fa      	ldrb	r2, [r7, #7]
 8005508:	2101      	movs	r1, #1
 800550a:	fa01 f202 	lsl.w	r2, r1, r2
 800550e:	4611      	mov	r1, r2
 8005510:	4a03      	ldr	r2, [pc, #12]	; (8005520 <extiSetTriggerEdge+0xdc>)
 8005512:	430b      	orrs	r3, r1
 8005514:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	40013c00 	.word	0x40013c00

08005524 <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a10      	ldr	r2, [pc, #64]	; (8005570 <gpioVerifyPort+0x4c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d013      	beq.n	800555c <gpioVerifyPort+0x38>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <gpioVerifyPort+0x50>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d00f      	beq.n	800555c <gpioVerifyPort+0x38>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a0e      	ldr	r2, [pc, #56]	; (8005578 <gpioVerifyPort+0x54>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00b      	beq.n	800555c <gpioVerifyPort+0x38>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a0d      	ldr	r2, [pc, #52]	; (800557c <gpioVerifyPort+0x58>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d007      	beq.n	800555c <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <gpioVerifyPort+0x5c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <gpioVerifyPort+0x38>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a0b      	ldr	r2, [pc, #44]	; (8005584 <gpioVerifyPort+0x60>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d101      	bne.n	8005560 <gpioVerifyPort+0x3c>
    {
        return true;
 800555c:	2301      	movs	r3, #1
 800555e:	e000      	b.n	8005562 <gpioVerifyPort+0x3e>
    }
    return false;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40020000 	.word	0x40020000
 8005574:	40020400 	.word	0x40020400
 8005578:	40020800 	.word	0x40020800
 800557c:	40020c00 	.word	0x40020c00
 8005580:	40021000 	.word	0x40021000
 8005584:	40021c00 	.word	0x40021c00

08005588 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d02c      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d029      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d026      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d023      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d020      	beq.n	80055f2 <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	d01d      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	2b06      	cmp	r3, #6
 80055ba:	d01a      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b07      	cmp	r3, #7
 80055c0:	d017      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d014      	beq.n	80055f2 <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 80055c8:	79fb      	ldrb	r3, [r7, #7]
 80055ca:	2b09      	cmp	r3, #9
 80055cc:	d011      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	2b0a      	cmp	r3, #10
 80055d2:	d00e      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b0b      	cmp	r3, #11
 80055d8:	d00b      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	2b0c      	cmp	r3, #12
 80055de:	d008      	beq.n	80055f2 <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	2b0d      	cmp	r3, #13
 80055e4:	d005      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	2b0e      	cmp	r3, #14
 80055ea:	d002      	beq.n	80055f2 <gpioVerifyPin+0x6a>
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	2b0f      	cmp	r3, #15
 80055f0:	d101      	bne.n	80055f6 <gpioVerifyPin+0x6e>
    {
        return true;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <gpioVerifyPin+0x70>
    }
    return false;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d02c      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005614:	79fb      	ldrb	r3, [r7, #7]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d029      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d026      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d023      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	2b04      	cmp	r3, #4
 800562a:	d020      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b05      	cmp	r3, #5
 8005630:	d01d      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	2b06      	cmp	r3, #6
 8005636:	d01a      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d017      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	2b08      	cmp	r3, #8
 8005642:	d014      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b09      	cmp	r3, #9
 8005648:	d011      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	2b0a      	cmp	r3, #10
 800564e:	d00e      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	2b0b      	cmp	r3, #11
 8005654:	d00b      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005656:	79fb      	ldrb	r3, [r7, #7]
 8005658:	2b0c      	cmp	r3, #12
 800565a:	d008      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	2b0d      	cmp	r3, #13
 8005660:	d005      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005662:	79fb      	ldrb	r3, [r7, #7]
 8005664:	2b0e      	cmp	r3, #14
 8005666:	d002      	beq.n	800566e <gpioVerifyAltFunc+0x6a>
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	2b0f      	cmp	r3, #15
 800566c:	d101      	bne.n	8005672 <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <gpioVerifyAltFunc+0x70>
    }

    return false;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <gpioVerifyPinMode+0x22>
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d005      	beq.n	80056a2 <gpioVerifyPinMode+0x22>
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d002      	beq.n	80056a2 <gpioVerifyPinMode+0x22>
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d101      	bne.n	80056a6 <gpioVerifyPinMode+0x26>
    {
        return true;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e000      	b.n	80056a8 <gpioVerifyPinMode+0x28>
    }

    return false;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	4603      	mov	r3, r0
 80056bc:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <gpioVerifyOutputType+0x16>
 80056c4:	79fb      	ldrb	r3, [r7, #7]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d101      	bne.n	80056ce <gpioVerifyOutputType+0x1a>
    {
        return true;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e000      	b.n	80056d0 <gpioVerifyOutputType+0x1c>
    }

    return false;
 80056ce:	2300      	movs	r3, #0
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	4603      	mov	r3, r0
 80056e4:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 80056e6:	79fb      	ldrb	r3, [r7, #7]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <gpioVerifyPushPullMode+0x1c>
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d002      	beq.n	80056f8 <gpioVerifyPushPullMode+0x1c>
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d101      	bne.n	80056fc <gpioVerifyPushPullMode+0x20>
    {
        return true;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <gpioVerifyPushPullMode+0x22>
    }
    return false;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff05 	bl	8005524 <gpioVerifyPort>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d042      	beq.n	80057a6 <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <gpioInitPort+0xa8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d106      	bne.n	8005736 <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005728:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <gpioInitPort+0xac>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4a22      	ldr	r2, [pc, #136]	; (80057b8 <gpioInitPort+0xac>)
 800572e:	f043 0301 	orr.w	r3, r3, #1
 8005732:	6313      	str	r3, [r2, #48]	; 0x30
 8005734:	e035      	b.n	80057a2 <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a20      	ldr	r2, [pc, #128]	; (80057bc <gpioInitPort+0xb0>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d106      	bne.n	800574c <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <gpioInitPort+0xac>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <gpioInitPort+0xac>)
 8005744:	f043 0302 	orr.w	r3, r3, #2
 8005748:	6313      	str	r3, [r2, #48]	; 0x30
 800574a:	e02a      	b.n	80057a2 <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <gpioInitPort+0xb4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d106      	bne.n	8005762 <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8005754:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <gpioInitPort+0xac>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <gpioInitPort+0xac>)
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	6313      	str	r3, [r2, #48]	; 0x30
 8005760:	e01f      	b.n	80057a2 <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a17      	ldr	r2, [pc, #92]	; (80057c4 <gpioInitPort+0xb8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d106      	bne.n	8005778 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800576a:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <gpioInitPort+0xac>)
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <gpioInitPort+0xac>)
 8005770:	f043 0308 	orr.w	r3, r3, #8
 8005774:	6313      	str	r3, [r2, #48]	; 0x30
 8005776:	e014      	b.n	80057a2 <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <gpioInitPort+0xbc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d106      	bne.n	800578e <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005780:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <gpioInitPort+0xac>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <gpioInitPort+0xac>)
 8005786:	f043 0310 	orr.w	r3, r3, #16
 800578a:	6313      	str	r3, [r2, #48]	; 0x30
 800578c:	e009      	b.n	80057a2 <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <gpioInitPort+0xc0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d105      	bne.n	80057a2 <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8005796:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <gpioInitPort+0xac>)
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <gpioInitPort+0xac>)
 800579c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057a0:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e001      	b.n	80057aa <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80057a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40020000 	.word	0x40020000
 80057b8:	40023800 	.word	0x40023800
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40020800 	.word	0x40020800
 80057c4:	40020c00 	.word	0x40020c00
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40021c00 	.word	0x40021c00

080057d0 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fea3 	bl	8005524 <gpioVerifyPort>
 80057de:	4603      	mov	r3, r0
 80057e0:	f083 0301 	eor.w	r3, r3, #1
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	e041      	b.n	8005874 <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a22      	ldr	r2, [pc, #136]	; (800587c <gpioSelectPort+0xac>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d106      	bne.n	8005806 <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <gpioSelectPort+0xb0>)
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <gpioSelectPort+0xb0>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6313      	str	r3, [r2, #48]	; 0x30
 8005804:	e035      	b.n	8005872 <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a1e      	ldr	r2, [pc, #120]	; (8005884 <gpioSelectPort+0xb4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d106      	bne.n	800581c <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 800580e:	4b1c      	ldr	r3, [pc, #112]	; (8005880 <gpioSelectPort+0xb0>)
 8005810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005812:	4a1b      	ldr	r2, [pc, #108]	; (8005880 <gpioSelectPort+0xb0>)
 8005814:	f043 0302 	orr.w	r3, r3, #2
 8005818:	6313      	str	r3, [r2, #48]	; 0x30
 800581a:	e02a      	b.n	8005872 <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1a      	ldr	r2, [pc, #104]	; (8005888 <gpioSelectPort+0xb8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d106      	bne.n	8005832 <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8005824:	4b16      	ldr	r3, [pc, #88]	; (8005880 <gpioSelectPort+0xb0>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <gpioSelectPort+0xb0>)
 800582a:	f043 0304 	orr.w	r3, r3, #4
 800582e:	6313      	str	r3, [r2, #48]	; 0x30
 8005830:	e01f      	b.n	8005872 <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a15      	ldr	r2, [pc, #84]	; (800588c <gpioSelectPort+0xbc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d106      	bne.n	8005848 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800583a:	4b11      	ldr	r3, [pc, #68]	; (8005880 <gpioSelectPort+0xb0>)
 800583c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583e:	4a10      	ldr	r2, [pc, #64]	; (8005880 <gpioSelectPort+0xb0>)
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	6313      	str	r3, [r2, #48]	; 0x30
 8005846:	e014      	b.n	8005872 <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a11      	ldr	r2, [pc, #68]	; (8005890 <gpioSelectPort+0xc0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d106      	bne.n	800585e <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005850:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <gpioSelectPort+0xb0>)
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <gpioSelectPort+0xb0>)
 8005856:	f043 0310 	orr.w	r3, r3, #16
 800585a:	6313      	str	r3, [r2, #48]	; 0x30
 800585c:	e009      	b.n	8005872 <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <gpioSelectPort+0xc4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d105      	bne.n	8005872 <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <gpioSelectPort+0xb0>)
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	4a05      	ldr	r2, [pc, #20]	; (8005880 <gpioSelectPort+0xb0>)
 800586c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005870:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40020000 	.word	0x40020000
 8005880:	40023800 	.word	0x40023800
 8005884:	40020400 	.word	0x40020400
 8005888:	40020800 	.word	0x40020800
 800588c:	40020c00 	.word	0x40020c00
 8005890:	40021000 	.word	0x40021000
 8005894:	40021c00 	.word	0x40021c00

08005898 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
 80058a4:	4613      	mov	r3, r2
 80058a6:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fe3b 	bl	8005524 <gpioVerifyPort>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f083 0301 	eor.w	r3, r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295
 80058be:	e032      	b.n	8005926 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff fe60 	bl	8005588 <gpioVerifyPin>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f083 0301 	eor.w	r3, r3, #1
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 80058d4:	f06f 0301 	mvn.w	r3, #1
 80058d8:	e025      	b.n	8005926 <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 80058da:	78bb      	ldrb	r3, [r7, #2]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff fecf 	bl	8005680 <gpioVerifyPinMode>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f083 0301 	eor.w	r3, r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 80058ee:	f06f 0305 	mvn.w	r3, #5
 80058f2:	e018      	b.n	8005926 <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	78fa      	ldrb	r2, [r7, #3]
 80058fa:	0052      	lsls	r2, r2, #1
 80058fc:	2103      	movs	r1, #3
 80058fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005902:	43d2      	mvns	r2, r2
 8005904:	401a      	ands	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 800590a:	78bb      	ldrb	r3, [r7, #2]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d009      	beq.n	8005924 <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	78b9      	ldrb	r1, [r7, #2]
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	0052      	lsls	r2, r2, #1
 800591a:	fa01 f202 	lsl.w	r2, r1, r2
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff fdf2 	bl	8005524 <gpioVerifyPort>
 8005940:	4603      	mov	r3, r0
 8005942:	f083 0301 	eor.w	r3, r3, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295
 8005950:	e014      	b.n	800597c <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	4618      	mov	r0, r3
 8005956:	f7ff fe17 	bl	8005588 <gpioVerifyPin>
 800595a:	4603      	mov	r3, r0
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005966:	f06f 0301 	mvn.w	r3, #1
 800596a:	e007      	b.n	800597c <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	2201      	movs	r2, #1
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fdc7 	bl	8005524 <gpioVerifyPort>
 8005996:	4603      	mov	r3, r0
 8005998:	f083 0301 	eor.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80059a2:	f04f 33ff 	mov.w	r3, #4294967295
 80059a6:	e015      	b.n	80059d4 <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 80059a8:	78fb      	ldrb	r3, [r7, #3]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fdec 	bl	8005588 <gpioVerifyPin>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f083 0301 	eor.w	r3, r3, #1
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80059bc:	f06f 0301 	mvn.w	r3, #1
 80059c0:	e008      	b.n	80059d4 <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	3310      	adds	r3, #16
 80059c6:	2201      	movs	r2, #1
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <gpioTogglePin>:
 *          <td rowspan="1">Calls the functions gpioSetPin() and gpioResetPin()</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioTogglePin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPin(pin) != true)
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fdcc 	bl	8005588 <gpioVerifyPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f083 0301 	eor.w	r3, r3, #1
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <gpioTogglePin+0x26>
    {
        return GPIO_INVALID_PIN;
 80059fc:	f06f 0301 	mvn.w	r3, #1
 8005a00:	e013      	b.n	8005a2a <gpioTogglePin+0x4e>
    }
    if (gpioGetPinState(port, pin))
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f922 	bl	8005c50 <gpioGetPinState>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <gpioTogglePin+0x42>
    {
       gpioResetPin(port, pin);
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	4619      	mov	r1, r3
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ffb4 	bl	8005984 <gpioResetPin>
 8005a1c:	e004      	b.n	8005a28 <gpioTogglePin+0x4c>
    }
    else
    {
        gpioSetPin(port, pin);
 8005a1e:	78fb      	ldrb	r3, [r7, #3]
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff83 	bl	800592e <gpioSetPin>
    }

    return GPIO_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	70fb      	strb	r3, [r7, #3]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff fd6e 	bl	8005524 <gpioVerifyPort>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f083 0301 	eor.w	r3, r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 8005a54:	f04f 33ff 	mov.w	r3, #4294967295
 8005a58:	e050      	b.n	8005afc <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 8005a5a:	78fb      	ldrb	r3, [r7, #3]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7ff fd93 	bl	8005588 <gpioVerifyPin>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 8005a6e:	f06f 0301 	mvn.w	r3, #1
 8005a72:	e043      	b.n	8005afc <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 8005a74:	78bb      	ldrb	r3, [r7, #2]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fdc4 	bl	8005604 <gpioVerifyAltFunc>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f083 0301 	eor.w	r3, r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 8005a88:	f06f 0302 	mvn.w	r3, #2
 8005a8c:	e036      	b.n	8005afc <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 8005a8e:	78fb      	ldrb	r3, [r7, #3]
 8005a90:	2202      	movs	r2, #2
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff feff 	bl	8005898 <gpioSelectPinMode>

	if (pin <= PIN7)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b07      	cmp	r3, #7
 8005a9e:	d815      	bhi.n	8005acc <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	78fa      	ldrb	r2, [r7, #3]
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	210f      	movs	r1, #15
 8005aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005aae:	43d2      	mvns	r2, r2
 8005ab0:	401a      	ands	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	78b9      	ldrb	r1, [r7, #2]
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	0092      	lsls	r2, r2, #2
 8005ac0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]
 8005aca:	e016      	b.n	8005afa <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	3a08      	subs	r2, #8
 8005ad4:	0092      	lsls	r2, r2, #2
 8005ad6:	210f      	movs	r1, #15
 8005ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8005adc:	43d2      	mvns	r2, r2
 8005ade:	401a      	ands	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	78b9      	ldrb	r1, [r7, #2]
 8005aea:	78fa      	ldrb	r2, [r7, #3]
 8005aec:	3a08      	subs	r2, #8
 8005aee:	0092      	lsls	r2, r2, #2
 8005af0:	fa01 f202 	lsl.w	r2, r1, r2
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
 8005b10:	4613      	mov	r3, r2
 8005b12:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f7ff fd05 	bl	8005524 <gpioVerifyPort>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f083 0301 	eor.w	r3, r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8005b26:	f04f 33ff 	mov.w	r3, #4294967295
 8005b2a:	e030      	b.n	8005b8e <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fd2a 	bl	8005588 <gpioVerifyPin>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f083 0301 	eor.w	r3, r3, #1
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8005b40:	f06f 0301 	mvn.w	r3, #1
 8005b44:	e023      	b.n	8005b8e <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8005b46:	78bb      	ldrb	r3, [r7, #2]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fdb3 	bl	80056b4 <gpioVerifyOutputType>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f083 0301 	eor.w	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8005b5a:	f06f 0303 	mvn.w	r3, #3
 8005b5e:	e016      	b.n	8005b8e <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	43d2      	mvns	r2, r2
 8005b6e:	401a      	ands	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8005b74:	78bb      	ldrb	r3, [r7, #2]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d108      	bne.n	8005b8c <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f202 	lsl.w	r2, r1, r2
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	70fb      	strb	r3, [r7, #3]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fcbc 	bl	8005524 <gpioVerifyPort>
 8005bac:	4603      	mov	r3, r0
 8005bae:	f083 0301 	eor.w	r3, r3, #1
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	e044      	b.n	8005c48 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7ff fce1 	bl	8005588 <gpioVerifyPin>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f083 0301 	eor.w	r3, r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005bd2:	f06f 0301 	mvn.w	r3, #1
 8005bd6:	e037      	b.n	8005c48 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8005bd8:	78bb      	ldrb	r3, [r7, #2]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fd7e 	bl	80056dc <gpioVerifyPushPullMode>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f083 0301 	eor.w	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d002      	beq.n	8005bf2 <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8005bec:	f06f 0306 	mvn.w	r3, #6
 8005bf0:	e02a      	b.n	8005c48 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	78fa      	ldrb	r2, [r7, #3]
 8005bf8:	0052      	lsls	r2, r2, #1
 8005bfa:	2103      	movs	r1, #3
 8005bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8005c00:	43d2      	mvns	r2, r2
 8005c02:	401a      	ands	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d11a      	bne.n	8005c46 <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8005c10:	78bb      	ldrb	r3, [r7, #2]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d10a      	bne.n	8005c2c <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	0052      	lsls	r2, r2, #1
 8005c1e:	2101      	movs	r1, #1
 8005c20:	fa01 f202 	lsl.w	r2, r1, r2
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	e00c      	b.n	8005c46 <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8005c2c:	78bb      	ldrb	r3, [r7, #2]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d109      	bne.n	8005c46 <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	78fa      	ldrb	r2, [r7, #3]
 8005c38:	0052      	lsls	r2, r2, #1
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3708      	adds	r7, #8
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	78fa      	ldrb	r2, [r7, #3]
 8005c62:	2101      	movs	r1, #1
 8005c64:	fa01 f202 	lsl.w	r2, r1, r2
 8005c68:	4013      	ands	r3, r2
 8005c6a:	78fa      	ldrb	r2, [r7, #3]
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8005c72:	4293      	cmp	r3, r2
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8005c9c:	bf00      	nop
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0f9      	beq.n	8005c9e <__i2c_start+0x16>
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8005ccc:	bf00      	nop
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f9      	beq.n	8005cce <__i2c_stop+0x16>
 }
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8005cf0:	bf00      	nop
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bf0c      	ite	eq
 8005cfa:	2301      	moveq	r3, #1
 8005cfc:	2300      	movne	r3, #0
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	bf0c      	ite	eq
 8005d08:	2301      	moveq	r3, #1
 8005d0a:	2300      	movne	r3, #0
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1ed      	bne.n	8005cf2 <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8005d2c:	bf00      	nop
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f9      	beq.n	8005d2e <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e002      	b.n	8005d46 <__i2c_Chk_TX_empty+0x22>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b13      	cmp	r3, #19
 8005d4a:	d9f9      	bls.n	8005d40 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8005d64:	79fb      	ldrb	r3, [r7, #7]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <i2cVerifyDutyCycle+0x16>
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
	...

08005d84 <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a13      	ldr	r2, [pc, #76]	; (8005ddc <i2cSelectI2C+0x58>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d106      	bne.n	8005da2 <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005d9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d9e:	6413      	str	r3, [r2, #64]	; 0x40
 8005da0:	e014      	b.n	8005dcc <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a0f      	ldr	r2, [pc, #60]	; (8005de4 <i2cSelectI2C+0x60>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d106      	bne.n	8005db8 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8005daa:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005db0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005db4:	6413      	str	r3, [r2, #64]	; 0x40
 8005db6:	e009      	b.n	8005dcc <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a0b      	ldr	r2, [pc, #44]	; (8005de8 <i2cSelectI2C+0x64>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d105      	bne.n	8005dcc <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	4a06      	ldr	r2, [pc, #24]	; (8005de0 <i2cSelectI2C+0x5c>)
 8005dc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dca:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40005400 	.word	0x40005400
 8005de0:	40023800 	.word	0x40023800
 8005de4:	40005800 	.word	0x40005800
 8005de8:	40005c00 	.word	0x40005c00

08005dec <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00b      	beq.n	8005e16 <i2cSetClkSpd+0x2a>
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d008      	beq.n	8005e16 <i2cSetClkSpd+0x2a>
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d005      	beq.n	8005e16 <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d002      	beq.n	8005e16 <i2cSetClkSpd+0x2a>
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d166      	bne.n	8005ee4 <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 8005e16:	bf00      	nop
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1f9      	bne.n	8005e18 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005e32:	f023 030f 	bic.w	r3, r3, #15
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d836      	bhi.n	8005eba <i2cSetClkSpd+0xce>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <i2cSetClkSpd+0x68>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e69 	.word	0x08005e69
 8005e58:	08005e77 	.word	0x08005e77
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e93 	.word	0x08005e93
 8005e64:	08005ea1 	.word	0x08005ea1
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	61da      	str	r2, [r3, #28]
				break;
 8005e74:	e02e      	b.n	8005ed4 <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	69db      	ldr	r3, [r3, #28]
 8005e7a:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	61da      	str	r2, [r3, #28]
    			break;
 8005e82:	e027      	b.n	8005ed4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	61da      	str	r2, [r3, #28]
    				break;
 8005e90:	e020      	b.n	8005ed4 <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	f043 0214 	orr.w	r2, r3, #20
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	61da      	str	r2, [r3, #28]
    			break;
 8005e9e:	e019      	b.n	8005ed4 <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	f043 0205 	orr.w	r2, r3, #5
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	61da      	str	r2, [r3, #28]
				break;
 8005eb8:	e00c      	b.n	8005ed4 <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	61da      	str	r2, [r3, #28]
    			break;
 8005ed2:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e001      	b.n	8005ee8 <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8005ee4:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	4608      	mov	r0, r1
 8005efe:	4611      	mov	r1, r2
 8005f00:	461a      	mov	r2, r3
 8005f02:	4603      	mov	r3, r0
 8005f04:	70fb      	strb	r3, [r7, #3]
 8005f06:	460b      	mov	r3, r1
 8005f08:	70bb      	strb	r3, [r7, #2]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff22 	bl	8005d5a <i2cVerifyDutyCycle>
 8005f16:	4603      	mov	r3, r0
 8005f18:	f083 0301 	eor.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8005f22:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8005f26:	e02d      	b.n	8005f84 <i2cInitI2C+0x90>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005f2e:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f023 0201 	bic.w	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8005f42:	f000 fae5 	bl	8006510 <rccGetPclk1Freq>
 8005f46:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a10      	ldr	r2, [pc, #64]	; (8005f8c <i2cInitI2C+0x98>)
 8005f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f50:	0c9a      	lsrs	r2, r3, #18
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 8005f56:	78ba      	ldrb	r2, [r7, #2]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8005f70:	787b      	ldrb	r3, [r7, #1]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff39 	bl	8005dec <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    i2cFindSlaveAddr(i2c, 1);			// first run find routine for Adr 0, work arround for result failure at first search run
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f96a 	bl	8006256 <i2cFindSlaveAddr>


    return I2C_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	431bde83 	.word	0x431bde83

08005f90 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	4608      	mov	r0, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	70fb      	strb	r3, [r7, #3]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	70bb      	strb	r3, [r7, #2]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8005faa:	bf00      	nop
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f9      	bne.n	8005fac <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fe65 	bl	8005c88 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8005fbe:	bf00      	nop
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f9      	beq.n	8005fc0 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8005fd6:	bf00      	nop
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0f9      	beq.n	8005fd8 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff fe7f 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7ff fe9a 	bl	8005d24 <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8005ff0:	78ba      	ldrb	r2, [r7, #2]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fe94 	bl	8005d24 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff fe73 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8006002:	787a      	ldrb	r2, [r7, #1]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8006008:	bf00      	nop
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f9      	beq.n	800600a <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fe66 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f7ff fe4b 	bl	8005cb8 <__i2c_stop>


    return I2C_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3708      	adds	r7, #8
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	607b      	str	r3, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	72fb      	strb	r3, [r7, #11]
 800603a:	4613      	mov	r3, r2
 800603c:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 800603e:	bf00      	nop
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f9      	bne.n	8006040 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7ff fe1b 	bl	8005c88 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8006052:	bf00      	nop
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f9      	beq.n	8006054 <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	461a      	mov	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 800606a:	bf00      	nop
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0f9      	beq.n	800606c <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff fe35 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 800607e:	7aba      	ldrb	r2, [r7, #10]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f7ff fe4d 	bl	8005d24 <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7ff fe2c 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 800609c:	bf00      	nop
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f9      	beq.n	800609e <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 80060aa:	7afb      	ldrb	r3, [r7, #11]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 80060b8:	bf00      	nop
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f9      	beq.n	80060ba <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f7ff fe08 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f7ff fded 	bl	8005cb8 <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 80060de:	bf00      	nop
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0f9      	beq.n	80060e0 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6919      	ldr	r1, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	b2ca      	uxtb	r2, r1
 80060f8:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	607b      	str	r3, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	72fb      	strb	r3, [r7, #11]
 8006112:	4613      	mov	r3, r2
 8006114:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 8006116:	bf00      	nop
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	f003 0302 	and.w	r3, r3, #2
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f9      	bne.n	8006118 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff fdaf 	bl	8005c88 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 800612a:	bf00      	nop
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f9      	beq.n	800612c <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8006138:	7afb      	ldrb	r3, [r7, #11]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	461a      	mov	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 8006142:	bf00      	nop
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f9      	beq.n	8006144 <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff fdc9 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 8006156:	7aba      	ldrb	r2, [r7, #10]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff fde1 	bl	8005d24 <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 8006162:	bf00      	nop
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0f9      	beq.n	8006164 <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f7ff fdb9 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8006182:	bf00      	nop
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f9      	beq.n	8006184 <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	f043 0301 	orr.w	r3, r3, #1
 8006198:	461a      	mov	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 800619e:	bf00      	nop
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d0f9      	beq.n	80061a0 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 80061b8:	e02e      	b.n	8006218 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 80061ba:	7e3b      	ldrb	r3, [r7, #24]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d117      	bne.n	80061f0 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f7ff fd8b 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80061d2:	bf00      	nop
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0f9      	beq.n	80061d4 <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6919      	ldr	r1, [r3, #16]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	b2ca      	uxtb	r2, r1
 80061ec:	701a      	strb	r2, [r3, #0]
            break;
 80061ee:	e016      	b.n	800621e <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fd79 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 80061f6:	bf00      	nop
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f9      	beq.n	80061f8 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6919      	ldr	r1, [r3, #16]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	607a      	str	r2, [r7, #4]
 800620e:	b2ca      	uxtb	r2, r1
 8006210:	701a      	strb	r2, [r3, #0]
            num--;
 8006212:	7e3b      	ldrb	r3, [r7, #24]
 8006214:	3b01      	subs	r3, #1
 8006216:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8006218:	7e3b      	ldrb	r3, [r7, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1cd      	bne.n	80061ba <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff fd62 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff fd47 	bl	8005cb8 <__i2c_stop>

    return I2C_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f7ff fd10 	bl	8005c88 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	461a      	mov	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f7ff fd38 	bl	8005ce8 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e002      	b.n	8006290 <i2cFindSlaveAddr+0x3a>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3301      	adds	r3, #1
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006296:	d3f8      	bcc.n	800628a <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	e000      	b.n	80062aa <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 80062a8:	2300      	movs	r3, #0
    }
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80062b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062b8:	b094      	sub	sp, #80	; 0x50
 80062ba:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80062bc:	2300      	movs	r3, #0
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 80062c0:	2300      	movs	r3, #0
 80062c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 80062c4:	2300      	movs	r3, #0
 80062c6:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 80062c8:	2300      	movs	r3, #0
 80062ca:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 80062cc:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <rccGetSysClock+0x200>)
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 030c 	and.w	r3, r3, #12
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d00d      	beq.n	80062f4 <rccGetSysClock+0x40>
 80062d8:	2b08      	cmp	r3, #8
 80062da:	f200 80e1 	bhi.w	80064a0 <rccGetSysClock+0x1ec>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <rccGetSysClock+0x34>
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d003      	beq.n	80062ee <rccGetSysClock+0x3a>
 80062e6:	e0db      	b.n	80064a0 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 80062e8:	4b73      	ldr	r3, [pc, #460]	; (80064b8 <rccGetSysClock+0x204>)
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80062ec:	e0db      	b.n	80064a6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 80062ee:	4b73      	ldr	r3, [pc, #460]	; (80064bc <rccGetSysClock+0x208>)
 80062f0:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80062f2:	e0d8      	b.n	80064a6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062f4:	4b6f      	ldr	r3, [pc, #444]	; (80064b4 <rccGetSysClock+0x200>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062fc:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062fe:	4b6d      	ldr	r3, [pc, #436]	; (80064b4 <rccGetSysClock+0x200>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d063      	beq.n	80063d2 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800630a:	4b6a      	ldr	r3, [pc, #424]	; (80064b4 <rccGetSysClock+0x200>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	099b      	lsrs	r3, r3, #6
 8006310:	2200      	movs	r2, #0
 8006312:	63bb      	str	r3, [r7, #56]	; 0x38
 8006314:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	633b      	str	r3, [r7, #48]	; 0x30
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	f04f 0000 	mov.w	r0, #0
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	0159      	lsls	r1, r3, #5
 8006334:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006338:	0150      	lsls	r0, r2, #5
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4621      	mov	r1, r4
 8006340:	1a51      	subs	r1, r2, r1
 8006342:	6139      	str	r1, [r7, #16]
 8006344:	4629      	mov	r1, r5
 8006346:	eb63 0301 	sbc.w	r3, r3, r1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006358:	4659      	mov	r1, fp
 800635a:	018b      	lsls	r3, r1, #6
 800635c:	4651      	mov	r1, sl
 800635e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006362:	4651      	mov	r1, sl
 8006364:	018a      	lsls	r2, r1, #6
 8006366:	4651      	mov	r1, sl
 8006368:	ebb2 0801 	subs.w	r8, r2, r1
 800636c:	4659      	mov	r1, fp
 800636e:	eb63 0901 	sbc.w	r9, r3, r1
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800637e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006386:	4690      	mov	r8, r2
 8006388:	4699      	mov	r9, r3
 800638a:	4623      	mov	r3, r4
 800638c:	eb18 0303 	adds.w	r3, r8, r3
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	462b      	mov	r3, r5
 8006394:	eb49 0303 	adc.w	r3, r9, r3
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063a6:	4629      	mov	r1, r5
 80063a8:	024b      	lsls	r3, r1, #9
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80063b0:	4621      	mov	r1, r4
 80063b2:	024a      	lsls	r2, r1, #9
 80063b4:	4610      	mov	r0, r2
 80063b6:	4619      	mov	r1, r3
 80063b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ba:	2200      	movs	r2, #0
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063c4:	f7fa fbf8 	bl	8000bb8 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 80063cc:	4613      	mov	r3, r2
 80063ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d0:	e058      	b.n	8006484 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80063d2:	4b38      	ldr	r3, [pc, #224]	; (80064b4 <rccGetSysClock+0x200>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	099b      	lsrs	r3, r3, #6
 80063d8:	2200      	movs	r2, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	4611      	mov	r1, r2
 80063de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063e2:	623b      	str	r3, [r7, #32]
 80063e4:	2300      	movs	r3, #0
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
 80063e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063ec:	4642      	mov	r2, r8
 80063ee:	464b      	mov	r3, r9
 80063f0:	f04f 0000 	mov.w	r0, #0
 80063f4:	f04f 0100 	mov.w	r1, #0
 80063f8:	0159      	lsls	r1, r3, #5
 80063fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063fe:	0150      	lsls	r0, r2, #5
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4641      	mov	r1, r8
 8006406:	ebb2 0a01 	subs.w	sl, r2, r1
 800640a:	4649      	mov	r1, r9
 800640c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800641c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006420:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006424:	ebb2 040a 	subs.w	r4, r2, sl
 8006428:	eb63 050b 	sbc.w	r5, r3, fp
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	00eb      	lsls	r3, r5, #3
 8006436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800643a:	00e2      	lsls	r2, r4, #3
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	4643      	mov	r3, r8
 8006442:	18e3      	adds	r3, r4, r3
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	464b      	mov	r3, r9
 8006448:	eb45 0303 	adc.w	r3, r5, r3
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4500 	ldrd	r4, r5, [r7]
 800645a:	4629      	mov	r1, r5
 800645c:	028b      	lsls	r3, r1, #10
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006464:	4621      	mov	r1, r4
 8006466:	028a      	lsls	r2, r1, #10
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646e:	2200      	movs	r2, #0
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006478:	f7fa fb9e 	bl	8000bb8 <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8006480:	4613      	mov	r3, r2
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <rccGetSysClock+0x200>)
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	0c1b      	lsrs	r3, r3, #16
 800648a:	f003 0303 	and.w	r3, r3, #3
 800648e:	3301      	adds	r3, #1
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 8006494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006498:	fbb2 f3f3 	udiv	r3, r2, r3
 800649c:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800649e:	e002      	b.n	80064a6 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <rccGetSysClock+0x204>)
 80064a2:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80064a4:	bf00      	nop
    }

    return sysClock;
 80064a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3750      	adds	r7, #80	; 0x50
 80064ac:	46bd      	mov	sp, r7
 80064ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800
 80064b8:	00f42400 	.word	0x00f42400
 80064bc:	007a1200 	.word	0x007a1200

080064c0 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 80064c6:	f7ff fef5 	bl	80062b4 <rccGetSysClock>
 80064ca:	4601      	mov	r1, r0
 80064cc:	4b0d      	ldr	r3, [pc, #52]	; (8006504 <rccGetHclkFreq+0x44>)
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d4:	22f0      	movs	r2, #240	; 0xf0
 80064d6:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	fa92 f2a2 	rbit	r2, r2
 80064de:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	fab2 f282 	clz	r2, r2
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	40d3      	lsrs	r3, r2
 80064ea:	4a07      	ldr	r2, [pc, #28]	; (8006508 <rccGetHclkFreq+0x48>)
 80064ec:	5cd3      	ldrb	r3, [r2, r3]
 80064ee:	fa21 f303 	lsr.w	r3, r1, r3
 80064f2:	4a06      	ldr	r2, [pc, #24]	; (800650c <rccGetHclkFreq+0x4c>)
 80064f4:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 80064f6:	4b05      	ldr	r3, [pc, #20]	; (800650c <rccGetHclkFreq+0x4c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	0800b600 	.word	0x0800b600
 800650c:	20000028 	.word	0x20000028

08006510 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006516:	f7ff ffd3 	bl	80064c0 <rccGetHclkFreq>
 800651a:	4601      	mov	r1, r0
 800651c:	4b0b      	ldr	r3, [pc, #44]	; (800654c <rccGetPclk1Freq+0x3c>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006524:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006528:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	fa92 f2a2 	rbit	r2, r2
 8006530:	603a      	str	r2, [r7, #0]
  return result;
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	fab2 f282 	clz	r2, r2
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	40d3      	lsrs	r3, r2
 800653c:	4a04      	ldr	r2, [pc, #16]	; (8006550 <rccGetPclk1Freq+0x40>)
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	0800b600 	.word	0x0800b600

08006554 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 800655c:	bf00      	nop
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f9      	beq.n	800655e <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 800656a:	2300      	movs	r3, #0
 800656c:	81fb      	strh	r3, [r7, #14]
 800656e:	e002      	b.n	8006576 <__spi_Chk_TX_empty+0x22>
 8006570:	89fb      	ldrh	r3, [r7, #14]
 8006572:	3301      	adds	r3, #1
 8006574:	81fb      	strh	r3, [r7, #14]
 8006576:	89fb      	ldrh	r3, [r7, #14]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d9f9      	bls.n	8006570 <__spi_Chk_TX_empty+0x1c>

}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 8006592:	bf00      	nop
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1f9      	bne.n	8006594 <__spi_Chk_notBSY+0xa>
}
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	370c      	adds	r7, #12
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <spiVerifySPI+0x3c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00b      	beq.n	80065d8 <spiVerifySPI+0x28>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a0b      	ldr	r2, [pc, #44]	; (80065f0 <spiVerifySPI+0x40>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <spiVerifySPI+0x28>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <spiVerifySPI+0x44>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <spiVerifySPI+0x28>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <spiVerifySPI+0x48>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <spiVerifySPI+0x2c>
    {
        return true;
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <spiVerifySPI+0x2e>
    }
    return false;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	40013000 	.word	0x40013000
 80065f0:	40003800 	.word	0x40003800
 80065f4:	40003c00 	.word	0x40003c00
 80065f8:	40013400 	.word	0x40013400

080065fc <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8006606:	79fb      	ldrb	r3, [r7, #7]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d014      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d011      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d00e      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	2b03      	cmp	r3, #3
 800661c:	d00b      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b04      	cmp	r3, #4
 8006622:	d008      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8006624:	79fb      	ldrb	r3, [r7, #7]
 8006626:	2b05      	cmp	r3, #5
 8006628:	d005      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	2b06      	cmp	r3, #6
 800662e:	d002      	beq.n	8006636 <spiVerifyClkDivider+0x3a>
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	2b07      	cmp	r3, #7
 8006634:	d101      	bne.n	800663a <spiVerifyClkDivider+0x3e>
    {
        return true;
 8006636:	2301      	movs	r3, #1
 8006638:	e000      	b.n	800663c <spiVerifyClkDivider+0x40>
    }
    return false;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d002      	beq.n	800665e <spiVerifySSM+0x16>
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <spiVerifySSM+0x1a>
    {
        return true;
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <spiVerifySSM+0x1c>
    }
    return false;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <spiVerifyOpMode+0x16>
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d101      	bne.n	800668a <spiVerifyOpMode+0x1a>
    {
        return true;
 8006686:	2301      	movs	r3, #1
 8006688:	e000      	b.n	800668c <spiVerifyOpMode+0x1c>
    }
    return false;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <spiVerifyPhase+0x16>
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d101      	bne.n	80066b2 <spiVerifyPhase+0x1a>
    {
        return true;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <spiVerifyPhase+0x1c>
    }
    return false;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 80066ca:	79fb      	ldrb	r3, [r7, #7]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <spiVerifyIdlePolarity+0x16>
 80066d0:	79fb      	ldrb	r3, [r7, #7]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	461a      	mov	r2, r3
 80066f6:	4603      	mov	r3, r0
 80066f8:	70fb      	strb	r3, [r7, #3]
 80066fa:	460b      	mov	r3, r1
 80066fc:	70bb      	strb	r3, [r7, #2]
 80066fe:	4613      	mov	r3, r2
 8006700:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff77 	bl	80065fc <spiVerifyClkDivider>
 800670e:	4603      	mov	r3, r0
 8006710:	f083 0301 	eor.w	r3, r3, #1
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 800671a:	f06f 0350 	mvn.w	r3, #80	; 0x50
 800671e:	e0cc      	b.n	80068ba <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8006720:	787b      	ldrb	r3, [r7, #1]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff ff90 	bl	8006648 <spiVerifySSM>
 8006728:	4603      	mov	r3, r0
 800672a:	f083 0301 	eor.w	r3, r3, #1
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8006734:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8006738:	e0bf      	b.n	80068ba <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 800673a:	7f3b      	ldrb	r3, [r7, #28]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ff97 	bl	8006670 <spiVerifyOpMode>
 8006742:	4603      	mov	r3, r0
 8006744:	f083 0301 	eor.w	r3, r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 800674e:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8006752:	e0b2      	b.n	80068ba <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8006754:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff ff9d 	bl	8006698 <spiVerifyPhase>
 800675e:	4603      	mov	r3, r0
 8006760:	f083 0301 	eor.w	r3, r3, #1
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d002      	beq.n	8006770 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 800676a:	f06f 0356 	mvn.w	r3, #86	; 0x56
 800676e:	e0a4      	b.n	80068ba <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 8006770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff ffa3 	bl	80066c0 <spiVerifyIdlePolarity>
 800677a:	4603      	mov	r3, r0
 800677c:	f083 0301 	eor.w	r3, r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 8006786:	f06f 0357 	mvn.w	r3, #87	; 0x57
 800678a:	e096      	b.n	80068ba <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	2b07      	cmp	r3, #7
 8006790:	d83a      	bhi.n	8006808 <spiInitSPI+0x120>
 8006792:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <spiInitSPI+0xb0>)
 8006794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006798:	080067b9 	.word	0x080067b9
 800679c:	080067c3 	.word	0x080067c3
 80067a0:	080067cd 	.word	0x080067cd
 80067a4:	080067d7 	.word	0x080067d7
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	080067eb 	.word	0x080067eb
 80067b0:	080067f5 	.word	0x080067f5
 80067b4:	080067ff 	.word	0x080067ff
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80067b8:	89fb      	ldrh	r3, [r7, #14]
 80067ba:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80067be:	81fb      	strh	r3, [r7, #14]
            break;
 80067c0:	e027      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	f043 0308 	orr.w	r3, r3, #8
 80067c8:	81fb      	strh	r3, [r7, #14]
            break;
 80067ca:	e022      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 80067cc:	89fb      	ldrh	r3, [r7, #14]
 80067ce:	f043 0310 	orr.w	r3, r3, #16
 80067d2:	81fb      	strh	r3, [r7, #14]
            break;
 80067d4:	e01d      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80067d6:	89fb      	ldrh	r3, [r7, #14]
 80067d8:	f043 0318 	orr.w	r3, r3, #24
 80067dc:	81fb      	strh	r3, [r7, #14]
            break;
 80067de:	e018      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 80067e0:	89fb      	ldrh	r3, [r7, #14]
 80067e2:	f043 0320 	orr.w	r3, r3, #32
 80067e6:	81fb      	strh	r3, [r7, #14]
            break;
 80067e8:	e013      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 80067ea:	89fb      	ldrh	r3, [r7, #14]
 80067ec:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80067f0:	81fb      	strh	r3, [r7, #14]
            break;
 80067f2:	e00e      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 80067f4:	89fb      	ldrh	r3, [r7, #14]
 80067f6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80067fa:	81fb      	strh	r3, [r7, #14]
            break;
 80067fc:	e009      	b.n	8006812 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80067fe:	89fb      	ldrh	r3, [r7, #14]
 8006800:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006804:	81fb      	strh	r3, [r7, #14]
            break;
 8006806:	e004      	b.n	8006812 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	f043 0318 	orr.w	r3, r3, #24
 800680e:	81fb      	strh	r3, [r7, #14]
            break;
 8006810:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8006812:	78bb      	ldrb	r3, [r7, #2]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800681e:	81fb      	strh	r3, [r7, #14]
 8006820:	e003      	b.n	800682a <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8006822:	89fb      	ldrh	r3, [r7, #14]
 8006824:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006828:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 800682a:	787b      	ldrb	r3, [r7, #1]
 800682c:	2b01      	cmp	r3, #1
 800682e:	d110      	bne.n	8006852 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006836:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8006838:	7e3b      	ldrb	r3, [r7, #24]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d104      	bne.n	8006848 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 800683e:	89fb      	ldrh	r3, [r7, #14]
 8006840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006844:	81fb      	strh	r3, [r7, #14]
 8006846:	e008      	b.n	800685a <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800684e:	81fb      	strh	r3, [r7, #14]
 8006850:	e003      	b.n	800685a <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8006852:	89fb      	ldrh	r3, [r7, #14]
 8006854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006858:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 800685a:	7f3b      	ldrb	r3, [r7, #28]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	f043 0304 	orr.w	r3, r3, #4
 8006866:	81fb      	strh	r3, [r7, #14]
 8006868:	e003      	b.n	8006872 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 800686a:	89fb      	ldrh	r3, [r7, #14]
 800686c:	f023 0304 	bic.w	r3, r3, #4
 8006870:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 8006872:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d104      	bne.n	8006884 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 800687a:	89fb      	ldrh	r3, [r7, #14]
 800687c:	f023 0301 	bic.w	r3, r3, #1
 8006880:	81fb      	strh	r3, [r7, #14]
 8006882:	e003      	b.n	800688c <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	f043 0301 	orr.w	r3, r3, #1
 800688a:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 800688c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 8006894:	89fb      	ldrh	r3, [r7, #14]
 8006896:	f023 0302 	bic.w	r3, r3, #2
 800689a:	81fb      	strh	r3, [r7, #14]
 800689c:	e003      	b.n	80068a6 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 800689e:	89fb      	ldrh	r3, [r7, #14]
 80068a0:	f043 0302 	orr.w	r3, r3, #2
 80068a4:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 80068a6:	89fa      	ldrh	r2, [r7, #14]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f846 	bl	8006944 <spiEnableSPI>

    return SPI_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop

080068c4 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a18      	ldr	r2, [pc, #96]	; (8006930 <spiSelectSPI+0x6c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d106      	bne.n	80068e2 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <spiSelectSPI+0x70>)
 80068d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d8:	4a16      	ldr	r2, [pc, #88]	; (8006934 <spiSelectSPI+0x70>)
 80068da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80068de:	6453      	str	r3, [r2, #68]	; 0x44
 80068e0:	e01f      	b.n	8006922 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a14      	ldr	r2, [pc, #80]	; (8006938 <spiSelectSPI+0x74>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d106      	bne.n	80068f8 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 80068ea:	4b12      	ldr	r3, [pc, #72]	; (8006934 <spiSelectSPI+0x70>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	4a11      	ldr	r2, [pc, #68]	; (8006934 <spiSelectSPI+0x70>)
 80068f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068f4:	6413      	str	r3, [r2, #64]	; 0x40
 80068f6:	e014      	b.n	8006922 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a10      	ldr	r2, [pc, #64]	; (800693c <spiSelectSPI+0x78>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d106      	bne.n	800690e <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <spiSelectSPI+0x70>)
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	4a0b      	ldr	r2, [pc, #44]	; (8006934 <spiSelectSPI+0x70>)
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	6413      	str	r3, [r2, #64]	; 0x40
 800690c:	e009      	b.n	8006922 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a0b      	ldr	r2, [pc, #44]	; (8006940 <spiSelectSPI+0x7c>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d105      	bne.n	8006922 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <spiSelectSPI+0x70>)
 8006918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691a:	4a06      	ldr	r2, [pc, #24]	; (8006934 <spiSelectSPI+0x70>)
 800691c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006920:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	40013000 	.word	0x40013000
 8006934:	40023800 	.word	0x40023800
 8006938:	40003800 	.word	0x40003800
 800693c:	40003c00 	.word	0x40003c00
 8006940:	40013400 	.word	0x40013400

08006944 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff fe2f 	bl	80065b0 <spiVerifySPI>
 8006952:	4603      	mov	r3, r0
 8006954:	f083 0301 	eor.w	r3, r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 800695e:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 8006962:	e006      	b.n	8006972 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	4611      	mov	r1, r2
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	71fb      	strb	r3, [r7, #7]
 800698c:	4613      	mov	r3, r2
 800698e:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fdf8 	bl	8005588 <gpioVerifyPin>
 8006998:	4603      	mov	r3, r0
 800699a:	f083 0301 	eor.w	r3, r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 80069a4:	f06f 0301 	mvn.w	r3, #1
 80069a8:	e016      	b.n	80069d8 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fdd2 	bl	8006554 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	4619      	mov	r1, r3
 80069b4:	68b8      	ldr	r0, [r7, #8]
 80069b6:	f7fe ffe5 	bl	8005984 <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 80069ba:	79ba      	ldrb	r2, [r7, #6]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff fdc7 	bl	8006554 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f7ff fddf 	bl	800658a <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	4619      	mov	r1, r3
 80069d0:	68b8      	ldr	r0, [r7, #8]
 80069d2:	f7fe ffac 	bl	800592e <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	6039      	str	r1, [r7, #0]
 80069ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	db0a      	blt.n	8006a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	490c      	ldr	r1, [pc, #48]	; (8006a2c <__NVIC_SetPriority+0x4c>)
 80069fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fe:	0112      	lsls	r2, r2, #4
 8006a00:	b2d2      	uxtb	r2, r2
 8006a02:	440b      	add	r3, r1
 8006a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a08:	e00a      	b.n	8006a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	4908      	ldr	r1, [pc, #32]	; (8006a30 <__NVIC_SetPriority+0x50>)
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	3b04      	subs	r3, #4
 8006a18:	0112      	lsls	r2, r2, #4
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	761a      	strb	r2, [r3, #24]
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	e000e100 	.word	0xe000e100
 8006a30:	e000ed00 	.word	0xe000ed00

08006a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a44:	d301      	bcc.n	8006a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a46:	2301      	movs	r3, #1
 8006a48:	e00f      	b.n	8006a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a4a:	4a0a      	ldr	r2, [pc, #40]	; (8006a74 <SysTick_Config+0x40>)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a52:	210f      	movs	r1, #15
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295
 8006a58:	f7ff ffc2 	bl	80069e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <SysTick_Config+0x40>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a62:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <SysTick_Config+0x40>)
 8006a64:	2207      	movs	r2, #7
 8006a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	e000e010 	.word	0xe000e010

08006a78 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
    *timer = millis;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	601a      	str	r2, [r3, #0]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 8006a9c:	f000 f8b2 	bl	8006c04 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <systickInit+0x24>)
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff ffc2 	bl	8006a34 <SysTick_Config>
}
 8006ab0:	bf00      	nop
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20000028 	.word	0x20000028

08006abc <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	601a      	str	r2, [r3, #0]
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <isSystickExpired+0x16>
	{
		timerState = true;
 8006aea:	2301      	movs	r3, #1
 8006aec:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3714      	adds	r7, #20
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8006b00:	4b03      	ldr	r3, [pc, #12]	; (8006b10 <SysTick_Handler+0x14>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
}
 8006b06:	bf00      	nop
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	20000224 	.word	0x20000224

08006b14 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <systickUpdateTimer+0x1a>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	1e5a      	subs	r2, r3, #1
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <systickUpdateTimer+0x2c>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	20000224 	.word	0x20000224

08006b44 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8006b50:	2300      	movs	r3, #0
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e011      	b.n	8006b7a <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <systickUpdateTimerList+0x30>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	1e5a      	subs	r2, r3, #1
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	3301      	adds	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
 8006b7a:	7bfa      	ldrb	r2, [r7, #15]
 8006b7c:	78fb      	ldrb	r3, [r7, #3]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d3e9      	bcc.n	8006b56 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8006b82:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <systickUpdateTimerList+0x50>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3714      	adds	r7, #20
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	20000224 	.word	0x20000224

08006b98 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff ff67 	bl	8006a78 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8006baa:	e006      	b.n	8006bba <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <systickDelay+0x44>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ffad 	bl	8006b14 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7ff ff8a 	bl	8006ad8 <isSystickExpired>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f083 0301 	eor.w	r3, r3, #1
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1ed      	bne.n	8006bac <systickDelay+0x14>
        }
    }
}
 8006bd0:	bf00      	nop
 8006bd2:	bf00      	nop
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000224 	.word	0x20000224

08006be0 <SystemInit>:
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <SystemInit+0x20>)
 8006be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bea:	4a05      	ldr	r2, [pc, #20]	; (8006c00 <SystemInit+0x20>)
 8006bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006bf4:	bf00      	nop
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	e000ed00 	.word	0xe000ed00

08006c04 <SystemCoreClockUpdate>:
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	2302      	movs	r3, #2
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	2300      	movs	r3, #0
 8006c18:	60bb      	str	r3, [r7, #8]
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 030c 	and.w	r3, r3, #12
 8006c26:	613b      	str	r3, [r7, #16]
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d011      	beq.n	8006c52 <SystemCoreClockUpdate+0x4e>
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d844      	bhi.n	8006cbe <SystemCoreClockUpdate+0xba>
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <SystemCoreClockUpdate+0x3e>
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d004      	beq.n	8006c4a <SystemCoreClockUpdate+0x46>
 8006c40:	e03d      	b.n	8006cbe <SystemCoreClockUpdate+0xba>
 8006c42:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006c44:	4a2c      	ldr	r2, [pc, #176]	; (8006cf8 <SystemCoreClockUpdate+0xf4>)
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	e03d      	b.n	8006cc6 <SystemCoreClockUpdate+0xc2>
 8006c4a:	4b2a      	ldr	r3, [pc, #168]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006c4c:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <SystemCoreClockUpdate+0xf8>)
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e039      	b.n	8006cc6 <SystemCoreClockUpdate+0xc2>
 8006c52:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	0d9b      	lsrs	r3, r3, #22
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	60bb      	str	r3, [r7, #8]
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c66:	607b      	str	r3, [r7, #4]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00c      	beq.n	8006c88 <SystemCoreClockUpdate+0x84>
 8006c6e:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <SystemCoreClockUpdate+0xf8>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	4a1e      	ldr	r2, [pc, #120]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006c78:	6852      	ldr	r2, [r2, #4]
 8006c7a:	0992      	lsrs	r2, r2, #6
 8006c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	e00b      	b.n	8006ca0 <SystemCoreClockUpdate+0x9c>
 8006c88:	4a1b      	ldr	r2, [pc, #108]	; (8006cf8 <SystemCoreClockUpdate+0xf4>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	4a17      	ldr	r2, [pc, #92]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006c92:	6852      	ldr	r2, [r2, #4]
 8006c94:	0992      	lsrs	r2, r2, #6
 8006c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	617b      	str	r3, [r7, #20]
 8006ca0:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	3301      	adds	r3, #1
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	4a0e      	ldr	r2, [pc, #56]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	e003      	b.n	8006cc6 <SystemCoreClockUpdate+0xc2>
 8006cbe:	4b0d      	ldr	r3, [pc, #52]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006cc0:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <SystemCoreClockUpdate+0xf4>)
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	bf00      	nop
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <SystemCoreClockUpdate+0xec>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	f003 030f 	and.w	r3, r3, #15
 8006cd0:	4a0b      	ldr	r2, [pc, #44]	; (8006d00 <SystemCoreClockUpdate+0xfc>)
 8006cd2:	5cd3      	ldrb	r3, [r2, r3]
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce0:	4a04      	ldr	r2, [pc, #16]	; (8006cf4 <SystemCoreClockUpdate+0xf0>)
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	20000028 	.word	0x20000028
 8006cf8:	00f42400 	.word	0x00f42400
 8006cfc:	007a1200 	.word	0x007a1200
 8006d00:	0800b610 	.word	0x0800b610

08006d04 <__libc_init_array>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4d0d      	ldr	r5, [pc, #52]	; (8006d3c <__libc_init_array+0x38>)
 8006d08:	4c0d      	ldr	r4, [pc, #52]	; (8006d40 <__libc_init_array+0x3c>)
 8006d0a:	1b64      	subs	r4, r4, r5
 8006d0c:	10a4      	asrs	r4, r4, #2
 8006d0e:	2600      	movs	r6, #0
 8006d10:	42a6      	cmp	r6, r4
 8006d12:	d109      	bne.n	8006d28 <__libc_init_array+0x24>
 8006d14:	4d0b      	ldr	r5, [pc, #44]	; (8006d44 <__libc_init_array+0x40>)
 8006d16:	4c0c      	ldr	r4, [pc, #48]	; (8006d48 <__libc_init_array+0x44>)
 8006d18:	f003 fff0 	bl	800acfc <_init>
 8006d1c:	1b64      	subs	r4, r4, r5
 8006d1e:	10a4      	asrs	r4, r4, #2
 8006d20:	2600      	movs	r6, #0
 8006d22:	42a6      	cmp	r6, r4
 8006d24:	d105      	bne.n	8006d32 <__libc_init_array+0x2e>
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d2c:	4798      	blx	r3
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7ee      	b.n	8006d10 <__libc_init_array+0xc>
 8006d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d36:	4798      	blx	r3
 8006d38:	3601      	adds	r6, #1
 8006d3a:	e7f2      	b.n	8006d22 <__libc_init_array+0x1e>
 8006d3c:	0800bbe0 	.word	0x0800bbe0
 8006d40:	0800bbe0 	.word	0x0800bbe0
 8006d44:	0800bbe0 	.word	0x0800bbe0
 8006d48:	0800bbe4 	.word	0x0800bbe4

08006d4c <memset>:
 8006d4c:	4402      	add	r2, r0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d100      	bne.n	8006d56 <memset+0xa>
 8006d54:	4770      	bx	lr
 8006d56:	f803 1b01 	strb.w	r1, [r3], #1
 8006d5a:	e7f9      	b.n	8006d50 <memset+0x4>

08006d5c <__cvt>:
 8006d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	ec55 4b10 	vmov	r4, r5, d0
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	460e      	mov	r6, r1
 8006d68:	4619      	mov	r1, r3
 8006d6a:	462b      	mov	r3, r5
 8006d6c:	bfbb      	ittet	lt
 8006d6e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006d72:	461d      	movlt	r5, r3
 8006d74:	2300      	movge	r3, #0
 8006d76:	232d      	movlt	r3, #45	; 0x2d
 8006d78:	700b      	strb	r3, [r1, #0]
 8006d7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d7c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006d80:	4691      	mov	r9, r2
 8006d82:	f023 0820 	bic.w	r8, r3, #32
 8006d86:	bfbc      	itt	lt
 8006d88:	4622      	movlt	r2, r4
 8006d8a:	4614      	movlt	r4, r2
 8006d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d90:	d005      	beq.n	8006d9e <__cvt+0x42>
 8006d92:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006d96:	d100      	bne.n	8006d9a <__cvt+0x3e>
 8006d98:	3601      	adds	r6, #1
 8006d9a:	2102      	movs	r1, #2
 8006d9c:	e000      	b.n	8006da0 <__cvt+0x44>
 8006d9e:	2103      	movs	r1, #3
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9301      	str	r3, [sp, #4]
 8006da4:	ab02      	add	r3, sp, #8
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	ec45 4b10 	vmov	d0, r4, r5
 8006dac:	4653      	mov	r3, sl
 8006dae:	4632      	mov	r2, r6
 8006db0:	f000 fcea 	bl	8007788 <_dtoa_r>
 8006db4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006db8:	4607      	mov	r7, r0
 8006dba:	d102      	bne.n	8006dc2 <__cvt+0x66>
 8006dbc:	f019 0f01 	tst.w	r9, #1
 8006dc0:	d022      	beq.n	8006e08 <__cvt+0xac>
 8006dc2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dc6:	eb07 0906 	add.w	r9, r7, r6
 8006dca:	d110      	bne.n	8006dee <__cvt+0x92>
 8006dcc:	783b      	ldrb	r3, [r7, #0]
 8006dce:	2b30      	cmp	r3, #48	; 0x30
 8006dd0:	d10a      	bne.n	8006de8 <__cvt+0x8c>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dde:	b918      	cbnz	r0, 8006de8 <__cvt+0x8c>
 8006de0:	f1c6 0601 	rsb	r6, r6, #1
 8006de4:	f8ca 6000 	str.w	r6, [sl]
 8006de8:	f8da 3000 	ldr.w	r3, [sl]
 8006dec:	4499      	add	r9, r3
 8006dee:	2200      	movs	r2, #0
 8006df0:	2300      	movs	r3, #0
 8006df2:	4620      	mov	r0, r4
 8006df4:	4629      	mov	r1, r5
 8006df6:	f7f9 fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dfa:	b108      	cbz	r0, 8006e00 <__cvt+0xa4>
 8006dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e00:	2230      	movs	r2, #48	; 0x30
 8006e02:	9b03      	ldr	r3, [sp, #12]
 8006e04:	454b      	cmp	r3, r9
 8006e06:	d307      	bcc.n	8006e18 <__cvt+0xbc>
 8006e08:	9b03      	ldr	r3, [sp, #12]
 8006e0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e0c:	1bdb      	subs	r3, r3, r7
 8006e0e:	4638      	mov	r0, r7
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	b004      	add	sp, #16
 8006e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e18:	1c59      	adds	r1, r3, #1
 8006e1a:	9103      	str	r1, [sp, #12]
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e7f0      	b.n	8006e02 <__cvt+0xa6>

08006e20 <__exponent>:
 8006e20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e22:	4603      	mov	r3, r0
 8006e24:	2900      	cmp	r1, #0
 8006e26:	bfb8      	it	lt
 8006e28:	4249      	neglt	r1, r1
 8006e2a:	f803 2b02 	strb.w	r2, [r3], #2
 8006e2e:	bfb4      	ite	lt
 8006e30:	222d      	movlt	r2, #45	; 0x2d
 8006e32:	222b      	movge	r2, #43	; 0x2b
 8006e34:	2909      	cmp	r1, #9
 8006e36:	7042      	strb	r2, [r0, #1]
 8006e38:	dd2a      	ble.n	8006e90 <__exponent+0x70>
 8006e3a:	f10d 0407 	add.w	r4, sp, #7
 8006e3e:	46a4      	mov	ip, r4
 8006e40:	270a      	movs	r7, #10
 8006e42:	46a6      	mov	lr, r4
 8006e44:	460a      	mov	r2, r1
 8006e46:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e4a:	fb07 1516 	mls	r5, r7, r6, r1
 8006e4e:	3530      	adds	r5, #48	; 0x30
 8006e50:	2a63      	cmp	r2, #99	; 0x63
 8006e52:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	dcf1      	bgt.n	8006e42 <__exponent+0x22>
 8006e5e:	3130      	adds	r1, #48	; 0x30
 8006e60:	f1ae 0502 	sub.w	r5, lr, #2
 8006e64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006e68:	1c44      	adds	r4, r0, #1
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	4561      	cmp	r1, ip
 8006e6e:	d30a      	bcc.n	8006e86 <__exponent+0x66>
 8006e70:	f10d 0209 	add.w	r2, sp, #9
 8006e74:	eba2 020e 	sub.w	r2, r2, lr
 8006e78:	4565      	cmp	r5, ip
 8006e7a:	bf88      	it	hi
 8006e7c:	2200      	movhi	r2, #0
 8006e7e:	4413      	add	r3, r2
 8006e80:	1a18      	subs	r0, r3, r0
 8006e82:	b003      	add	sp, #12
 8006e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006e8e:	e7ed      	b.n	8006e6c <__exponent+0x4c>
 8006e90:	2330      	movs	r3, #48	; 0x30
 8006e92:	3130      	adds	r1, #48	; 0x30
 8006e94:	7083      	strb	r3, [r0, #2]
 8006e96:	70c1      	strb	r1, [r0, #3]
 8006e98:	1d03      	adds	r3, r0, #4
 8006e9a:	e7f1      	b.n	8006e80 <__exponent+0x60>

08006e9c <_printf_float>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	ed2d 8b02 	vpush	{d8}
 8006ea4:	b08d      	sub	sp, #52	; 0x34
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006eac:	4616      	mov	r6, r2
 8006eae:	461f      	mov	r7, r3
 8006eb0:	4605      	mov	r5, r0
 8006eb2:	f001 fa57 	bl	8008364 <_localeconv_r>
 8006eb6:	f8d0 a000 	ldr.w	sl, [r0]
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f7f9 f990 	bl	80001e0 <strlen>
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8006ecc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	f103 0208 	add.w	r2, r3, #8
 8006eda:	f8c8 2000 	str.w	r2, [r8]
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ee6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006eea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006eee:	9307      	str	r3, [sp, #28]
 8006ef0:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ef4:	ee08 0a10 	vmov	s16, r0
 8006ef8:	4b9f      	ldr	r3, [pc, #636]	; (8007178 <_printf_float+0x2dc>)
 8006efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006efe:	f04f 32ff 	mov.w	r2, #4294967295
 8006f02:	f7f9 fe1b 	bl	8000b3c <__aeabi_dcmpun>
 8006f06:	bb88      	cbnz	r0, 8006f6c <_printf_float+0xd0>
 8006f08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f0c:	4b9a      	ldr	r3, [pc, #616]	; (8007178 <_printf_float+0x2dc>)
 8006f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f12:	f7f9 fdf5 	bl	8000b00 <__aeabi_dcmple>
 8006f16:	bb48      	cbnz	r0, 8006f6c <_printf_float+0xd0>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	4649      	mov	r1, r9
 8006f20:	f7f9 fde4 	bl	8000aec <__aeabi_dcmplt>
 8006f24:	b110      	cbz	r0, 8006f2c <_printf_float+0x90>
 8006f26:	232d      	movs	r3, #45	; 0x2d
 8006f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f2c:	4b93      	ldr	r3, [pc, #588]	; (800717c <_printf_float+0x2e0>)
 8006f2e:	4894      	ldr	r0, [pc, #592]	; (8007180 <_printf_float+0x2e4>)
 8006f30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f34:	bf94      	ite	ls
 8006f36:	4698      	movls	r8, r3
 8006f38:	4680      	movhi	r8, r0
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	6123      	str	r3, [r4, #16]
 8006f3e:	9b05      	ldr	r3, [sp, #20]
 8006f40:	f023 0204 	bic.w	r2, r3, #4
 8006f44:	6022      	str	r2, [r4, #0]
 8006f46:	f04f 0900 	mov.w	r9, #0
 8006f4a:	9700      	str	r7, [sp, #0]
 8006f4c:	4633      	mov	r3, r6
 8006f4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f9d8 	bl	8007308 <_printf_common>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	f040 8090 	bne.w	800707e <_printf_float+0x1e2>
 8006f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f62:	b00d      	add	sp, #52	; 0x34
 8006f64:	ecbd 8b02 	vpop	{d8}
 8006f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	464b      	mov	r3, r9
 8006f70:	4640      	mov	r0, r8
 8006f72:	4649      	mov	r1, r9
 8006f74:	f7f9 fde2 	bl	8000b3c <__aeabi_dcmpun>
 8006f78:	b140      	cbz	r0, 8006f8c <_printf_float+0xf0>
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	bfbc      	itt	lt
 8006f80:	232d      	movlt	r3, #45	; 0x2d
 8006f82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006f86:	487f      	ldr	r0, [pc, #508]	; (8007184 <_printf_float+0x2e8>)
 8006f88:	4b7f      	ldr	r3, [pc, #508]	; (8007188 <_printf_float+0x2ec>)
 8006f8a:	e7d1      	b.n	8006f30 <_printf_float+0x94>
 8006f8c:	6863      	ldr	r3, [r4, #4]
 8006f8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006f92:	9206      	str	r2, [sp, #24]
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	d13f      	bne.n	8007018 <_printf_float+0x17c>
 8006f98:	2306      	movs	r3, #6
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	9b05      	ldr	r3, [sp, #20]
 8006f9e:	6861      	ldr	r1, [r4, #4]
 8006fa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	ab0a      	add	r3, sp, #40	; 0x28
 8006faa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006fae:	ab09      	add	r3, sp, #36	; 0x24
 8006fb0:	ec49 8b10 	vmov	d0, r8, r9
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f7ff fecd 	bl	8006d5c <__cvt>
 8006fc2:	9b06      	ldr	r3, [sp, #24]
 8006fc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fc6:	2b47      	cmp	r3, #71	; 0x47
 8006fc8:	4680      	mov	r8, r0
 8006fca:	d108      	bne.n	8006fde <_printf_float+0x142>
 8006fcc:	1cc8      	adds	r0, r1, #3
 8006fce:	db02      	blt.n	8006fd6 <_printf_float+0x13a>
 8006fd0:	6863      	ldr	r3, [r4, #4]
 8006fd2:	4299      	cmp	r1, r3
 8006fd4:	dd41      	ble.n	800705a <_printf_float+0x1be>
 8006fd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8006fda:	fa5f fb8b 	uxtb.w	fp, fp
 8006fde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe2:	d820      	bhi.n	8007026 <_printf_float+0x18a>
 8006fe4:	3901      	subs	r1, #1
 8006fe6:	465a      	mov	r2, fp
 8006fe8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006fec:	9109      	str	r1, [sp, #36]	; 0x24
 8006fee:	f7ff ff17 	bl	8006e20 <__exponent>
 8006ff2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ff4:	1813      	adds	r3, r2, r0
 8006ff6:	2a01      	cmp	r2, #1
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	dc02      	bgt.n	8007004 <_printf_float+0x168>
 8006ffe:	6822      	ldr	r2, [r4, #0]
 8007000:	07d2      	lsls	r2, r2, #31
 8007002:	d501      	bpl.n	8007008 <_printf_float+0x16c>
 8007004:	3301      	adds	r3, #1
 8007006:	6123      	str	r3, [r4, #16]
 8007008:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800700c:	2b00      	cmp	r3, #0
 800700e:	d09c      	beq.n	8006f4a <_printf_float+0xae>
 8007010:	232d      	movs	r3, #45	; 0x2d
 8007012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007016:	e798      	b.n	8006f4a <_printf_float+0xae>
 8007018:	9a06      	ldr	r2, [sp, #24]
 800701a:	2a47      	cmp	r2, #71	; 0x47
 800701c:	d1be      	bne.n	8006f9c <_printf_float+0x100>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1bc      	bne.n	8006f9c <_printf_float+0x100>
 8007022:	2301      	movs	r3, #1
 8007024:	e7b9      	b.n	8006f9a <_printf_float+0xfe>
 8007026:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800702a:	d118      	bne.n	800705e <_printf_float+0x1c2>
 800702c:	2900      	cmp	r1, #0
 800702e:	6863      	ldr	r3, [r4, #4]
 8007030:	dd0b      	ble.n	800704a <_printf_float+0x1ae>
 8007032:	6121      	str	r1, [r4, #16]
 8007034:	b913      	cbnz	r3, 800703c <_printf_float+0x1a0>
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	07d0      	lsls	r0, r2, #31
 800703a:	d502      	bpl.n	8007042 <_printf_float+0x1a6>
 800703c:	3301      	adds	r3, #1
 800703e:	440b      	add	r3, r1
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	65a1      	str	r1, [r4, #88]	; 0x58
 8007044:	f04f 0900 	mov.w	r9, #0
 8007048:	e7de      	b.n	8007008 <_printf_float+0x16c>
 800704a:	b913      	cbnz	r3, 8007052 <_printf_float+0x1b6>
 800704c:	6822      	ldr	r2, [r4, #0]
 800704e:	07d2      	lsls	r2, r2, #31
 8007050:	d501      	bpl.n	8007056 <_printf_float+0x1ba>
 8007052:	3302      	adds	r3, #2
 8007054:	e7f4      	b.n	8007040 <_printf_float+0x1a4>
 8007056:	2301      	movs	r3, #1
 8007058:	e7f2      	b.n	8007040 <_printf_float+0x1a4>
 800705a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800705e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007060:	4299      	cmp	r1, r3
 8007062:	db05      	blt.n	8007070 <_printf_float+0x1d4>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	6121      	str	r1, [r4, #16]
 8007068:	07d8      	lsls	r0, r3, #31
 800706a:	d5ea      	bpl.n	8007042 <_printf_float+0x1a6>
 800706c:	1c4b      	adds	r3, r1, #1
 800706e:	e7e7      	b.n	8007040 <_printf_float+0x1a4>
 8007070:	2900      	cmp	r1, #0
 8007072:	bfd4      	ite	le
 8007074:	f1c1 0202 	rsble	r2, r1, #2
 8007078:	2201      	movgt	r2, #1
 800707a:	4413      	add	r3, r2
 800707c:	e7e0      	b.n	8007040 <_printf_float+0x1a4>
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	055a      	lsls	r2, r3, #21
 8007082:	d407      	bmi.n	8007094 <_printf_float+0x1f8>
 8007084:	6923      	ldr	r3, [r4, #16]
 8007086:	4642      	mov	r2, r8
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	d12c      	bne.n	80070ec <_printf_float+0x250>
 8007092:	e764      	b.n	8006f5e <_printf_float+0xc2>
 8007094:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007098:	f240 80e0 	bls.w	800725c <_printf_float+0x3c0>
 800709c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070a0:	2200      	movs	r2, #0
 80070a2:	2300      	movs	r3, #0
 80070a4:	f7f9 fd18 	bl	8000ad8 <__aeabi_dcmpeq>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d034      	beq.n	8007116 <_printf_float+0x27a>
 80070ac:	4a37      	ldr	r2, [pc, #220]	; (800718c <_printf_float+0x2f0>)
 80070ae:	2301      	movs	r3, #1
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f af51 	beq.w	8006f5e <_printf_float+0xc2>
 80070bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070c0:	429a      	cmp	r2, r3
 80070c2:	db02      	blt.n	80070ca <_printf_float+0x22e>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	07d8      	lsls	r0, r3, #31
 80070c8:	d510      	bpl.n	80070ec <_printf_float+0x250>
 80070ca:	ee18 3a10 	vmov	r3, s16
 80070ce:	4652      	mov	r2, sl
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	f43f af41 	beq.w	8006f5e <_printf_float+0xc2>
 80070dc:	f04f 0800 	mov.w	r8, #0
 80070e0:	f104 091a 	add.w	r9, r4, #26
 80070e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	4543      	cmp	r3, r8
 80070ea:	dc09      	bgt.n	8007100 <_printf_float+0x264>
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	079b      	lsls	r3, r3, #30
 80070f0:	f100 8105 	bmi.w	80072fe <_printf_float+0x462>
 80070f4:	68e0      	ldr	r0, [r4, #12]
 80070f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070f8:	4298      	cmp	r0, r3
 80070fa:	bfb8      	it	lt
 80070fc:	4618      	movlt	r0, r3
 80070fe:	e730      	b.n	8006f62 <_printf_float+0xc6>
 8007100:	2301      	movs	r3, #1
 8007102:	464a      	mov	r2, r9
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	47b8      	blx	r7
 800710a:	3001      	adds	r0, #1
 800710c:	f43f af27 	beq.w	8006f5e <_printf_float+0xc2>
 8007110:	f108 0801 	add.w	r8, r8, #1
 8007114:	e7e6      	b.n	80070e4 <_printf_float+0x248>
 8007116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	dc39      	bgt.n	8007190 <_printf_float+0x2f4>
 800711c:	4a1b      	ldr	r2, [pc, #108]	; (800718c <_printf_float+0x2f0>)
 800711e:	2301      	movs	r3, #1
 8007120:	4631      	mov	r1, r6
 8007122:	4628      	mov	r0, r5
 8007124:	47b8      	blx	r7
 8007126:	3001      	adds	r0, #1
 8007128:	f43f af19 	beq.w	8006f5e <_printf_float+0xc2>
 800712c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007130:	4313      	orrs	r3, r2
 8007132:	d102      	bne.n	800713a <_printf_float+0x29e>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	07d9      	lsls	r1, r3, #31
 8007138:	d5d8      	bpl.n	80070ec <_printf_float+0x250>
 800713a:	ee18 3a10 	vmov	r3, s16
 800713e:	4652      	mov	r2, sl
 8007140:	4631      	mov	r1, r6
 8007142:	4628      	mov	r0, r5
 8007144:	47b8      	blx	r7
 8007146:	3001      	adds	r0, #1
 8007148:	f43f af09 	beq.w	8006f5e <_printf_float+0xc2>
 800714c:	f04f 0900 	mov.w	r9, #0
 8007150:	f104 0a1a 	add.w	sl, r4, #26
 8007154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007156:	425b      	negs	r3, r3
 8007158:	454b      	cmp	r3, r9
 800715a:	dc01      	bgt.n	8007160 <_printf_float+0x2c4>
 800715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715e:	e792      	b.n	8007086 <_printf_float+0x1ea>
 8007160:	2301      	movs	r3, #1
 8007162:	4652      	mov	r2, sl
 8007164:	4631      	mov	r1, r6
 8007166:	4628      	mov	r0, r5
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	f43f aef7 	beq.w	8006f5e <_printf_float+0xc2>
 8007170:	f109 0901 	add.w	r9, r9, #1
 8007174:	e7ee      	b.n	8007154 <_printf_float+0x2b8>
 8007176:	bf00      	nop
 8007178:	7fefffff 	.word	0x7fefffff
 800717c:	0800b624 	.word	0x0800b624
 8007180:	0800b628 	.word	0x0800b628
 8007184:	0800b630 	.word	0x0800b630
 8007188:	0800b62c 	.word	0x0800b62c
 800718c:	0800b634 	.word	0x0800b634
 8007190:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007194:	429a      	cmp	r2, r3
 8007196:	bfa8      	it	ge
 8007198:	461a      	movge	r2, r3
 800719a:	2a00      	cmp	r2, #0
 800719c:	4691      	mov	r9, r2
 800719e:	dc37      	bgt.n	8007210 <_printf_float+0x374>
 80071a0:	f04f 0b00 	mov.w	fp, #0
 80071a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071a8:	f104 021a 	add.w	r2, r4, #26
 80071ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071ae:	9305      	str	r3, [sp, #20]
 80071b0:	eba3 0309 	sub.w	r3, r3, r9
 80071b4:	455b      	cmp	r3, fp
 80071b6:	dc33      	bgt.n	8007220 <_printf_float+0x384>
 80071b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071bc:	429a      	cmp	r2, r3
 80071be:	db3b      	blt.n	8007238 <_printf_float+0x39c>
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d438      	bmi.n	8007238 <_printf_float+0x39c>
 80071c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c8:	9a05      	ldr	r2, [sp, #20]
 80071ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071cc:	1a9a      	subs	r2, r3, r2
 80071ce:	eba3 0901 	sub.w	r9, r3, r1
 80071d2:	4591      	cmp	r9, r2
 80071d4:	bfa8      	it	ge
 80071d6:	4691      	movge	r9, r2
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	dc35      	bgt.n	800724a <_printf_float+0x3ae>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e6:	f104 0a1a 	add.w	sl, r4, #26
 80071ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	eba3 0309 	sub.w	r3, r3, r9
 80071f4:	4543      	cmp	r3, r8
 80071f6:	f77f af79 	ble.w	80070ec <_printf_float+0x250>
 80071fa:	2301      	movs	r3, #1
 80071fc:	4652      	mov	r2, sl
 80071fe:	4631      	mov	r1, r6
 8007200:	4628      	mov	r0, r5
 8007202:	47b8      	blx	r7
 8007204:	3001      	adds	r0, #1
 8007206:	f43f aeaa 	beq.w	8006f5e <_printf_float+0xc2>
 800720a:	f108 0801 	add.w	r8, r8, #1
 800720e:	e7ec      	b.n	80071ea <_printf_float+0x34e>
 8007210:	4613      	mov	r3, r2
 8007212:	4631      	mov	r1, r6
 8007214:	4642      	mov	r2, r8
 8007216:	4628      	mov	r0, r5
 8007218:	47b8      	blx	r7
 800721a:	3001      	adds	r0, #1
 800721c:	d1c0      	bne.n	80071a0 <_printf_float+0x304>
 800721e:	e69e      	b.n	8006f5e <_printf_float+0xc2>
 8007220:	2301      	movs	r3, #1
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	9205      	str	r2, [sp, #20]
 8007228:	47b8      	blx	r7
 800722a:	3001      	adds	r0, #1
 800722c:	f43f ae97 	beq.w	8006f5e <_printf_float+0xc2>
 8007230:	9a05      	ldr	r2, [sp, #20]
 8007232:	f10b 0b01 	add.w	fp, fp, #1
 8007236:	e7b9      	b.n	80071ac <_printf_float+0x310>
 8007238:	ee18 3a10 	vmov	r3, s16
 800723c:	4652      	mov	r2, sl
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d1be      	bne.n	80071c6 <_printf_float+0x32a>
 8007248:	e689      	b.n	8006f5e <_printf_float+0xc2>
 800724a:	9a05      	ldr	r2, [sp, #20]
 800724c:	464b      	mov	r3, r9
 800724e:	4442      	add	r2, r8
 8007250:	4631      	mov	r1, r6
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	d1c1      	bne.n	80071de <_printf_float+0x342>
 800725a:	e680      	b.n	8006f5e <_printf_float+0xc2>
 800725c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800725e:	2a01      	cmp	r2, #1
 8007260:	dc01      	bgt.n	8007266 <_printf_float+0x3ca>
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d538      	bpl.n	80072d8 <_printf_float+0x43c>
 8007266:	2301      	movs	r3, #1
 8007268:	4642      	mov	r2, r8
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	47b8      	blx	r7
 8007270:	3001      	adds	r0, #1
 8007272:	f43f ae74 	beq.w	8006f5e <_printf_float+0xc2>
 8007276:	ee18 3a10 	vmov	r3, s16
 800727a:	4652      	mov	r2, sl
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f ae6b 	beq.w	8006f5e <_printf_float+0xc2>
 8007288:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	f7f9 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8007294:	b9d8      	cbnz	r0, 80072ce <_printf_float+0x432>
 8007296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007298:	f108 0201 	add.w	r2, r8, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	d10e      	bne.n	80072c6 <_printf_float+0x42a>
 80072a8:	e659      	b.n	8006f5e <_printf_float+0xc2>
 80072aa:	2301      	movs	r3, #1
 80072ac:	4652      	mov	r2, sl
 80072ae:	4631      	mov	r1, r6
 80072b0:	4628      	mov	r0, r5
 80072b2:	47b8      	blx	r7
 80072b4:	3001      	adds	r0, #1
 80072b6:	f43f ae52 	beq.w	8006f5e <_printf_float+0xc2>
 80072ba:	f108 0801 	add.w	r8, r8, #1
 80072be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	4543      	cmp	r3, r8
 80072c4:	dcf1      	bgt.n	80072aa <_printf_float+0x40e>
 80072c6:	464b      	mov	r3, r9
 80072c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80072cc:	e6dc      	b.n	8007088 <_printf_float+0x1ec>
 80072ce:	f04f 0800 	mov.w	r8, #0
 80072d2:	f104 0a1a 	add.w	sl, r4, #26
 80072d6:	e7f2      	b.n	80072be <_printf_float+0x422>
 80072d8:	2301      	movs	r3, #1
 80072da:	4642      	mov	r2, r8
 80072dc:	e7df      	b.n	800729e <_printf_float+0x402>
 80072de:	2301      	movs	r3, #1
 80072e0:	464a      	mov	r2, r9
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	f43f ae38 	beq.w	8006f5e <_printf_float+0xc2>
 80072ee:	f108 0801 	add.w	r8, r8, #1
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072f6:	1a5b      	subs	r3, r3, r1
 80072f8:	4543      	cmp	r3, r8
 80072fa:	dcf0      	bgt.n	80072de <_printf_float+0x442>
 80072fc:	e6fa      	b.n	80070f4 <_printf_float+0x258>
 80072fe:	f04f 0800 	mov.w	r8, #0
 8007302:	f104 0919 	add.w	r9, r4, #25
 8007306:	e7f4      	b.n	80072f2 <_printf_float+0x456>

08007308 <_printf_common>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	4616      	mov	r6, r2
 800730e:	4699      	mov	r9, r3
 8007310:	688a      	ldr	r2, [r1, #8]
 8007312:	690b      	ldr	r3, [r1, #16]
 8007314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007318:	4293      	cmp	r3, r2
 800731a:	bfb8      	it	lt
 800731c:	4613      	movlt	r3, r2
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b10a      	cbz	r2, 800732e <_printf_common+0x26>
 800732a:	3301      	adds	r3, #1
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	0699      	lsls	r1, r3, #26
 8007332:	bf42      	ittt	mi
 8007334:	6833      	ldrmi	r3, [r6, #0]
 8007336:	3302      	addmi	r3, #2
 8007338:	6033      	strmi	r3, [r6, #0]
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	f015 0506 	ands.w	r5, r5, #6
 8007340:	d106      	bne.n	8007350 <_printf_common+0x48>
 8007342:	f104 0a19 	add.w	sl, r4, #25
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc26      	bgt.n	800739e <_printf_common+0x96>
 8007350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007354:	1e13      	subs	r3, r2, #0
 8007356:	6822      	ldr	r2, [r4, #0]
 8007358:	bf18      	it	ne
 800735a:	2301      	movne	r3, #1
 800735c:	0692      	lsls	r2, r2, #26
 800735e:	d42b      	bmi.n	80073b8 <_printf_common+0xb0>
 8007360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007364:	4649      	mov	r1, r9
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	3001      	adds	r0, #1
 800736c:	d01e      	beq.n	80073ac <_printf_common+0xa4>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	68e5      	ldr	r5, [r4, #12]
 8007372:	6832      	ldr	r2, [r6, #0]
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	2b04      	cmp	r3, #4
 800737a:	bf08      	it	eq
 800737c:	1aad      	subeq	r5, r5, r2
 800737e:	68a3      	ldr	r3, [r4, #8]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	bf0c      	ite	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	2500      	movne	r5, #0
 800738a:	4293      	cmp	r3, r2
 800738c:	bfc4      	itt	gt
 800738e:	1a9b      	subgt	r3, r3, r2
 8007390:	18ed      	addgt	r5, r5, r3
 8007392:	2600      	movs	r6, #0
 8007394:	341a      	adds	r4, #26
 8007396:	42b5      	cmp	r5, r6
 8007398:	d11a      	bne.n	80073d0 <_printf_common+0xc8>
 800739a:	2000      	movs	r0, #0
 800739c:	e008      	b.n	80073b0 <_printf_common+0xa8>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4649      	mov	r1, r9
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c0      	blx	r8
 80073a8:	3001      	adds	r0, #1
 80073aa:	d103      	bne.n	80073b4 <_printf_common+0xac>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7c6      	b.n	8007346 <_printf_common+0x3e>
 80073b8:	18e1      	adds	r1, r4, r3
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	2030      	movs	r0, #48	; 0x30
 80073be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073c2:	4422      	add	r2, r4
 80073c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073cc:	3302      	adds	r3, #2
 80073ce:	e7c7      	b.n	8007360 <_printf_common+0x58>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	4649      	mov	r1, r9
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c0      	blx	r8
 80073da:	3001      	adds	r0, #1
 80073dc:	d0e6      	beq.n	80073ac <_printf_common+0xa4>
 80073de:	3601      	adds	r6, #1
 80073e0:	e7d9      	b.n	8007396 <_printf_common+0x8e>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	7e0f      	ldrb	r7, [r1, #24]
 80073ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073ec:	2f78      	cmp	r7, #120	; 0x78
 80073ee:	4691      	mov	r9, r2
 80073f0:	4680      	mov	r8, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	469a      	mov	sl, r3
 80073f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073fa:	d807      	bhi.n	800740c <_printf_i+0x28>
 80073fc:	2f62      	cmp	r7, #98	; 0x62
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x32>
 8007400:	2f00      	cmp	r7, #0
 8007402:	f000 80d8 	beq.w	80075b6 <_printf_i+0x1d2>
 8007406:	2f58      	cmp	r7, #88	; 0x58
 8007408:	f000 80a3 	beq.w	8007552 <_printf_i+0x16e>
 800740c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007414:	e03a      	b.n	800748c <_printf_i+0xa8>
 8007416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800741a:	2b15      	cmp	r3, #21
 800741c:	d8f6      	bhi.n	800740c <_printf_i+0x28>
 800741e:	a101      	add	r1, pc, #4	; (adr r1, 8007424 <_printf_i+0x40>)
 8007420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007424:	0800747d 	.word	0x0800747d
 8007428:	08007491 	.word	0x08007491
 800742c:	0800740d 	.word	0x0800740d
 8007430:	0800740d 	.word	0x0800740d
 8007434:	0800740d 	.word	0x0800740d
 8007438:	0800740d 	.word	0x0800740d
 800743c:	08007491 	.word	0x08007491
 8007440:	0800740d 	.word	0x0800740d
 8007444:	0800740d 	.word	0x0800740d
 8007448:	0800740d 	.word	0x0800740d
 800744c:	0800740d 	.word	0x0800740d
 8007450:	0800759d 	.word	0x0800759d
 8007454:	080074c1 	.word	0x080074c1
 8007458:	0800757f 	.word	0x0800757f
 800745c:	0800740d 	.word	0x0800740d
 8007460:	0800740d 	.word	0x0800740d
 8007464:	080075bf 	.word	0x080075bf
 8007468:	0800740d 	.word	0x0800740d
 800746c:	080074c1 	.word	0x080074c1
 8007470:	0800740d 	.word	0x0800740d
 8007474:	0800740d 	.word	0x0800740d
 8007478:	08007587 	.word	0x08007587
 800747c:	682b      	ldr	r3, [r5, #0]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	602a      	str	r2, [r5, #0]
 8007484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800748c:	2301      	movs	r3, #1
 800748e:	e0a3      	b.n	80075d8 <_printf_i+0x1f4>
 8007490:	6820      	ldr	r0, [r4, #0]
 8007492:	6829      	ldr	r1, [r5, #0]
 8007494:	0606      	lsls	r6, r0, #24
 8007496:	f101 0304 	add.w	r3, r1, #4
 800749a:	d50a      	bpl.n	80074b2 <_printf_i+0xce>
 800749c:	680e      	ldr	r6, [r1, #0]
 800749e:	602b      	str	r3, [r5, #0]
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	da03      	bge.n	80074ac <_printf_i+0xc8>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	4276      	negs	r6, r6
 80074a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ac:	485e      	ldr	r0, [pc, #376]	; (8007628 <_printf_i+0x244>)
 80074ae:	230a      	movs	r3, #10
 80074b0:	e019      	b.n	80074e6 <_printf_i+0x102>
 80074b2:	680e      	ldr	r6, [r1, #0]
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ba:	bf18      	it	ne
 80074bc:	b236      	sxthne	r6, r6
 80074be:	e7ef      	b.n	80074a0 <_printf_i+0xbc>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6820      	ldr	r0, [r4, #0]
 80074c4:	1d19      	adds	r1, r3, #4
 80074c6:	6029      	str	r1, [r5, #0]
 80074c8:	0601      	lsls	r1, r0, #24
 80074ca:	d501      	bpl.n	80074d0 <_printf_i+0xec>
 80074cc:	681e      	ldr	r6, [r3, #0]
 80074ce:	e002      	b.n	80074d6 <_printf_i+0xf2>
 80074d0:	0646      	lsls	r6, r0, #25
 80074d2:	d5fb      	bpl.n	80074cc <_printf_i+0xe8>
 80074d4:	881e      	ldrh	r6, [r3, #0]
 80074d6:	4854      	ldr	r0, [pc, #336]	; (8007628 <_printf_i+0x244>)
 80074d8:	2f6f      	cmp	r7, #111	; 0x6f
 80074da:	bf0c      	ite	eq
 80074dc:	2308      	moveq	r3, #8
 80074de:	230a      	movne	r3, #10
 80074e0:	2100      	movs	r1, #0
 80074e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074e6:	6865      	ldr	r5, [r4, #4]
 80074e8:	60a5      	str	r5, [r4, #8]
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	bfa2      	ittt	ge
 80074ee:	6821      	ldrge	r1, [r4, #0]
 80074f0:	f021 0104 	bicge.w	r1, r1, #4
 80074f4:	6021      	strge	r1, [r4, #0]
 80074f6:	b90e      	cbnz	r6, 80074fc <_printf_i+0x118>
 80074f8:	2d00      	cmp	r5, #0
 80074fa:	d04d      	beq.n	8007598 <_printf_i+0x1b4>
 80074fc:	4615      	mov	r5, r2
 80074fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007502:	fb03 6711 	mls	r7, r3, r1, r6
 8007506:	5dc7      	ldrb	r7, [r0, r7]
 8007508:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800750c:	4637      	mov	r7, r6
 800750e:	42bb      	cmp	r3, r7
 8007510:	460e      	mov	r6, r1
 8007512:	d9f4      	bls.n	80074fe <_printf_i+0x11a>
 8007514:	2b08      	cmp	r3, #8
 8007516:	d10b      	bne.n	8007530 <_printf_i+0x14c>
 8007518:	6823      	ldr	r3, [r4, #0]
 800751a:	07de      	lsls	r6, r3, #31
 800751c:	d508      	bpl.n	8007530 <_printf_i+0x14c>
 800751e:	6923      	ldr	r3, [r4, #16]
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	4299      	cmp	r1, r3
 8007524:	bfde      	ittt	le
 8007526:	2330      	movle	r3, #48	; 0x30
 8007528:	f805 3c01 	strble.w	r3, [r5, #-1]
 800752c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007530:	1b52      	subs	r2, r2, r5
 8007532:	6122      	str	r2, [r4, #16]
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	464b      	mov	r3, r9
 800753a:	aa03      	add	r2, sp, #12
 800753c:	4621      	mov	r1, r4
 800753e:	4640      	mov	r0, r8
 8007540:	f7ff fee2 	bl	8007308 <_printf_common>
 8007544:	3001      	adds	r0, #1
 8007546:	d14c      	bne.n	80075e2 <_printf_i+0x1fe>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	b004      	add	sp, #16
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	4835      	ldr	r0, [pc, #212]	; (8007628 <_printf_i+0x244>)
 8007554:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007558:	6829      	ldr	r1, [r5, #0]
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007560:	6029      	str	r1, [r5, #0]
 8007562:	061d      	lsls	r5, r3, #24
 8007564:	d514      	bpl.n	8007590 <_printf_i+0x1ac>
 8007566:	07df      	lsls	r7, r3, #31
 8007568:	bf44      	itt	mi
 800756a:	f043 0320 	orrmi.w	r3, r3, #32
 800756e:	6023      	strmi	r3, [r4, #0]
 8007570:	b91e      	cbnz	r6, 800757a <_printf_i+0x196>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	f023 0320 	bic.w	r3, r3, #32
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	2310      	movs	r3, #16
 800757c:	e7b0      	b.n	80074e0 <_printf_i+0xfc>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	f043 0320 	orr.w	r3, r3, #32
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	2378      	movs	r3, #120	; 0x78
 8007588:	4828      	ldr	r0, [pc, #160]	; (800762c <_printf_i+0x248>)
 800758a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800758e:	e7e3      	b.n	8007558 <_printf_i+0x174>
 8007590:	0659      	lsls	r1, r3, #25
 8007592:	bf48      	it	mi
 8007594:	b2b6      	uxthmi	r6, r6
 8007596:	e7e6      	b.n	8007566 <_printf_i+0x182>
 8007598:	4615      	mov	r5, r2
 800759a:	e7bb      	b.n	8007514 <_printf_i+0x130>
 800759c:	682b      	ldr	r3, [r5, #0]
 800759e:	6826      	ldr	r6, [r4, #0]
 80075a0:	6961      	ldr	r1, [r4, #20]
 80075a2:	1d18      	adds	r0, r3, #4
 80075a4:	6028      	str	r0, [r5, #0]
 80075a6:	0635      	lsls	r5, r6, #24
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	d501      	bpl.n	80075b0 <_printf_i+0x1cc>
 80075ac:	6019      	str	r1, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <_printf_i+0x1d2>
 80075b0:	0670      	lsls	r0, r6, #25
 80075b2:	d5fb      	bpl.n	80075ac <_printf_i+0x1c8>
 80075b4:	8019      	strh	r1, [r3, #0]
 80075b6:	2300      	movs	r3, #0
 80075b8:	6123      	str	r3, [r4, #16]
 80075ba:	4615      	mov	r5, r2
 80075bc:	e7ba      	b.n	8007534 <_printf_i+0x150>
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	1d1a      	adds	r2, r3, #4
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	681d      	ldr	r5, [r3, #0]
 80075c6:	6862      	ldr	r2, [r4, #4]
 80075c8:	2100      	movs	r1, #0
 80075ca:	4628      	mov	r0, r5
 80075cc:	f7f8 fe10 	bl	80001f0 <memchr>
 80075d0:	b108      	cbz	r0, 80075d6 <_printf_i+0x1f2>
 80075d2:	1b40      	subs	r0, r0, r5
 80075d4:	6060      	str	r0, [r4, #4]
 80075d6:	6863      	ldr	r3, [r4, #4]
 80075d8:	6123      	str	r3, [r4, #16]
 80075da:	2300      	movs	r3, #0
 80075dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e0:	e7a8      	b.n	8007534 <_printf_i+0x150>
 80075e2:	6923      	ldr	r3, [r4, #16]
 80075e4:	462a      	mov	r2, r5
 80075e6:	4649      	mov	r1, r9
 80075e8:	4640      	mov	r0, r8
 80075ea:	47d0      	blx	sl
 80075ec:	3001      	adds	r0, #1
 80075ee:	d0ab      	beq.n	8007548 <_printf_i+0x164>
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	079b      	lsls	r3, r3, #30
 80075f4:	d413      	bmi.n	800761e <_printf_i+0x23a>
 80075f6:	68e0      	ldr	r0, [r4, #12]
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	4298      	cmp	r0, r3
 80075fc:	bfb8      	it	lt
 80075fe:	4618      	movlt	r0, r3
 8007600:	e7a4      	b.n	800754c <_printf_i+0x168>
 8007602:	2301      	movs	r3, #1
 8007604:	4632      	mov	r2, r6
 8007606:	4649      	mov	r1, r9
 8007608:	4640      	mov	r0, r8
 800760a:	47d0      	blx	sl
 800760c:	3001      	adds	r0, #1
 800760e:	d09b      	beq.n	8007548 <_printf_i+0x164>
 8007610:	3501      	adds	r5, #1
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	9903      	ldr	r1, [sp, #12]
 8007616:	1a5b      	subs	r3, r3, r1
 8007618:	42ab      	cmp	r3, r5
 800761a:	dcf2      	bgt.n	8007602 <_printf_i+0x21e>
 800761c:	e7eb      	b.n	80075f6 <_printf_i+0x212>
 800761e:	2500      	movs	r5, #0
 8007620:	f104 0619 	add.w	r6, r4, #25
 8007624:	e7f5      	b.n	8007612 <_printf_i+0x22e>
 8007626:	bf00      	nop
 8007628:	0800b636 	.word	0x0800b636
 800762c:	0800b647 	.word	0x0800b647

08007630 <siprintf>:
 8007630:	b40e      	push	{r1, r2, r3}
 8007632:	b500      	push	{lr}
 8007634:	b09c      	sub	sp, #112	; 0x70
 8007636:	ab1d      	add	r3, sp, #116	; 0x74
 8007638:	9002      	str	r0, [sp, #8]
 800763a:	9006      	str	r0, [sp, #24]
 800763c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007640:	4809      	ldr	r0, [pc, #36]	; (8007668 <siprintf+0x38>)
 8007642:	9107      	str	r1, [sp, #28]
 8007644:	9104      	str	r1, [sp, #16]
 8007646:	4909      	ldr	r1, [pc, #36]	; (800766c <siprintf+0x3c>)
 8007648:	f853 2b04 	ldr.w	r2, [r3], #4
 800764c:	9105      	str	r1, [sp, #20]
 800764e:	6800      	ldr	r0, [r0, #0]
 8007650:	9301      	str	r3, [sp, #4]
 8007652:	a902      	add	r1, sp, #8
 8007654:	f001 fb76 	bl	8008d44 <_svfiprintf_r>
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	2200      	movs	r2, #0
 800765c:	701a      	strb	r2, [r3, #0]
 800765e:	b01c      	add	sp, #112	; 0x70
 8007660:	f85d eb04 	ldr.w	lr, [sp], #4
 8007664:	b003      	add	sp, #12
 8007666:	4770      	bx	lr
 8007668:	2000002c 	.word	0x2000002c
 800766c:	ffff0208 	.word	0xffff0208

08007670 <quorem>:
 8007670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	6903      	ldr	r3, [r0, #16]
 8007676:	690c      	ldr	r4, [r1, #16]
 8007678:	42a3      	cmp	r3, r4
 800767a:	4607      	mov	r7, r0
 800767c:	f2c0 8081 	blt.w	8007782 <quorem+0x112>
 8007680:	3c01      	subs	r4, #1
 8007682:	f101 0814 	add.w	r8, r1, #20
 8007686:	f100 0514 	add.w	r5, r0, #20
 800768a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007698:	3301      	adds	r3, #1
 800769a:	429a      	cmp	r2, r3
 800769c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80076a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80076a8:	d331      	bcc.n	800770e <quorem+0x9e>
 80076aa:	f04f 0e00 	mov.w	lr, #0
 80076ae:	4640      	mov	r0, r8
 80076b0:	46ac      	mov	ip, r5
 80076b2:	46f2      	mov	sl, lr
 80076b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80076b8:	b293      	uxth	r3, r2
 80076ba:	fb06 e303 	mla	r3, r6, r3, lr
 80076be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	ebaa 0303 	sub.w	r3, sl, r3
 80076c8:	f8dc a000 	ldr.w	sl, [ip]
 80076cc:	0c12      	lsrs	r2, r2, #16
 80076ce:	fa13 f38a 	uxtah	r3, r3, sl
 80076d2:	fb06 e202 	mla	r2, r6, r2, lr
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	9b00      	ldr	r3, [sp, #0]
 80076da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80076de:	b292      	uxth	r2, r2
 80076e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80076e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80076ec:	4581      	cmp	r9, r0
 80076ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076f2:	f84c 3b04 	str.w	r3, [ip], #4
 80076f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80076fa:	d2db      	bcs.n	80076b4 <quorem+0x44>
 80076fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8007700:	b92b      	cbnz	r3, 800770e <quorem+0x9e>
 8007702:	9b01      	ldr	r3, [sp, #4]
 8007704:	3b04      	subs	r3, #4
 8007706:	429d      	cmp	r5, r3
 8007708:	461a      	mov	r2, r3
 800770a:	d32e      	bcc.n	800776a <quorem+0xfa>
 800770c:	613c      	str	r4, [r7, #16]
 800770e:	4638      	mov	r0, r7
 8007710:	f001 f8c4 	bl	800889c <__mcmp>
 8007714:	2800      	cmp	r0, #0
 8007716:	db24      	blt.n	8007762 <quorem+0xf2>
 8007718:	3601      	adds	r6, #1
 800771a:	4628      	mov	r0, r5
 800771c:	f04f 0c00 	mov.w	ip, #0
 8007720:	f858 2b04 	ldr.w	r2, [r8], #4
 8007724:	f8d0 e000 	ldr.w	lr, [r0]
 8007728:	b293      	uxth	r3, r2
 800772a:	ebac 0303 	sub.w	r3, ip, r3
 800772e:	0c12      	lsrs	r2, r2, #16
 8007730:	fa13 f38e 	uxtah	r3, r3, lr
 8007734:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800773c:	b29b      	uxth	r3, r3
 800773e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007742:	45c1      	cmp	r9, r8
 8007744:	f840 3b04 	str.w	r3, [r0], #4
 8007748:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800774c:	d2e8      	bcs.n	8007720 <quorem+0xb0>
 800774e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007752:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007756:	b922      	cbnz	r2, 8007762 <quorem+0xf2>
 8007758:	3b04      	subs	r3, #4
 800775a:	429d      	cmp	r5, r3
 800775c:	461a      	mov	r2, r3
 800775e:	d30a      	bcc.n	8007776 <quorem+0x106>
 8007760:	613c      	str	r4, [r7, #16]
 8007762:	4630      	mov	r0, r6
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	3b04      	subs	r3, #4
 800776e:	2a00      	cmp	r2, #0
 8007770:	d1cc      	bne.n	800770c <quorem+0x9c>
 8007772:	3c01      	subs	r4, #1
 8007774:	e7c7      	b.n	8007706 <quorem+0x96>
 8007776:	6812      	ldr	r2, [r2, #0]
 8007778:	3b04      	subs	r3, #4
 800777a:	2a00      	cmp	r2, #0
 800777c:	d1f0      	bne.n	8007760 <quorem+0xf0>
 800777e:	3c01      	subs	r4, #1
 8007780:	e7eb      	b.n	800775a <quorem+0xea>
 8007782:	2000      	movs	r0, #0
 8007784:	e7ee      	b.n	8007764 <quorem+0xf4>
	...

08007788 <_dtoa_r>:
 8007788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800778c:	ed2d 8b04 	vpush	{d8-d9}
 8007790:	ec57 6b10 	vmov	r6, r7, d0
 8007794:	b093      	sub	sp, #76	; 0x4c
 8007796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007798:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800779c:	9106      	str	r1, [sp, #24]
 800779e:	ee10 aa10 	vmov	sl, s0
 80077a2:	4604      	mov	r4, r0
 80077a4:	9209      	str	r2, [sp, #36]	; 0x24
 80077a6:	930c      	str	r3, [sp, #48]	; 0x30
 80077a8:	46bb      	mov	fp, r7
 80077aa:	b975      	cbnz	r5, 80077ca <_dtoa_r+0x42>
 80077ac:	2010      	movs	r0, #16
 80077ae:	f000 fddd 	bl	800836c <malloc>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6260      	str	r0, [r4, #36]	; 0x24
 80077b6:	b920      	cbnz	r0, 80077c2 <_dtoa_r+0x3a>
 80077b8:	4ba7      	ldr	r3, [pc, #668]	; (8007a58 <_dtoa_r+0x2d0>)
 80077ba:	21ea      	movs	r1, #234	; 0xea
 80077bc:	48a7      	ldr	r0, [pc, #668]	; (8007a5c <_dtoa_r+0x2d4>)
 80077be:	f001 fbd1 	bl	8008f64 <__assert_func>
 80077c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80077c6:	6005      	str	r5, [r0, #0]
 80077c8:	60c5      	str	r5, [r0, #12]
 80077ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077cc:	6819      	ldr	r1, [r3, #0]
 80077ce:	b151      	cbz	r1, 80077e6 <_dtoa_r+0x5e>
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	604a      	str	r2, [r1, #4]
 80077d4:	2301      	movs	r3, #1
 80077d6:	4093      	lsls	r3, r2
 80077d8:	608b      	str	r3, [r1, #8]
 80077da:	4620      	mov	r0, r4
 80077dc:	f000 fe1c 	bl	8008418 <_Bfree>
 80077e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077e2:	2200      	movs	r2, #0
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	1e3b      	subs	r3, r7, #0
 80077e8:	bfaa      	itet	ge
 80077ea:	2300      	movge	r3, #0
 80077ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80077f0:	f8c8 3000 	strge.w	r3, [r8]
 80077f4:	4b9a      	ldr	r3, [pc, #616]	; (8007a60 <_dtoa_r+0x2d8>)
 80077f6:	bfbc      	itt	lt
 80077f8:	2201      	movlt	r2, #1
 80077fa:	f8c8 2000 	strlt.w	r2, [r8]
 80077fe:	ea33 030b 	bics.w	r3, r3, fp
 8007802:	d11b      	bne.n	800783c <_dtoa_r+0xb4>
 8007804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007806:	f242 730f 	movw	r3, #9999	; 0x270f
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007810:	4333      	orrs	r3, r6
 8007812:	f000 8592 	beq.w	800833a <_dtoa_r+0xbb2>
 8007816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007818:	b963      	cbnz	r3, 8007834 <_dtoa_r+0xac>
 800781a:	4b92      	ldr	r3, [pc, #584]	; (8007a64 <_dtoa_r+0x2dc>)
 800781c:	e022      	b.n	8007864 <_dtoa_r+0xdc>
 800781e:	4b92      	ldr	r3, [pc, #584]	; (8007a68 <_dtoa_r+0x2e0>)
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	3308      	adds	r3, #8
 8007824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007826:	6013      	str	r3, [r2, #0]
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	b013      	add	sp, #76	; 0x4c
 800782c:	ecbd 8b04 	vpop	{d8-d9}
 8007830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007834:	4b8b      	ldr	r3, [pc, #556]	; (8007a64 <_dtoa_r+0x2dc>)
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	3303      	adds	r3, #3
 800783a:	e7f3      	b.n	8007824 <_dtoa_r+0x9c>
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4650      	mov	r0, sl
 8007842:	4659      	mov	r1, fp
 8007844:	f7f9 f948 	bl	8000ad8 <__aeabi_dcmpeq>
 8007848:	ec4b ab19 	vmov	d9, sl, fp
 800784c:	4680      	mov	r8, r0
 800784e:	b158      	cbz	r0, 8007868 <_dtoa_r+0xe0>
 8007850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007852:	2301      	movs	r3, #1
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 856b 	beq.w	8008334 <_dtoa_r+0xbac>
 800785e:	4883      	ldr	r0, [pc, #524]	; (8007a6c <_dtoa_r+0x2e4>)
 8007860:	6018      	str	r0, [r3, #0]
 8007862:	1e43      	subs	r3, r0, #1
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	e7df      	b.n	8007828 <_dtoa_r+0xa0>
 8007868:	ec4b ab10 	vmov	d0, sl, fp
 800786c:	aa10      	add	r2, sp, #64	; 0x40
 800786e:	a911      	add	r1, sp, #68	; 0x44
 8007870:	4620      	mov	r0, r4
 8007872:	f001 f8b9 	bl	80089e8 <__d2b>
 8007876:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800787a:	ee08 0a10 	vmov	s16, r0
 800787e:	2d00      	cmp	r5, #0
 8007880:	f000 8084 	beq.w	800798c <_dtoa_r+0x204>
 8007884:	ee19 3a90 	vmov	r3, s19
 8007888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800788c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007890:	4656      	mov	r6, sl
 8007892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800789a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800789e:	4b74      	ldr	r3, [pc, #464]	; (8007a70 <_dtoa_r+0x2e8>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	4630      	mov	r0, r6
 80078a4:	4639      	mov	r1, r7
 80078a6:	f7f8 fcf7 	bl	8000298 <__aeabi_dsub>
 80078aa:	a365      	add	r3, pc, #404	; (adr r3, 8007a40 <_dtoa_r+0x2b8>)
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f7f8 feaa 	bl	8000608 <__aeabi_dmul>
 80078b4:	a364      	add	r3, pc, #400	; (adr r3, 8007a48 <_dtoa_r+0x2c0>)
 80078b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ba:	f7f8 fcef 	bl	800029c <__adddf3>
 80078be:	4606      	mov	r6, r0
 80078c0:	4628      	mov	r0, r5
 80078c2:	460f      	mov	r7, r1
 80078c4:	f7f8 fe36 	bl	8000534 <__aeabi_i2d>
 80078c8:	a361      	add	r3, pc, #388	; (adr r3, 8007a50 <_dtoa_r+0x2c8>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f8 fe9b 	bl	8000608 <__aeabi_dmul>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4630      	mov	r0, r6
 80078d8:	4639      	mov	r1, r7
 80078da:	f7f8 fcdf 	bl	800029c <__adddf3>
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	f7f9 f941 	bl	8000b68 <__aeabi_d2iz>
 80078e6:	2200      	movs	r2, #0
 80078e8:	9000      	str	r0, [sp, #0]
 80078ea:	2300      	movs	r3, #0
 80078ec:	4630      	mov	r0, r6
 80078ee:	4639      	mov	r1, r7
 80078f0:	f7f9 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80078f4:	b150      	cbz	r0, 800790c <_dtoa_r+0x184>
 80078f6:	9800      	ldr	r0, [sp, #0]
 80078f8:	f7f8 fe1c 	bl	8000534 <__aeabi_i2d>
 80078fc:	4632      	mov	r2, r6
 80078fe:	463b      	mov	r3, r7
 8007900:	f7f9 f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007904:	b910      	cbnz	r0, 800790c <_dtoa_r+0x184>
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	3b01      	subs	r3, #1
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	2b16      	cmp	r3, #22
 8007910:	d85a      	bhi.n	80079c8 <_dtoa_r+0x240>
 8007912:	9a00      	ldr	r2, [sp, #0]
 8007914:	4b57      	ldr	r3, [pc, #348]	; (8007a74 <_dtoa_r+0x2ec>)
 8007916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	ec51 0b19 	vmov	r0, r1, d9
 8007922:	f7f9 f8e3 	bl	8000aec <__aeabi_dcmplt>
 8007926:	2800      	cmp	r0, #0
 8007928:	d050      	beq.n	80079cc <_dtoa_r+0x244>
 800792a:	9b00      	ldr	r3, [sp, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	2300      	movs	r3, #0
 8007932:	930b      	str	r3, [sp, #44]	; 0x2c
 8007934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007936:	1b5d      	subs	r5, r3, r5
 8007938:	1e6b      	subs	r3, r5, #1
 800793a:	9305      	str	r3, [sp, #20]
 800793c:	bf45      	ittet	mi
 800793e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007942:	9304      	strmi	r3, [sp, #16]
 8007944:	2300      	movpl	r3, #0
 8007946:	2300      	movmi	r3, #0
 8007948:	bf4c      	ite	mi
 800794a:	9305      	strmi	r3, [sp, #20]
 800794c:	9304      	strpl	r3, [sp, #16]
 800794e:	9b00      	ldr	r3, [sp, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	db3d      	blt.n	80079d0 <_dtoa_r+0x248>
 8007954:	9b05      	ldr	r3, [sp, #20]
 8007956:	9a00      	ldr	r2, [sp, #0]
 8007958:	920a      	str	r2, [sp, #40]	; 0x28
 800795a:	4413      	add	r3, r2
 800795c:	9305      	str	r3, [sp, #20]
 800795e:	2300      	movs	r3, #0
 8007960:	9307      	str	r3, [sp, #28]
 8007962:	9b06      	ldr	r3, [sp, #24]
 8007964:	2b09      	cmp	r3, #9
 8007966:	f200 8089 	bhi.w	8007a7c <_dtoa_r+0x2f4>
 800796a:	2b05      	cmp	r3, #5
 800796c:	bfc4      	itt	gt
 800796e:	3b04      	subgt	r3, #4
 8007970:	9306      	strgt	r3, [sp, #24]
 8007972:	9b06      	ldr	r3, [sp, #24]
 8007974:	f1a3 0302 	sub.w	r3, r3, #2
 8007978:	bfcc      	ite	gt
 800797a:	2500      	movgt	r5, #0
 800797c:	2501      	movle	r5, #1
 800797e:	2b03      	cmp	r3, #3
 8007980:	f200 8087 	bhi.w	8007a92 <_dtoa_r+0x30a>
 8007984:	e8df f003 	tbb	[pc, r3]
 8007988:	59383a2d 	.word	0x59383a2d
 800798c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007990:	441d      	add	r5, r3
 8007992:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007996:	2b20      	cmp	r3, #32
 8007998:	bfc1      	itttt	gt
 800799a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800799e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80079a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80079a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80079aa:	bfda      	itte	le
 80079ac:	f1c3 0320 	rsble	r3, r3, #32
 80079b0:	fa06 f003 	lslle.w	r0, r6, r3
 80079b4:	4318      	orrgt	r0, r3
 80079b6:	f7f8 fdad 	bl	8000514 <__aeabi_ui2d>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4606      	mov	r6, r0
 80079be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80079c2:	3d01      	subs	r5, #1
 80079c4:	930e      	str	r3, [sp, #56]	; 0x38
 80079c6:	e76a      	b.n	800789e <_dtoa_r+0x116>
 80079c8:	2301      	movs	r3, #1
 80079ca:	e7b2      	b.n	8007932 <_dtoa_r+0x1aa>
 80079cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80079ce:	e7b1      	b.n	8007934 <_dtoa_r+0x1ac>
 80079d0:	9b04      	ldr	r3, [sp, #16]
 80079d2:	9a00      	ldr	r2, [sp, #0]
 80079d4:	1a9b      	subs	r3, r3, r2
 80079d6:	9304      	str	r3, [sp, #16]
 80079d8:	4253      	negs	r3, r2
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	2300      	movs	r3, #0
 80079de:	930a      	str	r3, [sp, #40]	; 0x28
 80079e0:	e7bf      	b.n	8007962 <_dtoa_r+0x1da>
 80079e2:	2300      	movs	r3, #0
 80079e4:	9308      	str	r3, [sp, #32]
 80079e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc55      	bgt.n	8007a98 <_dtoa_r+0x310>
 80079ec:	2301      	movs	r3, #1
 80079ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079f2:	461a      	mov	r2, r3
 80079f4:	9209      	str	r2, [sp, #36]	; 0x24
 80079f6:	e00c      	b.n	8007a12 <_dtoa_r+0x28a>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e7f3      	b.n	80079e4 <_dtoa_r+0x25c>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a00:	9308      	str	r3, [sp, #32]
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	4413      	add	r3, r2
 8007a06:	9302      	str	r3, [sp, #8]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	9303      	str	r3, [sp, #12]
 8007a0e:	bfb8      	it	lt
 8007a10:	2301      	movlt	r3, #1
 8007a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a14:	2200      	movs	r2, #0
 8007a16:	6042      	str	r2, [r0, #4]
 8007a18:	2204      	movs	r2, #4
 8007a1a:	f102 0614 	add.w	r6, r2, #20
 8007a1e:	429e      	cmp	r6, r3
 8007a20:	6841      	ldr	r1, [r0, #4]
 8007a22:	d93d      	bls.n	8007aa0 <_dtoa_r+0x318>
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fcb7 	bl	8008398 <_Balloc>
 8007a2a:	9001      	str	r0, [sp, #4]
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d13b      	bne.n	8007aa8 <_dtoa_r+0x320>
 8007a30:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <_dtoa_r+0x2f0>)
 8007a32:	4602      	mov	r2, r0
 8007a34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007a38:	e6c0      	b.n	80077bc <_dtoa_r+0x34>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e7df      	b.n	80079fe <_dtoa_r+0x276>
 8007a3e:	bf00      	nop
 8007a40:	636f4361 	.word	0x636f4361
 8007a44:	3fd287a7 	.word	0x3fd287a7
 8007a48:	8b60c8b3 	.word	0x8b60c8b3
 8007a4c:	3fc68a28 	.word	0x3fc68a28
 8007a50:	509f79fb 	.word	0x509f79fb
 8007a54:	3fd34413 	.word	0x3fd34413
 8007a58:	0800b665 	.word	0x0800b665
 8007a5c:	0800b67c 	.word	0x0800b67c
 8007a60:	7ff00000 	.word	0x7ff00000
 8007a64:	0800b661 	.word	0x0800b661
 8007a68:	0800b658 	.word	0x0800b658
 8007a6c:	0800b635 	.word	0x0800b635
 8007a70:	3ff80000 	.word	0x3ff80000
 8007a74:	0800b770 	.word	0x0800b770
 8007a78:	0800b6d7 	.word	0x0800b6d7
 8007a7c:	2501      	movs	r5, #1
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9306      	str	r3, [sp, #24]
 8007a82:	9508      	str	r5, [sp, #32]
 8007a84:	f04f 33ff 	mov.w	r3, #4294967295
 8007a88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2312      	movs	r3, #18
 8007a90:	e7b0      	b.n	80079f4 <_dtoa_r+0x26c>
 8007a92:	2301      	movs	r3, #1
 8007a94:	9308      	str	r3, [sp, #32]
 8007a96:	e7f5      	b.n	8007a84 <_dtoa_r+0x2fc>
 8007a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a9e:	e7b8      	b.n	8007a12 <_dtoa_r+0x28a>
 8007aa0:	3101      	adds	r1, #1
 8007aa2:	6041      	str	r1, [r0, #4]
 8007aa4:	0052      	lsls	r2, r2, #1
 8007aa6:	e7b8      	b.n	8007a1a <_dtoa_r+0x292>
 8007aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aaa:	9a01      	ldr	r2, [sp, #4]
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	2b0e      	cmp	r3, #14
 8007ab2:	f200 809d 	bhi.w	8007bf0 <_dtoa_r+0x468>
 8007ab6:	2d00      	cmp	r5, #0
 8007ab8:	f000 809a 	beq.w	8007bf0 <_dtoa_r+0x468>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dd32      	ble.n	8007b28 <_dtoa_r+0x3a0>
 8007ac2:	4ab7      	ldr	r2, [pc, #732]	; (8007da0 <_dtoa_r+0x618>)
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ad0:	9b00      	ldr	r3, [sp, #0]
 8007ad2:	05d8      	lsls	r0, r3, #23
 8007ad4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ad8:	d516      	bpl.n	8007b08 <_dtoa_r+0x380>
 8007ada:	4bb2      	ldr	r3, [pc, #712]	; (8007da4 <_dtoa_r+0x61c>)
 8007adc:	ec51 0b19 	vmov	r0, r1, d9
 8007ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ae4:	f7f8 feba 	bl	800085c <__aeabi_ddiv>
 8007ae8:	f007 070f 	and.w	r7, r7, #15
 8007aec:	4682      	mov	sl, r0
 8007aee:	468b      	mov	fp, r1
 8007af0:	2503      	movs	r5, #3
 8007af2:	4eac      	ldr	r6, [pc, #688]	; (8007da4 <_dtoa_r+0x61c>)
 8007af4:	b957      	cbnz	r7, 8007b0c <_dtoa_r+0x384>
 8007af6:	4642      	mov	r2, r8
 8007af8:	464b      	mov	r3, r9
 8007afa:	4650      	mov	r0, sl
 8007afc:	4659      	mov	r1, fp
 8007afe:	f7f8 fead 	bl	800085c <__aeabi_ddiv>
 8007b02:	4682      	mov	sl, r0
 8007b04:	468b      	mov	fp, r1
 8007b06:	e028      	b.n	8007b5a <_dtoa_r+0x3d2>
 8007b08:	2502      	movs	r5, #2
 8007b0a:	e7f2      	b.n	8007af2 <_dtoa_r+0x36a>
 8007b0c:	07f9      	lsls	r1, r7, #31
 8007b0e:	d508      	bpl.n	8007b22 <_dtoa_r+0x39a>
 8007b10:	4640      	mov	r0, r8
 8007b12:	4649      	mov	r1, r9
 8007b14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b18:	f7f8 fd76 	bl	8000608 <__aeabi_dmul>
 8007b1c:	3501      	adds	r5, #1
 8007b1e:	4680      	mov	r8, r0
 8007b20:	4689      	mov	r9, r1
 8007b22:	107f      	asrs	r7, r7, #1
 8007b24:	3608      	adds	r6, #8
 8007b26:	e7e5      	b.n	8007af4 <_dtoa_r+0x36c>
 8007b28:	f000 809b 	beq.w	8007c62 <_dtoa_r+0x4da>
 8007b2c:	9b00      	ldr	r3, [sp, #0]
 8007b2e:	4f9d      	ldr	r7, [pc, #628]	; (8007da4 <_dtoa_r+0x61c>)
 8007b30:	425e      	negs	r6, r3
 8007b32:	4b9b      	ldr	r3, [pc, #620]	; (8007da0 <_dtoa_r+0x618>)
 8007b34:	f006 020f 	and.w	r2, r6, #15
 8007b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	ec51 0b19 	vmov	r0, r1, d9
 8007b44:	f7f8 fd60 	bl	8000608 <__aeabi_dmul>
 8007b48:	1136      	asrs	r6, r6, #4
 8007b4a:	4682      	mov	sl, r0
 8007b4c:	468b      	mov	fp, r1
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2502      	movs	r5, #2
 8007b52:	2e00      	cmp	r6, #0
 8007b54:	d17a      	bne.n	8007c4c <_dtoa_r+0x4c4>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1d3      	bne.n	8007b02 <_dtoa_r+0x37a>
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8082 	beq.w	8007c66 <_dtoa_r+0x4de>
 8007b62:	4b91      	ldr	r3, [pc, #580]	; (8007da8 <_dtoa_r+0x620>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	4650      	mov	r0, sl
 8007b68:	4659      	mov	r1, fp
 8007b6a:	f7f8 ffbf 	bl	8000aec <__aeabi_dcmplt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d079      	beq.n	8007c66 <_dtoa_r+0x4de>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d076      	beq.n	8007c66 <_dtoa_r+0x4de>
 8007b78:	9b02      	ldr	r3, [sp, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	dd36      	ble.n	8007bec <_dtoa_r+0x464>
 8007b7e:	9b00      	ldr	r3, [sp, #0]
 8007b80:	4650      	mov	r0, sl
 8007b82:	4659      	mov	r1, fp
 8007b84:	1e5f      	subs	r7, r3, #1
 8007b86:	2200      	movs	r2, #0
 8007b88:	4b88      	ldr	r3, [pc, #544]	; (8007dac <_dtoa_r+0x624>)
 8007b8a:	f7f8 fd3d 	bl	8000608 <__aeabi_dmul>
 8007b8e:	9e02      	ldr	r6, [sp, #8]
 8007b90:	4682      	mov	sl, r0
 8007b92:	468b      	mov	fp, r1
 8007b94:	3501      	adds	r5, #1
 8007b96:	4628      	mov	r0, r5
 8007b98:	f7f8 fccc 	bl	8000534 <__aeabi_i2d>
 8007b9c:	4652      	mov	r2, sl
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	f7f8 fd32 	bl	8000608 <__aeabi_dmul>
 8007ba4:	4b82      	ldr	r3, [pc, #520]	; (8007db0 <_dtoa_r+0x628>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f7f8 fb78 	bl	800029c <__adddf3>
 8007bac:	46d0      	mov	r8, sl
 8007bae:	46d9      	mov	r9, fp
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	d158      	bne.n	8007c6c <_dtoa_r+0x4e4>
 8007bba:	4b7e      	ldr	r3, [pc, #504]	; (8007db4 <_dtoa_r+0x62c>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 fb69 	bl	8000298 <__aeabi_dsub>
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	465b      	mov	r3, fp
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4689      	mov	r9, r1
 8007bce:	f7f8 ffab 	bl	8000b28 <__aeabi_dcmpgt>
 8007bd2:	2800      	cmp	r0, #0
 8007bd4:	f040 8295 	bne.w	8008102 <_dtoa_r+0x97a>
 8007bd8:	4652      	mov	r2, sl
 8007bda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 ff83 	bl	8000aec <__aeabi_dcmplt>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f040 8289 	bne.w	80080fe <_dtoa_r+0x976>
 8007bec:	ec5b ab19 	vmov	sl, fp, d9
 8007bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f2c0 8148 	blt.w	8007e88 <_dtoa_r+0x700>
 8007bf8:	9a00      	ldr	r2, [sp, #0]
 8007bfa:	2a0e      	cmp	r2, #14
 8007bfc:	f300 8144 	bgt.w	8007e88 <_dtoa_r+0x700>
 8007c00:	4b67      	ldr	r3, [pc, #412]	; (8007da0 <_dtoa_r+0x618>)
 8007c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f280 80d5 	bge.w	8007dbc <_dtoa_r+0x634>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f300 80d1 	bgt.w	8007dbc <_dtoa_r+0x634>
 8007c1a:	f040 826f 	bne.w	80080fc <_dtoa_r+0x974>
 8007c1e:	4b65      	ldr	r3, [pc, #404]	; (8007db4 <_dtoa_r+0x62c>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f7f8 fcef 	bl	8000608 <__aeabi_dmul>
 8007c2a:	4652      	mov	r2, sl
 8007c2c:	465b      	mov	r3, fp
 8007c2e:	f7f8 ff71 	bl	8000b14 <__aeabi_dcmpge>
 8007c32:	9e03      	ldr	r6, [sp, #12]
 8007c34:	4637      	mov	r7, r6
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f040 8245 	bne.w	80080c6 <_dtoa_r+0x93e>
 8007c3c:	9d01      	ldr	r5, [sp, #4]
 8007c3e:	2331      	movs	r3, #49	; 0x31
 8007c40:	f805 3b01 	strb.w	r3, [r5], #1
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	3301      	adds	r3, #1
 8007c48:	9300      	str	r3, [sp, #0]
 8007c4a:	e240      	b.n	80080ce <_dtoa_r+0x946>
 8007c4c:	07f2      	lsls	r2, r6, #31
 8007c4e:	d505      	bpl.n	8007c5c <_dtoa_r+0x4d4>
 8007c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c54:	f7f8 fcd8 	bl	8000608 <__aeabi_dmul>
 8007c58:	3501      	adds	r5, #1
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	1076      	asrs	r6, r6, #1
 8007c5e:	3708      	adds	r7, #8
 8007c60:	e777      	b.n	8007b52 <_dtoa_r+0x3ca>
 8007c62:	2502      	movs	r5, #2
 8007c64:	e779      	b.n	8007b5a <_dtoa_r+0x3d2>
 8007c66:	9f00      	ldr	r7, [sp, #0]
 8007c68:	9e03      	ldr	r6, [sp, #12]
 8007c6a:	e794      	b.n	8007b96 <_dtoa_r+0x40e>
 8007c6c:	9901      	ldr	r1, [sp, #4]
 8007c6e:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <_dtoa_r+0x618>)
 8007c70:	4431      	add	r1, r6
 8007c72:	910d      	str	r1, [sp, #52]	; 0x34
 8007c74:	9908      	ldr	r1, [sp, #32]
 8007c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007c7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c7e:	2900      	cmp	r1, #0
 8007c80:	d043      	beq.n	8007d0a <_dtoa_r+0x582>
 8007c82:	494d      	ldr	r1, [pc, #308]	; (8007db8 <_dtoa_r+0x630>)
 8007c84:	2000      	movs	r0, #0
 8007c86:	f7f8 fde9 	bl	800085c <__aeabi_ddiv>
 8007c8a:	4652      	mov	r2, sl
 8007c8c:	465b      	mov	r3, fp
 8007c8e:	f7f8 fb03 	bl	8000298 <__aeabi_dsub>
 8007c92:	9d01      	ldr	r5, [sp, #4]
 8007c94:	4682      	mov	sl, r0
 8007c96:	468b      	mov	fp, r1
 8007c98:	4649      	mov	r1, r9
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	f7f8 ff64 	bl	8000b68 <__aeabi_d2iz>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	f7f8 fc47 	bl	8000534 <__aeabi_i2d>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	4640      	mov	r0, r8
 8007cac:	4649      	mov	r1, r9
 8007cae:	f7f8 faf3 	bl	8000298 <__aeabi_dsub>
 8007cb2:	3630      	adds	r6, #48	; 0x30
 8007cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8007cb8:	4652      	mov	r2, sl
 8007cba:	465b      	mov	r3, fp
 8007cbc:	4680      	mov	r8, r0
 8007cbe:	4689      	mov	r9, r1
 8007cc0:	f7f8 ff14 	bl	8000aec <__aeabi_dcmplt>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d163      	bne.n	8007d90 <_dtoa_r+0x608>
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	4936      	ldr	r1, [pc, #216]	; (8007da8 <_dtoa_r+0x620>)
 8007cce:	2000      	movs	r0, #0
 8007cd0:	f7f8 fae2 	bl	8000298 <__aeabi_dsub>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	f7f8 ff08 	bl	8000aec <__aeabi_dcmplt>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	f040 80b5 	bne.w	8007e4c <_dtoa_r+0x6c4>
 8007ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ce4:	429d      	cmp	r5, r3
 8007ce6:	d081      	beq.n	8007bec <_dtoa_r+0x464>
 8007ce8:	4b30      	ldr	r3, [pc, #192]	; (8007dac <_dtoa_r+0x624>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	4650      	mov	r0, sl
 8007cee:	4659      	mov	r1, fp
 8007cf0:	f7f8 fc8a 	bl	8000608 <__aeabi_dmul>
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <_dtoa_r+0x624>)
 8007cf6:	4682      	mov	sl, r0
 8007cf8:	468b      	mov	fp, r1
 8007cfa:	4640      	mov	r0, r8
 8007cfc:	4649      	mov	r1, r9
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f7f8 fc82 	bl	8000608 <__aeabi_dmul>
 8007d04:	4680      	mov	r8, r0
 8007d06:	4689      	mov	r9, r1
 8007d08:	e7c6      	b.n	8007c98 <_dtoa_r+0x510>
 8007d0a:	4650      	mov	r0, sl
 8007d0c:	4659      	mov	r1, fp
 8007d0e:	f7f8 fc7b 	bl	8000608 <__aeabi_dmul>
 8007d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d14:	9d01      	ldr	r5, [sp, #4]
 8007d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d18:	4682      	mov	sl, r0
 8007d1a:	468b      	mov	fp, r1
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	4640      	mov	r0, r8
 8007d20:	f7f8 ff22 	bl	8000b68 <__aeabi_d2iz>
 8007d24:	4606      	mov	r6, r0
 8007d26:	f7f8 fc05 	bl	8000534 <__aeabi_i2d>
 8007d2a:	3630      	adds	r6, #48	; 0x30
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4640      	mov	r0, r8
 8007d32:	4649      	mov	r1, r9
 8007d34:	f7f8 fab0 	bl	8000298 <__aeabi_dsub>
 8007d38:	f805 6b01 	strb.w	r6, [r5], #1
 8007d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	4680      	mov	r8, r0
 8007d42:	4689      	mov	r9, r1
 8007d44:	f04f 0200 	mov.w	r2, #0
 8007d48:	d124      	bne.n	8007d94 <_dtoa_r+0x60c>
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <_dtoa_r+0x630>)
 8007d4c:	4650      	mov	r0, sl
 8007d4e:	4659      	mov	r1, fp
 8007d50:	f7f8 faa4 	bl	800029c <__adddf3>
 8007d54:	4602      	mov	r2, r0
 8007d56:	460b      	mov	r3, r1
 8007d58:	4640      	mov	r0, r8
 8007d5a:	4649      	mov	r1, r9
 8007d5c:	f7f8 fee4 	bl	8000b28 <__aeabi_dcmpgt>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d173      	bne.n	8007e4c <_dtoa_r+0x6c4>
 8007d64:	4652      	mov	r2, sl
 8007d66:	465b      	mov	r3, fp
 8007d68:	4913      	ldr	r1, [pc, #76]	; (8007db8 <_dtoa_r+0x630>)
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f7f8 fa94 	bl	8000298 <__aeabi_dsub>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4640      	mov	r0, r8
 8007d76:	4649      	mov	r1, r9
 8007d78:	f7f8 feb8 	bl	8000aec <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f43f af35 	beq.w	8007bec <_dtoa_r+0x464>
 8007d82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007d84:	1e6b      	subs	r3, r5, #1
 8007d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d8c:	2b30      	cmp	r3, #48	; 0x30
 8007d8e:	d0f8      	beq.n	8007d82 <_dtoa_r+0x5fa>
 8007d90:	9700      	str	r7, [sp, #0]
 8007d92:	e049      	b.n	8007e28 <_dtoa_r+0x6a0>
 8007d94:	4b05      	ldr	r3, [pc, #20]	; (8007dac <_dtoa_r+0x624>)
 8007d96:	f7f8 fc37 	bl	8000608 <__aeabi_dmul>
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	4689      	mov	r9, r1
 8007d9e:	e7bd      	b.n	8007d1c <_dtoa_r+0x594>
 8007da0:	0800b770 	.word	0x0800b770
 8007da4:	0800b748 	.word	0x0800b748
 8007da8:	3ff00000 	.word	0x3ff00000
 8007dac:	40240000 	.word	0x40240000
 8007db0:	401c0000 	.word	0x401c0000
 8007db4:	40140000 	.word	0x40140000
 8007db8:	3fe00000 	.word	0x3fe00000
 8007dbc:	9d01      	ldr	r5, [sp, #4]
 8007dbe:	4656      	mov	r6, sl
 8007dc0:	465f      	mov	r7, fp
 8007dc2:	4642      	mov	r2, r8
 8007dc4:	464b      	mov	r3, r9
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	4639      	mov	r1, r7
 8007dca:	f7f8 fd47 	bl	800085c <__aeabi_ddiv>
 8007dce:	f7f8 fecb 	bl	8000b68 <__aeabi_d2iz>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	f7f8 fbae 	bl	8000534 <__aeabi_i2d>
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f7f8 fc14 	bl	8000608 <__aeabi_dmul>
 8007de0:	4602      	mov	r2, r0
 8007de2:	460b      	mov	r3, r1
 8007de4:	4630      	mov	r0, r6
 8007de6:	4639      	mov	r1, r7
 8007de8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007dec:	f7f8 fa54 	bl	8000298 <__aeabi_dsub>
 8007df0:	f805 6b01 	strb.w	r6, [r5], #1
 8007df4:	9e01      	ldr	r6, [sp, #4]
 8007df6:	9f03      	ldr	r7, [sp, #12]
 8007df8:	1bae      	subs	r6, r5, r6
 8007dfa:	42b7      	cmp	r7, r6
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	d135      	bne.n	8007e6e <_dtoa_r+0x6e6>
 8007e02:	f7f8 fa4b 	bl	800029c <__adddf3>
 8007e06:	4642      	mov	r2, r8
 8007e08:	464b      	mov	r3, r9
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	460f      	mov	r7, r1
 8007e0e:	f7f8 fe8b 	bl	8000b28 <__aeabi_dcmpgt>
 8007e12:	b9d0      	cbnz	r0, 8007e4a <_dtoa_r+0x6c2>
 8007e14:	4642      	mov	r2, r8
 8007e16:	464b      	mov	r3, r9
 8007e18:	4630      	mov	r0, r6
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	f7f8 fe5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e20:	b110      	cbz	r0, 8007e28 <_dtoa_r+0x6a0>
 8007e22:	f01a 0f01 	tst.w	sl, #1
 8007e26:	d110      	bne.n	8007e4a <_dtoa_r+0x6c2>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	ee18 1a10 	vmov	r1, s16
 8007e2e:	f000 faf3 	bl	8008418 <_Bfree>
 8007e32:	2300      	movs	r3, #0
 8007e34:	9800      	ldr	r0, [sp, #0]
 8007e36:	702b      	strb	r3, [r5, #0]
 8007e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	6018      	str	r0, [r3, #0]
 8007e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f43f acf1 	beq.w	8007828 <_dtoa_r+0xa0>
 8007e46:	601d      	str	r5, [r3, #0]
 8007e48:	e4ee      	b.n	8007828 <_dtoa_r+0xa0>
 8007e4a:	9f00      	ldr	r7, [sp, #0]
 8007e4c:	462b      	mov	r3, r5
 8007e4e:	461d      	mov	r5, r3
 8007e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e54:	2a39      	cmp	r2, #57	; 0x39
 8007e56:	d106      	bne.n	8007e66 <_dtoa_r+0x6de>
 8007e58:	9a01      	ldr	r2, [sp, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d1f7      	bne.n	8007e4e <_dtoa_r+0x6c6>
 8007e5e:	9901      	ldr	r1, [sp, #4]
 8007e60:	2230      	movs	r2, #48	; 0x30
 8007e62:	3701      	adds	r7, #1
 8007e64:	700a      	strb	r2, [r1, #0]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	3201      	adds	r2, #1
 8007e6a:	701a      	strb	r2, [r3, #0]
 8007e6c:	e790      	b.n	8007d90 <_dtoa_r+0x608>
 8007e6e:	4ba6      	ldr	r3, [pc, #664]	; (8008108 <_dtoa_r+0x980>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	f7f8 fbc9 	bl	8000608 <__aeabi_dmul>
 8007e76:	2200      	movs	r2, #0
 8007e78:	2300      	movs	r3, #0
 8007e7a:	4606      	mov	r6, r0
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	f7f8 fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d09d      	beq.n	8007dc2 <_dtoa_r+0x63a>
 8007e86:	e7cf      	b.n	8007e28 <_dtoa_r+0x6a0>
 8007e88:	9a08      	ldr	r2, [sp, #32]
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	f000 80d7 	beq.w	800803e <_dtoa_r+0x8b6>
 8007e90:	9a06      	ldr	r2, [sp, #24]
 8007e92:	2a01      	cmp	r2, #1
 8007e94:	f300 80ba 	bgt.w	800800c <_dtoa_r+0x884>
 8007e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	f000 80b2 	beq.w	8008004 <_dtoa_r+0x87c>
 8007ea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ea4:	9e07      	ldr	r6, [sp, #28]
 8007ea6:	9d04      	ldr	r5, [sp, #16]
 8007ea8:	9a04      	ldr	r2, [sp, #16]
 8007eaa:	441a      	add	r2, r3
 8007eac:	9204      	str	r2, [sp, #16]
 8007eae:	9a05      	ldr	r2, [sp, #20]
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	441a      	add	r2, r3
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	9205      	str	r2, [sp, #20]
 8007eb8:	f000 fb66 	bl	8008588 <__i2b>
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	2d00      	cmp	r5, #0
 8007ec0:	dd0c      	ble.n	8007edc <_dtoa_r+0x754>
 8007ec2:	9b05      	ldr	r3, [sp, #20]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	dd09      	ble.n	8007edc <_dtoa_r+0x754>
 8007ec8:	42ab      	cmp	r3, r5
 8007eca:	9a04      	ldr	r2, [sp, #16]
 8007ecc:	bfa8      	it	ge
 8007ece:	462b      	movge	r3, r5
 8007ed0:	1ad2      	subs	r2, r2, r3
 8007ed2:	9204      	str	r2, [sp, #16]
 8007ed4:	9a05      	ldr	r2, [sp, #20]
 8007ed6:	1aed      	subs	r5, r5, r3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	9b07      	ldr	r3, [sp, #28]
 8007ede:	b31b      	cbz	r3, 8007f28 <_dtoa_r+0x7a0>
 8007ee0:	9b08      	ldr	r3, [sp, #32]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f000 80af 	beq.w	8008046 <_dtoa_r+0x8be>
 8007ee8:	2e00      	cmp	r6, #0
 8007eea:	dd13      	ble.n	8007f14 <_dtoa_r+0x78c>
 8007eec:	4639      	mov	r1, r7
 8007eee:	4632      	mov	r2, r6
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fc09 	bl	8008708 <__pow5mult>
 8007ef6:	ee18 2a10 	vmov	r2, s16
 8007efa:	4601      	mov	r1, r0
 8007efc:	4607      	mov	r7, r0
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 fb58 	bl	80085b4 <__multiply>
 8007f04:	ee18 1a10 	vmov	r1, s16
 8007f08:	4680      	mov	r8, r0
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 fa84 	bl	8008418 <_Bfree>
 8007f10:	ee08 8a10 	vmov	s16, r8
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	1b9a      	subs	r2, r3, r6
 8007f18:	d006      	beq.n	8007f28 <_dtoa_r+0x7a0>
 8007f1a:	ee18 1a10 	vmov	r1, s16
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f000 fbf2 	bl	8008708 <__pow5mult>
 8007f24:	ee08 0a10 	vmov	s16, r0
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 fb2c 	bl	8008588 <__i2b>
 8007f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	4606      	mov	r6, r0
 8007f36:	f340 8088 	ble.w	800804a <_dtoa_r+0x8c2>
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4601      	mov	r1, r0
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 fbe2 	bl	8008708 <__pow5mult>
 8007f44:	9b06      	ldr	r3, [sp, #24]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	4606      	mov	r6, r0
 8007f4a:	f340 8081 	ble.w	8008050 <_dtoa_r+0x8c8>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	6933      	ldr	r3, [r6, #16]
 8007f54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007f58:	6918      	ldr	r0, [r3, #16]
 8007f5a:	f000 fac5 	bl	80084e8 <__hi0bits>
 8007f5e:	f1c0 0020 	rsb	r0, r0, #32
 8007f62:	9b05      	ldr	r3, [sp, #20]
 8007f64:	4418      	add	r0, r3
 8007f66:	f010 001f 	ands.w	r0, r0, #31
 8007f6a:	f000 8092 	beq.w	8008092 <_dtoa_r+0x90a>
 8007f6e:	f1c0 0320 	rsb	r3, r0, #32
 8007f72:	2b04      	cmp	r3, #4
 8007f74:	f340 808a 	ble.w	800808c <_dtoa_r+0x904>
 8007f78:	f1c0 001c 	rsb	r0, r0, #28
 8007f7c:	9b04      	ldr	r3, [sp, #16]
 8007f7e:	4403      	add	r3, r0
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	9b05      	ldr	r3, [sp, #20]
 8007f84:	4403      	add	r3, r0
 8007f86:	4405      	add	r5, r0
 8007f88:	9305      	str	r3, [sp, #20]
 8007f8a:	9b04      	ldr	r3, [sp, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	dd07      	ble.n	8007fa0 <_dtoa_r+0x818>
 8007f90:	ee18 1a10 	vmov	r1, s16
 8007f94:	461a      	mov	r2, r3
 8007f96:	4620      	mov	r0, r4
 8007f98:	f000 fc10 	bl	80087bc <__lshift>
 8007f9c:	ee08 0a10 	vmov	s16, r0
 8007fa0:	9b05      	ldr	r3, [sp, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dd05      	ble.n	8007fb2 <_dtoa_r+0x82a>
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	461a      	mov	r2, r3
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 fc06 	bl	80087bc <__lshift>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d06e      	beq.n	8008096 <_dtoa_r+0x90e>
 8007fb8:	ee18 0a10 	vmov	r0, s16
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	f000 fc6d 	bl	800889c <__mcmp>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	da67      	bge.n	8008096 <_dtoa_r+0x90e>
 8007fc6:	9b00      	ldr	r3, [sp, #0]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	ee18 1a10 	vmov	r1, s16
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	220a      	movs	r2, #10
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fa41 	bl	800845c <__multadd>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	ee08 0a10 	vmov	s16, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 81b1 	beq.w	8008348 <_dtoa_r+0xbc0>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4639      	mov	r1, r7
 8007fea:	220a      	movs	r2, #10
 8007fec:	4620      	mov	r0, r4
 8007fee:	f000 fa35 	bl	800845c <__multadd>
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	4607      	mov	r7, r0
 8007ff8:	f300 808e 	bgt.w	8008118 <_dtoa_r+0x990>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	dc51      	bgt.n	80080a6 <_dtoa_r+0x91e>
 8008002:	e089      	b.n	8008118 <_dtoa_r+0x990>
 8008004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800800a:	e74b      	b.n	8007ea4 <_dtoa_r+0x71c>
 800800c:	9b03      	ldr	r3, [sp, #12]
 800800e:	1e5e      	subs	r6, r3, #1
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	42b3      	cmp	r3, r6
 8008014:	bfbf      	itttt	lt
 8008016:	9b07      	ldrlt	r3, [sp, #28]
 8008018:	9607      	strlt	r6, [sp, #28]
 800801a:	1af2      	sublt	r2, r6, r3
 800801c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800801e:	bfb6      	itet	lt
 8008020:	189b      	addlt	r3, r3, r2
 8008022:	1b9e      	subge	r6, r3, r6
 8008024:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	bfb8      	it	lt
 800802a:	2600      	movlt	r6, #0
 800802c:	2b00      	cmp	r3, #0
 800802e:	bfb7      	itett	lt
 8008030:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008034:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008038:	1a9d      	sublt	r5, r3, r2
 800803a:	2300      	movlt	r3, #0
 800803c:	e734      	b.n	8007ea8 <_dtoa_r+0x720>
 800803e:	9e07      	ldr	r6, [sp, #28]
 8008040:	9d04      	ldr	r5, [sp, #16]
 8008042:	9f08      	ldr	r7, [sp, #32]
 8008044:	e73b      	b.n	8007ebe <_dtoa_r+0x736>
 8008046:	9a07      	ldr	r2, [sp, #28]
 8008048:	e767      	b.n	8007f1a <_dtoa_r+0x792>
 800804a:	9b06      	ldr	r3, [sp, #24]
 800804c:	2b01      	cmp	r3, #1
 800804e:	dc18      	bgt.n	8008082 <_dtoa_r+0x8fa>
 8008050:	f1ba 0f00 	cmp.w	sl, #0
 8008054:	d115      	bne.n	8008082 <_dtoa_r+0x8fa>
 8008056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800805a:	b993      	cbnz	r3, 8008082 <_dtoa_r+0x8fa>
 800805c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008060:	0d1b      	lsrs	r3, r3, #20
 8008062:	051b      	lsls	r3, r3, #20
 8008064:	b183      	cbz	r3, 8008088 <_dtoa_r+0x900>
 8008066:	9b04      	ldr	r3, [sp, #16]
 8008068:	3301      	adds	r3, #1
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	9b05      	ldr	r3, [sp, #20]
 800806e:	3301      	adds	r3, #1
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	f04f 0801 	mov.w	r8, #1
 8008076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008078:	2b00      	cmp	r3, #0
 800807a:	f47f af6a 	bne.w	8007f52 <_dtoa_r+0x7ca>
 800807e:	2001      	movs	r0, #1
 8008080:	e76f      	b.n	8007f62 <_dtoa_r+0x7da>
 8008082:	f04f 0800 	mov.w	r8, #0
 8008086:	e7f6      	b.n	8008076 <_dtoa_r+0x8ee>
 8008088:	4698      	mov	r8, r3
 800808a:	e7f4      	b.n	8008076 <_dtoa_r+0x8ee>
 800808c:	f43f af7d 	beq.w	8007f8a <_dtoa_r+0x802>
 8008090:	4618      	mov	r0, r3
 8008092:	301c      	adds	r0, #28
 8008094:	e772      	b.n	8007f7c <_dtoa_r+0x7f4>
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc37      	bgt.n	800810c <_dtoa_r+0x984>
 800809c:	9b06      	ldr	r3, [sp, #24]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	dd34      	ble.n	800810c <_dtoa_r+0x984>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	9302      	str	r3, [sp, #8]
 80080a6:	9b02      	ldr	r3, [sp, #8]
 80080a8:	b96b      	cbnz	r3, 80080c6 <_dtoa_r+0x93e>
 80080aa:	4631      	mov	r1, r6
 80080ac:	2205      	movs	r2, #5
 80080ae:	4620      	mov	r0, r4
 80080b0:	f000 f9d4 	bl	800845c <__multadd>
 80080b4:	4601      	mov	r1, r0
 80080b6:	4606      	mov	r6, r0
 80080b8:	ee18 0a10 	vmov	r0, s16
 80080bc:	f000 fbee 	bl	800889c <__mcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f73f adbb 	bgt.w	8007c3c <_dtoa_r+0x4b4>
 80080c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c8:	9d01      	ldr	r5, [sp, #4]
 80080ca:	43db      	mvns	r3, r3
 80080cc:	9300      	str	r3, [sp, #0]
 80080ce:	f04f 0800 	mov.w	r8, #0
 80080d2:	4631      	mov	r1, r6
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f99f 	bl	8008418 <_Bfree>
 80080da:	2f00      	cmp	r7, #0
 80080dc:	f43f aea4 	beq.w	8007e28 <_dtoa_r+0x6a0>
 80080e0:	f1b8 0f00 	cmp.w	r8, #0
 80080e4:	d005      	beq.n	80080f2 <_dtoa_r+0x96a>
 80080e6:	45b8      	cmp	r8, r7
 80080e8:	d003      	beq.n	80080f2 <_dtoa_r+0x96a>
 80080ea:	4641      	mov	r1, r8
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 f993 	bl	8008418 <_Bfree>
 80080f2:	4639      	mov	r1, r7
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 f98f 	bl	8008418 <_Bfree>
 80080fa:	e695      	b.n	8007e28 <_dtoa_r+0x6a0>
 80080fc:	2600      	movs	r6, #0
 80080fe:	4637      	mov	r7, r6
 8008100:	e7e1      	b.n	80080c6 <_dtoa_r+0x93e>
 8008102:	9700      	str	r7, [sp, #0]
 8008104:	4637      	mov	r7, r6
 8008106:	e599      	b.n	8007c3c <_dtoa_r+0x4b4>
 8008108:	40240000 	.word	0x40240000
 800810c:	9b08      	ldr	r3, [sp, #32]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80ca 	beq.w	80082a8 <_dtoa_r+0xb20>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	2d00      	cmp	r5, #0
 800811a:	dd05      	ble.n	8008128 <_dtoa_r+0x9a0>
 800811c:	4639      	mov	r1, r7
 800811e:	462a      	mov	r2, r5
 8008120:	4620      	mov	r0, r4
 8008122:	f000 fb4b 	bl	80087bc <__lshift>
 8008126:	4607      	mov	r7, r0
 8008128:	f1b8 0f00 	cmp.w	r8, #0
 800812c:	d05b      	beq.n	80081e6 <_dtoa_r+0xa5e>
 800812e:	6879      	ldr	r1, [r7, #4]
 8008130:	4620      	mov	r0, r4
 8008132:	f000 f931 	bl	8008398 <_Balloc>
 8008136:	4605      	mov	r5, r0
 8008138:	b928      	cbnz	r0, 8008146 <_dtoa_r+0x9be>
 800813a:	4b87      	ldr	r3, [pc, #540]	; (8008358 <_dtoa_r+0xbd0>)
 800813c:	4602      	mov	r2, r0
 800813e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008142:	f7ff bb3b 	b.w	80077bc <_dtoa_r+0x34>
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	3202      	adds	r2, #2
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	f107 010c 	add.w	r1, r7, #12
 8008150:	300c      	adds	r0, #12
 8008152:	f000 f913 	bl	800837c <memcpy>
 8008156:	2201      	movs	r2, #1
 8008158:	4629      	mov	r1, r5
 800815a:	4620      	mov	r0, r4
 800815c:	f000 fb2e 	bl	80087bc <__lshift>
 8008160:	9b01      	ldr	r3, [sp, #4]
 8008162:	f103 0901 	add.w	r9, r3, #1
 8008166:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800816a:	4413      	add	r3, r2
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	f00a 0301 	and.w	r3, sl, #1
 8008172:	46b8      	mov	r8, r7
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	4607      	mov	r7, r0
 8008178:	4631      	mov	r1, r6
 800817a:	ee18 0a10 	vmov	r0, s16
 800817e:	f7ff fa77 	bl	8007670 <quorem>
 8008182:	4641      	mov	r1, r8
 8008184:	9002      	str	r0, [sp, #8]
 8008186:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800818a:	ee18 0a10 	vmov	r0, s16
 800818e:	f000 fb85 	bl	800889c <__mcmp>
 8008192:	463a      	mov	r2, r7
 8008194:	9003      	str	r0, [sp, #12]
 8008196:	4631      	mov	r1, r6
 8008198:	4620      	mov	r0, r4
 800819a:	f000 fb9b 	bl	80088d4 <__mdiff>
 800819e:	68c2      	ldr	r2, [r0, #12]
 80081a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80081a4:	4605      	mov	r5, r0
 80081a6:	bb02      	cbnz	r2, 80081ea <_dtoa_r+0xa62>
 80081a8:	4601      	mov	r1, r0
 80081aa:	ee18 0a10 	vmov	r0, s16
 80081ae:	f000 fb75 	bl	800889c <__mcmp>
 80081b2:	4602      	mov	r2, r0
 80081b4:	4629      	mov	r1, r5
 80081b6:	4620      	mov	r0, r4
 80081b8:	9207      	str	r2, [sp, #28]
 80081ba:	f000 f92d 	bl	8008418 <_Bfree>
 80081be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80081c2:	ea43 0102 	orr.w	r1, r3, r2
 80081c6:	9b04      	ldr	r3, [sp, #16]
 80081c8:	430b      	orrs	r3, r1
 80081ca:	464d      	mov	r5, r9
 80081cc:	d10f      	bne.n	80081ee <_dtoa_r+0xa66>
 80081ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081d2:	d02a      	beq.n	800822a <_dtoa_r+0xaa2>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd02      	ble.n	80081e0 <_dtoa_r+0xa58>
 80081da:	9b02      	ldr	r3, [sp, #8]
 80081dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80081e0:	f88b a000 	strb.w	sl, [fp]
 80081e4:	e775      	b.n	80080d2 <_dtoa_r+0x94a>
 80081e6:	4638      	mov	r0, r7
 80081e8:	e7ba      	b.n	8008160 <_dtoa_r+0x9d8>
 80081ea:	2201      	movs	r2, #1
 80081ec:	e7e2      	b.n	80081b4 <_dtoa_r+0xa2c>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	db04      	blt.n	80081fe <_dtoa_r+0xa76>
 80081f4:	9906      	ldr	r1, [sp, #24]
 80081f6:	430b      	orrs	r3, r1
 80081f8:	9904      	ldr	r1, [sp, #16]
 80081fa:	430b      	orrs	r3, r1
 80081fc:	d122      	bne.n	8008244 <_dtoa_r+0xabc>
 80081fe:	2a00      	cmp	r2, #0
 8008200:	ddee      	ble.n	80081e0 <_dtoa_r+0xa58>
 8008202:	ee18 1a10 	vmov	r1, s16
 8008206:	2201      	movs	r2, #1
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fad7 	bl	80087bc <__lshift>
 800820e:	4631      	mov	r1, r6
 8008210:	ee08 0a10 	vmov	s16, r0
 8008214:	f000 fb42 	bl	800889c <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	dc03      	bgt.n	8008224 <_dtoa_r+0xa9c>
 800821c:	d1e0      	bne.n	80081e0 <_dtoa_r+0xa58>
 800821e:	f01a 0f01 	tst.w	sl, #1
 8008222:	d0dd      	beq.n	80081e0 <_dtoa_r+0xa58>
 8008224:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008228:	d1d7      	bne.n	80081da <_dtoa_r+0xa52>
 800822a:	2339      	movs	r3, #57	; 0x39
 800822c:	f88b 3000 	strb.w	r3, [fp]
 8008230:	462b      	mov	r3, r5
 8008232:	461d      	mov	r5, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800823a:	2a39      	cmp	r2, #57	; 0x39
 800823c:	d071      	beq.n	8008322 <_dtoa_r+0xb9a>
 800823e:	3201      	adds	r2, #1
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	e746      	b.n	80080d2 <_dtoa_r+0x94a>
 8008244:	2a00      	cmp	r2, #0
 8008246:	dd07      	ble.n	8008258 <_dtoa_r+0xad0>
 8008248:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800824c:	d0ed      	beq.n	800822a <_dtoa_r+0xaa2>
 800824e:	f10a 0301 	add.w	r3, sl, #1
 8008252:	f88b 3000 	strb.w	r3, [fp]
 8008256:	e73c      	b.n	80080d2 <_dtoa_r+0x94a>
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800825e:	4599      	cmp	r9, r3
 8008260:	d047      	beq.n	80082f2 <_dtoa_r+0xb6a>
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	2300      	movs	r3, #0
 8008268:	220a      	movs	r2, #10
 800826a:	4620      	mov	r0, r4
 800826c:	f000 f8f6 	bl	800845c <__multadd>
 8008270:	45b8      	cmp	r8, r7
 8008272:	ee08 0a10 	vmov	s16, r0
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	f04f 020a 	mov.w	r2, #10
 800827e:	4641      	mov	r1, r8
 8008280:	4620      	mov	r0, r4
 8008282:	d106      	bne.n	8008292 <_dtoa_r+0xb0a>
 8008284:	f000 f8ea 	bl	800845c <__multadd>
 8008288:	4680      	mov	r8, r0
 800828a:	4607      	mov	r7, r0
 800828c:	f109 0901 	add.w	r9, r9, #1
 8008290:	e772      	b.n	8008178 <_dtoa_r+0x9f0>
 8008292:	f000 f8e3 	bl	800845c <__multadd>
 8008296:	4639      	mov	r1, r7
 8008298:	4680      	mov	r8, r0
 800829a:	2300      	movs	r3, #0
 800829c:	220a      	movs	r2, #10
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f8dc 	bl	800845c <__multadd>
 80082a4:	4607      	mov	r7, r0
 80082a6:	e7f1      	b.n	800828c <_dtoa_r+0xb04>
 80082a8:	9b03      	ldr	r3, [sp, #12]
 80082aa:	9302      	str	r3, [sp, #8]
 80082ac:	9d01      	ldr	r5, [sp, #4]
 80082ae:	ee18 0a10 	vmov	r0, s16
 80082b2:	4631      	mov	r1, r6
 80082b4:	f7ff f9dc 	bl	8007670 <quorem>
 80082b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	f805 ab01 	strb.w	sl, [r5], #1
 80082c2:	1aea      	subs	r2, r5, r3
 80082c4:	9b02      	ldr	r3, [sp, #8]
 80082c6:	4293      	cmp	r3, r2
 80082c8:	dd09      	ble.n	80082de <_dtoa_r+0xb56>
 80082ca:	ee18 1a10 	vmov	r1, s16
 80082ce:	2300      	movs	r3, #0
 80082d0:	220a      	movs	r2, #10
 80082d2:	4620      	mov	r0, r4
 80082d4:	f000 f8c2 	bl	800845c <__multadd>
 80082d8:	ee08 0a10 	vmov	s16, r0
 80082dc:	e7e7      	b.n	80082ae <_dtoa_r+0xb26>
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bfc8      	it	gt
 80082e4:	461d      	movgt	r5, r3
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	bfd8      	it	le
 80082ea:	2501      	movle	r5, #1
 80082ec:	441d      	add	r5, r3
 80082ee:	f04f 0800 	mov.w	r8, #0
 80082f2:	ee18 1a10 	vmov	r1, s16
 80082f6:	2201      	movs	r2, #1
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fa5f 	bl	80087bc <__lshift>
 80082fe:	4631      	mov	r1, r6
 8008300:	ee08 0a10 	vmov	s16, r0
 8008304:	f000 faca 	bl	800889c <__mcmp>
 8008308:	2800      	cmp	r0, #0
 800830a:	dc91      	bgt.n	8008230 <_dtoa_r+0xaa8>
 800830c:	d102      	bne.n	8008314 <_dtoa_r+0xb8c>
 800830e:	f01a 0f01 	tst.w	sl, #1
 8008312:	d18d      	bne.n	8008230 <_dtoa_r+0xaa8>
 8008314:	462b      	mov	r3, r5
 8008316:	461d      	mov	r5, r3
 8008318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800831c:	2a30      	cmp	r2, #48	; 0x30
 800831e:	d0fa      	beq.n	8008316 <_dtoa_r+0xb8e>
 8008320:	e6d7      	b.n	80080d2 <_dtoa_r+0x94a>
 8008322:	9a01      	ldr	r2, [sp, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d184      	bne.n	8008232 <_dtoa_r+0xaaa>
 8008328:	9b00      	ldr	r3, [sp, #0]
 800832a:	3301      	adds	r3, #1
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	2331      	movs	r3, #49	; 0x31
 8008330:	7013      	strb	r3, [r2, #0]
 8008332:	e6ce      	b.n	80080d2 <_dtoa_r+0x94a>
 8008334:	4b09      	ldr	r3, [pc, #36]	; (800835c <_dtoa_r+0xbd4>)
 8008336:	f7ff ba95 	b.w	8007864 <_dtoa_r+0xdc>
 800833a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833c:	2b00      	cmp	r3, #0
 800833e:	f47f aa6e 	bne.w	800781e <_dtoa_r+0x96>
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <_dtoa_r+0xbd8>)
 8008344:	f7ff ba8e 	b.w	8007864 <_dtoa_r+0xdc>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	dcae      	bgt.n	80082ac <_dtoa_r+0xb24>
 800834e:	9b06      	ldr	r3, [sp, #24]
 8008350:	2b02      	cmp	r3, #2
 8008352:	f73f aea8 	bgt.w	80080a6 <_dtoa_r+0x91e>
 8008356:	e7a9      	b.n	80082ac <_dtoa_r+0xb24>
 8008358:	0800b6d7 	.word	0x0800b6d7
 800835c:	0800b634 	.word	0x0800b634
 8008360:	0800b658 	.word	0x0800b658

08008364 <_localeconv_r>:
 8008364:	4800      	ldr	r0, [pc, #0]	; (8008368 <_localeconv_r+0x4>)
 8008366:	4770      	bx	lr
 8008368:	20000180 	.word	0x20000180

0800836c <malloc>:
 800836c:	4b02      	ldr	r3, [pc, #8]	; (8008378 <malloc+0xc>)
 800836e:	4601      	mov	r1, r0
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	f000 bc17 	b.w	8008ba4 <_malloc_r>
 8008376:	bf00      	nop
 8008378:	2000002c 	.word	0x2000002c

0800837c <memcpy>:
 800837c:	440a      	add	r2, r1
 800837e:	4291      	cmp	r1, r2
 8008380:	f100 33ff 	add.w	r3, r0, #4294967295
 8008384:	d100      	bne.n	8008388 <memcpy+0xc>
 8008386:	4770      	bx	lr
 8008388:	b510      	push	{r4, lr}
 800838a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800838e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008392:	4291      	cmp	r1, r2
 8008394:	d1f9      	bne.n	800838a <memcpy+0xe>
 8008396:	bd10      	pop	{r4, pc}

08008398 <_Balloc>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	b976      	cbnz	r6, 80083c0 <_Balloc+0x28>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f7ff ffe2 	bl	800836c <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	6260      	str	r0, [r4, #36]	; 0x24
 80083ac:	b920      	cbnz	r0, 80083b8 <_Balloc+0x20>
 80083ae:	4b18      	ldr	r3, [pc, #96]	; (8008410 <_Balloc+0x78>)
 80083b0:	4818      	ldr	r0, [pc, #96]	; (8008414 <_Balloc+0x7c>)
 80083b2:	2166      	movs	r1, #102	; 0x66
 80083b4:	f000 fdd6 	bl	8008f64 <__assert_func>
 80083b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083bc:	6006      	str	r6, [r0, #0]
 80083be:	60c6      	str	r6, [r0, #12]
 80083c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80083c2:	68f3      	ldr	r3, [r6, #12]
 80083c4:	b183      	cbz	r3, 80083e8 <_Balloc+0x50>
 80083c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ce:	b9b8      	cbnz	r0, 8008400 <_Balloc+0x68>
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f605 	lsl.w	r6, r1, r5
 80083d6:	1d72      	adds	r2, r6, #5
 80083d8:	0092      	lsls	r2, r2, #2
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fb60 	bl	8008aa0 <_calloc_r>
 80083e0:	b160      	cbz	r0, 80083fc <_Balloc+0x64>
 80083e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083e6:	e00e      	b.n	8008406 <_Balloc+0x6e>
 80083e8:	2221      	movs	r2, #33	; 0x21
 80083ea:	2104      	movs	r1, #4
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fb57 	bl	8008aa0 <_calloc_r>
 80083f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083f4:	60f0      	str	r0, [r6, #12]
 80083f6:	68db      	ldr	r3, [r3, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e4      	bne.n	80083c6 <_Balloc+0x2e>
 80083fc:	2000      	movs	r0, #0
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	6802      	ldr	r2, [r0, #0]
 8008402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008406:	2300      	movs	r3, #0
 8008408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800840c:	e7f7      	b.n	80083fe <_Balloc+0x66>
 800840e:	bf00      	nop
 8008410:	0800b665 	.word	0x0800b665
 8008414:	0800b6e8 	.word	0x0800b6e8

08008418 <_Bfree>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800841c:	4605      	mov	r5, r0
 800841e:	460c      	mov	r4, r1
 8008420:	b976      	cbnz	r6, 8008440 <_Bfree+0x28>
 8008422:	2010      	movs	r0, #16
 8008424:	f7ff ffa2 	bl	800836c <malloc>
 8008428:	4602      	mov	r2, r0
 800842a:	6268      	str	r0, [r5, #36]	; 0x24
 800842c:	b920      	cbnz	r0, 8008438 <_Bfree+0x20>
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <_Bfree+0x3c>)
 8008430:	4809      	ldr	r0, [pc, #36]	; (8008458 <_Bfree+0x40>)
 8008432:	218a      	movs	r1, #138	; 0x8a
 8008434:	f000 fd96 	bl	8008f64 <__assert_func>
 8008438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800843c:	6006      	str	r6, [r0, #0]
 800843e:	60c6      	str	r6, [r0, #12]
 8008440:	b13c      	cbz	r4, 8008452 <_Bfree+0x3a>
 8008442:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008444:	6862      	ldr	r2, [r4, #4]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800844c:	6021      	str	r1, [r4, #0]
 800844e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008452:	bd70      	pop	{r4, r5, r6, pc}
 8008454:	0800b665 	.word	0x0800b665
 8008458:	0800b6e8 	.word	0x0800b6e8

0800845c <__multadd>:
 800845c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	690d      	ldr	r5, [r1, #16]
 8008462:	4607      	mov	r7, r0
 8008464:	460c      	mov	r4, r1
 8008466:	461e      	mov	r6, r3
 8008468:	f101 0c14 	add.w	ip, r1, #20
 800846c:	2000      	movs	r0, #0
 800846e:	f8dc 3000 	ldr.w	r3, [ip]
 8008472:	b299      	uxth	r1, r3
 8008474:	fb02 6101 	mla	r1, r2, r1, r6
 8008478:	0c1e      	lsrs	r6, r3, #16
 800847a:	0c0b      	lsrs	r3, r1, #16
 800847c:	fb02 3306 	mla	r3, r2, r6, r3
 8008480:	b289      	uxth	r1, r1
 8008482:	3001      	adds	r0, #1
 8008484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008488:	4285      	cmp	r5, r0
 800848a:	f84c 1b04 	str.w	r1, [ip], #4
 800848e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008492:	dcec      	bgt.n	800846e <__multadd+0x12>
 8008494:	b30e      	cbz	r6, 80084da <__multadd+0x7e>
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	42ab      	cmp	r3, r5
 800849a:	dc19      	bgt.n	80084d0 <__multadd+0x74>
 800849c:	6861      	ldr	r1, [r4, #4]
 800849e:	4638      	mov	r0, r7
 80084a0:	3101      	adds	r1, #1
 80084a2:	f7ff ff79 	bl	8008398 <_Balloc>
 80084a6:	4680      	mov	r8, r0
 80084a8:	b928      	cbnz	r0, 80084b6 <__multadd+0x5a>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <__multadd+0x84>)
 80084ae:	480d      	ldr	r0, [pc, #52]	; (80084e4 <__multadd+0x88>)
 80084b0:	21b5      	movs	r1, #181	; 0xb5
 80084b2:	f000 fd57 	bl	8008f64 <__assert_func>
 80084b6:	6922      	ldr	r2, [r4, #16]
 80084b8:	3202      	adds	r2, #2
 80084ba:	f104 010c 	add.w	r1, r4, #12
 80084be:	0092      	lsls	r2, r2, #2
 80084c0:	300c      	adds	r0, #12
 80084c2:	f7ff ff5b 	bl	800837c <memcpy>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7ff ffa5 	bl	8008418 <_Bfree>
 80084ce:	4644      	mov	r4, r8
 80084d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084d4:	3501      	adds	r5, #1
 80084d6:	615e      	str	r6, [r3, #20]
 80084d8:	6125      	str	r5, [r4, #16]
 80084da:	4620      	mov	r0, r4
 80084dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e0:	0800b6d7 	.word	0x0800b6d7
 80084e4:	0800b6e8 	.word	0x0800b6e8

080084e8 <__hi0bits>:
 80084e8:	0c03      	lsrs	r3, r0, #16
 80084ea:	041b      	lsls	r3, r3, #16
 80084ec:	b9d3      	cbnz	r3, 8008524 <__hi0bits+0x3c>
 80084ee:	0400      	lsls	r0, r0, #16
 80084f0:	2310      	movs	r3, #16
 80084f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084f6:	bf04      	itt	eq
 80084f8:	0200      	lsleq	r0, r0, #8
 80084fa:	3308      	addeq	r3, #8
 80084fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008500:	bf04      	itt	eq
 8008502:	0100      	lsleq	r0, r0, #4
 8008504:	3304      	addeq	r3, #4
 8008506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800850a:	bf04      	itt	eq
 800850c:	0080      	lsleq	r0, r0, #2
 800850e:	3302      	addeq	r3, #2
 8008510:	2800      	cmp	r0, #0
 8008512:	db05      	blt.n	8008520 <__hi0bits+0x38>
 8008514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008518:	f103 0301 	add.w	r3, r3, #1
 800851c:	bf08      	it	eq
 800851e:	2320      	moveq	r3, #32
 8008520:	4618      	mov	r0, r3
 8008522:	4770      	bx	lr
 8008524:	2300      	movs	r3, #0
 8008526:	e7e4      	b.n	80084f2 <__hi0bits+0xa>

08008528 <__lo0bits>:
 8008528:	6803      	ldr	r3, [r0, #0]
 800852a:	f013 0207 	ands.w	r2, r3, #7
 800852e:	4601      	mov	r1, r0
 8008530:	d00b      	beq.n	800854a <__lo0bits+0x22>
 8008532:	07da      	lsls	r2, r3, #31
 8008534:	d423      	bmi.n	800857e <__lo0bits+0x56>
 8008536:	0798      	lsls	r0, r3, #30
 8008538:	bf49      	itett	mi
 800853a:	085b      	lsrmi	r3, r3, #1
 800853c:	089b      	lsrpl	r3, r3, #2
 800853e:	2001      	movmi	r0, #1
 8008540:	600b      	strmi	r3, [r1, #0]
 8008542:	bf5c      	itt	pl
 8008544:	600b      	strpl	r3, [r1, #0]
 8008546:	2002      	movpl	r0, #2
 8008548:	4770      	bx	lr
 800854a:	b298      	uxth	r0, r3
 800854c:	b9a8      	cbnz	r0, 800857a <__lo0bits+0x52>
 800854e:	0c1b      	lsrs	r3, r3, #16
 8008550:	2010      	movs	r0, #16
 8008552:	b2da      	uxtb	r2, r3
 8008554:	b90a      	cbnz	r2, 800855a <__lo0bits+0x32>
 8008556:	3008      	adds	r0, #8
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	071a      	lsls	r2, r3, #28
 800855c:	bf04      	itt	eq
 800855e:	091b      	lsreq	r3, r3, #4
 8008560:	3004      	addeq	r0, #4
 8008562:	079a      	lsls	r2, r3, #30
 8008564:	bf04      	itt	eq
 8008566:	089b      	lsreq	r3, r3, #2
 8008568:	3002      	addeq	r0, #2
 800856a:	07da      	lsls	r2, r3, #31
 800856c:	d403      	bmi.n	8008576 <__lo0bits+0x4e>
 800856e:	085b      	lsrs	r3, r3, #1
 8008570:	f100 0001 	add.w	r0, r0, #1
 8008574:	d005      	beq.n	8008582 <__lo0bits+0x5a>
 8008576:	600b      	str	r3, [r1, #0]
 8008578:	4770      	bx	lr
 800857a:	4610      	mov	r0, r2
 800857c:	e7e9      	b.n	8008552 <__lo0bits+0x2a>
 800857e:	2000      	movs	r0, #0
 8008580:	4770      	bx	lr
 8008582:	2020      	movs	r0, #32
 8008584:	4770      	bx	lr
	...

08008588 <__i2b>:
 8008588:	b510      	push	{r4, lr}
 800858a:	460c      	mov	r4, r1
 800858c:	2101      	movs	r1, #1
 800858e:	f7ff ff03 	bl	8008398 <_Balloc>
 8008592:	4602      	mov	r2, r0
 8008594:	b928      	cbnz	r0, 80085a2 <__i2b+0x1a>
 8008596:	4b05      	ldr	r3, [pc, #20]	; (80085ac <__i2b+0x24>)
 8008598:	4805      	ldr	r0, [pc, #20]	; (80085b0 <__i2b+0x28>)
 800859a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800859e:	f000 fce1 	bl	8008f64 <__assert_func>
 80085a2:	2301      	movs	r3, #1
 80085a4:	6144      	str	r4, [r0, #20]
 80085a6:	6103      	str	r3, [r0, #16]
 80085a8:	bd10      	pop	{r4, pc}
 80085aa:	bf00      	nop
 80085ac:	0800b6d7 	.word	0x0800b6d7
 80085b0:	0800b6e8 	.word	0x0800b6e8

080085b4 <__multiply>:
 80085b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b8:	4691      	mov	r9, r2
 80085ba:	690a      	ldr	r2, [r1, #16]
 80085bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	bfb8      	it	lt
 80085c4:	460b      	movlt	r3, r1
 80085c6:	460c      	mov	r4, r1
 80085c8:	bfbc      	itt	lt
 80085ca:	464c      	movlt	r4, r9
 80085cc:	4699      	movlt	r9, r3
 80085ce:	6927      	ldr	r7, [r4, #16]
 80085d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80085d4:	68a3      	ldr	r3, [r4, #8]
 80085d6:	6861      	ldr	r1, [r4, #4]
 80085d8:	eb07 060a 	add.w	r6, r7, sl
 80085dc:	42b3      	cmp	r3, r6
 80085de:	b085      	sub	sp, #20
 80085e0:	bfb8      	it	lt
 80085e2:	3101      	addlt	r1, #1
 80085e4:	f7ff fed8 	bl	8008398 <_Balloc>
 80085e8:	b930      	cbnz	r0, 80085f8 <__multiply+0x44>
 80085ea:	4602      	mov	r2, r0
 80085ec:	4b44      	ldr	r3, [pc, #272]	; (8008700 <__multiply+0x14c>)
 80085ee:	4845      	ldr	r0, [pc, #276]	; (8008704 <__multiply+0x150>)
 80085f0:	f240 115d 	movw	r1, #349	; 0x15d
 80085f4:	f000 fcb6 	bl	8008f64 <__assert_func>
 80085f8:	f100 0514 	add.w	r5, r0, #20
 80085fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008600:	462b      	mov	r3, r5
 8008602:	2200      	movs	r2, #0
 8008604:	4543      	cmp	r3, r8
 8008606:	d321      	bcc.n	800864c <__multiply+0x98>
 8008608:	f104 0314 	add.w	r3, r4, #20
 800860c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008610:	f109 0314 	add.w	r3, r9, #20
 8008614:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008618:	9202      	str	r2, [sp, #8]
 800861a:	1b3a      	subs	r2, r7, r4
 800861c:	3a15      	subs	r2, #21
 800861e:	f022 0203 	bic.w	r2, r2, #3
 8008622:	3204      	adds	r2, #4
 8008624:	f104 0115 	add.w	r1, r4, #21
 8008628:	428f      	cmp	r7, r1
 800862a:	bf38      	it	cc
 800862c:	2204      	movcc	r2, #4
 800862e:	9201      	str	r2, [sp, #4]
 8008630:	9a02      	ldr	r2, [sp, #8]
 8008632:	9303      	str	r3, [sp, #12]
 8008634:	429a      	cmp	r2, r3
 8008636:	d80c      	bhi.n	8008652 <__multiply+0x9e>
 8008638:	2e00      	cmp	r6, #0
 800863a:	dd03      	ble.n	8008644 <__multiply+0x90>
 800863c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008640:	2b00      	cmp	r3, #0
 8008642:	d05a      	beq.n	80086fa <__multiply+0x146>
 8008644:	6106      	str	r6, [r0, #16]
 8008646:	b005      	add	sp, #20
 8008648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800864c:	f843 2b04 	str.w	r2, [r3], #4
 8008650:	e7d8      	b.n	8008604 <__multiply+0x50>
 8008652:	f8b3 a000 	ldrh.w	sl, [r3]
 8008656:	f1ba 0f00 	cmp.w	sl, #0
 800865a:	d024      	beq.n	80086a6 <__multiply+0xf2>
 800865c:	f104 0e14 	add.w	lr, r4, #20
 8008660:	46a9      	mov	r9, r5
 8008662:	f04f 0c00 	mov.w	ip, #0
 8008666:	f85e 2b04 	ldr.w	r2, [lr], #4
 800866a:	f8d9 1000 	ldr.w	r1, [r9]
 800866e:	fa1f fb82 	uxth.w	fp, r2
 8008672:	b289      	uxth	r1, r1
 8008674:	fb0a 110b 	mla	r1, sl, fp, r1
 8008678:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800867c:	f8d9 2000 	ldr.w	r2, [r9]
 8008680:	4461      	add	r1, ip
 8008682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008686:	fb0a c20b 	mla	r2, sl, fp, ip
 800868a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800868e:	b289      	uxth	r1, r1
 8008690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008694:	4577      	cmp	r7, lr
 8008696:	f849 1b04 	str.w	r1, [r9], #4
 800869a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800869e:	d8e2      	bhi.n	8008666 <__multiply+0xb2>
 80086a0:	9a01      	ldr	r2, [sp, #4]
 80086a2:	f845 c002 	str.w	ip, [r5, r2]
 80086a6:	9a03      	ldr	r2, [sp, #12]
 80086a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086ac:	3304      	adds	r3, #4
 80086ae:	f1b9 0f00 	cmp.w	r9, #0
 80086b2:	d020      	beq.n	80086f6 <__multiply+0x142>
 80086b4:	6829      	ldr	r1, [r5, #0]
 80086b6:	f104 0c14 	add.w	ip, r4, #20
 80086ba:	46ae      	mov	lr, r5
 80086bc:	f04f 0a00 	mov.w	sl, #0
 80086c0:	f8bc b000 	ldrh.w	fp, [ip]
 80086c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80086c8:	fb09 220b 	mla	r2, r9, fp, r2
 80086cc:	4492      	add	sl, r2
 80086ce:	b289      	uxth	r1, r1
 80086d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80086d4:	f84e 1b04 	str.w	r1, [lr], #4
 80086d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086dc:	f8be 1000 	ldrh.w	r1, [lr]
 80086e0:	0c12      	lsrs	r2, r2, #16
 80086e2:	fb09 1102 	mla	r1, r9, r2, r1
 80086e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80086ea:	4567      	cmp	r7, ip
 80086ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086f0:	d8e6      	bhi.n	80086c0 <__multiply+0x10c>
 80086f2:	9a01      	ldr	r2, [sp, #4]
 80086f4:	50a9      	str	r1, [r5, r2]
 80086f6:	3504      	adds	r5, #4
 80086f8:	e79a      	b.n	8008630 <__multiply+0x7c>
 80086fa:	3e01      	subs	r6, #1
 80086fc:	e79c      	b.n	8008638 <__multiply+0x84>
 80086fe:	bf00      	nop
 8008700:	0800b6d7 	.word	0x0800b6d7
 8008704:	0800b6e8 	.word	0x0800b6e8

08008708 <__pow5mult>:
 8008708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800870c:	4615      	mov	r5, r2
 800870e:	f012 0203 	ands.w	r2, r2, #3
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	d007      	beq.n	8008728 <__pow5mult+0x20>
 8008718:	4c25      	ldr	r4, [pc, #148]	; (80087b0 <__pow5mult+0xa8>)
 800871a:	3a01      	subs	r2, #1
 800871c:	2300      	movs	r3, #0
 800871e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008722:	f7ff fe9b 	bl	800845c <__multadd>
 8008726:	4607      	mov	r7, r0
 8008728:	10ad      	asrs	r5, r5, #2
 800872a:	d03d      	beq.n	80087a8 <__pow5mult+0xa0>
 800872c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800872e:	b97c      	cbnz	r4, 8008750 <__pow5mult+0x48>
 8008730:	2010      	movs	r0, #16
 8008732:	f7ff fe1b 	bl	800836c <malloc>
 8008736:	4602      	mov	r2, r0
 8008738:	6270      	str	r0, [r6, #36]	; 0x24
 800873a:	b928      	cbnz	r0, 8008748 <__pow5mult+0x40>
 800873c:	4b1d      	ldr	r3, [pc, #116]	; (80087b4 <__pow5mult+0xac>)
 800873e:	481e      	ldr	r0, [pc, #120]	; (80087b8 <__pow5mult+0xb0>)
 8008740:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008744:	f000 fc0e 	bl	8008f64 <__assert_func>
 8008748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800874c:	6004      	str	r4, [r0, #0]
 800874e:	60c4      	str	r4, [r0, #12]
 8008750:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008758:	b94c      	cbnz	r4, 800876e <__pow5mult+0x66>
 800875a:	f240 2171 	movw	r1, #625	; 0x271
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ff12 	bl	8008588 <__i2b>
 8008764:	2300      	movs	r3, #0
 8008766:	f8c8 0008 	str.w	r0, [r8, #8]
 800876a:	4604      	mov	r4, r0
 800876c:	6003      	str	r3, [r0, #0]
 800876e:	f04f 0900 	mov.w	r9, #0
 8008772:	07eb      	lsls	r3, r5, #31
 8008774:	d50a      	bpl.n	800878c <__pow5mult+0x84>
 8008776:	4639      	mov	r1, r7
 8008778:	4622      	mov	r2, r4
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ff1a 	bl	80085b4 <__multiply>
 8008780:	4639      	mov	r1, r7
 8008782:	4680      	mov	r8, r0
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff fe47 	bl	8008418 <_Bfree>
 800878a:	4647      	mov	r7, r8
 800878c:	106d      	asrs	r5, r5, #1
 800878e:	d00b      	beq.n	80087a8 <__pow5mult+0xa0>
 8008790:	6820      	ldr	r0, [r4, #0]
 8008792:	b938      	cbnz	r0, 80087a4 <__pow5mult+0x9c>
 8008794:	4622      	mov	r2, r4
 8008796:	4621      	mov	r1, r4
 8008798:	4630      	mov	r0, r6
 800879a:	f7ff ff0b 	bl	80085b4 <__multiply>
 800879e:	6020      	str	r0, [r4, #0]
 80087a0:	f8c0 9000 	str.w	r9, [r0]
 80087a4:	4604      	mov	r4, r0
 80087a6:	e7e4      	b.n	8008772 <__pow5mult+0x6a>
 80087a8:	4638      	mov	r0, r7
 80087aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ae:	bf00      	nop
 80087b0:	0800b838 	.word	0x0800b838
 80087b4:	0800b665 	.word	0x0800b665
 80087b8:	0800b6e8 	.word	0x0800b6e8

080087bc <__lshift>:
 80087bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	460c      	mov	r4, r1
 80087c2:	6849      	ldr	r1, [r1, #4]
 80087c4:	6923      	ldr	r3, [r4, #16]
 80087c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ca:	68a3      	ldr	r3, [r4, #8]
 80087cc:	4607      	mov	r7, r0
 80087ce:	4691      	mov	r9, r2
 80087d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087d4:	f108 0601 	add.w	r6, r8, #1
 80087d8:	42b3      	cmp	r3, r6
 80087da:	db0b      	blt.n	80087f4 <__lshift+0x38>
 80087dc:	4638      	mov	r0, r7
 80087de:	f7ff fddb 	bl	8008398 <_Balloc>
 80087e2:	4605      	mov	r5, r0
 80087e4:	b948      	cbnz	r0, 80087fa <__lshift+0x3e>
 80087e6:	4602      	mov	r2, r0
 80087e8:	4b2a      	ldr	r3, [pc, #168]	; (8008894 <__lshift+0xd8>)
 80087ea:	482b      	ldr	r0, [pc, #172]	; (8008898 <__lshift+0xdc>)
 80087ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80087f0:	f000 fbb8 	bl	8008f64 <__assert_func>
 80087f4:	3101      	adds	r1, #1
 80087f6:	005b      	lsls	r3, r3, #1
 80087f8:	e7ee      	b.n	80087d8 <__lshift+0x1c>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f100 0114 	add.w	r1, r0, #20
 8008800:	f100 0210 	add.w	r2, r0, #16
 8008804:	4618      	mov	r0, r3
 8008806:	4553      	cmp	r3, sl
 8008808:	db37      	blt.n	800887a <__lshift+0xbe>
 800880a:	6920      	ldr	r0, [r4, #16]
 800880c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008810:	f104 0314 	add.w	r3, r4, #20
 8008814:	f019 091f 	ands.w	r9, r9, #31
 8008818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800881c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008820:	d02f      	beq.n	8008882 <__lshift+0xc6>
 8008822:	f1c9 0e20 	rsb	lr, r9, #32
 8008826:	468a      	mov	sl, r1
 8008828:	f04f 0c00 	mov.w	ip, #0
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	fa02 f209 	lsl.w	r2, r2, r9
 8008832:	ea42 020c 	orr.w	r2, r2, ip
 8008836:	f84a 2b04 	str.w	r2, [sl], #4
 800883a:	f853 2b04 	ldr.w	r2, [r3], #4
 800883e:	4298      	cmp	r0, r3
 8008840:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008844:	d8f2      	bhi.n	800882c <__lshift+0x70>
 8008846:	1b03      	subs	r3, r0, r4
 8008848:	3b15      	subs	r3, #21
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	3304      	adds	r3, #4
 8008850:	f104 0215 	add.w	r2, r4, #21
 8008854:	4290      	cmp	r0, r2
 8008856:	bf38      	it	cc
 8008858:	2304      	movcc	r3, #4
 800885a:	f841 c003 	str.w	ip, [r1, r3]
 800885e:	f1bc 0f00 	cmp.w	ip, #0
 8008862:	d001      	beq.n	8008868 <__lshift+0xac>
 8008864:	f108 0602 	add.w	r6, r8, #2
 8008868:	3e01      	subs	r6, #1
 800886a:	4638      	mov	r0, r7
 800886c:	612e      	str	r6, [r5, #16]
 800886e:	4621      	mov	r1, r4
 8008870:	f7ff fdd2 	bl	8008418 <_Bfree>
 8008874:	4628      	mov	r0, r5
 8008876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800887a:	f842 0f04 	str.w	r0, [r2, #4]!
 800887e:	3301      	adds	r3, #1
 8008880:	e7c1      	b.n	8008806 <__lshift+0x4a>
 8008882:	3904      	subs	r1, #4
 8008884:	f853 2b04 	ldr.w	r2, [r3], #4
 8008888:	f841 2f04 	str.w	r2, [r1, #4]!
 800888c:	4298      	cmp	r0, r3
 800888e:	d8f9      	bhi.n	8008884 <__lshift+0xc8>
 8008890:	e7ea      	b.n	8008868 <__lshift+0xac>
 8008892:	bf00      	nop
 8008894:	0800b6d7 	.word	0x0800b6d7
 8008898:	0800b6e8 	.word	0x0800b6e8

0800889c <__mcmp>:
 800889c:	b530      	push	{r4, r5, lr}
 800889e:	6902      	ldr	r2, [r0, #16]
 80088a0:	690c      	ldr	r4, [r1, #16]
 80088a2:	1b12      	subs	r2, r2, r4
 80088a4:	d10e      	bne.n	80088c4 <__mcmp+0x28>
 80088a6:	f100 0314 	add.w	r3, r0, #20
 80088aa:	3114      	adds	r1, #20
 80088ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088bc:	42a5      	cmp	r5, r4
 80088be:	d003      	beq.n	80088c8 <__mcmp+0x2c>
 80088c0:	d305      	bcc.n	80088ce <__mcmp+0x32>
 80088c2:	2201      	movs	r2, #1
 80088c4:	4610      	mov	r0, r2
 80088c6:	bd30      	pop	{r4, r5, pc}
 80088c8:	4283      	cmp	r3, r0
 80088ca:	d3f3      	bcc.n	80088b4 <__mcmp+0x18>
 80088cc:	e7fa      	b.n	80088c4 <__mcmp+0x28>
 80088ce:	f04f 32ff 	mov.w	r2, #4294967295
 80088d2:	e7f7      	b.n	80088c4 <__mcmp+0x28>

080088d4 <__mdiff>:
 80088d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d8:	460c      	mov	r4, r1
 80088da:	4606      	mov	r6, r0
 80088dc:	4611      	mov	r1, r2
 80088de:	4620      	mov	r0, r4
 80088e0:	4690      	mov	r8, r2
 80088e2:	f7ff ffdb 	bl	800889c <__mcmp>
 80088e6:	1e05      	subs	r5, r0, #0
 80088e8:	d110      	bne.n	800890c <__mdiff+0x38>
 80088ea:	4629      	mov	r1, r5
 80088ec:	4630      	mov	r0, r6
 80088ee:	f7ff fd53 	bl	8008398 <_Balloc>
 80088f2:	b930      	cbnz	r0, 8008902 <__mdiff+0x2e>
 80088f4:	4b3a      	ldr	r3, [pc, #232]	; (80089e0 <__mdiff+0x10c>)
 80088f6:	4602      	mov	r2, r0
 80088f8:	f240 2132 	movw	r1, #562	; 0x232
 80088fc:	4839      	ldr	r0, [pc, #228]	; (80089e4 <__mdiff+0x110>)
 80088fe:	f000 fb31 	bl	8008f64 <__assert_func>
 8008902:	2301      	movs	r3, #1
 8008904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008908:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800890c:	bfa4      	itt	ge
 800890e:	4643      	movge	r3, r8
 8008910:	46a0      	movge	r8, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008918:	bfa6      	itte	ge
 800891a:	461c      	movge	r4, r3
 800891c:	2500      	movge	r5, #0
 800891e:	2501      	movlt	r5, #1
 8008920:	f7ff fd3a 	bl	8008398 <_Balloc>
 8008924:	b920      	cbnz	r0, 8008930 <__mdiff+0x5c>
 8008926:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <__mdiff+0x10c>)
 8008928:	4602      	mov	r2, r0
 800892a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800892e:	e7e5      	b.n	80088fc <__mdiff+0x28>
 8008930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008934:	6926      	ldr	r6, [r4, #16]
 8008936:	60c5      	str	r5, [r0, #12]
 8008938:	f104 0914 	add.w	r9, r4, #20
 800893c:	f108 0514 	add.w	r5, r8, #20
 8008940:	f100 0e14 	add.w	lr, r0, #20
 8008944:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008948:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800894c:	f108 0210 	add.w	r2, r8, #16
 8008950:	46f2      	mov	sl, lr
 8008952:	2100      	movs	r1, #0
 8008954:	f859 3b04 	ldr.w	r3, [r9], #4
 8008958:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800895c:	fa1f f883 	uxth.w	r8, r3
 8008960:	fa11 f18b 	uxtah	r1, r1, fp
 8008964:	0c1b      	lsrs	r3, r3, #16
 8008966:	eba1 0808 	sub.w	r8, r1, r8
 800896a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800896e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008972:	fa1f f888 	uxth.w	r8, r8
 8008976:	1419      	asrs	r1, r3, #16
 8008978:	454e      	cmp	r6, r9
 800897a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800897e:	f84a 3b04 	str.w	r3, [sl], #4
 8008982:	d8e7      	bhi.n	8008954 <__mdiff+0x80>
 8008984:	1b33      	subs	r3, r6, r4
 8008986:	3b15      	subs	r3, #21
 8008988:	f023 0303 	bic.w	r3, r3, #3
 800898c:	3304      	adds	r3, #4
 800898e:	3415      	adds	r4, #21
 8008990:	42a6      	cmp	r6, r4
 8008992:	bf38      	it	cc
 8008994:	2304      	movcc	r3, #4
 8008996:	441d      	add	r5, r3
 8008998:	4473      	add	r3, lr
 800899a:	469e      	mov	lr, r3
 800899c:	462e      	mov	r6, r5
 800899e:	4566      	cmp	r6, ip
 80089a0:	d30e      	bcc.n	80089c0 <__mdiff+0xec>
 80089a2:	f10c 0203 	add.w	r2, ip, #3
 80089a6:	1b52      	subs	r2, r2, r5
 80089a8:	f022 0203 	bic.w	r2, r2, #3
 80089ac:	3d03      	subs	r5, #3
 80089ae:	45ac      	cmp	ip, r5
 80089b0:	bf38      	it	cc
 80089b2:	2200      	movcc	r2, #0
 80089b4:	441a      	add	r2, r3
 80089b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80089ba:	b17b      	cbz	r3, 80089dc <__mdiff+0x108>
 80089bc:	6107      	str	r7, [r0, #16]
 80089be:	e7a3      	b.n	8008908 <__mdiff+0x34>
 80089c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80089c4:	fa11 f288 	uxtah	r2, r1, r8
 80089c8:	1414      	asrs	r4, r2, #16
 80089ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089ce:	b292      	uxth	r2, r2
 80089d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80089d4:	f84e 2b04 	str.w	r2, [lr], #4
 80089d8:	1421      	asrs	r1, r4, #16
 80089da:	e7e0      	b.n	800899e <__mdiff+0xca>
 80089dc:	3f01      	subs	r7, #1
 80089de:	e7ea      	b.n	80089b6 <__mdiff+0xe2>
 80089e0:	0800b6d7 	.word	0x0800b6d7
 80089e4:	0800b6e8 	.word	0x0800b6e8

080089e8 <__d2b>:
 80089e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80089ec:	4689      	mov	r9, r1
 80089ee:	2101      	movs	r1, #1
 80089f0:	ec57 6b10 	vmov	r6, r7, d0
 80089f4:	4690      	mov	r8, r2
 80089f6:	f7ff fccf 	bl	8008398 <_Balloc>
 80089fa:	4604      	mov	r4, r0
 80089fc:	b930      	cbnz	r0, 8008a0c <__d2b+0x24>
 80089fe:	4602      	mov	r2, r0
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <__d2b+0xb0>)
 8008a02:	4826      	ldr	r0, [pc, #152]	; (8008a9c <__d2b+0xb4>)
 8008a04:	f240 310a 	movw	r1, #778	; 0x30a
 8008a08:	f000 faac 	bl	8008f64 <__assert_func>
 8008a0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008a10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a14:	bb35      	cbnz	r5, 8008a64 <__d2b+0x7c>
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	9301      	str	r3, [sp, #4]
 8008a1a:	d028      	beq.n	8008a6e <__d2b+0x86>
 8008a1c:	4668      	mov	r0, sp
 8008a1e:	9600      	str	r6, [sp, #0]
 8008a20:	f7ff fd82 	bl	8008528 <__lo0bits>
 8008a24:	9900      	ldr	r1, [sp, #0]
 8008a26:	b300      	cbz	r0, 8008a6a <__d2b+0x82>
 8008a28:	9a01      	ldr	r2, [sp, #4]
 8008a2a:	f1c0 0320 	rsb	r3, r0, #32
 8008a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a32:	430b      	orrs	r3, r1
 8008a34:	40c2      	lsrs	r2, r0
 8008a36:	6163      	str	r3, [r4, #20]
 8008a38:	9201      	str	r2, [sp, #4]
 8008a3a:	9b01      	ldr	r3, [sp, #4]
 8008a3c:	61a3      	str	r3, [r4, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bf14      	ite	ne
 8008a42:	2202      	movne	r2, #2
 8008a44:	2201      	moveq	r2, #1
 8008a46:	6122      	str	r2, [r4, #16]
 8008a48:	b1d5      	cbz	r5, 8008a80 <__d2b+0x98>
 8008a4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a4e:	4405      	add	r5, r0
 8008a50:	f8c9 5000 	str.w	r5, [r9]
 8008a54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a58:	f8c8 0000 	str.w	r0, [r8]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	b003      	add	sp, #12
 8008a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a68:	e7d5      	b.n	8008a16 <__d2b+0x2e>
 8008a6a:	6161      	str	r1, [r4, #20]
 8008a6c:	e7e5      	b.n	8008a3a <__d2b+0x52>
 8008a6e:	a801      	add	r0, sp, #4
 8008a70:	f7ff fd5a 	bl	8008528 <__lo0bits>
 8008a74:	9b01      	ldr	r3, [sp, #4]
 8008a76:	6163      	str	r3, [r4, #20]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	6122      	str	r2, [r4, #16]
 8008a7c:	3020      	adds	r0, #32
 8008a7e:	e7e3      	b.n	8008a48 <__d2b+0x60>
 8008a80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008a84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008a88:	f8c9 0000 	str.w	r0, [r9]
 8008a8c:	6918      	ldr	r0, [r3, #16]
 8008a8e:	f7ff fd2b 	bl	80084e8 <__hi0bits>
 8008a92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008a96:	e7df      	b.n	8008a58 <__d2b+0x70>
 8008a98:	0800b6d7 	.word	0x0800b6d7
 8008a9c:	0800b6e8 	.word	0x0800b6e8

08008aa0 <_calloc_r>:
 8008aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa2:	fba1 2402 	umull	r2, r4, r1, r2
 8008aa6:	b94c      	cbnz	r4, 8008abc <_calloc_r+0x1c>
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	9201      	str	r2, [sp, #4]
 8008aac:	f000 f87a 	bl	8008ba4 <_malloc_r>
 8008ab0:	9a01      	ldr	r2, [sp, #4]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	b930      	cbnz	r0, 8008ac4 <_calloc_r+0x24>
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	b003      	add	sp, #12
 8008aba:	bd30      	pop	{r4, r5, pc}
 8008abc:	220c      	movs	r2, #12
 8008abe:	6002      	str	r2, [r0, #0]
 8008ac0:	2500      	movs	r5, #0
 8008ac2:	e7f8      	b.n	8008ab6 <_calloc_r+0x16>
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f7fe f941 	bl	8006d4c <memset>
 8008aca:	e7f4      	b.n	8008ab6 <_calloc_r+0x16>

08008acc <_free_r>:
 8008acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ace:	2900      	cmp	r1, #0
 8008ad0:	d044      	beq.n	8008b5c <_free_r+0x90>
 8008ad2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ad6:	9001      	str	r0, [sp, #4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f1a1 0404 	sub.w	r4, r1, #4
 8008ade:	bfb8      	it	lt
 8008ae0:	18e4      	addlt	r4, r4, r3
 8008ae2:	f000 fa9b 	bl	800901c <__malloc_lock>
 8008ae6:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <_free_r+0x94>)
 8008ae8:	9801      	ldr	r0, [sp, #4]
 8008aea:	6813      	ldr	r3, [r2, #0]
 8008aec:	b933      	cbnz	r3, 8008afc <_free_r+0x30>
 8008aee:	6063      	str	r3, [r4, #4]
 8008af0:	6014      	str	r4, [r2, #0]
 8008af2:	b003      	add	sp, #12
 8008af4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008af8:	f000 ba96 	b.w	8009028 <__malloc_unlock>
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	d908      	bls.n	8008b12 <_free_r+0x46>
 8008b00:	6825      	ldr	r5, [r4, #0]
 8008b02:	1961      	adds	r1, r4, r5
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf01      	itttt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	1949      	addeq	r1, r1, r5
 8008b0e:	6021      	streq	r1, [r4, #0]
 8008b10:	e7ed      	b.n	8008aee <_free_r+0x22>
 8008b12:	461a      	mov	r2, r3
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	b10b      	cbz	r3, 8008b1c <_free_r+0x50>
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	d9fa      	bls.n	8008b12 <_free_r+0x46>
 8008b1c:	6811      	ldr	r1, [r2, #0]
 8008b1e:	1855      	adds	r5, r2, r1
 8008b20:	42a5      	cmp	r5, r4
 8008b22:	d10b      	bne.n	8008b3c <_free_r+0x70>
 8008b24:	6824      	ldr	r4, [r4, #0]
 8008b26:	4421      	add	r1, r4
 8008b28:	1854      	adds	r4, r2, r1
 8008b2a:	42a3      	cmp	r3, r4
 8008b2c:	6011      	str	r1, [r2, #0]
 8008b2e:	d1e0      	bne.n	8008af2 <_free_r+0x26>
 8008b30:	681c      	ldr	r4, [r3, #0]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	6053      	str	r3, [r2, #4]
 8008b36:	4421      	add	r1, r4
 8008b38:	6011      	str	r1, [r2, #0]
 8008b3a:	e7da      	b.n	8008af2 <_free_r+0x26>
 8008b3c:	d902      	bls.n	8008b44 <_free_r+0x78>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	6003      	str	r3, [r0, #0]
 8008b42:	e7d6      	b.n	8008af2 <_free_r+0x26>
 8008b44:	6825      	ldr	r5, [r4, #0]
 8008b46:	1961      	adds	r1, r4, r5
 8008b48:	428b      	cmp	r3, r1
 8008b4a:	bf04      	itt	eq
 8008b4c:	6819      	ldreq	r1, [r3, #0]
 8008b4e:	685b      	ldreq	r3, [r3, #4]
 8008b50:	6063      	str	r3, [r4, #4]
 8008b52:	bf04      	itt	eq
 8008b54:	1949      	addeq	r1, r1, r5
 8008b56:	6021      	streq	r1, [r4, #0]
 8008b58:	6054      	str	r4, [r2, #4]
 8008b5a:	e7ca      	b.n	8008af2 <_free_r+0x26>
 8008b5c:	b003      	add	sp, #12
 8008b5e:	bd30      	pop	{r4, r5, pc}
 8008b60:	20000258 	.word	0x20000258

08008b64 <sbrk_aligned>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4e0e      	ldr	r6, [pc, #56]	; (8008ba0 <sbrk_aligned+0x3c>)
 8008b68:	460c      	mov	r4, r1
 8008b6a:	6831      	ldr	r1, [r6, #0]
 8008b6c:	4605      	mov	r5, r0
 8008b6e:	b911      	cbnz	r1, 8008b76 <sbrk_aligned+0x12>
 8008b70:	f000 f9e8 	bl	8008f44 <_sbrk_r>
 8008b74:	6030      	str	r0, [r6, #0]
 8008b76:	4621      	mov	r1, r4
 8008b78:	4628      	mov	r0, r5
 8008b7a:	f000 f9e3 	bl	8008f44 <_sbrk_r>
 8008b7e:	1c43      	adds	r3, r0, #1
 8008b80:	d00a      	beq.n	8008b98 <sbrk_aligned+0x34>
 8008b82:	1cc4      	adds	r4, r0, #3
 8008b84:	f024 0403 	bic.w	r4, r4, #3
 8008b88:	42a0      	cmp	r0, r4
 8008b8a:	d007      	beq.n	8008b9c <sbrk_aligned+0x38>
 8008b8c:	1a21      	subs	r1, r4, r0
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 f9d8 	bl	8008f44 <_sbrk_r>
 8008b94:	3001      	adds	r0, #1
 8008b96:	d101      	bne.n	8008b9c <sbrk_aligned+0x38>
 8008b98:	f04f 34ff 	mov.w	r4, #4294967295
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ba0:	2000025c 	.word	0x2000025c

08008ba4 <_malloc_r>:
 8008ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba8:	1ccd      	adds	r5, r1, #3
 8008baa:	f025 0503 	bic.w	r5, r5, #3
 8008bae:	3508      	adds	r5, #8
 8008bb0:	2d0c      	cmp	r5, #12
 8008bb2:	bf38      	it	cc
 8008bb4:	250c      	movcc	r5, #12
 8008bb6:	2d00      	cmp	r5, #0
 8008bb8:	4607      	mov	r7, r0
 8008bba:	db01      	blt.n	8008bc0 <_malloc_r+0x1c>
 8008bbc:	42a9      	cmp	r1, r5
 8008bbe:	d905      	bls.n	8008bcc <_malloc_r+0x28>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bcc:	4e2e      	ldr	r6, [pc, #184]	; (8008c88 <_malloc_r+0xe4>)
 8008bce:	f000 fa25 	bl	800901c <__malloc_lock>
 8008bd2:	6833      	ldr	r3, [r6, #0]
 8008bd4:	461c      	mov	r4, r3
 8008bd6:	bb34      	cbnz	r4, 8008c26 <_malloc_r+0x82>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f7ff ffc2 	bl	8008b64 <sbrk_aligned>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	4604      	mov	r4, r0
 8008be4:	d14d      	bne.n	8008c82 <_malloc_r+0xde>
 8008be6:	6834      	ldr	r4, [r6, #0]
 8008be8:	4626      	mov	r6, r4
 8008bea:	2e00      	cmp	r6, #0
 8008bec:	d140      	bne.n	8008c70 <_malloc_r+0xcc>
 8008bee:	6823      	ldr	r3, [r4, #0]
 8008bf0:	4631      	mov	r1, r6
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	eb04 0803 	add.w	r8, r4, r3
 8008bf8:	f000 f9a4 	bl	8008f44 <_sbrk_r>
 8008bfc:	4580      	cmp	r8, r0
 8008bfe:	d13a      	bne.n	8008c76 <_malloc_r+0xd2>
 8008c00:	6821      	ldr	r1, [r4, #0]
 8008c02:	3503      	adds	r5, #3
 8008c04:	1a6d      	subs	r5, r5, r1
 8008c06:	f025 0503 	bic.w	r5, r5, #3
 8008c0a:	3508      	adds	r5, #8
 8008c0c:	2d0c      	cmp	r5, #12
 8008c0e:	bf38      	it	cc
 8008c10:	250c      	movcc	r5, #12
 8008c12:	4629      	mov	r1, r5
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff ffa5 	bl	8008b64 <sbrk_aligned>
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	d02b      	beq.n	8008c76 <_malloc_r+0xd2>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	442b      	add	r3, r5
 8008c22:	6023      	str	r3, [r4, #0]
 8008c24:	e00e      	b.n	8008c44 <_malloc_r+0xa0>
 8008c26:	6822      	ldr	r2, [r4, #0]
 8008c28:	1b52      	subs	r2, r2, r5
 8008c2a:	d41e      	bmi.n	8008c6a <_malloc_r+0xc6>
 8008c2c:	2a0b      	cmp	r2, #11
 8008c2e:	d916      	bls.n	8008c5e <_malloc_r+0xba>
 8008c30:	1961      	adds	r1, r4, r5
 8008c32:	42a3      	cmp	r3, r4
 8008c34:	6025      	str	r5, [r4, #0]
 8008c36:	bf18      	it	ne
 8008c38:	6059      	strne	r1, [r3, #4]
 8008c3a:	6863      	ldr	r3, [r4, #4]
 8008c3c:	bf08      	it	eq
 8008c3e:	6031      	streq	r1, [r6, #0]
 8008c40:	5162      	str	r2, [r4, r5]
 8008c42:	604b      	str	r3, [r1, #4]
 8008c44:	4638      	mov	r0, r7
 8008c46:	f104 060b 	add.w	r6, r4, #11
 8008c4a:	f000 f9ed 	bl	8009028 <__malloc_unlock>
 8008c4e:	f026 0607 	bic.w	r6, r6, #7
 8008c52:	1d23      	adds	r3, r4, #4
 8008c54:	1af2      	subs	r2, r6, r3
 8008c56:	d0b6      	beq.n	8008bc6 <_malloc_r+0x22>
 8008c58:	1b9b      	subs	r3, r3, r6
 8008c5a:	50a3      	str	r3, [r4, r2]
 8008c5c:	e7b3      	b.n	8008bc6 <_malloc_r+0x22>
 8008c5e:	6862      	ldr	r2, [r4, #4]
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	bf0c      	ite	eq
 8008c64:	6032      	streq	r2, [r6, #0]
 8008c66:	605a      	strne	r2, [r3, #4]
 8008c68:	e7ec      	b.n	8008c44 <_malloc_r+0xa0>
 8008c6a:	4623      	mov	r3, r4
 8008c6c:	6864      	ldr	r4, [r4, #4]
 8008c6e:	e7b2      	b.n	8008bd6 <_malloc_r+0x32>
 8008c70:	4634      	mov	r4, r6
 8008c72:	6876      	ldr	r6, [r6, #4]
 8008c74:	e7b9      	b.n	8008bea <_malloc_r+0x46>
 8008c76:	230c      	movs	r3, #12
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	f000 f9d4 	bl	8009028 <__malloc_unlock>
 8008c80:	e7a1      	b.n	8008bc6 <_malloc_r+0x22>
 8008c82:	6025      	str	r5, [r4, #0]
 8008c84:	e7de      	b.n	8008c44 <_malloc_r+0xa0>
 8008c86:	bf00      	nop
 8008c88:	20000258 	.word	0x20000258

08008c8c <__ssputs_r>:
 8008c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c90:	688e      	ldr	r6, [r1, #8]
 8008c92:	429e      	cmp	r6, r3
 8008c94:	4682      	mov	sl, r0
 8008c96:	460c      	mov	r4, r1
 8008c98:	4690      	mov	r8, r2
 8008c9a:	461f      	mov	r7, r3
 8008c9c:	d838      	bhi.n	8008d10 <__ssputs_r+0x84>
 8008c9e:	898a      	ldrh	r2, [r1, #12]
 8008ca0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ca4:	d032      	beq.n	8008d0c <__ssputs_r+0x80>
 8008ca6:	6825      	ldr	r5, [r4, #0]
 8008ca8:	6909      	ldr	r1, [r1, #16]
 8008caa:	eba5 0901 	sub.w	r9, r5, r1
 8008cae:	6965      	ldr	r5, [r4, #20]
 8008cb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008cb8:	3301      	adds	r3, #1
 8008cba:	444b      	add	r3, r9
 8008cbc:	106d      	asrs	r5, r5, #1
 8008cbe:	429d      	cmp	r5, r3
 8008cc0:	bf38      	it	cc
 8008cc2:	461d      	movcc	r5, r3
 8008cc4:	0553      	lsls	r3, r2, #21
 8008cc6:	d531      	bpl.n	8008d2c <__ssputs_r+0xa0>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7ff ff6b 	bl	8008ba4 <_malloc_r>
 8008cce:	4606      	mov	r6, r0
 8008cd0:	b950      	cbnz	r0, 8008ce8 <__ssputs_r+0x5c>
 8008cd2:	230c      	movs	r3, #12
 8008cd4:	f8ca 3000 	str.w	r3, [sl]
 8008cd8:	89a3      	ldrh	r3, [r4, #12]
 8008cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cde:	81a3      	strh	r3, [r4, #12]
 8008ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ce8:	6921      	ldr	r1, [r4, #16]
 8008cea:	464a      	mov	r2, r9
 8008cec:	f7ff fb46 	bl	800837c <memcpy>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	6126      	str	r6, [r4, #16]
 8008cfe:	6165      	str	r5, [r4, #20]
 8008d00:	444e      	add	r6, r9
 8008d02:	eba5 0509 	sub.w	r5, r5, r9
 8008d06:	6026      	str	r6, [r4, #0]
 8008d08:	60a5      	str	r5, [r4, #8]
 8008d0a:	463e      	mov	r6, r7
 8008d0c:	42be      	cmp	r6, r7
 8008d0e:	d900      	bls.n	8008d12 <__ssputs_r+0x86>
 8008d10:	463e      	mov	r6, r7
 8008d12:	6820      	ldr	r0, [r4, #0]
 8008d14:	4632      	mov	r2, r6
 8008d16:	4641      	mov	r1, r8
 8008d18:	f000 f966 	bl	8008fe8 <memmove>
 8008d1c:	68a3      	ldr	r3, [r4, #8]
 8008d1e:	1b9b      	subs	r3, r3, r6
 8008d20:	60a3      	str	r3, [r4, #8]
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	4433      	add	r3, r6
 8008d26:	6023      	str	r3, [r4, #0]
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7db      	b.n	8008ce4 <__ssputs_r+0x58>
 8008d2c:	462a      	mov	r2, r5
 8008d2e:	f000 f981 	bl	8009034 <_realloc_r>
 8008d32:	4606      	mov	r6, r0
 8008d34:	2800      	cmp	r0, #0
 8008d36:	d1e1      	bne.n	8008cfc <__ssputs_r+0x70>
 8008d38:	6921      	ldr	r1, [r4, #16]
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	f7ff fec6 	bl	8008acc <_free_r>
 8008d40:	e7c7      	b.n	8008cd2 <__ssputs_r+0x46>
	...

08008d44 <_svfiprintf_r>:
 8008d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d48:	4698      	mov	r8, r3
 8008d4a:	898b      	ldrh	r3, [r1, #12]
 8008d4c:	061b      	lsls	r3, r3, #24
 8008d4e:	b09d      	sub	sp, #116	; 0x74
 8008d50:	4607      	mov	r7, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4614      	mov	r4, r2
 8008d56:	d50e      	bpl.n	8008d76 <_svfiprintf_r+0x32>
 8008d58:	690b      	ldr	r3, [r1, #16]
 8008d5a:	b963      	cbnz	r3, 8008d76 <_svfiprintf_r+0x32>
 8008d5c:	2140      	movs	r1, #64	; 0x40
 8008d5e:	f7ff ff21 	bl	8008ba4 <_malloc_r>
 8008d62:	6028      	str	r0, [r5, #0]
 8008d64:	6128      	str	r0, [r5, #16]
 8008d66:	b920      	cbnz	r0, 8008d72 <_svfiprintf_r+0x2e>
 8008d68:	230c      	movs	r3, #12
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d70:	e0d1      	b.n	8008f16 <_svfiprintf_r+0x1d2>
 8008d72:	2340      	movs	r3, #64	; 0x40
 8008d74:	616b      	str	r3, [r5, #20]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	2320      	movs	r3, #32
 8008d7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d84:	2330      	movs	r3, #48	; 0x30
 8008d86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f30 <_svfiprintf_r+0x1ec>
 8008d8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d8e:	f04f 0901 	mov.w	r9, #1
 8008d92:	4623      	mov	r3, r4
 8008d94:	469a      	mov	sl, r3
 8008d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d9a:	b10a      	cbz	r2, 8008da0 <_svfiprintf_r+0x5c>
 8008d9c:	2a25      	cmp	r2, #37	; 0x25
 8008d9e:	d1f9      	bne.n	8008d94 <_svfiprintf_r+0x50>
 8008da0:	ebba 0b04 	subs.w	fp, sl, r4
 8008da4:	d00b      	beq.n	8008dbe <_svfiprintf_r+0x7a>
 8008da6:	465b      	mov	r3, fp
 8008da8:	4622      	mov	r2, r4
 8008daa:	4629      	mov	r1, r5
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff ff6d 	bl	8008c8c <__ssputs_r>
 8008db2:	3001      	adds	r0, #1
 8008db4:	f000 80aa 	beq.w	8008f0c <_svfiprintf_r+0x1c8>
 8008db8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dba:	445a      	add	r2, fp
 8008dbc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80a2 	beq.w	8008f0c <_svfiprintf_r+0x1c8>
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f04f 32ff 	mov.w	r2, #4294967295
 8008dce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dd2:	f10a 0a01 	add.w	sl, sl, #1
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	9307      	str	r3, [sp, #28]
 8008dda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dde:	931a      	str	r3, [sp, #104]	; 0x68
 8008de0:	4654      	mov	r4, sl
 8008de2:	2205      	movs	r2, #5
 8008de4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de8:	4851      	ldr	r0, [pc, #324]	; (8008f30 <_svfiprintf_r+0x1ec>)
 8008dea:	f7f7 fa01 	bl	80001f0 <memchr>
 8008dee:	9a04      	ldr	r2, [sp, #16]
 8008df0:	b9d8      	cbnz	r0, 8008e2a <_svfiprintf_r+0xe6>
 8008df2:	06d0      	lsls	r0, r2, #27
 8008df4:	bf44      	itt	mi
 8008df6:	2320      	movmi	r3, #32
 8008df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dfc:	0711      	lsls	r1, r2, #28
 8008dfe:	bf44      	itt	mi
 8008e00:	232b      	movmi	r3, #43	; 0x2b
 8008e02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e06:	f89a 3000 	ldrb.w	r3, [sl]
 8008e0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008e0c:	d015      	beq.n	8008e3a <_svfiprintf_r+0xf6>
 8008e0e:	9a07      	ldr	r2, [sp, #28]
 8008e10:	4654      	mov	r4, sl
 8008e12:	2000      	movs	r0, #0
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e1e:	3b30      	subs	r3, #48	; 0x30
 8008e20:	2b09      	cmp	r3, #9
 8008e22:	d94e      	bls.n	8008ec2 <_svfiprintf_r+0x17e>
 8008e24:	b1b0      	cbz	r0, 8008e54 <_svfiprintf_r+0x110>
 8008e26:	9207      	str	r2, [sp, #28]
 8008e28:	e014      	b.n	8008e54 <_svfiprintf_r+0x110>
 8008e2a:	eba0 0308 	sub.w	r3, r0, r8
 8008e2e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e32:	4313      	orrs	r3, r2
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	46a2      	mov	sl, r4
 8008e38:	e7d2      	b.n	8008de0 <_svfiprintf_r+0x9c>
 8008e3a:	9b03      	ldr	r3, [sp, #12]
 8008e3c:	1d19      	adds	r1, r3, #4
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	9103      	str	r1, [sp, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfbb      	ittet	lt
 8008e46:	425b      	neglt	r3, r3
 8008e48:	f042 0202 	orrlt.w	r2, r2, #2
 8008e4c:	9307      	strge	r3, [sp, #28]
 8008e4e:	9307      	strlt	r3, [sp, #28]
 8008e50:	bfb8      	it	lt
 8008e52:	9204      	strlt	r2, [sp, #16]
 8008e54:	7823      	ldrb	r3, [r4, #0]
 8008e56:	2b2e      	cmp	r3, #46	; 0x2e
 8008e58:	d10c      	bne.n	8008e74 <_svfiprintf_r+0x130>
 8008e5a:	7863      	ldrb	r3, [r4, #1]
 8008e5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e5e:	d135      	bne.n	8008ecc <_svfiprintf_r+0x188>
 8008e60:	9b03      	ldr	r3, [sp, #12]
 8008e62:	1d1a      	adds	r2, r3, #4
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	9203      	str	r2, [sp, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	bfb8      	it	lt
 8008e6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e70:	3402      	adds	r4, #2
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f40 <_svfiprintf_r+0x1fc>
 8008e78:	7821      	ldrb	r1, [r4, #0]
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	4650      	mov	r0, sl
 8008e7e:	f7f7 f9b7 	bl	80001f0 <memchr>
 8008e82:	b140      	cbz	r0, 8008e96 <_svfiprintf_r+0x152>
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	eba0 000a 	sub.w	r0, r0, sl
 8008e8a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e8e:	9b04      	ldr	r3, [sp, #16]
 8008e90:	4303      	orrs	r3, r0
 8008e92:	3401      	adds	r4, #1
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e9a:	4826      	ldr	r0, [pc, #152]	; (8008f34 <_svfiprintf_r+0x1f0>)
 8008e9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea0:	2206      	movs	r2, #6
 8008ea2:	f7f7 f9a5 	bl	80001f0 <memchr>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d038      	beq.n	8008f1c <_svfiprintf_r+0x1d8>
 8008eaa:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <_svfiprintf_r+0x1f4>)
 8008eac:	bb1b      	cbnz	r3, 8008ef6 <_svfiprintf_r+0x1b2>
 8008eae:	9b03      	ldr	r3, [sp, #12]
 8008eb0:	3307      	adds	r3, #7
 8008eb2:	f023 0307 	bic.w	r3, r3, #7
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	9303      	str	r3, [sp, #12]
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	4433      	add	r3, r6
 8008ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec0:	e767      	b.n	8008d92 <_svfiprintf_r+0x4e>
 8008ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	2001      	movs	r0, #1
 8008eca:	e7a5      	b.n	8008e18 <_svfiprintf_r+0xd4>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	3401      	adds	r4, #1
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	f04f 0c0a 	mov.w	ip, #10
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ede:	3a30      	subs	r2, #48	; 0x30
 8008ee0:	2a09      	cmp	r2, #9
 8008ee2:	d903      	bls.n	8008eec <_svfiprintf_r+0x1a8>
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0c5      	beq.n	8008e74 <_svfiprintf_r+0x130>
 8008ee8:	9105      	str	r1, [sp, #20]
 8008eea:	e7c3      	b.n	8008e74 <_svfiprintf_r+0x130>
 8008eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ef0:	4604      	mov	r4, r0
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e7f0      	b.n	8008ed8 <_svfiprintf_r+0x194>
 8008ef6:	ab03      	add	r3, sp, #12
 8008ef8:	9300      	str	r3, [sp, #0]
 8008efa:	462a      	mov	r2, r5
 8008efc:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <_svfiprintf_r+0x1f8>)
 8008efe:	a904      	add	r1, sp, #16
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7fd ffcb 	bl	8006e9c <_printf_float>
 8008f06:	1c42      	adds	r2, r0, #1
 8008f08:	4606      	mov	r6, r0
 8008f0a:	d1d6      	bne.n	8008eba <_svfiprintf_r+0x176>
 8008f0c:	89ab      	ldrh	r3, [r5, #12]
 8008f0e:	065b      	lsls	r3, r3, #25
 8008f10:	f53f af2c 	bmi.w	8008d6c <_svfiprintf_r+0x28>
 8008f14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f16:	b01d      	add	sp, #116	; 0x74
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	ab03      	add	r3, sp, #12
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	462a      	mov	r2, r5
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <_svfiprintf_r+0x1f8>)
 8008f24:	a904      	add	r1, sp, #16
 8008f26:	4638      	mov	r0, r7
 8008f28:	f7fe fa5c 	bl	80073e4 <_printf_i>
 8008f2c:	e7eb      	b.n	8008f06 <_svfiprintf_r+0x1c2>
 8008f2e:	bf00      	nop
 8008f30:	0800b844 	.word	0x0800b844
 8008f34:	0800b84e 	.word	0x0800b84e
 8008f38:	08006e9d 	.word	0x08006e9d
 8008f3c:	08008c8d 	.word	0x08008c8d
 8008f40:	0800b84a 	.word	0x0800b84a

08008f44 <_sbrk_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	; (8008f60 <_sbrk_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f001 febc 	bl	800accc <_sbrk>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_sbrk_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_sbrk_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000260 	.word	0x20000260

08008f64 <__assert_func>:
 8008f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f66:	4614      	mov	r4, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <__assert_func+0x2c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4605      	mov	r5, r0
 8008f70:	68d8      	ldr	r0, [r3, #12]
 8008f72:	b14c      	cbz	r4, 8008f88 <__assert_func+0x24>
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <__assert_func+0x30>)
 8008f76:	9100      	str	r1, [sp, #0]
 8008f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f7c:	4906      	ldr	r1, [pc, #24]	; (8008f98 <__assert_func+0x34>)
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f000 f80e 	bl	8008fa0 <fiprintf>
 8008f84:	f000 faac 	bl	80094e0 <abort>
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <__assert_func+0x38>)
 8008f8a:	461c      	mov	r4, r3
 8008f8c:	e7f3      	b.n	8008f76 <__assert_func+0x12>
 8008f8e:	bf00      	nop
 8008f90:	2000002c 	.word	0x2000002c
 8008f94:	0800b855 	.word	0x0800b855
 8008f98:	0800b862 	.word	0x0800b862
 8008f9c:	0800b890 	.word	0x0800b890

08008fa0 <fiprintf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b503      	push	{r0, r1, lr}
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <fiprintf+0x20>)
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f000 f897 	bl	80090e4 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	2000002c 	.word	0x2000002c

08008fc4 <__ascii_mbtowc>:
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	b901      	cbnz	r1, 8008fca <__ascii_mbtowc+0x6>
 8008fc8:	a901      	add	r1, sp, #4
 8008fca:	b142      	cbz	r2, 8008fde <__ascii_mbtowc+0x1a>
 8008fcc:	b14b      	cbz	r3, 8008fe2 <__ascii_mbtowc+0x1e>
 8008fce:	7813      	ldrb	r3, [r2, #0]
 8008fd0:	600b      	str	r3, [r1, #0]
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	1e10      	subs	r0, r2, #0
 8008fd6:	bf18      	it	ne
 8008fd8:	2001      	movne	r0, #1
 8008fda:	b002      	add	sp, #8
 8008fdc:	4770      	bx	lr
 8008fde:	4610      	mov	r0, r2
 8008fe0:	e7fb      	b.n	8008fda <__ascii_mbtowc+0x16>
 8008fe2:	f06f 0001 	mvn.w	r0, #1
 8008fe6:	e7f8      	b.n	8008fda <__ascii_mbtowc+0x16>

08008fe8 <memmove>:
 8008fe8:	4288      	cmp	r0, r1
 8008fea:	b510      	push	{r4, lr}
 8008fec:	eb01 0402 	add.w	r4, r1, r2
 8008ff0:	d902      	bls.n	8008ff8 <memmove+0x10>
 8008ff2:	4284      	cmp	r4, r0
 8008ff4:	4623      	mov	r3, r4
 8008ff6:	d807      	bhi.n	8009008 <memmove+0x20>
 8008ff8:	1e43      	subs	r3, r0, #1
 8008ffa:	42a1      	cmp	r1, r4
 8008ffc:	d008      	beq.n	8009010 <memmove+0x28>
 8008ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009006:	e7f8      	b.n	8008ffa <memmove+0x12>
 8009008:	4402      	add	r2, r0
 800900a:	4601      	mov	r1, r0
 800900c:	428a      	cmp	r2, r1
 800900e:	d100      	bne.n	8009012 <memmove+0x2a>
 8009010:	bd10      	pop	{r4, pc}
 8009012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800901a:	e7f7      	b.n	800900c <memmove+0x24>

0800901c <__malloc_lock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_lock+0x8>)
 800901e:	f000 bc1f 	b.w	8009860 <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	20000264 	.word	0x20000264

08009028 <__malloc_unlock>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__malloc_unlock+0x8>)
 800902a:	f000 bc1a 	b.w	8009862 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	20000264 	.word	0x20000264

08009034 <_realloc_r>:
 8009034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	4680      	mov	r8, r0
 800903a:	4614      	mov	r4, r2
 800903c:	460e      	mov	r6, r1
 800903e:	b921      	cbnz	r1, 800904a <_realloc_r+0x16>
 8009040:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009044:	4611      	mov	r1, r2
 8009046:	f7ff bdad 	b.w	8008ba4 <_malloc_r>
 800904a:	b92a      	cbnz	r2, 8009058 <_realloc_r+0x24>
 800904c:	f7ff fd3e 	bl	8008acc <_free_r>
 8009050:	4625      	mov	r5, r4
 8009052:	4628      	mov	r0, r5
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	f000 fc6a 	bl	8009930 <_malloc_usable_size_r>
 800905c:	4284      	cmp	r4, r0
 800905e:	4607      	mov	r7, r0
 8009060:	d802      	bhi.n	8009068 <_realloc_r+0x34>
 8009062:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009066:	d812      	bhi.n	800908e <_realloc_r+0x5a>
 8009068:	4621      	mov	r1, r4
 800906a:	4640      	mov	r0, r8
 800906c:	f7ff fd9a 	bl	8008ba4 <_malloc_r>
 8009070:	4605      	mov	r5, r0
 8009072:	2800      	cmp	r0, #0
 8009074:	d0ed      	beq.n	8009052 <_realloc_r+0x1e>
 8009076:	42bc      	cmp	r4, r7
 8009078:	4622      	mov	r2, r4
 800907a:	4631      	mov	r1, r6
 800907c:	bf28      	it	cs
 800907e:	463a      	movcs	r2, r7
 8009080:	f7ff f97c 	bl	800837c <memcpy>
 8009084:	4631      	mov	r1, r6
 8009086:	4640      	mov	r0, r8
 8009088:	f7ff fd20 	bl	8008acc <_free_r>
 800908c:	e7e1      	b.n	8009052 <_realloc_r+0x1e>
 800908e:	4635      	mov	r5, r6
 8009090:	e7df      	b.n	8009052 <_realloc_r+0x1e>

08009092 <__sfputc_r>:
 8009092:	6893      	ldr	r3, [r2, #8]
 8009094:	3b01      	subs	r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	b410      	push	{r4}
 800909a:	6093      	str	r3, [r2, #8]
 800909c:	da08      	bge.n	80090b0 <__sfputc_r+0x1e>
 800909e:	6994      	ldr	r4, [r2, #24]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	db01      	blt.n	80090a8 <__sfputc_r+0x16>
 80090a4:	290a      	cmp	r1, #10
 80090a6:	d103      	bne.n	80090b0 <__sfputc_r+0x1e>
 80090a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090ac:	f000 b94a 	b.w	8009344 <__swbuf_r>
 80090b0:	6813      	ldr	r3, [r2, #0]
 80090b2:	1c58      	adds	r0, r3, #1
 80090b4:	6010      	str	r0, [r2, #0]
 80090b6:	7019      	strb	r1, [r3, #0]
 80090b8:	4608      	mov	r0, r1
 80090ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <__sfputs_r>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	4606      	mov	r6, r0
 80090c4:	460f      	mov	r7, r1
 80090c6:	4614      	mov	r4, r2
 80090c8:	18d5      	adds	r5, r2, r3
 80090ca:	42ac      	cmp	r4, r5
 80090cc:	d101      	bne.n	80090d2 <__sfputs_r+0x12>
 80090ce:	2000      	movs	r0, #0
 80090d0:	e007      	b.n	80090e2 <__sfputs_r+0x22>
 80090d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090d6:	463a      	mov	r2, r7
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ffda 	bl	8009092 <__sfputc_r>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d1f3      	bne.n	80090ca <__sfputs_r+0xa>
 80090e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090e4 <_vfiprintf_r>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	460d      	mov	r5, r1
 80090ea:	b09d      	sub	sp, #116	; 0x74
 80090ec:	4614      	mov	r4, r2
 80090ee:	4698      	mov	r8, r3
 80090f0:	4606      	mov	r6, r0
 80090f2:	b118      	cbz	r0, 80090fc <_vfiprintf_r+0x18>
 80090f4:	6983      	ldr	r3, [r0, #24]
 80090f6:	b90b      	cbnz	r3, 80090fc <_vfiprintf_r+0x18>
 80090f8:	f000 fb14 	bl	8009724 <__sinit>
 80090fc:	4b89      	ldr	r3, [pc, #548]	; (8009324 <_vfiprintf_r+0x240>)
 80090fe:	429d      	cmp	r5, r3
 8009100:	d11b      	bne.n	800913a <_vfiprintf_r+0x56>
 8009102:	6875      	ldr	r5, [r6, #4]
 8009104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009106:	07d9      	lsls	r1, r3, #31
 8009108:	d405      	bmi.n	8009116 <_vfiprintf_r+0x32>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	059a      	lsls	r2, r3, #22
 800910e:	d402      	bmi.n	8009116 <_vfiprintf_r+0x32>
 8009110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009112:	f000 fba5 	bl	8009860 <__retarget_lock_acquire_recursive>
 8009116:	89ab      	ldrh	r3, [r5, #12]
 8009118:	071b      	lsls	r3, r3, #28
 800911a:	d501      	bpl.n	8009120 <_vfiprintf_r+0x3c>
 800911c:	692b      	ldr	r3, [r5, #16]
 800911e:	b9eb      	cbnz	r3, 800915c <_vfiprintf_r+0x78>
 8009120:	4629      	mov	r1, r5
 8009122:	4630      	mov	r0, r6
 8009124:	f000 f96e 	bl	8009404 <__swsetup_r>
 8009128:	b1c0      	cbz	r0, 800915c <_vfiprintf_r+0x78>
 800912a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800912c:	07dc      	lsls	r4, r3, #31
 800912e:	d50e      	bpl.n	800914e <_vfiprintf_r+0x6a>
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	b01d      	add	sp, #116	; 0x74
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	4b7b      	ldr	r3, [pc, #492]	; (8009328 <_vfiprintf_r+0x244>)
 800913c:	429d      	cmp	r5, r3
 800913e:	d101      	bne.n	8009144 <_vfiprintf_r+0x60>
 8009140:	68b5      	ldr	r5, [r6, #8]
 8009142:	e7df      	b.n	8009104 <_vfiprintf_r+0x20>
 8009144:	4b79      	ldr	r3, [pc, #484]	; (800932c <_vfiprintf_r+0x248>)
 8009146:	429d      	cmp	r5, r3
 8009148:	bf08      	it	eq
 800914a:	68f5      	ldreq	r5, [r6, #12]
 800914c:	e7da      	b.n	8009104 <_vfiprintf_r+0x20>
 800914e:	89ab      	ldrh	r3, [r5, #12]
 8009150:	0598      	lsls	r0, r3, #22
 8009152:	d4ed      	bmi.n	8009130 <_vfiprintf_r+0x4c>
 8009154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009156:	f000 fb84 	bl	8009862 <__retarget_lock_release_recursive>
 800915a:	e7e9      	b.n	8009130 <_vfiprintf_r+0x4c>
 800915c:	2300      	movs	r3, #0
 800915e:	9309      	str	r3, [sp, #36]	; 0x24
 8009160:	2320      	movs	r3, #32
 8009162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009166:	f8cd 800c 	str.w	r8, [sp, #12]
 800916a:	2330      	movs	r3, #48	; 0x30
 800916c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009330 <_vfiprintf_r+0x24c>
 8009170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009174:	f04f 0901 	mov.w	r9, #1
 8009178:	4623      	mov	r3, r4
 800917a:	469a      	mov	sl, r3
 800917c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009180:	b10a      	cbz	r2, 8009186 <_vfiprintf_r+0xa2>
 8009182:	2a25      	cmp	r2, #37	; 0x25
 8009184:	d1f9      	bne.n	800917a <_vfiprintf_r+0x96>
 8009186:	ebba 0b04 	subs.w	fp, sl, r4
 800918a:	d00b      	beq.n	80091a4 <_vfiprintf_r+0xc0>
 800918c:	465b      	mov	r3, fp
 800918e:	4622      	mov	r2, r4
 8009190:	4629      	mov	r1, r5
 8009192:	4630      	mov	r0, r6
 8009194:	f7ff ff94 	bl	80090c0 <__sfputs_r>
 8009198:	3001      	adds	r0, #1
 800919a:	f000 80aa 	beq.w	80092f2 <_vfiprintf_r+0x20e>
 800919e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a0:	445a      	add	r2, fp
 80091a2:	9209      	str	r2, [sp, #36]	; 0x24
 80091a4:	f89a 3000 	ldrb.w	r3, [sl]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	f000 80a2 	beq.w	80092f2 <_vfiprintf_r+0x20e>
 80091ae:	2300      	movs	r3, #0
 80091b0:	f04f 32ff 	mov.w	r2, #4294967295
 80091b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091b8:	f10a 0a01 	add.w	sl, sl, #1
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	9307      	str	r3, [sp, #28]
 80091c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091c4:	931a      	str	r3, [sp, #104]	; 0x68
 80091c6:	4654      	mov	r4, sl
 80091c8:	2205      	movs	r2, #5
 80091ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ce:	4858      	ldr	r0, [pc, #352]	; (8009330 <_vfiprintf_r+0x24c>)
 80091d0:	f7f7 f80e 	bl	80001f0 <memchr>
 80091d4:	9a04      	ldr	r2, [sp, #16]
 80091d6:	b9d8      	cbnz	r0, 8009210 <_vfiprintf_r+0x12c>
 80091d8:	06d1      	lsls	r1, r2, #27
 80091da:	bf44      	itt	mi
 80091dc:	2320      	movmi	r3, #32
 80091de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e2:	0713      	lsls	r3, r2, #28
 80091e4:	bf44      	itt	mi
 80091e6:	232b      	movmi	r3, #43	; 0x2b
 80091e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ec:	f89a 3000 	ldrb.w	r3, [sl]
 80091f0:	2b2a      	cmp	r3, #42	; 0x2a
 80091f2:	d015      	beq.n	8009220 <_vfiprintf_r+0x13c>
 80091f4:	9a07      	ldr	r2, [sp, #28]
 80091f6:	4654      	mov	r4, sl
 80091f8:	2000      	movs	r0, #0
 80091fa:	f04f 0c0a 	mov.w	ip, #10
 80091fe:	4621      	mov	r1, r4
 8009200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009204:	3b30      	subs	r3, #48	; 0x30
 8009206:	2b09      	cmp	r3, #9
 8009208:	d94e      	bls.n	80092a8 <_vfiprintf_r+0x1c4>
 800920a:	b1b0      	cbz	r0, 800923a <_vfiprintf_r+0x156>
 800920c:	9207      	str	r2, [sp, #28]
 800920e:	e014      	b.n	800923a <_vfiprintf_r+0x156>
 8009210:	eba0 0308 	sub.w	r3, r0, r8
 8009214:	fa09 f303 	lsl.w	r3, r9, r3
 8009218:	4313      	orrs	r3, r2
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	46a2      	mov	sl, r4
 800921e:	e7d2      	b.n	80091c6 <_vfiprintf_r+0xe2>
 8009220:	9b03      	ldr	r3, [sp, #12]
 8009222:	1d19      	adds	r1, r3, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	9103      	str	r1, [sp, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	bfbb      	ittet	lt
 800922c:	425b      	neglt	r3, r3
 800922e:	f042 0202 	orrlt.w	r2, r2, #2
 8009232:	9307      	strge	r3, [sp, #28]
 8009234:	9307      	strlt	r3, [sp, #28]
 8009236:	bfb8      	it	lt
 8009238:	9204      	strlt	r2, [sp, #16]
 800923a:	7823      	ldrb	r3, [r4, #0]
 800923c:	2b2e      	cmp	r3, #46	; 0x2e
 800923e:	d10c      	bne.n	800925a <_vfiprintf_r+0x176>
 8009240:	7863      	ldrb	r3, [r4, #1]
 8009242:	2b2a      	cmp	r3, #42	; 0x2a
 8009244:	d135      	bne.n	80092b2 <_vfiprintf_r+0x1ce>
 8009246:	9b03      	ldr	r3, [sp, #12]
 8009248:	1d1a      	adds	r2, r3, #4
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	9203      	str	r2, [sp, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	bfb8      	it	lt
 8009252:	f04f 33ff 	movlt.w	r3, #4294967295
 8009256:	3402      	adds	r4, #2
 8009258:	9305      	str	r3, [sp, #20]
 800925a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009340 <_vfiprintf_r+0x25c>
 800925e:	7821      	ldrb	r1, [r4, #0]
 8009260:	2203      	movs	r2, #3
 8009262:	4650      	mov	r0, sl
 8009264:	f7f6 ffc4 	bl	80001f0 <memchr>
 8009268:	b140      	cbz	r0, 800927c <_vfiprintf_r+0x198>
 800926a:	2340      	movs	r3, #64	; 0x40
 800926c:	eba0 000a 	sub.w	r0, r0, sl
 8009270:	fa03 f000 	lsl.w	r0, r3, r0
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	4303      	orrs	r3, r0
 8009278:	3401      	adds	r4, #1
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009280:	482c      	ldr	r0, [pc, #176]	; (8009334 <_vfiprintf_r+0x250>)
 8009282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009286:	2206      	movs	r2, #6
 8009288:	f7f6 ffb2 	bl	80001f0 <memchr>
 800928c:	2800      	cmp	r0, #0
 800928e:	d03f      	beq.n	8009310 <_vfiprintf_r+0x22c>
 8009290:	4b29      	ldr	r3, [pc, #164]	; (8009338 <_vfiprintf_r+0x254>)
 8009292:	bb1b      	cbnz	r3, 80092dc <_vfiprintf_r+0x1f8>
 8009294:	9b03      	ldr	r3, [sp, #12]
 8009296:	3307      	adds	r3, #7
 8009298:	f023 0307 	bic.w	r3, r3, #7
 800929c:	3308      	adds	r3, #8
 800929e:	9303      	str	r3, [sp, #12]
 80092a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a2:	443b      	add	r3, r7
 80092a4:	9309      	str	r3, [sp, #36]	; 0x24
 80092a6:	e767      	b.n	8009178 <_vfiprintf_r+0x94>
 80092a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ac:	460c      	mov	r4, r1
 80092ae:	2001      	movs	r0, #1
 80092b0:	e7a5      	b.n	80091fe <_vfiprintf_r+0x11a>
 80092b2:	2300      	movs	r3, #0
 80092b4:	3401      	adds	r4, #1
 80092b6:	9305      	str	r3, [sp, #20]
 80092b8:	4619      	mov	r1, r3
 80092ba:	f04f 0c0a 	mov.w	ip, #10
 80092be:	4620      	mov	r0, r4
 80092c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092c4:	3a30      	subs	r2, #48	; 0x30
 80092c6:	2a09      	cmp	r2, #9
 80092c8:	d903      	bls.n	80092d2 <_vfiprintf_r+0x1ee>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0c5      	beq.n	800925a <_vfiprintf_r+0x176>
 80092ce:	9105      	str	r1, [sp, #20]
 80092d0:	e7c3      	b.n	800925a <_vfiprintf_r+0x176>
 80092d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80092d6:	4604      	mov	r4, r0
 80092d8:	2301      	movs	r3, #1
 80092da:	e7f0      	b.n	80092be <_vfiprintf_r+0x1da>
 80092dc:	ab03      	add	r3, sp, #12
 80092de:	9300      	str	r3, [sp, #0]
 80092e0:	462a      	mov	r2, r5
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <_vfiprintf_r+0x258>)
 80092e4:	a904      	add	r1, sp, #16
 80092e6:	4630      	mov	r0, r6
 80092e8:	f7fd fdd8 	bl	8006e9c <_printf_float>
 80092ec:	4607      	mov	r7, r0
 80092ee:	1c78      	adds	r0, r7, #1
 80092f0:	d1d6      	bne.n	80092a0 <_vfiprintf_r+0x1bc>
 80092f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092f4:	07d9      	lsls	r1, r3, #31
 80092f6:	d405      	bmi.n	8009304 <_vfiprintf_r+0x220>
 80092f8:	89ab      	ldrh	r3, [r5, #12]
 80092fa:	059a      	lsls	r2, r3, #22
 80092fc:	d402      	bmi.n	8009304 <_vfiprintf_r+0x220>
 80092fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009300:	f000 faaf 	bl	8009862 <__retarget_lock_release_recursive>
 8009304:	89ab      	ldrh	r3, [r5, #12]
 8009306:	065b      	lsls	r3, r3, #25
 8009308:	f53f af12 	bmi.w	8009130 <_vfiprintf_r+0x4c>
 800930c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800930e:	e711      	b.n	8009134 <_vfiprintf_r+0x50>
 8009310:	ab03      	add	r3, sp, #12
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	462a      	mov	r2, r5
 8009316:	4b09      	ldr	r3, [pc, #36]	; (800933c <_vfiprintf_r+0x258>)
 8009318:	a904      	add	r1, sp, #16
 800931a:	4630      	mov	r0, r6
 800931c:	f7fe f862 	bl	80073e4 <_printf_i>
 8009320:	e7e4      	b.n	80092ec <_vfiprintf_r+0x208>
 8009322:	bf00      	nop
 8009324:	0800b9bc 	.word	0x0800b9bc
 8009328:	0800b9dc 	.word	0x0800b9dc
 800932c:	0800b99c 	.word	0x0800b99c
 8009330:	0800b844 	.word	0x0800b844
 8009334:	0800b84e 	.word	0x0800b84e
 8009338:	08006e9d 	.word	0x08006e9d
 800933c:	080090c1 	.word	0x080090c1
 8009340:	0800b84a 	.word	0x0800b84a

08009344 <__swbuf_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	460e      	mov	r6, r1
 8009348:	4614      	mov	r4, r2
 800934a:	4605      	mov	r5, r0
 800934c:	b118      	cbz	r0, 8009356 <__swbuf_r+0x12>
 800934e:	6983      	ldr	r3, [r0, #24]
 8009350:	b90b      	cbnz	r3, 8009356 <__swbuf_r+0x12>
 8009352:	f000 f9e7 	bl	8009724 <__sinit>
 8009356:	4b21      	ldr	r3, [pc, #132]	; (80093dc <__swbuf_r+0x98>)
 8009358:	429c      	cmp	r4, r3
 800935a:	d12b      	bne.n	80093b4 <__swbuf_r+0x70>
 800935c:	686c      	ldr	r4, [r5, #4]
 800935e:	69a3      	ldr	r3, [r4, #24]
 8009360:	60a3      	str	r3, [r4, #8]
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	071a      	lsls	r2, r3, #28
 8009366:	d52f      	bpl.n	80093c8 <__swbuf_r+0x84>
 8009368:	6923      	ldr	r3, [r4, #16]
 800936a:	b36b      	cbz	r3, 80093c8 <__swbuf_r+0x84>
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	6820      	ldr	r0, [r4, #0]
 8009370:	1ac0      	subs	r0, r0, r3
 8009372:	6963      	ldr	r3, [r4, #20]
 8009374:	b2f6      	uxtb	r6, r6
 8009376:	4283      	cmp	r3, r0
 8009378:	4637      	mov	r7, r6
 800937a:	dc04      	bgt.n	8009386 <__swbuf_r+0x42>
 800937c:	4621      	mov	r1, r4
 800937e:	4628      	mov	r0, r5
 8009380:	f000 f93c 	bl	80095fc <_fflush_r>
 8009384:	bb30      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 8009386:	68a3      	ldr	r3, [r4, #8]
 8009388:	3b01      	subs	r3, #1
 800938a:	60a3      	str	r3, [r4, #8]
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	6022      	str	r2, [r4, #0]
 8009392:	701e      	strb	r6, [r3, #0]
 8009394:	6963      	ldr	r3, [r4, #20]
 8009396:	3001      	adds	r0, #1
 8009398:	4283      	cmp	r3, r0
 800939a:	d004      	beq.n	80093a6 <__swbuf_r+0x62>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	07db      	lsls	r3, r3, #31
 80093a0:	d506      	bpl.n	80093b0 <__swbuf_r+0x6c>
 80093a2:	2e0a      	cmp	r6, #10
 80093a4:	d104      	bne.n	80093b0 <__swbuf_r+0x6c>
 80093a6:	4621      	mov	r1, r4
 80093a8:	4628      	mov	r0, r5
 80093aa:	f000 f927 	bl	80095fc <_fflush_r>
 80093ae:	b988      	cbnz	r0, 80093d4 <__swbuf_r+0x90>
 80093b0:	4638      	mov	r0, r7
 80093b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093b4:	4b0a      	ldr	r3, [pc, #40]	; (80093e0 <__swbuf_r+0x9c>)
 80093b6:	429c      	cmp	r4, r3
 80093b8:	d101      	bne.n	80093be <__swbuf_r+0x7a>
 80093ba:	68ac      	ldr	r4, [r5, #8]
 80093bc:	e7cf      	b.n	800935e <__swbuf_r+0x1a>
 80093be:	4b09      	ldr	r3, [pc, #36]	; (80093e4 <__swbuf_r+0xa0>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	bf08      	it	eq
 80093c4:	68ec      	ldreq	r4, [r5, #12]
 80093c6:	e7ca      	b.n	800935e <__swbuf_r+0x1a>
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f81a 	bl	8009404 <__swsetup_r>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d0cb      	beq.n	800936c <__swbuf_r+0x28>
 80093d4:	f04f 37ff 	mov.w	r7, #4294967295
 80093d8:	e7ea      	b.n	80093b0 <__swbuf_r+0x6c>
 80093da:	bf00      	nop
 80093dc:	0800b9bc 	.word	0x0800b9bc
 80093e0:	0800b9dc 	.word	0x0800b9dc
 80093e4:	0800b99c 	.word	0x0800b99c

080093e8 <__ascii_wctomb>:
 80093e8:	b149      	cbz	r1, 80093fe <__ascii_wctomb+0x16>
 80093ea:	2aff      	cmp	r2, #255	; 0xff
 80093ec:	bf85      	ittet	hi
 80093ee:	238a      	movhi	r3, #138	; 0x8a
 80093f0:	6003      	strhi	r3, [r0, #0]
 80093f2:	700a      	strbls	r2, [r1, #0]
 80093f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80093f8:	bf98      	it	ls
 80093fa:	2001      	movls	r0, #1
 80093fc:	4770      	bx	lr
 80093fe:	4608      	mov	r0, r1
 8009400:	4770      	bx	lr
	...

08009404 <__swsetup_r>:
 8009404:	4b32      	ldr	r3, [pc, #200]	; (80094d0 <__swsetup_r+0xcc>)
 8009406:	b570      	push	{r4, r5, r6, lr}
 8009408:	681d      	ldr	r5, [r3, #0]
 800940a:	4606      	mov	r6, r0
 800940c:	460c      	mov	r4, r1
 800940e:	b125      	cbz	r5, 800941a <__swsetup_r+0x16>
 8009410:	69ab      	ldr	r3, [r5, #24]
 8009412:	b913      	cbnz	r3, 800941a <__swsetup_r+0x16>
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f985 	bl	8009724 <__sinit>
 800941a:	4b2e      	ldr	r3, [pc, #184]	; (80094d4 <__swsetup_r+0xd0>)
 800941c:	429c      	cmp	r4, r3
 800941e:	d10f      	bne.n	8009440 <__swsetup_r+0x3c>
 8009420:	686c      	ldr	r4, [r5, #4]
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009428:	0719      	lsls	r1, r3, #28
 800942a:	d42c      	bmi.n	8009486 <__swsetup_r+0x82>
 800942c:	06dd      	lsls	r5, r3, #27
 800942e:	d411      	bmi.n	8009454 <__swsetup_r+0x50>
 8009430:	2309      	movs	r3, #9
 8009432:	6033      	str	r3, [r6, #0]
 8009434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009438:	81a3      	strh	r3, [r4, #12]
 800943a:	f04f 30ff 	mov.w	r0, #4294967295
 800943e:	e03e      	b.n	80094be <__swsetup_r+0xba>
 8009440:	4b25      	ldr	r3, [pc, #148]	; (80094d8 <__swsetup_r+0xd4>)
 8009442:	429c      	cmp	r4, r3
 8009444:	d101      	bne.n	800944a <__swsetup_r+0x46>
 8009446:	68ac      	ldr	r4, [r5, #8]
 8009448:	e7eb      	b.n	8009422 <__swsetup_r+0x1e>
 800944a:	4b24      	ldr	r3, [pc, #144]	; (80094dc <__swsetup_r+0xd8>)
 800944c:	429c      	cmp	r4, r3
 800944e:	bf08      	it	eq
 8009450:	68ec      	ldreq	r4, [r5, #12]
 8009452:	e7e6      	b.n	8009422 <__swsetup_r+0x1e>
 8009454:	0758      	lsls	r0, r3, #29
 8009456:	d512      	bpl.n	800947e <__swsetup_r+0x7a>
 8009458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800945a:	b141      	cbz	r1, 800946e <__swsetup_r+0x6a>
 800945c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009460:	4299      	cmp	r1, r3
 8009462:	d002      	beq.n	800946a <__swsetup_r+0x66>
 8009464:	4630      	mov	r0, r6
 8009466:	f7ff fb31 	bl	8008acc <_free_r>
 800946a:	2300      	movs	r3, #0
 800946c:	6363      	str	r3, [r4, #52]	; 0x34
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009474:	81a3      	strh	r3, [r4, #12]
 8009476:	2300      	movs	r3, #0
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f043 0308 	orr.w	r3, r3, #8
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	b94b      	cbnz	r3, 800949e <__swsetup_r+0x9a>
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009494:	d003      	beq.n	800949e <__swsetup_r+0x9a>
 8009496:	4621      	mov	r1, r4
 8009498:	4630      	mov	r0, r6
 800949a:	f000 fa09 	bl	80098b0 <__smakebuf_r>
 800949e:	89a0      	ldrh	r0, [r4, #12]
 80094a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80094a4:	f010 0301 	ands.w	r3, r0, #1
 80094a8:	d00a      	beq.n	80094c0 <__swsetup_r+0xbc>
 80094aa:	2300      	movs	r3, #0
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	6963      	ldr	r3, [r4, #20]
 80094b0:	425b      	negs	r3, r3
 80094b2:	61a3      	str	r3, [r4, #24]
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	b943      	cbnz	r3, 80094ca <__swsetup_r+0xc6>
 80094b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094bc:	d1ba      	bne.n	8009434 <__swsetup_r+0x30>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	0781      	lsls	r1, r0, #30
 80094c2:	bf58      	it	pl
 80094c4:	6963      	ldrpl	r3, [r4, #20]
 80094c6:	60a3      	str	r3, [r4, #8]
 80094c8:	e7f4      	b.n	80094b4 <__swsetup_r+0xb0>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e7f7      	b.n	80094be <__swsetup_r+0xba>
 80094ce:	bf00      	nop
 80094d0:	2000002c 	.word	0x2000002c
 80094d4:	0800b9bc 	.word	0x0800b9bc
 80094d8:	0800b9dc 	.word	0x0800b9dc
 80094dc:	0800b99c 	.word	0x0800b99c

080094e0 <abort>:
 80094e0:	b508      	push	{r3, lr}
 80094e2:	2006      	movs	r0, #6
 80094e4:	f000 fa54 	bl	8009990 <raise>
 80094e8:	2001      	movs	r0, #1
 80094ea:	f001 fc05 	bl	800acf8 <_exit>
	...

080094f0 <__sflush_r>:
 80094f0:	898a      	ldrh	r2, [r1, #12]
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	4605      	mov	r5, r0
 80094f8:	0710      	lsls	r0, r2, #28
 80094fa:	460c      	mov	r4, r1
 80094fc:	d458      	bmi.n	80095b0 <__sflush_r+0xc0>
 80094fe:	684b      	ldr	r3, [r1, #4]
 8009500:	2b00      	cmp	r3, #0
 8009502:	dc05      	bgt.n	8009510 <__sflush_r+0x20>
 8009504:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009506:	2b00      	cmp	r3, #0
 8009508:	dc02      	bgt.n	8009510 <__sflush_r+0x20>
 800950a:	2000      	movs	r0, #0
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009512:	2e00      	cmp	r6, #0
 8009514:	d0f9      	beq.n	800950a <__sflush_r+0x1a>
 8009516:	2300      	movs	r3, #0
 8009518:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800951c:	682f      	ldr	r7, [r5, #0]
 800951e:	602b      	str	r3, [r5, #0]
 8009520:	d032      	beq.n	8009588 <__sflush_r+0x98>
 8009522:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	075a      	lsls	r2, r3, #29
 8009528:	d505      	bpl.n	8009536 <__sflush_r+0x46>
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	1ac0      	subs	r0, r0, r3
 800952e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009530:	b10b      	cbz	r3, 8009536 <__sflush_r+0x46>
 8009532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009534:	1ac0      	subs	r0, r0, r3
 8009536:	2300      	movs	r3, #0
 8009538:	4602      	mov	r2, r0
 800953a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800953c:	6a21      	ldr	r1, [r4, #32]
 800953e:	4628      	mov	r0, r5
 8009540:	47b0      	blx	r6
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	d106      	bne.n	8009556 <__sflush_r+0x66>
 8009548:	6829      	ldr	r1, [r5, #0]
 800954a:	291d      	cmp	r1, #29
 800954c:	d82c      	bhi.n	80095a8 <__sflush_r+0xb8>
 800954e:	4a2a      	ldr	r2, [pc, #168]	; (80095f8 <__sflush_r+0x108>)
 8009550:	40ca      	lsrs	r2, r1
 8009552:	07d6      	lsls	r6, r2, #31
 8009554:	d528      	bpl.n	80095a8 <__sflush_r+0xb8>
 8009556:	2200      	movs	r2, #0
 8009558:	6062      	str	r2, [r4, #4]
 800955a:	04d9      	lsls	r1, r3, #19
 800955c:	6922      	ldr	r2, [r4, #16]
 800955e:	6022      	str	r2, [r4, #0]
 8009560:	d504      	bpl.n	800956c <__sflush_r+0x7c>
 8009562:	1c42      	adds	r2, r0, #1
 8009564:	d101      	bne.n	800956a <__sflush_r+0x7a>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	b903      	cbnz	r3, 800956c <__sflush_r+0x7c>
 800956a:	6560      	str	r0, [r4, #84]	; 0x54
 800956c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800956e:	602f      	str	r7, [r5, #0]
 8009570:	2900      	cmp	r1, #0
 8009572:	d0ca      	beq.n	800950a <__sflush_r+0x1a>
 8009574:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009578:	4299      	cmp	r1, r3
 800957a:	d002      	beq.n	8009582 <__sflush_r+0x92>
 800957c:	4628      	mov	r0, r5
 800957e:	f7ff faa5 	bl	8008acc <_free_r>
 8009582:	2000      	movs	r0, #0
 8009584:	6360      	str	r0, [r4, #52]	; 0x34
 8009586:	e7c1      	b.n	800950c <__sflush_r+0x1c>
 8009588:	6a21      	ldr	r1, [r4, #32]
 800958a:	2301      	movs	r3, #1
 800958c:	4628      	mov	r0, r5
 800958e:	47b0      	blx	r6
 8009590:	1c41      	adds	r1, r0, #1
 8009592:	d1c7      	bne.n	8009524 <__sflush_r+0x34>
 8009594:	682b      	ldr	r3, [r5, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d0c4      	beq.n	8009524 <__sflush_r+0x34>
 800959a:	2b1d      	cmp	r3, #29
 800959c:	d001      	beq.n	80095a2 <__sflush_r+0xb2>
 800959e:	2b16      	cmp	r3, #22
 80095a0:	d101      	bne.n	80095a6 <__sflush_r+0xb6>
 80095a2:	602f      	str	r7, [r5, #0]
 80095a4:	e7b1      	b.n	800950a <__sflush_r+0x1a>
 80095a6:	89a3      	ldrh	r3, [r4, #12]
 80095a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ac:	81a3      	strh	r3, [r4, #12]
 80095ae:	e7ad      	b.n	800950c <__sflush_r+0x1c>
 80095b0:	690f      	ldr	r7, [r1, #16]
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d0a9      	beq.n	800950a <__sflush_r+0x1a>
 80095b6:	0793      	lsls	r3, r2, #30
 80095b8:	680e      	ldr	r6, [r1, #0]
 80095ba:	bf08      	it	eq
 80095bc:	694b      	ldreq	r3, [r1, #20]
 80095be:	600f      	str	r7, [r1, #0]
 80095c0:	bf18      	it	ne
 80095c2:	2300      	movne	r3, #0
 80095c4:	eba6 0807 	sub.w	r8, r6, r7
 80095c8:	608b      	str	r3, [r1, #8]
 80095ca:	f1b8 0f00 	cmp.w	r8, #0
 80095ce:	dd9c      	ble.n	800950a <__sflush_r+0x1a>
 80095d0:	6a21      	ldr	r1, [r4, #32]
 80095d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095d4:	4643      	mov	r3, r8
 80095d6:	463a      	mov	r2, r7
 80095d8:	4628      	mov	r0, r5
 80095da:	47b0      	blx	r6
 80095dc:	2800      	cmp	r0, #0
 80095de:	dc06      	bgt.n	80095ee <__sflush_r+0xfe>
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	f04f 30ff 	mov.w	r0, #4294967295
 80095ec:	e78e      	b.n	800950c <__sflush_r+0x1c>
 80095ee:	4407      	add	r7, r0
 80095f0:	eba8 0800 	sub.w	r8, r8, r0
 80095f4:	e7e9      	b.n	80095ca <__sflush_r+0xda>
 80095f6:	bf00      	nop
 80095f8:	20400001 	.word	0x20400001

080095fc <_fflush_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	690b      	ldr	r3, [r1, #16]
 8009600:	4605      	mov	r5, r0
 8009602:	460c      	mov	r4, r1
 8009604:	b913      	cbnz	r3, 800960c <_fflush_r+0x10>
 8009606:	2500      	movs	r5, #0
 8009608:	4628      	mov	r0, r5
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	b118      	cbz	r0, 8009616 <_fflush_r+0x1a>
 800960e:	6983      	ldr	r3, [r0, #24]
 8009610:	b90b      	cbnz	r3, 8009616 <_fflush_r+0x1a>
 8009612:	f000 f887 	bl	8009724 <__sinit>
 8009616:	4b14      	ldr	r3, [pc, #80]	; (8009668 <_fflush_r+0x6c>)
 8009618:	429c      	cmp	r4, r3
 800961a:	d11b      	bne.n	8009654 <_fflush_r+0x58>
 800961c:	686c      	ldr	r4, [r5, #4]
 800961e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d0ef      	beq.n	8009606 <_fflush_r+0xa>
 8009626:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009628:	07d0      	lsls	r0, r2, #31
 800962a:	d404      	bmi.n	8009636 <_fflush_r+0x3a>
 800962c:	0599      	lsls	r1, r3, #22
 800962e:	d402      	bmi.n	8009636 <_fflush_r+0x3a>
 8009630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009632:	f000 f915 	bl	8009860 <__retarget_lock_acquire_recursive>
 8009636:	4628      	mov	r0, r5
 8009638:	4621      	mov	r1, r4
 800963a:	f7ff ff59 	bl	80094f0 <__sflush_r>
 800963e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009640:	07da      	lsls	r2, r3, #31
 8009642:	4605      	mov	r5, r0
 8009644:	d4e0      	bmi.n	8009608 <_fflush_r+0xc>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	059b      	lsls	r3, r3, #22
 800964a:	d4dd      	bmi.n	8009608 <_fflush_r+0xc>
 800964c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800964e:	f000 f908 	bl	8009862 <__retarget_lock_release_recursive>
 8009652:	e7d9      	b.n	8009608 <_fflush_r+0xc>
 8009654:	4b05      	ldr	r3, [pc, #20]	; (800966c <_fflush_r+0x70>)
 8009656:	429c      	cmp	r4, r3
 8009658:	d101      	bne.n	800965e <_fflush_r+0x62>
 800965a:	68ac      	ldr	r4, [r5, #8]
 800965c:	e7df      	b.n	800961e <_fflush_r+0x22>
 800965e:	4b04      	ldr	r3, [pc, #16]	; (8009670 <_fflush_r+0x74>)
 8009660:	429c      	cmp	r4, r3
 8009662:	bf08      	it	eq
 8009664:	68ec      	ldreq	r4, [r5, #12]
 8009666:	e7da      	b.n	800961e <_fflush_r+0x22>
 8009668:	0800b9bc 	.word	0x0800b9bc
 800966c:	0800b9dc 	.word	0x0800b9dc
 8009670:	0800b99c 	.word	0x0800b99c

08009674 <std>:
 8009674:	2300      	movs	r3, #0
 8009676:	b510      	push	{r4, lr}
 8009678:	4604      	mov	r4, r0
 800967a:	e9c0 3300 	strd	r3, r3, [r0]
 800967e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009682:	6083      	str	r3, [r0, #8]
 8009684:	8181      	strh	r1, [r0, #12]
 8009686:	6643      	str	r3, [r0, #100]	; 0x64
 8009688:	81c2      	strh	r2, [r0, #14]
 800968a:	6183      	str	r3, [r0, #24]
 800968c:	4619      	mov	r1, r3
 800968e:	2208      	movs	r2, #8
 8009690:	305c      	adds	r0, #92	; 0x5c
 8009692:	f7fd fb5b 	bl	8006d4c <memset>
 8009696:	4b05      	ldr	r3, [pc, #20]	; (80096ac <std+0x38>)
 8009698:	6263      	str	r3, [r4, #36]	; 0x24
 800969a:	4b05      	ldr	r3, [pc, #20]	; (80096b0 <std+0x3c>)
 800969c:	62a3      	str	r3, [r4, #40]	; 0x28
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <std+0x40>)
 80096a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096a2:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <std+0x44>)
 80096a4:	6224      	str	r4, [r4, #32]
 80096a6:	6323      	str	r3, [r4, #48]	; 0x30
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	bf00      	nop
 80096ac:	080099c9 	.word	0x080099c9
 80096b0:	080099eb 	.word	0x080099eb
 80096b4:	08009a23 	.word	0x08009a23
 80096b8:	08009a47 	.word	0x08009a47

080096bc <_cleanup_r>:
 80096bc:	4901      	ldr	r1, [pc, #4]	; (80096c4 <_cleanup_r+0x8>)
 80096be:	f000 b8af 	b.w	8009820 <_fwalk_reent>
 80096c2:	bf00      	nop
 80096c4:	080095fd 	.word	0x080095fd

080096c8 <__sfmoreglue>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	2268      	movs	r2, #104	; 0x68
 80096cc:	1e4d      	subs	r5, r1, #1
 80096ce:	4355      	muls	r5, r2
 80096d0:	460e      	mov	r6, r1
 80096d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096d6:	f7ff fa65 	bl	8008ba4 <_malloc_r>
 80096da:	4604      	mov	r4, r0
 80096dc:	b140      	cbz	r0, 80096f0 <__sfmoreglue+0x28>
 80096de:	2100      	movs	r1, #0
 80096e0:	e9c0 1600 	strd	r1, r6, [r0]
 80096e4:	300c      	adds	r0, #12
 80096e6:	60a0      	str	r0, [r4, #8]
 80096e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096ec:	f7fd fb2e 	bl	8006d4c <memset>
 80096f0:	4620      	mov	r0, r4
 80096f2:	bd70      	pop	{r4, r5, r6, pc}

080096f4 <__sfp_lock_acquire>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__sfp_lock_acquire+0x8>)
 80096f6:	f000 b8b3 	b.w	8009860 <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	20000265 	.word	0x20000265

08009700 <__sfp_lock_release>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__sfp_lock_release+0x8>)
 8009702:	f000 b8ae 	b.w	8009862 <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	20000265 	.word	0x20000265

0800970c <__sinit_lock_acquire>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__sinit_lock_acquire+0x8>)
 800970e:	f000 b8a7 	b.w	8009860 <__retarget_lock_acquire_recursive>
 8009712:	bf00      	nop
 8009714:	20000266 	.word	0x20000266

08009718 <__sinit_lock_release>:
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <__sinit_lock_release+0x8>)
 800971a:	f000 b8a2 	b.w	8009862 <__retarget_lock_release_recursive>
 800971e:	bf00      	nop
 8009720:	20000266 	.word	0x20000266

08009724 <__sinit>:
 8009724:	b510      	push	{r4, lr}
 8009726:	4604      	mov	r4, r0
 8009728:	f7ff fff0 	bl	800970c <__sinit_lock_acquire>
 800972c:	69a3      	ldr	r3, [r4, #24]
 800972e:	b11b      	cbz	r3, 8009738 <__sinit+0x14>
 8009730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009734:	f7ff bff0 	b.w	8009718 <__sinit_lock_release>
 8009738:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800973c:	6523      	str	r3, [r4, #80]	; 0x50
 800973e:	4b13      	ldr	r3, [pc, #76]	; (800978c <__sinit+0x68>)
 8009740:	4a13      	ldr	r2, [pc, #76]	; (8009790 <__sinit+0x6c>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	62a2      	str	r2, [r4, #40]	; 0x28
 8009746:	42a3      	cmp	r3, r4
 8009748:	bf04      	itt	eq
 800974a:	2301      	moveq	r3, #1
 800974c:	61a3      	streq	r3, [r4, #24]
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f820 	bl	8009794 <__sfp>
 8009754:	6060      	str	r0, [r4, #4]
 8009756:	4620      	mov	r0, r4
 8009758:	f000 f81c 	bl	8009794 <__sfp>
 800975c:	60a0      	str	r0, [r4, #8]
 800975e:	4620      	mov	r0, r4
 8009760:	f000 f818 	bl	8009794 <__sfp>
 8009764:	2200      	movs	r2, #0
 8009766:	60e0      	str	r0, [r4, #12]
 8009768:	2104      	movs	r1, #4
 800976a:	6860      	ldr	r0, [r4, #4]
 800976c:	f7ff ff82 	bl	8009674 <std>
 8009770:	68a0      	ldr	r0, [r4, #8]
 8009772:	2201      	movs	r2, #1
 8009774:	2109      	movs	r1, #9
 8009776:	f7ff ff7d 	bl	8009674 <std>
 800977a:	68e0      	ldr	r0, [r4, #12]
 800977c:	2202      	movs	r2, #2
 800977e:	2112      	movs	r1, #18
 8009780:	f7ff ff78 	bl	8009674 <std>
 8009784:	2301      	movs	r3, #1
 8009786:	61a3      	str	r3, [r4, #24]
 8009788:	e7d2      	b.n	8009730 <__sinit+0xc>
 800978a:	bf00      	nop
 800978c:	0800b620 	.word	0x0800b620
 8009790:	080096bd 	.word	0x080096bd

08009794 <__sfp>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	4607      	mov	r7, r0
 8009798:	f7ff ffac 	bl	80096f4 <__sfp_lock_acquire>
 800979c:	4b1e      	ldr	r3, [pc, #120]	; (8009818 <__sfp+0x84>)
 800979e:	681e      	ldr	r6, [r3, #0]
 80097a0:	69b3      	ldr	r3, [r6, #24]
 80097a2:	b913      	cbnz	r3, 80097aa <__sfp+0x16>
 80097a4:	4630      	mov	r0, r6
 80097a6:	f7ff ffbd 	bl	8009724 <__sinit>
 80097aa:	3648      	adds	r6, #72	; 0x48
 80097ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097b0:	3b01      	subs	r3, #1
 80097b2:	d503      	bpl.n	80097bc <__sfp+0x28>
 80097b4:	6833      	ldr	r3, [r6, #0]
 80097b6:	b30b      	cbz	r3, 80097fc <__sfp+0x68>
 80097b8:	6836      	ldr	r6, [r6, #0]
 80097ba:	e7f7      	b.n	80097ac <__sfp+0x18>
 80097bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097c0:	b9d5      	cbnz	r5, 80097f8 <__sfp+0x64>
 80097c2:	4b16      	ldr	r3, [pc, #88]	; (800981c <__sfp+0x88>)
 80097c4:	60e3      	str	r3, [r4, #12]
 80097c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097ca:	6665      	str	r5, [r4, #100]	; 0x64
 80097cc:	f000 f847 	bl	800985e <__retarget_lock_init_recursive>
 80097d0:	f7ff ff96 	bl	8009700 <__sfp_lock_release>
 80097d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097dc:	6025      	str	r5, [r4, #0]
 80097de:	61a5      	str	r5, [r4, #24]
 80097e0:	2208      	movs	r2, #8
 80097e2:	4629      	mov	r1, r5
 80097e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097e8:	f7fd fab0 	bl	8006d4c <memset>
 80097ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097f4:	4620      	mov	r0, r4
 80097f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f8:	3468      	adds	r4, #104	; 0x68
 80097fa:	e7d9      	b.n	80097b0 <__sfp+0x1c>
 80097fc:	2104      	movs	r1, #4
 80097fe:	4638      	mov	r0, r7
 8009800:	f7ff ff62 	bl	80096c8 <__sfmoreglue>
 8009804:	4604      	mov	r4, r0
 8009806:	6030      	str	r0, [r6, #0]
 8009808:	2800      	cmp	r0, #0
 800980a:	d1d5      	bne.n	80097b8 <__sfp+0x24>
 800980c:	f7ff ff78 	bl	8009700 <__sfp_lock_release>
 8009810:	230c      	movs	r3, #12
 8009812:	603b      	str	r3, [r7, #0]
 8009814:	e7ee      	b.n	80097f4 <__sfp+0x60>
 8009816:	bf00      	nop
 8009818:	0800b620 	.word	0x0800b620
 800981c:	ffff0001 	.word	0xffff0001

08009820 <_fwalk_reent>:
 8009820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4606      	mov	r6, r0
 8009826:	4688      	mov	r8, r1
 8009828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800982c:	2700      	movs	r7, #0
 800982e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009832:	f1b9 0901 	subs.w	r9, r9, #1
 8009836:	d505      	bpl.n	8009844 <_fwalk_reent+0x24>
 8009838:	6824      	ldr	r4, [r4, #0]
 800983a:	2c00      	cmp	r4, #0
 800983c:	d1f7      	bne.n	800982e <_fwalk_reent+0xe>
 800983e:	4638      	mov	r0, r7
 8009840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009844:	89ab      	ldrh	r3, [r5, #12]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d907      	bls.n	800985a <_fwalk_reent+0x3a>
 800984a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800984e:	3301      	adds	r3, #1
 8009850:	d003      	beq.n	800985a <_fwalk_reent+0x3a>
 8009852:	4629      	mov	r1, r5
 8009854:	4630      	mov	r0, r6
 8009856:	47c0      	blx	r8
 8009858:	4307      	orrs	r7, r0
 800985a:	3568      	adds	r5, #104	; 0x68
 800985c:	e7e9      	b.n	8009832 <_fwalk_reent+0x12>

0800985e <__retarget_lock_init_recursive>:
 800985e:	4770      	bx	lr

08009860 <__retarget_lock_acquire_recursive>:
 8009860:	4770      	bx	lr

08009862 <__retarget_lock_release_recursive>:
 8009862:	4770      	bx	lr

08009864 <__swhatbuf_r>:
 8009864:	b570      	push	{r4, r5, r6, lr}
 8009866:	460e      	mov	r6, r1
 8009868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986c:	2900      	cmp	r1, #0
 800986e:	b096      	sub	sp, #88	; 0x58
 8009870:	4614      	mov	r4, r2
 8009872:	461d      	mov	r5, r3
 8009874:	da08      	bge.n	8009888 <__swhatbuf_r+0x24>
 8009876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	602a      	str	r2, [r5, #0]
 800987e:	061a      	lsls	r2, r3, #24
 8009880:	d410      	bmi.n	80098a4 <__swhatbuf_r+0x40>
 8009882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009886:	e00e      	b.n	80098a6 <__swhatbuf_r+0x42>
 8009888:	466a      	mov	r2, sp
 800988a:	f000 f903 	bl	8009a94 <_fstat_r>
 800988e:	2800      	cmp	r0, #0
 8009890:	dbf1      	blt.n	8009876 <__swhatbuf_r+0x12>
 8009892:	9a01      	ldr	r2, [sp, #4]
 8009894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800989c:	425a      	negs	r2, r3
 800989e:	415a      	adcs	r2, r3
 80098a0:	602a      	str	r2, [r5, #0]
 80098a2:	e7ee      	b.n	8009882 <__swhatbuf_r+0x1e>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	2000      	movs	r0, #0
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	b016      	add	sp, #88	; 0x58
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080098b0 <__smakebuf_r>:
 80098b0:	898b      	ldrh	r3, [r1, #12]
 80098b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098b4:	079d      	lsls	r5, r3, #30
 80098b6:	4606      	mov	r6, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	d507      	bpl.n	80098cc <__smakebuf_r+0x1c>
 80098bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	6123      	str	r3, [r4, #16]
 80098c4:	2301      	movs	r3, #1
 80098c6:	6163      	str	r3, [r4, #20]
 80098c8:	b002      	add	sp, #8
 80098ca:	bd70      	pop	{r4, r5, r6, pc}
 80098cc:	ab01      	add	r3, sp, #4
 80098ce:	466a      	mov	r2, sp
 80098d0:	f7ff ffc8 	bl	8009864 <__swhatbuf_r>
 80098d4:	9900      	ldr	r1, [sp, #0]
 80098d6:	4605      	mov	r5, r0
 80098d8:	4630      	mov	r0, r6
 80098da:	f7ff f963 	bl	8008ba4 <_malloc_r>
 80098de:	b948      	cbnz	r0, 80098f4 <__smakebuf_r+0x44>
 80098e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098e4:	059a      	lsls	r2, r3, #22
 80098e6:	d4ef      	bmi.n	80098c8 <__smakebuf_r+0x18>
 80098e8:	f023 0303 	bic.w	r3, r3, #3
 80098ec:	f043 0302 	orr.w	r3, r3, #2
 80098f0:	81a3      	strh	r3, [r4, #12]
 80098f2:	e7e3      	b.n	80098bc <__smakebuf_r+0xc>
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <__smakebuf_r+0x7c>)
 80098f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80098f8:	89a3      	ldrh	r3, [r4, #12]
 80098fa:	6020      	str	r0, [r4, #0]
 80098fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	9b00      	ldr	r3, [sp, #0]
 8009904:	6163      	str	r3, [r4, #20]
 8009906:	9b01      	ldr	r3, [sp, #4]
 8009908:	6120      	str	r0, [r4, #16]
 800990a:	b15b      	cbz	r3, 8009924 <__smakebuf_r+0x74>
 800990c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009910:	4630      	mov	r0, r6
 8009912:	f000 f8d1 	bl	8009ab8 <_isatty_r>
 8009916:	b128      	cbz	r0, 8009924 <__smakebuf_r+0x74>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	f023 0303 	bic.w	r3, r3, #3
 800991e:	f043 0301 	orr.w	r3, r3, #1
 8009922:	81a3      	strh	r3, [r4, #12]
 8009924:	89a0      	ldrh	r0, [r4, #12]
 8009926:	4305      	orrs	r5, r0
 8009928:	81a5      	strh	r5, [r4, #12]
 800992a:	e7cd      	b.n	80098c8 <__smakebuf_r+0x18>
 800992c:	080096bd 	.word	0x080096bd

08009930 <_malloc_usable_size_r>:
 8009930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009934:	1f18      	subs	r0, r3, #4
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfbc      	itt	lt
 800993a:	580b      	ldrlt	r3, [r1, r0]
 800993c:	18c0      	addlt	r0, r0, r3
 800993e:	4770      	bx	lr

08009940 <_raise_r>:
 8009940:	291f      	cmp	r1, #31
 8009942:	b538      	push	{r3, r4, r5, lr}
 8009944:	4604      	mov	r4, r0
 8009946:	460d      	mov	r5, r1
 8009948:	d904      	bls.n	8009954 <_raise_r+0x14>
 800994a:	2316      	movs	r3, #22
 800994c:	6003      	str	r3, [r0, #0]
 800994e:	f04f 30ff 	mov.w	r0, #4294967295
 8009952:	bd38      	pop	{r3, r4, r5, pc}
 8009954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009956:	b112      	cbz	r2, 800995e <_raise_r+0x1e>
 8009958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800995c:	b94b      	cbnz	r3, 8009972 <_raise_r+0x32>
 800995e:	4620      	mov	r0, r4
 8009960:	f000 f830 	bl	80099c4 <_getpid_r>
 8009964:	462a      	mov	r2, r5
 8009966:	4601      	mov	r1, r0
 8009968:	4620      	mov	r0, r4
 800996a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800996e:	f000 b817 	b.w	80099a0 <_kill_r>
 8009972:	2b01      	cmp	r3, #1
 8009974:	d00a      	beq.n	800998c <_raise_r+0x4c>
 8009976:	1c59      	adds	r1, r3, #1
 8009978:	d103      	bne.n	8009982 <_raise_r+0x42>
 800997a:	2316      	movs	r3, #22
 800997c:	6003      	str	r3, [r0, #0]
 800997e:	2001      	movs	r0, #1
 8009980:	e7e7      	b.n	8009952 <_raise_r+0x12>
 8009982:	2400      	movs	r4, #0
 8009984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009988:	4628      	mov	r0, r5
 800998a:	4798      	blx	r3
 800998c:	2000      	movs	r0, #0
 800998e:	e7e0      	b.n	8009952 <_raise_r+0x12>

08009990 <raise>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <raise+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f7ff bfd3 	b.w	8009940 <_raise_r>
 800999a:	bf00      	nop
 800999c:	2000002c 	.word	0x2000002c

080099a0 <_kill_r>:
 80099a0:	b538      	push	{r3, r4, r5, lr}
 80099a2:	4d07      	ldr	r5, [pc, #28]	; (80099c0 <_kill_r+0x20>)
 80099a4:	2300      	movs	r3, #0
 80099a6:	4604      	mov	r4, r0
 80099a8:	4608      	mov	r0, r1
 80099aa:	4611      	mov	r1, r2
 80099ac:	602b      	str	r3, [r5, #0]
 80099ae:	f001 f975 	bl	800ac9c <_kill>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d102      	bne.n	80099bc <_kill_r+0x1c>
 80099b6:	682b      	ldr	r3, [r5, #0]
 80099b8:	b103      	cbz	r3, 80099bc <_kill_r+0x1c>
 80099ba:	6023      	str	r3, [r4, #0]
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	bf00      	nop
 80099c0:	20000260 	.word	0x20000260

080099c4 <_getpid_r>:
 80099c4:	f001 b95a 	b.w	800ac7c <_getpid>

080099c8 <__sread>:
 80099c8:	b510      	push	{r4, lr}
 80099ca:	460c      	mov	r4, r1
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	f000 f894 	bl	8009afc <_read_r>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	bfab      	itete	ge
 80099d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099da:	89a3      	ldrhlt	r3, [r4, #12]
 80099dc:	181b      	addge	r3, r3, r0
 80099de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099e2:	bfac      	ite	ge
 80099e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80099e6:	81a3      	strhlt	r3, [r4, #12]
 80099e8:	bd10      	pop	{r4, pc}

080099ea <__swrite>:
 80099ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ee:	461f      	mov	r7, r3
 80099f0:	898b      	ldrh	r3, [r1, #12]
 80099f2:	05db      	lsls	r3, r3, #23
 80099f4:	4605      	mov	r5, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	4616      	mov	r6, r2
 80099fa:	d505      	bpl.n	8009a08 <__swrite+0x1e>
 80099fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a00:	2302      	movs	r3, #2
 8009a02:	2200      	movs	r2, #0
 8009a04:	f000 f868 	bl	8009ad8 <_lseek_r>
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a12:	81a3      	strh	r3, [r4, #12]
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	4628      	mov	r0, r5
 8009a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a1e:	f000 b817 	b.w	8009a50 <_write_r>

08009a22 <__sseek>:
 8009a22:	b510      	push	{r4, lr}
 8009a24:	460c      	mov	r4, r1
 8009a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a2a:	f000 f855 	bl	8009ad8 <_lseek_r>
 8009a2e:	1c43      	adds	r3, r0, #1
 8009a30:	89a3      	ldrh	r3, [r4, #12]
 8009a32:	bf15      	itete	ne
 8009a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a3e:	81a3      	strheq	r3, [r4, #12]
 8009a40:	bf18      	it	ne
 8009a42:	81a3      	strhne	r3, [r4, #12]
 8009a44:	bd10      	pop	{r4, pc}

08009a46 <__sclose>:
 8009a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a4a:	f000 b813 	b.w	8009a74 <_close_r>
	...

08009a50 <_write_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4d07      	ldr	r5, [pc, #28]	; (8009a70 <_write_r+0x20>)
 8009a54:	4604      	mov	r4, r0
 8009a56:	4608      	mov	r0, r1
 8009a58:	4611      	mov	r1, r2
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	602a      	str	r2, [r5, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f001 f942 	bl	800ace8 <_write>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_write_r+0x1e>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_write_r+0x1e>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	20000260 	.word	0x20000260

08009a74 <_close_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4d06      	ldr	r5, [pc, #24]	; (8009a90 <_close_r+0x1c>)
 8009a78:	2300      	movs	r3, #0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f001 f8ec 	bl	800ac5c <_close>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_close_r+0x1a>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_close_r+0x1a>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20000260 	.word	0x20000260

08009a94 <_fstat_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d07      	ldr	r5, [pc, #28]	; (8009ab4 <_fstat_r+0x20>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	f001 f8e3 	bl	800ac6c <_fstat>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d102      	bne.n	8009ab0 <_fstat_r+0x1c>
 8009aaa:	682b      	ldr	r3, [r5, #0]
 8009aac:	b103      	cbz	r3, 8009ab0 <_fstat_r+0x1c>
 8009aae:	6023      	str	r3, [r4, #0]
 8009ab0:	bd38      	pop	{r3, r4, r5, pc}
 8009ab2:	bf00      	nop
 8009ab4:	20000260 	.word	0x20000260

08009ab8 <_isatty_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4d06      	ldr	r5, [pc, #24]	; (8009ad4 <_isatty_r+0x1c>)
 8009abc:	2300      	movs	r3, #0
 8009abe:	4604      	mov	r4, r0
 8009ac0:	4608      	mov	r0, r1
 8009ac2:	602b      	str	r3, [r5, #0]
 8009ac4:	f001 f8e2 	bl	800ac8c <_isatty>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_isatty_r+0x1a>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_isatty_r+0x1a>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	20000260 	.word	0x20000260

08009ad8 <_lseek_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d07      	ldr	r5, [pc, #28]	; (8009af8 <_lseek_r+0x20>)
 8009adc:	4604      	mov	r4, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f001 f8e0 	bl	800acac <_lseek>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_lseek_r+0x1e>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_lseek_r+0x1e>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20000260 	.word	0x20000260

08009afc <_read_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_read_r+0x20>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f001 f8d6 	bl	800acbc <_read>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_read_r+0x1e>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_read_r+0x1e>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20000260 	.word	0x20000260

08009b20 <cos>:
 8009b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b22:	ec53 2b10 	vmov	r2, r3, d0
 8009b26:	4826      	ldr	r0, [pc, #152]	; (8009bc0 <cos+0xa0>)
 8009b28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b2c:	4281      	cmp	r1, r0
 8009b2e:	dc06      	bgt.n	8009b3e <cos+0x1e>
 8009b30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009bb8 <cos+0x98>
 8009b34:	b005      	add	sp, #20
 8009b36:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b3a:	f000 baa9 	b.w	800a090 <__kernel_cos>
 8009b3e:	4821      	ldr	r0, [pc, #132]	; (8009bc4 <cos+0xa4>)
 8009b40:	4281      	cmp	r1, r0
 8009b42:	dd09      	ble.n	8009b58 <cos+0x38>
 8009b44:	ee10 0a10 	vmov	r0, s0
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f7f6 fba5 	bl	8000298 <__aeabi_dsub>
 8009b4e:	ec41 0b10 	vmov	d0, r0, r1
 8009b52:	b005      	add	sp, #20
 8009b54:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b58:	4668      	mov	r0, sp
 8009b5a:	f000 f88d 	bl	8009c78 <__ieee754_rem_pio2>
 8009b5e:	f000 0003 	and.w	r0, r0, #3
 8009b62:	2801      	cmp	r0, #1
 8009b64:	d00b      	beq.n	8009b7e <cos+0x5e>
 8009b66:	2802      	cmp	r0, #2
 8009b68:	d016      	beq.n	8009b98 <cos+0x78>
 8009b6a:	b9e0      	cbnz	r0, 8009ba6 <cos+0x86>
 8009b6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b70:	ed9d 0b00 	vldr	d0, [sp]
 8009b74:	f000 fa8c 	bl	800a090 <__kernel_cos>
 8009b78:	ec51 0b10 	vmov	r0, r1, d0
 8009b7c:	e7e7      	b.n	8009b4e <cos+0x2e>
 8009b7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b82:	ed9d 0b00 	vldr	d0, [sp]
 8009b86:	f000 fe9b 	bl	800a8c0 <__kernel_sin>
 8009b8a:	ec53 2b10 	vmov	r2, r3, d0
 8009b8e:	ee10 0a10 	vmov	r0, s0
 8009b92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b96:	e7da      	b.n	8009b4e <cos+0x2e>
 8009b98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b9c:	ed9d 0b00 	vldr	d0, [sp]
 8009ba0:	f000 fa76 	bl	800a090 <__kernel_cos>
 8009ba4:	e7f1      	b.n	8009b8a <cos+0x6a>
 8009ba6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009baa:	ed9d 0b00 	vldr	d0, [sp]
 8009bae:	2001      	movs	r0, #1
 8009bb0:	f000 fe86 	bl	800a8c0 <__kernel_sin>
 8009bb4:	e7e0      	b.n	8009b78 <cos+0x58>
 8009bb6:	bf00      	nop
	...
 8009bc0:	3fe921fb 	.word	0x3fe921fb
 8009bc4:	7fefffff 	.word	0x7fefffff

08009bc8 <sin>:
 8009bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009bca:	ec53 2b10 	vmov	r2, r3, d0
 8009bce:	4828      	ldr	r0, [pc, #160]	; (8009c70 <sin+0xa8>)
 8009bd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bd4:	4281      	cmp	r1, r0
 8009bd6:	dc07      	bgt.n	8009be8 <sin+0x20>
 8009bd8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009c68 <sin+0xa0>
 8009bdc:	2000      	movs	r0, #0
 8009bde:	b005      	add	sp, #20
 8009be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009be4:	f000 be6c 	b.w	800a8c0 <__kernel_sin>
 8009be8:	4822      	ldr	r0, [pc, #136]	; (8009c74 <sin+0xac>)
 8009bea:	4281      	cmp	r1, r0
 8009bec:	dd09      	ble.n	8009c02 <sin+0x3a>
 8009bee:	ee10 0a10 	vmov	r0, s0
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	f7f6 fb50 	bl	8000298 <__aeabi_dsub>
 8009bf8:	ec41 0b10 	vmov	d0, r0, r1
 8009bfc:	b005      	add	sp, #20
 8009bfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c02:	4668      	mov	r0, sp
 8009c04:	f000 f838 	bl	8009c78 <__ieee754_rem_pio2>
 8009c08:	f000 0003 	and.w	r0, r0, #3
 8009c0c:	2801      	cmp	r0, #1
 8009c0e:	d00c      	beq.n	8009c2a <sin+0x62>
 8009c10:	2802      	cmp	r0, #2
 8009c12:	d011      	beq.n	8009c38 <sin+0x70>
 8009c14:	b9f0      	cbnz	r0, 8009c54 <sin+0x8c>
 8009c16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c1a:	ed9d 0b00 	vldr	d0, [sp]
 8009c1e:	2001      	movs	r0, #1
 8009c20:	f000 fe4e 	bl	800a8c0 <__kernel_sin>
 8009c24:	ec51 0b10 	vmov	r0, r1, d0
 8009c28:	e7e6      	b.n	8009bf8 <sin+0x30>
 8009c2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c2e:	ed9d 0b00 	vldr	d0, [sp]
 8009c32:	f000 fa2d 	bl	800a090 <__kernel_cos>
 8009c36:	e7f5      	b.n	8009c24 <sin+0x5c>
 8009c38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c3c:	ed9d 0b00 	vldr	d0, [sp]
 8009c40:	2001      	movs	r0, #1
 8009c42:	f000 fe3d 	bl	800a8c0 <__kernel_sin>
 8009c46:	ec53 2b10 	vmov	r2, r3, d0
 8009c4a:	ee10 0a10 	vmov	r0, s0
 8009c4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009c52:	e7d1      	b.n	8009bf8 <sin+0x30>
 8009c54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009c58:	ed9d 0b00 	vldr	d0, [sp]
 8009c5c:	f000 fa18 	bl	800a090 <__kernel_cos>
 8009c60:	e7f1      	b.n	8009c46 <sin+0x7e>
 8009c62:	bf00      	nop
 8009c64:	f3af 8000 	nop.w
	...
 8009c70:	3fe921fb 	.word	0x3fe921fb
 8009c74:	7fefffff 	.word	0x7fefffff

08009c78 <__ieee754_rem_pio2>:
 8009c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	ed2d 8b02 	vpush	{d8}
 8009c80:	ec55 4b10 	vmov	r4, r5, d0
 8009c84:	4bca      	ldr	r3, [pc, #808]	; (8009fb0 <__ieee754_rem_pio2+0x338>)
 8009c86:	b08b      	sub	sp, #44	; 0x2c
 8009c88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009c8c:	4598      	cmp	r8, r3
 8009c8e:	4682      	mov	sl, r0
 8009c90:	9502      	str	r5, [sp, #8]
 8009c92:	dc08      	bgt.n	8009ca6 <__ieee754_rem_pio2+0x2e>
 8009c94:	2200      	movs	r2, #0
 8009c96:	2300      	movs	r3, #0
 8009c98:	ed80 0b00 	vstr	d0, [r0]
 8009c9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009ca0:	f04f 0b00 	mov.w	fp, #0
 8009ca4:	e028      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009ca6:	4bc3      	ldr	r3, [pc, #780]	; (8009fb4 <__ieee754_rem_pio2+0x33c>)
 8009ca8:	4598      	cmp	r8, r3
 8009caa:	dc78      	bgt.n	8009d9e <__ieee754_rem_pio2+0x126>
 8009cac:	9b02      	ldr	r3, [sp, #8]
 8009cae:	4ec2      	ldr	r6, [pc, #776]	; (8009fb8 <__ieee754_rem_pio2+0x340>)
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	ee10 0a10 	vmov	r0, s0
 8009cb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009f78 <__ieee754_rem_pio2+0x300>)
 8009cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	dd39      	ble.n	8009d34 <__ieee754_rem_pio2+0xbc>
 8009cc0:	f7f6 faea 	bl	8000298 <__aeabi_dsub>
 8009cc4:	45b0      	cmp	r8, r6
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
 8009cca:	d01b      	beq.n	8009d04 <__ieee754_rem_pio2+0x8c>
 8009ccc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fae1 	bl	8000298 <__aeabi_dsub>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	e9ca 2300 	strd	r2, r3, [sl]
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fad9 	bl	8000298 <__aeabi_dsub>
 8009ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fad4 	bl	8000298 <__aeabi_dsub>
 8009cf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cf4:	f04f 0b01 	mov.w	fp, #1
 8009cf8:	4658      	mov	r0, fp
 8009cfa:	b00b      	add	sp, #44	; 0x2c
 8009cfc:	ecbd 8b02 	vpop	{d8}
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	f7f6 fac5 	bl	8000298 <__aeabi_dsub>
 8009d0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	4604      	mov	r4, r0
 8009d16:	460d      	mov	r5, r1
 8009d18:	f7f6 fabe 	bl	8000298 <__aeabi_dsub>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	e9ca 2300 	strd	r2, r3, [sl]
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fab6 	bl	8000298 <__aeabi_dsub>
 8009d2c:	a398      	add	r3, pc, #608	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	e7db      	b.n	8009cec <__ieee754_rem_pio2+0x74>
 8009d34:	f7f6 fab2 	bl	800029c <__adddf3>
 8009d38:	45b0      	cmp	r8, r6
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	460d      	mov	r5, r1
 8009d3e:	d016      	beq.n	8009d6e <__ieee754_rem_pio2+0xf6>
 8009d40:	a38f      	add	r3, pc, #572	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 faa9 	bl	800029c <__adddf3>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	e9ca 2300 	strd	r2, r3, [sl]
 8009d52:	4620      	mov	r0, r4
 8009d54:	4629      	mov	r1, r5
 8009d56:	f7f6 fa9f 	bl	8000298 <__aeabi_dsub>
 8009d5a:	a389      	add	r3, pc, #548	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fa9c 	bl	800029c <__adddf3>
 8009d64:	f04f 3bff 	mov.w	fp, #4294967295
 8009d68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009d6c:	e7c4      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009d6e:	a386      	add	r3, pc, #536	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fa92 	bl	800029c <__adddf3>
 8009d78:	a385      	add	r3, pc, #532	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7e:	4604      	mov	r4, r0
 8009d80:	460d      	mov	r5, r1
 8009d82:	f7f6 fa8b 	bl	800029c <__adddf3>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	e9ca 2300 	strd	r2, r3, [sl]
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fa81 	bl	8000298 <__aeabi_dsub>
 8009d96:	a37e      	add	r3, pc, #504	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	e7e0      	b.n	8009d60 <__ieee754_rem_pio2+0xe8>
 8009d9e:	4b87      	ldr	r3, [pc, #540]	; (8009fbc <__ieee754_rem_pio2+0x344>)
 8009da0:	4598      	cmp	r8, r3
 8009da2:	f300 80d9 	bgt.w	8009f58 <__ieee754_rem_pio2+0x2e0>
 8009da6:	f000 fe49 	bl	800aa3c <fabs>
 8009daa:	ec55 4b10 	vmov	r4, r5, d0
 8009dae:	ee10 0a10 	vmov	r0, s0
 8009db2:	a379      	add	r3, pc, #484	; (adr r3, 8009f98 <__ieee754_rem_pio2+0x320>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fc25 	bl	8000608 <__aeabi_dmul>
 8009dbe:	4b80      	ldr	r3, [pc, #512]	; (8009fc0 <__ieee754_rem_pio2+0x348>)
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f7f6 fa6b 	bl	800029c <__adddf3>
 8009dc6:	f7f6 fecf 	bl	8000b68 <__aeabi_d2iz>
 8009dca:	4683      	mov	fp, r0
 8009dcc:	f7f6 fbb2 	bl	8000534 <__aeabi_i2d>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	ec43 2b18 	vmov	d8, r2, r3
 8009dd8:	a367      	add	r3, pc, #412	; (adr r3, 8009f78 <__ieee754_rem_pio2+0x300>)
 8009dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dde:	f7f6 fc13 	bl	8000608 <__aeabi_dmul>
 8009de2:	4602      	mov	r2, r0
 8009de4:	460b      	mov	r3, r1
 8009de6:	4620      	mov	r0, r4
 8009de8:	4629      	mov	r1, r5
 8009dea:	f7f6 fa55 	bl	8000298 <__aeabi_dsub>
 8009dee:	a364      	add	r3, pc, #400	; (adr r3, 8009f80 <__ieee754_rem_pio2+0x308>)
 8009df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df4:	4606      	mov	r6, r0
 8009df6:	460f      	mov	r7, r1
 8009df8:	ec51 0b18 	vmov	r0, r1, d8
 8009dfc:	f7f6 fc04 	bl	8000608 <__aeabi_dmul>
 8009e00:	f1bb 0f1f 	cmp.w	fp, #31
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	dc0d      	bgt.n	8009e26 <__ieee754_rem_pio2+0x1ae>
 8009e0a:	4b6e      	ldr	r3, [pc, #440]	; (8009fc4 <__ieee754_rem_pio2+0x34c>)
 8009e0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e14:	4543      	cmp	r3, r8
 8009e16:	d006      	beq.n	8009e26 <__ieee754_rem_pio2+0x1ae>
 8009e18:	4622      	mov	r2, r4
 8009e1a:	462b      	mov	r3, r5
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fa3a 	bl	8000298 <__aeabi_dsub>
 8009e24:	e00f      	b.n	8009e46 <__ieee754_rem_pio2+0x1ce>
 8009e26:	462b      	mov	r3, r5
 8009e28:	4622      	mov	r2, r4
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa33 	bl	8000298 <__aeabi_dsub>
 8009e32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e36:	9303      	str	r3, [sp, #12]
 8009e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009e3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009e40:	f1b8 0f10 	cmp.w	r8, #16
 8009e44:	dc02      	bgt.n	8009e4c <__ieee754_rem_pio2+0x1d4>
 8009e46:	e9ca 0100 	strd	r0, r1, [sl]
 8009e4a:	e039      	b.n	8009ec0 <__ieee754_rem_pio2+0x248>
 8009e4c:	a34e      	add	r3, pc, #312	; (adr r3, 8009f88 <__ieee754_rem_pio2+0x310>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	ec51 0b18 	vmov	r0, r1, d8
 8009e56:	f7f6 fbd7 	bl	8000608 <__aeabi_dmul>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	4602      	mov	r2, r0
 8009e60:	460b      	mov	r3, r1
 8009e62:	4630      	mov	r0, r6
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fa17 	bl	8000298 <__aeabi_dsub>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4680      	mov	r8, r0
 8009e70:	4689      	mov	r9, r1
 8009e72:	4630      	mov	r0, r6
 8009e74:	4639      	mov	r1, r7
 8009e76:	f7f6 fa0f 	bl	8000298 <__aeabi_dsub>
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	462b      	mov	r3, r5
 8009e7e:	f7f6 fa0b 	bl	8000298 <__aeabi_dsub>
 8009e82:	a343      	add	r3, pc, #268	; (adr r3, 8009f90 <__ieee754_rem_pio2+0x318>)
 8009e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	ec51 0b18 	vmov	r0, r1, d8
 8009e90:	f7f6 fbba 	bl	8000608 <__aeabi_dmul>
 8009e94:	4622      	mov	r2, r4
 8009e96:	462b      	mov	r3, r5
 8009e98:	f7f6 f9fe 	bl	8000298 <__aeabi_dsub>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	460d      	mov	r5, r1
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	f7f6 f9f6 	bl	8000298 <__aeabi_dsub>
 8009eac:	9a03      	ldr	r2, [sp, #12]
 8009eae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b31      	cmp	r3, #49	; 0x31
 8009eb6:	dc24      	bgt.n	8009f02 <__ieee754_rem_pio2+0x28a>
 8009eb8:	e9ca 0100 	strd	r0, r1, [sl]
 8009ebc:	4646      	mov	r6, r8
 8009ebe:	464f      	mov	r7, r9
 8009ec0:	e9da 8900 	ldrd	r8, r9, [sl]
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	4642      	mov	r2, r8
 8009ec8:	464b      	mov	r3, r9
 8009eca:	4639      	mov	r1, r7
 8009ecc:	f7f6 f9e4 	bl	8000298 <__aeabi_dsub>
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	f7f6 f9e0 	bl	8000298 <__aeabi_dsub>
 8009ed8:	9b02      	ldr	r3, [sp, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009ee0:	f6bf af0a 	bge.w	8009cf8 <__ieee754_rem_pio2+0x80>
 8009ee4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ee8:	f8ca 3004 	str.w	r3, [sl, #4]
 8009eec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ef0:	f8ca 8000 	str.w	r8, [sl]
 8009ef4:	f8ca 0008 	str.w	r0, [sl, #8]
 8009ef8:	f8ca 300c 	str.w	r3, [sl, #12]
 8009efc:	f1cb 0b00 	rsb	fp, fp, #0
 8009f00:	e6fa      	b.n	8009cf8 <__ieee754_rem_pio2+0x80>
 8009f02:	a327      	add	r3, pc, #156	; (adr r3, 8009fa0 <__ieee754_rem_pio2+0x328>)
 8009f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f08:	ec51 0b18 	vmov	r0, r1, d8
 8009f0c:	f7f6 fb7c 	bl	8000608 <__aeabi_dmul>
 8009f10:	4604      	mov	r4, r0
 8009f12:	460d      	mov	r5, r1
 8009f14:	4602      	mov	r2, r0
 8009f16:	460b      	mov	r3, r1
 8009f18:	4640      	mov	r0, r8
 8009f1a:	4649      	mov	r1, r9
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 f9b4 	bl	8000298 <__aeabi_dsub>
 8009f30:	4622      	mov	r2, r4
 8009f32:	462b      	mov	r3, r5
 8009f34:	f7f6 f9b0 	bl	8000298 <__aeabi_dsub>
 8009f38:	a31b      	add	r3, pc, #108	; (adr r3, 8009fa8 <__ieee754_rem_pio2+0x330>)
 8009f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3e:	4604      	mov	r4, r0
 8009f40:	460d      	mov	r5, r1
 8009f42:	ec51 0b18 	vmov	r0, r1, d8
 8009f46:	f7f6 fb5f 	bl	8000608 <__aeabi_dmul>
 8009f4a:	4622      	mov	r2, r4
 8009f4c:	462b      	mov	r3, r5
 8009f4e:	f7f6 f9a3 	bl	8000298 <__aeabi_dsub>
 8009f52:	4604      	mov	r4, r0
 8009f54:	460d      	mov	r5, r1
 8009f56:	e75f      	b.n	8009e18 <__ieee754_rem_pio2+0x1a0>
 8009f58:	4b1b      	ldr	r3, [pc, #108]	; (8009fc8 <__ieee754_rem_pio2+0x350>)
 8009f5a:	4598      	cmp	r8, r3
 8009f5c:	dd36      	ble.n	8009fcc <__ieee754_rem_pio2+0x354>
 8009f5e:	ee10 2a10 	vmov	r2, s0
 8009f62:	462b      	mov	r3, r5
 8009f64:	4620      	mov	r0, r4
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7f6 f996 	bl	8000298 <__aeabi_dsub>
 8009f6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009f70:	e9ca 0100 	strd	r0, r1, [sl]
 8009f74:	e694      	b.n	8009ca0 <__ieee754_rem_pio2+0x28>
 8009f76:	bf00      	nop
 8009f78:	54400000 	.word	0x54400000
 8009f7c:	3ff921fb 	.word	0x3ff921fb
 8009f80:	1a626331 	.word	0x1a626331
 8009f84:	3dd0b461 	.word	0x3dd0b461
 8009f88:	1a600000 	.word	0x1a600000
 8009f8c:	3dd0b461 	.word	0x3dd0b461
 8009f90:	2e037073 	.word	0x2e037073
 8009f94:	3ba3198a 	.word	0x3ba3198a
 8009f98:	6dc9c883 	.word	0x6dc9c883
 8009f9c:	3fe45f30 	.word	0x3fe45f30
 8009fa0:	2e000000 	.word	0x2e000000
 8009fa4:	3ba3198a 	.word	0x3ba3198a
 8009fa8:	252049c1 	.word	0x252049c1
 8009fac:	397b839a 	.word	0x397b839a
 8009fb0:	3fe921fb 	.word	0x3fe921fb
 8009fb4:	4002d97b 	.word	0x4002d97b
 8009fb8:	3ff921fb 	.word	0x3ff921fb
 8009fbc:	413921fb 	.word	0x413921fb
 8009fc0:	3fe00000 	.word	0x3fe00000
 8009fc4:	0800b9fc 	.word	0x0800b9fc
 8009fc8:	7fefffff 	.word	0x7fefffff
 8009fcc:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009fd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009fd4:	ee10 0a10 	vmov	r0, s0
 8009fd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009fdc:	ee10 6a10 	vmov	r6, s0
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	f7f6 fdc1 	bl	8000b68 <__aeabi_d2iz>
 8009fe6:	f7f6 faa5 	bl	8000534 <__aeabi_i2d>
 8009fea:	4602      	mov	r2, r0
 8009fec:	460b      	mov	r3, r1
 8009fee:	4630      	mov	r0, r6
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ff6:	f7f6 f94f 	bl	8000298 <__aeabi_dsub>
 8009ffa:	4b23      	ldr	r3, [pc, #140]	; (800a088 <__ieee754_rem_pio2+0x410>)
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	460f      	mov	r7, r1
 800a004:	4606      	mov	r6, r0
 800a006:	f7f6 fdaf 	bl	8000b68 <__aeabi_d2iz>
 800a00a:	f7f6 fa93 	bl	8000534 <__aeabi_i2d>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	4630      	mov	r0, r6
 800a014:	4639      	mov	r1, r7
 800a016:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a01a:	f7f6 f93d 	bl	8000298 <__aeabi_dsub>
 800a01e:	4b1a      	ldr	r3, [pc, #104]	; (800a088 <__ieee754_rem_pio2+0x410>)
 800a020:	2200      	movs	r2, #0
 800a022:	f7f6 faf1 	bl	8000608 <__aeabi_dmul>
 800a026:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a02a:	ad04      	add	r5, sp, #16
 800a02c:	f04f 0803 	mov.w	r8, #3
 800a030:	46a9      	mov	r9, r5
 800a032:	2600      	movs	r6, #0
 800a034:	2700      	movs	r7, #0
 800a036:	4632      	mov	r2, r6
 800a038:	463b      	mov	r3, r7
 800a03a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a03e:	46c3      	mov	fp, r8
 800a040:	3d08      	subs	r5, #8
 800a042:	f108 38ff 	add.w	r8, r8, #4294967295
 800a046:	f7f6 fd47 	bl	8000ad8 <__aeabi_dcmpeq>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1f3      	bne.n	800a036 <__ieee754_rem_pio2+0x3be>
 800a04e:	4b0f      	ldr	r3, [pc, #60]	; (800a08c <__ieee754_rem_pio2+0x414>)
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	2302      	movs	r3, #2
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4622      	mov	r2, r4
 800a058:	465b      	mov	r3, fp
 800a05a:	4651      	mov	r1, sl
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 f8df 	bl	800a220 <__kernel_rem_pio2>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	4683      	mov	fp, r0
 800a068:	f6bf ae46 	bge.w	8009cf8 <__ieee754_rem_pio2+0x80>
 800a06c:	e9da 2100 	ldrd	r2, r1, [sl]
 800a070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a074:	e9ca 2300 	strd	r2, r3, [sl]
 800a078:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a07c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a080:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a084:	e73a      	b.n	8009efc <__ieee754_rem_pio2+0x284>
 800a086:	bf00      	nop
 800a088:	41700000 	.word	0x41700000
 800a08c:	0800ba7c 	.word	0x0800ba7c

0800a090 <__kernel_cos>:
 800a090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	ec57 6b10 	vmov	r6, r7, d0
 800a098:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a09c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a0a0:	ed8d 1b00 	vstr	d1, [sp]
 800a0a4:	da07      	bge.n	800a0b6 <__kernel_cos+0x26>
 800a0a6:	ee10 0a10 	vmov	r0, s0
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 fd5c 	bl	8000b68 <__aeabi_d2iz>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f000 8088 	beq.w	800a1c6 <__kernel_cos+0x136>
 800a0b6:	4632      	mov	r2, r6
 800a0b8:	463b      	mov	r3, r7
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	4639      	mov	r1, r7
 800a0be:	f7f6 faa3 	bl	8000608 <__aeabi_dmul>
 800a0c2:	4b51      	ldr	r3, [pc, #324]	; (800a208 <__kernel_cos+0x178>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	f7f6 fa9d 	bl	8000608 <__aeabi_dmul>
 800a0ce:	a340      	add	r3, pc, #256	; (adr r3, 800a1d0 <__kernel_cos+0x140>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	468b      	mov	fp, r1
 800a0d8:	4620      	mov	r0, r4
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7f6 fa94 	bl	8000608 <__aeabi_dmul>
 800a0e0:	a33d      	add	r3, pc, #244	; (adr r3, 800a1d8 <__kernel_cos+0x148>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f7f6 f8d9 	bl	800029c <__adddf3>
 800a0ea:	4622      	mov	r2, r4
 800a0ec:	462b      	mov	r3, r5
 800a0ee:	f7f6 fa8b 	bl	8000608 <__aeabi_dmul>
 800a0f2:	a33b      	add	r3, pc, #236	; (adr r3, 800a1e0 <__kernel_cos+0x150>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f7f6 f8ce 	bl	8000298 <__aeabi_dsub>
 800a0fc:	4622      	mov	r2, r4
 800a0fe:	462b      	mov	r3, r5
 800a100:	f7f6 fa82 	bl	8000608 <__aeabi_dmul>
 800a104:	a338      	add	r3, pc, #224	; (adr r3, 800a1e8 <__kernel_cos+0x158>)
 800a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10a:	f7f6 f8c7 	bl	800029c <__adddf3>
 800a10e:	4622      	mov	r2, r4
 800a110:	462b      	mov	r3, r5
 800a112:	f7f6 fa79 	bl	8000608 <__aeabi_dmul>
 800a116:	a336      	add	r3, pc, #216	; (adr r3, 800a1f0 <__kernel_cos+0x160>)
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f7f6 f8bc 	bl	8000298 <__aeabi_dsub>
 800a120:	4622      	mov	r2, r4
 800a122:	462b      	mov	r3, r5
 800a124:	f7f6 fa70 	bl	8000608 <__aeabi_dmul>
 800a128:	a333      	add	r3, pc, #204	; (adr r3, 800a1f8 <__kernel_cos+0x168>)
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	f7f6 f8b5 	bl	800029c <__adddf3>
 800a132:	4622      	mov	r2, r4
 800a134:	462b      	mov	r3, r5
 800a136:	f7f6 fa67 	bl	8000608 <__aeabi_dmul>
 800a13a:	4622      	mov	r2, r4
 800a13c:	462b      	mov	r3, r5
 800a13e:	f7f6 fa63 	bl	8000608 <__aeabi_dmul>
 800a142:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a146:	4604      	mov	r4, r0
 800a148:	460d      	mov	r5, r1
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 fa5b 	bl	8000608 <__aeabi_dmul>
 800a152:	460b      	mov	r3, r1
 800a154:	4602      	mov	r2, r0
 800a156:	4629      	mov	r1, r5
 800a158:	4620      	mov	r0, r4
 800a15a:	f7f6 f89d 	bl	8000298 <__aeabi_dsub>
 800a15e:	4b2b      	ldr	r3, [pc, #172]	; (800a20c <__kernel_cos+0x17c>)
 800a160:	4598      	cmp	r8, r3
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	dc10      	bgt.n	800a18a <__kernel_cos+0xfa>
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	4650      	mov	r0, sl
 800a16e:	4659      	mov	r1, fp
 800a170:	f7f6 f892 	bl	8000298 <__aeabi_dsub>
 800a174:	460b      	mov	r3, r1
 800a176:	4926      	ldr	r1, [pc, #152]	; (800a210 <__kernel_cos+0x180>)
 800a178:	4602      	mov	r2, r0
 800a17a:	2000      	movs	r0, #0
 800a17c:	f7f6 f88c 	bl	8000298 <__aeabi_dsub>
 800a180:	ec41 0b10 	vmov	d0, r0, r1
 800a184:	b003      	add	sp, #12
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	4b22      	ldr	r3, [pc, #136]	; (800a214 <__kernel_cos+0x184>)
 800a18c:	4920      	ldr	r1, [pc, #128]	; (800a210 <__kernel_cos+0x180>)
 800a18e:	4598      	cmp	r8, r3
 800a190:	bfcc      	ite	gt
 800a192:	4d21      	ldrgt	r5, [pc, #132]	; (800a218 <__kernel_cos+0x188>)
 800a194:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a198:	2400      	movs	r4, #0
 800a19a:	4622      	mov	r2, r4
 800a19c:	462b      	mov	r3, r5
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f7f6 f87a 	bl	8000298 <__aeabi_dsub>
 800a1a4:	4622      	mov	r2, r4
 800a1a6:	4680      	mov	r8, r0
 800a1a8:	4689      	mov	r9, r1
 800a1aa:	462b      	mov	r3, r5
 800a1ac:	4650      	mov	r0, sl
 800a1ae:	4659      	mov	r1, fp
 800a1b0:	f7f6 f872 	bl	8000298 <__aeabi_dsub>
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	463b      	mov	r3, r7
 800a1b8:	f7f6 f86e 	bl	8000298 <__aeabi_dsub>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	e7da      	b.n	800a17c <__kernel_cos+0xec>
 800a1c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a200 <__kernel_cos+0x170>
 800a1ca:	e7db      	b.n	800a184 <__kernel_cos+0xf4>
 800a1cc:	f3af 8000 	nop.w
 800a1d0:	be8838d4 	.word	0xbe8838d4
 800a1d4:	bda8fae9 	.word	0xbda8fae9
 800a1d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800a1dc:	3e21ee9e 	.word	0x3e21ee9e
 800a1e0:	809c52ad 	.word	0x809c52ad
 800a1e4:	3e927e4f 	.word	0x3e927e4f
 800a1e8:	19cb1590 	.word	0x19cb1590
 800a1ec:	3efa01a0 	.word	0x3efa01a0
 800a1f0:	16c15177 	.word	0x16c15177
 800a1f4:	3f56c16c 	.word	0x3f56c16c
 800a1f8:	5555554c 	.word	0x5555554c
 800a1fc:	3fa55555 	.word	0x3fa55555
 800a200:	00000000 	.word	0x00000000
 800a204:	3ff00000 	.word	0x3ff00000
 800a208:	3fe00000 	.word	0x3fe00000
 800a20c:	3fd33332 	.word	0x3fd33332
 800a210:	3ff00000 	.word	0x3ff00000
 800a214:	3fe90000 	.word	0x3fe90000
 800a218:	3fd20000 	.word	0x3fd20000
 800a21c:	00000000 	.word	0x00000000

0800a220 <__kernel_rem_pio2>:
 800a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	ed2d 8b02 	vpush	{d8}
 800a228:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a22c:	f112 0f14 	cmn.w	r2, #20
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	9101      	str	r1, [sp, #4]
 800a234:	4bc4      	ldr	r3, [pc, #784]	; (800a548 <__kernel_rem_pio2+0x328>)
 800a236:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a238:	900b      	str	r0, [sp, #44]	; 0x2c
 800a23a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a23e:	9302      	str	r3, [sp, #8]
 800a240:	9b08      	ldr	r3, [sp, #32]
 800a242:	f103 33ff 	add.w	r3, r3, #4294967295
 800a246:	bfa8      	it	ge
 800a248:	1ed4      	subge	r4, r2, #3
 800a24a:	9306      	str	r3, [sp, #24]
 800a24c:	bfb2      	itee	lt
 800a24e:	2400      	movlt	r4, #0
 800a250:	2318      	movge	r3, #24
 800a252:	fb94 f4f3 	sdivge	r4, r4, r3
 800a256:	f06f 0317 	mvn.w	r3, #23
 800a25a:	fb04 3303 	mla	r3, r4, r3, r3
 800a25e:	eb03 0a02 	add.w	sl, r3, r2
 800a262:	9b02      	ldr	r3, [sp, #8]
 800a264:	9a06      	ldr	r2, [sp, #24]
 800a266:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a538 <__kernel_rem_pio2+0x318>
 800a26a:	eb03 0802 	add.w	r8, r3, r2
 800a26e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a270:	1aa7      	subs	r7, r4, r2
 800a272:	ae22      	add	r6, sp, #136	; 0x88
 800a274:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a278:	2500      	movs	r5, #0
 800a27a:	4545      	cmp	r5, r8
 800a27c:	dd13      	ble.n	800a2a6 <__kernel_rem_pio2+0x86>
 800a27e:	9b08      	ldr	r3, [sp, #32]
 800a280:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a538 <__kernel_rem_pio2+0x318>
 800a284:	aa22      	add	r2, sp, #136	; 0x88
 800a286:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a28a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a28e:	f04f 0800 	mov.w	r8, #0
 800a292:	9b02      	ldr	r3, [sp, #8]
 800a294:	4598      	cmp	r8, r3
 800a296:	dc2f      	bgt.n	800a2f8 <__kernel_rem_pio2+0xd8>
 800a298:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a29c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a2a0:	462f      	mov	r7, r5
 800a2a2:	2600      	movs	r6, #0
 800a2a4:	e01b      	b.n	800a2de <__kernel_rem_pio2+0xbe>
 800a2a6:	42ef      	cmn	r7, r5
 800a2a8:	d407      	bmi.n	800a2ba <__kernel_rem_pio2+0x9a>
 800a2aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a2ae:	f7f6 f941 	bl	8000534 <__aeabi_i2d>
 800a2b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a2b6:	3501      	adds	r5, #1
 800a2b8:	e7df      	b.n	800a27a <__kernel_rem_pio2+0x5a>
 800a2ba:	ec51 0b18 	vmov	r0, r1, d8
 800a2be:	e7f8      	b.n	800a2b2 <__kernel_rem_pio2+0x92>
 800a2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2d4:	f7f5 ffe2 	bl	800029c <__adddf3>
 800a2d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2dc:	3601      	adds	r6, #1
 800a2de:	9b06      	ldr	r3, [sp, #24]
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	f1a7 0708 	sub.w	r7, r7, #8
 800a2e6:	ddeb      	ble.n	800a2c0 <__kernel_rem_pio2+0xa0>
 800a2e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a2ec:	f108 0801 	add.w	r8, r8, #1
 800a2f0:	ecab 7b02 	vstmia	fp!, {d7}
 800a2f4:	3508      	adds	r5, #8
 800a2f6:	e7cc      	b.n	800a292 <__kernel_rem_pio2+0x72>
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	aa0e      	add	r2, sp, #56	; 0x38
 800a2fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a300:	930d      	str	r3, [sp, #52]	; 0x34
 800a302:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a304:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a308:	9c02      	ldr	r4, [sp, #8]
 800a30a:	930c      	str	r3, [sp, #48]	; 0x30
 800a30c:	00e3      	lsls	r3, r4, #3
 800a30e:	930a      	str	r3, [sp, #40]	; 0x28
 800a310:	ab9a      	add	r3, sp, #616	; 0x268
 800a312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a316:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a31a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a31e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a320:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a324:	46c3      	mov	fp, r8
 800a326:	46a1      	mov	r9, r4
 800a328:	f1b9 0f00 	cmp.w	r9, #0
 800a32c:	f1a5 0508 	sub.w	r5, r5, #8
 800a330:	dc77      	bgt.n	800a422 <__kernel_rem_pio2+0x202>
 800a332:	ec47 6b10 	vmov	d0, r6, r7
 800a336:	4650      	mov	r0, sl
 800a338:	f000 fc0a 	bl	800ab50 <scalbn>
 800a33c:	ec57 6b10 	vmov	r6, r7, d0
 800a340:	2200      	movs	r2, #0
 800a342:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a346:	ee10 0a10 	vmov	r0, s0
 800a34a:	4639      	mov	r1, r7
 800a34c:	f7f6 f95c 	bl	8000608 <__aeabi_dmul>
 800a350:	ec41 0b10 	vmov	d0, r0, r1
 800a354:	f000 fb7c 	bl	800aa50 <floor>
 800a358:	4b7c      	ldr	r3, [pc, #496]	; (800a54c <__kernel_rem_pio2+0x32c>)
 800a35a:	ec51 0b10 	vmov	r0, r1, d0
 800a35e:	2200      	movs	r2, #0
 800a360:	f7f6 f952 	bl	8000608 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f5 ff94 	bl	8000298 <__aeabi_dsub>
 800a370:	460f      	mov	r7, r1
 800a372:	4606      	mov	r6, r0
 800a374:	f7f6 fbf8 	bl	8000b68 <__aeabi_d2iz>
 800a378:	9004      	str	r0, [sp, #16]
 800a37a:	f7f6 f8db 	bl	8000534 <__aeabi_i2d>
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4630      	mov	r0, r6
 800a384:	4639      	mov	r1, r7
 800a386:	f7f5 ff87 	bl	8000298 <__aeabi_dsub>
 800a38a:	f1ba 0f00 	cmp.w	sl, #0
 800a38e:	4606      	mov	r6, r0
 800a390:	460f      	mov	r7, r1
 800a392:	dd6d      	ble.n	800a470 <__kernel_rem_pio2+0x250>
 800a394:	1e62      	subs	r2, r4, #1
 800a396:	ab0e      	add	r3, sp, #56	; 0x38
 800a398:	9d04      	ldr	r5, [sp, #16]
 800a39a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a39e:	f1ca 0118 	rsb	r1, sl, #24
 800a3a2:	fa40 f301 	asr.w	r3, r0, r1
 800a3a6:	441d      	add	r5, r3
 800a3a8:	408b      	lsls	r3, r1
 800a3aa:	1ac0      	subs	r0, r0, r3
 800a3ac:	ab0e      	add	r3, sp, #56	; 0x38
 800a3ae:	9504      	str	r5, [sp, #16]
 800a3b0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a3b4:	f1ca 0317 	rsb	r3, sl, #23
 800a3b8:	fa40 fb03 	asr.w	fp, r0, r3
 800a3bc:	f1bb 0f00 	cmp.w	fp, #0
 800a3c0:	dd65      	ble.n	800a48e <__kernel_rem_pio2+0x26e>
 800a3c2:	9b04      	ldr	r3, [sp, #16]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	9304      	str	r3, [sp, #16]
 800a3ca:	4615      	mov	r5, r2
 800a3cc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a3d0:	4294      	cmp	r4, r2
 800a3d2:	f300 809c 	bgt.w	800a50e <__kernel_rem_pio2+0x2ee>
 800a3d6:	f1ba 0f00 	cmp.w	sl, #0
 800a3da:	dd07      	ble.n	800a3ec <__kernel_rem_pio2+0x1cc>
 800a3dc:	f1ba 0f01 	cmp.w	sl, #1
 800a3e0:	f000 80c0 	beq.w	800a564 <__kernel_rem_pio2+0x344>
 800a3e4:	f1ba 0f02 	cmp.w	sl, #2
 800a3e8:	f000 80c6 	beq.w	800a578 <__kernel_rem_pio2+0x358>
 800a3ec:	f1bb 0f02 	cmp.w	fp, #2
 800a3f0:	d14d      	bne.n	800a48e <__kernel_rem_pio2+0x26e>
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	4956      	ldr	r1, [pc, #344]	; (800a550 <__kernel_rem_pio2+0x330>)
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	f7f5 ff4d 	bl	8000298 <__aeabi_dsub>
 800a3fe:	4606      	mov	r6, r0
 800a400:	460f      	mov	r7, r1
 800a402:	2d00      	cmp	r5, #0
 800a404:	d043      	beq.n	800a48e <__kernel_rem_pio2+0x26e>
 800a406:	4650      	mov	r0, sl
 800a408:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a540 <__kernel_rem_pio2+0x320>
 800a40c:	f000 fba0 	bl	800ab50 <scalbn>
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	ec53 2b10 	vmov	r2, r3, d0
 800a418:	f7f5 ff3e 	bl	8000298 <__aeabi_dsub>
 800a41c:	4606      	mov	r6, r0
 800a41e:	460f      	mov	r7, r1
 800a420:	e035      	b.n	800a48e <__kernel_rem_pio2+0x26e>
 800a422:	4b4c      	ldr	r3, [pc, #304]	; (800a554 <__kernel_rem_pio2+0x334>)
 800a424:	2200      	movs	r2, #0
 800a426:	4630      	mov	r0, r6
 800a428:	4639      	mov	r1, r7
 800a42a:	f7f6 f8ed 	bl	8000608 <__aeabi_dmul>
 800a42e:	f7f6 fb9b 	bl	8000b68 <__aeabi_d2iz>
 800a432:	f7f6 f87f 	bl	8000534 <__aeabi_i2d>
 800a436:	4602      	mov	r2, r0
 800a438:	460b      	mov	r3, r1
 800a43a:	ec43 2b18 	vmov	d8, r2, r3
 800a43e:	4b46      	ldr	r3, [pc, #280]	; (800a558 <__kernel_rem_pio2+0x338>)
 800a440:	2200      	movs	r2, #0
 800a442:	f7f6 f8e1 	bl	8000608 <__aeabi_dmul>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f5 ff23 	bl	8000298 <__aeabi_dsub>
 800a452:	f7f6 fb89 	bl	8000b68 <__aeabi_d2iz>
 800a456:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a45a:	f84b 0b04 	str.w	r0, [fp], #4
 800a45e:	ec51 0b18 	vmov	r0, r1, d8
 800a462:	f7f5 ff1b 	bl	800029c <__adddf3>
 800a466:	f109 39ff 	add.w	r9, r9, #4294967295
 800a46a:	4606      	mov	r6, r0
 800a46c:	460f      	mov	r7, r1
 800a46e:	e75b      	b.n	800a328 <__kernel_rem_pio2+0x108>
 800a470:	d106      	bne.n	800a480 <__kernel_rem_pio2+0x260>
 800a472:	1e63      	subs	r3, r4, #1
 800a474:	aa0e      	add	r2, sp, #56	; 0x38
 800a476:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a47a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a47e:	e79d      	b.n	800a3bc <__kernel_rem_pio2+0x19c>
 800a480:	4b36      	ldr	r3, [pc, #216]	; (800a55c <__kernel_rem_pio2+0x33c>)
 800a482:	2200      	movs	r2, #0
 800a484:	f7f6 fb46 	bl	8000b14 <__aeabi_dcmpge>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d13d      	bne.n	800a508 <__kernel_rem_pio2+0x2e8>
 800a48c:	4683      	mov	fp, r0
 800a48e:	2200      	movs	r2, #0
 800a490:	2300      	movs	r3, #0
 800a492:	4630      	mov	r0, r6
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fb1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	f000 80c0 	beq.w	800a620 <__kernel_rem_pio2+0x400>
 800a4a0:	1e65      	subs	r5, r4, #1
 800a4a2:	462b      	mov	r3, r5
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	9902      	ldr	r1, [sp, #8]
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	da6c      	bge.n	800a586 <__kernel_rem_pio2+0x366>
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	f000 8089 	beq.w	800a5c4 <__kernel_rem_pio2+0x3a4>
 800a4b2:	ab0e      	add	r3, sp, #56	; 0x38
 800a4b4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a4b8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f000 80ad 	beq.w	800a61c <__kernel_rem_pio2+0x3fc>
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a540 <__kernel_rem_pio2+0x320>
 800a4c8:	f000 fb42 	bl	800ab50 <scalbn>
 800a4cc:	ab9a      	add	r3, sp, #616	; 0x268
 800a4ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a4d2:	ec57 6b10 	vmov	r6, r7, d0
 800a4d6:	00ec      	lsls	r4, r5, #3
 800a4d8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a4dc:	46aa      	mov	sl, r5
 800a4de:	f1ba 0f00 	cmp.w	sl, #0
 800a4e2:	f280 80d6 	bge.w	800a692 <__kernel_rem_pio2+0x472>
 800a4e6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a538 <__kernel_rem_pio2+0x318>
 800a4ea:	462e      	mov	r6, r5
 800a4ec:	2e00      	cmp	r6, #0
 800a4ee:	f2c0 8104 	blt.w	800a6fa <__kernel_rem_pio2+0x4da>
 800a4f2:	ab72      	add	r3, sp, #456	; 0x1c8
 800a4f4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a4f8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a560 <__kernel_rem_pio2+0x340>
 800a4fc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a500:	f04f 0800 	mov.w	r8, #0
 800a504:	1baf      	subs	r7, r5, r6
 800a506:	e0ea      	b.n	800a6de <__kernel_rem_pio2+0x4be>
 800a508:	f04f 0b02 	mov.w	fp, #2
 800a50c:	e759      	b.n	800a3c2 <__kernel_rem_pio2+0x1a2>
 800a50e:	f8d8 3000 	ldr.w	r3, [r8]
 800a512:	b955      	cbnz	r5, 800a52a <__kernel_rem_pio2+0x30a>
 800a514:	b123      	cbz	r3, 800a520 <__kernel_rem_pio2+0x300>
 800a516:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a51a:	f8c8 3000 	str.w	r3, [r8]
 800a51e:	2301      	movs	r3, #1
 800a520:	3201      	adds	r2, #1
 800a522:	f108 0804 	add.w	r8, r8, #4
 800a526:	461d      	mov	r5, r3
 800a528:	e752      	b.n	800a3d0 <__kernel_rem_pio2+0x1b0>
 800a52a:	1acb      	subs	r3, r1, r3
 800a52c:	f8c8 3000 	str.w	r3, [r8]
 800a530:	462b      	mov	r3, r5
 800a532:	e7f5      	b.n	800a520 <__kernel_rem_pio2+0x300>
 800a534:	f3af 8000 	nop.w
	...
 800a544:	3ff00000 	.word	0x3ff00000
 800a548:	0800bbc8 	.word	0x0800bbc8
 800a54c:	40200000 	.word	0x40200000
 800a550:	3ff00000 	.word	0x3ff00000
 800a554:	3e700000 	.word	0x3e700000
 800a558:	41700000 	.word	0x41700000
 800a55c:	3fe00000 	.word	0x3fe00000
 800a560:	0800bb88 	.word	0x0800bb88
 800a564:	1e62      	subs	r2, r4, #1
 800a566:	ab0e      	add	r3, sp, #56	; 0x38
 800a568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a570:	a90e      	add	r1, sp, #56	; 0x38
 800a572:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a576:	e739      	b.n	800a3ec <__kernel_rem_pio2+0x1cc>
 800a578:	1e62      	subs	r2, r4, #1
 800a57a:	ab0e      	add	r3, sp, #56	; 0x38
 800a57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a580:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a584:	e7f4      	b.n	800a570 <__kernel_rem_pio2+0x350>
 800a586:	a90e      	add	r1, sp, #56	; 0x38
 800a588:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a58c:	3b01      	subs	r3, #1
 800a58e:	430a      	orrs	r2, r1
 800a590:	e789      	b.n	800a4a6 <__kernel_rem_pio2+0x286>
 800a592:	3301      	adds	r3, #1
 800a594:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a598:	2900      	cmp	r1, #0
 800a59a:	d0fa      	beq.n	800a592 <__kernel_rem_pio2+0x372>
 800a59c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a59e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a5a2:	446a      	add	r2, sp
 800a5a4:	3a98      	subs	r2, #152	; 0x98
 800a5a6:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a8:	9a08      	ldr	r2, [sp, #32]
 800a5aa:	18e3      	adds	r3, r4, r3
 800a5ac:	18a5      	adds	r5, r4, r2
 800a5ae:	aa22      	add	r2, sp, #136	; 0x88
 800a5b0:	f104 0801 	add.w	r8, r4, #1
 800a5b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	9b04      	ldr	r3, [sp, #16]
 800a5bc:	4543      	cmp	r3, r8
 800a5be:	da04      	bge.n	800a5ca <__kernel_rem_pio2+0x3aa>
 800a5c0:	461c      	mov	r4, r3
 800a5c2:	e6a3      	b.n	800a30c <__kernel_rem_pio2+0xec>
 800a5c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e7e4      	b.n	800a594 <__kernel_rem_pio2+0x374>
 800a5ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a5cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a5d0:	f7f5 ffb0 	bl	8000534 <__aeabi_i2d>
 800a5d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5da:	46ab      	mov	fp, r5
 800a5dc:	461c      	mov	r4, r3
 800a5de:	f04f 0900 	mov.w	r9, #0
 800a5e2:	2600      	movs	r6, #0
 800a5e4:	2700      	movs	r7, #0
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	4599      	cmp	r9, r3
 800a5ea:	dd06      	ble.n	800a5fa <__kernel_rem_pio2+0x3da>
 800a5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a5f2:	f108 0801 	add.w	r8, r8, #1
 800a5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f8:	e7df      	b.n	800a5ba <__kernel_rem_pio2+0x39a>
 800a5fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a5fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a602:	f7f6 f801 	bl	8000608 <__aeabi_dmul>
 800a606:	4602      	mov	r2, r0
 800a608:	460b      	mov	r3, r1
 800a60a:	4630      	mov	r0, r6
 800a60c:	4639      	mov	r1, r7
 800a60e:	f7f5 fe45 	bl	800029c <__adddf3>
 800a612:	f109 0901 	add.w	r9, r9, #1
 800a616:	4606      	mov	r6, r0
 800a618:	460f      	mov	r7, r1
 800a61a:	e7e4      	b.n	800a5e6 <__kernel_rem_pio2+0x3c6>
 800a61c:	3d01      	subs	r5, #1
 800a61e:	e748      	b.n	800a4b2 <__kernel_rem_pio2+0x292>
 800a620:	ec47 6b10 	vmov	d0, r6, r7
 800a624:	f1ca 0000 	rsb	r0, sl, #0
 800a628:	f000 fa92 	bl	800ab50 <scalbn>
 800a62c:	ec57 6b10 	vmov	r6, r7, d0
 800a630:	4ba0      	ldr	r3, [pc, #640]	; (800a8b4 <__kernel_rem_pio2+0x694>)
 800a632:	ee10 0a10 	vmov	r0, s0
 800a636:	2200      	movs	r2, #0
 800a638:	4639      	mov	r1, r7
 800a63a:	f7f6 fa6b 	bl	8000b14 <__aeabi_dcmpge>
 800a63e:	b1f8      	cbz	r0, 800a680 <__kernel_rem_pio2+0x460>
 800a640:	4b9d      	ldr	r3, [pc, #628]	; (800a8b8 <__kernel_rem_pio2+0x698>)
 800a642:	2200      	movs	r2, #0
 800a644:	4630      	mov	r0, r6
 800a646:	4639      	mov	r1, r7
 800a648:	f7f5 ffde 	bl	8000608 <__aeabi_dmul>
 800a64c:	f7f6 fa8c 	bl	8000b68 <__aeabi_d2iz>
 800a650:	4680      	mov	r8, r0
 800a652:	f7f5 ff6f 	bl	8000534 <__aeabi_i2d>
 800a656:	4b97      	ldr	r3, [pc, #604]	; (800a8b4 <__kernel_rem_pio2+0x694>)
 800a658:	2200      	movs	r2, #0
 800a65a:	f7f5 ffd5 	bl	8000608 <__aeabi_dmul>
 800a65e:	460b      	mov	r3, r1
 800a660:	4602      	mov	r2, r0
 800a662:	4639      	mov	r1, r7
 800a664:	4630      	mov	r0, r6
 800a666:	f7f5 fe17 	bl	8000298 <__aeabi_dsub>
 800a66a:	f7f6 fa7d 	bl	8000b68 <__aeabi_d2iz>
 800a66e:	1c65      	adds	r5, r4, #1
 800a670:	ab0e      	add	r3, sp, #56	; 0x38
 800a672:	f10a 0a18 	add.w	sl, sl, #24
 800a676:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a67a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a67e:	e720      	b.n	800a4c2 <__kernel_rem_pio2+0x2a2>
 800a680:	4630      	mov	r0, r6
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 fa70 	bl	8000b68 <__aeabi_d2iz>
 800a688:	ab0e      	add	r3, sp, #56	; 0x38
 800a68a:	4625      	mov	r5, r4
 800a68c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a690:	e717      	b.n	800a4c2 <__kernel_rem_pio2+0x2a2>
 800a692:	ab0e      	add	r3, sp, #56	; 0x38
 800a694:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a698:	f7f5 ff4c 	bl	8000534 <__aeabi_i2d>
 800a69c:	4632      	mov	r2, r6
 800a69e:	463b      	mov	r3, r7
 800a6a0:	f7f5 ffb2 	bl	8000608 <__aeabi_dmul>
 800a6a4:	4b84      	ldr	r3, [pc, #528]	; (800a8b8 <__kernel_rem_pio2+0x698>)
 800a6a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	4639      	mov	r1, r7
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	460f      	mov	r7, r1
 800a6bc:	e70f      	b.n	800a4de <__kernel_rem_pio2+0x2be>
 800a6be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a6c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a6c6:	f7f5 ff9f 	bl	8000608 <__aeabi_dmul>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6d2:	f7f5 fde3 	bl	800029c <__adddf3>
 800a6d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6da:	f108 0801 	add.w	r8, r8, #1
 800a6de:	9b02      	ldr	r3, [sp, #8]
 800a6e0:	4598      	cmp	r8, r3
 800a6e2:	dc01      	bgt.n	800a6e8 <__kernel_rem_pio2+0x4c8>
 800a6e4:	45b8      	cmp	r8, r7
 800a6e6:	ddea      	ble.n	800a6be <__kernel_rem_pio2+0x49e>
 800a6e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a6ec:	ab4a      	add	r3, sp, #296	; 0x128
 800a6ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a6f2:	ed87 7b00 	vstr	d7, [r7]
 800a6f6:	3e01      	subs	r6, #1
 800a6f8:	e6f8      	b.n	800a4ec <__kernel_rem_pio2+0x2cc>
 800a6fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	dc0b      	bgt.n	800a718 <__kernel_rem_pio2+0x4f8>
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc35      	bgt.n	800a770 <__kernel_rem_pio2+0x550>
 800a704:	d059      	beq.n	800a7ba <__kernel_rem_pio2+0x59a>
 800a706:	9b04      	ldr	r3, [sp, #16]
 800a708:	f003 0007 	and.w	r0, r3, #7
 800a70c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a710:	ecbd 8b02 	vpop	{d8}
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d1f3      	bne.n	800a706 <__kernel_rem_pio2+0x4e6>
 800a71e:	ab4a      	add	r3, sp, #296	; 0x128
 800a720:	4423      	add	r3, r4
 800a722:	9306      	str	r3, [sp, #24]
 800a724:	461c      	mov	r4, r3
 800a726:	469a      	mov	sl, r3
 800a728:	9502      	str	r5, [sp, #8]
 800a72a:	9b02      	ldr	r3, [sp, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a732:	dc6b      	bgt.n	800a80c <__kernel_rem_pio2+0x5ec>
 800a734:	46aa      	mov	sl, r5
 800a736:	f1ba 0f01 	cmp.w	sl, #1
 800a73a:	f1a4 0408 	sub.w	r4, r4, #8
 800a73e:	f300 8085 	bgt.w	800a84c <__kernel_rem_pio2+0x62c>
 800a742:	9c06      	ldr	r4, [sp, #24]
 800a744:	2000      	movs	r0, #0
 800a746:	3408      	adds	r4, #8
 800a748:	2100      	movs	r1, #0
 800a74a:	2d01      	cmp	r5, #1
 800a74c:	f300 809d 	bgt.w	800a88a <__kernel_rem_pio2+0x66a>
 800a750:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a754:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a758:	f1bb 0f00 	cmp.w	fp, #0
 800a75c:	f040 809b 	bne.w	800a896 <__kernel_rem_pio2+0x676>
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	e9c3 5600 	strd	r5, r6, [r3]
 800a766:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a76a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a76e:	e7ca      	b.n	800a706 <__kernel_rem_pio2+0x4e6>
 800a770:	3408      	adds	r4, #8
 800a772:	ab4a      	add	r3, sp, #296	; 0x128
 800a774:	441c      	add	r4, r3
 800a776:	462e      	mov	r6, r5
 800a778:	2000      	movs	r0, #0
 800a77a:	2100      	movs	r1, #0
 800a77c:	2e00      	cmp	r6, #0
 800a77e:	da36      	bge.n	800a7ee <__kernel_rem_pio2+0x5ce>
 800a780:	f1bb 0f00 	cmp.w	fp, #0
 800a784:	d039      	beq.n	800a7fa <__kernel_rem_pio2+0x5da>
 800a786:	4602      	mov	r2, r0
 800a788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a78c:	9c01      	ldr	r4, [sp, #4]
 800a78e:	e9c4 2300 	strd	r2, r3, [r4]
 800a792:	4602      	mov	r2, r0
 800a794:	460b      	mov	r3, r1
 800a796:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a79a:	f7f5 fd7d 	bl	8000298 <__aeabi_dsub>
 800a79e:	ae4c      	add	r6, sp, #304	; 0x130
 800a7a0:	2401      	movs	r4, #1
 800a7a2:	42a5      	cmp	r5, r4
 800a7a4:	da2c      	bge.n	800a800 <__kernel_rem_pio2+0x5e0>
 800a7a6:	f1bb 0f00 	cmp.w	fp, #0
 800a7aa:	d002      	beq.n	800a7b2 <__kernel_rem_pio2+0x592>
 800a7ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	9b01      	ldr	r3, [sp, #4]
 800a7b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a7b8:	e7a5      	b.n	800a706 <__kernel_rem_pio2+0x4e6>
 800a7ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a7be:	eb0d 0403 	add.w	r4, sp, r3
 800a7c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	da09      	bge.n	800a7e2 <__kernel_rem_pio2+0x5c2>
 800a7ce:	f1bb 0f00 	cmp.w	fp, #0
 800a7d2:	d002      	beq.n	800a7da <__kernel_rem_pio2+0x5ba>
 800a7d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7d8:	4619      	mov	r1, r3
 800a7da:	9b01      	ldr	r3, [sp, #4]
 800a7dc:	e9c3 0100 	strd	r0, r1, [r3]
 800a7e0:	e791      	b.n	800a706 <__kernel_rem_pio2+0x4e6>
 800a7e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a7e6:	f7f5 fd59 	bl	800029c <__adddf3>
 800a7ea:	3d01      	subs	r5, #1
 800a7ec:	e7ed      	b.n	800a7ca <__kernel_rem_pio2+0x5aa>
 800a7ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a7f2:	f7f5 fd53 	bl	800029c <__adddf3>
 800a7f6:	3e01      	subs	r6, #1
 800a7f8:	e7c0      	b.n	800a77c <__kernel_rem_pio2+0x55c>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	e7c5      	b.n	800a78c <__kernel_rem_pio2+0x56c>
 800a800:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a804:	f7f5 fd4a 	bl	800029c <__adddf3>
 800a808:	3401      	adds	r4, #1
 800a80a:	e7ca      	b.n	800a7a2 <__kernel_rem_pio2+0x582>
 800a80c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a810:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a814:	9b02      	ldr	r3, [sp, #8]
 800a816:	3b01      	subs	r3, #1
 800a818:	9302      	str	r3, [sp, #8]
 800a81a:	4632      	mov	r2, r6
 800a81c:	463b      	mov	r3, r7
 800a81e:	4640      	mov	r0, r8
 800a820:	4649      	mov	r1, r9
 800a822:	f7f5 fd3b 	bl	800029c <__adddf3>
 800a826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4640      	mov	r0, r8
 800a830:	4649      	mov	r1, r9
 800a832:	f7f5 fd31 	bl	8000298 <__aeabi_dsub>
 800a836:	4632      	mov	r2, r6
 800a838:	463b      	mov	r3, r7
 800a83a:	f7f5 fd2f 	bl	800029c <__adddf3>
 800a83e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a842:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a846:	ed8a 7b00 	vstr	d7, [sl]
 800a84a:	e76e      	b.n	800a72a <__kernel_rem_pio2+0x50a>
 800a84c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a850:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a854:	4640      	mov	r0, r8
 800a856:	4632      	mov	r2, r6
 800a858:	463b      	mov	r3, r7
 800a85a:	4649      	mov	r1, r9
 800a85c:	f7f5 fd1e 	bl	800029c <__adddf3>
 800a860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4640      	mov	r0, r8
 800a86a:	4649      	mov	r1, r9
 800a86c:	f7f5 fd14 	bl	8000298 <__aeabi_dsub>
 800a870:	4632      	mov	r2, r6
 800a872:	463b      	mov	r3, r7
 800a874:	f7f5 fd12 	bl	800029c <__adddf3>
 800a878:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a87c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a880:	ed84 7b00 	vstr	d7, [r4]
 800a884:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a888:	e755      	b.n	800a736 <__kernel_rem_pio2+0x516>
 800a88a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a88e:	f7f5 fd05 	bl	800029c <__adddf3>
 800a892:	3d01      	subs	r5, #1
 800a894:	e759      	b.n	800a74a <__kernel_rem_pio2+0x52a>
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	9a01      	ldr	r2, [sp, #4]
 800a89a:	601d      	str	r5, [r3, #0]
 800a89c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a8a0:	605c      	str	r4, [r3, #4]
 800a8a2:	609f      	str	r7, [r3, #8]
 800a8a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a8a8:	60d3      	str	r3, [r2, #12]
 800a8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8ae:	6110      	str	r0, [r2, #16]
 800a8b0:	6153      	str	r3, [r2, #20]
 800a8b2:	e728      	b.n	800a706 <__kernel_rem_pio2+0x4e6>
 800a8b4:	41700000 	.word	0x41700000
 800a8b8:	3e700000 	.word	0x3e700000
 800a8bc:	00000000 	.word	0x00000000

0800a8c0 <__kernel_sin>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	ed2d 8b04 	vpush	{d8-d9}
 800a8c8:	eeb0 8a41 	vmov.f32	s16, s2
 800a8cc:	eef0 8a61 	vmov.f32	s17, s3
 800a8d0:	ec55 4b10 	vmov	r4, r5, d0
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a8da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a8de:	9001      	str	r0, [sp, #4]
 800a8e0:	da06      	bge.n	800a8f0 <__kernel_sin+0x30>
 800a8e2:	ee10 0a10 	vmov	r0, s0
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f6 f93e 	bl	8000b68 <__aeabi_d2iz>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d051      	beq.n	800a994 <__kernel_sin+0xd4>
 800a8f0:	4622      	mov	r2, r4
 800a8f2:	462b      	mov	r3, r5
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	f7f5 fe86 	bl	8000608 <__aeabi_dmul>
 800a8fc:	4682      	mov	sl, r0
 800a8fe:	468b      	mov	fp, r1
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f5 fe7e 	bl	8000608 <__aeabi_dmul>
 800a90c:	a341      	add	r3, pc, #260	; (adr r3, 800aa14 <__kernel_sin+0x154>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	4680      	mov	r8, r0
 800a914:	4689      	mov	r9, r1
 800a916:	4650      	mov	r0, sl
 800a918:	4659      	mov	r1, fp
 800a91a:	f7f5 fe75 	bl	8000608 <__aeabi_dmul>
 800a91e:	a33f      	add	r3, pc, #252	; (adr r3, 800aa1c <__kernel_sin+0x15c>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fcb8 	bl	8000298 <__aeabi_dsub>
 800a928:	4652      	mov	r2, sl
 800a92a:	465b      	mov	r3, fp
 800a92c:	f7f5 fe6c 	bl	8000608 <__aeabi_dmul>
 800a930:	a33c      	add	r3, pc, #240	; (adr r3, 800aa24 <__kernel_sin+0x164>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fcb1 	bl	800029c <__adddf3>
 800a93a:	4652      	mov	r2, sl
 800a93c:	465b      	mov	r3, fp
 800a93e:	f7f5 fe63 	bl	8000608 <__aeabi_dmul>
 800a942:	a33a      	add	r3, pc, #232	; (adr r3, 800aa2c <__kernel_sin+0x16c>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fca6 	bl	8000298 <__aeabi_dsub>
 800a94c:	4652      	mov	r2, sl
 800a94e:	465b      	mov	r3, fp
 800a950:	f7f5 fe5a 	bl	8000608 <__aeabi_dmul>
 800a954:	a337      	add	r3, pc, #220	; (adr r3, 800aa34 <__kernel_sin+0x174>)
 800a956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95a:	f7f5 fc9f 	bl	800029c <__adddf3>
 800a95e:	9b01      	ldr	r3, [sp, #4]
 800a960:	4606      	mov	r6, r0
 800a962:	460f      	mov	r7, r1
 800a964:	b9eb      	cbnz	r3, 800a9a2 <__kernel_sin+0xe2>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4650      	mov	r0, sl
 800a96c:	4659      	mov	r1, fp
 800a96e:	f7f5 fe4b 	bl	8000608 <__aeabi_dmul>
 800a972:	a325      	add	r3, pc, #148	; (adr r3, 800aa08 <__kernel_sin+0x148>)
 800a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a978:	f7f5 fc8e 	bl	8000298 <__aeabi_dsub>
 800a97c:	4642      	mov	r2, r8
 800a97e:	464b      	mov	r3, r9
 800a980:	f7f5 fe42 	bl	8000608 <__aeabi_dmul>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4620      	mov	r0, r4
 800a98a:	4629      	mov	r1, r5
 800a98c:	f7f5 fc86 	bl	800029c <__adddf3>
 800a990:	4604      	mov	r4, r0
 800a992:	460d      	mov	r5, r1
 800a994:	ec45 4b10 	vmov	d0, r4, r5
 800a998:	b003      	add	sp, #12
 800a99a:	ecbd 8b04 	vpop	{d8-d9}
 800a99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9a2:	4b1b      	ldr	r3, [pc, #108]	; (800aa10 <__kernel_sin+0x150>)
 800a9a4:	ec51 0b18 	vmov	r0, r1, d8
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f7f5 fe2d 	bl	8000608 <__aeabi_dmul>
 800a9ae:	4632      	mov	r2, r6
 800a9b0:	ec41 0b19 	vmov	d9, r0, r1
 800a9b4:	463b      	mov	r3, r7
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4649      	mov	r1, r9
 800a9ba:	f7f5 fe25 	bl	8000608 <__aeabi_dmul>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	ec51 0b19 	vmov	r0, r1, d9
 800a9c6:	f7f5 fc67 	bl	8000298 <__aeabi_dsub>
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	465b      	mov	r3, fp
 800a9ce:	f7f5 fe1b 	bl	8000608 <__aeabi_dmul>
 800a9d2:	ec53 2b18 	vmov	r2, r3, d8
 800a9d6:	f7f5 fc5f 	bl	8000298 <__aeabi_dsub>
 800a9da:	a30b      	add	r3, pc, #44	; (adr r3, 800aa08 <__kernel_sin+0x148>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	460f      	mov	r7, r1
 800a9e4:	4640      	mov	r0, r8
 800a9e6:	4649      	mov	r1, r9
 800a9e8:	f7f5 fe0e 	bl	8000608 <__aeabi_dmul>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	460b      	mov	r3, r1
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	4639      	mov	r1, r7
 800a9f4:	f7f5 fc52 	bl	800029c <__adddf3>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	4629      	mov	r1, r5
 800aa00:	f7f5 fc4a 	bl	8000298 <__aeabi_dsub>
 800aa04:	e7c4      	b.n	800a990 <__kernel_sin+0xd0>
 800aa06:	bf00      	nop
 800aa08:	55555549 	.word	0x55555549
 800aa0c:	3fc55555 	.word	0x3fc55555
 800aa10:	3fe00000 	.word	0x3fe00000
 800aa14:	5acfd57c 	.word	0x5acfd57c
 800aa18:	3de5d93a 	.word	0x3de5d93a
 800aa1c:	8a2b9ceb 	.word	0x8a2b9ceb
 800aa20:	3e5ae5e6 	.word	0x3e5ae5e6
 800aa24:	57b1fe7d 	.word	0x57b1fe7d
 800aa28:	3ec71de3 	.word	0x3ec71de3
 800aa2c:	19c161d5 	.word	0x19c161d5
 800aa30:	3f2a01a0 	.word	0x3f2a01a0
 800aa34:	1110f8a6 	.word	0x1110f8a6
 800aa38:	3f811111 	.word	0x3f811111

0800aa3c <fabs>:
 800aa3c:	ec51 0b10 	vmov	r0, r1, d0
 800aa40:	ee10 2a10 	vmov	r2, s0
 800aa44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa48:	ec43 2b10 	vmov	d0, r2, r3
 800aa4c:	4770      	bx	lr
	...

0800aa50 <floor>:
 800aa50:	ec51 0b10 	vmov	r0, r1, d0
 800aa54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800aa5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800aa60:	2e13      	cmp	r6, #19
 800aa62:	ee10 5a10 	vmov	r5, s0
 800aa66:	ee10 8a10 	vmov	r8, s0
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	dc32      	bgt.n	800aad4 <floor+0x84>
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	da14      	bge.n	800aa9c <floor+0x4c>
 800aa72:	a333      	add	r3, pc, #204	; (adr r3, 800ab40 <floor+0xf0>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f5 fc10 	bl	800029c <__adddf3>
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f7f6 f852 	bl	8000b28 <__aeabi_dcmpgt>
 800aa84:	b138      	cbz	r0, 800aa96 <floor+0x46>
 800aa86:	2c00      	cmp	r4, #0
 800aa88:	da57      	bge.n	800ab3a <floor+0xea>
 800aa8a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800aa8e:	431d      	orrs	r5, r3
 800aa90:	d001      	beq.n	800aa96 <floor+0x46>
 800aa92:	4c2d      	ldr	r4, [pc, #180]	; (800ab48 <floor+0xf8>)
 800aa94:	2500      	movs	r5, #0
 800aa96:	4621      	mov	r1, r4
 800aa98:	4628      	mov	r0, r5
 800aa9a:	e025      	b.n	800aae8 <floor+0x98>
 800aa9c:	4f2b      	ldr	r7, [pc, #172]	; (800ab4c <floor+0xfc>)
 800aa9e:	4137      	asrs	r7, r6
 800aaa0:	ea01 0307 	and.w	r3, r1, r7
 800aaa4:	4303      	orrs	r3, r0
 800aaa6:	d01f      	beq.n	800aae8 <floor+0x98>
 800aaa8:	a325      	add	r3, pc, #148	; (adr r3, 800ab40 <floor+0xf0>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fbf5 	bl	800029c <__adddf3>
 800aab2:	2200      	movs	r2, #0
 800aab4:	2300      	movs	r3, #0
 800aab6:	f7f6 f837 	bl	8000b28 <__aeabi_dcmpgt>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	d0eb      	beq.n	800aa96 <floor+0x46>
 800aabe:	2c00      	cmp	r4, #0
 800aac0:	bfbe      	ittt	lt
 800aac2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aac6:	fa43 f606 	asrlt.w	r6, r3, r6
 800aaca:	19a4      	addlt	r4, r4, r6
 800aacc:	ea24 0407 	bic.w	r4, r4, r7
 800aad0:	2500      	movs	r5, #0
 800aad2:	e7e0      	b.n	800aa96 <floor+0x46>
 800aad4:	2e33      	cmp	r6, #51	; 0x33
 800aad6:	dd0b      	ble.n	800aaf0 <floor+0xa0>
 800aad8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aadc:	d104      	bne.n	800aae8 <floor+0x98>
 800aade:	ee10 2a10 	vmov	r2, s0
 800aae2:	460b      	mov	r3, r1
 800aae4:	f7f5 fbda 	bl	800029c <__adddf3>
 800aae8:	ec41 0b10 	vmov	d0, r0, r1
 800aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aaf4:	f04f 33ff 	mov.w	r3, #4294967295
 800aaf8:	fa23 f707 	lsr.w	r7, r3, r7
 800aafc:	4207      	tst	r7, r0
 800aafe:	d0f3      	beq.n	800aae8 <floor+0x98>
 800ab00:	a30f      	add	r3, pc, #60	; (adr r3, 800ab40 <floor+0xf0>)
 800ab02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab06:	f7f5 fbc9 	bl	800029c <__adddf3>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	f7f6 f80b 	bl	8000b28 <__aeabi_dcmpgt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d0bf      	beq.n	800aa96 <floor+0x46>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	da02      	bge.n	800ab20 <floor+0xd0>
 800ab1a:	2e14      	cmp	r6, #20
 800ab1c:	d103      	bne.n	800ab26 <floor+0xd6>
 800ab1e:	3401      	adds	r4, #1
 800ab20:	ea25 0507 	bic.w	r5, r5, r7
 800ab24:	e7b7      	b.n	800aa96 <floor+0x46>
 800ab26:	2301      	movs	r3, #1
 800ab28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ab2c:	fa03 f606 	lsl.w	r6, r3, r6
 800ab30:	4435      	add	r5, r6
 800ab32:	4545      	cmp	r5, r8
 800ab34:	bf38      	it	cc
 800ab36:	18e4      	addcc	r4, r4, r3
 800ab38:	e7f2      	b.n	800ab20 <floor+0xd0>
 800ab3a:	2500      	movs	r5, #0
 800ab3c:	462c      	mov	r4, r5
 800ab3e:	e7aa      	b.n	800aa96 <floor+0x46>
 800ab40:	8800759c 	.word	0x8800759c
 800ab44:	7e37e43c 	.word	0x7e37e43c
 800ab48:	bff00000 	.word	0xbff00000
 800ab4c:	000fffff 	.word	0x000fffff

0800ab50 <scalbn>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	ec55 4b10 	vmov	r4, r5, d0
 800ab56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ab5a:	4606      	mov	r6, r0
 800ab5c:	462b      	mov	r3, r5
 800ab5e:	b99a      	cbnz	r2, 800ab88 <scalbn+0x38>
 800ab60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab64:	4323      	orrs	r3, r4
 800ab66:	d036      	beq.n	800abd6 <scalbn+0x86>
 800ab68:	4b39      	ldr	r3, [pc, #228]	; (800ac50 <scalbn+0x100>)
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	ee10 0a10 	vmov	r0, s0
 800ab70:	2200      	movs	r2, #0
 800ab72:	f7f5 fd49 	bl	8000608 <__aeabi_dmul>
 800ab76:	4b37      	ldr	r3, [pc, #220]	; (800ac54 <scalbn+0x104>)
 800ab78:	429e      	cmp	r6, r3
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	460d      	mov	r5, r1
 800ab7e:	da10      	bge.n	800aba2 <scalbn+0x52>
 800ab80:	a32b      	add	r3, pc, #172	; (adr r3, 800ac30 <scalbn+0xe0>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	e03a      	b.n	800abfe <scalbn+0xae>
 800ab88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab8c:	428a      	cmp	r2, r1
 800ab8e:	d10c      	bne.n	800abaa <scalbn+0x5a>
 800ab90:	ee10 2a10 	vmov	r2, s0
 800ab94:	4620      	mov	r0, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	f7f5 fb80 	bl	800029c <__adddf3>
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	460d      	mov	r5, r1
 800aba0:	e019      	b.n	800abd6 <scalbn+0x86>
 800aba2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aba6:	460b      	mov	r3, r1
 800aba8:	3a36      	subs	r2, #54	; 0x36
 800abaa:	4432      	add	r2, r6
 800abac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800abb0:	428a      	cmp	r2, r1
 800abb2:	dd08      	ble.n	800abc6 <scalbn+0x76>
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	a120      	add	r1, pc, #128	; (adr r1, 800ac38 <scalbn+0xe8>)
 800abb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abbc:	da1c      	bge.n	800abf8 <scalbn+0xa8>
 800abbe:	a120      	add	r1, pc, #128	; (adr r1, 800ac40 <scalbn+0xf0>)
 800abc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abc4:	e018      	b.n	800abf8 <scalbn+0xa8>
 800abc6:	2a00      	cmp	r2, #0
 800abc8:	dd08      	ble.n	800abdc <scalbn+0x8c>
 800abca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800abd6:	ec45 4b10 	vmov	d0, r4, r5
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800abe0:	da19      	bge.n	800ac16 <scalbn+0xc6>
 800abe2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800abe6:	429e      	cmp	r6, r3
 800abe8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800abec:	dd0a      	ble.n	800ac04 <scalbn+0xb4>
 800abee:	a112      	add	r1, pc, #72	; (adr r1, 800ac38 <scalbn+0xe8>)
 800abf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d1e2      	bne.n	800abbe <scalbn+0x6e>
 800abf8:	a30f      	add	r3, pc, #60	; (adr r3, 800ac38 <scalbn+0xe8>)
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f7f5 fd03 	bl	8000608 <__aeabi_dmul>
 800ac02:	e7cb      	b.n	800ab9c <scalbn+0x4c>
 800ac04:	a10a      	add	r1, pc, #40	; (adr r1, 800ac30 <scalbn+0xe0>)
 800ac06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d0b8      	beq.n	800ab80 <scalbn+0x30>
 800ac0e:	a10e      	add	r1, pc, #56	; (adr r1, 800ac48 <scalbn+0xf8>)
 800ac10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac14:	e7b4      	b.n	800ab80 <scalbn+0x30>
 800ac16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ac1a:	3236      	adds	r2, #54	; 0x36
 800ac1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ac20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ac24:	4620      	mov	r0, r4
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <scalbn+0x108>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	e7e8      	b.n	800abfe <scalbn+0xae>
 800ac2c:	f3af 8000 	nop.w
 800ac30:	c2f8f359 	.word	0xc2f8f359
 800ac34:	01a56e1f 	.word	0x01a56e1f
 800ac38:	8800759c 	.word	0x8800759c
 800ac3c:	7e37e43c 	.word	0x7e37e43c
 800ac40:	8800759c 	.word	0x8800759c
 800ac44:	fe37e43c 	.word	0xfe37e43c
 800ac48:	c2f8f359 	.word	0xc2f8f359
 800ac4c:	81a56e1f 	.word	0x81a56e1f
 800ac50:	43500000 	.word	0x43500000
 800ac54:	ffff3cb0 	.word	0xffff3cb0
 800ac58:	3c900000 	.word	0x3c900000

0800ac5c <_close>:
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <_close+0xc>)
 800ac5e:	2258      	movs	r2, #88	; 0x58
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	f04f 30ff 	mov.w	r0, #4294967295
 800ac66:	4770      	bx	lr
 800ac68:	20000260 	.word	0x20000260

0800ac6c <_fstat>:
 800ac6c:	4b02      	ldr	r3, [pc, #8]	; (800ac78 <_fstat+0xc>)
 800ac6e:	2258      	movs	r2, #88	; 0x58
 800ac70:	601a      	str	r2, [r3, #0]
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	4770      	bx	lr
 800ac78:	20000260 	.word	0x20000260

0800ac7c <_getpid>:
 800ac7c:	4b02      	ldr	r3, [pc, #8]	; (800ac88 <_getpid+0xc>)
 800ac7e:	2258      	movs	r2, #88	; 0x58
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	4770      	bx	lr
 800ac88:	20000260 	.word	0x20000260

0800ac8c <_isatty>:
 800ac8c:	4b02      	ldr	r3, [pc, #8]	; (800ac98 <_isatty+0xc>)
 800ac8e:	2258      	movs	r2, #88	; 0x58
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	2000      	movs	r0, #0
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000260 	.word	0x20000260

0800ac9c <_kill>:
 800ac9c:	4b02      	ldr	r3, [pc, #8]	; (800aca8 <_kill+0xc>)
 800ac9e:	2258      	movs	r2, #88	; 0x58
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f04f 30ff 	mov.w	r0, #4294967295
 800aca6:	4770      	bx	lr
 800aca8:	20000260 	.word	0x20000260

0800acac <_lseek>:
 800acac:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <_lseek+0xc>)
 800acae:	2258      	movs	r2, #88	; 0x58
 800acb0:	601a      	str	r2, [r3, #0]
 800acb2:	f04f 30ff 	mov.w	r0, #4294967295
 800acb6:	4770      	bx	lr
 800acb8:	20000260 	.word	0x20000260

0800acbc <_read>:
 800acbc:	4b02      	ldr	r3, [pc, #8]	; (800acc8 <_read+0xc>)
 800acbe:	2258      	movs	r2, #88	; 0x58
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	f04f 30ff 	mov.w	r0, #4294967295
 800acc6:	4770      	bx	lr
 800acc8:	20000260 	.word	0x20000260

0800accc <_sbrk>:
 800accc:	4a04      	ldr	r2, [pc, #16]	; (800ace0 <_sbrk+0x14>)
 800acce:	6811      	ldr	r1, [r2, #0]
 800acd0:	4603      	mov	r3, r0
 800acd2:	b909      	cbnz	r1, 800acd8 <_sbrk+0xc>
 800acd4:	4903      	ldr	r1, [pc, #12]	; (800ace4 <_sbrk+0x18>)
 800acd6:	6011      	str	r1, [r2, #0]
 800acd8:	6810      	ldr	r0, [r2, #0]
 800acda:	4403      	add	r3, r0
 800acdc:	6013      	str	r3, [r2, #0]
 800acde:	4770      	bx	lr
 800ace0:	20000268 	.word	0x20000268
 800ace4:	20000270 	.word	0x20000270

0800ace8 <_write>:
 800ace8:	4b02      	ldr	r3, [pc, #8]	; (800acf4 <_write+0xc>)
 800acea:	2258      	movs	r2, #88	; 0x58
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	f04f 30ff 	mov.w	r0, #4294967295
 800acf2:	4770      	bx	lr
 800acf4:	20000260 	.word	0x20000260

0800acf8 <_exit>:
 800acf8:	e7fe      	b.n	800acf8 <_exit>
	...

0800acfc <_init>:
 800acfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acfe:	bf00      	nop
 800ad00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad02:	bc08      	pop	{r3}
 800ad04:	469e      	mov	lr, r3
 800ad06:	4770      	bx	lr

0800ad08 <_fini>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	bf00      	nop
 800ad0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad0e:	bc08      	pop	{r3}
 800ad10:	469e      	mov	lr, r3
 800ad12:	4770      	bx	lr
