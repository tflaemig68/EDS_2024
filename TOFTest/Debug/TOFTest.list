
TOFTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aab4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  0800ac58  0800ac58  0001ac58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bad8  0800bad8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bae0  0800bae0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bae0  0800bae0  0001bae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bae4  0800bae4  0001bae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800bae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001fc  0800bce4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800bce4  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009840  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  00029a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  0002b780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000083ef  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00058b9d  00000000  00000000  00034b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008d724  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000037cc  00000000  00000000  0008d774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0000ffda  00000000  00000000  00090f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  000a0f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  000a0fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ac3c 	.word	0x0800ac3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	0800ac3c 	.word	0x0800ac3c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
 * @function:	 main
 *
 * @brief: 		 executable function, timing control and trigger
 */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b098      	sub	sp, #96	; 0x60
 8000ec0:	af02      	add	r7, sp, #8

	enableTOFSensor = true;
 8000ec2:	4b98      	ldr	r3, [pc, #608]	; (8001124 <main+0x268>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	TOF_sensor_used = 0x29;
 8000ec8:	4b97      	ldr	r3, [pc, #604]	; (8001128 <main+0x26c>)
 8000eca:	2229      	movs	r2, #41	; 0x29
 8000ecc:	701a      	strb	r2, [r3, #0]

	// variables to store rotation and push button
	int32_t position = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t oldPosition = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	657b      	str	r3, [r7, #84]	; 0x54
	bool buttonPushed = false;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	// variables to store the distance
	uint16_t TOF_DISTANCE_1 = 100;
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	//uint16_t olddistance = TOF_VL53L0X_OUT_OF_RANGE;


	// timer variables
	uint32_t TimerExec = 0UL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t TimerVisu = 0UL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t TimerLED = 0UL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38

	// Array with all timer variables and calculation of size
	uint32_t *timerList[] = { &TimerExec, &TimerVisu, &TimerLED};
 8000eee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8000efa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
	size_t arraySize = sizeof(timerList)/sizeof(timerList[0]);
 8000f00:	2303      	movs	r3, #3
 8000f02:	64bb      	str	r3, [r7, #72]	; 0x48

	// init project
	initBala();
 8000f04:	f000 f98a 	bl	800121c <initBala>

	// TOF-Instanz deklarieren
	TOFSensor_t TOF_Sensor_1;

	// Initialisieren des TOF-Sensors
	initTOFSensorData(&TOF_Sensor_1, I2C1, TOF_ADDR_VL53LOX, TOF_DEFAULT_MODE_D, TOF_DISTANCE_1);
 8000f08:	1d38      	adds	r0, r7, #4
 8000f0a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2229      	movs	r2, #41	; 0x29
 8000f14:	4985      	ldr	r1, [pc, #532]	; (800112c <main+0x270>)
 8000f16:	f002 f9ef 	bl	80032f8 <initTOFSensorData>

	// Konfigurieren und Aktivieren des Sensors
	configTOFSensor(&TOF_Sensor_1, TOF_DEFAULT_MODE_D, true);
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	4618      	mov	r0, r3
 8000f22:	f002 fa0c 	bl	800333e <configTOFSensor>
	//TOF_set_ranging_profile(&TOF_Sensor_1);


	while (1)
	{
		if (true == timerTrigger)
 8000f26:	4b82      	ldr	r3, [pc, #520]	; (8001130 <main+0x274>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d007      	beq.n	8000f3e <main+0x82>
		{
			systickUpdateTimerList((uint32_t *) timerList, arraySize);
 8000f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 fda3 	bl	8006a84 <systickUpdateTimerList>
		}

		// if timer execute is expired
		if (isSystickExpired(TimerExec))
 8000f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f40:	4618      	mov	r0, r3
 8000f42:	f005 fd69 	bl	8006a18 <isSystickExpired>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 8124 	beq.w	8001196 <main+0x2da>
		{
			position = getRotaryPosition();
 8000f4e:	f001 faaf 	bl	80024b0 <getRotaryPosition>
 8000f52:	6538      	str	r0, [r7, #80]	; 0x50
			buttonPushed = getRotaryPushButton();
 8000f54:	f001 fa8a 	bl	800246c <getRotaryPushButton>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bf14      	ite	ne
 8000f5e:	2301      	movne	r3, #1
 8000f60:	2300      	moveq	r3, #0
 8000f62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			// switch case for different screen pages
			switch(page)
 8000f66:	4b73      	ldr	r3, [pc, #460]	; (8001134 <main+0x278>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	f200 80ef 	bhi.w	800114e <main+0x292>
 8000f70:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <main+0xbc>)
 8000f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f76:	bf00      	nop
 8000f78:	08000f8d 	.word	0x08000f8d
 8000f7c:	08001031 	.word	0x08001031
 8000f80:	0800105b 	.word	0x0800105b
 8000f84:	0800107b 	.word	0x0800107b
 8000f88:	0800110d 	.word	0x0800110d
			{
			case SCREEN_MAIN:
				if(buttonPushed)
 8000f8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d03a      	beq.n	800100a <main+0x14e>
					{
					page = (uint16_t)position % 4 + 1;
 8000f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4b64      	ldr	r3, [pc, #400]	; (8001134 <main+0x278>)
 8000fa4:	701a      	strb	r2, [r3, #0]

					// check if it is tried to go to the page of an not initialized sensor
					if(page == 2 && initedTOF == false)
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <main+0x278>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d10c      	bne.n	8000fc8 <main+0x10c>
 8000fae:	4b62      	ldr	r3, [pc, #392]	; (8001138 <main+0x27c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f083 0301 	eor.w	r3, r3, #1
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <main+0x10c>
					{
						page = 0;
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <main+0x278>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f000 fea2 	bl	8001d0c <visualisationShowError>
					}

					if(page == 3 && initedTOF == false)
 8000fc8:	4b5a      	ldr	r3, [pc, #360]	; (8001134 <main+0x278>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d10c      	bne.n	8000fea <main+0x12e>
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <main+0x27c>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f083 0301 	eor.w	r3, r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <main+0x12e>
					{
						page = 0;
 8000fde:	4b55      	ldr	r3, [pc, #340]	; (8001134 <main+0x278>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]

						visualisationShowError(SCREEN_PAGE1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fe91 	bl	8001d0c <visualisationShowError>
					}


					// change menu page
					visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 8000fea:	4b52      	ldr	r3, [pc, #328]	; (8001134 <main+0x278>)
 8000fec:	7818      	ldrb	r0, [r3, #0]
 8000fee:	4b52      	ldr	r3, [pc, #328]	; (8001138 <main+0x27c>)
 8000ff0:	7819      	ldrb	r1, [r3, #0]
 8000ff2:	4b52      	ldr	r3, [pc, #328]	; (800113c <main+0x280>)
 8000ff4:	781a      	ldrb	r2, [r3, #0]
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	f000 fd10 	bl	8001a1c <visualisationMenu>
					initSubMenu(page, &TOF_Sensor_1);
 8000ffc:	4b4d      	ldr	r3, [pc, #308]	; (8001134 <main+0x278>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	1d3a      	adds	r2, r7, #4
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f927 	bl	8001258 <initSubMenu>
					}

				if(oldPosition != position)
 800100a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800100c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800100e:	429a      	cmp	r2, r3
 8001010:	f000 8084 	beq.w	800111c <main+0x260>
				{
					oldPosition = position;
 8001014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001016:	657b      	str	r3, [r7, #84]	; 0x54

					visualisationMenuGridFocus((uint16_t)position % 4, tft_WHITE, tft_YELLOW);
 8001018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800101a:	b29b      	uxth	r3, r3
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001024:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fb2d 	bl	8001688 <visualisationMenuGridFocus>
				}
				break;
 800102e:	e075      	b.n	800111c <main+0x260>

			// init I2C page
			case SCREEN_PAGE1:
				if(buttonPushed)
 8001030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <main+0x182>
				{
					exitMenu = EXIT_FROMSUB1;
 8001038:	4b41      	ldr	r3, [pc, #260]	; (8001140 <main+0x284>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				}
				switch(i2cInitPort)
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <main+0x288>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d002      	beq.n	800104c <main+0x190>
 8001046:	2b02      	cmp	r3, #2
 8001048:	d005      	beq.n	8001056 <main+0x19a>
				case I2C_2:
					//i2cScanAndInit(i2c2);
					break;
				}

				break;
 800104a:	e080      	b.n	800114e <main+0x292>
					i2cScanAndInit(&TOF_Sensor_1);
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f936 	bl	80012c0 <i2cScanAndInit>
					break;
 8001054:	e000      	b.n	8001058 <main+0x19c>
					break;
 8001056:	bf00      	nop
				break;
 8001058:	e079      	b.n	800114e <main+0x292>

			// TOF page
			case SCREEN_PAGE2:
				if(buttonPushed)
 800105a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d006      	beq.n	8001070 <main+0x1b4>
				{
					TOF_stop_continuous(&TOF_Sensor_1);
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fc93 	bl	8004990 <TOF_stop_continuous>
					exitMenu = EXIT_FROMSUB2;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <main+0x284>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
				}
				TOF_read_continuous_distance(&TOF_Sensor_1);
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4618      	mov	r0, r3
 8001074:	f003 fcec 	bl	8004a50 <TOF_read_continuous_distance>
				break;
 8001078:	e069      	b.n	800114e <main+0x292>

			// Ranging Mode Page page
			case SCREEN_PAGE3:
				position = getRotaryPosition();
 800107a:	f001 fa19 	bl	80024b0 <getRotaryPosition>
 800107e:	6538      	str	r0, [r7, #80]	; 0x50
				uint16_t MODE = (uint16_t)position % 4 + 1;
 8001080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001082:	b29b      	uxth	r3, r3
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	b29b      	uxth	r3, r3
 800108a:	3301      	adds	r3, #1
 800108c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
				visualisationRangingProfileTOF(MODE);
 8001090:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fed7 	bl	8001e48 <visualisationRangingProfileTOF>

				if(buttonPushed)
 800109a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d03e      	beq.n	8001120 <main+0x264>
				{
					configTOFSensor(&TOF_Sensor_1, MODE, true);
 80010a2:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	2201      	movs	r2, #1
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 f947 	bl	800333e <configTOFSensor>
					//TOF_set_ranging_profile(&TOF_Sensor_1);

					switch(MODE){		//change timerexecution time to recommended +3ms to make shure works
 80010b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010b4:	3b01      	subs	r3, #1
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d81a      	bhi.n	80010f0 <main+0x234>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <main+0x204>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010d1 	.word	0x080010d1
 80010c4:	080010d9 	.word	0x080010d9
 80010c8:	080010e1 	.word	0x080010e1
 80010cc:	080010e9 	.word	0x080010e9
					case 1:
						timeTimerExec = 35;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <main+0x28c>)
 80010d2:	2223      	movs	r2, #35	; 0x23
 80010d4:	801a      	strh	r2, [r3, #0]
						break;
 80010d6:	e00f      	b.n	80010f8 <main+0x23c>
					case 2:
						timeTimerExec = 23;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0x28c>)
 80010da:	2217      	movs	r2, #23
 80010dc:	801a      	strh	r2, [r3, #0]
						break;
 80010de:	e00b      	b.n	80010f8 <main+0x23c>
					case 3:
						timeTimerExec = 203;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <main+0x28c>)
 80010e2:	22cb      	movs	r2, #203	; 0xcb
 80010e4:	801a      	strh	r2, [r3, #0]
						break;
 80010e6:	e007      	b.n	80010f8 <main+0x23c>
					case 4:
						timeTimerExec = 36;
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <main+0x28c>)
 80010ea:	2224      	movs	r2, #36	; 0x24
 80010ec:	801a      	strh	r2, [r3, #0]
						break;
 80010ee:	e003      	b.n	80010f8 <main+0x23c>
					default:
						timeTimerExec = 30;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <main+0x28c>)
 80010f2:	221e      	movs	r2, #30
 80010f4:	801a      	strh	r2, [r3, #0]
						break;
 80010f6:	bf00      	nop
					}
					TimerExec = 0UL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
					TimerVisu = 0UL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	63fb      	str	r3, [r7, #60]	; 0x3c
					TimerLED = 0UL;
 8001100:	2300      	movs	r3, #0
 8001102:	63bb      	str	r3, [r7, #56]	; 0x38

					exitMenu = EXIT_FROMSUB3;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <main+0x284>)
 8001106:	2202      	movs	r2, #2
 8001108:	701a      	strb	r2, [r3, #0]
				}
				break;
 800110a:	e009      	b.n	8001120 <main+0x264>

			case SCREEN_PAGE4:
				if(buttonPushed)
 800110c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001110:	2b00      	cmp	r3, #0
 8001112:	d01b      	beq.n	800114c <main+0x290>
				{
					exitMenu = EXIT_FROMSUB4;
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x284>)
 8001116:	2203      	movs	r2, #3
 8001118:	701a      	strb	r2, [r3, #0]
				}
				break;
 800111a:	e017      	b.n	800114c <main+0x290>
				break;
 800111c:	bf00      	nop
 800111e:	e016      	b.n	800114e <main+0x292>
				break;
 8001120:	bf00      	nop
 8001122:	e014      	b.n	800114e <main+0x292>
 8001124:	2000021f 	.word	0x2000021f
 8001128:	20000002 	.word	0x20000002
 800112c:	40005400 	.word	0x40005400
 8001130:	20000224 	.word	0x20000224
 8001134:	2000021e 	.word	0x2000021e
 8001138:	2000021d 	.word	0x2000021d
 800113c:	2000021c 	.word	0x2000021c
 8001140:	20000005 	.word	0x20000005
 8001144:	20000003 	.word	0x20000003
 8001148:	20000000 	.word	0x20000000
				break;
 800114c:	bf00      	nop
			}

			// exit sub page to main menu, focus right menu item
			if(exitMenu != EXIT_FALSE)
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <main+0x348>)
 8001150:	f993 3000 	ldrsb.w	r3, [r3]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d014      	beq.n	8001184 <main+0x2c8>
			{
				page = SCREEN_MAIN;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <main+0x34c>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
				setRotaryPosition(exitMenu);
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <main+0x348>)
 8001162:	f993 3000 	ldrsb.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f9b8 	bl	80024dc <setRotaryPosition>
				visualisationMenu(page, initedTOF, inited3DG, &TOF_Sensor_1);
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <main+0x34c>)
 800116e:	7818      	ldrb	r0, [r3, #0]
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <main+0x350>)
 8001172:	7819      	ldrb	r1, [r3, #0]
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <main+0x354>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	f000 fc4f 	bl	8001a1c <visualisationMenu>

				exitMenu = EXIT_FALSE;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <main+0x348>)
 8001180:	22ff      	movs	r2, #255	; 0xff
 8001182:	701a      	strb	r2, [r3, #0]
			}

			systickSetTicktime(&TimerExec, timeTimerExec);
 8001184:	4b23      	ldr	r3, [pc, #140]	; (8001214 <main+0x358>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f005 fc33 	bl	80069fc <systickSetTicktime>
		}

		// if timer visualization is expired
		if (isSystickExpired(TimerVisu))
 8001196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001198:	4618      	mov	r0, r3
 800119a:	f005 fc3d 	bl	8006a18 <isSystickExpired>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01c      	beq.n	80011de <main+0x322>
		{
			// switch case for dynamic display update
			switch(page)
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <main+0x34c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d812      	bhi.n	80011d2 <main+0x316>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <main+0x2f8>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011d3 	.word	0x080011d3
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011c9 	.word	0x080011c9
 80011c0:	080011d3 	.word	0x080011d3
 80011c4:	080011d3 	.word	0x080011d3
						delayms(200);
						visualisationTOF(&TOF_Sensor_1);

					}
*/
				visualisationTOF(&TOF_Sensor_1);
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	4618      	mov	r0, r3
 80011cc:	f000 fdfc 	bl	8001dc8 <visualisationTOF>

				break;
 80011d0:	bf00      	nop
				break;
			case SCREEN_PAGE4:
				break;
			}

			systickSetTicktime(&TimerVisu, timeTimerVisu);
 80011d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011d6:	2132      	movs	r1, #50	; 0x32
 80011d8:	4618      	mov	r0, r3
 80011da:	f005 fc0f 	bl	80069fc <systickSetTicktime>
		}

		// if timer LED is expired
		if (isSystickExpired(TimerLED))
 80011de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e0:	4618      	mov	r0, r3
 80011e2:	f005 fc19 	bl	8006a18 <isSystickExpired>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f43f ae9c 	beq.w	8000f26 <main+0x6a>
		{
			// toggle LED to show current speed of system
			gpioTogglePin(LED_BLUE_ADR);
 80011ee:	210a      	movs	r1, #10
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <main+0x35c>)
 80011f2:	f004 fb97 	bl	8005924 <gpioTogglePin>

			systickSetTicktime(&TimerLED, timeTimerLED);
 80011f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011fa:	21fa      	movs	r1, #250	; 0xfa
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fbfd 	bl	80069fc <systickSetTicktime>
		if (true == timerTrigger)
 8001202:	e690      	b.n	8000f26 <main+0x6a>
 8001204:	20000005 	.word	0x20000005
 8001208:	2000021e 	.word	0x2000021e
 800120c:	2000021d 	.word	0x2000021d
 8001210:	2000021c 	.word	0x2000021c
 8001214:	20000000 	.word	0x20000000
 8001218:	40020400 	.word	0x40020400

0800121c <initBala>:
 *
 * @brief: 		 initialization the Bala-system, initialization hardware
 * 				 from Balancer library and start visualization
 */
void initBala(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	// initialization bala-library
	//BalaHWsetup();

	 ledActivate();		// at BALO.c
 8001220:	f000 ff86 	bl	8002130 <ledActivate>
	 i2cActivate();		// at BALO.c
 8001224:	f000 ff48 	bl	80020b8 <i2cActivate>
	 LED_red_on;
 8001228:	2103      	movs	r1, #3
 800122a:	480a      	ldr	r0, [pc, #40]	; (8001254 <initBala+0x38>)
 800122c:	f004 fb4e 	bl	80058cc <gpioResetPin>
	 //adcActivate();



	// initialization rotary push button
	initRotaryPushButton();
 8001230:	f001 f87e 	bl	8002330 <initRotaryPushButton>

	// initialization LED
	initRotaryPushButtonLED();
 8001234:	f001 f8e2 	bl	80023fc <initRotaryPushButtonLED>

	// Configure of SysTick-Timers
	systickInit(SYSTICK_1MS);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f005 fbca 	bl	80069d4 <systickInit>

	//initialization needed for TFT Display
	spiInit();
 8001240:	f001 f9f4 	bl	800262c <spiInit>
	tftInitR(INITR_REDTAB);
 8001244:	2001      	movs	r0, #1
 8001246:	f001 fab1 	bl	80027ac <tftInitR>
	// start visualization
	visualisationStart();
 800124a:	f000 f8b3 	bl	80013b4 <visualisationStart>

	//start page 1: i2c sensor connect
	//page = SCREEN_PAGE1;
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40020400 	.word	0x40020400

08001258 <initSubMenu>:
 * 				 with correct transition initialization
 *
 * @parameters:	 SCREEN_PAGES_t page:	 page to be initialized
 */
void initSubMenu(SCREEN_PAGES_t page, TOFSensor_t* TOFSENS)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
	// switch case for menu pages
	switch(page)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b04      	cmp	r3, #4
 8001268:	d81e      	bhi.n	80012a8 <initSubMenu+0x50>
 800126a:	a201      	add	r2, pc, #4	; (adr r2, 8001270 <initSubMenu+0x18>)
 800126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001270:	080012a7 	.word	0x080012a7
 8001274:	08001285 	.word	0x08001285
 8001278:	0800129f 	.word	0x0800129f
 800127c:	080012a7 	.word	0x080012a7
 8001280:	080012a7 	.word	0x080012a7
			break;
	case SCREEN_PAGE1:
		//enable3DGSensor = false;
		// disable "sensor enable" to be able to initialize all sensors

		enableTOFSensor = false;
 8001284:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <initSubMenu+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]

		// reset i2c scan
		//scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_1;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <initSubMenu+0x5c>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
		i2cInitAttempts = I2C_MAXATTEMPTS;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <initSubMenu+0x60>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]

		// reset sensor initialization
		initedTOF = false;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <initSubMenu+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
		break;
 800129c:	e004      	b.n	80012a8 <initSubMenu+0x50>
	case SCREEN_PAGE2:
		TOF_start_continuous(TOFSENS);
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f003 fa96 	bl	80047d0 <TOF_start_continuous>
			break;
 80012a4:	e000      	b.n	80012a8 <initSubMenu+0x50>
			break;
 80012a6:	bf00      	nop
	case SCREEN_PAGE3:
			break;
	case SCREEN_PAGE4:
			break;
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	2000021f 	.word	0x2000021f
 80012b4:	20000003 	.word	0x20000003
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2000021d 	.word	0x2000021d

080012c0 <i2cScanAndInit>:
 * 				 with correct transition initialization
 *
 * @parameters:	 I2C_TypeDef   *i2c:	 i2c to be scanned
 */
void i2cScanAndInit(TOFSensor_t *TOFSENS) //
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	static uint8_t scanAddr = (uint8_t)I2C_MAXADRESS;			// scan I2C address
	uint8_t scanResult;
	bool InitResult;
	I2C_TypeDef *i2c ;
	i2c = TOFSENS->i2c_tof;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
	scanResult =I2C_SCAN(i2c, scanAddr);
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <i2cScanAndInit+0xd4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 ff9d 	bl	8002214 <I2C_SCAN>
 80012da:	4603      	mov	r3, r0
 80012dc:	72fb      	strb	r3, [r7, #11]
	if (scanResult != 0)
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00f      	beq.n	8001304 <i2cScanAndInit+0x44>

			enable3DGSensor = true;
		}

		else		*/
		if(scanResult == TOF_ADDR_VL53LOX)
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	2b29      	cmp	r3, #41	; 0x29
 80012e8:	d109      	bne.n	80012fe <i2cScanAndInit+0x3e>
		{
			TOF_sensor_used = TOF_ADDR_VL53LOX;
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <i2cScanAndInit+0xd8>)
 80012ec:	2229      	movs	r2, #41	; 0x29
 80012ee:	701a      	strb	r2, [r3, #0]
			visualisationSensorRecognized(VISUALISATION_VL53LOX);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fde7 	bl	8001ec4 <visualisationSensorRecognized>

			enableTOFSensor = true;
 80012f6:	4b29      	ldr	r3, [pc, #164]	; (800139c <i2cScanAndInit+0xdc>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e002      	b.n	8001304 <i2cScanAndInit+0x44>
		}
		else
		{
			// show that an unknown sensor was found
			visualisationSensorRecognized(VISUALISATION_UNKNOWN);
 80012fe:	2004      	movs	r0, #4
 8001300:	f000 fde0 	bl	8001ec4 <visualisationSensorRecognized>
		}


	}
	// check if all i2c addresses are searched
	if (scanAddr <= 0)
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <i2cScanAndInit+0xd4>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <i2cScanAndInit+0x7e>
	{
		visualisationI2CScanDone(i2cInitAttempts);
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <i2cScanAndInit+0xe0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fe4b 	bl	8001fac <visualisationI2CScanDone>

		i2cInitAttempts -= 1;
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <i2cScanAndInit+0xe0>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3b01      	subs	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <i2cScanAndInit+0xe0>)
 8001320:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <i2cScanAndInit+0xd4>)
 8001324:	222f      	movs	r2, #47	; 0x2f
 8001326:	701a      	strb	r2, [r3, #0]

		if(i2cInitAttempts < 1)
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <i2cScanAndInit+0xe0>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d10c      	bne.n	800134a <i2cScanAndInit+0x8a>
		{
			exitMenu = EXIT_FROMSUB1;
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <i2cScanAndInit+0xe4>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
			i2cInitAttempts = I2C_MAXATTEMPTS;
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <i2cScanAndInit+0xe0>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
 800133c:	e005      	b.n	800134a <i2cScanAndInit+0x8a>
		}
	}
	// otherwise decrement scan address and search next i2c address
	else
	{
		scanAddr -= 1;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <i2cScanAndInit+0xd4>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	3b01      	subs	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <i2cScanAndInit+0xd4>)
 8001348:	701a      	strb	r2, [r3, #0]
	}

	// initialize TOF sensor if one is found
	if(enableTOFSensor != ENABLE_TOF_FALSE && enableTOFSensor == (ENABLE_TOF_SENSOR_t)i2cInitPort)
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <i2cScanAndInit+0xdc>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d01c      	beq.n	800138c <i2cScanAndInit+0xcc>
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <i2cScanAndInit+0xdc>)
 8001354:	781a      	ldrb	r2, [r3, #0]
 8001356:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <i2cScanAndInit+0xe8>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d116      	bne.n	800138c <i2cScanAndInit+0xcc>
	{
		// do TOF sensor initialization
		visualisationSensorInit(SENSOR_INIT_RUNNING);
 800135e:	2000      	movs	r0, #0
 8001360:	f000 fe5e 	bl	8002020 <visualisationSensorInit>

		i2c_tof = i2c;
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <i2cScanAndInit+0xec>)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6013      	str	r3, [r2, #0]

		InitResult = TOF_init(TOFSENS);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f003 fa04 	bl	8004778 <TOF_init>
 8001370:	4603      	mov	r3, r0
 8001372:	72bb      	strb	r3, [r7, #10]

		// check if init was successful
		if(InitResult)
 8001374:	7abb      	ldrb	r3, [r7, #10]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d008      	beq.n	800138c <i2cScanAndInit+0xcc>
		{
			// show if init was successful
			visualisationSensorInit(SENSOR_INIT_DONE);
 800137a:	2001      	movs	r0, #1
 800137c:	f000 fe50 	bl	8002020 <visualisationSensorInit>
			initedTOF = true;
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <i2cScanAndInit+0xf0>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]

			// give chance to read success-massage
			//delayms(500);

			exitMenu = EXIT_FROMSUB1;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <i2cScanAndInit+0xe4>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
		scanAddr = I2C_MAXADRESS;
		i2cInitPort = I2C_2;

	}
	#endif /* BALA2024 */
}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000006 	.word	0x20000006
 8001398:	20000002 	.word	0x20000002
 800139c:	2000021f 	.word	0x2000021f
 80013a0:	20000004 	.word	0x20000004
 80013a4:	20000005 	.word	0x20000005
 80013a8:	20000003 	.word	0x20000003
 80013ac:	20000220 	.word	0x20000220
 80013b0:	2000021d 	.word	0x2000021d

080013b4 <visualisationStart>:
 * @function:	 visualisationStart
 *
 * @brief: 		 start visualization and start menu
 */
void visualisationStart(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	//display setup
	tftSetRotation(LANDSCAPE_FLIP);
 80013b8:	2003      	movs	r0, #3
 80013ba:	f001 ff35 	bl	8003228 <tftSetRotation>
	tftSetFont((uint8_t *)&SmallFont[0]);
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <visualisationStart+0x50>)
 80013c0:	f001 fc28 	bl	8002c14 <tftSetFont>
	tftFillScreen(tft_BLACK);
 80013c4:	2000      	movs	r0, #0
 80013c6:	f001 ff15 	bl	80031f4 <tftFillScreen>

	// show header on screen
	visualisationHeader();
 80013ca:	f000 f823 	bl	8001414 <visualisationHeader>

	// welcome massage
	tftPrint("----------------",0,10,0);
 80013ce:	2300      	movs	r3, #0
 80013d0:	220a      	movs	r2, #10
 80013d2:	2100      	movs	r1, #0
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <visualisationStart+0x54>)
 80013d6:	f001 fe73 	bl	80030c0 <tftPrint>
	tftPrint("TimeOfFlight Sensor",0,30,0);
 80013da:	2300      	movs	r3, #0
 80013dc:	221e      	movs	r2, #30
 80013de:	2100      	movs	r1, #0
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <visualisationStart+0x58>)
 80013e2:	f001 fe6d 	bl	80030c0 <tftPrint>
	tftPrint("Philipp & Andreas",0,50,0);
 80013e6:	2300      	movs	r3, #0
 80013e8:	2232      	movs	r2, #50	; 0x32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4808      	ldr	r0, [pc, #32]	; (8001410 <visualisationStart+0x5c>)
 80013ee:	f001 fe67 	bl	80030c0 <tftPrint>
	tftPrint("----------------",0,70,0);
 80013f2:	2300      	movs	r3, #0
 80013f4:	2246      	movs	r2, #70	; 0x46
 80013f6:	2100      	movs	r1, #0
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <visualisationStart+0x54>)
 80013fa:	f001 fe61 	bl	80030c0 <tftPrint>
	// wait, that it can be read
	//delayms(20000);

	// start menu scan i2c
	//visualisationMenu(SCREEN_PAGE3, false, false);
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800b004 	.word	0x0800b004
 8001408:	0800ac58 	.word	0x0800ac58
 800140c:	0800ac6c 	.word	0x0800ac6c
 8001410:	0800ac80 	.word	0x0800ac80

08001414 <visualisationHeader>:
 * @function:	 visualisationHeader
 *
 * @brief: 		 show screen header
 */
void visualisationHeader(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	tftPrint("ARM-TMT22GR2",0,0,0);
 8001418:	2300      	movs	r3, #0
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <visualisationHeader+0x14>)
 8001420:	f001 fe4e 	bl	80030c0 <tftPrint>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800ac94 	.word	0x0800ac94

0800142c <visualisationMenuGrid>:
 *
 * @parameters:	 MENU_GRID_t grid:	 which grid should be visualized
 * 				 uint16_t color:	 color for grid
 */
void visualisationMenuGrid(MENU_GRID_t grid, uint16_t color)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b085      	sub	sp, #20
 8001430:	af02      	add	r7, sp, #8
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	4613      	mov	r3, r2
 800143a:	80bb      	strh	r3, [r7, #4]
	//reset rectangle, print it black, if we don't want to draw black
	if(grid != GRID4)
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	2b03      	cmp	r3, #3
 8001440:	d003      	beq.n	800144a <visualisationMenuGrid+0x1e>
	{
		visualisationMenuGrid(GRID4, tft_BLACK);
 8001442:	2100      	movs	r1, #0
 8001444:	2003      	movs	r0, #3
 8001446:	f7ff fff1 	bl	800142c <visualisationMenuGrid>
	}

	// switch different grids to be visualized
	switch(grid)
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	2b03      	cmp	r3, #3
 800144e:	f200 8117 	bhi.w	8001680 <visualisationMenuGrid+0x254>
 8001452:	a201      	add	r2, pc, #4	; (adr r2, 8001458 <visualisationMenuGrid+0x2c>)
 8001454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001458:	08001469 	.word	0x08001469
 800145c:	080014eb 	.word	0x080014eb
 8001460:	0800148f 	.word	0x0800148f
 8001464:	0800155f 	.word	0x0800155f
	{
		// just a frame
		case GRID1:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8001468:	f001 ff2e 	bl	80032c8 <tftGetWidth>
 800146c:	4603      	mov	r3, r0
 800146e:	3b01      	subs	r3, #1
 8001470:	b2dc      	uxtb	r4, r3
 8001472:	f001 ff35 	bl	80032e0 <tftGetHeight>
 8001476:	4603      	mov	r3, r0
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	4613      	mov	r3, r2
 8001482:	4622      	mov	r2, r4
 8001484:	210e      	movs	r1, #14
 8001486:	2000      	movs	r0, #0
 8001488:	f001 fb78 	bl	8002b7c <tftDrawRect>
			break;
 800148c:	e0f8      	b.n	8001680 <visualisationMenuGrid+0x254>
		// two frame grid vertical
		case GRID2V:
			tftDrawRect(0, 14, tftGetWidth()/2 -1, tftGetHeight() - 1, color);
 800148e:	f001 ff1b 	bl	80032c8 <tftGetWidth>
 8001492:	4603      	mov	r3, r0
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	3b01      	subs	r3, #1
 800149a:	b2dc      	uxtb	r4, r3
 800149c:	f001 ff20 	bl	80032e0 <tftGetHeight>
 80014a0:	4603      	mov	r3, r0
 80014a2:	3b01      	subs	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4613      	mov	r3, r2
 80014ac:	4622      	mov	r2, r4
 80014ae:	210e      	movs	r1, #14
 80014b0:	2000      	movs	r0, #0
 80014b2:	f001 fb63 	bl	8002b7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 -1, 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 80014b6:	f001 ff07 	bl	80032c8 <tftGetWidth>
 80014ba:	4603      	mov	r3, r0
 80014bc:	085b      	lsrs	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2dc      	uxtb	r4, r3
 80014c4:	f001 ff00 	bl	80032c8 <tftGetWidth>
 80014c8:	4603      	mov	r3, r0
 80014ca:	3b01      	subs	r3, #1
 80014cc:	b2dd      	uxtb	r5, r3
 80014ce:	f001 ff07 	bl	80032e0 <tftGetHeight>
 80014d2:	4603      	mov	r3, r0
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	4613      	mov	r3, r2
 80014de:	462a      	mov	r2, r5
 80014e0:	210e      	movs	r1, #14
 80014e2:	4620      	mov	r0, r4
 80014e4:	f001 fb4a 	bl	8002b7c <tftDrawRect>
			break;
 80014e8:	e0ca      	b.n	8001680 <visualisationMenuGrid+0x254>
		// two frame grid horizontal
		case GRID2H:
			tftDrawRect(0, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 80014ea:	f001 feed 	bl	80032c8 <tftGetWidth>
 80014ee:	4603      	mov	r3, r0
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b2dc      	uxtb	r4, r3
 80014f4:	f001 fef4 	bl	80032e0 <tftGetHeight>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461d      	mov	r5, r3
 80014fc:	f001 fee4 	bl	80032c8 <tftGetWidth>
 8001500:	4603      	mov	r3, r0
 8001502:	085b      	lsrs	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	1aeb      	subs	r3, r5, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	3315      	adds	r3, #21
 800150c:	b2da      	uxtb	r2, r3
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	4622      	mov	r2, r4
 8001516:	210e      	movs	r1, #14
 8001518:	2000      	movs	r0, #0
 800151a:	f001 fb2f 	bl	8002b7c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 800151e:	f001 fedf 	bl	80032e0 <tftGetHeight>
 8001522:	4603      	mov	r3, r0
 8001524:	461c      	mov	r4, r3
 8001526:	f001 fecf 	bl	80032c8 <tftGetWidth>
 800152a:	4603      	mov	r3, r0
 800152c:	085b      	lsrs	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	1ae3      	subs	r3, r4, r3
 8001532:	b2db      	uxtb	r3, r3
 8001534:	3315      	adds	r3, #21
 8001536:	b2dc      	uxtb	r4, r3
 8001538:	f001 fec6 	bl	80032c8 <tftGetWidth>
 800153c:	4603      	mov	r3, r0
 800153e:	3b01      	subs	r3, #1
 8001540:	b2dd      	uxtb	r5, r3
 8001542:	f001 fecd 	bl	80032e0 <tftGetHeight>
 8001546:	4603      	mov	r3, r0
 8001548:	3b01      	subs	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	4613      	mov	r3, r2
 8001552:	462a      	mov	r2, r5
 8001554:	4621      	mov	r1, r4
 8001556:	2000      	movs	r0, #0
 8001558:	f001 fb10 	bl	8002b7c <tftDrawRect>
			break;
 800155c:	e090      	b.n	8001680 <visualisationMenuGrid+0x254>
		// four frame grid
		case GRID4:
			tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 800155e:	f001 feb3 	bl	80032c8 <tftGetWidth>
 8001562:	4603      	mov	r3, r0
 8001564:	461c      	mov	r4, r3
 8001566:	f001 feaf 	bl	80032c8 <tftGetWidth>
 800156a:	4603      	mov	r3, r0
 800156c:	085b      	lsrs	r3, r3, #1
 800156e:	b2db      	uxtb	r3, r3
 8001570:	1ae3      	subs	r3, r4, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b2dc      	uxtb	r4, r3
 8001578:	f001 feb2 	bl	80032e0 <tftGetHeight>
 800157c:	4603      	mov	r3, r0
 800157e:	461d      	mov	r5, r3
 8001580:	f001 fea2 	bl	80032c8 <tftGetWidth>
 8001584:	4603      	mov	r3, r0
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	b2db      	uxtb	r3, r3
 800158a:	1aeb      	subs	r3, r5, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	3315      	adds	r3, #21
 8001590:	b2da      	uxtb	r2, r3
 8001592:	88bb      	ldrh	r3, [r7, #4]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	4622      	mov	r2, r4
 800159a:	210e      	movs	r1, #14
 800159c:	2000      	movs	r0, #0
 800159e:	f001 faed 	bl	8002b7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, color);
 80015a2:	f001 fe91 	bl	80032c8 <tftGetWidth>
 80015a6:	4603      	mov	r3, r0
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b2dc      	uxtb	r4, r3
 80015b0:	f001 fe8a 	bl	80032c8 <tftGetWidth>
 80015b4:	4603      	mov	r3, r0
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b2dd      	uxtb	r5, r3
 80015ba:	f001 fe91 	bl	80032e0 <tftGetHeight>
 80015be:	4603      	mov	r3, r0
 80015c0:	461e      	mov	r6, r3
 80015c2:	f001 fe81 	bl	80032c8 <tftGetWidth>
 80015c6:	4603      	mov	r3, r0
 80015c8:	085b      	lsrs	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	1af3      	subs	r3, r6, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	3315      	adds	r3, #21
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	4613      	mov	r3, r2
 80015da:	462a      	mov	r2, r5
 80015dc:	210e      	movs	r1, #14
 80015de:	4620      	mov	r0, r4
 80015e0:	f001 facc 	bl	8002b7c <tftDrawRect>
			tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, color);
 80015e4:	f001 fe7c 	bl	80032e0 <tftGetHeight>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461c      	mov	r4, r3
 80015ec:	f001 fe6c 	bl	80032c8 <tftGetWidth>
 80015f0:	4603      	mov	r3, r0
 80015f2:	085b      	lsrs	r3, r3, #1
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	1ae3      	subs	r3, r4, r3
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	3315      	adds	r3, #21
 80015fc:	b2dc      	uxtb	r4, r3
 80015fe:	f001 fe63 	bl	80032c8 <tftGetWidth>
 8001602:	4603      	mov	r3, r0
 8001604:	461d      	mov	r5, r3
 8001606:	f001 fe5f 	bl	80032c8 <tftGetWidth>
 800160a:	4603      	mov	r3, r0
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	1aeb      	subs	r3, r5, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	3b01      	subs	r3, #1
 8001616:	b2dd      	uxtb	r5, r3
 8001618:	f001 fe62 	bl	80032e0 <tftGetHeight>
 800161c:	4603      	mov	r3, r0
 800161e:	3b01      	subs	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	4613      	mov	r3, r2
 8001628:	462a      	mov	r2, r5
 800162a:	4621      	mov	r1, r4
 800162c:	2000      	movs	r0, #0
 800162e:	f001 faa5 	bl	8002b7c <tftDrawRect>
			tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, color);
 8001632:	f001 fe49 	bl	80032c8 <tftGetWidth>
 8001636:	4603      	mov	r3, r0
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	3b01      	subs	r3, #1
 800163e:	b2dc      	uxtb	r4, r3
 8001640:	f001 fe4e 	bl	80032e0 <tftGetHeight>
 8001644:	4603      	mov	r3, r0
 8001646:	461d      	mov	r5, r3
 8001648:	f001 fe3e 	bl	80032c8 <tftGetWidth>
 800164c:	4603      	mov	r3, r0
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	b2db      	uxtb	r3, r3
 8001652:	1aeb      	subs	r3, r5, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3315      	adds	r3, #21
 8001658:	b2dd      	uxtb	r5, r3
 800165a:	f001 fe35 	bl	80032c8 <tftGetWidth>
 800165e:	4603      	mov	r3, r0
 8001660:	3b01      	subs	r3, #1
 8001662:	b2de      	uxtb	r6, r3
 8001664:	f001 fe3c 	bl	80032e0 <tftGetHeight>
 8001668:	4603      	mov	r3, r0
 800166a:	3b01      	subs	r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4613      	mov	r3, r2
 8001674:	4632      	mov	r2, r6
 8001676:	4629      	mov	r1, r5
 8001678:	4620      	mov	r0, r4
 800167a:	f001 fa7f 	bl	8002b7c <tftDrawRect>
			break;
 800167e:	bf00      	nop
	}
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001688 <visualisationMenuGridFocus>:
 * @parameters:	 int32_t position:	 	position to focus
 * 				 uint16_t colorDefault:	default color to reset focus
 * 				 uint16_t colorFocus:	focus color
 */
void visualisationMenuGridFocus(int32_t position, uint16_t colorDefault, uint16_t colorFocus)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b085      	sub	sp, #20
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	803b      	strh	r3, [r7, #0]
	//reset rectangle from focus
	visualisationMenuGrid(GRID4, colorDefault);
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	4619      	mov	r1, r3
 800169c:	2003      	movs	r0, #3
 800169e:	f7ff fec5 	bl	800142c <visualisationMenuGrid>
	tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 80016a2:	f001 fe11 	bl	80032c8 <tftGetWidth>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461c      	mov	r4, r3
 80016aa:	f001 fe0d 	bl	80032c8 <tftGetWidth>
 80016ae:	4603      	mov	r3, r0
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	1ae3      	subs	r3, r4, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3b02      	subs	r3, #2
 80016ba:	b2dc      	uxtb	r4, r3
 80016bc:	f001 fe10 	bl	80032e0 <tftGetHeight>
 80016c0:	4603      	mov	r3, r0
 80016c2:	461d      	mov	r5, r3
 80016c4:	f001 fe00 	bl	80032c8 <tftGetWidth>
 80016c8:	4603      	mov	r3, r0
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	1aeb      	subs	r3, r5, r3
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	3314      	adds	r3, #20
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2200      	movs	r2, #0
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	4622      	mov	r2, r4
 80016dc:	210f      	movs	r1, #15
 80016de:	2001      	movs	r0, #1
 80016e0:	f001 fa4c 	bl	8002b7c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, tft_BLACK);
 80016e4:	f001 fdf0 	bl	80032c8 <tftGetWidth>
 80016e8:	4603      	mov	r3, r0
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	b2dc      	uxtb	r4, r3
 80016ee:	f001 fdeb 	bl	80032c8 <tftGetWidth>
 80016f2:	4603      	mov	r3, r0
 80016f4:	3b02      	subs	r3, #2
 80016f6:	b2dd      	uxtb	r5, r3
 80016f8:	f001 fdf2 	bl	80032e0 <tftGetHeight>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461e      	mov	r6, r3
 8001700:	f001 fde2 	bl	80032c8 <tftGetWidth>
 8001704:	4603      	mov	r3, r0
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	1af3      	subs	r3, r6, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3314      	adds	r3, #20
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2200      	movs	r2, #0
 8001714:	9200      	str	r2, [sp, #0]
 8001716:	462a      	mov	r2, r5
 8001718:	210f      	movs	r1, #15
 800171a:	4620      	mov	r0, r4
 800171c:	f001 fa2e 	bl	8002b7c <tftDrawRect>
	tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 8001720:	f001 fdde 	bl	80032e0 <tftGetHeight>
 8001724:	4603      	mov	r3, r0
 8001726:	461c      	mov	r4, r3
 8001728:	f001 fdce 	bl	80032c8 <tftGetWidth>
 800172c:	4603      	mov	r3, r0
 800172e:	085b      	lsrs	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	1ae3      	subs	r3, r4, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3316      	adds	r3, #22
 8001738:	b2dc      	uxtb	r4, r3
 800173a:	f001 fdc5 	bl	80032c8 <tftGetWidth>
 800173e:	4603      	mov	r3, r0
 8001740:	461d      	mov	r5, r3
 8001742:	f001 fdc1 	bl	80032c8 <tftGetWidth>
 8001746:	4603      	mov	r3, r0
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	1aeb      	subs	r3, r5, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	3b02      	subs	r3, #2
 8001752:	b2dd      	uxtb	r5, r3
 8001754:	f001 fdc4 	bl	80032e0 <tftGetHeight>
 8001758:	4603      	mov	r3, r0
 800175a:	3b02      	subs	r3, #2
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2200      	movs	r2, #0
 8001760:	9200      	str	r2, [sp, #0]
 8001762:	462a      	mov	r2, r5
 8001764:	4621      	mov	r1, r4
 8001766:	2001      	movs	r0, #1
 8001768:	f001 fa08 	bl	8002b7c <tftDrawRect>
	tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, tft_BLACK);
 800176c:	f001 fdac 	bl	80032c8 <tftGetWidth>
 8001770:	4603      	mov	r3, r0
 8001772:	085b      	lsrs	r3, r3, #1
 8001774:	b2dc      	uxtb	r4, r3
 8001776:	f001 fdb3 	bl	80032e0 <tftGetHeight>
 800177a:	4603      	mov	r3, r0
 800177c:	461d      	mov	r5, r3
 800177e:	f001 fda3 	bl	80032c8 <tftGetWidth>
 8001782:	4603      	mov	r3, r0
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	b2db      	uxtb	r3, r3
 8001788:	1aeb      	subs	r3, r5, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3316      	adds	r3, #22
 800178e:	b2dd      	uxtb	r5, r3
 8001790:	f001 fd9a 	bl	80032c8 <tftGetWidth>
 8001794:	4603      	mov	r3, r0
 8001796:	3b02      	subs	r3, #2
 8001798:	b2de      	uxtb	r6, r3
 800179a:	f001 fda1 	bl	80032e0 <tftGetHeight>
 800179e:	4603      	mov	r3, r0
 80017a0:	3b02      	subs	r3, #2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2200      	movs	r2, #0
 80017a6:	9200      	str	r2, [sp, #0]
 80017a8:	4632      	mov	r2, r6
 80017aa:	4629      	mov	r1, r5
 80017ac:	4620      	mov	r0, r4
 80017ae:	f001 f9e5 	bl	8002b7c <tftDrawRect>

	// which frame should be focused
	switch(position)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	f200 812b 	bhi.w	8001a10 <visualisationMenuGridFocus+0x388>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <visualisationMenuGridFocus+0x138>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	0800185b 	.word	0x0800185b
 80017c8:	080018dd 	.word	0x080018dd
 80017cc:	08001973 	.word	0x08001973
	{
	case 0:
		tftDrawRect(0 + 1, 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 80017d0:	f001 fd7a 	bl	80032c8 <tftGetWidth>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461c      	mov	r4, r3
 80017d8:	f001 fd76 	bl	80032c8 <tftGetWidth>
 80017dc:	4603      	mov	r3, r0
 80017de:	085b      	lsrs	r3, r3, #1
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	1ae3      	subs	r3, r4, r3
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3b02      	subs	r3, #2
 80017e8:	b2dc      	uxtb	r4, r3
 80017ea:	f001 fd79 	bl	80032e0 <tftGetHeight>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461d      	mov	r5, r3
 80017f2:	f001 fd69 	bl	80032c8 <tftGetWidth>
 80017f6:	4603      	mov	r3, r0
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	1aeb      	subs	r3, r5, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3314      	adds	r3, #20
 8001802:	b2da      	uxtb	r2, r3
 8001804:	883b      	ldrh	r3, [r7, #0]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	4622      	mov	r2, r4
 800180c:	210f      	movs	r1, #15
 800180e:	2001      	movs	r0, #1
 8001810:	f001 f9b4 	bl	8002b7c <tftDrawRect>
		tftDrawRect(0, 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 8001814:	f001 fd58 	bl	80032c8 <tftGetWidth>
 8001818:	4603      	mov	r3, r0
 800181a:	461c      	mov	r4, r3
 800181c:	f001 fd54 	bl	80032c8 <tftGetWidth>
 8001820:	4603      	mov	r3, r0
 8001822:	085b      	lsrs	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	1ae3      	subs	r3, r4, r3
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b2dc      	uxtb	r4, r3
 800182e:	f001 fd57 	bl	80032e0 <tftGetHeight>
 8001832:	4603      	mov	r3, r0
 8001834:	461d      	mov	r5, r3
 8001836:	f001 fd47 	bl	80032c8 <tftGetWidth>
 800183a:	4603      	mov	r3, r0
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	1aeb      	subs	r3, r5, r3
 8001842:	b2db      	uxtb	r3, r3
 8001844:	3315      	adds	r3, #21
 8001846:	b2da      	uxtb	r2, r3
 8001848:	883b      	ldrh	r3, [r7, #0]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4613      	mov	r3, r2
 800184e:	4622      	mov	r2, r4
 8001850:	210e      	movs	r1, #14
 8001852:	2000      	movs	r0, #0
 8001854:	f001 f992 	bl	8002b7c <tftDrawRect>
		break;
 8001858:	e0db      	b.n	8001a12 <visualisationMenuGridFocus+0x38a>
	case 1:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 - 1, colorFocus);
 800185a:	f001 fd35 	bl	80032c8 <tftGetWidth>
 800185e:	4603      	mov	r3, r0
 8001860:	085b      	lsrs	r3, r3, #1
 8001862:	b2dc      	uxtb	r4, r3
 8001864:	f001 fd30 	bl	80032c8 <tftGetWidth>
 8001868:	4603      	mov	r3, r0
 800186a:	3b02      	subs	r3, #2
 800186c:	b2dd      	uxtb	r5, r3
 800186e:	f001 fd37 	bl	80032e0 <tftGetHeight>
 8001872:	4603      	mov	r3, r0
 8001874:	461e      	mov	r6, r3
 8001876:	f001 fd27 	bl	80032c8 <tftGetWidth>
 800187a:	4603      	mov	r3, r0
 800187c:	085b      	lsrs	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	1af3      	subs	r3, r6, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3314      	adds	r3, #20
 8001886:	b2da      	uxtb	r2, r3
 8001888:	883b      	ldrh	r3, [r7, #0]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	462a      	mov	r2, r5
 8001890:	210f      	movs	r1, #15
 8001892:	4620      	mov	r0, r4
 8001894:	f001 f972 	bl	8002b7c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, 14, tftGetWidth() - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, colorFocus);
 8001898:	f001 fd16 	bl	80032c8 <tftGetWidth>
 800189c:	4603      	mov	r3, r0
 800189e:	085b      	lsrs	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b2dc      	uxtb	r4, r3
 80018a6:	f001 fd0f 	bl	80032c8 <tftGetWidth>
 80018aa:	4603      	mov	r3, r0
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b2dd      	uxtb	r5, r3
 80018b0:	f001 fd16 	bl	80032e0 <tftGetHeight>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461e      	mov	r6, r3
 80018b8:	f001 fd06 	bl	80032c8 <tftGetWidth>
 80018bc:	4603      	mov	r3, r0
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	1af3      	subs	r3, r6, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3315      	adds	r3, #21
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	883b      	ldrh	r3, [r7, #0]
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	462a      	mov	r2, r5
 80018d2:	210e      	movs	r1, #14
 80018d4:	4620      	mov	r0, r4
 80018d6:	f001 f951 	bl	8002b7c <tftDrawRect>
		break;
 80018da:	e09a      	b.n	8001a12 <visualisationMenuGridFocus+0x38a>
	case 2:
		tftDrawRect(tftGetWidth()/2 - 1 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 80018dc:	f001 fcf4 	bl	80032c8 <tftGetWidth>
 80018e0:	4603      	mov	r3, r0
 80018e2:	085b      	lsrs	r3, r3, #1
 80018e4:	b2dc      	uxtb	r4, r3
 80018e6:	f001 fcfb 	bl	80032e0 <tftGetHeight>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461d      	mov	r5, r3
 80018ee:	f001 fceb 	bl	80032c8 <tftGetWidth>
 80018f2:	4603      	mov	r3, r0
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	1aeb      	subs	r3, r5, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	3316      	adds	r3, #22
 80018fe:	b2dd      	uxtb	r5, r3
 8001900:	f001 fce2 	bl	80032c8 <tftGetWidth>
 8001904:	4603      	mov	r3, r0
 8001906:	3b02      	subs	r3, #2
 8001908:	b2de      	uxtb	r6, r3
 800190a:	f001 fce9 	bl	80032e0 <tftGetHeight>
 800190e:	4603      	mov	r3, r0
 8001910:	3b02      	subs	r3, #2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	883b      	ldrh	r3, [r7, #0]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4613      	mov	r3, r2
 800191a:	4632      	mov	r2, r6
 800191c:	4629      	mov	r1, r5
 800191e:	4620      	mov	r0, r4
 8001920:	f001 f92c 	bl	8002b7c <tftDrawRect>
		tftDrawRect(tftGetWidth()/2 - 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - 1, tftGetHeight() - 1, colorFocus);
 8001924:	f001 fcd0 	bl	80032c8 <tftGetWidth>
 8001928:	4603      	mov	r3, r0
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b2dc      	uxtb	r4, r3
 8001932:	f001 fcd5 	bl	80032e0 <tftGetHeight>
 8001936:	4603      	mov	r3, r0
 8001938:	461d      	mov	r5, r3
 800193a:	f001 fcc5 	bl	80032c8 <tftGetWidth>
 800193e:	4603      	mov	r3, r0
 8001940:	085b      	lsrs	r3, r3, #1
 8001942:	b2db      	uxtb	r3, r3
 8001944:	1aeb      	subs	r3, r5, r3
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3315      	adds	r3, #21
 800194a:	b2dd      	uxtb	r5, r3
 800194c:	f001 fcbc 	bl	80032c8 <tftGetWidth>
 8001950:	4603      	mov	r3, r0
 8001952:	3b01      	subs	r3, #1
 8001954:	b2de      	uxtb	r6, r3
 8001956:	f001 fcc3 	bl	80032e0 <tftGetHeight>
 800195a:	4603      	mov	r3, r0
 800195c:	3b01      	subs	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	883b      	ldrh	r3, [r7, #0]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	4632      	mov	r2, r6
 8001968:	4629      	mov	r1, r5
 800196a:	4620      	mov	r0, r4
 800196c:	f001 f906 	bl	8002b7c <tftDrawRect>
		break;
 8001970:	e04f      	b.n	8001a12 <visualisationMenuGridFocus+0x38a>
	case 3:
		tftDrawRect(0 + 1, tftGetHeight() - tftGetWidth()/2 + 7 + 14 + 1, tftGetWidth() - tftGetWidth()/2 - 1 - 1, tftGetHeight() - 1 - 1, colorFocus);
 8001972:	f001 fcb5 	bl	80032e0 <tftGetHeight>
 8001976:	4603      	mov	r3, r0
 8001978:	461c      	mov	r4, r3
 800197a:	f001 fca5 	bl	80032c8 <tftGetWidth>
 800197e:	4603      	mov	r3, r0
 8001980:	085b      	lsrs	r3, r3, #1
 8001982:	b2db      	uxtb	r3, r3
 8001984:	1ae3      	subs	r3, r4, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	3316      	adds	r3, #22
 800198a:	b2dc      	uxtb	r4, r3
 800198c:	f001 fc9c 	bl	80032c8 <tftGetWidth>
 8001990:	4603      	mov	r3, r0
 8001992:	461d      	mov	r5, r3
 8001994:	f001 fc98 	bl	80032c8 <tftGetWidth>
 8001998:	4603      	mov	r3, r0
 800199a:	085b      	lsrs	r3, r3, #1
 800199c:	b2db      	uxtb	r3, r3
 800199e:	1aeb      	subs	r3, r5, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3b02      	subs	r3, #2
 80019a4:	b2dd      	uxtb	r5, r3
 80019a6:	f001 fc9b 	bl	80032e0 <tftGetHeight>
 80019aa:	4603      	mov	r3, r0
 80019ac:	3b02      	subs	r3, #2
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	883b      	ldrh	r3, [r7, #0]
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	4613      	mov	r3, r2
 80019b6:	462a      	mov	r2, r5
 80019b8:	4621      	mov	r1, r4
 80019ba:	2001      	movs	r0, #1
 80019bc:	f001 f8de 	bl	8002b7c <tftDrawRect>
		tftDrawRect(0, tftGetHeight() - tftGetWidth()/2 + 7 + 14, tftGetWidth() - tftGetWidth()/2 - 1, tftGetHeight() - 1, colorFocus);
 80019c0:	f001 fc8e 	bl	80032e0 <tftGetHeight>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461c      	mov	r4, r3
 80019c8:	f001 fc7e 	bl	80032c8 <tftGetWidth>
 80019cc:	4603      	mov	r3, r0
 80019ce:	085b      	lsrs	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	1ae3      	subs	r3, r4, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	3315      	adds	r3, #21
 80019d8:	b2dc      	uxtb	r4, r3
 80019da:	f001 fc75 	bl	80032c8 <tftGetWidth>
 80019de:	4603      	mov	r3, r0
 80019e0:	461d      	mov	r5, r3
 80019e2:	f001 fc71 	bl	80032c8 <tftGetWidth>
 80019e6:	4603      	mov	r3, r0
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	1aeb      	subs	r3, r5, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b2dd      	uxtb	r5, r3
 80019f4:	f001 fc74 	bl	80032e0 <tftGetHeight>
 80019f8:	4603      	mov	r3, r0
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	883b      	ldrh	r3, [r7, #0]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	4613      	mov	r3, r2
 8001a04:	462a      	mov	r2, r5
 8001a06:	4621      	mov	r1, r4
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f001 f8b7 	bl	8002b7c <tftDrawRect>
		break;
 8001a0e:	e000      	b.n	8001a12 <visualisationMenuGridFocus+0x38a>
	default:
		break;
 8001a10:	bf00      	nop
	}
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a1a:	bf00      	nop

08001a1c <visualisationMenu>:
 * @parameters:	 SCREEN_PAGES_t page:	menu page to be loaded
 * 				 bool initedTOF:		flag if TOF is initialized
 * 				 bool inited3DG:		flag if 3DG is initialized
 */
void visualisationMenu(SCREEN_PAGES_t page, bool initedTOF, bool inited3DG, TOFSensor_t* TOFSENS)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	71bb      	strb	r3, [r7, #6]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	717b      	strb	r3, [r7, #5]
	// clear content
	visualisationClearBody();
 8001a30:	f000 f952 	bl	8001cd8 <visualisationClearBody>

	// load right screen
	switch(page)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	f200 8116 	bhi.w	8001c68 <visualisationMenu+0x24c>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <visualisationMenu+0x28>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a59 	.word	0x08001a59
 8001a48:	08001b05 	.word	0x08001b05
 8001a4c:	08001b29 	.word	0x08001b29
 8001a50:	08001b65 	.word	0x08001b65
 8001a54:	08001bf1 	.word	0x08001bf1
	{
	case SCREEN_MAIN:
		visualisationMenuGridFocus((uint16_t)getRotaryPosition() % 4, tft_WHITE, tft_YELLOW);
 8001a58:	f000 fd2a 	bl	80024b0 <getRotaryPosition>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe0b 	bl	8001688 <visualisationMenuGridFocus>

		// 1. Submenu
		tftPrint("Sensor-",13,27,0);
 8001a72:	2300      	movs	r3, #0
 8001a74:	221b      	movs	r2, #27
 8001a76:	210d      	movs	r1, #13
 8001a78:	487d      	ldr	r0, [pc, #500]	; (8001c70 <visualisationMenu+0x254>)
 8001a7a:	f001 fb21 	bl	80030c0 <tftPrint>
		tftPrint("init",23,39,0);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2227      	movs	r2, #39	; 0x27
 8001a82:	2117      	movs	r1, #23
 8001a84:	487b      	ldr	r0, [pc, #492]	; (8001c74 <visualisationMenu+0x258>)
 8001a86:	f001 fb1b 	bl	80030c0 <tftPrint>

		// 2. Submenu
		tftPrint("TOF", 28 + tftGetWidth()/2, 27, 0);
 8001a8a:	f001 fc1d 	bl	80032c8 <tftGetWidth>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	085b      	lsrs	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	f103 011c 	add.w	r1, r3, #28
 8001a98:	2300      	movs	r3, #0
 8001a9a:	221b      	movs	r2, #27
 8001a9c:	4876      	ldr	r0, [pc, #472]	; (8001c78 <visualisationMenu+0x25c>)
 8001a9e:	f001 fb0f 	bl	80030c0 <tftPrint>

		// show if sensor is not connected
		if(initedTOF == false)
 8001aa2:	79bb      	ldrb	r3, [r7, #6]
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <visualisationMenu+0xa8>
		{
			tftPrint("(discon.)", 3 + tftGetWidth()/2, 39, 0);
 8001aae:	f001 fc0b 	bl	80032c8 <tftGetWidth>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	085b      	lsrs	r3, r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	1cd9      	adds	r1, r3, #3
 8001aba:	2300      	movs	r3, #0
 8001abc:	2227      	movs	r2, #39	; 0x27
 8001abe:	486f      	ldr	r0, [pc, #444]	; (8001c7c <visualisationMenu+0x260>)
 8001ac0:	f001 fafe 	bl	80030c0 <tftPrint>
		}

		// 3. Submenu
		tftPrint("Mode", 28 + tftGetWidth()/2, 20 + tftGetHeight()/2, 0);
 8001ac4:	f001 fc00 	bl	80032c8 <tftGetWidth>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	085b      	lsrs	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f103 041c 	add.w	r4, r3, #28
 8001ad2:	f001 fc05 	bl	80032e0 <tftGetHeight>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f103 0214 	add.w	r2, r3, #20
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4866      	ldr	r0, [pc, #408]	; (8001c80 <visualisationMenu+0x264>)
 8001ae6:	f001 faeb 	bl	80030c0 <tftPrint>



		// 4. Submenu
		tftPrint("INFO", 24, 20 + tftGetHeight()/2, 0);
 8001aea:	f001 fbf9 	bl	80032e0 <tftGetHeight>
 8001aee:	4603      	mov	r3, r0
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f103 0214 	add.w	r2, r3, #20
 8001af8:	2300      	movs	r3, #0
 8001afa:	2118      	movs	r1, #24
 8001afc:	4861      	ldr	r0, [pc, #388]	; (8001c84 <visualisationMenu+0x268>)
 8001afe:	f001 fadf 	bl	80030c0 <tftPrint>
		break;
 8001b02:	e0b1      	b.n	8001c68 <visualisationMenu+0x24c>
	case SCREEN_PAGE1:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff fc8f 	bl	800142c <visualisationMenuGrid>
		tftPrint("Sensor-init: i2c",POS_SCREEN_LINE_1);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2211      	movs	r2, #17
 8001b12:	2104      	movs	r1, #4
 8001b14:	485c      	ldr	r0, [pc, #368]	; (8001c88 <visualisationMenu+0x26c>)
 8001b16:	f001 fad3 	bl	80030c0 <tftPrint>
		tftPrint("Address:",POS_SCREEN_LINE_2);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	221e      	movs	r2, #30
 8001b1e:	2104      	movs	r1, #4
 8001b20:	485a      	ldr	r0, [pc, #360]	; (8001c8c <visualisationMenu+0x270>)
 8001b22:	f001 facd 	bl	80030c0 <tftPrint>
		break;
 8001b26:	e09f      	b.n	8001c68 <visualisationMenu+0x24c>
	case SCREEN_PAGE2:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc7d 	bl	800142c <visualisationMenuGrid>
		tftPrint("Read distance with", POS_SCREEN_LINE_1);
 8001b32:	2300      	movs	r3, #0
 8001b34:	2211      	movs	r2, #17
 8001b36:	2104      	movs	r1, #4
 8001b38:	4855      	ldr	r0, [pc, #340]	; (8001c90 <visualisationMenu+0x274>)
 8001b3a:	f001 fac1 	bl	80030c0 <tftPrint>
		tftPrint("TOF Sensor:", POS_SCREEN_LINE_2);
 8001b3e:	2300      	movs	r3, #0
 8001b40:	221e      	movs	r2, #30
 8001b42:	2104      	movs	r1, #4
 8001b44:	4853      	ldr	r0, [pc, #332]	; (8001c94 <visualisationMenu+0x278>)
 8001b46:	f001 fabb 	bl	80030c0 <tftPrint>
		tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2232      	movs	r2, #50	; 0x32
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4851      	ldr	r0, [pc, #324]	; (8001c98 <visualisationMenu+0x27c>)
 8001b52:	f001 fab5 	bl	80030c0 <tftPrint>

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001b56:	2300      	movs	r3, #0
 8001b58:	226e      	movs	r2, #110	; 0x6e
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	484f      	ldr	r0, [pc, #316]	; (8001c9c <visualisationMenu+0x280>)
 8001b5e:	f001 faaf 	bl	80030c0 <tftPrint>
		break;
 8001b62:	e081      	b.n	8001c68 <visualisationMenu+0x24c>
	case SCREEN_PAGE3:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001b64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fc5f 	bl	800142c <visualisationMenuGrid>

		tftPrint("Current Mode", POS_SCREEN_LINE_3);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2228      	movs	r2, #40	; 0x28
 8001b72:	2104      	movs	r1, #4
 8001b74:	484a      	ldr	r0, [pc, #296]	; (8001ca0 <visualisationMenu+0x284>)
 8001b76:	f001 faa3 	bl	80030c0 <tftPrint>
		switch(TOFSENS->Ranging_Profiles_t) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	88db      	ldrh	r3, [r3, #6]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d827      	bhi.n	8001bd4 <visualisationMenu+0x1b8>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <visualisationMenu+0x170>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001bab 	.word	0x08001bab
 8001b94:	08001bb9 	.word	0x08001bb9
 8001b98:	08001bc7 	.word	0x08001bc7
		    case TOF_DEFAULT_MODE_D:
		        tftPrint("DEFAULT        ", POS_SCREEN_LINE_4);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	2232      	movs	r2, #50	; 0x32
 8001ba0:	2104      	movs	r1, #4
 8001ba2:	4840      	ldr	r0, [pc, #256]	; (8001ca4 <visualisationMenu+0x288>)
 8001ba4:	f001 fa8c 	bl	80030c0 <tftPrint>
		        break;
 8001ba8:	e01b      	b.n	8001be2 <visualisationMenu+0x1c6>

		    case TOF_HIGH_SPEED_MODE_S:
		        tftPrint("HIGH SPEED     ", POS_SCREEN_LINE_4);
 8001baa:	2300      	movs	r3, #0
 8001bac:	2232      	movs	r2, #50	; 0x32
 8001bae:	2104      	movs	r1, #4
 8001bb0:	483d      	ldr	r0, [pc, #244]	; (8001ca8 <visualisationMenu+0x28c>)
 8001bb2:	f001 fa85 	bl	80030c0 <tftPrint>
		        break;
 8001bb6:	e014      	b.n	8001be2 <visualisationMenu+0x1c6>

		    case TOF_HIGH_ACCURACY_MODE_A:
		        tftPrint("HIGH ACCURACY  ", POS_SCREEN_LINE_4);
 8001bb8:	2300      	movs	r3, #0
 8001bba:	2232      	movs	r2, #50	; 0x32
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	483b      	ldr	r0, [pc, #236]	; (8001cac <visualisationMenu+0x290>)
 8001bc0:	f001 fa7e 	bl	80030c0 <tftPrint>
		        break;
 8001bc4:	e00d      	b.n	8001be2 <visualisationMenu+0x1c6>

		    case TOF_LONG_RANGE_MODE_R:
		        tftPrint("LONG RANGE     ", POS_SCREEN_LINE_4);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2232      	movs	r2, #50	; 0x32
 8001bca:	2104      	movs	r1, #4
 8001bcc:	4838      	ldr	r0, [pc, #224]	; (8001cb0 <visualisationMenu+0x294>)
 8001bce:	f001 fa77 	bl	80030c0 <tftPrint>
		        break;
 8001bd2:	e006      	b.n	8001be2 <visualisationMenu+0x1c6>

		    default:
		        tftPrint("RANGINGERROR   ", POS_SCREEN_LINE_4);
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	2232      	movs	r2, #50	; 0x32
 8001bd8:	2104      	movs	r1, #4
 8001bda:	4836      	ldr	r0, [pc, #216]	; (8001cb4 <visualisationMenu+0x298>)
 8001bdc:	f001 fa70 	bl	80030c0 <tftPrint>
		        break;
 8001be0:	bf00      	nop
		}

		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001be2:	2300      	movs	r3, #0
 8001be4:	226e      	movs	r2, #110	; 0x6e
 8001be6:	2104      	movs	r1, #4
 8001be8:	482c      	ldr	r0, [pc, #176]	; (8001c9c <visualisationMenu+0x280>)
 8001bea:	f001 fa69 	bl	80030c0 <tftPrint>
		break;
 8001bee:	e03b      	b.n	8001c68 <visualisationMenu+0x24c>
	case SCREEN_PAGE4:
		visualisationMenuGrid(GRID1, tft_WHITE);
 8001bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fc19 	bl	800142c <visualisationMenuGrid>
		tftPrint("INFO:", POS_SCREEN_LINE_1);
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	2211      	movs	r2, #17
 8001bfe:	2104      	movs	r1, #4
 8001c00:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <visualisationMenu+0x29c>)
 8001c02:	f001 fa5d 	bl	80030c0 <tftPrint>
		tftPrint("NAVIGATION:", POS_SCREEN_LINE_2);
 8001c06:	2300      	movs	r3, #0
 8001c08:	221e      	movs	r2, #30
 8001c0a:	2104      	movs	r1, #4
 8001c0c:	482b      	ldr	r0, [pc, #172]	; (8001cbc <visualisationMenu+0x2a0>)
 8001c0e:	f001 fa57 	bl	80030c0 <tftPrint>
		tftPrint("in the manual!     ", POS_SCREEN_LINE_9);
 8001c12:	2300      	movs	r3, #0
 8001c14:	2264      	movs	r2, #100	; 0x64
 8001c16:	2104      	movs	r1, #4
 8001c18:	4829      	ldr	r0, [pc, #164]	; (8001cc0 <visualisationMenu+0x2a4>)
 8001c1a:	f001 fa51 	bl	80030c0 <tftPrint>
		tftPrint("Further information", POS_SCREEN_LINE_8);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	225a      	movs	r2, #90	; 0x5a
 8001c22:	2104      	movs	r1, #4
 8001c24:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <visualisationMenu+0x2a8>)
 8001c26:	f001 fa4b 	bl	80030c0 <tftPrint>
		tftPrint("       through menu", POS_SCREEN_LINE_6);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2246      	movs	r2, #70	; 0x46
 8001c2e:	2104      	movs	r1, #4
 8001c30:	4825      	ldr	r0, [pc, #148]	; (8001cc8 <visualisationMenu+0x2ac>)
 8001c32:	f001 fa45 	bl	80030c0 <tftPrint>
		tftPrint(" - rotate: navigate", POS_SCREEN_LINE_5);
 8001c36:	2300      	movs	r3, #0
 8001c38:	223c      	movs	r2, #60	; 0x3c
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4823      	ldr	r0, [pc, #140]	; (8001ccc <visualisationMenu+0x2b0>)
 8001c3e:	f001 fa3f 	bl	80030c0 <tftPrint>
		tftPrint("         - go back ", POS_SCREEN_LINE_4);
 8001c42:	2300      	movs	r3, #0
 8001c44:	2232      	movs	r2, #50	; 0x32
 8001c46:	2104      	movs	r1, #4
 8001c48:	4821      	ldr	r0, [pc, #132]	; (8001cd0 <visualisationMenu+0x2b4>)
 8001c4a:	f001 fa39 	bl	80030c0 <tftPrint>
		tftPrint(" - push: - enter   ", POS_SCREEN_LINE_3);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2228      	movs	r2, #40	; 0x28
 8001c52:	2104      	movs	r1, #4
 8001c54:	481f      	ldr	r0, [pc, #124]	; (8001cd4 <visualisationMenu+0x2b8>)
 8001c56:	f001 fa33 	bl	80030c0 <tftPrint>
		tftPrint("- PRESS TO GO BACK-", POS_SCREEN_LINE_10);
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	226e      	movs	r2, #110	; 0x6e
 8001c5e:	2104      	movs	r1, #4
 8001c60:	480e      	ldr	r0, [pc, #56]	; (8001c9c <visualisationMenu+0x280>)
 8001c62:	f001 fa2d 	bl	80030c0 <tftPrint>
		break;
 8001c66:	bf00      	nop
	}
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	0800aca4 	.word	0x0800aca4
 8001c74:	0800acac 	.word	0x0800acac
 8001c78:	0800acb4 	.word	0x0800acb4
 8001c7c:	0800acb8 	.word	0x0800acb8
 8001c80:	0800acc4 	.word	0x0800acc4
 8001c84:	0800accc 	.word	0x0800accc
 8001c88:	0800acd4 	.word	0x0800acd4
 8001c8c:	0800ace8 	.word	0x0800ace8
 8001c90:	0800acf4 	.word	0x0800acf4
 8001c94:	0800ad08 	.word	0x0800ad08
 8001c98:	0800ad14 	.word	0x0800ad14
 8001c9c:	0800ad24 	.word	0x0800ad24
 8001ca0:	0800ad38 	.word	0x0800ad38
 8001ca4:	0800ad48 	.word	0x0800ad48
 8001ca8:	0800ad58 	.word	0x0800ad58
 8001cac:	0800ad68 	.word	0x0800ad68
 8001cb0:	0800ad78 	.word	0x0800ad78
 8001cb4:	0800ad88 	.word	0x0800ad88
 8001cb8:	0800ad98 	.word	0x0800ad98
 8001cbc:	0800ada0 	.word	0x0800ada0
 8001cc0:	0800adac 	.word	0x0800adac
 8001cc4:	0800adc0 	.word	0x0800adc0
 8001cc8:	0800add4 	.word	0x0800add4
 8001ccc:	0800ade8 	.word	0x0800ade8
 8001cd0:	0800adfc 	.word	0x0800adfc
 8001cd4:	0800ae10 	.word	0x0800ae10

08001cd8 <visualisationClearBody>:
 * @function:	 visualisationClearBody
 *
 * @brief: 		 clear content field to black
 */
void visualisationClearBody(void)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af02      	add	r7, sp, #8
	tftFillRect(0, 14, tftGetWidth(), tftGetHeight() - 14, tft_BLACK);
 8001cde:	f001 faf3 	bl	80032c8 <tftGetWidth>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	b21c      	sxth	r4, r3
 8001ce6:	f001 fafb 	bl	80032e0 <tftGetHeight>
 8001cea:	4603      	mov	r3, r0
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	3b0e      	subs	r3, #14
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	9200      	str	r2, [sp, #0]
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	210e      	movs	r1, #14
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 fdf9 	bl	80028f4 <tftFillRect>
}
 8001d02:	bf00      	nop
 8001d04:	3704      	adds	r7, #4
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd90      	pop	{r4, r7, pc}
	...

08001d0c <visualisationShowError>:
 * @brief: 		 show error screen for not initialized sensor
 *
 * @parameters:	 SCREEN_PAGES_t page:	which sensor is not initialized
 */
void visualisationShowError(SCREEN_PAGES_t page)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	tftFillRect(14, 14, tftGetWidth() - 28, tftGetHeight() - 28, tft_YELLOW);
 8001d16:	f001 fad7 	bl	80032c8 <tftGetWidth>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b1c      	subs	r3, #28
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	b21c      	sxth	r4, r3
 8001d24:	f001 fadc 	bl	80032e0 <tftGetHeight>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b1c      	subs	r3, #28
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001d36:	9200      	str	r2, [sp, #0]
 8001d38:	4622      	mov	r2, r4
 8001d3a:	210e      	movs	r1, #14
 8001d3c:	200e      	movs	r0, #14
 8001d3e:	f000 fdd9 	bl	80028f4 <tftFillRect>
	tftDrawRect(14, 14, tftGetWidth() - 14, tftGetHeight() - 14, tft_RED);
 8001d42:	f001 fac1 	bl	80032c8 <tftGetWidth>
 8001d46:	4603      	mov	r3, r0
 8001d48:	3b0e      	subs	r3, #14
 8001d4a:	b2dc      	uxtb	r4, r3
 8001d4c:	f001 fac8 	bl	80032e0 <tftGetHeight>
 8001d50:	4603      	mov	r3, r0
 8001d52:	3b0e      	subs	r3, #14
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d5a:	9200      	str	r2, [sp, #0]
 8001d5c:	4622      	mov	r2, r4
 8001d5e:	210e      	movs	r1, #14
 8001d60:	200e      	movs	r0, #14
 8001d62:	f000 ff0b 	bl	8002b7c <tftDrawRect>

	tftPrint("ERROR", 60, 25, 0);
 8001d66:	2300      	movs	r3, #0
 8001d68:	2219      	movs	r2, #25
 8001d6a:	213c      	movs	r1, #60	; 0x3c
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <visualisationShowError+0xac>)
 8001d6e:	f001 f9a7 	bl	80030c0 <tftPrint>
	tftPrint("not connected", 27, 55, 0);
 8001d72:	2300      	movs	r3, #0
 8001d74:	2237      	movs	r2, #55	; 0x37
 8001d76:	211b      	movs	r1, #27
 8001d78:	4810      	ldr	r0, [pc, #64]	; (8001dbc <visualisationShowError+0xb0>)
 8001d7a:	f001 f9a1 	bl	80030c0 <tftPrint>

	// which sensor
	switch(page)
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d002      	beq.n	8001d8a <visualisationShowError+0x7e>
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d007      	beq.n	8001d98 <visualisationShowError+0x8c>
			break;
		case SCREEN_PAGE2:
			tftPrint("Ranging-Mode", 40, 40, 0);
			break;
		default:
			break;
 8001d88:	e00d      	b.n	8001da6 <visualisationShowError+0x9a>
			tftPrint("TOF-sensor", 40, 40, 0);
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2228      	movs	r2, #40	; 0x28
 8001d8e:	2128      	movs	r1, #40	; 0x28
 8001d90:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <visualisationShowError+0xb4>)
 8001d92:	f001 f995 	bl	80030c0 <tftPrint>
			break;
 8001d96:	e006      	b.n	8001da6 <visualisationShowError+0x9a>
			tftPrint("Ranging-Mode", 40, 40, 0);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2228      	movs	r2, #40	; 0x28
 8001d9c:	2128      	movs	r1, #40	; 0x28
 8001d9e:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <visualisationShowError+0xb8>)
 8001da0:	f001 f98e 	bl	80030c0 <tftPrint>
			break;
 8001da4:	bf00      	nop
	}

	// give time to read
	delayms(2500);
 8001da6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8001daa:	f000 fbf5 	bl	8002598 <delayms>
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	0800ae24 	.word	0x0800ae24
 8001dbc:	0800ae2c 	.word	0x0800ae2c
 8001dc0:	0800ae3c 	.word	0x0800ae3c
 8001dc4:	0800ae48 	.word	0x0800ae48

08001dc8 <visualisationTOF>:
 *
 * @parameters:	 uint16_t distance:		current distance
 * 				 uint16_t *olddistance: old distance
 */
void visualisationTOF(TOFSensor_t* TOFSENS)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b09c      	sub	sp, #112	; 0x70
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
    static uint16_t olddistance_var = TOF_VL53L0X_OUT_OF_RANGE; // Statische Variable zur Speicherung des alten Werts
    uint16_t* olddistance = &olddistance_var; // Pointer auf die statische Variable
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <visualisationTOF+0x70>)
 8001dd2:	66fb      	str	r3, [r7, #108]	; 0x6c

    // if value is not out of range
    if (TOFSENS->distanceFromTOF != TOF_VL53L0X_OUT_OF_RANGE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	891b      	ldrh	r3, [r3, #8]
 8001dd8:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d01c      	beq.n	8001e1a <visualisationTOF+0x52>
    {
        // if it was out of range, restore unit visualization
        if (*olddistance == TOF_VL53L0X_OUT_OF_RANGE)
 8001de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d105      	bne.n	8001df8 <visualisationTOF+0x30>
        {
            tftPrint("     mm      ", POS_SCREEN_LINE_4);
 8001dec:	2300      	movs	r3, #0
 8001dee:	2232      	movs	r2, #50	; 0x32
 8001df0:	2104      	movs	r1, #4
 8001df2:	4812      	ldr	r0, [pc, #72]	; (8001e3c <visualisationTOF+0x74>)
 8001df4:	f001 f964 	bl	80030c0 <tftPrint>
        }

        // visualize mm in 4 digits
        char buffer[100];
        sprintf(buffer, "%04d", TOFSENS->distanceFromTOF);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	891b      	ldrh	r3, [r3, #8]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	490f      	ldr	r1, [pc, #60]	; (8001e40 <visualisationTOF+0x78>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f005 fbb3 	bl	8007570 <siprintf>
        tftPrint(buffer, POS_SCREEN_LINE_4);
 8001e0a:	f107 0008 	add.w	r0, r7, #8
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2232      	movs	r2, #50	; 0x32
 8001e12:	2104      	movs	r1, #4
 8001e14:	f001 f954 	bl	80030c0 <tftPrint>
 8001e18:	e005      	b.n	8001e26 <visualisationTOF+0x5e>
    }
    // if value is out of range
    else
    {
        tftPrint("out of range", POS_SCREEN_LINE_4);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2232      	movs	r2, #50	; 0x32
 8001e1e:	2104      	movs	r1, #4
 8001e20:	4808      	ldr	r0, [pc, #32]	; (8001e44 <visualisationTOF+0x7c>)
 8001e22:	f001 f94d 	bl	80030c0 <tftPrint>
    }

    // store current distance to old value
    *olddistance = TOFSENS->distanceFromTOF;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	891a      	ldrh	r2, [r3, #8]
 8001e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e2c:	801a      	strh	r2, [r3, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	3770      	adds	r7, #112	; 0x70
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	0800ad14 	.word	0x0800ad14
 8001e40:	0800ae58 	.word	0x0800ae58
 8001e44:	0800ae60 	.word	0x0800ae60

08001e48 <visualisationRangingProfileTOF>:


void visualisationRangingProfileTOF(MODE_PAGES_t* MODE){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	switch(*MODE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d826      	bhi.n	8001ea8 <visualisationRangingProfileTOF+0x60>
 8001e5a:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <visualisationRangingProfileTOF+0x18>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	08001e7f 	.word	0x08001e7f
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	08001e9b 	.word	0x08001e9b
	{
		case DEFAULTMODE:
			tftPrint("DEFAULT MODE      ", POS_SCREEN_LINE_6);
 8001e70:	2300      	movs	r3, #0
 8001e72:	2246      	movs	r2, #70	; 0x46
 8001e74:	2104      	movs	r1, #4
 8001e76:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <visualisationRangingProfileTOF+0x6c>)
 8001e78:	f001 f922 	bl	80030c0 <tftPrint>
			break;
 8001e7c:	e015      	b.n	8001eaa <visualisationRangingProfileTOF+0x62>
		case HIGHSPEEDMODE:
			tftPrint("HIGH SPEED MODE   ", POS_SCREEN_LINE_6);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	2246      	movs	r2, #70	; 0x46
 8001e82:	2104      	movs	r1, #4
 8001e84:	480c      	ldr	r0, [pc, #48]	; (8001eb8 <visualisationRangingProfileTOF+0x70>)
 8001e86:	f001 f91b 	bl	80030c0 <tftPrint>
			break;
 8001e8a:	e00e      	b.n	8001eaa <visualisationRangingProfileTOF+0x62>
		case HIGHACCURACYMODE:
			tftPrint("HIGH ACCURACY MODE", POS_SCREEN_LINE_6);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2246      	movs	r2, #70	; 0x46
 8001e90:	2104      	movs	r1, #4
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <visualisationRangingProfileTOF+0x74>)
 8001e94:	f001 f914 	bl	80030c0 <tftPrint>
			break;
 8001e98:	e007      	b.n	8001eaa <visualisationRangingProfileTOF+0x62>
		case LONGRANGEMODE:
			tftPrint("LONG RANGE MODE   ", POS_SCREEN_LINE_6);
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2246      	movs	r2, #70	; 0x46
 8001e9e:	2104      	movs	r1, #4
 8001ea0:	4807      	ldr	r0, [pc, #28]	; (8001ec0 <visualisationRangingProfileTOF+0x78>)
 8001ea2:	f001 f90d 	bl	80030c0 <tftPrint>
			break;
 8001ea6:	e000      	b.n	8001eaa <visualisationRangingProfileTOF+0x62>
		default:
			break;
 8001ea8:	bf00      	nop
	}


}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	0800ae70 	.word	0x0800ae70
 8001eb8:	0800ae84 	.word	0x0800ae84
 8001ebc:	0800ae98 	.word	0x0800ae98
 8001ec0:	0800aeac 	.word	0x0800aeac

08001ec4 <visualisationSensorRecognized>:
 * @brief: 		 show recognition of sensor
 *
 * @parameters:	 SENSOR_t sensor:	which sensor is recognized
 */
void visualisationSensorRecognized(SENSOR_t sensor)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	switch(sensor)
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d852      	bhi.n	8001f7a <visualisationSensorRecognized+0xb6>
 8001ed4:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <visualisationSensorRecognized+0x18>)
 8001ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eda:	bf00      	nop
 8001edc:	08001ef1 	.word	0x08001ef1
 8001ee0:	08001f0b 	.word	0x08001f0b
 8001ee4:	08001f25 	.word	0x08001f25
 8001ee8:	08001f3f 	.word	0x08001f3f
 8001eec:	08001f59 	.word	0x08001f59
	{
	case VISUALISATION_BMA020:
		tftPrint("BMA020 recognized!", POS_SCREEN_LINE_2);
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	221e      	movs	r2, #30
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	4823      	ldr	r0, [pc, #140]	; (8001f84 <visualisationSensorRecognized+0xc0>)
 8001ef8:	f001 f8e2 	bl	80030c0 <tftPrint>
		tftPrint("Address: 0x38", POS_SCREEN_LINE_3);
 8001efc:	2300      	movs	r3, #0
 8001efe:	2228      	movs	r2, #40	; 0x28
 8001f00:	2104      	movs	r1, #4
 8001f02:	4821      	ldr	r0, [pc, #132]	; (8001f88 <visualisationSensorRecognized+0xc4>)
 8001f04:	f001 f8dc 	bl	80030c0 <tftPrint>
		break;
 8001f08:	e037      	b.n	8001f7a <visualisationSensorRecognized+0xb6>
	case VISUALISATION_MPU6050:
		tftPrint("MPU6050 recognized!", POS_SCREEN_LINE_2);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	221e      	movs	r2, #30
 8001f0e:	2104      	movs	r1, #4
 8001f10:	481e      	ldr	r0, [pc, #120]	; (8001f8c <visualisationSensorRecognized+0xc8>)
 8001f12:	f001 f8d5 	bl	80030c0 <tftPrint>
		tftPrint("Address: 0x68", POS_SCREEN_LINE_3);
 8001f16:	2300      	movs	r3, #0
 8001f18:	2228      	movs	r2, #40	; 0x28
 8001f1a:	2104      	movs	r1, #4
 8001f1c:	481c      	ldr	r0, [pc, #112]	; (8001f90 <visualisationSensorRecognized+0xcc>)
 8001f1e:	f001 f8cf 	bl	80030c0 <tftPrint>
		break;
 8001f22:	e02a      	b.n	8001f7a <visualisationSensorRecognized+0xb6>
	case VISUALISATION_LIS3DH:
		tftPrint("LIS3DH recognized!", POS_SCREEN_LINE_2);
 8001f24:	2300      	movs	r3, #0
 8001f26:	221e      	movs	r2, #30
 8001f28:	2104      	movs	r1, #4
 8001f2a:	481a      	ldr	r0, [pc, #104]	; (8001f94 <visualisationSensorRecognized+0xd0>)
 8001f2c:	f001 f8c8 	bl	80030c0 <tftPrint>
		tftPrint("Address: 0x18", POS_SCREEN_LINE_3);
 8001f30:	2300      	movs	r3, #0
 8001f32:	2228      	movs	r2, #40	; 0x28
 8001f34:	2104      	movs	r1, #4
 8001f36:	4818      	ldr	r0, [pc, #96]	; (8001f98 <visualisationSensorRecognized+0xd4>)
 8001f38:	f001 f8c2 	bl	80030c0 <tftPrint>
		break;
 8001f3c:	e01d      	b.n	8001f7a <visualisationSensorRecognized+0xb6>
	case VISUALISATION_VL53LOX:
		tftPrint("TOF recognized!", POS_SCREEN_LINE_2);
 8001f3e:	2300      	movs	r3, #0
 8001f40:	221e      	movs	r2, #30
 8001f42:	2104      	movs	r1, #4
 8001f44:	4815      	ldr	r0, [pc, #84]	; (8001f9c <visualisationSensorRecognized+0xd8>)
 8001f46:	f001 f8bb 	bl	80030c0 <tftPrint>
		tftPrint("Address: 0x29", POS_SCREEN_LINE_3);
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2228      	movs	r2, #40	; 0x28
 8001f4e:	2104      	movs	r1, #4
 8001f50:	4813      	ldr	r0, [pc, #76]	; (8001fa0 <visualisationSensorRecognized+0xdc>)
 8001f52:	f001 f8b5 	bl	80030c0 <tftPrint>
		break;
 8001f56:	e010      	b.n	8001f7a <visualisationSensorRecognized+0xb6>
	case VISUALISATION_UNKNOWN:
		tftPrint("Unknown sensor!", POS_SCREEN_LINE_3);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2228      	movs	r2, #40	; 0x28
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4811      	ldr	r0, [pc, #68]	; (8001fa4 <visualisationSensorRecognized+0xe0>)
 8001f60:	f001 f8ae 	bl	80030c0 <tftPrint>
		delayms(1000);
 8001f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f68:	f000 fb16 	bl	8002598 <delayms>
		tftPrint("               ", POS_SCREEN_LINE_3);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2228      	movs	r2, #40	; 0x28
 8001f70:	2104      	movs	r1, #4
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <visualisationSensorRecognized+0xe4>)
 8001f74:	f001 f8a4 	bl	80030c0 <tftPrint>
		break;
 8001f78:	bf00      	nop
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	0800aec0 	.word	0x0800aec0
 8001f88:	0800aed4 	.word	0x0800aed4
 8001f8c:	0800aee4 	.word	0x0800aee4
 8001f90:	0800aef8 	.word	0x0800aef8
 8001f94:	0800af08 	.word	0x0800af08
 8001f98:	0800af1c 	.word	0x0800af1c
 8001f9c:	0800af2c 	.word	0x0800af2c
 8001fa0:	0800af3c 	.word	0x0800af3c
 8001fa4:	0800af4c 	.word	0x0800af4c
 8001fa8:	0800af5c 	.word	0x0800af5c

08001fac <visualisationI2CScanDone>:
 * @brief: 		 show i2c scan through all addresses is done
 *
 * @parameters:	 uint8_t i2cInitAttempts:	attempts left
 */
void visualisationI2CScanDone(uint8_t i2cInitAttempts)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	71fb      	strb	r3, [r7, #7]
	tftPrint("No Sensor found   ", POS_SCREEN_LINE_2);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	221e      	movs	r2, #30
 8001fba:	2104      	movs	r1, #4
 8001fbc:	4813      	ldr	r0, [pc, #76]	; (800200c <visualisationI2CScanDone+0x60>)
 8001fbe:	f001 f87f 	bl	80030c0 <tftPrint>

	// if there are attempts left, trying again, otherwise leave
	if(i2cInitAttempts > 1)
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d906      	bls.n	8001fd6 <visualisationI2CScanDone+0x2a>
	{
		tftPrint("trying again!     ", POS_SCREEN_LINE_3);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	2228      	movs	r2, #40	; 0x28
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4810      	ldr	r0, [pc, #64]	; (8002010 <visualisationI2CScanDone+0x64>)
 8001fd0:	f001 f876 	bl	80030c0 <tftPrint>
 8001fd4:	e005      	b.n	8001fe2 <visualisationI2CScanDone+0x36>
	}
	else
	{
		tftPrint("max attempts!     ", POS_SCREEN_LINE_3);
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2228      	movs	r2, #40	; 0x28
 8001fda:	2104      	movs	r1, #4
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <visualisationI2CScanDone+0x68>)
 8001fde:	f001 f86f 	bl	80030c0 <tftPrint>
	}

	// give chance to read
	delayms(3000);
 8001fe2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001fe6:	f000 fad7 	bl	8002598 <delayms>


	// restore view
	tftPrint("Address:        ",POS_SCREEN_LINE_2);
 8001fea:	2300      	movs	r3, #0
 8001fec:	221e      	movs	r2, #30
 8001fee:	2104      	movs	r1, #4
 8001ff0:	4809      	ldr	r0, [pc, #36]	; (8002018 <visualisationI2CScanDone+0x6c>)
 8001ff2:	f001 f865 	bl	80030c0 <tftPrint>
	tftPrint("                ",POS_SCREEN_LINE_3);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2228      	movs	r2, #40	; 0x28
 8001ffa:	2104      	movs	r1, #4
 8001ffc:	4807      	ldr	r0, [pc, #28]	; (800201c <visualisationI2CScanDone+0x70>)
 8001ffe:	f001 f85f 	bl	80030c0 <tftPrint>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	0800af6c 	.word	0x0800af6c
 8002010:	0800af80 	.word	0x0800af80
 8002014:	0800af94 	.word	0x0800af94
 8002018:	0800afa8 	.word	0x0800afa8
 800201c:	0800afbc 	.word	0x0800afbc

08002020 <visualisationSensorInit>:
 * @brief: 		 visualize sensor init step: running or done
 *
 * @parameters:	 VIS_SENSOR_INIT_t step:	running or done
 */
void visualisationSensorInit(VIS_SENSOR_INIT_t step)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
	switch(step)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <visualisationSensorInit+0x16>
 8002030:	2b01      	cmp	r3, #1
 8002032:	d007      	beq.n	8002044 <visualisationSensorInit+0x24>
		break;
	case SENSOR_INIT_DONE:
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
		break;
	}
}
 8002034:	e00d      	b.n	8002052 <visualisationSensorInit+0x32>
		tftPrint("Sensor Init running", POS_SCREEN_LINE_3);
 8002036:	2300      	movs	r3, #0
 8002038:	2228      	movs	r2, #40	; 0x28
 800203a:	2104      	movs	r1, #4
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <visualisationSensorInit+0x3c>)
 800203e:	f001 f83f 	bl	80030c0 <tftPrint>
		break;
 8002042:	e006      	b.n	8002052 <visualisationSensorInit+0x32>
		tftPrint("Sensor Init done.  ", POS_SCREEN_LINE_3);
 8002044:	2300      	movs	r3, #0
 8002046:	2228      	movs	r2, #40	; 0x28
 8002048:	2104      	movs	r1, #4
 800204a:	4805      	ldr	r0, [pc, #20]	; (8002060 <visualisationSensorInit+0x40>)
 800204c:	f001 f838 	bl	80030c0 <tftPrint>
		break;
 8002050:	bf00      	nop
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	0800afd0 	.word	0x0800afd0
 8002060:	0800afe4 	.word	0x0800afe4

08002064 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002066:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002068:	f004 fd5a 	bl	8006b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800206e:	490d      	ldr	r1, [pc, #52]	; (80020a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002070:	4a0d      	ldr	r2, [pc, #52]	; (80020a8 <LoopForever+0xe>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002074:	e002      	b.n	800207c <LoopCopyDataInit>

08002076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207a:	3304      	adds	r3, #4

0800207c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800207c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800207e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002080:	d3f9      	bcc.n	8002076 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002084:	4c0a      	ldr	r4, [pc, #40]	; (80020b0 <LoopForever+0x16>)
  movs r3, #0
 8002086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002088:	e001      	b.n	800208e <LoopFillZerobss>

0800208a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800208c:	3204      	adds	r2, #4

0800208e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800208e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002090:	d3fb      	bcc.n	800208a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002092:	f004 fdd7 	bl	8006c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002096:	f7fe ff11 	bl	8000ebc <main>

0800209a <LoopForever>:

LoopForever:
  b LoopForever
 800209a:	e7fe      	b.n	800209a <LoopForever>
  ldr   r0, =_estack
 800209c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80020a8:	0800bae8 	.word	0x0800bae8
  ldr r2, =_sbss
 80020ac:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80020b0:	2000026c 	.word	0x2000026c

080020b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020b4:	e7fe      	b.n	80020b4 <ADC_IRQHandler>
	...

080020b8 <i2cActivate>:
}



void i2cActivate()
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
	I2C_TypeDef   *i2c  = I2C1;
 80020be:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <i2cActivate+0x70>)
 80020c0:	607b      	str	r3, [r7, #4]
#ifdef BALA2024
	I2C_TypeDef   *i2c2  = I2C2;
#endif /* BALA2024 */
	GPIO_TypeDef  *portB = GPIOB;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <i2cActivate+0x74>)
 80020c4:	603b      	str	r3, [r7, #0]
    // GPIOB-Bustakt aktivieren wegen der Verwendung von PB8/PB9 (I2C).
    i2cSelectI2C(i2c);                           // I2C1: Bustakt aktivieren
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f003 fe00 	bl	8005ccc <i2cSelectI2C>
    //i2cDisableDevice(i2c);
    gpioInitPort(portB);
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f003 fac1 	bl	8005654 <gpioInitPort>
    gpioSelectPinMode(portB, PIN8, ALTFUNC);
 80020d2:	2202      	movs	r2, #2
 80020d4:	2108      	movs	r1, #8
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	f003 fb82 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN8, AF4);         // PB8 : I2C1 SCL
 80020dc:	2204      	movs	r2, #4
 80020de:	2108      	movs	r1, #8
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f003 fc4a 	bl	800597a <gpioSelectAltFunc>
    gpioSelectPinMode(portB, PIN9, ALTFUNC);
 80020e6:	2202      	movs	r2, #2
 80020e8:	2109      	movs	r1, #9
 80020ea:	6838      	ldr	r0, [r7, #0]
 80020ec:	f003 fb78 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectAltFunc(portB, PIN9, AF4);         // PB9 : I2C1 SDA
 80020f0:	2204      	movs	r2, #4
 80020f2:	2109      	movs	r1, #9
 80020f4:	6838      	ldr	r0, [r7, #0]
 80020f6:	f003 fc40 	bl	800597a <gpioSelectAltFunc>

    /**
     * Verwenden Sie auf keinen Fall die MCU-internen Pull-up-Widerstaende!
     * Widerstandswerte: jeweils 4k7 fuer SDA und SCL!
     */
    gpioSetOutputType(portB, PIN8, OPENDRAIN);   // Immer externe Pull-up-
 80020fa:	2201      	movs	r2, #1
 80020fc:	2108      	movs	r1, #8
 80020fe:	6838      	ldr	r0, [r7, #0]
 8002100:	f003 fca4 	bl	8005a4c <gpioSetOutputType>
    gpioSetOutputType(portB, PIN9, OPENDRAIN);   // Widerstaende verwenden!!!
 8002104:	2201      	movs	r2, #1
 8002106:	2109      	movs	r1, #9
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f003 fc9f 	bl	8005a4c <gpioSetOutputType>
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
 800210e:	2302      	movs	r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	2101      	movs	r1, #1
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f003 fe91 	bl	8005e3c <i2cInitI2C>
    i2cEnableDevice(i2c);                        // MCAL I2C1 activ
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f004 f82b 	bl	8006176 <i2cEnableDevice>
    gpioSetOutputType(portB, PIN3, OPENDRAIN);   // Widerstaende verwenden!!!
    // Initialisierung des I2C-Controllers
    i2cInitI2C(i2c2, IC2_DUTY_CYCLE_16_9, 15, I2C_CLOCK_200);
    i2cEnableDevice(i2c2);                        // MCAL I2C2 activ
#endif /* BALA2024 */
}
 8002120:	bf00      	nop
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40005400 	.word	0x40005400
 800212c:	40020400 	.word	0x40020400

08002130 <ledActivate>:




void ledActivate(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
    gpioSelectPort(LED_GPIO);
 8002134:	481e      	ldr	r0, [pc, #120]	; (80021b0 <ledActivate+0x80>)
 8002136:	f003 faef 	bl	8005718 <gpioSelectPort>
    gpioSelectPinMode(LED_GPIO, LED_red, OUTPUT);
 800213a:	2201      	movs	r2, #1
 800213c:	2103      	movs	r1, #3
 800213e:	481c      	ldr	r0, [pc, #112]	; (80021b0 <ledActivate+0x80>)
 8002140:	f003 fb4e 	bl	80057e0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_red	, PUSHPULL);
 8002144:	2200      	movs	r2, #0
 8002146:	2103      	movs	r1, #3
 8002148:	4819      	ldr	r0, [pc, #100]	; (80021b0 <ledActivate+0x80>)
 800214a:	f003 fc7f 	bl	8005a4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_red, PULLUP);
 800214e:	2201      	movs	r2, #1
 8002150:	2103      	movs	r1, #3
 8002152:	4817      	ldr	r0, [pc, #92]	; (80021b0 <ledActivate+0x80>)
 8002154:	f003 fcc3 	bl	8005ade <gpioSelectPushPullMode>
    LED_red_off;
 8002158:	2103      	movs	r1, #3
 800215a:	4815      	ldr	r0, [pc, #84]	; (80021b0 <ledActivate+0x80>)
 800215c:	f003 fb8b 	bl	8005876 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_green, OUTPUT);
 8002160:	2201      	movs	r2, #1
 8002162:	2104      	movs	r1, #4
 8002164:	4812      	ldr	r0, [pc, #72]	; (80021b0 <ledActivate+0x80>)
 8002166:	f003 fb3b 	bl	80057e0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_green, PUSHPULL);
 800216a:	2200      	movs	r2, #0
 800216c:	2104      	movs	r1, #4
 800216e:	4810      	ldr	r0, [pc, #64]	; (80021b0 <ledActivate+0x80>)
 8002170:	f003 fc6c 	bl	8005a4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_green, PULLUP);
 8002174:	2201      	movs	r2, #1
 8002176:	2104      	movs	r1, #4
 8002178:	480d      	ldr	r0, [pc, #52]	; (80021b0 <ledActivate+0x80>)
 800217a:	f003 fcb0 	bl	8005ade <gpioSelectPushPullMode>
    LED_green_off;
 800217e:	2104      	movs	r1, #4
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <ledActivate+0x80>)
 8002182:	f003 fb78 	bl	8005876 <gpioSetPin>

    gpioSelectPinMode(LED_GPIO, LED_blue, OUTPUT);
 8002186:	2201      	movs	r2, #1
 8002188:	210a      	movs	r1, #10
 800218a:	4809      	ldr	r0, [pc, #36]	; (80021b0 <ledActivate+0x80>)
 800218c:	f003 fb28 	bl	80057e0 <gpioSelectPinMode>
    gpioSetOutputType(LED_GPIO, LED_blue, PUSHPULL);
 8002190:	2200      	movs	r2, #0
 8002192:	210a      	movs	r1, #10
 8002194:	4806      	ldr	r0, [pc, #24]	; (80021b0 <ledActivate+0x80>)
 8002196:	f003 fc59 	bl	8005a4c <gpioSetOutputType>
    gpioSelectPushPullMode(LED_GPIO, LED_blue, PULLUP);
 800219a:	2201      	movs	r2, #1
 800219c:	210a      	movs	r1, #10
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <ledActivate+0x80>)
 80021a0:	f003 fc9d 	bl	8005ade <gpioSelectPushPullMode>
    LED_blue_off;
 80021a4:	210a      	movs	r1, #10
 80021a6:	4802      	ldr	r0, [pc, #8]	; (80021b0 <ledActivate+0x80>)
 80021a8:	f003 fb65 	bl	8005876 <gpioSetPin>
}
 80021ac:	bf00      	nop
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40020400 	.word	0x40020400

080021b4 <convDecByteToHex>:
/*
 * Darstellung eines byte Value als hexadezimalen String mit zwei ascii Symbolen.
 * return: pointer auf den String hex[2]
 */
uint8_t *convDecByteToHex(uint8_t byte)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
    static  uint8_t hex[2] = { 0 };

    uint8_t temp;

    temp = byte % 16;
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d803      	bhi.n	80021d4 <convDecByteToHex+0x20>
    {
        temp += '0';
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	3330      	adds	r3, #48	; 0x30
 80021d0:	73fb      	strb	r3, [r7, #15]
 80021d2:	e002      	b.n	80021da <convDecByteToHex+0x26>
    }
    else
    {
        temp += '7';
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	3337      	adds	r3, #55	; 0x37
 80021d8:	73fb      	strb	r3, [r7, #15]
    }
    hex[1] = temp;
 80021da:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <convDecByteToHex+0x5c>)
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	7053      	strb	r3, [r2, #1]

    temp = byte / 16;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	73fb      	strb	r3, [r7, #15]
    if (temp < 10)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d803      	bhi.n	80021f4 <convDecByteToHex+0x40>
    {
        temp += '0';
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
 80021ee:	3330      	adds	r3, #48	; 0x30
 80021f0:	73fb      	strb	r3, [r7, #15]
 80021f2:	e002      	b.n	80021fa <convDecByteToHex+0x46>
    }
    else
    {
        temp += '7';
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	3337      	adds	r3, #55	; 0x37
 80021f8:	73fb      	strb	r3, [r7, #15]
    }
    hex[0] = temp;
 80021fa:	4a05      	ldr	r2, [pc, #20]	; (8002210 <convDecByteToHex+0x5c>)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	7013      	strb	r3, [r2, #0]

    return hex;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <convDecByteToHex+0x5c>)
}
 8002202:	4618      	mov	r0, r3
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000228 	.word	0x20000228

08002214 <I2C_SCAN>:
 *			and display on the ST7735 Display
 *
 *
 */
uint8_t I2C_SCAN(I2C_TypeDef *i2c, uint8_t scanAddr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	70fb      	strb	r3, [r7, #3]
	uint8_t 	*outString2 = (uint8_t *) "Addr at: \0";
 8002220:	4b30      	ldr	r3, [pc, #192]	; (80022e4 <I2C_SCAN+0xd0>)
 8002222:	613b      	str	r3, [r7, #16]
	uint8_t     port, *result;
#define yPosBase 18
	uint8_t foundAddr = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]
	static int xPos[2] = {0,100};
	static int yPos[2] = {yPosBase, yPosBase};

	if (i2c == I2C1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a2f      	ldr	r2, [pc, #188]	; (80022e8 <I2C_SCAN+0xd4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d102      	bne.n	8002236 <I2C_SCAN+0x22>
    {
	   port = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
 8002234:	e001      	b.n	800223a <I2C_SCAN+0x26>
    }
    else
    {
	   port = 1;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }
    if (scanAddr == 0)
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <I2C_SCAN+0x38>
    {
    yPos[0] = yPosBase;
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <I2C_SCAN+0xd8>)
 8002242:	2212      	movs	r2, #18
 8002244:	601a      	str	r2, [r3, #0]
    yPos[1] = yPosBase;
 8002246:	4b29      	ldr	r3, [pc, #164]	; (80022ec <I2C_SCAN+0xd8>)
 8002248:	2212      	movs	r2, #18
 800224a:	605a      	str	r2, [r3, #4]
    }

	foundAddr = i2cFindSlaveAddr(i2c, scanAddr);
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	4619      	mov	r1, r3
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f003 ffa1 	bl	8006198 <i2cFindSlaveAddr>
 8002256:	4603      	mov	r3, r0
 8002258:	73fb      	strb	r3, [r7, #15]
	if (yPos[port] == 0)
 800225a:	7dfb      	ldrb	r3, [r7, #23]
 800225c:	4a23      	ldr	r2, [pc, #140]	; (80022ec <I2C_SCAN+0xd8>)
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d110      	bne.n	8002288 <I2C_SCAN+0x74>
	{
		tftPrint((char *)outString2,xPos[port],yPos[port],0);
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	4a21      	ldr	r2, [pc, #132]	; (80022f0 <I2C_SCAN+0xdc>)
 800226a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <I2C_SCAN+0xd8>)
 8002272:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002276:	2300      	movs	r3, #0
 8002278:	6938      	ldr	r0, [r7, #16]
 800227a:	f000 ff21 	bl	80030c0 <tftPrint>
		yPos[port] = 66;
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <I2C_SCAN+0xd8>)
 8002282:	2142      	movs	r1, #66	; 0x42
 8002284:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	result = convDecByteToHex(scanAddr);
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff92 	bl	80021b4 <convDecByteToHex>
 8002290:	60b8      	str	r0, [r7, #8]
	if (foundAddr != 0)
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d01f      	beq.n	80022d8 <I2C_SCAN+0xc4>
	{
		//outString = outString2;
		tftPrint((char *)result,xPos[port],yPos[port],0);
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <I2C_SCAN+0xdc>)
 800229c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	4a12      	ldr	r2, [pc, #72]	; (80022ec <I2C_SCAN+0xd8>)
 80022a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022a8:	2300      	movs	r3, #0
 80022aa:	68b8      	ldr	r0, [r7, #8]
 80022ac:	f000 ff08 	bl	80030c0 <tftPrint>
		yPos[port] = (int) 14 + yPos[port];
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <I2C_SCAN+0xd8>)
 80022b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	320e      	adds	r2, #14
 80022bc:	490b      	ldr	r1, [pc, #44]	; (80022ec <I2C_SCAN+0xd8>)
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (yPos[port] > 100)
 80022c2:	7dfb      	ldrb	r3, [r7, #23]
 80022c4:	4a09      	ldr	r2, [pc, #36]	; (80022ec <I2C_SCAN+0xd8>)
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	dd04      	ble.n	80022d8 <I2C_SCAN+0xc4>
		{
			yPos[port] = yPosBase;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	4a06      	ldr	r2, [pc, #24]	; (80022ec <I2C_SCAN+0xd8>)
 80022d2:	2112      	movs	r1, #18
 80022d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else
	{
	//	tftPrint((char *)result,xPos,14,0);
	}
	return foundAddr;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	0800aff8 	.word	0x0800aff8
 80022e8:	40005400 	.word	0x40005400
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	20000014 	.word	0x20000014

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <initRotaryPushButton>:
 *               and sets up EXTI and NVIC for interrupt handling.
 *               It enables interrupts before returning.
 *               this function must be called to be able to use the rotary push button module.
 */
void initRotaryPushButton()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8002334:	482b      	ldr	r0, [pc, #172]	; (80023e4 <initRotaryPushButton+0xb4>)
 8002336:	f003 f98d 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOB);
 800233a:	482b      	ldr	r0, [pc, #172]	; (80023e8 <initRotaryPushButton+0xb8>)
 800233c:	f003 f98a 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOC);
 8002340:	482a      	ldr	r0, [pc, #168]	; (80023ec <initRotaryPushButton+0xbc>)
 8002342:	f003 f987 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOD);
 8002346:	482a      	ldr	r0, [pc, #168]	; (80023f0 <initRotaryPushButton+0xc0>)
 8002348:	f003 f984 	bl	8005654 <gpioInitPort>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop

	/* Disable interrupts */
	__disable_irq();

	/* Enable clock for System Configuration (SYSCFG) */
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <initRotaryPushButton+0xc4>)
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <initRotaryPushButton+0xc4>)
 8002356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235a:	6453      	str	r3, [r2, #68]	; 0x44

	/* Rotary pin configuration: ROT A */
	gpioSelectPinMode(ROTARY_A_ADR, INPUT);
 800235c:	2200      	movs	r2, #0
 800235e:	2101      	movs	r1, #1
 8002360:	4822      	ldr	r0, [pc, #136]	; (80023ec <initRotaryPushButton+0xbc>)
 8002362:	f003 fa3d 	bl	80057e0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_A_ADR, PULLUP);
 8002366:	2201      	movs	r2, #1
 8002368:	2101      	movs	r1, #1
 800236a:	4820      	ldr	r0, [pc, #128]	; (80023ec <initRotaryPushButton+0xbc>)
 800236c:	f003 fbb7 	bl	8005ade <gpioSelectPushPullMode>

	/* Rotary pin configuration: ROT B */
	gpioSelectPinMode(ROTARY_B_ADR, INPUT);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	481d      	ldr	r0, [pc, #116]	; (80023ec <initRotaryPushButton+0xbc>)
 8002376:	f003 fa33 	bl	80057e0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_B_ADR, PULLUP);
 800237a:	2201      	movs	r2, #1
 800237c:	2100      	movs	r1, #0
 800237e:	481b      	ldr	r0, [pc, #108]	; (80023ec <initRotaryPushButton+0xbc>)
 8002380:	f003 fbad 	bl	8005ade <gpioSelectPushPullMode>

	/* Push-button pin configuration */
	gpioSelectPinMode(ROTARY_SW_ADR, INPUT);
 8002384:	2200      	movs	r2, #0
 8002386:	210a      	movs	r1, #10
 8002388:	4816      	ldr	r0, [pc, #88]	; (80023e4 <initRotaryPushButton+0xb4>)
 800238a:	f003 fa29 	bl	80057e0 <gpioSelectPinMode>
	gpioSelectPushPullMode(ROTARY_SW_ADR, PULLUP);
 800238e:	2201      	movs	r2, #1
 8002390:	210a      	movs	r1, #10
 8002392:	4814      	ldr	r0, [pc, #80]	; (80023e4 <initRotaryPushButton+0xb4>)
 8002394:	f003 fba3 	bl	8005ade <gpioSelectPushPullMode>

	/* Configure EXTI (external interrupt) */
	extiInit();
 8002398:	f002 ff06 	bl	80051a8 <extiInit>
	extiConfigIrq(ROTARY_A_ADR);	//EXTI on ROT A
 800239c:	2101      	movs	r1, #1
 800239e:	4813      	ldr	r0, [pc, #76]	; (80023ec <initRotaryPushButton+0xbc>)
 80023a0:	f002 ff1e 	bl	80051e0 <extiConfigIrq>
	extiConfigIrq(ROTARY_SW_ADR);	//EXTI on PUSH BUTTON
 80023a4:	210a      	movs	r1, #10
 80023a6:	480f      	ldr	r0, [pc, #60]	; (80023e4 <initRotaryPushButton+0xb4>)
 80023a8:	f002 ff1a 	bl	80051e0 <extiConfigIrq>
	extiEnableIrq(ROTARY_A_IRQ);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f002 ffcb 	bl	8005348 <extiEnableIrq>
	extiEnableIrq(ROTARY_SW_IRQ);
 80023b2:	200a      	movs	r0, #10
 80023b4:	f002 ffc8 	bl	8005348 <extiEnableIrq>
	extiSetTriggerEdge(ROTARY_A_IRQ, FALLING_EDGE);
 80023b8:	2101      	movs	r1, #1
 80023ba:	2001      	movs	r0, #1
 80023bc:	f002 ffe6 	bl	800538c <extiSetTriggerEdge>
	extiSetTriggerEdge(ROTARY_SW_IRQ, RISING_EDGE);
 80023c0:	2100      	movs	r1, #0
 80023c2:	200a      	movs	r0, #10
 80023c4:	f002 ffe2 	bl	800538c <extiSetTriggerEdge>

	/* Enable EXTI and NVIC interrupts */
	NVIC_EnableIRQ(ROTARY_A_IRQn);
 80023c8:	2007      	movs	r0, #7
 80023ca:	f7ff ff93 	bl	80022f4 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(ROTARY_SW_IRQn);
 80023ce:	2028      	movs	r0, #40	; 0x28
 80023d0:	f7ff ff90 	bl	80022f4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80023d4:	b662      	cpsie	i
}
 80023d6:	bf00      	nop

	/* Enable all interrupts */
	__enable_irq();

	initRotaryPushButtonDone = true;
 80023d8:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <initRotaryPushButton+0xc8>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	20000231 	.word	0x20000231

080023fc <initRotaryPushButtonLED>:
 *
 * @brief: 		 Initializes the LEDs of the Rotary Push Button.
 *               After initializing the LEDs of the Rotary Push Button can be used.
 */
void initRotaryPushButtonLED(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
	/* Initialize GPIO ports for Rotary Push Button (usage of MCAL-Function) */
	gpioInitPort(GPIOA);
 8002400:	4815      	ldr	r0, [pc, #84]	; (8002458 <initRotaryPushButtonLED+0x5c>)
 8002402:	f003 f927 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOB);
 8002406:	4815      	ldr	r0, [pc, #84]	; (800245c <initRotaryPushButtonLED+0x60>)
 8002408:	f003 f924 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOC);
 800240c:	4814      	ldr	r0, [pc, #80]	; (8002460 <initRotaryPushButtonLED+0x64>)
 800240e:	f003 f921 	bl	8005654 <gpioInitPort>
	gpioInitPort(GPIOD);
 8002412:	4814      	ldr	r0, [pc, #80]	; (8002464 <initRotaryPushButtonLED+0x68>)
 8002414:	f003 f91e 	bl	8005654 <gpioInitPort>

	/* RED LED pin configuration */
	gpioSelectPinMode(LED_RED_ADR, OUTPUT);
 8002418:	2201      	movs	r2, #1
 800241a:	2103      	movs	r1, #3
 800241c:	480f      	ldr	r0, [pc, #60]	; (800245c <initRotaryPushButtonLED+0x60>)
 800241e:	f003 f9df 	bl	80057e0 <gpioSelectPinMode>

	/* GREEN LED pin configuration */
	gpioSelectPinMode(LED_GREEN_ADR, OUTPUT);
 8002422:	2201      	movs	r2, #1
 8002424:	2104      	movs	r1, #4
 8002426:	480d      	ldr	r0, [pc, #52]	; (800245c <initRotaryPushButtonLED+0x60>)
 8002428:	f003 f9da 	bl	80057e0 <gpioSelectPinMode>

	/* BLUE LED pin configuration */
	gpioSelectPinMode(LED_BLUE_ADR, OUTPUT);
 800242c:	2201      	movs	r2, #1
 800242e:	210a      	movs	r1, #10
 8002430:	480a      	ldr	r0, [pc, #40]	; (800245c <initRotaryPushButtonLED+0x60>)
 8002432:	f003 f9d5 	bl	80057e0 <gpioSelectPinMode>

	/* Turn off all LEDs initially */
	gpioSetPin(LED_RED_ADR);
 8002436:	2103      	movs	r1, #3
 8002438:	4808      	ldr	r0, [pc, #32]	; (800245c <initRotaryPushButtonLED+0x60>)
 800243a:	f003 fa1c 	bl	8005876 <gpioSetPin>
	gpioSetPin(LED_GREEN_ADR);
 800243e:	2104      	movs	r1, #4
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <initRotaryPushButtonLED+0x60>)
 8002442:	f003 fa18 	bl	8005876 <gpioSetPin>
	gpioSetPin(LED_BLUE_ADR);
 8002446:	210a      	movs	r1, #10
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <initRotaryPushButtonLED+0x60>)
 800244a:	f003 fa14 	bl	8005876 <gpioSetPin>

	initRotaryPushButtonLEDDone = true;
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <initRotaryPushButtonLED+0x6c>)
 8002450:	2201      	movs	r2, #1
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	20000232 	.word	0x20000232

0800246c <getRotaryPushButton>:
 * @brief: 		 Returns the state of the Push Button.
 *        		 Returns true if the button is pressed, false otherwise.
 *        		 Additionally, it clears the internal flag if the button was pressed.
 */
int getRotaryPushButton()
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <getRotaryPushButton+0x3c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	f083 0301 	eor.w	r3, r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <getRotaryPushButton+0x1c>
	{
		initRotaryPushButton();
 8002480:	f7ff ff56 	bl	8002330 <initRotaryPushButton>
		return ERROR_VALUE;
 8002484:	2301      	movs	r3, #1
 8002486:	e00a      	b.n	800249e <getRotaryPushButton+0x32>
	}

	/* Copy the current state of the push button */
	int pushButton = (int)pushButtonFlag;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <getRotaryPushButton+0x40>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	607b      	str	r3, [r7, #4]

	/* clear the internal flag if it was pressed */
	if (pushButtonFlag == true)
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <getRotaryPushButton+0x40>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <getRotaryPushButton+0x30>
	{
		pushButtonFlag = false;
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <getRotaryPushButton+0x40>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
	}

	/* Returns true if the button is pressed, false otherwise*/
	return pushButton;
 800249c:	687b      	ldr	r3, [r7, #4]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000231 	.word	0x20000231
 80024ac:	20000230 	.word	0x20000230

080024b0 <getRotaryPosition>:
 *
 * @brief: 		 Gets the rotary encoder position.
 *        		 Returns the current position as an integer.
 */
int getRotaryPosition()
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	if (initRotaryPushButtonDone == false)
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <getRotaryPosition+0x24>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	f083 0301 	eor.w	r3, r3, #1
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <getRotaryPosition+0x16>
	{
		return ERROR_VALUE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e001      	b.n	80024ca <getRotaryPosition+0x1a>
	}

	/* Returns the current position as an integer.*/
	return rotoryPosition;
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <getRotaryPosition+0x28>)
 80024c8:	681b      	ldr	r3, [r3, #0]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20000231 	.word	0x20000231
 80024d8:	2000022c 	.word	0x2000022c

080024dc <setRotaryPosition>:

uint16_t setRotaryPosition(int32_t position)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
	if (initRotaryPushButtonDone == false)
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <setRotaryPosition+0x30>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	f083 0301 	eor.w	r3, r3, #1
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <setRotaryPosition+0x1a>
	{
		return ERROR_VALUE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e003      	b.n	80024fe <setRotaryPosition+0x22>
	}

	rotoryPosition = position;
 80024f6:	4a06      	ldr	r2, [pc, #24]	; (8002510 <setRotaryPosition+0x34>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6013      	str	r3, [r2, #0]

	return 0;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000231 	.word	0x20000231
 8002510:	2000022c 	.word	0x2000022c

08002514 <EXTI1_IRQHandler>:




void ROTARY_A_HANDLER(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
	/* Check ROT B and update position */
	if (gpioGetPinState(ROTARY_B_ADR) == true)
 8002518:	2100      	movs	r1, #0
 800251a:	480f      	ldr	r0, [pc, #60]	; (8002558 <EXTI1_IRQHandler+0x44>)
 800251c:	f003 fb3c 	bl	8005b98 <gpioGetPinState>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d005      	beq.n	8002532 <EXTI1_IRQHandler+0x1e>
	{
		rotoryPosition += 1;
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <EXTI1_IRQHandler+0x48>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a0b      	ldr	r2, [pc, #44]	; (800255c <EXTI1_IRQHandler+0x48>)
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e004      	b.n	800253c <EXTI1_IRQHandler+0x28>
	}
	else
	{
		rotoryPosition -= 1;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <EXTI1_IRQHandler+0x48>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3b01      	subs	r3, #1
 8002538:	4a08      	ldr	r2, [pc, #32]	; (800255c <EXTI1_IRQHandler+0x48>)
 800253a:	6013      	str	r3, [r2, #0]
	}

	/* Clear the interrupt flag for ROT A */
	if (EXTI->PR & ROTARY_A_PR)
 800253c:	4b08      	ldr	r3, [pc, #32]	; (8002560 <EXTI1_IRQHandler+0x4c>)
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <EXTI1_IRQHandler+0x40>
	{
		EXTI->PR |= ROTARY_A_PR;
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <EXTI1_IRQHandler+0x4c>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <EXTI1_IRQHandler+0x4c>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6153      	str	r3, [r2, #20]
	}
}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40020800 	.word	0x40020800
 800255c:	2000022c 	.word	0x2000022c
 8002560:	40013c00 	.word	0x40013c00

08002564 <EXTI15_10_IRQHandler>:
 *
 * @brief: 		 EXTI Interrupt Handler for PUSH BUTTON.
 *        		 Sets the PUSH BUTTON flag.
 */
void ROTARY_SW_HANDLER(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
	/* Set PUSH BUTTON flag */
	pushButtonFlag = true;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <EXTI15_10_IRQHandler+0x2c>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]

	/* Clear the interrupt flag for PUSH BUTTON */
	if (EXTI->PR & ROTARY_SW_PR)
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <EXTI15_10_IRQHandler+0x30>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <EXTI15_10_IRQHandler+0x22>
	{
		EXTI->PR |= ROTARY_SW_PR;
 800257a:	4b06      	ldr	r3, [pc, #24]	; (8002594 <EXTI15_10_IRQHandler+0x30>)
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	4a05      	ldr	r2, [pc, #20]	; (8002594 <EXTI15_10_IRQHandler+0x30>)
 8002580:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002584:	6153      	str	r3, [r2, #20]
	}
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	20000230 	.word	0x20000230
 8002594:	40013c00 	.word	0x40013c00

08002598 <delayms>:

/* Function creates delay
 * delayValue is in ms
 */
void delayms(uint32_t delayValue)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	systickDelay(&ST7735_Timer, delayValue);
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <delayms+0x18>)
 80025a4:	f004 fa98 	bl	8006ad8 <systickDelay>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000218 	.word	0x20000218

080025b4 <tftSPISenddata>:


// Function sends byte via SPI to controller
void tftSPISenddata(const uint8_t data)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
	spiWriteByte(spi, ST7735_CS_PORT, ST7735_CS, data);
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <tftSPISenddata+0x20>)
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2206      	movs	r2, #6
 80025c6:	4904      	ldr	r1, [pc, #16]	; (80025d8 <tftSPISenddata+0x24>)
 80025c8:	f004 f977 	bl	80068ba <spiWriteByte>
}
 80025cc:	bf00      	nop
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000020 	.word	0x20000020
 80025d8:	40020400 	.word	0x40020400

080025dc <tftSendCmd>:
}


// Function sends control command to controller
void tftSendCmd(const uint8_t cmd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	71fb      	strb	r3, [r7, #7]
	ST7735_DC0;
 80025e6:	2107      	movs	r1, #7
 80025e8:	4805      	ldr	r0, [pc, #20]	; (8002600 <tftSendCmd+0x24>)
 80025ea:	f003 f96f 	bl	80058cc <gpioResetPin>
    tftSPISenddata(cmd);
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ffdf 	bl	80025b4 <tftSPISenddata>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40020800 	.word	0x40020800

08002604 <tftSendData>:


// Function that sends parameters or a command to controller
void tftSendData(const uint8_t data)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
    ST7735_DC1;
 800260e:	2107      	movs	r1, #7
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <tftSendData+0x24>)
 8002612:	f003 f930 	bl	8005876 <gpioSetPin>
    tftSPISenddata(data);
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ffcb 	bl	80025b4 <tftSPISenddata>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40020800 	.word	0x40020800

0800262c <spiInit>:

// Function that initializes the hardware configuration
void spiInit(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af04      	add	r7, sp, #16

    // Declaration of SPI & IO Pins for ST7735-Port
    gpioSelectPort(ST7735_RST_PORT);
 8002632:	4825      	ldr	r0, [pc, #148]	; (80026c8 <spiInit+0x9c>)
 8002634:	f003 f870 	bl	8005718 <gpioSelectPort>
    gpioSelectPinMode(ST7735_RST_PORT, ST7735_RST, OUTPUT);		// RESET
 8002638:	2201      	movs	r2, #1
 800263a:	2109      	movs	r1, #9
 800263c:	4822      	ldr	r0, [pc, #136]	; (80026c8 <spiInit+0x9c>)
 800263e:	f003 f8cf 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectPort(ST7735_DC_PORT);
 8002642:	4822      	ldr	r0, [pc, #136]	; (80026cc <spiInit+0xa0>)
 8002644:	f003 f868 	bl	8005718 <gpioSelectPort>
    gpioSelectPinMode(ST7735_DC_PORT, ST7735_DC, OUTPUT);		// DATA/Command
 8002648:	2201      	movs	r2, #1
 800264a:	2107      	movs	r1, #7
 800264c:	481f      	ldr	r0, [pc, #124]	; (80026cc <spiInit+0xa0>)
 800264e:	f003 f8c7 	bl	80057e0 <gpioSelectPinMode>

    gpioInitPort(ST7735_CS_PORT);
 8002652:	481f      	ldr	r0, [pc, #124]	; (80026d0 <spiInit+0xa4>)
 8002654:	f002 fffe 	bl	8005654 <gpioInitPort>
    gpioSelectPinMode(ST7735_CS_PORT,ST7735_CS, OUTPUT);        // CS
 8002658:	2201      	movs	r2, #1
 800265a:	2106      	movs	r1, #6
 800265c:	481c      	ldr	r0, [pc, #112]	; (80026d0 <spiInit+0xa4>)
 800265e:	f003 f8bf 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectPushPullMode(ST7735_CS_PORT, ST7735_CS, PULLUP);
 8002662:	2201      	movs	r2, #1
 8002664:	2106      	movs	r1, #6
 8002666:	481a      	ldr	r0, [pc, #104]	; (80026d0 <spiInit+0xa4>)
 8002668:	f003 fa39 	bl	8005ade <gpioSelectPushPullMode>

    gpioInitPort(ST7735_SPI_PORT);
 800266c:	4816      	ldr	r0, [pc, #88]	; (80026c8 <spiInit+0x9c>)
 800266e:	f002 fff1 	bl	8005654 <gpioInitPort>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_CLK, ALTFUNC);	// SPI1 Clock
 8002672:	2202      	movs	r2, #2
 8002674:	2105      	movs	r1, #5
 8002676:	4814      	ldr	r0, [pc, #80]	; (80026c8 <spiInit+0x9c>)
 8002678:	f003 f8b2 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_CLK, AF5);
 800267c:	2205      	movs	r2, #5
 800267e:	2105      	movs	r1, #5
 8002680:	4811      	ldr	r0, [pc, #68]	; (80026c8 <spiInit+0x9c>)
 8002682:	f003 f97a 	bl	800597a <gpioSelectAltFunc>
    gpioSelectPinMode(ST7735_SPI_PORT, ST7735_MOSI, ALTFUNC);	// SPI1 MOSI
 8002686:	2202      	movs	r2, #2
 8002688:	2107      	movs	r1, #7
 800268a:	480f      	ldr	r0, [pc, #60]	; (80026c8 <spiInit+0x9c>)
 800268c:	f003 f8a8 	bl	80057e0 <gpioSelectPinMode>
    gpioSelectAltFunc(ST7735_SPI_PORT, ST7735_MOSI, AF5);
 8002690:	2205      	movs	r2, #5
 8002692:	2107      	movs	r1, #7
 8002694:	480c      	ldr	r0, [pc, #48]	; (80026c8 <spiInit+0x9c>)
 8002696:	f003 f970 	bl	800597a <gpioSelectAltFunc>

    // initialization of  SPI1
    spiSelectSPI(spi);
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <spiInit+0xa8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 f8b0 	bl	8006804 <spiSelectSPI>
    spiInitSPI(spi, CLK_DIV_16, SPI_DATA_8_BIT, SSM_ON, SSI_LVL_HIGH, MASTER, SPI_PHASE_EDGE_1, SPI_IDLE_LOW);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <spiInit+0xa8>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	2300      	movs	r3, #0
 80026aa:	9303      	str	r3, [sp, #12]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	2300      	movs	r3, #0
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2301      	movs	r3, #1
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	2200      	movs	r2, #0
 80026bc:	2103      	movs	r1, #3
 80026be:	f003 ffb3 	bl	8006628 <spiInitSPI>

}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020400 	.word	0x40020400
 80026d4:	20000020 	.word	0x20000020

080026d8 <commandList>:

/*Companion code to the above tables.  Reads and issues
* a series of tft commands stored in PROGMEM byte array.
*/
static void commandList(const uint8_t *addr)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	uint8_t  numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;   // Number of commands to follow
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	607a      	str	r2, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {                 // For each command...
 80026ea:	e033      	b.n	8002754 <commandList+0x7c>
		tftSendCmd(*addr++); //   Read, issue command
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff71 	bl	80025dc <tftSendCmd>
		numArgs  = *addr++;    //   Number of args to follow
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	73bb      	strb	r3, [r7, #14]
		ms       = numArgs & DELAY;          //   If hibit set, delay follows args
 8002704:	7bbb      	ldrb	r3, [r7, #14]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;                   //   Mask out delay bit
 800270e:	7bbb      	ldrb	r3, [r7, #14]
 8002710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002714:	73bb      	strb	r3, [r7, #14]
		while(numArgs--) {                   //   For each argument...
 8002716:	e006      	b.n	8002726 <commandList+0x4e>
			tftSendData(*addr++);  //     Read, issue argument
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff6f 	bl	8002604 <tftSendData>
		while(numArgs--) {                   //   For each argument...
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	1e5a      	subs	r2, r3, #1
 800272a:	73ba      	strb	r2, [r7, #14]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f3      	bne.n	8002718 <commandList+0x40>
		}

		if(ms) {
 8002730:	89bb      	ldrh	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00e      	beq.n	8002754 <commandList+0x7c>
			ms = *addr++; // Read post-command delay time (ms)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8002740:	89bb      	ldrh	r3, [r7, #12]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d102      	bne.n	800274c <commandList+0x74>
 8002746:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800274a:	81bb      	strh	r3, [r7, #12]
			delayms(ms);
 800274c:	89bb      	ldrh	r3, [r7, #12]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff22 	bl	8002598 <delayms>
	while(numCommands--) {                 // For each command...
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	73fa      	strb	r2, [r7, #15]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1c6      	bne.n	80026ec <commandList+0x14>
		}
	}
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <commonInit>:

// Initialization code common to both 'B' and 'R' type displays
static void commonInit(const uint8_t *cmdList)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	// toggle RST low to reset; CS low so it'll listen to us
	ST7735_CS0;
 8002770:	2106      	movs	r1, #6
 8002772:	480c      	ldr	r0, [pc, #48]	; (80027a4 <commonInit+0x3c>)
 8002774:	f003 f8aa 	bl	80058cc <gpioResetPin>
	tftSendCmd(ST7735_SWRESET);
	delayms(500);
#else
	//ST7735_RST1;
	//delay_ms(500);
	ST7735_RST0;
 8002778:	2109      	movs	r1, #9
 800277a:	480b      	ldr	r0, [pc, #44]	; (80027a8 <commonInit+0x40>)
 800277c:	f003 f8a6 	bl	80058cc <gpioResetPin>
	delayms(50);  //default value 500
 8002780:	2032      	movs	r0, #50	; 0x32
 8002782:	f7ff ff09 	bl	8002598 <delayms>
	ST7735_RST1;
 8002786:	2109      	movs	r1, #9
 8002788:	4807      	ldr	r0, [pc, #28]	; (80027a8 <commonInit+0x40>)
 800278a:	f003 f874 	bl	8005876 <gpioSetPin>
	//delay_ms(500);
#endif
	if(cmdList) commandList(cmdList);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <commonInit+0x32>
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff9f 	bl	80026d8 <commandList>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020000 	.word	0x40020000

080027ac <tftInitR>:

// Initialization for ST7735R screens (green or red tabs)
void tftInitR(uint8_t options)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
	delayms(50);
 80027b6:	2032      	movs	r0, #50	; 0x32
 80027b8:	f7ff feee 	bl	8002598 <delayms>
	commonInit(Rcmd1);
 80027bc:	4811      	ldr	r0, [pc, #68]	; (8002804 <tftInitR+0x58>)
 80027be:	f7ff ffd3 	bl	8002768 <commonInit>
	//chooses initialization for specific display type
	if(options == INITR_GREENTAB)
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d109      	bne.n	80027dc <tftInitR+0x30>
	{
		commandList(Rcmd2green);
 80027c8:	480f      	ldr	r0, [pc, #60]	; (8002808 <tftInitR+0x5c>)
 80027ca:	f7ff ff85 	bl	80026d8 <commandList>
		//Starting position of rows and columns
		colstart = 2;
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <tftInitR+0x60>)
 80027d0:	2202      	movs	r2, #2
 80027d2:	601a      	str	r2, [r3, #0]
		rowstart = 1;
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <tftInitR+0x64>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e002      	b.n	80027e2 <tftInitR+0x36>
	}
	else
	{
		// colstart, rowstart left at default '0' values
		commandList(Rcmd2red);
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <tftInitR+0x68>)
 80027de:	f7ff ff7b 	bl	80026d8 <commandList>
	}
	commandList(Rcmd3);
 80027e2:	480d      	ldr	r0, [pc, #52]	; (8002818 <tftInitR+0x6c>)
 80027e4:	f7ff ff78 	bl	80026d8 <commandList>

	// if black, change MADCTL color filter
	if (options == INITR_BLACKTAB)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d105      	bne.n	80027fa <tftInitR+0x4e>
	{
		tftSendCmd(ST7735_MADCTL);
 80027ee:	2036      	movs	r0, #54	; 0x36
 80027f0:	f7ff fef4 	bl	80025dc <tftSendCmd>
		tftSendData(0xC0);
 80027f4:	20c0      	movs	r0, #192	; 0xc0
 80027f6:	f7ff ff05 	bl	8002604 <tftSendData>
	}

	//  tabcolor = options;
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	0800b47c 	.word	0x0800b47c
 8002808:	0800b4b8 	.word	0x0800b4b8
 800280c:	20000234 	.word	0x20000234
 8002810:	20000238 	.word	0x20000238
 8002814:	0800b4c8 	.word	0x0800b4c8
 8002818:	0800b4d8 	.word	0x0800b4d8

0800281c <tftSetAddrWindow>:
/*sets Window for what will be printed on display
 * x0, x1 are start column and end column
 * y0, y1 are start row and end row
 */
void tftSetAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4604      	mov	r4, r0
 8002824:	4608      	mov	r0, r1
 8002826:	4611      	mov	r1, r2
 8002828:	461a      	mov	r2, r3
 800282a:	4623      	mov	r3, r4
 800282c:	71fb      	strb	r3, [r7, #7]
 800282e:	4603      	mov	r3, r0
 8002830:	71bb      	strb	r3, [r7, #6]
 8002832:	460b      	mov	r3, r1
 8002834:	717b      	strb	r3, [r7, #5]
 8002836:	4613      	mov	r3, r2
 8002838:	713b      	strb	r3, [r7, #4]
	tftSendCmd(ST7735_CASET);		// Column addr set
 800283a:	202a      	movs	r0, #42	; 0x2a
 800283c:	f7ff fece 	bl	80025dc <tftSendCmd>
	tftSendData(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fedf 	bl	8002604 <tftSendData>
	tftSendData(x0+colstart);     // XSTART
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <tftSetAddrWindow+0x98>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	4413      	add	r3, r2
 8002850:	b2db      	uxtb	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fed6 	bl	8002604 <tftSendData>
	tftSendData(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fed3 	bl	8002604 <tftSendData>
	tftSendData(x1+colstart);     // XEND
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <tftSetAddrWindow+0x98>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	b2da      	uxtb	r2, r3
 8002864:	797b      	ldrb	r3, [r7, #5]
 8002866:	4413      	add	r3, r2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff feca 	bl	8002604 <tftSendData>

	tftSendCmd(ST7735_RASET); // Row addr set
 8002870:	202b      	movs	r0, #43	; 0x2b
 8002872:	f7ff feb3 	bl	80025dc <tftSendCmd>
	tftSendData(0x00);
 8002876:	2000      	movs	r0, #0
 8002878:	f7ff fec4 	bl	8002604 <tftSendData>
	tftSendData(y0+rowstart);     // YSTART
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <tftSetAddrWindow+0x9c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	79bb      	ldrb	r3, [r7, #6]
 8002884:	4413      	add	r3, r2
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff febb 	bl	8002604 <tftSendData>
	tftSendData(0x00);
 800288e:	2000      	movs	r0, #0
 8002890:	f7ff feb8 	bl	8002604 <tftSendData>
	tftSendData(y1+rowstart);     // YEND
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <tftSetAddrWindow+0x9c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	793b      	ldrb	r3, [r7, #4]
 800289c:	4413      	add	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff feaf 	bl	8002604 <tftSendData>

	tftSendCmd(ST7735_RAMWR); // write to RAM
 80028a6:	202c      	movs	r0, #44	; 0x2c
 80028a8:	f7ff fe98 	bl	80025dc <tftSendCmd>
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd90      	pop	{r4, r7, pc}
 80028b4:	20000234 	.word	0x20000234
 80028b8:	20000238 	.word	0x20000238

080028bc <tftPushColor>:

//colors selected pixel in chosen color
void tftPushColor(uint16_t color)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
	ST7735_DC1;
 80028c6:	2107      	movs	r1, #7
 80028c8:	4809      	ldr	r0, [pc, #36]	; (80028f0 <tftPushColor+0x34>)
 80028ca:	f002 ffd4 	bl	8005876 <gpioSetPin>
	putpix(color);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	0a1b      	lsrs	r3, r3, #8
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fe6c 	bl	80025b4 <tftSPISenddata>
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fe67 	bl	80025b4 <tftSPISenddata>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40020800 	.word	0x40020800

080028f4 <tftFillRect>:
/*fill a rectangle
 * x and y are starting position
 * w is width, h is height
 */
void tftFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4623      	mov	r3, r4
 8002904:	80fb      	strh	r3, [r7, #6]
 8002906:	4603      	mov	r3, r0
 8002908:	80bb      	strh	r3, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
 800290e:	4613      	mov	r3, r2
 8002910:	803b      	strh	r3, [r7, #0]
	// rudimentary clipping (drawChar w/big text requires this)
	if((x >= width) || (y >= height))
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	4a37      	ldr	r2, [pc, #220]	; (80029f4 <tftFillRect+0x100>)
 8002918:	8812      	ldrh	r2, [r2, #0]
 800291a:	4293      	cmp	r3, r2
 800291c:	da65      	bge.n	80029ea <tftFillRect+0xf6>
 800291e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002922:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <tftFillRect+0x104>)
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	4293      	cmp	r3, r2
 8002928:	da5f      	bge.n	80029ea <tftFillRect+0xf6>
		{
		return;
		}

	if((x + w - 1) >= width)
 800292a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800292e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002932:	4413      	add	r3, r2
 8002934:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <tftFillRect+0x100>)
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	4293      	cmp	r3, r2
 800293a:	dd05      	ble.n	8002948 <tftFillRect+0x54>
		{
		w = width  - x;
 800293c:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <tftFillRect+0x100>)
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	88fb      	ldrh	r3, [r7, #6]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	807b      	strh	r3, [r7, #2]
		}

	if((y + h - 1) >= height)
 8002948:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800294c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002950:	4413      	add	r3, r2
 8002952:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <tftFillRect+0x104>)
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	4293      	cmp	r3, r2
 8002958:	dd05      	ble.n	8002966 <tftFillRect+0x72>
		{
		h = height - y;
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <tftFillRect+0x104>)
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	88bb      	ldrh	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	b29b      	uxth	r3, r3
 8002964:	803b      	strh	r3, [r7, #0]
		}

	tftSetAddrWindow(x, y, x+w-1, y+h-1);
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	88bb      	ldrh	r3, [r7, #4]
 800296c:	b2d9      	uxtb	r1, r3
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	4413      	add	r3, r2
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b2dc      	uxtb	r4, r3
 800297e:	88bb      	ldrh	r3, [r7, #4]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	883b      	ldrh	r3, [r7, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4413      	add	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4622      	mov	r2, r4
 8002990:	f7ff ff44 	bl	800281c <tftSetAddrWindow>

	ST7735_DC1;
 8002994:	2107      	movs	r1, #7
 8002996:	4819      	ldr	r0, [pc, #100]	; (80029fc <tftFillRect+0x108>)
 8002998:	f002 ff6d 	bl	8005876 <gpioSetPin>
	for(y=h; y>0; y--)
 800299c:	883b      	ldrh	r3, [r7, #0]
 800299e:	80bb      	strh	r3, [r7, #4]
 80029a0:	e01e      	b.n	80029e0 <tftFillRect+0xec>
	{
		for(x=w; x>0; x--)
 80029a2:	887b      	ldrh	r3, [r7, #2]
 80029a4:	80fb      	strh	r3, [r7, #6]
 80029a6:	e011      	b.n	80029cc <tftFillRect+0xd8>
		{
			putpix(color);
 80029a8:	8b3b      	ldrh	r3, [r7, #24]
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fdff 	bl	80025b4 <tftSPISenddata>
 80029b6:	8b3b      	ldrh	r3, [r7, #24]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fdfa 	bl	80025b4 <tftSPISenddata>
		for(x=w; x>0; x--)
 80029c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	80fb      	strh	r3, [r7, #6]
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	dce9      	bgt.n	80029a8 <tftFillRect+0xb4>
	for(y=h; y>0; y--)
 80029d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	80bb      	strh	r3, [r7, #4]
 80029e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	dcdc      	bgt.n	80029a2 <tftFillRect+0xae>
 80029e8:	e000      	b.n	80029ec <tftFillRect+0xf8>
		return;
 80029ea:	bf00      	nop
		}
	}
}
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd90      	pop	{r4, r7, pc}
 80029f2:	bf00      	nop
 80029f4:	2000001c 	.word	0x2000001c
 80029f8:	2000001e 	.word	0x2000001e
 80029fc:	40020800 	.word	0x40020800

08002a00 <tftDrawFastVLine>:
/*
 * draws vertical line
 * x an y are starting point
 * h is height
 */
void tftDrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4623      	mov	r3, r4
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	4603      	mov	r3, r0
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	460b      	mov	r3, r1
 8002a18:	807b      	strh	r3, [r7, #2]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height)) return;
 8002a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a22:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <tftDrawFastVLine+0xb4>)
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	4293      	cmp	r3, r2
 8002a28:	da3f      	bge.n	8002aaa <tftDrawFastVLine+0xaa>
 8002a2a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a2e:	4a22      	ldr	r2, [pc, #136]	; (8002ab8 <tftDrawFastVLine+0xb8>)
 8002a30:	8812      	ldrh	r2, [r2, #0]
 8002a32:	4293      	cmp	r3, r2
 8002a34:	da39      	bge.n	8002aaa <tftDrawFastVLine+0xaa>
	if((y+h-1) >= height) h = height-y;
 8002a36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a1d      	ldr	r2, [pc, #116]	; (8002ab8 <tftDrawFastVLine+0xb8>)
 8002a42:	8812      	ldrh	r2, [r2, #0]
 8002a44:	4293      	cmp	r3, r2
 8002a46:	dd05      	ble.n	8002a54 <tftDrawFastVLine+0x54>
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <tftDrawFastVLine+0xb8>)
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	807b      	strh	r3, [r7, #2]
	tftSetAddrWindow(x, y, x, y+h-1);
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	b2d8      	uxtb	r0, r3
 8002a58:	88bb      	ldrh	r3, [r7, #4]
 8002a5a:	b2d9      	uxtb	r1, r3
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	b2dc      	uxtb	r4, r3
 8002a60:	88bb      	ldrh	r3, [r7, #4]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4622      	mov	r2, r4
 8002a72:	f7ff fed3 	bl	800281c <tftSetAddrWindow>

	ST7735_DC1;
 8002a76:	2107      	movs	r1, #7
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <tftDrawFastVLine+0xbc>)
 8002a7a:	f002 fefc 	bl	8005876 <gpioSetPin>
	while (h--) {
 8002a7e:	e00b      	b.n	8002a98 <tftDrawFastVLine+0x98>
		putpix(color);
 8002a80:	883b      	ldrh	r3, [r7, #0]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff fd93 	bl	80025b4 <tftSPISenddata>
 8002a8e:	883b      	ldrh	r3, [r7, #0]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff fd8e 	bl	80025b4 <tftSPISenddata>
	while (h--) {
 8002a98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	3a01      	subs	r2, #1
 8002aa0:	b292      	uxth	r2, r2
 8002aa2:	807a      	strh	r2, [r7, #2]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1eb      	bne.n	8002a80 <tftDrawFastVLine+0x80>
 8002aa8:	e000      	b.n	8002aac <tftDrawFastVLine+0xac>
	if((x >= width) || (y >= height)) return;
 8002aaa:	bf00      	nop
	}
}
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2000001c 	.word	0x2000001c
 8002ab8:	2000001e 	.word	0x2000001e
 8002abc:	40020800 	.word	0x40020800

08002ac0 <tftDrawFastHLine>:
 * draws horizontal line
 * x an y are starting point
 * w is width
 */
void tftDrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	80fb      	strh	r3, [r7, #6]
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	80bb      	strh	r3, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
 8002ada:	4613      	mov	r3, r2
 8002adc:	803b      	strh	r3, [r7, #0]
	// Rudimentary clipping
	if((x >= width) || (y >= height))
 8002ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae2:	4a23      	ldr	r2, [pc, #140]	; (8002b70 <tftDrawFastHLine+0xb0>)
 8002ae4:	8812      	ldrh	r2, [r2, #0]
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	da3e      	bge.n	8002b68 <tftDrawFastHLine+0xa8>
 8002aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <tftDrawFastHLine+0xb4>)
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	da38      	bge.n	8002b68 <tftDrawFastHLine+0xa8>
		{
		return;
		}

	if((x+w-1) >= width)
 8002af6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002afa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002afe:	4413      	add	r3, r2
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <tftDrawFastHLine+0xb0>)
 8002b02:	8812      	ldrh	r2, [r2, #0]
 8002b04:	4293      	cmp	r3, r2
 8002b06:	dd05      	ble.n	8002b14 <tftDrawFastHLine+0x54>
		{
		w = width-x;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <tftDrawFastHLine+0xb0>)
 8002b0a:	881a      	ldrh	r2, [r3, #0]
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	807b      	strh	r3, [r7, #2]
		}

	tftSetAddrWindow(x, y, x+w-1, y);
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	b2d8      	uxtb	r0, r3
 8002b18:	88bb      	ldrh	r3, [r7, #4]
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	887b      	ldrh	r3, [r7, #2]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	88bb      	ldrh	r3, [r7, #4]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f7ff fe74 	bl	800281c <tftSetAddrWindow>

	ST7735_DC1;
 8002b34:	2107      	movs	r1, #7
 8002b36:	4810      	ldr	r0, [pc, #64]	; (8002b78 <tftDrawFastHLine+0xb8>)
 8002b38:	f002 fe9d 	bl	8005876 <gpioSetPin>
	while (w--)
 8002b3c:	e00b      	b.n	8002b56 <tftDrawFastHLine+0x96>
	{
		putpix(color);
 8002b3e:	883b      	ldrh	r3, [r7, #0]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fd34 	bl	80025b4 <tftSPISenddata>
 8002b4c:	883b      	ldrh	r3, [r7, #0]
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fd2f 	bl	80025b4 <tftSPISenddata>
	while (w--)
 8002b56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	3a01      	subs	r2, #1
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	807a      	strh	r2, [r7, #2]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1eb      	bne.n	8002b3e <tftDrawFastHLine+0x7e>
 8002b66:	e000      	b.n	8002b6a <tftDrawFastHLine+0xaa>
		return;
 8002b68:	bf00      	nop
	}
}
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd90      	pop	{r4, r7, pc}
 8002b70:	2000001c 	.word	0x2000001c
 8002b74:	2000001e 	.word	0x2000001e
 8002b78:	40020800 	.word	0x40020800

08002b7c <tftDrawRect>:
 * x2 is end parameter x
 * y1 is start parameter y
 * y2 is end parameter y
*/
void tftDrawRect(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2, uint16_t color)
{
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4604      	mov	r4, r0
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	71fb      	strb	r3, [r7, #7]
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71bb      	strb	r3, [r7, #6]
 8002b92:	460b      	mov	r3, r1
 8002b94:	717b      	strb	r3, [r7, #5]
 8002b96:	4613      	mov	r3, r2
 8002b98:	713b      	strb	r3, [r7, #4]
	tftDrawFastHLine(x1,y1,x2-x1, color);
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	b218      	sxth	r0, r3
 8002b9e:	79bb      	ldrb	r3, [r7, #6]
 8002ba0:	b219      	sxth	r1, r3
 8002ba2:	797b      	ldrb	r3, [r7, #5]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	b21a      	sxth	r2, r3
 8002bb0:	8b3b      	ldrh	r3, [r7, #24]
 8002bb2:	f7ff ff85 	bl	8002ac0 <tftDrawFastHLine>
	tftDrawFastVLine(x2,y1,y2-y1, color);
 8002bb6:	797b      	ldrb	r3, [r7, #5]
 8002bb8:	b218      	sxth	r0, r3
 8002bba:	79bb      	ldrb	r3, [r7, #6]
 8002bbc:	b219      	sxth	r1, r3
 8002bbe:	793b      	ldrb	r3, [r7, #4]
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	79bb      	ldrb	r3, [r7, #6]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b21a      	sxth	r2, r3
 8002bcc:	8b3b      	ldrh	r3, [r7, #24]
 8002bce:	f7ff ff17 	bl	8002a00 <tftDrawFastVLine>
	tftDrawFastHLine(x1,y2,x2-x1, color);
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	b218      	sxth	r0, r3
 8002bd6:	793b      	ldrb	r3, [r7, #4]
 8002bd8:	b219      	sxth	r1, r3
 8002bda:	797b      	ldrb	r3, [r7, #5]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	b21a      	sxth	r2, r3
 8002be8:	8b3b      	ldrh	r3, [r7, #24]
 8002bea:	f7ff ff69 	bl	8002ac0 <tftDrawFastHLine>
	tftDrawFastVLine(x1,y1,y2-y1, color);
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	b218      	sxth	r0, r3
 8002bf2:	79bb      	ldrb	r3, [r7, #6]
 8002bf4:	b219      	sxth	r1, r3
 8002bf6:	793b      	ldrb	r3, [r7, #4]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	79bb      	ldrb	r3, [r7, #6]
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	b21a      	sxth	r2, r3
 8002c04:	8b3b      	ldrh	r3, [r7, #24]
 8002c06:	f7ff fefb 	bl	8002a00 <tftDrawFastVLine>
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd90      	pop	{r4, r7, pc}
	...

08002c14 <tftSetFont>:

/* Function that sets the font
 * fonts are listed in DefaultFonts.h
*/
void tftSetFont(uint8_t* font)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	cfont.font=font;
 8002c1c:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <tftSetFont+0x40>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
	cfont.x_size=font[0];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	781a      	ldrb	r2, [r3, #0]
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <tftSetFont+0x40>)
 8002c28:	711a      	strb	r2, [r3, #4]
	cfont.y_size=font[1];
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	785a      	ldrb	r2, [r3, #1]
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <tftSetFont+0x40>)
 8002c30:	715a      	strb	r2, [r3, #5]
	cfont.offset=font[2];
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	789a      	ldrb	r2, [r3, #2]
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <tftSetFont+0x40>)
 8002c38:	719a      	strb	r2, [r3, #6]
	cfont.numchars=font[3];
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	3303      	adds	r3, #3
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <tftSetFont+0x40>)
 8002c44:	811a      	strh	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000240 	.word	0x20000240

08002c58 <tftPrintChar>:
	_fg = FontColor;
	_bg = BackColor;
}

void tftPrintChar(uint8_t charval, int x, int y)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	73fb      	strb	r3, [r7, #15]
	uint8_t i,ch,fz;
	uint16_t j;
	uint16_t temp;
	int zz;

	if(cfont.x_size < 8)
 8002c66:	4b74      	ldr	r3, [pc, #464]	; (8002e38 <tftPrintChar+0x1e0>)
 8002c68:	791b      	ldrb	r3, [r3, #4]
 8002c6a:	2b07      	cmp	r3, #7
 8002c6c:	d803      	bhi.n	8002c76 <tftPrintChar+0x1e>
	{
		fz = cfont.x_size;
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <tftPrintChar+0x1e0>)
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	77bb      	strb	r3, [r7, #30]
 8002c74:	e003      	b.n	8002c7e <tftPrintChar+0x26>
	}
	else
	{
		fz = cfont.x_size/8;
 8002c76:	4b70      	ldr	r3, [pc, #448]	; (8002e38 <tftPrintChar+0x1e0>)
 8002c78:	791b      	ldrb	r3, [r3, #4]
 8002c7a:	08db      	lsrs	r3, r3, #3
 8002c7c:	77bb      	strb	r3, [r7, #30]
	}
	if (!_transparent)
 8002c7e:	4b6f      	ldr	r3, [pc, #444]	; (8002e3c <tftPrintChar+0x1e4>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d15e      	bne.n	8002d44 <tftPrintChar+0xec>
	{
		tftSetAddrWindow(x,y,x+cfont.x_size-1,y+cfont.y_size-1);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	b2d8      	uxtb	r0, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	b2d9      	uxtb	r1, r3
 8002c8e:	4b6a      	ldr	r3, [pc, #424]	; (8002e38 <tftPrintChar+0x1e0>)
 8002c90:	791a      	ldrb	r2, [r3, #4]
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b2dc      	uxtb	r4, r3
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <tftPrintChar+0x1e0>)
 8002ca0:	795a      	ldrb	r2, [r3, #5]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	4622      	mov	r2, r4
 8002cb0:	f7ff fdb4 	bl	800281c <tftSetAddrWindow>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	4a60      	ldr	r2, [pc, #384]	; (8002e38 <tftPrintChar+0x1e0>)
 8002cb8:	7992      	ldrb	r2, [r2, #6]
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	7fbb      	ldrb	r3, [r7, #30]
 8002cc0:	b299      	uxth	r1, r3
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	; (8002e38 <tftPrintChar+0x1e0>)
 8002cc4:	795b      	ldrb	r3, [r3, #5]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	fb11 f303 	smulbb	r3, r1, r3
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	fb12 f303 	smulbb	r3, r2, r3
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	837b      	strh	r3, [r7, #26]

		for(j=0;j<((fz)*cfont.y_size);j++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	83bb      	strh	r3, [r7, #28]
 8002cdc:	e029      	b.n	8002d32 <tftPrintChar+0xda>
		{
			ch = cfont.font[temp];
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <tftPrintChar+0x1e0>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	8b7b      	ldrh	r3, [r7, #26]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	74fb      	strb	r3, [r7, #19]

			for(i=0;i<8;i++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e017      	b.n	8002d20 <tftPrintChar+0xc8>
			{
				if((ch&(1<<(7-i)))!=0)
 8002cf0:	7cfa      	ldrb	r2, [r7, #19]
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	f1c3 0307 	rsb	r3, r3, #7
 8002cf8:	fa42 f303 	asr.w	r3, r2, r3
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <tftPrintChar+0xb8>
				{
					tftPushColor(_fg);
 8002d04:	4b4e      	ldr	r3, [pc, #312]	; (8002e40 <tftPrintChar+0x1e8>)
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fdd7 	bl	80028bc <tftPushColor>
 8002d0e:	e004      	b.n	8002d1a <tftPrintChar+0xc2>
				}
				else
				{
					tftPushColor(_bg);
 8002d10:	4b4c      	ldr	r3, [pc, #304]	; (8002e44 <tftPrintChar+0x1ec>)
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fdd1 	bl	80028bc <tftPushColor>
			for(i=0;i<8;i++)
 8002d1a:	7ffb      	ldrb	r3, [r7, #31]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
 8002d22:	2b07      	cmp	r3, #7
 8002d24:	d9e4      	bls.n	8002cf0 <tftPrintChar+0x98>
				}
			}
			temp++;
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	837b      	strh	r3, [r7, #26]
		for(j=0;j<((fz)*cfont.y_size);j++)
 8002d2c:	8bbb      	ldrh	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	83bb      	strh	r3, [r7, #28]
 8002d32:	8bba      	ldrh	r2, [r7, #28]
 8002d34:	7fbb      	ldrb	r3, [r7, #30]
 8002d36:	4940      	ldr	r1, [pc, #256]	; (8002e38 <tftPrintChar+0x1e0>)
 8002d38:	7949      	ldrb	r1, [r1, #5]
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	dbcd      	blt.n	8002cde <tftPrintChar+0x86>
				}
			}
			temp+=(fz);
		}
	}
}
 8002d42:	e075      	b.n	8002e30 <tftPrintChar+0x1d8>
		temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <tftPrintChar+0x1e0>)
 8002d48:	7992      	ldrb	r2, [r2, #6]
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	7fbb      	ldrb	r3, [r7, #30]
 8002d50:	b299      	uxth	r1, r3
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <tftPrintChar+0x1e0>)
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	fb11 f303 	smulbb	r3, r1, r3
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	fb12 f303 	smulbb	r3, r2, r3
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3304      	adds	r3, #4
 8002d66:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	83bb      	strh	r3, [r7, #28]
 8002d6c:	e05a      	b.n	8002e24 <tftPrintChar+0x1cc>
			for (zz=0; zz<(fz); zz++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	e04b      	b.n	8002e0c <tftPrintChar+0x1b4>
				ch = cfont.font[temp+zz];
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <tftPrintChar+0x1e0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	8b79      	ldrh	r1, [r7, #26]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	4413      	add	r3, r2
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	74fb      	strb	r3, [r7, #19]
				for(i=0;i<8;i++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	e03a      	b.n	8002e00 <tftPrintChar+0x1a8>
					tftSetAddrWindow(x+i+(zz*8),y+j,x+i+(zz*8)+1,y+j+1);
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	4413      	add	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	b2d8      	uxtb	r0, r3
 8002da0:	8bbb      	ldrh	r3, [r7, #28]
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4413      	add	r3, r2
 8002daa:	b2d9      	uxtb	r1, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	7ffb      	ldrb	r3, [r7, #31]
 8002db2:	4413      	add	r3, r2
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4413      	add	r3, r2
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2dc      	uxtb	r4, r3
 8002dc6:	8bbb      	ldrh	r3, [r7, #28]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	4413      	add	r3, r2
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	f7ff fd20 	bl	800281c <tftSetAddrWindow>
					if((ch&(1<<(7-i)))!=0)
 8002ddc:	7cfa      	ldrb	r2, [r7, #19]
 8002dde:	7ffb      	ldrb	r3, [r7, #31]
 8002de0:	f1c3 0307 	rsb	r3, r3, #7
 8002de4:	fa42 f303 	asr.w	r3, r2, r3
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <tftPrintChar+0x1a2>
						tftPushColor(_fg);
 8002df0:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <tftPrintChar+0x1e8>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fd61 	bl	80028bc <tftPushColor>
				for(i=0;i<8;i++)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	7ffb      	ldrb	r3, [r7, #31]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d9c1      	bls.n	8002d8a <tftPrintChar+0x132>
			for (zz=0; zz<(fz); zz++)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	7fbb      	ldrb	r3, [r7, #30]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbaf      	blt.n	8002d74 <tftPrintChar+0x11c>
			temp+=(fz);
 8002e14:	7fbb      	ldrb	r3, [r7, #30]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	8b7b      	ldrh	r3, [r7, #26]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	837b      	strh	r3, [r7, #26]
		for(j=0;j<cfont.y_size;j++)
 8002e1e:	8bbb      	ldrh	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	83bb      	strh	r3, [r7, #28]
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <tftPrintChar+0x1e0>)
 8002e26:	795b      	ldrb	r3, [r3, #5]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	8bba      	ldrh	r2, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d39e      	bcc.n	8002d6e <tftPrintChar+0x116>
}
 8002e30:	bf00      	nop
 8002e32:	3724      	adds	r7, #36	; 0x24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	20000240 	.word	0x20000240
 8002e3c:	2000024c 	.word	0x2000024c
 8002e40:	20000024 	.word	0x20000024
 8002e44:	2000024e 	.word	0x2000024e

08002e48 <tftRotateChar>:
 * y is y position of character
 * pos is the position of that character in a text (number of preceding characters)
 * deg is the rotation angle in degree
*/
void tftRotateChar(uint8_t charval, int x, int y, int pos, int deg)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b08e      	sub	sp, #56	; 0x38
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	4603      	mov	r3, r0
 8002e58:	73fb      	strb	r3, [r7, #15]
	uint8_t i,j,ch,fz;
	uint16_t temp;
	int newx,newy;
	double radian = deg*0.0175;
 8002e5a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e5c:	f7fd fb6a 	bl	8000534 <__aeabi_i2d>
 8002e60:	a395      	add	r3, pc, #596	; (adr r3, 80030b8 <tftRotateChar+0x270>)
 8002e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e66:	f7fd fbcf 	bl	8000608 <__aeabi_dmul>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int zz;

	if(cfont.x_size < 8)
 8002e72:	4b8d      	ldr	r3, [pc, #564]	; (80030a8 <tftRotateChar+0x260>)
 8002e74:	791b      	ldrb	r3, [r3, #4]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d804      	bhi.n	8002e84 <tftRotateChar+0x3c>
	{
		fz = cfont.x_size;
 8002e7a:	4b8b      	ldr	r3, [pc, #556]	; (80030a8 <tftRotateChar+0x260>)
 8002e7c:	791b      	ldrb	r3, [r3, #4]
 8002e7e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002e82:	e017      	b.n	8002eb4 <tftRotateChar+0x6c>
	}
	else
	{
	fz = cfont.x_size/8;
 8002e84:	4b88      	ldr	r3, [pc, #544]	; (80030a8 <tftRotateChar+0x260>)
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	08db      	lsrs	r3, r3, #3
 8002e8a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	temp=((charval-cfont.offset)*((fz)*cfont.y_size))+4;
 8002e8e:	7bfb      	ldrb	r3, [r7, #15]
 8002e90:	4a85      	ldr	r2, [pc, #532]	; (80030a8 <tftRotateChar+0x260>)
 8002e92:	7992      	ldrb	r2, [r2, #6]
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002e9c:	b299      	uxth	r1, r3
 8002e9e:	4b82      	ldr	r3, [pc, #520]	; (80030a8 <tftRotateChar+0x260>)
 8002ea0:	795b      	ldrb	r3, [r3, #5]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	fb11 f303 	smulbb	r3, r1, r3
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	fb12 f303 	smulbb	r3, r2, r3
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	867b      	strh	r3, [r7, #50]	; 0x32
	}
	for(j=0; j<cfont.y_size; j++)
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002eba:	e0e6      	b.n	800308a <tftRotateChar+0x242>
	{
		for (zz=0;zz<(fz);zz++)
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec0:	e0d2      	b.n	8003068 <tftRotateChar+0x220>
		{
			ch = cfont.font[temp+zz];
 8002ec2:	4b79      	ldr	r3, [pc, #484]	; (80030a8 <tftRotateChar+0x260>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8002ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eca:	440a      	add	r2, r1
 8002ecc:	4413      	add	r3, r2
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	77fb      	strb	r3, [r7, #31]

			for(i=0;i<8;i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002ed8:	e0be      	b.n	8003058 <tftRotateChar+0x210>
			{
				newx=x+(((i+(zz*8)+(pos*cfont.x_size))*cos(radian))-((j)*sin(radian)));
 8002eda:	68b8      	ldr	r0, [r7, #8]
 8002edc:	f7fd fb2a 	bl	8000534 <__aeabi_i2d>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	460d      	mov	r5, r1
 8002ee4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	441a      	add	r2, r3
 8002eee:	4b6e      	ldr	r3, [pc, #440]	; (80030a8 <tftRotateChar+0x260>)
 8002ef0:	791b      	ldrb	r3, [r3, #4]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	fb01 f303 	mul.w	r3, r1, r3
 8002efa:	4413      	add	r3, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb19 	bl	8000534 <__aeabi_i2d>
 8002f02:	4680      	mov	r8, r0
 8002f04:	4689      	mov	r9, r1
 8002f06:	ed97 0b08 	vldr	d0, [r7, #32]
 8002f0a:	f006 fda9 	bl	8009a60 <cos>
 8002f0e:	ec53 2b10 	vmov	r2, r3, d0
 8002f12:	4640      	mov	r0, r8
 8002f14:	4649      	mov	r1, r9
 8002f16:	f7fd fb77 	bl	8000608 <__aeabi_dmul>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4692      	mov	sl, r2
 8002f20:	469b      	mov	fp, r3
 8002f22:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd fb04 	bl	8000534 <__aeabi_i2d>
 8002f2c:	4680      	mov	r8, r0
 8002f2e:	4689      	mov	r9, r1
 8002f30:	ed97 0b08 	vldr	d0, [r7, #32]
 8002f34:	f006 fde8 	bl	8009b08 <sin>
 8002f38:	ec53 2b10 	vmov	r2, r3, d0
 8002f3c:	4640      	mov	r0, r8
 8002f3e:	4649      	mov	r1, r9
 8002f40:	f7fd fb62 	bl	8000608 <__aeabi_dmul>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4650      	mov	r0, sl
 8002f4a:	4659      	mov	r1, fp
 8002f4c:	f7fd f9a4 	bl	8000298 <__aeabi_dsub>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4620      	mov	r0, r4
 8002f56:	4629      	mov	r1, r5
 8002f58:	f7fd f9a0 	bl	800029c <__adddf3>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4610      	mov	r0, r2
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7fd fe00 	bl	8000b68 <__aeabi_d2iz>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
				newy=y+(((j)*cos(radian))+((i+(zz*8)+(pos*cfont.x_size))*sin(radian)));
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fd fae1 	bl	8000534 <__aeabi_i2d>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fada 	bl	8000534 <__aeabi_i2d>
 8002f80:	4680      	mov	r8, r0
 8002f82:	4689      	mov	r9, r1
 8002f84:	ed97 0b08 	vldr	d0, [r7, #32]
 8002f88:	f006 fd6a 	bl	8009a60 <cos>
 8002f8c:	ec53 2b10 	vmov	r2, r3, d0
 8002f90:	4640      	mov	r0, r8
 8002f92:	4649      	mov	r1, r9
 8002f94:	f7fd fb38 	bl	8000608 <__aeabi_dmul>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4692      	mov	sl, r2
 8002f9e:	469b      	mov	fp, r3
 8002fa0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	441a      	add	r2, r3
 8002faa:	4b3f      	ldr	r3, [pc, #252]	; (80030a8 <tftRotateChar+0x260>)
 8002fac:	791b      	ldrb	r3, [r3, #4]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fabb 	bl	8000534 <__aeabi_i2d>
 8002fbe:	4680      	mov	r8, r0
 8002fc0:	4689      	mov	r9, r1
 8002fc2:	ed97 0b08 	vldr	d0, [r7, #32]
 8002fc6:	f006 fd9f 	bl	8009b08 <sin>
 8002fca:	ec53 2b10 	vmov	r2, r3, d0
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd fb19 	bl	8000608 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4650      	mov	r0, sl
 8002fdc:	4659      	mov	r1, fp
 8002fde:	f7fd f95d 	bl	800029c <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4620      	mov	r0, r4
 8002fe8:	4629      	mov	r1, r5
 8002fea:	f7fd f957 	bl	800029c <__adddf3>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fd fdb7 	bl	8000b68 <__aeabi_d2iz>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	617b      	str	r3, [r7, #20]

				tftSetAddrWindow(newx,newy,newx+1,newy+1);
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	b2d8      	uxtb	r0, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	b2d9      	uxtb	r1, r3
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	3301      	adds	r3, #1
 800300c:	b2da      	uxtb	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f7ff fc01 	bl	800281c <tftSetAddrWindow>

				if((ch&(1<<(7-i)))!=0)
 800301a:	7ffa      	ldrb	r2, [r7, #31]
 800301c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003020:	f1c3 0307 	rsb	r3, r3, #7
 8003024:	fa42 f303 	asr.w	r3, r2, r3
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <tftRotateChar+0x1f4>
				{
					tftPushColor(_fg);
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <tftRotateChar+0x264>)
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fc41 	bl	80028bc <tftPushColor>
 800303a:	e008      	b.n	800304e <tftRotateChar+0x206>
				}
				else
				{
					if (!_transparent)
 800303c:	4b1c      	ldr	r3, [pc, #112]	; (80030b0 <tftRotateChar+0x268>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <tftRotateChar+0x206>
					{
						tftPushColor(_bg);
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <tftRotateChar+0x26c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fc37 	bl	80028bc <tftPushColor>
			for(i=0;i<8;i++)
 800304e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003052:	3301      	adds	r3, #1
 8003054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800305c:	2b07      	cmp	r3, #7
 800305e:	f67f af3c 	bls.w	8002eda <tftRotateChar+0x92>
		for (zz=0;zz<(fz);zz++)
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	3301      	adds	r3, #1
 8003066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003068:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800306c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306e:	429a      	cmp	r2, r3
 8003070:	f6ff af27 	blt.w	8002ec2 <tftRotateChar+0x7a>
					}
				}
			}
		}
		temp+=(fz);
 8003074:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003078:	b29a      	uxth	r2, r3
 800307a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800307c:	4413      	add	r3, r2
 800307e:	867b      	strh	r3, [r7, #50]	; 0x32
	for(j=0; j<cfont.y_size; j++)
 8003080:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003084:	3301      	adds	r3, #1
 8003086:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800308a:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <tftRotateChar+0x260>)
 800308c:	795b      	ldrb	r3, [r3, #5]
 800308e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8003092:	429a      	cmp	r2, r3
 8003094:	f4ff af12 	bcc.w	8002ebc <tftRotateChar+0x74>
	}
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	3738      	adds	r7, #56	; 0x38
 800309e:	46bd      	mov	sp, r7
 80030a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030a4:	f3af 8000 	nop.w
 80030a8:	20000240 	.word	0x20000240
 80030ac:	20000024 	.word	0x20000024
 80030b0:	2000024c 	.word	0x2000024c
 80030b4:	2000024e 	.word	0x2000024e
 80030b8:	1eb851ec 	.word	0x1eb851ec
 80030bc:	3f91eb85 	.word	0x3f91eb85

080030c0 <tftPrint>:
 * x is x-coordinate in pixels
 * y is y-coordinate in pixels
 * deg is angle of rotation in degree
*/
void tftPrint(char *st, int x, int y, int deg)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	; 0x30
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
	int stl, i;
	int lettercount = 0;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
	int xvalue = x;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	61fb      	str	r3, [r7, #28]
	int yvalue = y;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	61bb      	str	r3, [r7, #24]


	stl = strlen(st);
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7fd f880 	bl	80001e0 <strlen>
 80030e0:	4603      	mov	r3, r0
 80030e2:	617b      	str	r3, [r7, #20]

	if (x==RIGHT)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f113 0f02 	cmn.w	r3, #2
 80030ea:	d10a      	bne.n	8003102 <tftPrint+0x42>
	{
		x=(width+1)-(stl*cfont.x_size);
 80030ec:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <tftPrint+0x128>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	4b3e      	ldr	r3, [pc, #248]	; (80031ec <tftPrint+0x12c>)
 80030f4:	791b      	ldrb	r3, [r3, #4]
 80030f6:	4619      	mov	r1, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	60bb      	str	r3, [r7, #8]
	}
	if (x==CENTER)
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d10d      	bne.n	8003126 <tftPrint+0x66>
	{
		x=((height+1)-(stl*cfont.x_size))/2;
 800310a:	4b39      	ldr	r3, [pc, #228]	; (80031f0 <tftPrint+0x130>)
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	4b36      	ldr	r3, [pc, #216]	; (80031ec <tftPrint+0x12c>)
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	4619      	mov	r1, r3
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	0fda      	lsrs	r2, r3, #31
 8003120:	4413      	add	r3, r2
 8003122:	105b      	asrs	r3, r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
	}
	for (i=0;i<stl;i++) // write each character of string onto screen
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	e053      	b.n	80031d4 <tftPrint+0x114>
	{
		lettercount++;
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	3301      	adds	r3, #1
 8003130:	623b      	str	r3, [r7, #32]

		// check wheter char shall be rotated
		if (deg==0)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d112      	bne.n	800315e <tftPrint+0x9e>
		{
			tftPrintChar(*st++,xvalue, y);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1c5a      	adds	r2, r3, #1
 800313c:	60fa      	str	r2, [r7, #12]
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	69f9      	ldr	r1, [r7, #28]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fd87 	bl	8002c58 <tftPrintChar>
			xvalue=x+(lettercount*(cfont.x_size)); // go to next letter position in x direction
 800314a:	4b28      	ldr	r3, [pc, #160]	; (80031ec <tftPrint+0x12c>)
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	461a      	mov	r2, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	fb02 f303 	mul.w	r3, r2, r3
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e00a      	b.n	8003174 <tftPrint+0xb4>
		}
		else
		{
			tftRotateChar(*st++, x, y, i, deg);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	60fa      	str	r2, [r7, #12]
 8003164:	7818      	ldrb	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	f7ff fe6a 	bl	8002e48 <tftRotateChar>
		}
		if(lettercount>((tftGetWidth()/cfont.x_size)-1)) //check if max letters in one line is reached
 8003174:	f000 f8a8 	bl	80032c8 <tftGetWidth>
 8003178:	4603      	mov	r3, r0
 800317a:	461a      	mov	r2, r3
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <tftPrint+0x12c>)
 800317e:	791b      	ldrb	r3, [r3, #4]
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	461a      	mov	r2, r3
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	4293      	cmp	r3, r2
 800318c:	db1f      	blt.n	80031ce <tftPrint+0x10e>
		{
			xvalue=0; //if so set x to zero
 800318e:	2300      	movs	r3, #0
 8003190:	61fb      	str	r3, [r7, #28]
			lettercount=0;
 8003192:	2300      	movs	r3, #0
 8003194:	623b      	str	r3, [r7, #32]
			yvalue=y+cfont.y_size;
 8003196:	4b15      	ldr	r3, [pc, #84]	; (80031ec <tftPrint+0x12c>)
 8003198:	795b      	ldrb	r3, [r3, #5]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4413      	add	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]

			if(yvalue>(tftGetHeight()-cfont.y_size)) // check if max letters on screen is reached
 80031a2:	f000 f89d 	bl	80032e0 <tftGetHeight>
 80031a6:	4603      	mov	r3, r0
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <tftPrint+0x12c>)
 80031ac:	795b      	ldrb	r3, [r3, #5]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	dd09      	ble.n	80031ca <tftPrint+0x10a>
			{
				delayms(2000); // if so wait for 2s
 80031b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80031ba:	f7ff f9ed 	bl	8002598 <delayms>
				tftFillScreen(tft_BLACK); // clear screen
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f818 	bl	80031f4 <tftFillScreen>
				y=0; // start at top left of new Page
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
 80031c8:	e001      	b.n	80031ce <tftPrint+0x10e>
			}
			else
			{
				y=yvalue; // else got to next line
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	607b      	str	r3, [r7, #4]
	for (i=0;i<stl;i++) // write each character of string onto screen
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	3301      	adds	r3, #1
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dba7      	blt.n	800312c <tftPrint+0x6c>
			}

		}

	}
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	2000001c 	.word	0x2000001c
 80031ec:	20000240 	.word	0x20000240
 80031f0:	2000001e 	.word	0x2000001e

080031f4 <tftFillScreen>:
*********************************************************************/


// Function that fills screen with one color
void tftFillScreen(uint16_t color)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	4603      	mov	r3, r0
 80031fc:	80fb      	strh	r3, [r7, #6]
	tftFillRect(0, 0,width,height, color);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <tftFillScreen+0x2c>)
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b21a      	sxth	r2, r3
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <tftFillScreen+0x30>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b219      	sxth	r1, r3
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	460b      	mov	r3, r1
 8003210:	2100      	movs	r1, #0
 8003212:	2000      	movs	r0, #0
 8003214:	f7ff fb6e 	bl	80028f4 <tftFillRect>
}
 8003218:	bf00      	nop
 800321a:	3708      	adds	r7, #8
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000001c 	.word	0x2000001c
 8003224:	2000001e 	.word	0x2000001e

08003228 <tftSetRotation>:
 * POTRAIT: x_max=128px y_max=160px
 * LANDSCAPE: x_max=160px y_max=128px
 * choose Between: PORTRAIT; POTRAIT_FLIP; LANDSCAPE; LANDSCAPE_FLIP
 */
void tftSetRotation(uint8_t m)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
	uint8_t rotation = m % 4; // can't be higher than 3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	73fb      	strb	r3, [r7, #15]
	tftSendCmd(ST7735_MADCTL);
 800323a:	2036      	movs	r0, #54	; 0x36
 800323c:	f7ff f9ce 	bl	80025dc <tftSendCmd>

	switch (rotation)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d836      	bhi.n	80032b4 <tftSetRotation+0x8c>
 8003246:	a201      	add	r2, pc, #4	; (adr r2, 800324c <tftSetRotation+0x24>)
 8003248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324c:	0800325d 	.word	0x0800325d
 8003250:	08003271 	.word	0x08003271
 8003254:	08003285 	.word	0x08003285
 8003258:	08003299 	.word	0x08003299
	{
		case PORTRAIT:
		{
		tftSendData(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 800325c:	20c0      	movs	r0, #192	; 0xc0
 800325e:	f7ff f9d1 	bl	8002604 <tftSendData>
		width  = ST7735_TFTWIDTH;
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <tftSetRotation+0x94>)
 8003264:	2280      	movs	r2, #128	; 0x80
 8003266:	801a      	strh	r2, [r3, #0]
		height = ST7735_TFTHEIGHT;
 8003268:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <tftSetRotation+0x98>)
 800326a:	22a0      	movs	r2, #160	; 0xa0
 800326c:	801a      	strh	r2, [r3, #0]
		break;
 800326e:	e01d      	b.n	80032ac <tftSetRotation+0x84>
		}
	   case LANDSCAPE:
	   {
		   tftSendData(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 8003270:	20a0      	movs	r0, #160	; 0xa0
 8003272:	f7ff f9c7 	bl	8002604 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <tftSetRotation+0x94>)
 8003278:	22a0      	movs	r2, #160	; 0xa0
 800327a:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <tftSetRotation+0x98>)
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	801a      	strh	r2, [r3, #0]
		   break;
 8003282:	e013      	b.n	80032ac <tftSetRotation+0x84>
	   }
	   case PORTRAIT_FLIP:
	   {
		   tftSendData(MADCTL_RGB);
 8003284:	2000      	movs	r0, #0
 8003286:	f7ff f9bd 	bl	8002604 <tftSendData>
		   width  = ST7735_TFTWIDTH;
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <tftSetRotation+0x94>)
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTHEIGHT;
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <tftSetRotation+0x98>)
 8003292:	22a0      	movs	r2, #160	; 0xa0
 8003294:	801a      	strh	r2, [r3, #0]
		   break;
 8003296:	e009      	b.n	80032ac <tftSetRotation+0x84>
	   }
	   case LANDSCAPE_FLIP:
	   {
		   tftSendData(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 8003298:	2060      	movs	r0, #96	; 0x60
 800329a:	f7ff f9b3 	bl	8002604 <tftSendData>
		   width  = ST7735_TFTHEIGHT;
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <tftSetRotation+0x94>)
 80032a0:	22a0      	movs	r2, #160	; 0xa0
 80032a2:	801a      	strh	r2, [r3, #0]
		   height = ST7735_TFTWIDTH;
 80032a4:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <tftSetRotation+0x98>)
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	801a      	strh	r2, [r3, #0]
		   break;
 80032aa:	bf00      	nop
	   {
		   return;
	   }
	}

	orientation = m;
 80032ac:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <tftSetRotation+0x9c>)
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	7013      	strb	r3, [r2, #0]
 80032b2:	e000      	b.n	80032b6 <tftSetRotation+0x8e>
		   return;
 80032b4:	bf00      	nop
}
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	2000001c 	.word	0x2000001c
 80032c0:	2000001e 	.word	0x2000001e
 80032c4:	2000023c 	.word	0x2000023c

080032c8 <tftGetWidth>:
	tftSendCmd(ST7735_DISPON);
}


uint8_t tftGetWidth()
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
	return(width); // width depends on Rotation Mode
 80032cc:	4b03      	ldr	r3, [pc, #12]	; (80032dc <tftGetWidth+0x14>)
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	2000001c 	.word	0x2000001c

080032e0 <tftGetHeight>:


uint8_t tftGetHeight()
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
	return(height); // height depends on Rotation Mode
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <tftGetHeight+0x14>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	2000001e 	.word	0x2000001e

080032f8 <initTOFSensorData>:
//--------------------- SENSOR FUNCTIONS ------------------------

// Function to initialize the TOF sensor
// Initializes the sensor with given address, I2C interface, ranging profile, and measurement range.
void initTOFSensorData(TOFSensor_t* sensor, I2C_TypeDef *i2c_tof, uint16_t TOF_address_used, uint16_t Ranging_Profiles_t, uint16_t measuredRange)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	460b      	mov	r3, r1
 8003308:	80fb      	strh	r3, [r7, #6]
 800330a:	4613      	mov	r3, r2
 800330c:	80bb      	strh	r3, [r7, #4]
	sensor->i2c_tof = i2c_tof;                    // Set the I2C interface (e.g., I2C1, I2C2)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	601a      	str	r2, [r3, #0]
	sensor->TOF_address_used = TOF_address_used;  // Set the TOF sensor address
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	809a      	strh	r2, [r3, #4]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the ranging profile (measurement mode)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	88ba      	ldrh	r2, [r7, #4]
 800331e:	80da      	strh	r2, [r3, #6]
    sensor->measuredRange = measuredRange;        // Set the maximum measurable range
 8003320:	8b3a      	ldrh	r2, [r7, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	60da      	str	r2, [r3, #12]
    sensor->distanceFromTOF = 0;                  // Initialize the measured distance to zero
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	811a      	strh	r2, [r3, #8]
    sensor->enableTOFSensor = false;              // Default is to keep the sensor disabled
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	741a      	strb	r2, [r3, #16]
}
 8003332:	bf00      	nop
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <configTOFSensor>:

// Function to configure the TOF sensor
// Configures the sensor's ranging profile and whether the sensor should be enabled or disabled.
void configTOFSensor(TOFSensor_t* sensor, uint16_t Ranging_Profiles_t, bool enable) {
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	807b      	strh	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
    sensor->Ranging_Profiles_t = Ranging_Profiles_t;  // Set the new ranging profile
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	887a      	ldrh	r2, [r7, #2]
 8003352:	80da      	strh	r2, [r3, #6]
    sensor->enableTOFSensor = enable;                  // Enable or disable the TOF sensor
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	787a      	ldrb	r2, [r7, #1]
 8003358:	741a      	strb	r2, [r3, #16]
    if(sensor->enableTOFSensor == true)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7c1b      	ldrb	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <configTOFSensor+0x2a>
    {
    	TOF_set_ranging_profile(sensor);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f001 fba4 	bl	8004ab0 <TOF_set_ranging_profile>
    }
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <TOF_configure_interrupt>:
 *
 *
 * @returns:     bool: true if the configuration is successful, otherwise false.
 */
bool TOF_configure_interrupt(TOFSensor_t* TOFSENS)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af02      	add	r7, sp, #8
 8003376:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	b25a      	sxtb	r2, r3
 800337e:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <TOF_configure_interrupt+0xc4>)
 8003380:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a2c      	ldr	r2, [pc, #176]	; (8003438 <TOF_configure_interrupt+0xc8>)
 8003388:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

	/* Interrupt on new sample ready */
	i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800338a:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <TOF_configure_interrupt+0xc8>)
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <TOF_configure_interrupt+0xc4>)
 8003390:	f993 3000 	ldrsb.w	r3, [r3]
 8003394:	b2d9      	uxtb	r1, r3
 8003396:	2304      	movs	r3, #4
 8003398:	220a      	movs	r2, #10
 800339a:	f002 fd9d 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800339e:	4603      	mov	r3, r0
 80033a0:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <TOF_configure_interrupt+0x3e>
    {
        return false;
 80033aa:	2300      	movs	r3, #0
 80033ac:	e03e      	b.n	800342c <TOF_configure_interrupt+0xbc>
    }

    /* Configure active low since the pin is pulled-up on most breakout boards */
    uint8_t gpio_hv_mux_active_high[1];
    i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH, gpio_hv_mux_active_high, 1);
 80033ae:	4b22      	ldr	r3, [pc, #136]	; (8003438 <TOF_configure_interrupt+0xc8>)
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <TOF_configure_interrupt+0xc4>)
 80033b4:	f993 3000 	ldrsb.w	r3, [r3]
 80033b8:	b2d9      	uxtb	r1, r3
 80033ba:	f107 030c 	add.w	r3, r7, #12
 80033be:	2201      	movs	r2, #1
 80033c0:	9200      	str	r2, [sp, #0]
 80033c2:	2284      	movs	r2, #132	; 0x84
 80033c4:	f002 fe42 	bl	800604c <i2cBurstRegRead>
 80033c8:	4603      	mov	r3, r0
 80033ca:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80033cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <TOF_configure_interrupt+0x68>
	{
		return false;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e029      	b.n	800342c <TOF_configure_interrupt+0xbc>
	}

    gpio_hv_mux_active_high[0] &= ~0x10;
 80033d8:	7b3b      	ldrb	r3, [r7, #12]
 80033da:	f023 0310 	bic.w	r3, r3, #16
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	733b      	strb	r3, [r7, #12]
    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GPIO_HV_MUX_ACTIVE_HIGH,  gpio_hv_mux_active_high[0]);
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <TOF_configure_interrupt+0xc8>)
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <TOF_configure_interrupt+0xc4>)
 80033e8:	f993 3000 	ldrsb.w	r3, [r3]
 80033ec:	b2d9      	uxtb	r1, r3
 80033ee:	7b3b      	ldrb	r3, [r7, #12]
 80033f0:	2284      	movs	r2, #132	; 0x84
 80033f2:	f002 fd71 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80033f6:	4603      	mov	r3, r0
 80033f8:	73fb      	strb	r3, [r7, #15]
    if (i2c_return != I2C_OK)
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <TOF_configure_interrupt+0x96>
	{
		return false;
 8003402:	2300      	movs	r3, #0
 8003404:	e012      	b.n	800342c <TOF_configure_interrupt+0xbc>
	}

    i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <TOF_configure_interrupt+0xc8>)
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <TOF_configure_interrupt+0xc4>)
 800340c:	f993 3000 	ldrsb.w	r3, [r3]
 8003410:	b2d9      	uxtb	r1, r3
 8003412:	2301      	movs	r3, #1
 8003414:	220b      	movs	r2, #11
 8003416:	f002 fd5f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800341a:	4603      	mov	r3, r0
 800341c:	73fb      	strb	r3, [r7, #15]
	if (i2c_return != I2C_OK)
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <TOF_configure_interrupt+0xba>
	{
		return false;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <TOF_configure_interrupt+0xbc>
	}

    return true;
 800342a:	2301      	movs	r3, #1
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20000026 	.word	0x20000026
 8003438:	20000250 	.word	0x20000250

0800343c <TOF_init_address>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the correct TOF sensor is connected and communication is successful, otherwise false.
 */
bool TOF_init_address(TOFSensor_t* TOFSENS)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	889b      	ldrh	r3, [r3, #4]
 8003448:	b25a      	sxtb	r2, r3
 800344a:	4b12      	ldr	r3, [pc, #72]	; (8003494 <TOF_init_address+0x58>)
 800344c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a11      	ldr	r2, [pc, #68]	; (8003498 <TOF_init_address+0x5c>)
 8003454:	6013      	str	r3, [r2, #0]
	//set i2c clock speed
	//i2cSetClkSpd(TOF_i2c, I2C_CLOCK_400);

	//check correct device by reading the ID
	uint8_t device_id[1];
	I2C_RETURN_CODE_t i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_IDENTIFICATION_MODEL_ID, device_id, 1);
 8003456:	4b10      	ldr	r3, [pc, #64]	; (8003498 <TOF_init_address+0x5c>)
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <TOF_init_address+0x58>)
 800345c:	f993 3000 	ldrsb.w	r3, [r3]
 8003460:	b2d9      	uxtb	r1, r3
 8003462:	f107 030c 	add.w	r3, r7, #12
 8003466:	2201      	movs	r2, #1
 8003468:	9200      	str	r2, [sp, #0]
 800346a:	22c0      	movs	r2, #192	; 0xc0
 800346c:	f002 fdee 	bl	800604c <i2cBurstRegRead>
 8003470:	4603      	mov	r3, r0
 8003472:	73fb      	strb	r3, [r7, #15]

	if (i2c_return != I2C_OK)
 8003474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <TOF_init_address+0x44>
	{
		// returns false, if i2cBurstRegRead was not successful
		return false;
 800347c:	2300      	movs	r3, #0
 800347e:	e005      	b.n	800348c <TOF_init_address+0x50>
	}

	//returns true, if correct TOF sensor is connected, otherwise false
	return (device_id[0] == TOF_VL53L0X_EXPECTED_DEVICE_ID);
 8003480:	7b3b      	ldrb	r3, [r7, #12]
 8003482:	2bee      	cmp	r3, #238	; 0xee
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000026 	.word	0x20000026
 8003498:	20000250 	.word	0x20000250

0800349c <TOF_data_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the sensor is successfully initialized, otherwise false.
 */
bool TOF_data_init(TOFSensor_t* TOFSENS)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	889b      	ldrh	r3, [r3, #4]
 80034a8:	b25a      	sxtb	r2, r3
 80034aa:	4b5a      	ldr	r3, [pc, #360]	; (8003614 <TOF_data_init+0x178>)
 80034ac:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a59      	ldr	r2, [pc, #356]	; (8003618 <TOF_data_init+0x17c>)
 80034b4:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = false;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]

	/* Set 2v8 mode */
	uint8_t vhv_config_scl_sda = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	73bb      	strb	r3, [r7, #14]
	success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, &vhv_config_scl_sda);
 80034be:	4b56      	ldr	r3, [pc, #344]	; (8003618 <TOF_data_init+0x17c>)
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	4b54      	ldr	r3, [pc, #336]	; (8003614 <TOF_data_init+0x178>)
 80034c4:	f993 3000 	ldrsb.w	r3, [r3]
 80034c8:	b2d9      	uxtb	r1, r3
 80034ca:	f107 030e 	add.w	r3, r7, #14
 80034ce:	2289      	movs	r2, #137	; 0x89
 80034d0:	f002 fd50 	bl	8005f74 <i2cReadByteFromSlaveReg>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 80034d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <TOF_data_init+0x48>
	{
		return false;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e092      	b.n	800360a <TOF_data_init+0x16e>
	}

	vhv_config_scl_sda |= 0x01;
 80034e4:	7bbb      	ldrb	r3, [r7, #14]
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	73bb      	strb	r3, [r7, #14]

	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_VHV_CONFIG_PAD_SCL_SDA_EXTSUP_HV, vhv_config_scl_sda);
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <TOF_data_init+0x17c>)
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	4b48      	ldr	r3, [pc, #288]	; (8003614 <TOF_data_init+0x178>)
 80034f4:	f993 3000 	ldrsb.w	r3, [r3]
 80034f8:	b2d9      	uxtb	r1, r3
 80034fa:	7bbb      	ldrb	r3, [r7, #14]
 80034fc:	2289      	movs	r2, #137	; 0x89
 80034fe:	f002 fceb 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003502:	4603      	mov	r3, r0
 8003504:	73fb      	strb	r3, [r7, #15]
	if (success != I2C_OK)
 8003506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <TOF_data_init+0x76>
	{
		return false;
 800350e:	2300      	movs	r3, #0
 8003510:	e07b      	b.n	800360a <TOF_data_init+0x16e>
	}

	/* Set I2C standard mode */
	success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_I2C_MODE, 0x00);
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <TOF_data_init+0x17c>)
 8003514:	6818      	ldr	r0, [r3, #0]
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <TOF_data_init+0x178>)
 8003518:	f993 3000 	ldrsb.w	r3, [r3]
 800351c:	b2d9      	uxtb	r1, r3
 800351e:	2300      	movs	r3, #0
 8003520:	2288      	movs	r2, #136	; 0x88
 8003522:	f002 fcd9 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003526:	4603      	mov	r3, r0
 8003528:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <TOF_data_init+0x17c>)
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	4b39      	ldr	r3, [pc, #228]	; (8003614 <TOF_data_init+0x178>)
 8003530:	f993 3000 	ldrsb.w	r3, [r3]
 8003534:	b2d9      	uxtb	r1, r3
 8003536:	2301      	movs	r3, #1
 8003538:	2280      	movs	r2, #128	; 0x80
 800353a:	f002 fccd 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800353e:	4603      	mov	r3, r0
 8003540:	461a      	mov	r2, r3
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	4013      	ands	r3, r2
 8003546:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003548:	4b33      	ldr	r3, [pc, #204]	; (8003618 <TOF_data_init+0x17c>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <TOF_data_init+0x178>)
 800354e:	f993 3000 	ldrsb.w	r3, [r3]
 8003552:	b2d9      	uxtb	r1, r3
 8003554:	2301      	movs	r3, #1
 8003556:	22ff      	movs	r2, #255	; 0xff
 8003558:	f002 fcbe 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	4013      	ands	r3, r2
 8003564:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8003566:	4b2c      	ldr	r3, [pc, #176]	; (8003618 <TOF_data_init+0x17c>)
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	4b2a      	ldr	r3, [pc, #168]	; (8003614 <TOF_data_init+0x178>)
 800356c:	f993 3000 	ldrsb.w	r3, [r3]
 8003570:	b2d9      	uxtb	r1, r3
 8003572:	2300      	movs	r3, #0
 8003574:	2200      	movs	r2, #0
 8003576:	f002 fcaf 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800357a:	4603      	mov	r3, r0
 800357c:	461a      	mov	r2, r3
 800357e:	7bfb      	ldrb	r3, [r7, #15]
 8003580:	4013      	ands	r3, r2
 8003582:	73fb      	strb	r3, [r7, #15]
	success &= i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, &TOF_stop_variable);
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <TOF_data_init+0x17c>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	4b22      	ldr	r3, [pc, #136]	; (8003614 <TOF_data_init+0x178>)
 800358a:	f993 3000 	ldrsb.w	r3, [r3]
 800358e:	b2d9      	uxtb	r1, r3
 8003590:	4b22      	ldr	r3, [pc, #136]	; (800361c <TOF_data_init+0x180>)
 8003592:	2291      	movs	r2, #145	; 0x91
 8003594:	f002 fcee 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	4013      	ands	r3, r2
 80035a0:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <TOF_data_init+0x17c>)
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <TOF_data_init+0x178>)
 80035a8:	f993 3000 	ldrsb.w	r3, [r3]
 80035ac:	b2d9      	uxtb	r1, r3
 80035ae:	2301      	movs	r3, #1
 80035b0:	2200      	movs	r2, #0
 80035b2:	f002 fc91 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	4013      	ands	r3, r2
 80035be:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 80035c0:	4b15      	ldr	r3, [pc, #84]	; (8003618 <TOF_data_init+0x17c>)
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	4b13      	ldr	r3, [pc, #76]	; (8003614 <TOF_data_init+0x178>)
 80035c6:	f993 3000 	ldrsb.w	r3, [r3]
 80035ca:	b2d9      	uxtb	r1, r3
 80035cc:	2300      	movs	r3, #0
 80035ce:	22ff      	movs	r2, #255	; 0xff
 80035d0:	f002 fc82 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
 80035da:	4013      	ands	r3, r2
 80035dc:	73fb      	strb	r3, [r7, #15]
	success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <TOF_data_init+0x17c>)
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <TOF_data_init+0x178>)
 80035e4:	f993 3000 	ldrsb.w	r3, [r3]
 80035e8:	b2d9      	uxtb	r1, r3
 80035ea:	2300      	movs	r3, #0
 80035ec:	2280      	movs	r2, #128	; 0x80
 80035ee:	f002 fc73 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	4013      	ands	r3, r2
 80035fa:	73fb      	strb	r3, [r7, #15]

	if (success != I2C_OK)
 80035fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <TOF_data_init+0x16c>
	{
		return false;
 8003604:	2300      	movs	r3, #0
 8003606:	e000      	b.n	800360a <TOF_data_init+0x16e>
	}

	return true;
 8003608:	2301      	movs	r3, #1
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20000026 	.word	0x20000026
 8003618:	20000250 	.word	0x20000250
 800361c:	20000254 	.word	0x20000254

08003620 <TOF_get_spad_info_from_nvm>:
 * 				bool * type_is_aperture						indicating whether the SPADs are of the aperture type.
 *
 * @returns:    bool: true if the SPAD information is successfully retrieved, otherwise false.
 */
bool TOF_get_spad_info_from_nvm(TOFSensor_t* TOFSENS, uint8_t * count, bool * type_is_aperture)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	889b      	ldrh	r3, [r3, #4]
 8003630:	b25a      	sxtb	r2, r3
 8003632:	4b8a      	ldr	r3, [pc, #552]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003634:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a89      	ldr	r2, [pc, #548]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 800363c:	6013      	str	r3, [r2, #0]

	uint8_t tmp;

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800363e:	4b88      	ldr	r3, [pc, #544]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	4b86      	ldr	r3, [pc, #536]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003644:	f993 3000 	ldrsb.w	r3, [r3]
 8003648:	b2d9      	uxtb	r1, r3
 800364a:	2301      	movs	r3, #1
 800364c:	2280      	movs	r2, #128	; 0x80
 800364e:	f002 fc43 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003652:	4b83      	ldr	r3, [pc, #524]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	4b81      	ldr	r3, [pc, #516]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003658:	f993 3000 	ldrsb.w	r3, [r3]
 800365c:	b2d9      	uxtb	r1, r3
 800365e:	2301      	movs	r3, #1
 8003660:	22ff      	movs	r2, #255	; 0xff
 8003662:	f002 fc39 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8003666:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003668:	6818      	ldr	r0, [r3, #0]
 800366a:	4b7c      	ldr	r3, [pc, #496]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 800366c:	f993 3000 	ldrsb.w	r3, [r3]
 8003670:	b2d9      	uxtb	r1, r3
 8003672:	2300      	movs	r3, #0
 8003674:	2200      	movs	r2, #0
 8003676:	f002 fc2f 	bl	8005ed8 <i2cSendByteToSlaveReg>

	uint8_t data = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 800367e:	4b78      	ldr	r3, [pc, #480]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	4b76      	ldr	r3, [pc, #472]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003684:	f993 3000 	ldrsb.w	r3, [r3]
 8003688:	b2d9      	uxtb	r1, r3
 800368a:	2306      	movs	r3, #6
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	f002 fc23 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	4b71      	ldr	r3, [pc, #452]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003698:	f993 3000 	ldrsb.w	r3, [r3]
 800369c:	b2d9      	uxtb	r1, r3
 800369e:	f107 0315 	add.w	r3, r7, #21
 80036a2:	2283      	movs	r2, #131	; 0x83
 80036a4:	f002 fc66 	bl	8005f74 <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data | 0x04);
 80036a8:	4b6d      	ldr	r3, [pc, #436]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4b6b      	ldr	r3, [pc, #428]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80036ae:	f993 3000 	ldrsb.w	r3, [r3]
 80036b2:	b2d9      	uxtb	r1, r3
 80036b4:	7d7b      	ldrb	r3, [r7, #21]
 80036b6:	f043 0304 	orr.w	r3, r3, #4
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2283      	movs	r2, #131	; 0x83
 80036be:	f002 fc0b 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x07);
 80036c2:	4b67      	ldr	r3, [pc, #412]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80036c8:	f993 3000 	ldrsb.w	r3, [r3]
 80036cc:	b2d9      	uxtb	r1, r3
 80036ce:	2307      	movs	r3, #7
 80036d0:	22ff      	movs	r2, #255	; 0xff
 80036d2:	f002 fc01 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x01);
 80036d6:	4b62      	ldr	r3, [pc, #392]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	4b60      	ldr	r3, [pc, #384]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80036dc:	f993 3000 	ldrsb.w	r3, [r3]
 80036e0:	b2d9      	uxtb	r1, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	2281      	movs	r2, #129	; 0x81
 80036e6:	f002 fbf7 	bl	8005ed8 <i2cSendByteToSlaveReg>
	/// TF_July25 deleted by comment-> i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80036f0:	f993 3000 	ldrsb.w	r3, [r3]
 80036f4:	b2d9      	uxtb	r1, r3
 80036f6:	2301      	movs	r3, #1
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	f002 fbed 	bl	8005ed8 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x94, 0x6b);
 80036fe:	4b58      	ldr	r3, [pc, #352]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003700:	6818      	ldr	r0, [r3, #0]
 8003702:	4b56      	ldr	r3, [pc, #344]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003704:	f993 3000 	ldrsb.w	r3, [r3]
 8003708:	b2d9      	uxtb	r1, r3
 800370a:	236b      	movs	r3, #107	; 0x6b
 800370c:	2294      	movs	r2, #148	; 0x94
 800370e:	f002 fbe3 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x00);
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	4b51      	ldr	r3, [pc, #324]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003718:	f993 3000 	ldrsb.w	r3, [r3]
 800371c:	b2d9      	uxtb	r1, r3
 800371e:	2300      	movs	r3, #0
 8003720:	2283      	movs	r2, #131	; 0x83
 8003722:	f002 fbd9 	bl	8005ed8 <i2cSendByteToSlaveReg>

	data = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	757b      	strb	r3, [r7, #21]
	I2C_RETURN_CODE_t i2c_return;

	do
		{
			i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_INTERNAL_CONFIG_0x83, &data, 1);
 800372a:	4b4d      	ldr	r3, [pc, #308]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	4b4b      	ldr	r3, [pc, #300]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003730:	f993 3000 	ldrsb.w	r3, [r3]
 8003734:	b2d9      	uxtb	r1, r3
 8003736:	f107 0315 	add.w	r3, r7, #21
 800373a:	2201      	movs	r2, #1
 800373c:	9200      	str	r2, [sp, #0]
 800373e:	2283      	movs	r2, #131	; 0x83
 8003740:	f002 fc84 	bl	800604c <i2cBurstRegRead>
 8003744:	4603      	mov	r3, r0
 8003746:	75fb      	strb	r3, [r7, #23]
		} while (i2c_return == I2C_OK && data == 0x00);
 8003748:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <TOF_get_spad_info_from_nvm+0x136>
 8003750:	7d7b      	ldrb	r3, [r7, #21]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0e9      	beq.n	800372a <TOF_get_spad_info_from_nvm+0x10a>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, 0x01);
 8003756:	4b42      	ldr	r3, [pc, #264]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	4b40      	ldr	r3, [pc, #256]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 800375c:	f993 3000 	ldrsb.w	r3, [r3]
 8003760:	b2d9      	uxtb	r1, r3
 8003762:	2301      	movs	r3, #1
 8003764:	2283      	movs	r2, #131	; 0x83
 8003766:	f002 fbb7 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, 0x92, &tmp);
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003770:	f993 3000 	ldrsb.w	r3, [r3]
 8003774:	b2d9      	uxtb	r1, r3
 8003776:	f107 0316 	add.w	r3, r7, #22
 800377a:	2292      	movs	r2, #146	; 0x92
 800377c:	f002 fbfa 	bl	8005f74 <i2cReadByteFromSlaveReg>

	*count = tmp & 0x7f;
 8003780:	7dbb      	ldrb	r3, [r7, #22]
 8003782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	09db      	lsrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	701a      	strb	r2, [r3, #0]

	data = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	757b      	strb	r3, [r7, #21]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_NON, 0x00);
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4b2b      	ldr	r3, [pc, #172]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80037ae:	f993 3000 	ldrsb.w	r3, [r3]
 80037b2:	b2d9      	uxtb	r1, r3
 80037b4:	2300      	movs	r3, #0
 80037b6:	2281      	movs	r2, #129	; 0x81
 80037b8:	f002 fb8e 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x06);
 80037bc:	4b28      	ldr	r3, [pc, #160]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	4b26      	ldr	r3, [pc, #152]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80037c2:	f993 3000 	ldrsb.w	r3, [r3]
 80037c6:	b2d9      	uxtb	r1, r3
 80037c8:	2306      	movs	r3, #6
 80037ca:	22ff      	movs	r2, #255	; 0xff
 80037cc:	f002 fb84 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, &data);
 80037d0:	4b23      	ldr	r3, [pc, #140]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	4b21      	ldr	r3, [pc, #132]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80037d6:	f993 3000 	ldrsb.w	r3, [r3]
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	f107 0315 	add.w	r3, r7, #21
 80037e0:	2283      	movs	r2, #131	; 0x83
 80037e2:	f002 fbc7 	bl	8005f74 <i2cReadByteFromSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x83, data  & ~0x04);
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	4b1c      	ldr	r3, [pc, #112]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 80037ec:	f993 3000 	ldrsb.w	r3, [r3]
 80037f0:	b2d9      	uxtb	r1, r3
 80037f2:	7d7b      	ldrb	r3, [r7, #21]
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2283      	movs	r2, #131	; 0x83
 80037fc:	f002 fb6c 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4b15      	ldr	r3, [pc, #84]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003806:	f993 3000 	ldrsb.w	r3, [r3]
 800380a:	b2d9      	uxtb	r1, r3
 800380c:	2301      	movs	r3, #1
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	f002 fb62 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4b10      	ldr	r3, [pc, #64]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 800381a:	f993 3000 	ldrsb.w	r3, [r3]
 800381e:	b2d9      	uxtb	r1, r3
 8003820:	2301      	movs	r3, #1
 8003822:	2200      	movs	r2, #0
 8003824:	f002 fb58 	bl	8005ed8 <i2cSendByteToSlaveReg>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 800382e:	f993 3000 	ldrsb.w	r3, [r3]
 8003832:	b2d9      	uxtb	r1, r3
 8003834:	2300      	movs	r3, #0
 8003836:	22ff      	movs	r2, #255	; 0xff
 8003838:	f002 fb4e 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <TOF_get_spad_info_from_nvm+0x240>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4b06      	ldr	r3, [pc, #24]	; (800385c <TOF_get_spad_info_from_nvm+0x23c>)
 8003842:	f993 3000 	ldrsb.w	r3, [r3]
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	2300      	movs	r3, #0
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	f002 fb44 	bl	8005ed8 <i2cSendByteToSlaveReg>

	return true;
 8003850:	2301      	movs	r3, #1
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000026 	.word	0x20000026
 8003860:	20000250 	.word	0x20000250

08003864 <TOF_set_spads_from_nvm>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the SPAD configuration is successful, otherwise false.
 */
bool TOF_set_spads_from_nvm(TOFSensor_t* TOFSENS)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af02      	add	r7, sp, #8
 800386a:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	889b      	ldrh	r3, [r3, #4]
 8003870:	b25a      	sxtb	r2, r3
 8003872:	4b6f      	ldr	r3, [pc, #444]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 8003874:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a6e      	ldr	r2, [pc, #440]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 800387c:	6013      	str	r3, [r2, #0]

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!TOF_get_spad_info_from_nvm(TOFSENS, &spad_count, &spad_type_is_aperture))
 800387e:	f107 0213 	add.w	r2, r7, #19
 8003882:	f107 0314 	add.w	r3, r7, #20
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff fec9 	bl	8003620 <TOF_get_spad_info_from_nvm>
 800388e:	4603      	mov	r3, r0
 8003890:	f083 0301 	eor.w	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <TOF_set_spads_from_nvm+0x3a>
	{
		return false;
 800389a:	2300      	movs	r3, #0
 800389c:	e0c4      	b.n	8003a28 <TOF_set_spads_from_nvm+0x1c4>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800389e:	4b65      	ldr	r3, [pc, #404]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80038a4:	f993 3000 	ldrsb.w	r3, [r3]
 80038a8:	b2d9      	uxtb	r1, r3
 80038aa:	f107 030c 	add.w	r3, r7, #12
 80038ae:	2206      	movs	r2, #6
 80038b0:	9200      	str	r2, [sp, #0]
 80038b2:	22b0      	movs	r2, #176	; 0xb0
 80038b4:	f002 fbca 	bl	800604c <i2cBurstRegRead>

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80038b8:	4b5e      	ldr	r3, [pc, #376]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80038be:	f993 3000 	ldrsb.w	r3, [r3]
 80038c2:	b2d9      	uxtb	r1, r3
 80038c4:	2301      	movs	r3, #1
 80038c6:	22ff      	movs	r2, #255	; 0xff
 80038c8:	f002 fb06 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80038ce:	6818      	ldr	r0, [r3, #0]
 80038d0:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80038d2:	f993 3000 	ldrsb.w	r3, [r3]
 80038d6:	b2d9      	uxtb	r1, r3
 80038d8:	2300      	movs	r3, #0
 80038da:	224f      	movs	r2, #79	; 0x4f
 80038dc:	f002 fafc 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 80038e0:	4b54      	ldr	r3, [pc, #336]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	4b52      	ldr	r3, [pc, #328]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80038e6:	f993 3000 	ldrsb.w	r3, [r3]
 80038ea:	b2d9      	uxtb	r1, r3
 80038ec:	232c      	movs	r3, #44	; 0x2c
 80038ee:	224e      	movs	r2, #78	; 0x4e
 80038f0:	f002 faf2 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 80038f4:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80038fa:	f993 3000 	ldrsb.w	r3, [r3]
 80038fe:	b2d9      	uxtb	r1, r3
 8003900:	2300      	movs	r3, #0
 8003902:	22ff      	movs	r2, #255	; 0xff
 8003904:	f002 fae8 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8003908:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	4b48      	ldr	r3, [pc, #288]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 800390e:	f993 3000 	ldrsb.w	r3, [r3]
 8003912:	b2d9      	uxtb	r1, r3
 8003914:	23b4      	movs	r3, #180	; 0xb4
 8003916:	22b6      	movs	r2, #182	; 0xb6
 8003918:	f002 fade 	bl	8005ed8 <i2cSendByteToSlaveReg>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800391c:	7cfb      	ldrb	r3, [r7, #19]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <TOF_set_spads_from_nvm+0xc2>
 8003922:	230c      	movs	r3, #12
 8003924:	e000      	b.n	8003928 <TOF_set_spads_from_nvm+0xc4>
 8003926:	2300      	movs	r3, #0
 8003928:	757b      	strb	r3, [r7, #21]
	uint8_t spads_enabled = 0;
 800392a:	2300      	movs	r3, #0
 800392c:	75fb      	strb	r3, [r7, #23]

	for (uint8_t i = 0; i < 48; i++)
 800392e:	2300      	movs	r3, #0
 8003930:	75bb      	strb	r3, [r7, #22]
 8003932:	e039      	b.n	80039a8 <TOF_set_spads_from_nvm+0x144>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8003934:	7dba      	ldrb	r2, [r7, #22]
 8003936:	7d7b      	ldrb	r3, [r7, #21]
 8003938:	429a      	cmp	r2, r3
 800393a:	d303      	bcc.n	8003944 <TOF_set_spads_from_nvm+0xe0>
 800393c:	7d3b      	ldrb	r3, [r7, #20]
 800393e:	7dfa      	ldrb	r2, [r7, #23]
 8003940:	429a      	cmp	r2, r3
 8003942:	d11a      	bne.n	800397a <TOF_set_spads_from_nvm+0x116>
		{
		// This bit is lower than the first one that should be enabled, or
		// (reference_spad_count) bits have already been enabled, so zero this bit
		ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8003944:	7dbb      	ldrb	r3, [r7, #22]
 8003946:	08db      	lsrs	r3, r3, #3
 8003948:	b2d8      	uxtb	r0, r3
 800394a:	4603      	mov	r3, r0
 800394c:	3318      	adds	r3, #24
 800394e:	443b      	add	r3, r7
 8003950:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003954:	b25a      	sxtb	r2, r3
 8003956:	7dbb      	ldrb	r3, [r7, #22]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f303 	lsl.w	r3, r1, r3
 8003962:	b25b      	sxtb	r3, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	b25b      	sxtb	r3, r3
 8003968:	4013      	ands	r3, r2
 800396a:	b25a      	sxtb	r2, r3
 800396c:	4603      	mov	r3, r0
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	3318      	adds	r3, #24
 8003972:	443b      	add	r3, r7
 8003974:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8003978:	e013      	b.n	80039a2 <TOF_set_spads_from_nvm+0x13e>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 800397a:	7dbb      	ldrb	r3, [r7, #22]
 800397c:	08db      	lsrs	r3, r3, #3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3318      	adds	r3, #24
 8003982:	443b      	add	r3, r7
 8003984:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003988:	461a      	mov	r2, r3
 800398a:	7dbb      	ldrb	r3, [r7, #22]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	fa42 f303 	asr.w	r3, r2, r3
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <TOF_set_spads_from_nvm+0x13e>
		{
		spads_enabled++;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	3301      	adds	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < 48; i++)
 80039a2:	7dbb      	ldrb	r3, [r7, #22]
 80039a4:	3301      	adds	r3, #1
 80039a6:	75bb      	strb	r3, [r7, #22]
 80039a8:	7dbb      	ldrb	r3, [r7, #22]
 80039aa:	2b2f      	cmp	r3, #47	; 0x2f
 80039ac:	d9c2      	bls.n	8003934 <TOF_set_spads_from_nvm+0xd0>
		}
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map[0]);
 80039ae:	4b21      	ldr	r3, [pc, #132]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	4b1f      	ldr	r3, [pc, #124]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80039b4:	f993 3000 	ldrsb.w	r3, [r3]
 80039b8:	b2d9      	uxtb	r1, r3
 80039ba:	7b3b      	ldrb	r3, [r7, #12]
 80039bc:	22b0      	movs	r2, #176	; 0xb0
 80039be:	f002 fa8b 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 1, ref_spad_map[1]);
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80039c8:	f993 3000 	ldrsb.w	r3, [r3]
 80039cc:	b2d9      	uxtb	r1, r3
 80039ce:	7b7b      	ldrb	r3, [r7, #13]
 80039d0:	22b1      	movs	r2, #177	; 0xb1
 80039d2:	f002 fa81 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 2, ref_spad_map[2]);
 80039d6:	4b17      	ldr	r3, [pc, #92]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80039dc:	f993 3000 	ldrsb.w	r3, [r3]
 80039e0:	b2d9      	uxtb	r1, r3
 80039e2:	7bbb      	ldrb	r3, [r7, #14]
 80039e4:	22b2      	movs	r2, #178	; 0xb2
 80039e6:	f002 fa77 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 3, ref_spad_map[3]);
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 80039f0:	f993 3000 	ldrsb.w	r3, [r3]
 80039f4:	b2d9      	uxtb	r1, r3
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	22b3      	movs	r2, #179	; 0xb3
 80039fa:	f002 fa6d 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 4, ref_spad_map[4]);
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 8003a00:	6818      	ldr	r0, [r3, #0]
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 8003a04:	f993 3000 	ldrsb.w	r3, [r3]
 8003a08:	b2d9      	uxtb	r1, r3
 8003a0a:	7c3b      	ldrb	r3, [r7, #16]
 8003a0c:	22b4      	movs	r2, #180	; 0xb4
 8003a0e:	f002 fa63 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0 + 5, ref_spad_map[5]);
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <TOF_set_spads_from_nvm+0x1d0>)
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <TOF_set_spads_from_nvm+0x1cc>)
 8003a18:	f993 3000 	ldrsb.w	r3, [r3]
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	7c7b      	ldrb	r3, [r7, #17]
 8003a20:	22b5      	movs	r2, #181	; 0xb5
 8003a22:	f002 fa59 	bl	8005ed8 <i2cSendByteToSlaveReg>

	return true;
 8003a26:	2301      	movs	r3, #1
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	20000026 	.word	0x20000026
 8003a34:	20000250 	.word	0x20000250

08003a38 <TOF_load_default_tuning_settings>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the tuning configuration was successful, otherwise false.
 */
bool TOF_load_default_tuning_settings(TOFSensor_t* TOFSENS)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	889b      	ldrh	r3, [r3, #4]
 8003a44:	b25a      	sxtb	r2, r3
 8003a46:	4bc6      	ldr	r3, [pc, #792]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003a48:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4ac5      	ldr	r2, [pc, #788]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003a50:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003a52:	4bc4      	ldr	r3, [pc, #784]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	4bc2      	ldr	r3, [pc, #776]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003a58:	f993 3000 	ldrsb.w	r3, [r3]
 8003a5c:	b2d9      	uxtb	r1, r3
 8003a5e:	2301      	movs	r3, #1
 8003a60:	22ff      	movs	r2, #255	; 0xff
 8003a62:	f002 fa39 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x00);
 8003a6a:	4bbe      	ldr	r3, [pc, #760]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	4bbc      	ldr	r3, [pc, #752]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003a70:	f993 3000 	ldrsb.w	r3, [r3]
 8003a74:	b2d9      	uxtb	r1, r3
 8003a76:	2300      	movs	r3, #0
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f002 fa2d 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	461a      	mov	r2, r3
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	4013      	ands	r3, r2
 8003a86:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003a88:	4bb6      	ldr	r3, [pc, #728]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4bb4      	ldr	r3, [pc, #720]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003a8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a92:	b2d9      	uxtb	r1, r3
 8003a94:	2300      	movs	r3, #0
 8003a96:	22ff      	movs	r2, #255	; 0xff
 8003a98:	f002 fa1e 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_RANGE_CONFIG, TOF_DEFAULT_0x00);
 8003aa6:	4baf      	ldr	r3, [pc, #700]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	4bad      	ldr	r3, [pc, #692]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003aac:	f993 3000 	ldrsb.w	r3, [r3]
 8003ab0:	b2d9      	uxtb	r1, r3
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2209      	movs	r2, #9
 8003ab6:	f002 fa0f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003aba:	4603      	mov	r3, r0
 8003abc:	461a      	mov	r2, r3
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x10, TOF_DEFAULT_0x00);
 8003ac4:	4ba7      	ldr	r3, [pc, #668]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	4ba5      	ldr	r3, [pc, #660]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003aca:	f993 3000 	ldrsb.w	r3, [r3]
 8003ace:	b2d9      	uxtb	r1, r3
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	f002 fa00 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x11, TOF_DEFAULT_0x00);
 8003ae2:	4ba0      	ldr	r3, [pc, #640]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	4b9e      	ldr	r3, [pc, #632]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003ae8:	f993 3000 	ldrsb.w	r3, [r3]
 8003aec:	b2d9      	uxtb	r1, r3
 8003aee:	2300      	movs	r3, #0
 8003af0:	2211      	movs	r2, #17
 8003af2:	f002 f9f1 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003af6:	4603      	mov	r3, r0
 8003af8:	461a      	mov	r2, r3
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	4013      	ands	r3, r2
 8003afe:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x24, TOF_DEFAULT_0x01);
 8003b00:	4b98      	ldr	r3, [pc, #608]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	4b96      	ldr	r3, [pc, #600]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b06:	f993 3000 	ldrsb.w	r3, [r3]
 8003b0a:	b2d9      	uxtb	r1, r3
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	2224      	movs	r2, #36	; 0x24
 8003b10:	f002 f9e2 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x25, TOF_DEFAULT_0xFF);
 8003b1e:	4b91      	ldr	r3, [pc, #580]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b20:	6818      	ldr	r0, [r3, #0]
 8003b22:	4b8f      	ldr	r3, [pc, #572]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b24:	f993 3000 	ldrsb.w	r3, [r3]
 8003b28:	b2d9      	uxtb	r1, r3
 8003b2a:	23ff      	movs	r3, #255	; 0xff
 8003b2c:	2225      	movs	r2, #37	; 0x25
 8003b2e:	f002 f9d3 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x75, TOF_DEFAULT_0x00);
 8003b3c:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b3e:	6818      	ldr	r0, [r3, #0]
 8003b40:	4b87      	ldr	r3, [pc, #540]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b42:	f993 3000 	ldrsb.w	r3, [r3]
 8003b46:	b2d9      	uxtb	r1, r3
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2275      	movs	r2, #117	; 0x75
 8003b4c:	f002 f9c4 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003b50:	4603      	mov	r3, r0
 8003b52:	461a      	mov	r2, r3
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	4013      	ands	r3, r2
 8003b58:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003b5a:	4b82      	ldr	r3, [pc, #520]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b60:	f993 3000 	ldrsb.w	r3, [r3]
 8003b64:	b2d9      	uxtb	r1, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	f002 f9b5 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	4013      	ands	r3, r2
 8003b76:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, TOF_DEFAULT_0x2C);
 8003b78:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	4b78      	ldr	r3, [pc, #480]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b7e:	f993 3000 	ldrsb.w	r3, [r3]
 8003b82:	b2d9      	uxtb	r1, r3
 8003b84:	232c      	movs	r3, #44	; 0x2c
 8003b86:	224e      	movs	r2, #78	; 0x4e
 8003b88:	f002 f9a6 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	461a      	mov	r2, r3
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	4013      	ands	r3, r2
 8003b94:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x00);
 8003b96:	4b73      	ldr	r3, [pc, #460]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	4b71      	ldr	r3, [pc, #452]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003b9c:	f993 3000 	ldrsb.w	r3, [r3]
 8003ba0:	b2d9      	uxtb	r1, r3
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2248      	movs	r2, #72	; 0x48
 8003ba6:	f002 f997 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003baa:	4603      	mov	r3, r0
 8003bac:	461a      	mov	r2, r3
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x20);
 8003bb4:	4b6b      	ldr	r3, [pc, #428]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003bba:	f993 3000 	ldrsb.w	r3, [r3]
 8003bbe:	b2d9      	uxtb	r1, r3
 8003bc0:	2320      	movs	r3, #32
 8003bc2:	2230      	movs	r2, #48	; 0x30
 8003bc4:	f002 f988 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	461a      	mov	r2, r3
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003bd2:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8003bdc:	b2d9      	uxtb	r1, r3
 8003bde:	2300      	movs	r3, #0
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	f002 f979 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003be6:	4603      	mov	r3, r0
 8003be8:	461a      	mov	r2, r3
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	4013      	ands	r3, r2
 8003bee:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_ALGO_PHASECAL, TOF_DEFAULT_0x09);
 8003bf0:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003bf6:	f993 3000 	ldrsb.w	r3, [r3]
 8003bfa:	b2d9      	uxtb	r1, r3
 8003bfc:	2309      	movs	r3, #9
 8003bfe:	2230      	movs	r2, #48	; 0x30
 8003c00:	f002 f96a 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x54, TOF_DEFAULT_0x00);
 8003c0e:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	4b53      	ldr	r3, [pc, #332]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003c14:	f993 3000 	ldrsb.w	r3, [r3]
 8003c18:	b2d9      	uxtb	r1, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2254      	movs	r2, #84	; 0x54
 8003c1e:	f002 f95b 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 8003c2c:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003c32:	f993 3000 	ldrsb.w	r3, [r3]
 8003c36:	b2d9      	uxtb	r1, r3
 8003c38:	2304      	movs	r3, #4
 8003c3a:	2231      	movs	r2, #49	; 0x31
 8003c3c:	f002 f94c 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	4013      	ands	r3, r2
 8003c48:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_GLOBAL_CONFIG_VCSEL_WIDTH, TOF_DEFAULT_0x03);
 8003c4a:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003c50:	f993 3000 	ldrsb.w	r3, [r3]
 8003c54:	b2d9      	uxtb	r1, r3
 8003c56:	2303      	movs	r3, #3
 8003c58:	2232      	movs	r2, #50	; 0x32
 8003c5a:	f002 f93d 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	4013      	ands	r3, r2
 8003c66:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x83);
 8003c68:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	4b3c      	ldr	r3, [pc, #240]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8003c72:	b2d9      	uxtb	r1, r3
 8003c74:	2383      	movs	r3, #131	; 0x83
 8003c76:	2240      	movs	r2, #64	; 0x40
 8003c78:	f002 f92e 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	4013      	ands	r3, r2
 8003c84:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x25);
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8003c90:	b2d9      	uxtb	r1, r3
 8003c92:	2325      	movs	r3, #37	; 0x25
 8003c94:	2246      	movs	r2, #70	; 0x46
 8003c96:	f002 f91f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_CONTROL, TOF_DEFAULT_0x00);
 8003ca4:	4b2f      	ldr	r3, [pc, #188]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003caa:	f993 3000 	ldrsb.w	r3, [r3]
 8003cae:	b2d9      	uxtb	r1, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	2260      	movs	r2, #96	; 0x60
 8003cb4:	f002 f910 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 8003cc2:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003cc4:	6818      	ldr	r0, [r3, #0]
 8003cc6:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003cc8:	f993 3000 	ldrsb.w	r3, [r3]
 8003ccc:	b2d9      	uxtb	r1, r3
 8003cce:	2300      	movs	r3, #0
 8003cd0:	2227      	movs	r2, #39	; 0x27
 8003cd2:	f002 f901 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	461a      	mov	r2, r3
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x06);
 8003ce0:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003ce6:	f993 3000 	ldrsb.w	r3, [r3]
 8003cea:	b2d9      	uxtb	r1, r3
 8003cec:	2306      	movs	r3, #6
 8003cee:	2250      	movs	r2, #80	; 0x50
 8003cf0:	f002 f8f2 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x00);
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003d04:	f993 3000 	ldrsb.w	r3, [r3]
 8003d08:	b2d9      	uxtb	r1, r3
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	2251      	movs	r2, #81	; 0x51
 8003d0e:	f002 f8e3 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003d12:	4603      	mov	r3, r0
 8003d14:	461a      	mov	r2, r3
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0x96);
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003d22:	f993 3000 	ldrsb.w	r3, [r3]
 8003d26:	b2d9      	uxtb	r1, r3
 8003d28:	2396      	movs	r3, #150	; 0x96
 8003d2a:	2252      	movs	r2, #82	; 0x52
 8003d2c:	f002 f8d4 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
 8003d36:	4013      	ands	r3, r2
 8003d38:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <TOF_load_default_tuning_settings+0x328>)
 8003d40:	f993 3000 	ldrsb.w	r3, [r3]
 8003d44:	b2d9      	uxtb	r1, r3
 8003d46:	2308      	movs	r3, #8
 8003d48:	2256      	movs	r2, #86	; 0x56
 8003d4a:	f002 f8c5 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	461a      	mov	r2, r3
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	4013      	ands	r3, r2
 8003d56:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x30);
 8003d58:	4b02      	ldr	r3, [pc, #8]	; (8003d64 <TOF_load_default_tuning_settings+0x32c>)
 8003d5a:	6818      	ldr	r0, [r3, #0]
 8003d5c:	e004      	b.n	8003d68 <TOF_load_default_tuning_settings+0x330>
 8003d5e:	bf00      	nop
 8003d60:	20000026 	.word	0x20000026
 8003d64:	20000250 	.word	0x20000250
 8003d68:	4bc9      	ldr	r3, [pc, #804]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003d6a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	2330      	movs	r3, #48	; 0x30
 8003d72:	2257      	movs	r2, #87	; 0x57
 8003d74:	f002 f8b0 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_HI, TOF_DEFAULT_0x00);
 8003d82:	4bc4      	ldr	r3, [pc, #784]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	4bc2      	ldr	r3, [pc, #776]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003d88:	f993 3000 	ldrsb.w	r3, [r3]
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2261      	movs	r2, #97	; 0x61
 8003d92:	f002 f8a1 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_SIGMA_THRESH_LO, TOF_DEFAULT_0x00);
 8003da0:	4bbc      	ldr	r3, [pc, #752]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4bba      	ldr	r3, [pc, #744]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003da6:	f993 3000 	ldrsb.w	r3, [r3]
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	2262      	movs	r2, #98	; 0x62
 8003db0:	f002 f892 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 8003dbe:	4bb5      	ldr	r3, [pc, #724]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	4bb3      	ldr	r3, [pc, #716]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc8:	b2d9      	uxtb	r1, r3
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2264      	movs	r2, #100	; 0x64
 8003dce:	f002 f883 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x65, TOF_DEFAULT_0x00);
 8003ddc:	4bad      	ldr	r3, [pc, #692]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	4bab      	ldr	r3, [pc, #684]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003de2:	f993 3000 	ldrsb.w	r3, [r3]
 8003de6:	b2d9      	uxtb	r1, r3
 8003de8:	2300      	movs	r3, #0
 8003dea:	2265      	movs	r2, #101	; 0x65
 8003dec:	f002 f874 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003df0:	4603      	mov	r3, r0
 8003df2:	461a      	mov	r2, r3
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4013      	ands	r3, r2
 8003df8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x66, TOF_DEFAULT_0xA0);
 8003dfa:	4ba6      	ldr	r3, [pc, #664]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	4ba4      	ldr	r3, [pc, #656]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e00:	f993 3000 	ldrsb.w	r3, [r3]
 8003e04:	b2d9      	uxtb	r1, r3
 8003e06:	23a0      	movs	r3, #160	; 0xa0
 8003e08:	2266      	movs	r2, #102	; 0x66
 8003e0a:	f002 f865 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	461a      	mov	r2, r3
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	4013      	ands	r3, r2
 8003e16:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003e18:	4b9e      	ldr	r3, [pc, #632]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	4b9c      	ldr	r3, [pc, #624]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e1e:	f993 3000 	ldrsb.w	r3, [r3]
 8003e22:	b2d9      	uxtb	r1, r3
 8003e24:	2301      	movs	r3, #1
 8003e26:	22ff      	movs	r2, #255	; 0xff
 8003e28:	f002 f856 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4013      	ands	r3, r2
 8003e34:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x22, TOF_DEFAULT_0x32);
 8003e36:	4b97      	ldr	r3, [pc, #604]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	4b95      	ldr	r3, [pc, #596]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e3c:	f993 3000 	ldrsb.w	r3, [r3]
 8003e40:	b2d9      	uxtb	r1, r3
 8003e42:	2332      	movs	r3, #50	; 0x32
 8003e44:	2222      	movs	r2, #34	; 0x22
 8003e46:	f002 f847 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	4013      	ands	r3, r2
 8003e52:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x14);
 8003e54:	4b8f      	ldr	r3, [pc, #572]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	4b8d      	ldr	r3, [pc, #564]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e5e:	b2d9      	uxtb	r1, r3
 8003e60:	2314      	movs	r3, #20
 8003e62:	2247      	movs	r2, #71	; 0x47
 8003e64:	f002 f838 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x49, TOF_DEFAULT_0xFF);
 8003e72:	4b88      	ldr	r3, [pc, #544]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	4b86      	ldr	r3, [pc, #536]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e78:	f993 3000 	ldrsb.w	r3, [r3]
 8003e7c:	b2d9      	uxtb	r1, r3
 8003e7e:	23ff      	movs	r3, #255	; 0xff
 8003e80:	2249      	movs	r2, #73	; 0x49
 8003e82:	f002 f829 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4A, TOF_DEFAULT_0x00);
 8003e90:	4b80      	ldr	r3, [pc, #512]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	4b7e      	ldr	r3, [pc, #504]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003e96:	f993 3000 	ldrsb.w	r3, [r3]
 8003e9a:	b2d9      	uxtb	r1, r3
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	224a      	movs	r2, #74	; 0x4a
 8003ea0:	f002 f81a 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	7bfb      	ldrb	r3, [r7, #15]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8003eae:	4b79      	ldr	r3, [pc, #484]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	4b77      	ldr	r3, [pc, #476]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8003eb8:	b2d9      	uxtb	r1, r3
 8003eba:	2300      	movs	r3, #0
 8003ebc:	22ff      	movs	r2, #255	; 0xff
 8003ebe:	f002 f80b 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7A, TOF_DEFAULT_0x0A);  //!< TF_July25 data changed form 0xA0 to 0x0A
 8003ecc:	4b71      	ldr	r3, [pc, #452]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	4b6f      	ldr	r3, [pc, #444]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003ed2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed6:	b2d9      	uxtb	r1, r3
 8003ed8:	230a      	movs	r3, #10
 8003eda:	227a      	movs	r2, #122	; 0x7a
 8003edc:	f001 fffc 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x7B, TOF_DEFAULT_0x00);
 8003eea:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	4b68      	ldr	r3, [pc, #416]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef4:	b2d9      	uxtb	r1, r3
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	227b      	movs	r2, #123	; 0x7b
 8003efa:	f001 ffed 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4013      	ands	r3, r2
 8003f06:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x78, TOF_DEFAULT_0x21);
 8003f08:	4b62      	ldr	r3, [pc, #392]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	4b60      	ldr	r3, [pc, #384]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003f0e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f12:	b2d9      	uxtb	r1, r3
 8003f14:	2321      	movs	r3, #33	; 0x21
 8003f16:	2278      	movs	r2, #120	; 0x78
 8003f18:	f001 ffde 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	461a      	mov	r2, r3
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	4013      	ands	r3, r2
 8003f24:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8003f26:	4b5b      	ldr	r3, [pc, #364]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	4b59      	ldr	r3, [pc, #356]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003f2c:	f993 3000 	ldrsb.w	r3, [r3]
 8003f30:	b2d9      	uxtb	r1, r3
 8003f32:	2301      	movs	r3, #1
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	f001 ffcf 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	4013      	ands	r3, r2
 8003f42:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x23, TOF_DEFAULT_0x34);
 8003f44:	4b53      	ldr	r3, [pc, #332]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003f46:	6818      	ldr	r0, [r3, #0]
 8003f48:	4b51      	ldr	r3, [pc, #324]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003f4a:	f993 3000 	ldrsb.w	r3, [r3]
 8003f4e:	b2d9      	uxtb	r1, r3
 8003f50:	2334      	movs	r3, #52	; 0x34
 8003f52:	2223      	movs	r2, #35	; 0x23
 8003f54:	f001 ffc0 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x42, TOF_DEFAULT_0x00);
 8003f62:	4b4c      	ldr	r3, [pc, #304]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	4b4a      	ldr	r3, [pc, #296]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003f68:	f993 3000 	ldrsb.w	r3, [r3]
 8003f6c:	b2d9      	uxtb	r1, r3
 8003f6e:	2300      	movs	r3, #0
 8003f70:	2242      	movs	r2, #66	; 0x42
 8003f72:	f001 ffb1 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0xFF);
 8003f80:	4b44      	ldr	r3, [pc, #272]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003f86:	f993 3000 	ldrsb.w	r3, [r3]
 8003f8a:	b2d9      	uxtb	r1, r3
 8003f8c:	23ff      	movs	r3, #255	; 0xff
 8003f8e:	2244      	movs	r2, #68	; 0x44
 8003f90:	f001 ffa2 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x26);
 8003f9e:	4b3d      	ldr	r3, [pc, #244]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003fa4:	f993 3000 	ldrsb.w	r3, [r3]
 8003fa8:	b2d9      	uxtb	r1, r3
 8003faa:	2326      	movs	r3, #38	; 0x26
 8003fac:	2245      	movs	r2, #69	; 0x45
 8003fae:	f001 ff93 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, TOF_DEFAULT_0x05);
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	4b33      	ldr	r3, [pc, #204]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003fc2:	f993 3000 	ldrsb.w	r3, [r3]
 8003fc6:	b2d9      	uxtb	r1, r3
 8003fc8:	2305      	movs	r3, #5
 8003fca:	2246      	movs	r2, #70	; 0x46
 8003fcc:	f001 ff84 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_HISTOGRAM_BIN, TOF_DEFAULT_0x40);
 8003fda:	4b2e      	ldr	r3, [pc, #184]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	4b2c      	ldr	r3, [pc, #176]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8003fe4:	b2d9      	uxtb	r1, r3
 8003fe6:	2340      	movs	r3, #64	; 0x40
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	f001 ff75 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_THRESH_LOW, TOF_DEFAULT_0x06);
 8003ff8:	4b26      	ldr	r3, [pc, #152]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8003ffe:	f993 3000 	ldrsb.w	r3, [r3]
 8004002:	b2d9      	uxtb	r1, r3
 8004004:	2306      	movs	r3, #6
 8004006:	220e      	movs	r2, #14
 8004008:	f001 ff66 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	7bfb      	ldrb	r3, [r7, #15]
 8004012:	4013      	ands	r3, r2
 8004014:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x20, TOF_DEFAULT_0x1A);
 8004016:	4b1f      	ldr	r3, [pc, #124]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 800401c:	f993 3000 	ldrsb.w	r3, [r3]
 8004020:	b2d9      	uxtb	r1, r3
 8004022:	231a      	movs	r3, #26
 8004024:	2220      	movs	r2, #32
 8004026:	f001 ff57 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800402a:	4603      	mov	r3, r0
 800402c:	461a      	mov	r2, r3
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	4013      	ands	r3, r2
 8004032:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x43, TOF_DEFAULT_0x40);
 8004034:	4b17      	ldr	r3, [pc, #92]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	4b15      	ldr	r3, [pc, #84]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 800403a:	f993 3000 	ldrsb.w	r3, [r3]
 800403e:	b2d9      	uxtb	r1, r3
 8004040:	2340      	movs	r3, #64	; 0x40
 8004042:	2243      	movs	r2, #67	; 0x43
 8004044:	f001 ff48 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004048:	4603      	mov	r3, r0
 800404a:	461a      	mov	r2, r3
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	4013      	ands	r3, r2
 8004050:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004052:	4b10      	ldr	r3, [pc, #64]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8004058:	f993 3000 	ldrsb.w	r3, [r3]
 800405c:	b2d9      	uxtb	r1, r3
 800405e:	2300      	movs	r3, #0
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f001 ff39 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004066:	4603      	mov	r3, r0
 8004068:	461a      	mov	r2, r3
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	4013      	ands	r3, r2
 800406e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x34, TOF_DEFAULT_0x03);
 8004070:	4b08      	ldr	r3, [pc, #32]	; (8004094 <TOF_load_default_tuning_settings+0x65c>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	4b06      	ldr	r3, [pc, #24]	; (8004090 <TOF_load_default_tuning_settings+0x658>)
 8004076:	f993 3000 	ldrsb.w	r3, [r3]
 800407a:	b2d9      	uxtb	r1, r3
 800407c:	2303      	movs	r3, #3
 800407e:	2234      	movs	r2, #52	; 0x34
 8004080:	f001 ff2a 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004084:	4603      	mov	r3, r0
 8004086:	461a      	mov	r2, r3
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	4013      	ands	r3, r2
 800408c:	e004      	b.n	8004098 <TOF_load_default_tuning_settings+0x660>
 800408e:	bf00      	nop
 8004090:	20000026 	.word	0x20000026
 8004094:	20000250 	.word	0x20000250
 8004098:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x35, TOF_DEFAULT_0x44);
 800409a:	4bc8      	ldr	r3, [pc, #800]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	4bc8      	ldr	r3, [pc, #800]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80040a0:	f993 3000 	ldrsb.w	r3, [r3]
 80040a4:	b2d9      	uxtb	r1, r3
 80040a6:	2344      	movs	r3, #68	; 0x44
 80040a8:	2235      	movs	r2, #53	; 0x35
 80040aa:	f001 ff15 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80040ae:	4603      	mov	r3, r0
 80040b0:	461a      	mov	r2, r3
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	4013      	ands	r3, r2
 80040b6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 80040b8:	4bc0      	ldr	r3, [pc, #768]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80040ba:	6818      	ldr	r0, [r3, #0]
 80040bc:	4bc0      	ldr	r3, [pc, #768]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80040be:	f993 3000 	ldrsb.w	r3, [r3]
 80040c2:	b2d9      	uxtb	r1, r3
 80040c4:	2301      	movs	r3, #1
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	f001 ff06 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80040cc:	4603      	mov	r3, r0
 80040ce:	461a      	mov	r2, r3
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	4013      	ands	r3, r2
 80040d4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x31, TOF_DEFAULT_0x04);
 80040d6:	4bb9      	ldr	r3, [pc, #740]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	4bb9      	ldr	r3, [pc, #740]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80040dc:	f993 3000 	ldrsb.w	r3, [r3]
 80040e0:	b2d9      	uxtb	r1, r3
 80040e2:	2304      	movs	r3, #4
 80040e4:	2231      	movs	r2, #49	; 0x31
 80040e6:	f001 fef7 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	4013      	ands	r3, r2
 80040f2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4B, TOF_DEFAULT_0x09);
 80040f4:	4bb1      	ldr	r3, [pc, #708]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	4bb1      	ldr	r3, [pc, #708]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80040fa:	f993 3000 	ldrsb.w	r3, [r3]
 80040fe:	b2d9      	uxtb	r1, r3
 8004100:	2309      	movs	r3, #9
 8004102:	224b      	movs	r2, #75	; 0x4b
 8004104:	f001 fee8 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004108:	4603      	mov	r3, r0
 800410a:	461a      	mov	r2, r3
 800410c:	7bfb      	ldrb	r3, [r7, #15]
 800410e:	4013      	ands	r3, r2
 8004110:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4C, TOF_DEFAULT_0x05);
 8004112:	4baa      	ldr	r3, [pc, #680]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	4baa      	ldr	r3, [pc, #680]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004118:	f993 3000 	ldrsb.w	r3, [r3]
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	2305      	movs	r3, #5
 8004120:	224c      	movs	r2, #76	; 0x4c
 8004122:	f001 fed9 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	4013      	ands	r3, r2
 800412e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x4D, TOF_DEFAULT_0x04);
 8004130:	4ba2      	ldr	r3, [pc, #648]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004132:	6818      	ldr	r0, [r3, #0]
 8004134:	4ba2      	ldr	r3, [pc, #648]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004136:	f993 3000 	ldrsb.w	r3, [r3]
 800413a:	b2d9      	uxtb	r1, r3
 800413c:	2304      	movs	r3, #4
 800413e:	224d      	movs	r2, #77	; 0x4d
 8004140:	f001 feca 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4013      	ands	r3, r2
 800414c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 800414e:	4b9b      	ldr	r3, [pc, #620]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	4b9b      	ldr	r3, [pc, #620]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004154:	f993 3000 	ldrsb.w	r3, [r3]
 8004158:	b2d9      	uxtb	r1, r3
 800415a:	2300      	movs	r3, #0
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	f001 febb 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004162:	4603      	mov	r3, r0
 8004164:	461a      	mov	r2, r3
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	4013      	ands	r3, r2
 800416a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, TOF_DEFAULT_0x00);
 800416c:	4b93      	ldr	r3, [pc, #588]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	4b93      	ldr	r3, [pc, #588]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004172:	f993 3000 	ldrsb.w	r3, [r3]
 8004176:	b2d9      	uxtb	r1, r3
 8004178:	2300      	movs	r3, #0
 800417a:	2244      	movs	r2, #68	; 0x44
 800417c:	f001 feac 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004180:	4603      	mov	r3, r0
 8004182:	461a      	mov	r2, r3
 8004184:	7bfb      	ldrb	r3, [r7, #15]
 8004186:	4013      	ands	r3, r2
 8004188:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x45, TOF_DEFAULT_0x20);
 800418a:	4b8c      	ldr	r3, [pc, #560]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	4b8c      	ldr	r3, [pc, #560]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004190:	f993 3000 	ldrsb.w	r3, [r3]
 8004194:	b2d9      	uxtb	r1, r3
 8004196:	2320      	movs	r3, #32
 8004198:	2245      	movs	r2, #69	; 0x45
 800419a:	f001 fe9d 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	4013      	ands	r3, r2
 80041a6:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW, TOF_DEFAULT_0x08);
 80041a8:	4b84      	ldr	r3, [pc, #528]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4b84      	ldr	r3, [pc, #528]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80041ae:	f993 3000 	ldrsb.w	r3, [r3]
 80041b2:	b2d9      	uxtb	r1, r3
 80041b4:	2308      	movs	r3, #8
 80041b6:	2247      	movs	r2, #71	; 0x47
 80041b8:	f001 fe8e 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80041bc:	4603      	mov	r3, r0
 80041be:	461a      	mov	r2, r3
 80041c0:	7bfb      	ldrb	r3, [r7, #15]
 80041c2:	4013      	ands	r3, r2
 80041c4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, TOF_DEFAULT_0x28);
 80041c6:	4b7d      	ldr	r3, [pc, #500]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	4b7d      	ldr	r3, [pc, #500]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80041cc:	f993 3000 	ldrsb.w	r3, [r3]
 80041d0:	b2d9      	uxtb	r1, r3
 80041d2:	2328      	movs	r3, #40	; 0x28
 80041d4:	2248      	movs	r2, #72	; 0x48
 80041d6:	f001 fe7f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80041da:	4603      	mov	r3, r0
 80041dc:	461a      	mov	r2, r3
 80041de:	7bfb      	ldrb	r3, [r7, #15]
 80041e0:	4013      	ands	r3, r2
 80041e2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_MIN_SNR, TOF_DEFAULT_0x00);
 80041e4:	4b75      	ldr	r3, [pc, #468]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	4b75      	ldr	r3, [pc, #468]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80041ea:	f993 3000 	ldrsb.w	r3, [r3]
 80041ee:	b2d9      	uxtb	r1, r3
 80041f0:	2300      	movs	r3, #0
 80041f2:	2267      	movs	r2, #103	; 0x67
 80041f4:	f001 fe70 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80041f8:	4603      	mov	r3, r0
 80041fa:	461a      	mov	r2, r3
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	4013      	ands	r3, r2
 8004200:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, TOF_DEFAULT_0x04);
 8004202:	4b6e      	ldr	r3, [pc, #440]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	4b6e      	ldr	r3, [pc, #440]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004208:	f993 3000 	ldrsb.w	r3, [r3]
 800420c:	b2d9      	uxtb	r1, r3
 800420e:	2304      	movs	r3, #4
 8004210:	2270      	movs	r2, #112	; 0x70
 8004212:	f001 fe61 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	4013      	ands	r3, r2
 800421e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, TOF_DEFAULT_0x01);
 8004220:	4b66      	ldr	r3, [pc, #408]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	4b66      	ldr	r3, [pc, #408]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004226:	f993 3000 	ldrsb.w	r3, [r3]
 800422a:	b2d9      	uxtb	r1, r3
 800422c:	2301      	movs	r3, #1
 800422e:	2271      	movs	r2, #113	; 0x71
 8004230:	f001 fe52 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004234:	4603      	mov	r3, r0
 8004236:	461a      	mov	r2, r3
 8004238:	7bfb      	ldrb	r3, [r7, #15]
 800423a:	4013      	ands	r3, r2
 800423c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_LO, TOF_DEFAULT_0xFE);
 800423e:	4b5f      	ldr	r3, [pc, #380]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004244:	f993 3000 	ldrsb.w	r3, [r3]
 8004248:	b2d9      	uxtb	r1, r3
 800424a:	23fe      	movs	r3, #254	; 0xfe
 800424c:	2272      	movs	r2, #114	; 0x72
 800424e:	f001 fe43 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004252:	4603      	mov	r3, r0
 8004254:	461a      	mov	r2, r3
 8004256:	7bfb      	ldrb	r3, [r7, #15]
 8004258:	4013      	ands	r3, r2
 800425a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x76, TOF_DEFAULT_0x00);
 800425c:	4b57      	ldr	r3, [pc, #348]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800425e:	6818      	ldr	r0, [r3, #0]
 8004260:	4b57      	ldr	r3, [pc, #348]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004262:	f993 3000 	ldrsb.w	r3, [r3]
 8004266:	b2d9      	uxtb	r1, r3
 8004268:	2300      	movs	r3, #0
 800426a:	2276      	movs	r2, #118	; 0x76
 800426c:	f001 fe34 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4013      	ands	r3, r2
 8004278:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x77, TOF_DEFAULT_0x00);
 800427a:	4b50      	ldr	r3, [pc, #320]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004280:	f993 3000 	ldrsb.w	r3, [r3]
 8004284:	b2d9      	uxtb	r1, r3
 8004286:	2300      	movs	r3, #0
 8004288:	2277      	movs	r2, #119	; 0x77
 800428a:	f001 fe25 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	4013      	ands	r3, r2
 8004296:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 8004298:	4b48      	ldr	r3, [pc, #288]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4b48      	ldr	r3, [pc, #288]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 800429e:	f993 3000 	ldrsb.w	r3, [r3]
 80042a2:	b2d9      	uxtb	r1, r3
 80042a4:	2301      	movs	r3, #1
 80042a6:	22ff      	movs	r2, #255	; 0xff
 80042a8:	f001 fe16 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4013      	ands	r3, r2
 80042b4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x0D, TOF_DEFAULT_0x01);
 80042b6:	4b41      	ldr	r3, [pc, #260]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80042bc:	f993 3000 	ldrsb.w	r3, [r3]
 80042c0:	b2d9      	uxtb	r1, r3
 80042c2:	2301      	movs	r3, #1
 80042c4:	220d      	movs	r2, #13
 80042c6:	f001 fe07 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80042ca:	4603      	mov	r3, r0
 80042cc:	461a      	mov	r2, r3
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	4013      	ands	r3, r2
 80042d2:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4b39      	ldr	r3, [pc, #228]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80042da:	f993 3000 	ldrsb.w	r3, [r3]
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	2300      	movs	r3, #0
 80042e2:	22ff      	movs	r2, #255	; 0xff
 80042e4:	f001 fdf8 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	4013      	ands	r3, r2
 80042f0:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x01);
 80042f2:	4b32      	ldr	r3, [pc, #200]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80042f8:	f993 3000 	ldrsb.w	r3, [r3]
 80042fc:	b2d9      	uxtb	r1, r3
 80042fe:	2301      	movs	r3, #1
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	f001 fde9 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004306:	4603      	mov	r3, r0
 8004308:	461a      	mov	r2, r3
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	4013      	ands	r3, r2
 800430e:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, TOF_DEFAULT_0xF8);
 8004310:	4b2a      	ldr	r3, [pc, #168]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004316:	f993 3000 	ldrsb.w	r3, [r3]
 800431a:	b2d9      	uxtb	r1, r3
 800431c:	23f8      	movs	r3, #248	; 0xf8
 800431e:	2201      	movs	r2, #1
 8004320:	f001 fdda 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	4013      	ands	r3, r2
 800432c:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x01);
 800432e:	4b23      	ldr	r3, [pc, #140]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004334:	f993 3000 	ldrsb.w	r3, [r3]
 8004338:	b2d9      	uxtb	r1, r3
 800433a:	2301      	movs	r3, #1
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	f001 fdcb 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004342:	4603      	mov	r3, r0
 8004344:	461a      	mov	r2, r3
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	4013      	ands	r3, r2
 800434a:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_CONFIG_0x8E, TOF_DEFAULT_0x01);
 800434c:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004352:	f993 3000 	ldrsb.w	r3, [r3]
 8004356:	b2d9      	uxtb	r1, r3
 8004358:	2301      	movs	r3, #1
 800435a:	228e      	movs	r2, #142	; 0x8e
 800435c:	f001 fdbc 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4013      	ands	r3, r2
 8004368:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, TOF_DEFAULT_0x01);
 800436a:	4b14      	ldr	r3, [pc, #80]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 8004370:	f993 3000 	ldrsb.w	r3, [r3]
 8004374:	b2d9      	uxtb	r1, r3
 8004376:	2301      	movs	r3, #1
 8004378:	2200      	movs	r2, #0
 800437a:	f001 fdad 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	4013      	ands	r3, r2
 8004386:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, TOF_DEFAULT_0x00);
 8004388:	4b0c      	ldr	r3, [pc, #48]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 800438e:	f993 3000 	ldrsb.w	r3, [r3]
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	2300      	movs	r3, #0
 8004396:	22ff      	movs	r2, #255	; 0xff
 8004398:	f001 fd9e 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
 80043a2:	4013      	ands	r3, r2
 80043a4:	73fb      	strb	r3, [r7, #15]
    success &= i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, TOF_DEFAULT_0x00);
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <TOF_load_default_tuning_settings+0x984>)
 80043a8:	6818      	ldr	r0, [r3, #0]
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <TOF_load_default_tuning_settings+0x988>)
 80043ac:	f993 3000 	ldrsb.w	r3, [r3]
 80043b0:	b2d9      	uxtb	r1, r3
 80043b2:	2300      	movs	r3, #0
 80043b4:	2280      	movs	r2, #128	; 0x80
 80043b6:	f001 fd8f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80043ba:	e003      	b.n	80043c4 <TOF_load_default_tuning_settings+0x98c>
 80043bc:	20000250 	.word	0x20000250
 80043c0:	20000026 	.word	0x20000026
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	4013      	ands	r3, r2
 80043cc:	73fb      	strb	r3, [r7, #15]

    if (success != I2C_OK)
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <TOF_load_default_tuning_settings+0x9a2>
	{
		return false;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <TOF_load_default_tuning_settings+0x9a4>
	}

	return true;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <TOF_set_sequence_steps_enabled>:
 *  														specific step in the sensor's operational sequence.
 *
 * @returns:     bool: true if the sequence configuration was successfully written to the sensor, otherwise false.
 */
bool TOF_set_sequence_steps_enabled(TOFSensor_t* TOFSENS, uint8_t sequence_step)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	889b      	ldrh	r3, [r3, #4]
 80043f4:	b25a      	sxtb	r2, r3
 80043f6:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <TOF_set_sequence_steps_enabled+0x50>)
 80043f8:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a0e      	ldr	r2, [pc, #56]	; (8004438 <TOF_set_sequence_steps_enabled+0x54>)
 8004400:	6013      	str	r3, [r2, #0]

	bool result = false;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]

	I2C_RETURN_CODE_t success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_step);
 8004406:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <TOF_set_sequence_steps_enabled+0x54>)
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	4b0a      	ldr	r3, [pc, #40]	; (8004434 <TOF_set_sequence_steps_enabled+0x50>)
 800440c:	f993 3000 	ldrsb.w	r3, [r3]
 8004410:	b2d9      	uxtb	r1, r3
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	2201      	movs	r2, #1
 8004416:	f001 fd5f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800441a:	4603      	mov	r3, r0
 800441c:	73bb      	strb	r3, [r7, #14]

	if(success == I2C_OK)
 800441e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <TOF_set_sequence_steps_enabled+0x46>
	{
		result = true;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 800442a:	7bfb      	ldrb	r3, [r7, #15]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000026 	.word	0x20000026
 8004438:	20000250 	.word	0x20000250

0800443c <TOF_perform_single_ref_calibration>:
 *                  - TOF_CALIBRATION_TYPE_PHASE 			Calibrates phase measurements.
 *
 * @returns:     bool: true if the calibration was successfully performed, otherwise false.
 */
bool TOF_perform_single_ref_calibration(TOFSensor_t* TOFSENS, TOF_calibration_type_t calib_type)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	889b      	ldrh	r3, [r3, #4]
 800444c:	b25a      	sxtb	r2, r3
 800444e:	4b41      	ldr	r3, [pc, #260]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 8004450:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a40      	ldr	r2, [pc, #256]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 8004458:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t success;

    uint8_t sysrange_start = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	73fb      	strb	r3, [r7, #15]
    uint8_t sequence_config = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	73bb      	strb	r3, [r7, #14]
    switch (calib_type)
 8004462:	78fb      	ldrb	r3, [r7, #3]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d002      	beq.n	800446e <TOF_perform_single_ref_calibration+0x32>
 8004468:	2b01      	cmp	r3, #1
 800446a:	d005      	beq.n	8004478 <TOF_perform_single_ref_calibration+0x3c>
 800446c:	e009      	b.n	8004482 <TOF_perform_single_ref_calibration+0x46>
    {
    case TOF_CALIBRATION_TYPE_VHV:
        sequence_config = 0x01;
 800446e:	2301      	movs	r3, #1
 8004470:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x40;
 8004472:	2341      	movs	r3, #65	; 0x41
 8004474:	73fb      	strb	r3, [r7, #15]
        break;
 8004476:	e004      	b.n	8004482 <TOF_perform_single_ref_calibration+0x46>
    case TOF_CALIBRATION_TYPE_PHASE:
        sequence_config = 0x02;
 8004478:	2302      	movs	r3, #2
 800447a:	73bb      	strb	r3, [r7, #14]
        sysrange_start = 0x01 | 0x00;
 800447c:	2301      	movs	r3, #1
 800447e:	73fb      	strb	r3, [r7, #15]
        break;
 8004480:	bf00      	nop
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8004482:	4b35      	ldr	r3, [pc, #212]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	4b33      	ldr	r3, [pc, #204]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 8004488:	f993 3000 	ldrsb.w	r3, [r3]
 800448c:	b2d9      	uxtb	r1, r3
 800448e:	7bbb      	ldrb	r3, [r7, #14]
 8004490:	2201      	movs	r2, #1
 8004492:	f001 fd21 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004496:	4603      	mov	r3, r0
 8004498:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 800449a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <TOF_perform_single_ref_calibration+0x6a>
    {
        return false;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e052      	b.n	800454c <TOF_perform_single_ref_calibration+0x110>
    }
//ToDo Abfrage ob die jeweiligen Initialisierungen richtig gesetzt wurden.
    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, sysrange_start);
 80044a6:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 80044ac:	f993 3000 	ldrsb.w	r3, [r3]
 80044b0:	b2d9      	uxtb	r1, r3
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f001 fd0f 	bl	8005ed8 <i2cSendByteToSlaveReg>
 80044ba:	4603      	mov	r3, r0
 80044bc:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 80044be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <TOF_perform_single_ref_calibration+0x8e>
    {
        return false;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e040      	b.n	800454c <TOF_perform_single_ref_calibration+0x110>

    /* Wait for interrupt */



    uint8_t interrupt_status = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	733b      	strb	r3, [r7, #12]
    do {		//Funktion in welcher der MCAL Fehler auftritt //ToDo i2cReadByteFromSlaveReg durch i2cBurstRegRead ersetzen

        //success = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status);
        success = i2cBurstRegRead(TOF_i2c, TOF_address_used, TOF_REG_RESULT_INTERRUPT_STATUS, &interrupt_status, 1);
 80044ce:	4b22      	ldr	r3, [pc, #136]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 80044d4:	f993 3000 	ldrsb.w	r3, [r3]
 80044d8:	b2d9      	uxtb	r1, r3
 80044da:	f107 030c 	add.w	r3, r7, #12
 80044de:	2201      	movs	r2, #1
 80044e0:	9200      	str	r2, [sp, #0]
 80044e2:	2213      	movs	r2, #19
 80044e4:	f001 fdb2 	bl	800604c <i2cBurstRegRead>
 80044e8:	4603      	mov	r3, r0
 80044ea:	737b      	strb	r3, [r7, #13]
    } while ((interrupt_status & 0x07) == 0);
 80044ec:	7b3b      	ldrb	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0eb      	beq.n	80044ce <TOF_perform_single_ref_calibration+0x92>

    //} while (success == I2C_OK && ((interrupt_status & 0x07) == 0));
    if (success != I2C_OK)
 80044f6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <TOF_perform_single_ref_calibration+0xc6>
    {
        return false;
 80044fe:	2300      	movs	r3, #0
 8004500:	e024      	b.n	800454c <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004502:	4b15      	ldr	r3, [pc, #84]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 8004508:	f993 3000 	ldrsb.w	r3, [r3]
 800450c:	b2d9      	uxtb	r1, r3
 800450e:	2301      	movs	r3, #1
 8004510:	220b      	movs	r2, #11
 8004512:	f001 fce1 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004516:	4603      	mov	r3, r0
 8004518:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 800451a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <TOF_perform_single_ref_calibration+0xea>
    {
        return false;
 8004522:	2300      	movs	r3, #0
 8004524:	e012      	b.n	800454c <TOF_perform_single_ref_calibration+0x110>
    }

    success = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <TOF_perform_single_ref_calibration+0x11c>)
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <TOF_perform_single_ref_calibration+0x118>)
 800452c:	f993 3000 	ldrsb.w	r3, [r3]
 8004530:	b2d9      	uxtb	r1, r3
 8004532:	2300      	movs	r3, #0
 8004534:	2200      	movs	r2, #0
 8004536:	f001 fccf 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800453a:	4603      	mov	r3, r0
 800453c:	737b      	strb	r3, [r7, #13]
    if (success != I2C_OK)
 800453e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <TOF_perform_single_ref_calibration+0x10e>
    {
        return false;
 8004546:	2300      	movs	r3, #0
 8004548:	e000      	b.n	800454c <TOF_perform_single_ref_calibration+0x110>
    }

    return true;
 800454a:	2301      	movs	r3, #1
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000026 	.word	0x20000026
 8004558:	20000250 	.word	0x20000250

0800455c <TOF_perform_ref_calibration>:
 *               - After calibration, the sequence steps for measurement are re-enabled using
 *                 TOF_set_sequence_steps_enabled.
 *               - If any step in the calibration or configuration fails, the function returns false.
 */
bool TOF_perform_ref_calibration(TOFSensor_t* TOFSENS)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	889b      	ldrh	r3, [r3, #4]
 8004568:	b25a      	sxtb	r2, r3
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <TOF_perform_ref_calibration+0x6c>)
 800456c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a16      	ldr	r2, [pc, #88]	; (80045cc <TOF_perform_ref_calibration+0x70>)
 8004574:	6013      	str	r3, [r2, #0]

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_VHV)) {
 8004576:	2100      	movs	r1, #0
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff ff5f 	bl	800443c <TOF_perform_single_ref_calibration>
 800457e:	4603      	mov	r3, r0
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <TOF_perform_ref_calibration+0x32>
		return false;
 800458a:	2300      	movs	r3, #0
 800458c:	e018      	b.n	80045c0 <TOF_perform_ref_calibration+0x64>
	}

	if (!TOF_perform_single_ref_calibration(TOFSENS, TOF_CALIBRATION_TYPE_PHASE)) {		//Funktion in welcher der MCAL Fehler auftritt
 800458e:	2101      	movs	r1, #1
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff ff53 	bl	800443c <TOF_perform_single_ref_calibration>
 8004596:	4603      	mov	r3, r0
 8004598:	f083 0301 	eor.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <TOF_perform_ref_calibration+0x4a>
		return false;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e00c      	b.n	80045c0 <TOF_perform_ref_calibration+0x64>
	}


	/* Restore sequence steps enabled */

	if (!TOF_set_sequence_steps_enabled(TOFSENS, TOF_RANGE_SEQUENCE_STEP_DSS + TOF_RANGE_SEQUENCE_STEP_PRE_RANGE + TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
 80045a6:	21e8      	movs	r1, #232	; 0xe8
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7ff ff1b 	bl	80043e4 <TOF_set_sequence_steps_enabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <TOF_perform_ref_calibration+0x62>
		return false;
 80045ba:	2300      	movs	r3, #0
 80045bc:	e000      	b.n	80045c0 <TOF_perform_ref_calibration+0x64>
	}

	return true;
 80045be:	2301      	movs	r3, #1
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20000026 	.word	0x20000026
 80045cc:	20000250 	.word	0x20000250

080045d0 <TOF_init_device>:
 * @note:        - This function depends on several helper functions, each responsible for a specific initialization
 *                 task. If any step fails, the initialization halts and the function returns false.
 *               - Ensure the I2C communication setup is properly initialized before calling this function.
 */
bool TOF_init_device(TOFSensor_t* TOFSENS)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	889b      	ldrh	r3, [r3, #4]
 80045dc:	b25a      	sxtb	r2, r3
 80045de:	4b27      	ldr	r3, [pc, #156]	; (800467c <TOF_init_device+0xac>)
 80045e0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <TOF_init_device+0xb0>)
 80045e8:	6013      	str	r3, [r2, #0]

	if (!TOF_data_init(TOFSENS))
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fe ff56 	bl	800349c <TOF_data_init>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f083 0301 	eor.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <TOF_init_device+0x30>
	{
		return false;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e038      	b.n	8004672 <TOF_init_device+0xa2>
	}

	if (!TOF_set_spads_from_nvm(TOFSENS)) {
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff f92f 	bl	8003864 <TOF_set_spads_from_nvm>
 8004606:	4603      	mov	r3, r0
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <TOF_init_device+0x46>
		return false;
 8004612:	2300      	movs	r3, #0
 8004614:	e02d      	b.n	8004672 <TOF_init_device+0xa2>
	}

	if (!TOF_load_default_tuning_settings(TOFSENS))
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff fa0e 	bl	8003a38 <TOF_load_default_tuning_settings>
 800461c:	4603      	mov	r3, r0
 800461e:	f083 0301 	eor.w	r3, r3, #1
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <TOF_init_device+0x5c>
	{
		return false;
 8004628:	2300      	movs	r3, #0
 800462a:	e022      	b.n	8004672 <TOF_init_device+0xa2>
	}

	if (!TOF_configure_interrupt(TOFSENS))
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7fe fe9f 	bl	8003370 <TOF_configure_interrupt>
 8004632:	4603      	mov	r3, r0
 8004634:	f083 0301 	eor.w	r3, r3, #1
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <TOF_init_device+0x72>
	{
		return false;
 800463e:	2300      	movs	r3, #0
 8004640:	e017      	b.n	8004672 <TOF_init_device+0xa2>
	}

	if (!TOF_set_sequence_steps_enabled(TOFSENS,
 8004642:	21e8      	movs	r1, #232	; 0xe8
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fecd 	bl	80043e4 <TOF_set_sequence_steps_enabled>
 800464a:	4603      	mov	r3, r0
 800464c:	f083 0301 	eor.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <TOF_init_device+0x8a>
			TOF_RANGE_SEQUENCE_STEP_DSS +
			TOF_RANGE_SEQUENCE_STEP_PRE_RANGE +
			TOF_RANGE_SEQUENCE_STEP_FINAL_RANGE)) {
		return false;
 8004656:	2300      	movs	r3, #0
 8004658:	e00b      	b.n	8004672 <TOF_init_device+0xa2>
	}

    if (!TOF_perform_ref_calibration(TOFSENS))			//Funktion in welcher der MCAL Fehler auftritt
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff ff7e 	bl	800455c <TOF_perform_ref_calibration>
 8004660:	4603      	mov	r3, r0
 8004662:	f083 0301 	eor.w	r3, r3, #1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <TOF_init_device+0xa0>
    {
        return false;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <TOF_init_device+0xa2>
    }

	return true;
 8004670:	2301      	movs	r3, #1
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000026 	.word	0x20000026
 8004680:	20000250 	.word	0x20000250

08004684 <TOF_getMeasurement>:
 * @limitations:
 *               - If the range is out of the sensor's measurable distance, the value returned is defined
 *                 as TOF_VL53L0X_OUT_OF_RANGE.
 */
bool TOF_getMeasurement(TOFSensor_t* TOFSENS, uint16_t *range)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
	I2C_RETURN_CODE_t i2c_return;
	TOF_address_used = TOFSENS->TOF_address_used;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	889b      	ldrh	r3, [r3, #4]
 8004692:	b25a      	sxtb	r2, r3
 8004694:	4b36      	ldr	r3, [pc, #216]	; (8004770 <TOF_getMeasurement+0xec>)
 8004696:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a35      	ldr	r2, [pc, #212]	; (8004774 <TOF_getMeasurement+0xf0>)
 800469e:	6013      	str	r3, [r2, #0]
	uint8_t interrupt_status[1];
	do
	{
		i2c_return = i2cBurstRegRead(TOF_i2c, TOF_address_used,	TOF_REG_RESULT_INTERRUPT_STATUS, interrupt_status, 1);
 80046a0:	4b34      	ldr	r3, [pc, #208]	; (8004774 <TOF_getMeasurement+0xf0>)
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	4b32      	ldr	r3, [pc, #200]	; (8004770 <TOF_getMeasurement+0xec>)
 80046a6:	f993 3000 	ldrsb.w	r3, [r3]
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	2201      	movs	r2, #1
 80046b2:	9200      	str	r2, [sp, #0]
 80046b4:	2213      	movs	r2, #19
 80046b6:	f001 fcc9 	bl	800604c <i2cBurstRegRead>
 80046ba:	4603      	mov	r3, r0
 80046bc:	73fb      	strb	r3, [r7, #15]
	} while (i2c_return == I2C_OK && ((interrupt_status[0] & 0x07) == 0));
 80046be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <TOF_getMeasurement+0x4c>
 80046c6:	7b3b      	ldrb	r3, [r7, #12]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0e7      	beq.n	80046a0 <TOF_getMeasurement+0x1c>
	if (i2c_return != I2C_OK)
 80046d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <TOF_getMeasurement+0x58>
	{
		return false;
 80046d8:	2300      	movs	r3, #0
 80046da:	e045      	b.n	8004768 <TOF_getMeasurement+0xe4>
	}

	uint8_t readBuffer[2];
	i2c_return = i2cBurstRegRead(
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <TOF_getMeasurement+0xf0>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	4b23      	ldr	r3, [pc, #140]	; (8004770 <TOF_getMeasurement+0xec>)
 80046e2:	f993 3000 	ldrsb.w	r3, [r3]
 80046e6:	b2d9      	uxtb	r1, r3
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	2202      	movs	r2, #2
 80046ee:	9200      	str	r2, [sp, #0]
 80046f0:	221e      	movs	r2, #30
 80046f2:	f001 fcab 	bl	800604c <i2cBurstRegRead>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_RESULT_RANGE_STATUS + 10,
			readBuffer, 2);
	if (i2c_return != I2C_OK)
 80046fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <TOF_getMeasurement+0x82>
	{
		// returns false, if i2c communication was not successful
		return false;
 8004702:	2300      	movs	r3, #0
 8004704:	e030      	b.n	8004768 <TOF_getMeasurement+0xe4>
	}
	*range = (readBuffer[0] << 8) + readBuffer[1];
 8004706:	7a3b      	ldrb	r3, [r7, #8]
 8004708:	b29b      	uxth	r3, r3
 800470a:	021b      	lsls	r3, r3, #8
 800470c:	b29a      	uxth	r2, r3
 800470e:	7a7b      	ldrb	r3, [r7, #9]
 8004710:	b29b      	uxth	r3, r3
 8004712:	4413      	add	r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	801a      	strh	r2, [r3, #0]

	TOFSENS->measuredRange = (uint32_t)readBuffer;
 800471a:	f107 0208 	add.w	r2, r7, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	60da      	str	r2, [r3, #12]
	i2c_return = i2cSendByteToSlaveReg(
 8004722:	4b14      	ldr	r3, [pc, #80]	; (8004774 <TOF_getMeasurement+0xf0>)
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	4b12      	ldr	r3, [pc, #72]	; (8004770 <TOF_getMeasurement+0xec>)
 8004728:	f993 3000 	ldrsb.w	r3, [r3]
 800472c:	b2d9      	uxtb	r1, r3
 800472e:	2301      	movs	r3, #1
 8004730:	220b      	movs	r2, #11
 8004732:	f001 fbd1 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]
			TOF_i2c, TOF_address_used,
			TOF_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
	if (i2c_return != I2C_OK)
 800473a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <TOF_getMeasurement+0xc2>
	{
		// returns false, if i2c communication was not successful
		return false;
 8004742:	2300      	movs	r3, #0
 8004744:	e010      	b.n	8004768 <TOF_getMeasurement+0xe4>
	}

	/* 8190 or 8191 may be returned when obstacle is out of range. */
	if (*range == 8190 || *range == 8191)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800474e:	4293      	cmp	r3, r2
 8004750:	d005      	beq.n	800475e <TOF_getMeasurement+0xda>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800475a:	4293      	cmp	r3, r2
 800475c:	d103      	bne.n	8004766 <TOF_getMeasurement+0xe2>
	{
		*range = TOF_VL53L0X_OUT_OF_RANGE;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 8004764:	801a      	strh	r2, [r3, #0]
	}

	return true;
 8004766:	2301      	movs	r3, #1
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20000026 	.word	0x20000026
 8004774:	20000250 	.word	0x20000250

08004778 <TOF_init>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the initialization was successful, otherwise false.
 */
bool TOF_init(TOFSensor_t* TOFSENS)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	889b      	ldrh	r3, [r3, #4]
 8004784:	b25a      	sxtb	r2, r3
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <TOF_init+0x50>)
 8004788:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <TOF_init+0x54>)
 8004790:	6013      	str	r3, [r2, #0]

	// Init i2c address and check connectivity
	if (!TOF_init_address(TOFSENS))
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fe fe52 	bl	800343c <TOF_init_address>
 8004798:	4603      	mov	r3, r0
 800479a:	f083 0301 	eor.w	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <TOF_init+0x30>
	{
		return false;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e00b      	b.n	80047c0 <TOF_init+0x48>
	}

	//device initialization
	if (!TOF_init_device(TOFSENS))		//Funktion in welcher der MCAL Fehler auftritt
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff ff11 	bl	80045d0 <TOF_init_device>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f083 0301 	eor.w	r3, r3, #1
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <TOF_init+0x46>
	{
		return false;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e000      	b.n	80047c0 <TOF_init+0x48>
	}

	// return true, if everything was fine
	return true;
 80047be:	2301      	movs	r3, #1
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000026 	.word	0x20000026
 80047cc:	20000250 	.word	0x20000250

080047d0 <TOF_start_continuous>:
 * 				uint32_t period_ms							Measurement interval in milliseconds.
 *
 * @returns:     bool: true if continuous mode starts successfully, otherwise false.
 */
bool TOF_start_continuous(TOFSensor_t* TOFSENS)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	889b      	ldrh	r3, [r3, #4]
 80047dc:	b25a      	sxtb	r2, r3
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <TOF_start_continuous+0x1b0>)
 80047e0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a67      	ldr	r2, [pc, #412]	; (8004984 <TOF_start_continuous+0x1b4>)
 80047e8:	6013      	str	r3, [r2, #0]

	uint32_t period_ms = TOFSENS->Ranging_Profile_time;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	617b      	str	r3, [r7, #20]
	I2C_RETURN_CODE_t i2c_return;

	TOF_address_used = TOFSENS->TOF_address_used;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	889b      	ldrh	r3, [r3, #4]
 80047f4:	b25a      	sxtb	r2, r3
 80047f6:	4b62      	ldr	r3, [pc, #392]	; (8004980 <TOF_start_continuous+0x1b0>)
 80047f8:	701a      	strb	r2, [r3, #0]

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80047fa:	4b62      	ldr	r3, [pc, #392]	; (8004984 <TOF_start_continuous+0x1b4>)
 80047fc:	6818      	ldr	r0, [r3, #0]
 80047fe:	4b60      	ldr	r3, [pc, #384]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004800:	f993 3000 	ldrsb.w	r3, [r3]
 8004804:	b2d9      	uxtb	r1, r3
 8004806:	2301      	movs	r3, #1
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	f001 fb65 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 800480e:	4b5d      	ldr	r3, [pc, #372]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004814:	f993 3000 	ldrsb.w	r3, [r3]
 8004818:	b2d9      	uxtb	r1, r3
 800481a:	2301      	movs	r3, #1
 800481c:	22ff      	movs	r2, #255	; 0xff
 800481e:	f001 fb5b 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 8004822:	4b58      	ldr	r3, [pc, #352]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	4b56      	ldr	r3, [pc, #344]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004828:	f993 3000 	ldrsb.w	r3, [r3]
 800482c:	b2d9      	uxtb	r1, r3
 800482e:	2300      	movs	r3, #0
 8004830:	2200      	movs	r2, #0
 8004832:	f001 fb51 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, TOF_stop_variable);
 8004836:	4b53      	ldr	r3, [pc, #332]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	4b51      	ldr	r3, [pc, #324]	; (8004980 <TOF_start_continuous+0x1b0>)
 800483c:	f993 3000 	ldrsb.w	r3, [r3]
 8004840:	b2d9      	uxtb	r1, r3
 8004842:	4b51      	ldr	r3, [pc, #324]	; (8004988 <TOF_start_continuous+0x1b8>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2291      	movs	r2, #145	; 0x91
 8004848:	f001 fb46 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 800484c:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <TOF_start_continuous+0x1b4>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004852:	f993 3000 	ldrsb.w	r3, [r3]
 8004856:	b2d9      	uxtb	r1, r3
 8004858:	2301      	movs	r3, #1
 800485a:	2200      	movs	r2, #0
 800485c:	f001 fb3c 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004860:	4b48      	ldr	r3, [pc, #288]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004862:	6818      	ldr	r0, [r3, #0]
 8004864:	4b46      	ldr	r3, [pc, #280]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004866:	f993 3000 	ldrsb.w	r3, [r3]
 800486a:	b2d9      	uxtb	r1, r3
 800486c:	2300      	movs	r3, #0
 800486e:	22ff      	movs	r2, #255	; 0xff
 8004870:	f001 fb32 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8004874:	4b43      	ldr	r3, [pc, #268]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004876:	6818      	ldr	r0, [r3, #0]
 8004878:	4b41      	ldr	r3, [pc, #260]	; (8004980 <TOF_start_continuous+0x1b0>)
 800487a:	f993 3000 	ldrsb.w	r3, [r3]
 800487e:	b2d9      	uxtb	r1, r3
 8004880:	2300      	movs	r3, #0
 8004882:	2280      	movs	r2, #128	; 0x80
 8004884:	f001 fb28 	bl	8005ed8 <i2cSendByteToSlaveReg>

	if (period_ms != 0)
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d066      	beq.n	800495c <TOF_start_continuous+0x18c>
	{
		// continuous timed mode

		uint8_t readBuffer[2];

		i2c_return = i2cBurstRegRead(
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	4b3b      	ldr	r3, [pc, #236]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004894:	f993 3000 	ldrsb.w	r3, [r3]
 8004898:	b2d9      	uxtb	r1, r3
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	2202      	movs	r2, #2
 80048a0:	9200      	str	r2, [sp, #0]
 80048a2:	22f8      	movs	r2, #248	; 0xf8
 80048a4:	f001 fbd2 	bl	800604c <i2cBurstRegRead>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]
				TOF_i2c, TOF_address_used,
				TOF_REG_OSC_CALIBRATE_VAL,
				readBuffer, 2);
		if (i2c_return != I2C_OK)
 80048ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <TOF_start_continuous+0xe8>
		{
			// returns false, if i2c communication was not successful
			return false;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e05f      	b.n	8004978 <TOF_start_continuous+0x1a8>
		}

		uint16_t osc_calibrate_val = (readBuffer[0]<<8) + readBuffer[1];
 80048b8:	7b3b      	ldrb	r3, [r7, #12]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	021b      	lsls	r3, r3, #8
 80048be:	b29a      	uxth	r2, r3
 80048c0:	7b7b      	ldrb	r3, [r7, #13]
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	823b      	strh	r3, [r7, #16]

		if (osc_calibrate_val != 0)
 80048c8:	8a3b      	ldrh	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <TOF_start_continuous+0x108>
		{
			period_ms *= osc_calibrate_val;
 80048ce:	8a3a      	ldrh	r2, [r7, #16]
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	fb02 f303 	mul.w	r3, r2, r3
 80048d6:	617b      	str	r3, [r7, #20]
		}

		uint8_t bytes[4];

		bytes[0] = (period_ms >> 24) & 0xFF;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	0e1b      	lsrs	r3, r3, #24
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	723b      	strb	r3, [r7, #8]
		bytes[1] = (period_ms >> 16) & 0xFF;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	727b      	strb	r3, [r7, #9]
		bytes[2] = (period_ms >> 8) & 0xFF;
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	0a1b      	lsrs	r3, r3, #8
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	72bb      	strb	r3, [r7, #10]
		bytes[3] = period_ms & 0xFF;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	72fb      	strb	r3, [r7, #11]

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD, bytes[0]);
 80048f6:	4b23      	ldr	r3, [pc, #140]	; (8004984 <TOF_start_continuous+0x1b4>)
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	4b21      	ldr	r3, [pc, #132]	; (8004980 <TOF_start_continuous+0x1b0>)
 80048fc:	f993 3000 	ldrsb.w	r3, [r3]
 8004900:	b2d9      	uxtb	r1, r3
 8004902:	7a3b      	ldrb	r3, [r7, #8]
 8004904:	2204      	movs	r2, #4
 8004906:	f001 fae7 	bl	8005ed8 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 1, bytes[1]);
 800490a:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <TOF_start_continuous+0x1b4>)
 800490c:	6818      	ldr	r0, [r3, #0]
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004910:	f993 3000 	ldrsb.w	r3, [r3]
 8004914:	b2d9      	uxtb	r1, r3
 8004916:	7a7b      	ldrb	r3, [r7, #9]
 8004918:	2205      	movs	r2, #5
 800491a:	f001 fadd 	bl	8005ed8 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 2, bytes[2]);
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	4b17      	ldr	r3, [pc, #92]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004924:	f993 3000 	ldrsb.w	r3, [r3]
 8004928:	b2d9      	uxtb	r1, r3
 800492a:	7abb      	ldrb	r3, [r7, #10]
 800492c:	2206      	movs	r2, #6
 800492e:	f001 fad3 	bl	8005ed8 <i2cSendByteToSlaveReg>
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_INTERMEASUREMENT_PERIOD + 3, bytes[3]);
 8004932:	4b14      	ldr	r3, [pc, #80]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004938:	f993 3000 	ldrsb.w	r3, [r3]
 800493c:	b2d9      	uxtb	r1, r3
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	2207      	movs	r2, #7
 8004942:	f001 fac9 	bl	8005ed8 <i2cSendByteToSlaveReg>

		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <TOF_start_continuous+0x1b4>)
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <TOF_start_continuous+0x1b0>)
 800494c:	f993 3000 	ldrsb.w	r3, [r3]
 8004950:	b2d9      	uxtb	r1, r3
 8004952:	2304      	movs	r3, #4
 8004954:	2200      	movs	r2, #0
 8004956:	f001 fabf 	bl	8005ed8 <i2cSendByteToSlaveReg>
 800495a:	e009      	b.n	8004970 <TOF_start_continuous+0x1a0>
	}
	else
	{
		// continuous back-to-back mode
		i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <TOF_start_continuous+0x1b4>)
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <TOF_start_continuous+0x1b0>)
 8004962:	f993 3000 	ldrsb.w	r3, [r3]
 8004966:	b2d9      	uxtb	r1, r3
 8004968:	2302      	movs	r3, #2
 800496a:	2200      	movs	r2, #0
 800496c:	f001 fab4 	bl	8005ed8 <i2cSendByteToSlaveReg>
	}

	TOF_continuous_mode = true;
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <TOF_start_continuous+0x1bc>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]

	return true;
 8004976:	2301      	movs	r3, #1
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000026 	.word	0x20000026
 8004984:	20000250 	.word	0x20000250
 8004988:	20000254 	.word	0x20000254
 800498c:	20000255 	.word	0x20000255

08004990 <TOF_stop_continuous>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if continuous mode stops successfully, false otherwise.
 */
bool TOF_stop_continuous(TOFSensor_t* TOFSENS)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	889b      	ldrh	r3, [r3, #4]
 800499c:	b25a      	sxtb	r2, r3
 800499e:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <TOF_stop_continuous+0xb4>)
 80049a0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a28      	ldr	r2, [pc, #160]	; (8004a48 <TOF_stop_continuous+0xb8>)
 80049a8:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 80049aa:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <TOF_stop_continuous+0xbc>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <TOF_stop_continuous+0x2c>
	{
		return false;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e03f      	b.n	8004a3c <TOF_stop_continuous+0xac>
	}

	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01); // VL53L0X_REG_SYSRANGE_MODE_SINGLESHOT
 80049bc:	4b22      	ldr	r3, [pc, #136]	; (8004a48 <TOF_stop_continuous+0xb8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <TOF_stop_continuous+0xb4>)
 80049c2:	f993 3000 	ldrsb.w	r3, [r3]
 80049c6:	b2d9      	uxtb	r1, r3
 80049c8:	2301      	movs	r3, #1
 80049ca:	2200      	movs	r2, #0
 80049cc:	f001 fa84 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x01);
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <TOF_stop_continuous+0xb8>)
 80049d2:	6818      	ldr	r0, [r3, #0]
 80049d4:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <TOF_stop_continuous+0xb4>)
 80049d6:	f993 3000 	ldrsb.w	r3, [r3]
 80049da:	b2d9      	uxtb	r1, r3
 80049dc:	2301      	movs	r3, #1
 80049de:	22ff      	movs	r2, #255	; 0xff
 80049e0:	f001 fa7a 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x00);
 80049e4:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <TOF_stop_continuous+0xb8>)
 80049e6:	6818      	ldr	r0, [r3, #0]
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <TOF_stop_continuous+0xb4>)
 80049ea:	f993 3000 	ldrsb.w	r3, [r3]
 80049ee:	b2d9      	uxtb	r1, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	2200      	movs	r2, #0
 80049f4:	f001 fa70 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_1, 0x00);
 80049f8:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <TOF_stop_continuous+0xb8>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <TOF_stop_continuous+0xb4>)
 80049fe:	f993 3000 	ldrsb.w	r3, [r3]
 8004a02:	b2d9      	uxtb	r1, r3
 8004a04:	2300      	movs	r3, #0
 8004a06:	2291      	movs	r2, #145	; 0x91
 8004a08:	f001 fa66 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSRANGE_START, 0x01);
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <TOF_stop_continuous+0xb8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <TOF_stop_continuous+0xb4>)
 8004a12:	f993 3000 	ldrsb.w	r3, [r3]
 8004a16:	b2d9      	uxtb	r1, r3
 8004a18:	2301      	movs	r3, #1
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f001 fa5c 	bl	8005ed8 <i2cSendByteToSlaveReg>
	i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_INTERNAL_TUNING_2, 0x00);
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <TOF_stop_continuous+0xb8>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <TOF_stop_continuous+0xb4>)
 8004a26:	f993 3000 	ldrsb.w	r3, [r3]
 8004a2a:	b2d9      	uxtb	r1, r3
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	22ff      	movs	r2, #255	; 0xff
 8004a30:	f001 fa52 	bl	8005ed8 <i2cSendByteToSlaveReg>

	TOF_continuous_mode = false;
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <TOF_stop_continuous+0xbc>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]

	return true;
 8004a3a:	2301      	movs	r3, #1
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000026 	.word	0x20000026
 8004a48:	20000250 	.word	0x20000250
 8004a4c:	20000255 	.word	0x20000255

08004a50 <TOF_read_continuous_distance>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the distance is successfully read and updated, otherwise false.
 */
bool TOF_read_continuous_distance(TOFSensor_t* TOFSENS)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	889b      	ldrh	r3, [r3, #4]
 8004a5c:	b25a      	sxtb	r2, r3
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <TOF_read_continuous_distance+0x54>)
 8004a60:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <TOF_read_continuous_distance+0x58>)
 8004a68:	6013      	str	r3, [r2, #0]

	if(!TOF_continuous_mode)
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <TOF_read_continuous_distance+0x5c>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f083 0301 	eor.w	r3, r3, #1
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <TOF_read_continuous_distance+0x2c>
	{
		return false;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	e00e      	b.n	8004a9a <TOF_read_continuous_distance+0x4a>
	}

	if(!TOF_getMeasurement(TOFSENS, &TOFSENS->distanceFromTOF))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	4619      	mov	r1, r3
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7ff fdfe 	bl	8004684 <TOF_getMeasurement>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f083 0301 	eor.w	r3, r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <TOF_read_continuous_distance+0x48>
	{
		return false;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <TOF_read_continuous_distance+0x4a>
	}

	return true;
 8004a98:	2301      	movs	r3, #1
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20000026 	.word	0x20000026
 8004aa8:	20000250 	.word	0x20000250
 8004aac:	20000255 	.word	0x20000255

08004ab0 <TOF_set_ranging_profile>:
 *					- TOF_measuringage  		  			Age of the measured distance
 *
 * @returns:     bool: true if the ranging profile was successfully set, otherwise false.
 */
bool TOF_set_ranging_profile(TOFSensor_t* TOFSENS)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	889b      	ldrh	r3, [r3, #4]
 8004abc:	b25a      	sxtb	r2, r3
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <TOF_set_ranging_profile+0xfc>)
 8004ac0:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <TOF_set_ranging_profile+0x100>)
 8004ac8:	6013      	str	r3, [r2, #0]

	bool value = false;
 8004aca:	2300      	movs	r3, #0
 8004acc:	73fb      	strb	r3, [r7, #15]
	bool prevalue = false;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	73bb      	strb	r3, [r7, #14]
    switch (TOFSENS->Ranging_Profiles_t) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	88db      	ldrh	r3, [r3, #6]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d860      	bhi.n	8004b9e <TOF_set_ranging_profile+0xee>
 8004adc:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <TOF_set_ranging_profile+0x34>)
 8004ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae2:	bf00      	nop
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004b25 	.word	0x08004b25
 8004aec:	08004b53 	.word	0x08004b53
 8004af0:	08004b7f 	.word	0x08004b7f
    case TOF_DEFAULT_MODE_D:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 30000) == true)
 8004af4:	f247 5130 	movw	r1, #30000	; 0x7530
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f95f 	bl	8004dbc <TOF_set_measurement_timing_budget>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d008      	beq.n	8004b16 <TOF_set_ranging_profile+0x66>
    	{
    		TOFSENS->Ranging_Profiles_t = TOF_DEFAULT_MODE_D;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	80da      	strh	r2, [r3, #6]
    		TOFSENS->Ranging_Profile_time = 30;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	221e      	movs	r2, #30
 8004b0e:	615a      	str	r2, [r3, #20]
    		value = true;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
    		break;
 8004b14:	e045      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
    	}
    	else
    	{
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2205      	movs	r2, #5
 8004b1a:	80da      	strh	r2, [r3, #6]
        	value = TOF_RANGINGPROFILE_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
    		return false;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e03f      	b.n	8004ba4 <TOF_set_ranging_profile+0xf4>
    		break;
    	}

    case TOF_HIGH_SPEED_MODE_S:
        if(TOF_set_measurement_timing_budget(TOFSENS, 20000) == true)
 8004b24:	f644 6120 	movw	r1, #20000	; 0x4e20
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f947 	bl	8004dbc <TOF_set_measurement_timing_budget>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <TOF_set_ranging_profile+0x96>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_SPEED_MODE_S;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 20;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2214      	movs	r2, #20
 8004b3e:	615a      	str	r2, [r3, #20]
        	value = true;
 8004b40:	2301      	movs	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
        	break;
 8004b44:	e02d      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	80da      	strh	r2, [r3, #6]

        	break;
 8004b50:	e027      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
        }

    case TOF_HIGH_ACCURACY_MODE_A:
        if(TOF_set_measurement_timing_budget(TOFSENS, 200) == true)
 8004b52:	21c8      	movs	r1, #200	; 0xc8
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f931 	bl	8004dbc <TOF_set_measurement_timing_budget>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d008      	beq.n	8004b72 <TOF_set_ranging_profile+0xc2>
        {
        	TOFSENS->Ranging_Profiles_t = TOF_HIGH_ACCURACY_MODE_A;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2203      	movs	r2, #3
 8004b64:	80da      	strh	r2, [r3, #6]
        	TOFSENS->Ranging_Profile_time = 200000;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a12      	ldr	r2, [pc, #72]	; (8004bb4 <TOF_set_ranging_profile+0x104>)
 8004b6a:	615a      	str	r2, [r3, #20]
        	value = true;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	73fb      	strb	r3, [r7, #15]
        	break;
 8004b70:	e017      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
        }
        else
        {
        	value = TOF_RANGINGPROFILE_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2205      	movs	r2, #5
 8004b7a:	80da      	strh	r2, [r3, #6]
        	break;
 8004b7c:	e011      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
        }

    case TOF_LONG_RANGE_MODE_R:
    	if(TOF_set_measurement_timing_budget(TOFSENS, 33) == true)
 8004b7e:	2121      	movs	r1, #33	; 0x21
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f91b 	bl	8004dbc <TOF_set_measurement_timing_budget>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <TOF_set_ranging_profile+0xe2>
    	        {
    	        	value = true;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
    	        	break;
 8004b90:	e007      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
    	        }
    	        else
    	        {
    	        	value = TOF_RANGINGPROFILE_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
    	        	TOFSENS->Ranging_Profiles_t = TOF_RANGINGPROFILE_ERROR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2205      	movs	r2, #5
 8004b9a:	80da      	strh	r2, [r3, #6]
    	        	break;
 8004b9c:	e001      	b.n	8004ba2 <TOF_set_ranging_profile+0xf2>
    		break;
    	}

    default:
        // Handle an invalid profile case
        return value;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	e000      	b.n	8004ba4 <TOF_set_ranging_profile+0xf4>
    }

    return value;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000026 	.word	0x20000026
 8004bb0:	20000250 	.word	0x20000250
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <TOF_get_sequence_step_enables>:
 *               - The SYSTEM_SEQUENCE_CONFIG register stores the configuration of the sequence steps used by the sensor.
 *               - Each bit in the byte represents an individual sequence step: TCC, DSS, MSRC, PRE_RANGE, FINAL_RANGE.
 *               - The SequenceStepEnables structure is populated with the status of each sequence step based on these bits.
 */
bool TOF_get_sequence_step_enables(TOFSensor_t* TOFSENS, SequenceStepEnables *enables)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	889b      	ldrh	r3, [r3, #4]
 8004bc6:	b25a      	sxtb	r2, r3
 8004bc8:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <TOF_get_sequence_step_enables+0x98>)
 8004bca:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <TOF_get_sequence_step_enables+0x9c>)
 8004bd2:	6013      	str	r3, [r2, #0]

    I2C_RETURN_CODE_t i2c_return;
    uint8_t sequence_config;

    // Read the byte from the TOF_REG_SYSTEM_SEQUENCE_CONFIG register
    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_SYSTEM_SEQUENCE_CONFIG, &sequence_config);
 8004bd4:	4b1f      	ldr	r3, [pc, #124]	; (8004c54 <TOF_get_sequence_step_enables+0x9c>)
 8004bd6:	6818      	ldr	r0, [r3, #0]
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <TOF_get_sequence_step_enables+0x98>)
 8004bda:	f993 3000 	ldrsb.w	r3, [r3]
 8004bde:	b2d9      	uxtb	r1, r3
 8004be0:	f107 030e 	add.w	r3, r7, #14
 8004be4:	2201      	movs	r2, #1
 8004be6:	f001 f9c5 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]

    // Check if the I2C read was successful
    if (i2c_return != I2C_OK)
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <TOF_get_sequence_step_enables+0x42>
    {
        return false;  // Return false if there was an error
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e025      	b.n	8004c46 <TOF_get_sequence_step_enables+0x8e>
    }

    // Extract bit values using shifts and masks
    enables->tcc         = (sequence_config >> 4) & 0x1;  // Extract the TCC bit
 8004bfa:	7bbb      	ldrb	r3, [r7, #14]
 8004bfc:	091b      	lsrs	r3, r3, #4
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	701a      	strb	r2, [r3, #0]
    enables->dss         = (sequence_config >> 3) & 0x1;  // Extract the DSS bit
 8004c0a:	7bbb      	ldrb	r3, [r7, #14]
 8004c0c:	08db      	lsrs	r3, r3, #3
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	705a      	strb	r2, [r3, #1]
    enables->msrc        = (sequence_config >> 2) & 0x1;  // Extract the MSRC bit
 8004c1a:	7bbb      	ldrb	r3, [r7, #14]
 8004c1c:	089b      	lsrs	r3, r3, #2
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	709a      	strb	r2, [r3, #2]
    enables->pre_range   = (sequence_config >> 6) & 0x1;  // Extract the PRE_RANGE bit
 8004c2a:	7bbb      	ldrb	r3, [r7, #14]
 8004c2c:	099b      	lsrs	r3, r3, #6
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	70da      	strb	r2, [r3, #3]
    enables->final_range = (sequence_config >> 7) & 0x1;  // Extract the FINAL_RANGE bit
 8004c3a:	7bbb      	ldrb	r3, [r7, #14]
 8004c3c:	09db      	lsrs	r3, r3, #7
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	711a      	strb	r2, [r3, #4]

    return true;  // Return true if everything succeeded
 8004c44:	2301      	movs	r3, #1
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000026 	.word	0x20000026
 8004c54:	20000250 	.word	0x20000250

08004c58 <TOF_get_sequence_step_timeouts>:
 * @notes:
 *               - The calculated timeouts are in microseconds and are stored in the `timeouts` structure.
 *               - The VCSEL period for both pre-range and final-range steps is used to calculate the corresponding timeouts.
 */
bool TOF_get_sequence_step_timeouts(TOFSensor_t* TOFSENS, SequenceStepEnables *enables, SequenceStepTimeouts *timeouts)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	889b      	ldrh	r3, [r3, #4]
 8004c68:	b25a      	sxtb	r2, r3
 8004c6a:	4b52      	ldr	r3, [pc, #328]	; (8004db4 <TOF_get_sequence_step_timeouts+0x15c>)
 8004c6c:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a51      	ldr	r2, [pc, #324]	; (8004db8 <TOF_get_sequence_step_timeouts+0x160>)
 8004c74:	6013      	str	r3, [r2, #0]

	uint8_t data;
	I2C_RETURN_CODE_t i2c_return;

    timeouts->pre_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodPreRange);
 8004c76:	2100      	movs	r1, #0
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f943 	bl	8004f04 <TOF_get_vcsel_pulse_period>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	701a      	strb	r2, [r3, #0]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_MSRC_CONFIG_TIMEOUT_MACROP, &data);
 8004c86:	4b4c      	ldr	r3, [pc, #304]	; (8004db8 <TOF_get_sequence_step_timeouts+0x160>)
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	4b4a      	ldr	r3, [pc, #296]	; (8004db4 <TOF_get_sequence_step_timeouts+0x15c>)
 8004c8c:	f993 3000 	ldrsb.w	r3, [r3]
 8004c90:	b2d9      	uxtb	r1, r3
 8004c92:	f107 0316 	add.w	r3, r7, #22
 8004c96:	2246      	movs	r2, #70	; 0x46
 8004c98:	f001 f96c 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]
    timeouts->msrc_dss_tcc_mclks = data;
 8004ca0:	7dbb      	ldrb	r3, [r7, #22]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	805a      	strh	r2, [r3, #2]

	if (i2c_return != I2C_OK)
 8004ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <TOF_get_sequence_step_timeouts+0x5c>
	{
		return false;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e07b      	b.n	8004dac <TOF_get_sequence_step_timeouts+0x154>
	}
    timeouts->msrc_dss_tcc_mclks += 1;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	885b      	ldrh	r3, [r3, #2]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	b29a      	uxth	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	805a      	strh	r2, [r3, #2]
    timeouts->msrc_dss_tcc_us = timeout_mclks_to_microseconds(timeouts->msrc_dss_tcc_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	885a      	ldrh	r2, [r3, #2]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f000 f9b4 	bl	8005038 <timeout_mclks_to_microseconds>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]

    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004cd6:	4b38      	ldr	r3, [pc, #224]	; (8004db8 <TOF_get_sequence_step_timeouts+0x160>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	4b36      	ldr	r3, [pc, #216]	; (8004db4 <TOF_get_sequence_step_timeouts+0x15c>)
 8004cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce0:	b2d9      	uxtb	r1, r3
 8004ce2:	f107 0316 	add.w	r3, r7, #22
 8004ce6:	2251      	movs	r2, #81	; 0x51
 8004ce8:	f001 f944 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004cec:	4603      	mov	r3, r0
 8004cee:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8004cf0:	7dbb      	ldrb	r3, [r7, #22]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8004cf8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <TOF_get_sequence_step_timeouts+0xac>
    	{
    		return false;
 8004d00:	2300      	movs	r3, #0
 8004d02:	e053      	b.n	8004dac <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->pre_range_mclks = decode_timeout(timeouts->pre_range_mclks);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	891b      	ldrh	r3, [r3, #8]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f97b 	bl	8005004 <decode_timeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	811a      	strh	r2, [r3, #8]
    timeouts->pre_range_us = timeout_mclks_to_microseconds(timeouts->pre_range_mclks, timeouts->pre_range_vcsel_period_pclks);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	891a      	ldrh	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f000 f989 	bl	8005038 <timeout_mclks_to_microseconds>
 8004d26:	4602      	mov	r2, r0
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

    timeouts->final_range_vcsel_period_pclks = TOF_get_vcsel_pulse_period(TOFSENS, VcselPeriodFinalRange);
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f8e8 	bl	8004f04 <TOF_get_vcsel_pulse_period>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	741a      	strb	r2, [r3, #16]


    i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, &data);
 8004d3c:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <TOF_get_sequence_step_timeouts+0x160>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <TOF_get_sequence_step_timeouts+0x15c>)
 8004d42:	f993 3000 	ldrsb.w	r3, [r3]
 8004d46:	b2d9      	uxtb	r1, r3
 8004d48:	f107 0316 	add.w	r3, r7, #22
 8004d4c:	2271      	movs	r2, #113	; 0x71
 8004d4e:	f001 f911 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
    timeouts->pre_range_mclks = data;
 8004d56:	7dbb      	ldrb	r3, [r7, #22]
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	811a      	strh	r2, [r3, #8]
    if (i2c_return != I2C_OK)
 8004d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <TOF_get_sequence_step_timeouts+0x112>
    	{
    		return false;
 8004d66:	2300      	movs	r3, #0
 8004d68:	e020      	b.n	8004dac <TOF_get_sequence_step_timeouts+0x154>
    	}
    timeouts->final_range_mclks = decode_timeout(timeouts->final_range_mclks);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	8a5b      	ldrh	r3, [r3, #18]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f948 	bl	8005004 <decode_timeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	825a      	strh	r2, [r3, #18]

    if (enables->pre_range)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	78db      	ldrb	r3, [r3, #3]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d007      	beq.n	8004d94 <TOF_get_sequence_step_timeouts+0x13c>
    {
        timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	8a5a      	ldrh	r2, [r3, #18]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	891b      	ldrh	r3, [r3, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	825a      	strh	r2, [r3, #18]
    }

    timeouts->final_range_us = timeout_mclks_to_microseconds(timeouts->final_range_mclks, timeouts->final_range_vcsel_period_pclks);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8a5a      	ldrh	r2, [r3, #18]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7c1b      	ldrb	r3, [r3, #16]
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f000 f94a 	bl	8005038 <timeout_mclks_to_microseconds>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	615a      	str	r2, [r3, #20]

    return true;
 8004daa:	2301      	movs	r3, #1
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000026 	.word	0x20000026
 8004db8:	20000250 	.word	0x20000250

08004dbc <TOF_set_measurement_timing_budget>:
 *               uint32_t budget_us							Desired timing budget in microseconds (µs).
 *
 * @returns:     bool: true if the timing budget was successfully set, otherwise false.
 */
bool TOF_set_measurement_timing_budget(TOFSensor_t* TOFSENS, uint32_t budget_us)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b092      	sub	sp, #72	; 0x48
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	889b      	ldrh	r3, [r3, #4]
 8004dca:	b25a      	sxtb	r2, r3
 8004dcc:	4b4b      	ldr	r3, [pc, #300]	; (8004efc <TOF_set_measurement_timing_budget+0x140>)
 8004dce:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4a      	ldr	r2, [pc, #296]	; (8004f00 <TOF_set_measurement_timing_budget+0x144>)
 8004dd6:	6013      	str	r3, [r2, #0]
	I2C_RETURN_CODE_t i2c_return;

    SequenceStepEnables enables;
    SequenceStepTimeouts timeouts;

    uint16_t StartOverhead     = 1910;
 8004dd8:	f240 7376 	movw	r3, #1910	; 0x776
 8004ddc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint16_t EndOverhead       = 960;
 8004dde:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004de2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    uint16_t MsrcOverhead      = 660;
 8004de4:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004de8:	877b      	strh	r3, [r7, #58]	; 0x3a
    uint16_t TccOverhead       = 590;
 8004dea:	f240 234e 	movw	r3, #590	; 0x24e
 8004dee:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t DssOverhead       = 690;
 8004df0:	f240 23b2 	movw	r3, #690	; 0x2b2
 8004df4:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint16_t PreRangeOverhead  = 660;
 8004df6:	f44f 7325 	mov.w	r3, #660	; 0x294
 8004dfa:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t FinalRangeOverhead = 550;
 8004dfc:	f240 2326 	movw	r3, #550	; 0x226
 8004e00:	867b      	strh	r3, [r7, #50]	; 0x32

    uint32_t used_budget_us = StartOverhead + EndOverhead;
 8004e02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004e04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e06:	4413      	add	r3, r2
 8004e08:	647b      	str	r3, [r7, #68]	; 0x44

    // Get sequence step enables and timeouts
    TOF_get_sequence_step_enables(TOFSENS, &enables);
 8004e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0e:	4619      	mov	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f7ff fed1 	bl	8004bb8 <TOF_get_sequence_step_enables>
    TOF_get_sequence_step_timeouts(TOFSENS, &enables, &timeouts);
 8004e16:	f107 020c 	add.w	r2, r7, #12
 8004e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ff19 	bl	8004c58 <TOF_get_sequence_step_timeouts>

    if (enables.tcc)
 8004e26:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <TOF_set_measurement_timing_budget+0x7e>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e32:	4413      	add	r3, r2
 8004e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e36:	4413      	add	r3, r2
 8004e38:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.dss)
 8004e3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <TOF_set_measurement_timing_budget+0x96>
    {
        used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e46:	4413      	add	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4c:	4413      	add	r3, r2
 8004e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e50:	e009      	b.n	8004e66 <TOF_set_measurement_timing_budget+0xaa>
    }
    else if (enables.msrc)
 8004e52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <TOF_set_measurement_timing_budget+0xaa>
    {
        used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e5e:	4413      	add	r3, r2
 8004e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e62:	4413      	add	r3, r2
 8004e64:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.pre_range)
 8004e66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <TOF_set_measurement_timing_budget+0xbe>
    {
        used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004e72:	4413      	add	r3, r2
 8004e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e76:	4413      	add	r3, r2
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
    }

    if (enables.final_range)
 8004e7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d037      	beq.n	8004ef2 <TOF_set_measurement_timing_budget+0x136>
    {
        used_budget_us += FinalRangeOverhead;
 8004e82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e86:	4413      	add	r3, r2
 8004e88:	647b      	str	r3, [r7, #68]	; 0x44

        if (used_budget_us > budget_us)
 8004e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d901      	bls.n	8004e96 <TOF_set_measurement_timing_budget+0xda>
        {
            // Requested timeout too big
            return false;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e02e      	b.n	8004ef4 <TOF_set_measurement_timing_budget+0x138>
        }

        uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

        // Convert the final range timeout to MCLks
        uint32_t final_range_timeout_mclks =
        timeout_microseconds_to_mclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8004e9e:	7f3b      	ldrb	r3, [r7, #28]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ea4:	f000 f8f0 	bl	8005088 <timeout_microseconds_to_mclks>
 8004ea8:	6438      	str	r0, [r7, #64]	; 0x40

        if (enables.pre_range)
 8004eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d004      	beq.n	8004ebc <TOF_set_measurement_timing_budget+0x100>
        {
            final_range_timeout_mclks += timeouts.pre_range_mclks;
 8004eb2:	8abb      	ldrh	r3, [r7, #20]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb8:	4413      	add	r3, r2
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
        }

        // Write the final range timeout to the register

        final_range_timeout_mclks = encode_timeOut(final_range_timeout_mclks);
 8004ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f873 	bl	8004fac <encode_timeOut>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	643b      	str	r3, [r7, #64]	; 0x40
        i2c_return = i2cSendByteToSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, final_range_timeout_mclks);
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <TOF_set_measurement_timing_budget+0x144>)
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <TOF_set_measurement_timing_budget+0x140>)
 8004ed0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ed4:	b2d9      	uxtb	r1, r3
 8004ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2271      	movs	r2, #113	; 0x71
 8004edc:	f000 fffc 	bl	8005ed8 <i2cSendByteToSlaveReg>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (i2c_return != I2C_OK){
 8004ee6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <TOF_set_measurement_timing_budget+0x136>
            		return false;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <TOF_set_measurement_timing_budget+0x138>
            	}
        // Store the timing budget for internal reuse
        //uint32_t measurement_timing_budget_us = budget_us;
    }

    return true;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3748      	adds	r7, #72	; 0x48
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000026 	.word	0x20000026
 8004f00:	20000250 	.word	0x20000250

08004f04 <TOF_get_vcsel_pulse_period>:
 *               - This function reads the sensor register corresponding to the VCSEL period for either the pre-range or final-range mode.
 *               - The raw register values are decoded before returning.
 *               - A return value of 255 indicates an error during the process (either reading the register or decoding the value).
 */
uint8_t TOF_get_vcsel_pulse_period(TOFSensor_t* TOFSENS, vcselPeriodType type)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
	TOF_address_used = TOFSENS->TOF_address_used;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	889b      	ldrh	r3, [r3, #4]
 8004f14:	b25a      	sxtb	r2, r3
 8004f16:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <TOF_get_vcsel_pulse_period+0xa0>)
 8004f18:	701a      	strb	r2, [r3, #0]
	TOF_i2c = TOFSENS->i2c_tof;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a22      	ldr	r2, [pc, #136]	; (8004fa8 <TOF_get_vcsel_pulse_period+0xa4>)
 8004f20:	6013      	str	r3, [r2, #0]

	I2C_RETURN_CODE_t i2c_return;

    uint8_t vcsel_period = 255;  // Default to 255 (error case)
 8004f22:	23ff      	movs	r3, #255	; 0xff
 8004f24:	73bb      	strb	r3, [r7, #14]

    if (type == VcselPeriodPreRange)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d119      	bne.n	8004f60 <TOF_get_vcsel_pulse_period+0x5c>
    {
        // Read the pre-range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <TOF_get_vcsel_pulse_period+0xa4>)
 8004f2e:	6818      	ldr	r0, [r3, #0]
 8004f30:	4b1c      	ldr	r3, [pc, #112]	; (8004fa4 <TOF_get_vcsel_pulse_period+0xa0>)
 8004f32:	f993 3000 	ldrsb.w	r3, [r3]
 8004f36:	b2d9      	uxtb	r1, r3
 8004f38:	f107 030e 	add.w	r3, r7, #14
 8004f3c:	2250      	movs	r2, #80	; 0x50
 8004f3e:	f001 f819 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <TOF_get_vcsel_pulse_period+0x4e>
    		return false;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	e023      	b.n	8004f9a <TOF_get_vcsel_pulse_period+0x96>
    	}
        vcsel_period = decodeVcselPeriod(vcsel_period);
 8004f52:	7bbb      	ldrb	r3, [r7, #14]
 8004f54:	3301      	adds	r3, #1
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	73bb      	strb	r3, [r7, #14]
 8004f5e:	e01b      	b.n	8004f98 <TOF_get_vcsel_pulse_period+0x94>
    }
    else if (type == VcselPeriodFinalRange)
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d118      	bne.n	8004f98 <TOF_get_vcsel_pulse_period+0x94>
    {
        // Read the final range VCSEL period register and decode
        i2c_return = i2cReadByteFromSlaveReg(TOF_i2c, TOF_address_used, TOF_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD, &vcsel_period);
 8004f66:	4b10      	ldr	r3, [pc, #64]	; (8004fa8 <TOF_get_vcsel_pulse_period+0xa4>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <TOF_get_vcsel_pulse_period+0xa0>)
 8004f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8004f70:	b2d9      	uxtb	r1, r3
 8004f72:	f107 030e 	add.w	r3, r7, #14
 8004f76:	2270      	movs	r2, #112	; 0x70
 8004f78:	f000 fffc 	bl	8005f74 <i2cReadByteFromSlaveReg>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	73fb      	strb	r3, [r7, #15]
    	if (i2c_return != I2C_OK){
 8004f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <TOF_get_vcsel_pulse_period+0x88>
    		return false;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e006      	b.n	8004f9a <TOF_get_vcsel_pulse_period+0x96>
    	}
    	vcsel_period = decodeVcselPeriod(vcsel_period);
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	73bb      	strb	r3, [r7, #14]
    }

    return vcsel_period;
 8004f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000026 	.word	0x20000026
 8004fa8:	20000250 	.word	0x20000250

08004fac <encode_timeOut>:
 *               - This function is crucial for converting a timeout value in macro clocks (MCLKs) into the format that can be used by the TOF sensor.
 *               - The encoded value is a 16-bit value where the higher byte represents the number of shifts, and the lower byte holds the adjusted value.
 *               - The input timeout value should be greater than zero, as the function is designed to handle positive timeouts.
 */
uint16_t encode_timeOut(uint16_t final_range_timeout_mclks)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	80fb      	strh	r3, [r7, #6]
	uint32_t ls_byte = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	817b      	strh	r3, [r7, #10]

	if (final_range_timeout_mclks > 0){
 8004fbe:	88fb      	ldrh	r3, [r7, #6]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d018      	beq.n	8004ff6 <encode_timeOut+0x4a>
	ls_byte = final_range_timeout_mclks - 1;
 8004fc4:	88fb      	ldrh	r3, [r7, #6]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	60fb      	str	r3, [r7, #12]

		while ((ls_byte & 0xFFFFFF00) > 0){
 8004fca:	e005      	b.n	8004fd8 <encode_timeOut+0x2c>
	      ls_byte >>= 1;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	085b      	lsrs	r3, r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
	      ms_byte++;
 8004fd2:	897b      	ldrh	r3, [r7, #10]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	817b      	strh	r3, [r7, #10]
		while ((ls_byte & 0xFFFFFF00) > 0){
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f4      	bne.n	8004fcc <encode_timeOut+0x20>
	    }

	    return (ms_byte << 8) | (ls_byte & 0xFF);
 8004fe2:	897b      	ldrh	r3, [r7, #10]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	e000      	b.n	8004ff8 <encode_timeOut+0x4c>
	  }
	  else { return 0; }
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <decode_timeout>:
 *               - This function is used to decode the timeout value from the format used by the TOF sensor's registers.
 *               - The formula used to calculate the timeout ensures that the timeout is a value greater than or equal to 1.
 *               - The decoded timeout can be used in further sensor configurations or calculations.
 */
uint16_t decode_timeout(uint16_t reg_val)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	80fb      	strh	r3, [r7, #6]
    // Formula: (LSByte * 2^MSByte) + 1
    // reg_val is a 16-bit value; the MSByte (Most Significant Byte) is the upper 8 bits
    // and the LSByte (Least Significant Byte) is the lower 8 bits.

    uint8_t msb = (reg_val >> 8) & 0xFF;  // Extract the most significant byte
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	0a1b      	lsrs	r3, r3, #8
 8005012:	b29b      	uxth	r3, r3
 8005014:	73fb      	strb	r3, [r7, #15]
    uint8_t lsb = reg_val & 0xFF;         // Extract the least significant byte
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	73bb      	strb	r3, [r7, #14]

    // Calculate the timeout as per the formula
    uint16_t timeout = (lsb << msb) + 1;
 800501a:	7bba      	ldrb	r2, [r7, #14]
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	b29b      	uxth	r3, r3
 8005024:	3301      	adds	r3, #1
 8005026:	81bb      	strh	r3, [r7, #12]

    return timeout;
 8005028:	89bb      	ldrh	r3, [r7, #12]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <timeout_mclks_to_microseconds>:
 * @notes:
 *               - This function is used to convert the sensor's timeout period (expressed in MCLKs) into a more human-readable form (microseconds).
 *               - The calculation ensures the proper timing conversion based on the VCSEL period, which varies depending on the sensor configuration.
 */
uint32_t timeout_mclks_to_microseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	460a      	mov	r2, r1
 8005042:	80fb      	strh	r3, [r7, #6]
 8005044:	4613      	mov	r3, r2
 8005046:	717b      	strb	r3, [r7, #5]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005048:	797b      	ldrb	r3, [r7, #5]
 800504a:	4a0d      	ldr	r2, [pc, #52]	; (8005080 <timeout_mclks_to_microseconds+0x48>)
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005054:	4a0b      	ldr	r2, [pc, #44]	; (8005084 <timeout_mclks_to_microseconds+0x4c>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	60fb      	str	r3, [r7, #12]

    // Convert the timeout period in MCLKs to microseconds

    return (uint32_t)((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800506a:	4a06      	ldr	r2, [pc, #24]	; (8005084 <timeout_mclks_to_microseconds+0x4c>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	099b      	lsrs	r3, r3, #6
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	003a2f00 	.word	0x003a2f00
 8005084:	10624dd3 	.word	0x10624dd3

08005088 <timeout_microseconds_to_mclks>:
 * @notes:
 *               - This function is used to convert a timeout period from microseconds into the raw timing unit (MCLKs), which is suitable for sensor register configurations.
 *               - The conversion takes into account the VCSEL period (in PCLKs) to properly adjust for different sensor configurations.
 */
uint32_t timeout_microseconds_to_mclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
    // Calculate the macro period in nanoseconds
    uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <timeout_microseconds_to_mclks+0x48>)
 8005098:	fb02 f303 	mul.w	r3, r2, r3
 800509c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80050a0:	4a0c      	ldr	r2, [pc, #48]	; (80050d4 <timeout_microseconds_to_mclks+0x4c>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	60fb      	str	r3, [r7, #12]

    // Convert timeout from microseconds to MCLKs
    // The formula uses rounding by adding (macro_period_ns / 2) before dividing
    uint32_t return_value = (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050b0:	fb03 f202 	mul.w	r2, r3, r2
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	441a      	add	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	60bb      	str	r3, [r7, #8]
    return return_value;
 80050c2:	68bb      	ldr	r3, [r7, #8]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	003a2f00 	.word	0x003a2f00
 80050d4:	10624dd3 	.word	0x10624dd3

080050d8 <extiVerifyIrqNum>:
 * Function to verify the integrity of the **irqNum** parameter.
 *
 * @param irqNum : Number of the EXTI interrupt (declared in maclEXTI.h)
 */
bool extiVerifyIrqNum(EXTI_IRQ_NUM irqNum)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
    if ((EXTI_PIN0  == irqNum) || (EXTI_PIN1  == irqNum) || (EXTI_PIN2  == irqNum) || (EXTI_PIN3  == irqNum) ||
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d03e      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d03b      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d038      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d035      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d032      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN4  == irqNum) || (EXTI_PIN5  == irqNum) || (EXTI_PIN6  == irqNum) || (EXTI_PIN7  == irqNum) ||
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	2b05      	cmp	r3, #5
 8005104:	d02f      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d02c      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	2b07      	cmp	r3, #7
 8005110:	d029      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d026      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN8  == irqNum) || (EXTI_PIN9  == irqNum) || (EXTI_PIN10 == irqNum) || (EXTI_PIN11 == irqNum) ||
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	2b09      	cmp	r3, #9
 800511c:	d023      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 800511e:	79fb      	ldrb	r3, [r7, #7]
 8005120:	2b0a      	cmp	r3, #10
 8005122:	d020      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	2b0b      	cmp	r3, #11
 8005128:	d01d      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	2b0c      	cmp	r3, #12
 800512e:	d01a      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
        (EXTI_PIN12 == irqNum) || (EXTI_PIN13 == irqNum) || (EXTI_PIN14 == irqNum) || (EXTI_PIN15 == irqNum) ||
 8005130:	79fb      	ldrb	r3, [r7, #7]
 8005132:	2b0d      	cmp	r3, #13
 8005134:	d017      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	2b0e      	cmp	r3, #14
 800513a:	d014      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	2b0f      	cmp	r3, #15
 8005140:	d011      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	2b10      	cmp	r3, #16
 8005146:	d00e      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
        (EXTI_VOLTAGE_DETECTION == irqNum) || (EXTI_RTC_ALARM == irqNum)  || (EXTI_USB_OTG_FS == irqNum)     ||
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b11      	cmp	r3, #17
 800514c:	d00b      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	2b12      	cmp	r3, #18
 8005152:	d008      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005154:	79fb      	ldrb	r3, [r7, #7]
 8005156:	2b14      	cmp	r3, #20
 8005158:	d005      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
        (EXTI_USB_OTG_HS == irqNum)        || (EXTI_RTC_TAMPER == irqNum) || (EXTI_RTC_WAKEUP == irqNum))
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	2b15      	cmp	r3, #21
 800515e:	d002      	beq.n	8005166 <extiVerifyIrqNum+0x8e>
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	2b16      	cmp	r3, #22
 8005164:	d101      	bne.n	800516a <extiVerifyIrqNum+0x92>
    {
        return true;
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <extiVerifyIrqNum+0x94>
    }
    return false;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <extiVerifyTrigger>:

/**
 * Function to verify the integrity of the **trigger** parameter.
 */
bool extiVerifyTrigger(EXTI_TRIGGER trigger)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
    if ((RISING_EDGE == trigger) || (FALLING_EDGE == trigger) || (RISING_AND_FALLING == trigger))
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d005      	beq.n	8005194 <extiVerifyTrigger+0x1c>
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d002      	beq.n	8005194 <extiVerifyTrigger+0x1c>
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d101      	bne.n	8005198 <extiVerifyTrigger+0x20>
    {
        return true;
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <extiVerifyTrigger+0x22>
    }
    return false;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <extiInit>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
void extiInit(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < 4; ++i)
 80051ae:	2300      	movs	r3, #0
 80051b0:	71fb      	strb	r3, [r7, #7]
 80051b2:	e008      	b.n	80051c6 <extiInit+0x1e>
    {
        SYSCFG->EXTICR[i] = 0x0000;
 80051b4:	4a09      	ldr	r2, [pc, #36]	; (80051dc <extiInit+0x34>)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	3302      	adds	r3, #2
 80051ba:	2100      	movs	r1, #0
 80051bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (uint8_t i = 0; i < 4; ++i)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	3301      	adds	r3, #1
 80051c4:	71fb      	strb	r3, [r7, #7]
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d9f3      	bls.n	80051b4 <extiInit+0xc>
    }
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	40013800 	.word	0x40013800

080051e0 <extiConfigIrq>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiConfigIrq(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
    uint8_t index = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
    uint8_t shift = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	73bb      	strb	r3, [r7, #14]
    uint8_t mask  = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	737b      	strb	r3, [r7, #13]

    if (gpioVerifyPort(port) != true)
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f937 	bl	800546c <gpioVerifyPort>
 80051fe:	4603      	mov	r3, r0
 8005200:	f083 0301 	eor.w	r3, r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d001      	beq.n	800520e <extiConfigIrq+0x2e>
    {
        return GPIO_INVALID_PORT;
 800520a:	23ff      	movs	r3, #255	; 0xff
 800520c:	e08a      	b.n	8005324 <extiConfigIrq+0x144>
    }
    if ((gpioVerifyPin(pin)) != true)
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f95d 	bl	80054d0 <gpioVerifyPin>
 8005216:	4603      	mov	r3, r0
 8005218:	f083 0301 	eor.w	r3, r3, #1
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <extiConfigIrq+0x46>
    {
        return GPIO_INVALID_PIN;
 8005222:	23fe      	movs	r3, #254	; 0xfe
 8005224:	e07e      	b.n	8005324 <extiConfigIrq+0x144>
    }

    switch ((uint8_t) pin)
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	2b0f      	cmp	r3, #15
 800522a:	d841      	bhi.n	80052b0 <extiConfigIrq+0xd0>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <extiConfigIrq+0x54>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005275 	.word	0x08005275
 8005238:	08005275 	.word	0x08005275
 800523c:	08005275 	.word	0x08005275
 8005240:	08005275 	.word	0x08005275
 8005244:	08005281 	.word	0x08005281
 8005248:	08005281 	.word	0x08005281
 800524c:	08005281 	.word	0x08005281
 8005250:	08005281 	.word	0x08005281
 8005254:	08005291 	.word	0x08005291
 8005258:	08005291 	.word	0x08005291
 800525c:	08005291 	.word	0x08005291
 8005260:	08005291 	.word	0x08005291
 8005264:	080052a1 	.word	0x080052a1
 8005268:	080052a1 	.word	0x080052a1
 800526c:	080052a1 	.word	0x080052a1
 8005270:	080052a1 	.word	0x080052a1
    {
        case PIN0:
        case PIN1:
        case PIN2:
        case PIN3:
            shift = pin * 4;        // Every pin uses four bits
 8005274:	78fb      	ldrb	r3, [r7, #3]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	73bb      	strb	r3, [r7, #14]
            index = 0;              // Set the array-index of SYSCFG->EXTICR[]
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
            break;
 800527e:	e017      	b.n	80052b0 <extiConfigIrq+0xd0>

        case PIN4:
        case PIN5:
        case PIN6:
        case PIN7:
            shift = (pin - 4) * 4;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	3b04      	subs	r3, #4
 8005284:	b2db      	uxtb	r3, r3
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	73bb      	strb	r3, [r7, #14]
            index = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	73fb      	strb	r3, [r7, #15]
            break;
 800528e:	e00f      	b.n	80052b0 <extiConfigIrq+0xd0>

        case PIN8:
        case PIN9:
        case PIN10:
        case PIN11:
            shift = (pin - 8) * 4;
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	3b08      	subs	r3, #8
 8005294:	b2db      	uxtb	r3, r3
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	73bb      	strb	r3, [r7, #14]
            index = 2;
 800529a:	2302      	movs	r3, #2
 800529c:	73fb      	strb	r3, [r7, #15]
            break;
 800529e:	e007      	b.n	80052b0 <extiConfigIrq+0xd0>

        case PIN12:
        case PIN13:
        case PIN14:
        case PIN15:
            shift = (pin - 12) * 4;
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	3b0c      	subs	r3, #12
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	73bb      	strb	r3, [r7, #14]
            index = 3;
 80052aa:	2303      	movs	r3, #3
 80052ac:	73fb      	strb	r3, [r7, #15]
            break;
 80052ae:	bf00      	nop
    }

    if (GPIOA == port)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <extiConfigIrq+0x14c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d102      	bne.n	80052be <extiConfigIrq+0xde>
    {
        mask = PORT_A;              // Inversion of the port mask
 80052b8:	2300      	movs	r3, #0
 80052ba:	737b      	strb	r3, [r7, #13]
 80052bc:	e021      	b.n	8005302 <extiConfigIrq+0x122>
    }
    else if (GPIOB == port)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1b      	ldr	r2, [pc, #108]	; (8005330 <extiConfigIrq+0x150>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d102      	bne.n	80052cc <extiConfigIrq+0xec>
    {
        mask = PORT_B;
 80052c6:	2301      	movs	r3, #1
 80052c8:	737b      	strb	r3, [r7, #13]
 80052ca:	e01a      	b.n	8005302 <extiConfigIrq+0x122>
    }
    else if (GPIOC == port)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <extiConfigIrq+0x154>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d102      	bne.n	80052da <extiConfigIrq+0xfa>
    {
        mask = PORT_C;
 80052d4:	2302      	movs	r3, #2
 80052d6:	737b      	strb	r3, [r7, #13]
 80052d8:	e013      	b.n	8005302 <extiConfigIrq+0x122>
    }
    else if (GPIOD == port)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <extiConfigIrq+0x158>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d102      	bne.n	80052e8 <extiConfigIrq+0x108>
    {
        mask = PORT_D;
 80052e2:	2303      	movs	r3, #3
 80052e4:	737b      	strb	r3, [r7, #13]
 80052e6:	e00c      	b.n	8005302 <extiConfigIrq+0x122>
    }
    else if (GPIOE == port)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a14      	ldr	r2, [pc, #80]	; (800533c <extiConfigIrq+0x15c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d102      	bne.n	80052f6 <extiConfigIrq+0x116>
    {
        mask = PORT_E;
 80052f0:	2304      	movs	r3, #4
 80052f2:	737b      	strb	r3, [r7, #13]
 80052f4:	e005      	b.n	8005302 <extiConfigIrq+0x122>
    }
    else if (GPIOH == port)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a11      	ldr	r2, [pc, #68]	; (8005340 <extiConfigIrq+0x160>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d101      	bne.n	8005302 <extiConfigIrq+0x122>
    {
        mask = PORT_H;
 80052fe:	2307      	movs	r3, #7
 8005300:	737b      	strb	r3, [r7, #13]
    }

    SYSCFG->EXTICR[index] |= (mask << shift);
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <extiConfigIrq+0x164>)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3302      	adds	r3, #2
 8005308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800530c:	7b79      	ldrb	r1, [r7, #13]
 800530e:	7bbb      	ldrb	r3, [r7, #14]
 8005310:	fa01 f303 	lsl.w	r3, r1, r3
 8005314:	4618      	mov	r0, r3
 8005316:	490b      	ldr	r1, [pc, #44]	; (8005344 <extiConfigIrq+0x164>)
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	4302      	orrs	r2, r0
 800531c:	3302      	adds	r3, #2
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return EXTI_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40020000 	.word	0x40020000
 8005330:	40020400 	.word	0x40020400
 8005334:	40020800 	.word	0x40020800
 8005338:	40020c00 	.word	0x40020c00
 800533c:	40021000 	.word	0x40021000
 8005340:	40021c00 	.word	0x40021c00
 8005344:	40013800 	.word	0x40013800

08005348 <extiEnableIrq>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiEnableIrq(EXTI_IRQ_NUM irqNum)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
    if (extiVerifyIrqNum(irqNum) != true)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff febf 	bl	80050d8 <extiVerifyIrqNum>
 800535a:	4603      	mov	r3, r0
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <extiEnableIrq+0x22>
    {
        return EXTI_INVALID_IRQNUM;
 8005366:	23d8      	movs	r3, #216	; 0xd8
 8005368:	e00a      	b.n	8005380 <extiEnableIrq+0x38>
    }
    EXTI->IMR |= 1 << irqNum;
 800536a:	4b07      	ldr	r3, [pc, #28]	; (8005388 <extiEnableIrq+0x40>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	79fa      	ldrb	r2, [r7, #7]
 8005370:	2101      	movs	r1, #1
 8005372:	fa01 f202 	lsl.w	r2, r1, r2
 8005376:	4611      	mov	r1, r2
 8005378:	4a03      	ldr	r2, [pc, #12]	; (8005388 <extiEnableIrq+0x40>)
 800537a:	430b      	orrs	r3, r1
 800537c:	6013      	str	r3, [r2, #0]
    return EXTI_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40013c00 	.word	0x40013c00

0800538c <extiSetTriggerEdge>:
 *          <td rowspan="1">22...0</td>
 *      </tr>
 * </table>
 */
EXTI_IRQ_NUM extiSetTriggerEdge(EXTI_IRQ_NUM irqNum, EXTI_TRIGGER trigger)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	460a      	mov	r2, r1
 8005396:	71fb      	strb	r3, [r7, #7]
 8005398:	4613      	mov	r3, r2
 800539a:	71bb      	strb	r3, [r7, #6]
    if (extiVerifyIrqNum(irqNum) != true)
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fe9a 	bl	80050d8 <extiVerifyIrqNum>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f083 0301 	eor.w	r3, r3, #1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <extiSetTriggerEdge+0x28>
    {
        return EXTI_INVALID_IRQNUM;
 80053b0:	23d8      	movs	r3, #216	; 0xd8
 80053b2:	e055      	b.n	8005460 <extiSetTriggerEdge+0xd4>
    }

    if (extiVerifyTrigger(trigger) != true)
 80053b4:	79bb      	ldrb	r3, [r7, #6]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff fede 	bl	8005178 <extiVerifyTrigger>
 80053bc:	4603      	mov	r3, r0
 80053be:	f083 0301 	eor.w	r3, r3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <extiSetTriggerEdge+0x40>
    {
        return EXTI_INVALID_TRIGGER;
 80053c8:	23d7      	movs	r3, #215	; 0xd7
 80053ca:	e049      	b.n	8005460 <extiSetTriggerEdge+0xd4>
    }

    if (RISING_EDGE == trigger)
 80053cc:	79bb      	ldrb	r3, [r7, #6]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d115      	bne.n	80053fe <extiSetTriggerEdge+0x72>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 80053d2:	4b25      	ldr	r3, [pc, #148]	; (8005468 <extiSetTriggerEdge+0xdc>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	79fa      	ldrb	r2, [r7, #7]
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f202 	lsl.w	r2, r1, r2
 80053de:	4611      	mov	r1, r2
 80053e0:	4a21      	ldr	r2, [pc, #132]	; (8005468 <extiSetTriggerEdge+0xdc>)
 80053e2:	430b      	orrs	r3, r1
 80053e4:	6093      	str	r3, [r2, #8]
        EXTI->FTSR &= ~(1 << irqNum);   // Disable falling edge
 80053e6:	4b20      	ldr	r3, [pc, #128]	; (8005468 <extiSetTriggerEdge+0xdc>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	79fa      	ldrb	r2, [r7, #7]
 80053ec:	2101      	movs	r1, #1
 80053ee:	fa01 f202 	lsl.w	r2, r1, r2
 80053f2:	43d2      	mvns	r2, r2
 80053f4:	4611      	mov	r1, r2
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <extiSetTriggerEdge+0xdc>)
 80053f8:	400b      	ands	r3, r1
 80053fa:	60d3      	str	r3, [r2, #12]
 80053fc:	e02f      	b.n	800545e <extiSetTriggerEdge+0xd2>
    }
    else if (FALLING_EDGE == trigger)
 80053fe:	79bb      	ldrb	r3, [r7, #6]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d115      	bne.n	8005430 <extiSetTriggerEdge+0xa4>
    {
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 8005404:	4b18      	ldr	r3, [pc, #96]	; (8005468 <extiSetTriggerEdge+0xdc>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	79fa      	ldrb	r2, [r7, #7]
 800540a:	2101      	movs	r1, #1
 800540c:	fa01 f202 	lsl.w	r2, r1, r2
 8005410:	4611      	mov	r1, r2
 8005412:	4a15      	ldr	r2, [pc, #84]	; (8005468 <extiSetTriggerEdge+0xdc>)
 8005414:	430b      	orrs	r3, r1
 8005416:	60d3      	str	r3, [r2, #12]
        EXTI->RTSR &= ~(1 << irqNum);   // Disable rising edge
 8005418:	4b13      	ldr	r3, [pc, #76]	; (8005468 <extiSetTriggerEdge+0xdc>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	79fa      	ldrb	r2, [r7, #7]
 800541e:	2101      	movs	r1, #1
 8005420:	fa01 f202 	lsl.w	r2, r1, r2
 8005424:	43d2      	mvns	r2, r2
 8005426:	4611      	mov	r1, r2
 8005428:	4a0f      	ldr	r2, [pc, #60]	; (8005468 <extiSetTriggerEdge+0xdc>)
 800542a:	400b      	ands	r3, r1
 800542c:	6093      	str	r3, [r2, #8]
 800542e:	e016      	b.n	800545e <extiSetTriggerEdge+0xd2>
    }
    else if (RISING_AND_FALLING == trigger)
 8005430:	79bb      	ldrb	r3, [r7, #6]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d113      	bne.n	800545e <extiSetTriggerEdge+0xd2>
    {
        EXTI->RTSR |= 1 << irqNum;      // Enable rising edge
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <extiSetTriggerEdge+0xdc>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	79fa      	ldrb	r2, [r7, #7]
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f202 	lsl.w	r2, r1, r2
 8005442:	4611      	mov	r1, r2
 8005444:	4a08      	ldr	r2, [pc, #32]	; (8005468 <extiSetTriggerEdge+0xdc>)
 8005446:	430b      	orrs	r3, r1
 8005448:	6093      	str	r3, [r2, #8]
        EXTI->FTSR |= 1 << irqNum;      // Enable falling edge
 800544a:	4b07      	ldr	r3, [pc, #28]	; (8005468 <extiSetTriggerEdge+0xdc>)
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	79fa      	ldrb	r2, [r7, #7]
 8005450:	2101      	movs	r1, #1
 8005452:	fa01 f202 	lsl.w	r2, r1, r2
 8005456:	4611      	mov	r1, r2
 8005458:	4a03      	ldr	r2, [pc, #12]	; (8005468 <extiSetTriggerEdge+0xdc>)
 800545a:	430b      	orrs	r3, r1
 800545c:	60d3      	str	r3, [r2, #12]
    }
    return EXTI_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	40013c00 	.word	0x40013c00

0800546c <gpioVerifyPort>:
 * Function to verify the integrity of the **port** parameter.
 *
 * @param *port : Pointer to the GPIO port
 */
bool gpioVerifyPort(GPIO_TypeDef *port)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    if ((GPIOA == port) || (GPIOB == port) || (GPIOC == port) ||
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a10      	ldr	r2, [pc, #64]	; (80054b8 <gpioVerifyPort+0x4c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <gpioVerifyPort+0x38>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a0f      	ldr	r2, [pc, #60]	; (80054bc <gpioVerifyPort+0x50>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00f      	beq.n	80054a4 <gpioVerifyPort+0x38>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a0e      	ldr	r2, [pc, #56]	; (80054c0 <gpioVerifyPort+0x54>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00b      	beq.n	80054a4 <gpioVerifyPort+0x38>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0d      	ldr	r2, [pc, #52]	; (80054c4 <gpioVerifyPort+0x58>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <gpioVerifyPort+0x38>
        (GPIOD == port) || (GPIOE == port) || (GPIOH == port))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <gpioVerifyPort+0x5c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <gpioVerifyPort+0x38>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a0b      	ldr	r2, [pc, #44]	; (80054cc <gpioVerifyPort+0x60>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <gpioVerifyPort+0x3c>
    {
        return true;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <gpioVerifyPort+0x3e>
    }
    return false;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40020000 	.word	0x40020000
 80054bc:	40020400 	.word	0x40020400
 80054c0:	40020800 	.word	0x40020800
 80054c4:	40020c00 	.word	0x40020c00
 80054c8:	40021000 	.word	0x40021000
 80054cc:	40021c00 	.word	0x40021c00

080054d0 <gpioVerifyPin>:
 * Function to verify the integrity of the **pin** parameter.
 *
 * @param pin : The pin number of any of the GPIO ports
 */
bool gpioVerifyPin(PIN_NUM_t pin)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
    if ((PIN0  == pin) || (PIN1  == pin) || (PIN2  == pin) || (PIN3  == pin) ||
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d02c      	beq.n	800553a <gpioVerifyPin+0x6a>
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d029      	beq.n	800553a <gpioVerifyPin+0x6a>
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d026      	beq.n	800553a <gpioVerifyPin+0x6a>
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d023      	beq.n	800553a <gpioVerifyPin+0x6a>
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d020      	beq.n	800553a <gpioVerifyPin+0x6a>
        (PIN4  == pin) || (PIN5  == pin) || (PIN6  == pin) || (PIN7  == pin) ||
 80054f8:	79fb      	ldrb	r3, [r7, #7]
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d01d      	beq.n	800553a <gpioVerifyPin+0x6a>
 80054fe:	79fb      	ldrb	r3, [r7, #7]
 8005500:	2b06      	cmp	r3, #6
 8005502:	d01a      	beq.n	800553a <gpioVerifyPin+0x6a>
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	2b07      	cmp	r3, #7
 8005508:	d017      	beq.n	800553a <gpioVerifyPin+0x6a>
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	2b08      	cmp	r3, #8
 800550e:	d014      	beq.n	800553a <gpioVerifyPin+0x6a>
        (PIN8  == pin) || (PIN9  == pin) || (PIN10 == pin) || (PIN11 == pin) ||
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	2b09      	cmp	r3, #9
 8005514:	d011      	beq.n	800553a <gpioVerifyPin+0x6a>
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	2b0a      	cmp	r3, #10
 800551a:	d00e      	beq.n	800553a <gpioVerifyPin+0x6a>
 800551c:	79fb      	ldrb	r3, [r7, #7]
 800551e:	2b0b      	cmp	r3, #11
 8005520:	d00b      	beq.n	800553a <gpioVerifyPin+0x6a>
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b0c      	cmp	r3, #12
 8005526:	d008      	beq.n	800553a <gpioVerifyPin+0x6a>
        (PIN12 == pin) || (PIN13 == pin) || (PIN14 == pin) || (PIN15 == pin))
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	2b0d      	cmp	r3, #13
 800552c:	d005      	beq.n	800553a <gpioVerifyPin+0x6a>
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	2b0e      	cmp	r3, #14
 8005532:	d002      	beq.n	800553a <gpioVerifyPin+0x6a>
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d101      	bne.n	800553e <gpioVerifyPin+0x6e>
    {
        return true;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <gpioVerifyPin+0x70>
    }
    return false;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <gpioVerifyAltFunc>:
 * Function to verify the integrity of the **af** parameter.
 *
 * @param af : The number of the alternative function.
 */
bool gpioVerifyAltFunc(ALT_FUNC_t af)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
    if ((AF0  == af) || (AF1  == af) || (AF2  == af) || (AF3  == af) || (AF4  == af) ||
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02c      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d029      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d026      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	2b03      	cmp	r3, #3
 800556c:	d023      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b04      	cmp	r3, #4
 8005572:	d020      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	2b05      	cmp	r3, #5
 8005578:	d01d      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
        (AF5  == af) || (AF6  == af) || (AF7  == af) || (AF8  == af) || (AF9  == af) ||
 800557a:	79fb      	ldrb	r3, [r7, #7]
 800557c:	2b06      	cmp	r3, #6
 800557e:	d01a      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005580:	79fb      	ldrb	r3, [r7, #7]
 8005582:	2b07      	cmp	r3, #7
 8005584:	d017      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d014      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d011      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b0a      	cmp	r3, #10
 8005596:	d00e      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
        (AF10 == af) || (AF11 == af) || (AF12 == af) || (AF13 == af) || (AF14 == af) ||
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b0b      	cmp	r3, #11
 800559c:	d00b      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 800559e:	79fb      	ldrb	r3, [r7, #7]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	d008      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	2b0d      	cmp	r3, #13
 80055a8:	d005      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 80055aa:	79fb      	ldrb	r3, [r7, #7]
 80055ac:	2b0e      	cmp	r3, #14
 80055ae:	d002      	beq.n	80055b6 <gpioVerifyAltFunc+0x6a>
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	d101      	bne.n	80055ba <gpioVerifyAltFunc+0x6e>
        (AF15 == af))
    {
        return true;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <gpioVerifyAltFunc+0x70>
    }

    return false;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <gpioVerifyPinMode>:
 * Function to verify the integrity of the **pinMode** parameter.
 *
 * @param pinMode : The operational mode in which the GPIO pin shall work.
 */
bool gpioVerifyPinMode(PIN_MODE_t pinMode)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	71fb      	strb	r3, [r7, #7]
    if ((INPUT == pinMode) || (OUTPUT == pinMode) || (ALTFUNC == pinMode) || (ANALOG == pinMode))
 80055d2:	79fb      	ldrb	r3, [r7, #7]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <gpioVerifyPinMode+0x22>
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d005      	beq.n	80055ea <gpioVerifyPinMode+0x22>
 80055de:	79fb      	ldrb	r3, [r7, #7]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d002      	beq.n	80055ea <gpioVerifyPinMode+0x22>
 80055e4:	79fb      	ldrb	r3, [r7, #7]
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d101      	bne.n	80055ee <gpioVerifyPinMode+0x26>
    {
        return true;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <gpioVerifyPinMode+0x28>
    }

    return false;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <gpioVerifyOutputType>:
 * Function to verify the integrity of the **outType** parameter.
 *
 * @param outType : Verifies whether the passed value is PUSHPULL or OPENDRAIN.
 */
bool gpioVerifyOutputType(OUTPUT_TYPE_t outType)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
    if ((PUSHPULL == outType) || (OPENDRAIN == outType))
 8005606:	79fb      	ldrb	r3, [r7, #7]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <gpioVerifyOutputType+0x16>
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <gpioVerifyOutputType+0x1a>
    {
        return true;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <gpioVerifyOutputType+0x1c>
    }

    return false;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <gpioVerifyPushPullMode>:
 * Function to verify the integrity of the Pullup/Pulldown parameter.
 *
 * @param mode : Verifies the Pullup/Pulldown mode
 */
bool gpioVerifyPushPullMode(PUPD_MODE_t mode)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	4603      	mov	r3, r0
 800562c:	71fb      	strb	r3, [r7, #7]
    if ((NO_PULLUP_PULLDOWN == mode) || (PULLUP == mode) || (PULLDOWN == mode))
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <gpioVerifyPushPullMode+0x1c>
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d002      	beq.n	8005640 <gpioVerifyPushPullMode+0x1c>
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d101      	bne.n	8005644 <gpioVerifyPushPullMode+0x20>
    {
        return true;
 8005640:	2301      	movs	r3, #1
 8005642:	e000      	b.n	8005646 <gpioVerifyPushPullMode+0x22>
    }
    return false;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <gpioInitPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioInitPort(GPIO_TypeDef *port)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) == true)
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff05 	bl	800546c <gpioVerifyPort>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d042      	beq.n	80056ee <gpioInitPort+0x9a>
    {
        if (GPIOA == port)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a24      	ldr	r2, [pc, #144]	; (80056fc <gpioInitPort+0xa8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d106      	bne.n	800567e <gpioInitPort+0x2a>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005670:	4b23      	ldr	r3, [pc, #140]	; (8005700 <gpioInitPort+0xac>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4a22      	ldr	r2, [pc, #136]	; (8005700 <gpioInitPort+0xac>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6313      	str	r3, [r2, #48]	; 0x30
 800567c:	e035      	b.n	80056ea <gpioInitPort+0x96>
        }
        else if (GPIOB == port)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <gpioInitPort+0xb0>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d106      	bne.n	8005694 <gpioInitPort+0x40>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <gpioInitPort+0xac>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <gpioInitPort+0xac>)
 800568c:	f043 0302 	orr.w	r3, r3, #2
 8005690:	6313      	str	r3, [r2, #48]	; 0x30
 8005692:	e02a      	b.n	80056ea <gpioInitPort+0x96>
        }
        else if (GPIOC == port)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <gpioInitPort+0xb4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d106      	bne.n	80056aa <gpioInitPort+0x56>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800569c:	4b18      	ldr	r3, [pc, #96]	; (8005700 <gpioInitPort+0xac>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <gpioInitPort+0xac>)
 80056a2:	f043 0304 	orr.w	r3, r3, #4
 80056a6:	6313      	str	r3, [r2, #48]	; 0x30
 80056a8:	e01f      	b.n	80056ea <gpioInitPort+0x96>
        }
        else if (GPIOD == port)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a17      	ldr	r2, [pc, #92]	; (800570c <gpioInitPort+0xb8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d106      	bne.n	80056c0 <gpioInitPort+0x6c>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <gpioInitPort+0xac>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a12      	ldr	r2, [pc, #72]	; (8005700 <gpioInitPort+0xac>)
 80056b8:	f043 0308 	orr.w	r3, r3, #8
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	e014      	b.n	80056ea <gpioInitPort+0x96>
        }
        else if (GPIOE == port)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a13      	ldr	r2, [pc, #76]	; (8005710 <gpioInitPort+0xbc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d106      	bne.n	80056d6 <gpioInitPort+0x82>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80056c8:	4b0d      	ldr	r3, [pc, #52]	; (8005700 <gpioInitPort+0xac>)
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <gpioInitPort+0xac>)
 80056ce:	f043 0310 	orr.w	r3, r3, #16
 80056d2:	6313      	str	r3, [r2, #48]	; 0x30
 80056d4:	e009      	b.n	80056ea <gpioInitPort+0x96>
        }
        else if (GPIOH == port)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a0e      	ldr	r2, [pc, #56]	; (8005714 <gpioInitPort+0xc0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d105      	bne.n	80056ea <gpioInitPort+0x96>
        {
            RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80056de:	4b08      	ldr	r3, [pc, #32]	; (8005700 <gpioInitPort+0xac>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	4a07      	ldr	r2, [pc, #28]	; (8005700 <gpioInitPort+0xac>)
 80056e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056e8:	6313      	str	r3, [r2, #48]	; 0x30
        }
        return GPIO_OK;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e001      	b.n	80056f2 <gpioInitPort+0x9e>
    }
    return GPIO_INVALID_PORT;
 80056ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40020000 	.word	0x40020000
 8005700:	40023800 	.word	0x40023800
 8005704:	40020400 	.word	0x40020400
 8005708:	40020800 	.word	0x40020800
 800570c:	40020c00 	.word	0x40020c00
 8005710:	40021000 	.word	0x40021000
 8005714:	40021c00 	.word	0x40021c00

08005718 <gpioSelectPort>:
 *          <td rowspan="1">7...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPort(GPIO_TypeDef *port)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
    if (gpioVerifyPort(port) != true)
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fea3 	bl	800546c <gpioVerifyPort>
 8005726:	4603      	mov	r3, r0
 8005728:	f083 0301 	eor.w	r3, r3, #1
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <gpioSelectPort+0x20>
    {
        return GPIO_INVALID_PORT;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	e041      	b.n	80057bc <gpioSelectPort+0xa4>
    }

    if (GPIOA == port)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a22      	ldr	r2, [pc, #136]	; (80057c4 <gpioSelectPort+0xac>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d106      	bne.n	800574e <gpioSelectPort+0x36>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8005740:	4b21      	ldr	r3, [pc, #132]	; (80057c8 <gpioSelectPort+0xb0>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <gpioSelectPort+0xb0>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6313      	str	r3, [r2, #48]	; 0x30
 800574c:	e035      	b.n	80057ba <gpioSelectPort+0xa2>
    }
    else if (GPIOB == port)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a1e      	ldr	r2, [pc, #120]	; (80057cc <gpioSelectPort+0xb4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d106      	bne.n	8005764 <gpioSelectPort+0x4c>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8005756:	4b1c      	ldr	r3, [pc, #112]	; (80057c8 <gpioSelectPort+0xb0>)
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <gpioSelectPort+0xb0>)
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	6313      	str	r3, [r2, #48]	; 0x30
 8005762:	e02a      	b.n	80057ba <gpioSelectPort+0xa2>
    }
    else if (GPIOC == port)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <gpioSelectPort+0xb8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d106      	bne.n	800577a <gpioSelectPort+0x62>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800576c:	4b16      	ldr	r3, [pc, #88]	; (80057c8 <gpioSelectPort+0xb0>)
 800576e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005770:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <gpioSelectPort+0xb0>)
 8005772:	f043 0304 	orr.w	r3, r3, #4
 8005776:	6313      	str	r3, [r2, #48]	; 0x30
 8005778:	e01f      	b.n	80057ba <gpioSelectPort+0xa2>
    }
    else if (GPIOD == port)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a15      	ldr	r2, [pc, #84]	; (80057d4 <gpioSelectPort+0xbc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d106      	bne.n	8005790 <gpioSelectPort+0x78>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <gpioSelectPort+0xb0>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	4a10      	ldr	r2, [pc, #64]	; (80057c8 <gpioSelectPort+0xb0>)
 8005788:	f043 0308 	orr.w	r3, r3, #8
 800578c:	6313      	str	r3, [r2, #48]	; 0x30
 800578e:	e014      	b.n	80057ba <gpioSelectPort+0xa2>
    }
    else if (GPIOE == port)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a11      	ldr	r2, [pc, #68]	; (80057d8 <gpioSelectPort+0xc0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d106      	bne.n	80057a6 <gpioSelectPort+0x8e>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <gpioSelectPort+0xb0>)
 800579a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579c:	4a0a      	ldr	r2, [pc, #40]	; (80057c8 <gpioSelectPort+0xb0>)
 800579e:	f043 0310 	orr.w	r3, r3, #16
 80057a2:	6313      	str	r3, [r2, #48]	; 0x30
 80057a4:	e009      	b.n	80057ba <gpioSelectPort+0xa2>
    }
    else if (GPIOH == port)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <gpioSelectPort+0xc4>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d105      	bne.n	80057ba <gpioSelectPort+0xa2>
    {
        RCC->AHB1ENR |= RCC_AHB1ENR_GPIOHEN;
 80057ae:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <gpioSelectPort+0xb0>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4a05      	ldr	r2, [pc, #20]	; (80057c8 <gpioSelectPort+0xb0>)
 80057b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b8:	6313      	str	r3, [r2, #48]	; 0x30
    }
    return GPIO_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3708      	adds	r7, #8
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	40020000 	.word	0x40020000
 80057c8:	40023800 	.word	0x40023800
 80057cc:	40020400 	.word	0x40020400
 80057d0:	40020800 	.word	0x40020800
 80057d4:	40020c00 	.word	0x40020c00
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40021c00 	.word	0x40021c00

080057e0 <gpioSelectPinMode>:
 *          <td rowspan="1">Sets the pin function either to input, output, alternate function, or analog mode</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPinMode(GPIO_TypeDef *port, PIN_NUM_t pin, PIN_MODE_t mode)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	460b      	mov	r3, r1
 80057ea:	70fb      	strb	r3, [r7, #3]
 80057ec:	4613      	mov	r3, r2
 80057ee:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fe3b 	bl	800546c <gpioVerifyPort>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f083 0301 	eor.w	r3, r3, #1
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <gpioSelectPinMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295
 8005806:	e032      	b.n	800586e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPin(pin) != true)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fe60 	bl	80054d0 <gpioVerifyPin>
 8005810:	4603      	mov	r3, r0
 8005812:	f083 0301 	eor.w	r3, r3, #1
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <gpioSelectPinMode+0x42>
    {
        return GPIO_INVALID_PIN;
 800581c:	f06f 0301 	mvn.w	r3, #1
 8005820:	e025      	b.n	800586e <gpioSelectPinMode+0x8e>
    }
    if (gpioVerifyPinMode(mode) != true)
 8005822:	78bb      	ldrb	r3, [r7, #2]
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff fecf 	bl	80055c8 <gpioVerifyPinMode>
 800582a:	4603      	mov	r3, r0
 800582c:	f083 0301 	eor.w	r3, r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <gpioSelectPinMode+0x5c>
    {
        return GPIO_INVALID_PINMODE;
 8005836:	f06f 0305 	mvn.w	r3, #5
 800583a:	e018      	b.n	800586e <gpioSelectPinMode+0x8e>
    }

    // Set pin to default (INPUT)
	port->MODER &= ~(0b11 << (pin * 2));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	78fa      	ldrb	r2, [r7, #3]
 8005842:	0052      	lsls	r2, r2, #1
 8005844:	2103      	movs	r1, #3
 8005846:	fa01 f202 	lsl.w	r2, r1, r2
 800584a:	43d2      	mvns	r2, r2
 800584c:	401a      	ands	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]

	// If mode is not INPUT --> Select other setting
	if (INPUT != mode)
 8005852:	78bb      	ldrb	r3, [r7, #2]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d009      	beq.n	800586c <gpioSelectPinMode+0x8c>
	{
		port->MODER |= (mode << (pin * 2));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	78b9      	ldrb	r1, [r7, #2]
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	0052      	lsls	r2, r2, #1
 8005862:	fa01 f202 	lsl.w	r2, r1, r2
 8005866:	431a      	orrs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	601a      	str	r2, [r3, #0]
	}

	return GPIO_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <gpioSetPin>:
 *          <td rowspan="1">15...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b082      	sub	sp, #8
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	460b      	mov	r3, r1
 8005880:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fdf2 	bl	800546c <gpioVerifyPort>
 8005888:	4603      	mov	r3, r0
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <gpioSetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 8005894:	f04f 33ff 	mov.w	r3, #4294967295
 8005898:	e014      	b.n	80058c4 <gpioSetPin+0x4e>
    }
    if (gpioVerifyPin(pin) != true)
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	4618      	mov	r0, r3
 800589e:	f7ff fe17 	bl	80054d0 <gpioVerifyPin>
 80058a2:	4603      	mov	r3, r0
 80058a4:	f083 0301 	eor.w	r3, r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <gpioSetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 80058ae:	f06f 0301 	mvn.w	r3, #1
 80058b2:	e007      	b.n	80058c4 <gpioSetPin+0x4e>
    }

	port->BSRR = 1 << pin;
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	2201      	movs	r2, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <gpioResetPin>:
 *          <td rowspan="1">31...16</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioResetPin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	460b      	mov	r3, r1
 80058d6:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPort(port) != true)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff fdc7 	bl	800546c <gpioVerifyPort>
 80058de:	4603      	mov	r3, r0
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <gpioResetPin+0x24>
    {
        return GPIO_INVALID_PORT;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295
 80058ee:	e015      	b.n	800591c <gpioResetPin+0x50>
    }
    if (gpioVerifyPin(pin) != true)
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fdec 	bl	80054d0 <gpioVerifyPin>
 80058f8:	4603      	mov	r3, r0
 80058fa:	f083 0301 	eor.w	r3, r3, #1
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <gpioResetPin+0x3e>
    {
        return GPIO_INVALID_PIN;
 8005904:	f06f 0301 	mvn.w	r3, #1
 8005908:	e008      	b.n	800591c <gpioResetPin+0x50>
    }

	port->BSRR = (1 << (pin + 16));
 800590a:	78fb      	ldrb	r3, [r7, #3]
 800590c:	3310      	adds	r3, #16
 800590e:	2201      	movs	r2, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	619a      	str	r2, [r3, #24]

	return GPIO_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <gpioTogglePin>:
 *          <td rowspan="1">Calls the functions gpioSetPin() and gpioResetPin()</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioTogglePin(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
    if (gpioVerifyPin(pin) != true)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff fdcc 	bl	80054d0 <gpioVerifyPin>
 8005938:	4603      	mov	r3, r0
 800593a:	f083 0301 	eor.w	r3, r3, #1
 800593e:	b2db      	uxtb	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <gpioTogglePin+0x26>
    {
        return GPIO_INVALID_PIN;
 8005944:	f06f 0301 	mvn.w	r3, #1
 8005948:	e013      	b.n	8005972 <gpioTogglePin+0x4e>
    }
    if (gpioGetPinState(port, pin))
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f922 	bl	8005b98 <gpioGetPinState>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <gpioTogglePin+0x42>
    {
       gpioResetPin(port, pin);
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	4619      	mov	r1, r3
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff ffb4 	bl	80058cc <gpioResetPin>
 8005964:	e004      	b.n	8005970 <gpioTogglePin+0x4c>
    }
    else
    {
        gpioSetPin(port, pin);
 8005966:	78fb      	ldrb	r3, [r7, #3]
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7ff ff83 	bl	8005876 <gpioSetPin>
    }

    return GPIO_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <gpioSelectAltFunc>:
 *          <td rowspan="1">31...0</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectAltFunc(GPIO_TypeDef *port, PIN_NUM_t pin, ALT_FUNC_t af)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	460b      	mov	r3, r1
 8005984:	70fb      	strb	r3, [r7, #3]
 8005986:	4613      	mov	r3, r2
 8005988:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff fd6e 	bl	800546c <gpioVerifyPort>
 8005990:	4603      	mov	r3, r0
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <gpioSelectAltFunc+0x28>
    {
        return GPIO_INVALID_PORT;
 800599c:	f04f 33ff 	mov.w	r3, #4294967295
 80059a0:	e050      	b.n	8005a44 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyPin(pin) != true)
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fd93 	bl	80054d0 <gpioVerifyPin>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f083 0301 	eor.w	r3, r3, #1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d002      	beq.n	80059bc <gpioSelectAltFunc+0x42>
    {
        return GPIO_INVALID_PIN;
 80059b6:	f06f 0301 	mvn.w	r3, #1
 80059ba:	e043      	b.n	8005a44 <gpioSelectAltFunc+0xca>
    }
    if (gpioVerifyAltFunc(af) != true)
 80059bc:	78bb      	ldrb	r3, [r7, #2]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff fdc4 	bl	800554c <gpioVerifyAltFunc>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f083 0301 	eor.w	r3, r3, #1
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <gpioSelectAltFunc+0x5c>
    {
        return GPIO_INVALID_ALTFUNC;
 80059d0:	f06f 0302 	mvn.w	r3, #2
 80059d4:	e036      	b.n	8005a44 <gpioSelectAltFunc+0xca>
    }

	// Dont't forget to select the alternative function mode before...
	gpioSelectPinMode(port, pin, ALTFUNC);
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	2202      	movs	r2, #2
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff feff 	bl	80057e0 <gpioSelectPinMode>

	if (pin <= PIN7)
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	2b07      	cmp	r3, #7
 80059e6:	d815      	bhi.n	8005a14 <gpioSelectAltFunc+0x9a>
	{
		port->AFR[0] &= ~(0x0F << (pin * 4));       // Reset previously selected AF
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a1b      	ldr	r3, [r3, #32]
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	210f      	movs	r1, #15
 80059f2:	fa01 f202 	lsl.w	r2, r1, r2
 80059f6:	43d2      	mvns	r2, r2
 80059f8:	401a      	ands	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]
		port->AFR[0] |= af << (pin * 4);            // Set AFR[0] to the new AF
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	78b9      	ldrb	r1, [r7, #2]
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	0092      	lsls	r2, r2, #2
 8005a08:	fa01 f202 	lsl.w	r2, r1, r2
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	621a      	str	r2, [r3, #32]
 8005a12:	e016      	b.n	8005a42 <gpioSelectAltFunc+0xc8>
	}
	else
	{
		// !!! Subtract 8 from pin number since we start at bit 0 !!!
		port->AFR[1] &= ~(0x0F << ((pin - 8) * 4)); // Reset previously selected AF.
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	3a08      	subs	r2, #8
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	210f      	movs	r1, #15
 8005a20:	fa01 f202 	lsl.w	r2, r1, r2
 8005a24:	43d2      	mvns	r2, r2
 8005a26:	401a      	ands	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
		port->AFR[1] |= af << ((pin - 8) * 4);      // Set AFR[1] to the new AF
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	78b9      	ldrb	r1, [r7, #2]
 8005a32:	78fa      	ldrb	r2, [r7, #3]
 8005a34:	3a08      	subs	r2, #8
 8005a36:	0092      	lsls	r2, r2, #2
 8005a38:	fa01 f202 	lsl.w	r2, r1, r2
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return GPIO_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <gpioSetOutputType>:
 *          <td rowspan="1">Sets the output type either to push-pull or to Open drain</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSetOutputType(GPIO_TypeDef *port, PIN_NUM_t pin, OUTPUT_TYPE_t outType)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	70fb      	strb	r3, [r7, #3]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fd05 	bl	800546c <gpioVerifyPort>
 8005a62:	4603      	mov	r3, r0
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <gpioSetOutputType+0x28>
    {
        return GPIO_INVALID_PORT;
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a72:	e030      	b.n	8005ad6 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyPin(pin) != true)
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff fd2a 	bl	80054d0 <gpioVerifyPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f083 0301 	eor.w	r3, r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <gpioSetOutputType+0x42>
    {
        return GPIO_INVALID_PIN;
 8005a88:	f06f 0301 	mvn.w	r3, #1
 8005a8c:	e023      	b.n	8005ad6 <gpioSetOutputType+0x8a>
    }
    if (gpioVerifyOutputType(outType) != true)
 8005a8e:	78bb      	ldrb	r3, [r7, #2]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fdb3 	bl	80055fc <gpioVerifyOutputType>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f083 0301 	eor.w	r3, r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <gpioSetOutputType+0x5c>
    {
        return GPIO_INVALID_OUTPUT_TYPE;
 8005aa2:	f06f 0303 	mvn.w	r3, #3
 8005aa6:	e016      	b.n	8005ad6 <gpioSetOutputType+0x8a>
    }

    port->OTYPER &= ~(1 << pin);   // Use pin as push-pull output
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	78fa      	ldrb	r2, [r7, #3]
 8005aae:	2101      	movs	r1, #1
 8005ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab4:	43d2      	mvns	r2, r2
 8005ab6:	401a      	ands	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	605a      	str	r2, [r3, #4]
    if (OPENDRAIN == outType)
 8005abc:	78bb      	ldrb	r3, [r7, #2]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d108      	bne.n	8005ad4 <gpioSetOutputType+0x88>
    {
        port->OTYPER |= (1 << pin);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f202 	lsl.w	r2, r1, r2
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	605a      	str	r2, [r3, #4]
	}

	return GPIO_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <gpioSelectPushPullMode>:
 *          <td rowspan="1">OTYPER must be set to push-pull</td>
 *      </tr>
 * </table>
 */
GPIO_RETURN_CODE_t gpioSelectPushPullMode(GPIO_TypeDef *port, PIN_NUM_t pin, PUPD_MODE_t pupd)
{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	70fb      	strb	r3, [r7, #3]
 8005aea:	4613      	mov	r3, r2
 8005aec:	70bb      	strb	r3, [r7, #2]
    if (gpioVerifyPort(port) != true)
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fcbc 	bl	800546c <gpioVerifyPort>
 8005af4:	4603      	mov	r3, r0
 8005af6:	f083 0301 	eor.w	r3, r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <gpioSelectPushPullMode+0x28>
    {
        return GPIO_INVALID_PORT;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
 8005b04:	e044      	b.n	8005b90 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPin(pin) != true)
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fce1 	bl	80054d0 <gpioVerifyPin>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f083 0301 	eor.w	r3, r3, #1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <gpioSelectPushPullMode+0x42>
    {
        return GPIO_INVALID_PIN;
 8005b1a:	f06f 0301 	mvn.w	r3, #1
 8005b1e:	e037      	b.n	8005b90 <gpioSelectPushPullMode+0xb2>
    }
    if (gpioVerifyPushPullMode(pupd) != true)
 8005b20:	78bb      	ldrb	r3, [r7, #2]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fd7e 	bl	8005624 <gpioVerifyPushPullMode>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f083 0301 	eor.w	r3, r3, #1
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <gpioSelectPushPullMode+0x5c>
    {
        return GPIO_INVALID_PUSH_PULL_MODE;
 8005b34:	f06f 0306 	mvn.w	r3, #6
 8005b38:	e02a      	b.n	8005b90 <gpioSelectPushPullMode+0xb2>
    }

    port->PUPDR &= ~(0x03 << (pin * 2));        // Disable PU/PD
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	78fa      	ldrb	r2, [r7, #3]
 8005b40:	0052      	lsls	r2, r2, #1
 8005b42:	2103      	movs	r1, #3
 8005b44:	fa01 f202 	lsl.w	r2, r1, r2
 8005b48:	43d2      	mvns	r2, r2
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60da      	str	r2, [r3, #12]

    if (port->OTYPER == PUSHPULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11a      	bne.n	8005b8e <gpioSelectPushPullMode+0xb0>
	{
		if (PULLUP == pupd)
 8005b58:	78bb      	ldrb	r3, [r7, #2]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10a      	bne.n	8005b74 <gpioSelectPushPullMode+0x96>
		{
			port->PUPDR |= (PULLUP << (pin *2));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	78fa      	ldrb	r2, [r7, #3]
 8005b64:	0052      	lsls	r2, r2, #1
 8005b66:	2101      	movs	r1, #1
 8005b68:	fa01 f202 	lsl.w	r2, r1, r2
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	e00c      	b.n	8005b8e <gpioSelectPushPullMode+0xb0>
		}
		else if (PULLDOWN == pupd)
 8005b74:	78bb      	ldrb	r3, [r7, #2]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d109      	bne.n	8005b8e <gpioSelectPushPullMode+0xb0>
		{
			port->PUPDR |= (PULLDOWN << (pin *2));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	0052      	lsls	r2, r2, #1
 8005b82:	2102      	movs	r1, #2
 8005b84:	fa01 f202 	lsl.w	r2, r1, r2
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60da      	str	r2, [r3, #12]
		}
	}

    return GPIO_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <gpioGetPinState>:
 * @note
 * The function does not return a GPIO_RETURN_CODE_t any longer. Instead it immediately
 * returns the state of the desired pin.
 */
bool gpioGetPinState(GPIO_TypeDef *port, PIN_NUM_t pin)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	70fb      	strb	r3, [r7, #3]
    return (port->IDR & (1 << pin)) == (1<<pin);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	78fa      	ldrb	r2, [r7, #3]
 8005baa:	2101      	movs	r1, #1
 8005bac:	fa01 f202 	lsl.w	r2, r1, r2
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	bf0c      	ite	eq
 8005bbe:	2301      	moveq	r3, #1
 8005bc0:	2300      	movne	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <__i2c_start>:
#define I2C_RESET_POS(i2c)                  ( { i2c->CR1 &= ~I2C_CR1_POS_Msk; } )



static inline void __i2c_start(I2C_TypeDef *i2c)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	i2c->CR1 |= I2C_CR1_START;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]
	while (!(i2c->SR1 & I2C_SR1_SB));
 8005be4:	bf00      	nop
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f9      	beq.n	8005be6 <__i2c_start+0x16>
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <__i2c_stop>:

static inline void __i2c_stop(I2C_TypeDef *i2c)
 {
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 	i2c->CR1 |= I2C_CR1_STOP;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	601a      	str	r2, [r3, #0]
 	while (!(i2c->SR2 & I2C_SR2_BUSY));
 8005c14:	bf00      	nop
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f9      	beq.n	8005c16 <__i2c_stop+0x16>
 }
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <__i2c_dummy_read_SR1_SR2>:

static inline void __i2c_dummy_read_SR1_SR2(I2C_TypeDef *i2c)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	while (!(i2c->SR1) | !(i2c->SR2))
 8005c38:	bf00      	nop
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	bf0c      	ite	eq
 8005c42:	2301      	moveq	r3, #1
 8005c44:	2300      	movne	r3, #0
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	4313      	orrs	r3, r2
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1ed      	bne.n	8005c3a <__i2c_dummy_read_SR1_SR2+0xa>
	{
	;
	}
}
 8005c5e:	bf00      	nop
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <__i2c_Chk_TX_empty>:


static inline void __i2c_Chk_TX_empty(I2C_TypeDef *i2c)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

	uint32_t simpleDelay;
	while(!(i2c->SR1 & I2C_SR1_TXE));
 8005c74:	bf00      	nop
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f9      	beq.n	8005c76 <__i2c_Chk_TX_empty+0xa>
	for (simpleDelay = 0UL; simpleDelay < 20UL; simpleDelay++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e002      	b.n	8005c8e <__i2c_Chk_TX_empty+0x22>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b13      	cmp	r3, #19
 8005c92:	d9f9      	bls.n	8005c88 <__i2c_Chk_TX_empty+0x1c>
	{
		;
	}

}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <i2cVerifyDutyCycle>:

/**
 * Function to verify the I2C duty cycle.
 */
static bool i2cVerifyDutyCycle(I2C_DUTY_CYCLE_t dc)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	4603      	mov	r3, r0
 8005caa:	71fb      	strb	r3, [r7, #7]
    if ((I2C_DUTY_CYCLE_2 == dc) || (IC2_DUTY_CYCLE_16_9 == dc))
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <i2cVerifyDutyCycle+0x16>
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <i2cVerifyDutyCycle+0x1a>
    {
        return true;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e000      	b.n	8005cbe <i2cVerifyDutyCycle+0x1c>
    }
    return false;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <i2cSelectI2C>:
 *
 * @param  *i2c   : Pointer to the I2C component
 *
*/
I2C_RETURN_CODE_t i2cSelectI2C(I2C_TypeDef *i2c)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
    // Activate bus clock
    if (I2C1 == i2c)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <i2cSelectI2C+0x58>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d106      	bne.n	8005cea <i2cSelectI2C+0x1e>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8005cdc:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005ce2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8005ce8:	e014      	b.n	8005d14 <i2cSelectI2C+0x48>
    }
    else if (I2C2 == i2c)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a0f      	ldr	r2, [pc, #60]	; (8005d2c <i2cSelectI2C+0x60>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d106      	bne.n	8005d00 <i2cSelectI2C+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	4a0c      	ldr	r2, [pc, #48]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfe:	e009      	b.n	8005d14 <i2cSelectI2C+0x48>
    }
    else if (I2C3 == i2c)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a0b      	ldr	r2, [pc, #44]	; (8005d30 <i2cSelectI2C+0x64>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d105      	bne.n	8005d14 <i2cSelectI2C+0x48>
    {
        RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0c:	4a06      	ldr	r2, [pc, #24]	; (8005d28 <i2cSelectI2C+0x5c>)
 8005d0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d12:	6413      	str	r3, [r2, #64]	; 0x40
    }

    return I2C_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40005400 	.word	0x40005400
 8005d28:	40023800 	.word	0x40023800
 8005d2c:	40005800 	.word	0x40005800
 8005d30:	40005c00 	.word	0x40005c00

08005d34 <i2cSetClkSpd>:

/**
 * Function to set the I2C clock frequency.
 */
I2C_RETURN_CODE_t i2cSetClkSpd(I2C_TypeDef *i2c, I2C_CLOCKSPEED_t spd)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	70fb      	strb	r3, [r7, #3]
    if ( (I2C_CLOCK_50 == spd) || (I2C_CLOCK_100 == spd) ||
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <i2cSetClkSpd+0x2a>
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d008      	beq.n	8005d5e <i2cSetClkSpd+0x2a>
 8005d4c:	78fb      	ldrb	r3, [r7, #3]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d005      	beq.n	8005d5e <i2cSetClkSpd+0x2a>
    	 (I2C_CLOCK_200 == spd)|| (I2C_CLOCK_400 == spd) || (I2C_CLOCK_1Mz == spd)		)
 8005d52:	78fb      	ldrb	r3, [r7, #3]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d002      	beq.n	8005d5e <i2cSetClkSpd+0x2a>
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d166      	bne.n	8005e2c <i2cSetClkSpd+0xf8>
    {
    	I2C_WAIT_BUSY(i2c);
 8005d5e:	bf00      	nop
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f9      	bne.n	8005d60 <i2cSetClkSpd+0x2c>
    	i2c->CCR = 0x00;                    // Reset Clock Control Register
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
    	i2c->CCR &= ~I2C_CCR_CCR_Msk;    	// deactive bus clock bits
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005d7a:	f023 030f 	bic.w	r3, r3, #15
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	61d3      	str	r3, [r2, #28]
    	i2c->CCR &= ~I2C_CCR_FS_Msk;    	// deactive fastMode I2C bus clock
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	61da      	str	r2, [r3, #28]
    	switch (spd)
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d836      	bhi.n	8005e02 <i2cSetClkSpd+0xce>
 8005d94:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <i2cSetClkSpd+0x68>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005db1 	.word	0x08005db1
 8005da0:	08005dbf 	.word	0x08005dbf
 8005da4:	08005dcd 	.word	0x08005dcd
 8005da8:	08005ddb 	.word	0x08005ddb
 8005dac:	08005de9 	.word	0x08005de9
    	{
    		case I2C_CLOCK_50:
			{

				i2c->CCR |= 0x00A0;				// Select 50 kHz bus clock
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f043 02a0 	orr.w	r2, r3, #160	; 0xa0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	61da      	str	r2, [r3, #28]
				break;
 8005dbc:	e02e      	b.n	8005e1c <i2cSetClkSpd+0xe8>
			}
    		case I2C_CLOCK_100:
    		{
    			i2c->CCR |= 0x0050;				// Select 100 kHz bus clock
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	61da      	str	r2, [r3, #28]
    			break;
 8005dca:	e027      	b.n	8005e1c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_200:
    			{
       				i2c->CCR |= 0x0028;			// Select 200 kHz bus clock
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f043 0228 	orr.w	r2, r3, #40	; 0x28
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	61da      	str	r2, [r3, #28]
    				break;
 8005dd8:	e020      	b.n	8005e1c <i2cSetClkSpd+0xe8>
    			}
    		case I2C_CLOCK_400:
    		{
    			//i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
    			i2c->CCR |= 0x0014;				// Select 400 kHz bus clock
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	f043 0214 	orr.w	r2, r3, #20
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	61da      	str	r2, [r3, #28]
    			break;
 8005de6:	e019      	b.n	8005e1c <i2cSetClkSpd+0xe8>
    		}
    		case I2C_CLOCK_1Mz:
			{
				i2c->CCR |= I2C_CCR_FS; 	    // fast Mode
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	61da      	str	r2, [r3, #28]
				i2c->CCR |= 0x005;				// Select 800 kHz bus clock
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f043 0205 	orr.w	r2, r3, #5
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	61da      	str	r2, [r3, #28]
				break;
 8005e00:	e00c      	b.n	8005e1c <i2cSetClkSpd+0xe8>
			}
    		default:
    		{
    			i2c->CCR &= ~I2C_CCR_FS_Msk;    // Select 100 kHz bus clock
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	61da      	str	r2, [r3, #28]
    			i2c->CCR |= 0x0050;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	61da      	str	r2, [r3, #28]
    			break;
 8005e1a:	bf00      	nop
    		}
    	}
    	 i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
    	return I2C_OK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e001      	b.n	8005e30 <i2cSetClkSpd+0xfc>
    }
    return I2C_INVALID_CLOCK_SPEED;
 8005e2c:	f06f 033d 	mvn.w	r3, #61	; 0x3d
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <i2cInitI2C>:

I2C_RETURN_CODE_t i2cInitI2C(I2C_TypeDef *i2c, I2C_DUTY_CYCLE_t duty, uint8_t trise, I2C_CLOCKSPEED_t clock)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	4608      	mov	r0, r1
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	70fb      	strb	r3, [r7, #3]
 8005e4e:	460b      	mov	r3, r1
 8005e50:	70bb      	strb	r3, [r7, #2]
 8005e52:	4613      	mov	r3, r2
 8005e54:	707b      	strb	r3, [r7, #1]
	uint32_t pclock;
	if (i2cVerifyDutyCycle(duty) != true)
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff ff22 	bl	8005ca2 <i2cVerifyDutyCycle>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f083 0301 	eor.w	r3, r3, #1
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <i2cInitI2C+0x34>
    {
        return I2C_INVALID_DUTY_CYCLE;
 8005e6a:	f06f 033c 	mvn.w	r3, #60	; 0x3c
 8005e6e:	e02d      	b.n	8005ecc <i2cInitI2C+0x90>
    }

    i2c->CR1 = I2C_CR1_SWRST;			// reset and clear reg
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005e76:	601a      	str	r2, [r3, #0]
    i2c->CR1 = 0x0000;                  // Reset old CR1 settings
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
    i2c->CR1 &= ~I2C_CR1_PE_Msk;        // Disable I2C component
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f023 0201 	bic.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]

    pclock = rccGetPclk1Freq();
 8005e8a:	f000 fae1 	bl	8006450 <rccGetPclk1Freq>
 8005e8e:	60f8      	str	r0, [r7, #12]
    i2c->CR2 = pclock / 1000000;		//
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <i2cInitI2C+0x98>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	0c9a      	lsrs	r2, r3, #18
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	605a      	str	r2, [r3, #4]

    i2c->TRISE = trise;                // Set max. rise time
 8005e9e:	78ba      	ldrb	r2, [r7, #2]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

    i2c->OAR1 |= (0x00 << 1);			 // set own address to 00 - not really used in master mode
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	609a      	str	r2, [r3, #8]
    i2c->OAR1 |= (1 << 14); 			// bit 14 should be kept at 1 according to the datasheet
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]

    i2cSetClkSpd(i2c, clock);			// set I2C Clockrate
 8005eb8:	787b      	ldrb	r3, [r7, #1]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff39 	bl	8005d34 <i2cSetClkSpd>

    //i2c->CR1 |= I2C_CR1_PE;            // Re-renable I2C component

    i2cFindSlaveAddr(i2c, 1);			// first run find routine for Adr 0, work arround for result failure at first search run
 8005ec2:	2101      	movs	r1, #1
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f967 	bl	8006198 <i2cFindSlaveAddr>


    return I2C_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	431bde83 	.word	0x431bde83

08005ed8 <i2cSendByteToSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * The text written in <b>bold</b> letters is required to address a device-specific register.<br>
 */
I2C_RETURN_CODE_t i2cSendByteToSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t data)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	70fb      	strb	r3, [r7, #3]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70bb      	strb	r3, [r7, #2]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	707b      	strb	r3, [r7, #1]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8005ef2:	bf00      	nop
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	f003 0302 	and.w	r3, r3, #2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f9      	bne.n	8005ef4 <i2cSendByteToSlaveReg+0x1c>

    __i2c_start(i2c);					 // send start condition
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fe65 	bl	8005bd0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8005f06:	bf00      	nop
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f9      	beq.n	8005f08 <i2cSendByteToSlaveReg+0x30>

    i2c->DR = saddr<<1;                    // Send slave 7Bit address
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	461a      	mov	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8005f1e:	bf00      	nop
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f9      	beq.n	8005f20 <i2cSendByteToSlaveReg+0x48>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff fe7f 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fe9a 	bl	8005c6c <__i2c_Chk_TX_empty>

    i2c->DR = regAddr;                  // Set the address of the slave register
 8005f38:	78ba      	ldrb	r2, [r7, #2]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         // Wait until the transmit buffer is empty
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7ff fe94 	bl	8005c6c <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fe73 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    i2c->DR = data;                     // Send data
 8005f4a:	787a      	ldrb	r2, [r7, #1]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	611a      	str	r2, [r3, #16]
    I2C_BYTE_TRANSFER_FINISHED(i2c);    // Wait until BTF Flag is set
 8005f50:	bf00      	nop
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f9      	beq.n	8005f52 <i2cSendByteToSlaveReg+0x7a>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff fe66 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
      __i2c_stop(i2c);					  // send stop condition
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff fe4b 	bl	8005c00 <__i2c_stop>


    return I2C_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <i2cReadByteFromSlaveReg>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 *
 */
I2C_RETURN_CODE_t i2cReadByteFromSlaveReg(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	607b      	str	r3, [r7, #4]
 8005f7e:	460b      	mov	r3, r1
 8005f80:	72fb      	strb	r3, [r7, #11]
 8005f82:	4613      	mov	r3, r2
 8005f84:	72bb      	strb	r3, [r7, #10]
    I2C_WAIT_BUSY(i2c);                 // Checks whether the I2C bus is busy
 8005f86:	bf00      	nop
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1f9      	bne.n	8005f88 <i2cReadByteFromSlaveReg+0x14>

    __i2c_start(i2c);					 // send start condition
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff fe1b 	bl	8005bd0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8005f9a:	bf00      	nop
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f9      	beq.n	8005f9c <i2cReadByteFromSlaveReg+0x28>

    i2c->DR = saddr<<1;                    // Send with bit 0 = '0'
 8005fa8:	7afb      	ldrb	r3, [r7, #11]
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	461a      	mov	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8005fb2:	bf00      	nop
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	695b      	ldr	r3, [r3, #20]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0f9      	beq.n	8005fb4 <i2cReadByteFromSlaveReg+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fe35 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                  // Send address of the functional register
 8005fc6:	7aba      	ldrb	r2, [r7, #10]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	611a      	str	r2, [r3, #16]
    __i2c_Chk_TX_empty(i2c);         	// Wait until transmit buffer is empty
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fe4d 	bl	8005c6c <__i2c_Chk_TX_empty>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fe2c 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 8005fe4:	bf00      	nop
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f9      	beq.n	8005fe6 <i2cReadByteFromSlaveReg+0x72>

    i2c->DR = (saddr<<1) | 1;           // Resend slave addr with bit 0 = '1'
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);         // Wait for ADDR ACK
 8006000:	bf00      	nop
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f9      	beq.n	8006002 <i2cReadByteFromSlaveReg+0x8e>

    I2C_RESET_ACK(i2c);                 // Disable Acknowledge
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	601a      	str	r2, [r3, #0]

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fe08 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    __i2c_stop(i2c);
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f7ff fded 	bl	8005c00 <__i2c_stop>

    I2C_CHECK_RXBUF_NOT_EMPTY(i2c);     // Wait until receive buffer is no longer empty
 8006026:	bf00      	nop
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f9      	beq.n	8006028 <i2cReadByteFromSlaveReg+0xb4>
    *data++ = i2c->DR;                  // Write data in variable
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6919      	ldr	r1, [r3, #16]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	607a      	str	r2, [r7, #4]
 800603e:	b2ca      	uxtb	r2, r1
 8006040:	701a      	strb	r2, [r3, #0]

    return I2C_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <i2cBurstRegRead>:
 * <br>
 * <b>Affected register and bit(s)</b><br>

 */
I2C_RETURN_CODE_t i2cBurstRegRead(I2C_TypeDef *i2c, uint8_t saddr, uint8_t regAddr, uint8_t *data, uint8_t num)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607b      	str	r3, [r7, #4]
 8006056:	460b      	mov	r3, r1
 8006058:	72fb      	strb	r3, [r7, #11]
 800605a:	4613      	mov	r3, r2
 800605c:	72bb      	strb	r3, [r7, #10]
	I2C_WAIT_BUSY(i2c);
 800605e:	bf00      	nop
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f9      	bne.n	8006060 <i2cBurstRegRead+0x14>
    //I2C_RESET_POS(i2c);                     // Must be used only in 16-bit transfer

    __i2c_start(i2c);					 // send start condition
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fdaf 	bl	8005bd0 <__i2c_start>
    I2C_START_COMPLETED(i2c);           // Wait until START signal has been sent
 8006072:	bf00      	nop
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	695b      	ldr	r3, [r3, #20]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f9      	beq.n	8006074 <i2cBurstRegRead+0x28>

    i2c->DR = saddr<<1;                        // Send with bit 0 = '0'
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	461a      	mov	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 800608a:	bf00      	nop
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	f003 0302 	and.w	r3, r3, #2
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f9      	beq.n	800608c <i2cBurstRegRead+0x40>

    __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7ff fdc9 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>

    i2c->DR = regAddr;                      // Send address of the functional register
 800609e:	7aba      	ldrb	r2, [r7, #10]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	611a      	str	r2, [r3, #16]

    __i2c_Chk_TX_empty(i2c);             // Wait until transmit buffer is empty
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fde1 	bl	8005c6c <__i2c_Chk_TX_empty>
    I2C_BYTE_TRANSFER_FINISHED(i2c);
 80060aa:	bf00      	nop
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f9      	beq.n	80060ac <i2cBurstRegRead+0x60>
    __i2c_dummy_read_SR1_SR2(i2c);
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff fdb9 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    i2c->CR1 |= I2C_CR1_START;          // Generate I2C RESTART
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	601a      	str	r2, [r3, #0]
    I2C_START_COMPLETED(i2c);           // Checks whether the START signal has been sent
 80060ca:	bf00      	nop
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d0f9      	beq.n	80060cc <i2cBurstRegRead+0x80>
    i2c->DR = (saddr<<1) | 1;               // Resend 7Bit slave addr with bit 0 = '1'
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	461a      	mov	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	611a      	str	r2, [r3, #16]
    I2C_ADDRESS_COMPLETED(i2c);             // Wait for ADDR ACK
 80060e6:	bf00      	nop
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f9      	beq.n	80060e8 <i2cBurstRegRead+0x9c>

    I2C_SET_ACK(i2c);                       // Enable Acknowledge
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	601a      	str	r2, [r3, #0]

    while (num > 0)                          // Start reading multiple values
 8006100:	e02e      	b.n	8006160 <i2cBurstRegRead+0x114>
    {
        if (num == 1U)                      // If there is only one byte left...
 8006102:	7e3b      	ldrb	r3, [r7, #24]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d117      	bne.n	8006138 <i2cBurstRegRead+0xec>
        {
            I2C_RESET_ACK(i2c);             // Disable acknowledge
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	601a      	str	r2, [r3, #0]
            __i2c_dummy_read_SR1_SR2(i2c);		// Reset SR1 & SR2
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff fd8b 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
            I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 800611a:	bf00      	nop
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0f9      	beq.n	800611c <i2cBurstRegRead+0xd0>

            *data++ = i2c->DR;              // Read data from data register
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6919      	ldr	r1, [r3, #16]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	607a      	str	r2, [r7, #4]
 8006132:	b2ca      	uxtb	r2, r1
 8006134:	701a      	strb	r2, [r3, #0]
            break;
 8006136:	e016      	b.n	8006166 <i2cBurstRegRead+0x11a>
        }
        else                                // More than one byte left
        {
        	__i2c_dummy_read_SR1_SR2(i2c);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff fd79 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
        	I2C_CHECK_RXBUF_NOT_EMPTY(i2c); // Wait until receive buffer is no longer empty
 800613e:	bf00      	nop
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f9      	beq.n	8006140 <i2cBurstRegRead+0xf4>
            (*data++) = i2c->DR;            // Read data from data register
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6919      	ldr	r1, [r3, #16]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	607a      	str	r2, [r7, #4]
 8006156:	b2ca      	uxtb	r2, r1
 8006158:	701a      	strb	r2, [r3, #0]
            num--;
 800615a:	7e3b      	ldrb	r3, [r7, #24]
 800615c:	3b01      	subs	r3, #1
 800615e:	763b      	strb	r3, [r7, #24]
    while (num > 0)                          // Start reading multiple values
 8006160:	7e3b      	ldrb	r3, [r7, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1cd      	bne.n	8006102 <i2cBurstRegRead+0xb6>
        }
    }
    __i2c_dummy_read_SR1_SR2(i2c);
    //I2C_BYTE_TRANSFER_FINISHED(i2c);
    __i2c_stop(i2c);
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f7ff fd4a 	bl	8005c00 <__i2c_stop>

    return I2C_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <i2cEnableDevice>:
 *          <td rowspan="1">0</td>
 *      </tr>
 * </table>
 */
I2C_RETURN_CODE_t i2cEnableDevice(I2C_TypeDef *i2c)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
    i2c->CR1 |= I2C_CR1_PE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f043 0201 	orr.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	601a      	str	r2, [r3, #0]
    return I2C_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <i2cFindSlaveAddr>:
 *          <td rowspan="1">-</td>
 *      </tr>
 * </table>
 */
uint8_t i2cFindSlaveAddr(I2C_TypeDef *i2c, uint8_t i2cAddr)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	460b      	mov	r3, r1
 80061a2:	70fb      	strb	r3, [r7, #3]
    uint32_t simpleDelay;

    __i2c_start(i2c);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fd13 	bl	8005bd0 <__i2c_start>
    while (!(i2c->SR1 & I2C_SR1_SB))
    {
        ;
    }
*/
    i2c->DR = i2cAddr<<1;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	461a      	mov	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	611a      	str	r2, [r3, #16]
    __i2c_dummy_read_SR1_SR2(i2c);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff fd3b 	bl	8005c30 <__i2c_dummy_read_SR1_SR2>
    {
        ;
    }
*/

    i2c->CR1 |= I2C_CR1_STOP;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	601a      	str	r2, [r3, #0]
    for (simpleDelay = 0UL; simpleDelay < 1000UL; simpleDelay++)
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e002      	b.n	80061d2 <i2cFindSlaveAddr+0x3a>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3301      	adds	r3, #1
 80061d0:	60fb      	str	r3, [r7, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061d8:	d3f8      	bcc.n	80061cc <i2cFindSlaveAddr+0x34>
    {
        ;
    }

    if (i2c->SR1 & I2C_SR1_ADDR)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <i2cFindSlaveAddr+0x52>
    {
        return i2cAddr;
 80061e6:	78fb      	ldrb	r3, [r7, #3]
 80061e8:	e000      	b.n	80061ec <i2cFindSlaveAddr+0x54>
    }
    else
    {
        return 0;
 80061ea:	2300      	movs	r3, #0
    }
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <rccGetSysClock>:
 *          <td rowspan="1">Values used to calculate the sysclock frequency</td>
 *      </tr>
 * </table>
 */
uint32_t rccGetSysClock(void)
{
 80061f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061f8:	b094      	sub	sp, #80	; 0x50
 80061fa:	af00      	add	r7, sp, #0
    uint32_t pllm = 0u;
 80061fc:	2300      	movs	r3, #0
 80061fe:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t pllvco = 0u;
 8006200:	2300      	movs	r3, #0
 8006202:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint32_t pllp = 0u;
 8006204:	2300      	movs	r3, #0
 8006206:	643b      	str	r3, [r7, #64]	; 0x40
    uint32_t sysClock = 0u;
 8006208:	2300      	movs	r3, #0
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48

    switch (RCC->CFGR & RCC_CFGR_SWS)
 800620c:	4b79      	ldr	r3, [pc, #484]	; (80063f4 <rccGetSysClock+0x200>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 030c 	and.w	r3, r3, #12
 8006214:	2b08      	cmp	r3, #8
 8006216:	d00d      	beq.n	8006234 <rccGetSysClock+0x40>
 8006218:	2b08      	cmp	r3, #8
 800621a:	f200 80e1 	bhi.w	80063e0 <rccGetSysClock+0x1ec>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d002      	beq.n	8006228 <rccGetSysClock+0x34>
 8006222:	2b04      	cmp	r3, #4
 8006224:	d003      	beq.n	800622e <rccGetSysClock+0x3a>
 8006226:	e0db      	b.n	80063e0 <rccGetSysClock+0x1ec>
    {
        case RCC_CFGR_SWS_HSI:
            sysClock = HSI_VALUE;    // High-speed internal = 16MHz
 8006228:	4b73      	ldr	r3, [pc, #460]	; (80063f8 <rccGetSysClock+0x204>)
 800622a:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 800622c:	e0db      	b.n	80063e6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_HSE:
            sysClock = HSE_VALUE;    // High-speed external = 4 - 25MHz (max.)
 800622e:	4b73      	ldr	r3, [pc, #460]	; (80063fc <rccGetSysClock+0x208>)
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 8006232:	e0d8      	b.n	80063e6 <rccGetSysClock+0x1f2>

        case RCC_CFGR_SWS_PLL:
            pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006234:	4b6f      	ldr	r3, [pc, #444]	; (80063f4 <rccGetSysClock+0x200>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623c:	647b      	str	r3, [r7, #68]	; 0x44

            if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800623e:	4b6d      	ldr	r3, [pc, #436]	; (80063f4 <rccGetSysClock+0x200>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d063      	beq.n	8006312 <rccGetSysClock+0x11e>
            {
                /* HSE used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 800624a:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <rccGetSysClock+0x200>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	099b      	lsrs	r3, r3, #6
 8006250:	2200      	movs	r2, #0
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
 8006254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	633b      	str	r3, [r7, #48]	; 0x30
 800625e:	2300      	movs	r3, #0
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006266:	4622      	mov	r2, r4
 8006268:	462b      	mov	r3, r5
 800626a:	f04f 0000 	mov.w	r0, #0
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	0159      	lsls	r1, r3, #5
 8006274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006278:	0150      	lsls	r0, r2, #5
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4621      	mov	r1, r4
 8006280:	1a51      	subs	r1, r2, r1
 8006282:	6139      	str	r1, [r7, #16]
 8006284:	4629      	mov	r1, r5
 8006286:	eb63 0301 	sbc.w	r3, r3, r1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006298:	4659      	mov	r1, fp
 800629a:	018b      	lsls	r3, r1, #6
 800629c:	4651      	mov	r1, sl
 800629e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062a2:	4651      	mov	r1, sl
 80062a4:	018a      	lsls	r2, r1, #6
 80062a6:	4651      	mov	r1, sl
 80062a8:	ebb2 0801 	subs.w	r8, r2, r1
 80062ac:	4659      	mov	r1, fp
 80062ae:	eb63 0901 	sbc.w	r9, r3, r1
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062c6:	4690      	mov	r8, r2
 80062c8:	4699      	mov	r9, r3
 80062ca:	4623      	mov	r3, r4
 80062cc:	eb18 0303 	adds.w	r3, r8, r3
 80062d0:	60bb      	str	r3, [r7, #8]
 80062d2:	462b      	mov	r3, r5
 80062d4:	eb49 0303 	adc.w	r3, r9, r3
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80062e6:	4629      	mov	r1, r5
 80062e8:	024b      	lsls	r3, r1, #9
 80062ea:	4621      	mov	r1, r4
 80062ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80062f0:	4621      	mov	r1, r4
 80062f2:	024a      	lsls	r2, r1, #9
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	2200      	movs	r2, #0
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006304:	f7fa fc58 	bl	8000bb8 <__aeabi_uldivmod>
 8006308:	4602      	mov	r2, r0
 800630a:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 800630c:	4613      	mov	r3, r2
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	e058      	b.n	80063c4 <rccGetSysClock+0x1d0>
            }
            else
            {
                /* HSI used as PLL clock source */
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
                    * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8006312:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <rccGetSysClock+0x200>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	2200      	movs	r2, #0
 800631a:	4618      	mov	r0, r3
 800631c:	4611      	mov	r1, r2
 800631e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006322:	623b      	str	r3, [r7, #32]
 8006324:	2300      	movs	r3, #0
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
 8006328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	f04f 0000 	mov.w	r0, #0
 8006334:	f04f 0100 	mov.w	r1, #0
 8006338:	0159      	lsls	r1, r3, #5
 800633a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800633e:	0150      	lsls	r0, r2, #5
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4641      	mov	r1, r8
 8006346:	ebb2 0a01 	subs.w	sl, r2, r1
 800634a:	4649      	mov	r1, r9
 800634c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800635c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006364:	ebb2 040a 	subs.w	r4, r2, sl
 8006368:	eb63 050b 	sbc.w	r5, r3, fp
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	00eb      	lsls	r3, r5, #3
 8006376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800637a:	00e2      	lsls	r2, r4, #3
 800637c:	4614      	mov	r4, r2
 800637e:	461d      	mov	r5, r3
 8006380:	4643      	mov	r3, r8
 8006382:	18e3      	adds	r3, r4, r3
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	464b      	mov	r3, r9
 8006388:	eb45 0303 	adc.w	r3, r5, r3
 800638c:	607b      	str	r3, [r7, #4]
 800638e:	f04f 0200 	mov.w	r2, #0
 8006392:	f04f 0300 	mov.w	r3, #0
 8006396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800639a:	4629      	mov	r1, r5
 800639c:	028b      	lsls	r3, r1, #10
 800639e:	4621      	mov	r1, r4
 80063a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80063a4:	4621      	mov	r1, r4
 80063a6:	028a      	lsls	r2, r1, #10
 80063a8:	4610      	mov	r0, r2
 80063aa:	4619      	mov	r1, r3
 80063ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ae:	2200      	movs	r2, #0
 80063b0:	61bb      	str	r3, [r7, #24]
 80063b2:	61fa      	str	r2, [r7, #28]
 80063b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063b8:	f7fa fbfe 	bl	8000bb8 <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
                pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 80063c0:	4613      	mov	r3, r2
 80063c2:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
            pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <rccGetSysClock+0x200>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	0c1b      	lsrs	r3, r3, #16
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	3301      	adds	r3, #1
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40

            sysClock = pllvco / pllp;
 80063d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80063de:	e002      	b.n	80063e6 <rccGetSysClock+0x1f2>

        default:
            sysClock = HSI_VALUE;
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <rccGetSysClock+0x204>)
 80063e2:	64bb      	str	r3, [r7, #72]	; 0x48
            break;
 80063e4:	bf00      	nop
    }

    return sysClock;
 80063e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3750      	adds	r7, #80	; 0x50
 80063ec:	46bd      	mov	sp, r7
 80063ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063f2:	bf00      	nop
 80063f4:	40023800 	.word	0x40023800
 80063f8:	00f42400 	.word	0x00f42400
 80063fc:	007a1200 	.word	0x007a1200

08006400 <rccGetHclkFreq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetSysClock().
 */
uint32_t rccGetHclkFreq(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
    SystemCoreClock = rccGetSysClock() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> POSITION_VAL(RCC_CFGR_HPRE)];
 8006406:	f7ff fef5 	bl	80061f4 <rccGetSysClock>
 800640a:	4601      	mov	r1, r0
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <rccGetHclkFreq+0x44>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006414:	22f0      	movs	r2, #240	; 0xf0
 8006416:	607a      	str	r2, [r7, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	fa92 f2a2 	rbit	r2, r2
 800641e:	603a      	str	r2, [r7, #0]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	fab2 f282 	clz	r2, r2
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	40d3      	lsrs	r3, r2
 800642a:	4a07      	ldr	r2, [pc, #28]	; (8006448 <rccGetHclkFreq+0x48>)
 800642c:	5cd3      	ldrb	r3, [r2, r3]
 800642e:	fa21 f303 	lsr.w	r3, r1, r3
 8006432:	4a06      	ldr	r2, [pc, #24]	; (800644c <rccGetHclkFreq+0x4c>)
 8006434:	6013      	str	r3, [r2, #0]
    return SystemCoreClock;
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <rccGetHclkFreq+0x4c>)
 8006438:	681b      	ldr	r3, [r3, #0]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40023800 	.word	0x40023800
 8006448:	0800b504 	.word	0x0800b504
 800644c:	20000028 	.word	0x20000028

08006450 <rccGetPclk1Freq>:
 * <br>
 * <b>Affected register and bit(s)</b><br>
 * Uses internal function rccGetHclkFrequency().
 */
uint32_t rccGetPclk1Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
    /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
    return (rccGetHclkFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006456:	f7ff ffd3 	bl	8006400 <rccGetHclkFreq>
 800645a:	4601      	mov	r1, r0
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <rccGetPclk1Freq+0x3c>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006464:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8006468:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	fa92 f2a2 	rbit	r2, r2
 8006470:	603a      	str	r2, [r7, #0]
  return result;
 8006472:	683a      	ldr	r2, [r7, #0]
 8006474:	fab2 f282 	clz	r2, r2
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	40d3      	lsrs	r3, r2
 800647c:	4a04      	ldr	r2, [pc, #16]	; (8006490 <rccGetPclk1Freq+0x40>)
 800647e:	5cd3      	ldrb	r3, [r2, r3]
 8006480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40023800 	.word	0x40023800
 8006490:	0800b504 	.word	0x0800b504

08006494 <__spi_Chk_TX_empty>:
#include <mcalGPIO.h>
#include <mcalSPI.h>


static inline void __spi_Chk_TX_empty(SPI_TypeDef *spi)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

	uint16_t simpleDelay;
	while(!(spi->SR & SPI_SR_TXE));
 800649c:	bf00      	nop
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f9      	beq.n	800649e <__spi_Chk_TX_empty+0xa>
	for (simpleDelay = 0; simpleDelay < 3; simpleDelay++) {	; }  // Kurze Zwangspause, da das Signal TXE etwas vor Ausgbae des Letzen Bite erfolgt. ca 500 ns
 80064aa:	2300      	movs	r3, #0
 80064ac:	81fb      	strh	r3, [r7, #14]
 80064ae:	e002      	b.n	80064b6 <__spi_Chk_TX_empty+0x22>
 80064b0:	89fb      	ldrh	r3, [r7, #14]
 80064b2:	3301      	adds	r3, #1
 80064b4:	81fb      	strh	r3, [r7, #14]
 80064b6:	89fb      	ldrh	r3, [r7, #14]
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d9f9      	bls.n	80064b0 <__spi_Chk_TX_empty+0x1c>

}
 80064bc:	bf00      	nop
 80064be:	bf00      	nop
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <__spi_Chk_notBSY>:
}



static inline void __spi_Chk_notBSY(SPI_TypeDef *spi)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b083      	sub	sp, #12
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
	while((spi->SR & SPI_SR_BSY));
 80064d2:	bf00      	nop
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f9      	bne.n	80064d4 <__spi_Chk_notBSY+0xa>
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <spiVerifySPI>:
*/
/**
 * Verifies the integrity of the SPI port.
 */
static bool spiVerifySPI(SPI_TypeDef *spi)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    if ((SPI1 == spi) || (SPI2 == spi) || (SPI3 == spi) || (SPI4 == spi))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <spiVerifySPI+0x3c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <spiVerifySPI+0x28>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a0b      	ldr	r2, [pc, #44]	; (8006530 <spiVerifySPI+0x40>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d007      	beq.n	8006518 <spiVerifySPI+0x28>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a0a      	ldr	r2, [pc, #40]	; (8006534 <spiVerifySPI+0x44>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <spiVerifySPI+0x28>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a09      	ldr	r2, [pc, #36]	; (8006538 <spiVerifySPI+0x48>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d101      	bne.n	800651c <spiVerifySPI+0x2c>
    {
        return true;
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <spiVerifySPI+0x2e>
    }
    return false;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40013000 	.word	0x40013000
 8006530:	40003800 	.word	0x40003800
 8006534:	40003c00 	.word	0x40003c00
 8006538:	40013400 	.word	0x40013400

0800653c <spiVerifyClkDivider>:

/**
 * Verifies the integrity of the SPI clock divider.
 */
static bool spiVerifyClkDivider(SPI_CLOCK_DIV_t div)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
    if ((CLK_DIV_2  == div) || (CLK_DIV_4  == div) || (CLK_DIV_8   == div) || (CLK_DIV_16  == div) ||
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d014      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d011      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 8006552:	79fb      	ldrb	r3, [r7, #7]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d00e      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b03      	cmp	r3, #3
 800655c:	d00b      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d008      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
        (CLK_DIV_32 == div) || (CLK_DIV_64 == div) || (CLK_DIV_128 == div) || (CLK_DIV_256 == div))
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	2b05      	cmp	r3, #5
 8006568:	d005      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	2b06      	cmp	r3, #6
 800656e:	d002      	beq.n	8006576 <spiVerifyClkDivider+0x3a>
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2b07      	cmp	r3, #7
 8006574:	d101      	bne.n	800657a <spiVerifyClkDivider+0x3e>
    {
        return true;
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <spiVerifyClkDivider+0x40>
    }
    return false;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <spiVerifySSM>:

/**
 * Verifies the integrity of the SPI Software Slave Management.
 */
static bool spiVerifySSM(SPI_SSM_t ssm)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
    if ((SSM_ON == ssm) || (SSM_OFF == ssm))
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d002      	beq.n	800659e <spiVerifySSM+0x16>
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <spiVerifySSM+0x1a>
    {
        return true;
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <spiVerifySSM+0x1c>
    }
    return false;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <spiVerifyOpMode>:

/**
 * Verifies the integrity of the SPI operational mode.
 */
static bool spiVerifyOpMode(SPI_OPMODE_t om)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	71fb      	strb	r3, [r7, #7]
    if ((MASTER == om) || (SLAVE == om))
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <spiVerifyOpMode+0x16>
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <spiVerifyOpMode+0x1a>
    {
        return true;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e000      	b.n	80065cc <spiVerifyOpMode+0x1c>
    }
    return false;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <spiVerifyPhase>:

/**
 * Verifies the integrity of the SPI trigger phase.
 */
static bool spiVerifyPhase(SPI_PHASE_t ph)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	71fb      	strb	r3, [r7, #7]
    if ((SPI_PHASE_EDGE_1 == ph) || (SPI_PHASE_EDGE_2 == ph))
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d002      	beq.n	80065ee <spiVerifyPhase+0x16>
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <spiVerifyPhase+0x1a>
    {
        return true;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e000      	b.n	80065f4 <spiVerifyPhase+0x1c>
    }
    return false;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <spiVerifyIdlePolarity>:

/**
 * Verifies the integrity of the SPI idle level.
 */
static bool spiVerifyIdlePolarity(SPI_POLARITY_t pol)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    if ((SPI_IDLE_LOW == pol) || (SPI_IDLE_HIGH == pol))
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <spiVerifyIdlePolarity+0x16>
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <spiVerifyIdlePolarity+0x1a>
    {
        return true;
 8006616:	2301      	movs	r3, #1
 8006618:	e000      	b.n	800661c <spiVerifyIdlePolarity+0x1c>
    }
    return false;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <spiInitSPI>:


SPI_RETURN_CODE_t spiInitSPI(SPI_TypeDef *spi, SPI_CLOCK_DIV_t div, SPI_DATALEN_t len,
                             SPI_SSM_t ssm, SPI_SSI_LVL_t lvl, SPI_OPMODE_t opMode,
                             SPI_PHASE_t phase, SPI_POLARITY_t polarity)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	4608      	mov	r0, r1
 8006632:	4611      	mov	r1, r2
 8006634:	461a      	mov	r2, r3
 8006636:	4603      	mov	r3, r0
 8006638:	70fb      	strb	r3, [r7, #3]
 800663a:	460b      	mov	r3, r1
 800663c:	70bb      	strb	r3, [r7, #2]
 800663e:	4613      	mov	r3, r2
 8006640:	707b      	strb	r3, [r7, #1]
    uint16_t cr1 = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	81fb      	strh	r3, [r7, #14]
    // Parameter verification
    if (spiVerifyClkDivider(div) != true)
 8006646:	78fb      	ldrb	r3, [r7, #3]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff ff77 	bl	800653c <spiVerifyClkDivider>
 800664e:	4603      	mov	r3, r0
 8006650:	f083 0301 	eor.w	r3, r3, #1
 8006654:	b2db      	uxtb	r3, r3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <spiInitSPI+0x38>
    {
        return SPI_INVALID_CLOCK_DIVIDER;
 800665a:	f06f 0350 	mvn.w	r3, #80	; 0x50
 800665e:	e0cc      	b.n	80067fa <spiInitSPI+0x1d2>
    }
    if (spiVerifySSM(ssm) != true)
 8006660:	787b      	ldrb	r3, [r7, #1]
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ff90 	bl	8006588 <spiVerifySSM>
 8006668:	4603      	mov	r3, r0
 800666a:	f083 0301 	eor.w	r3, r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	d002      	beq.n	800667a <spiInitSPI+0x52>
    {
        return SPI_INVALID_SW_SLV_MGMT;
 8006674:	f06f 0352 	mvn.w	r3, #82	; 0x52
 8006678:	e0bf      	b.n	80067fa <spiInitSPI+0x1d2>
    if (spiVerifySsiLvl(lvl) != true)
    {
        return SPI_INVALID_SSI_LEVEL;
    }
#endif
    if (spiVerifyOpMode(opMode) != true)
 800667a:	7f3b      	ldrb	r3, [r7, #28]
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff ff97 	bl	80065b0 <spiVerifyOpMode>
 8006682:	4603      	mov	r3, r0
 8006684:	f083 0301 	eor.w	r3, r3, #1
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <spiInitSPI+0x6c>
    {
        return SPI_INVALID_OP_MODE;
 800668e:	f06f 0355 	mvn.w	r3, #85	; 0x55
 8006692:	e0b2      	b.n	80067fa <spiInitSPI+0x1d2>
    }
    if (spiVerifyPhase(phase) != true)
 8006694:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff ff9d 	bl	80065d8 <spiVerifyPhase>
 800669e:	4603      	mov	r3, r0
 80066a0:	f083 0301 	eor.w	r3, r3, #1
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <spiInitSPI+0x88>
    {
        return SPI_INVALID_PHASE;
 80066aa:	f06f 0356 	mvn.w	r3, #86	; 0x56
 80066ae:	e0a4      	b.n	80067fa <spiInitSPI+0x1d2>
    }
    if (spiVerifyIdlePolarity(polarity) != true)
 80066b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff ffa3 	bl	8006600 <spiVerifyIdlePolarity>
 80066ba:	4603      	mov	r3, r0
 80066bc:	f083 0301 	eor.w	r3, r3, #1
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <spiInitSPI+0xa4>
    {
        return SPI_INVALID_IDLE_POLARITY;
 80066c6:	f06f 0357 	mvn.w	r3, #87	; 0x57
 80066ca:	e096      	b.n	80067fa <spiInitSPI+0x1d2>
    /**
     *  All parameter check passed successfully!
     */

    // Setting up the baudrate (PCLK / Pre-Scaler)
    switch (div)
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b07      	cmp	r3, #7
 80066d0:	d83a      	bhi.n	8006748 <spiInitSPI+0x120>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <spiInitSPI+0xb0>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066f9 	.word	0x080066f9
 80066dc:	08006703 	.word	0x08006703
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	08006717 	.word	0x08006717
 80066e8:	08006721 	.word	0x08006721
 80066ec:	0800672b 	.word	0x0800672b
 80066f0:	08006735 	.word	0x08006735
 80066f4:	0800673f 	.word	0x0800673f
    {
        case CLK_DIV_2:
            cr1 &= ~(SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 80066f8:	89fb      	ldrh	r3, [r7, #14]
 80066fa:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80066fe:	81fb      	strh	r3, [r7, #14]
            break;
 8006700:	e027      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_4:
            cr1 |= SPI_CR1_BR_0;
 8006702:	89fb      	ldrh	r3, [r7, #14]
 8006704:	f043 0308 	orr.w	r3, r3, #8
 8006708:	81fb      	strh	r3, [r7, #14]
            break;
 800670a:	e022      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_8:
            cr1 |= SPI_CR1_BR_1;
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	f043 0310 	orr.w	r3, r3, #16
 8006712:	81fb      	strh	r3, [r7, #14]
            break;
 8006714:	e01d      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_16:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006716:	89fb      	ldrh	r3, [r7, #14]
 8006718:	f043 0318 	orr.w	r3, r3, #24
 800671c:	81fb      	strh	r3, [r7, #14]
            break;
 800671e:	e018      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_32:
            cr1 |= SPI_CR1_BR_2;
 8006720:	89fb      	ldrh	r3, [r7, #14]
 8006722:	f043 0320 	orr.w	r3, r3, #32
 8006726:	81fb      	strh	r3, [r7, #14]
            break;
 8006728:	e013      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_64:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_0);
 800672a:	89fb      	ldrh	r3, [r7, #14]
 800672c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006730:	81fb      	strh	r3, [r7, #14]
            break;
 8006732:	e00e      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_128:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1);
 8006734:	89fb      	ldrh	r3, [r7, #14]
 8006736:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800673a:	81fb      	strh	r3, [r7, #14]
            break;
 800673c:	e009      	b.n	8006752 <spiInitSPI+0x12a>

        case CLK_DIV_256:
            cr1 |= (SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0);
 800673e:	89fb      	ldrh	r3, [r7, #14]
 8006740:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8006744:	81fb      	strh	r3, [r7, #14]
            break;
 8006746:	e004      	b.n	8006752 <spiInitSPI+0x12a>

        default:
            cr1 |= (SPI_CR1_BR_1 | SPI_CR1_BR_0);
 8006748:	89fb      	ldrh	r3, [r7, #14]
 800674a:	f043 0318 	orr.w	r3, r3, #24
 800674e:	81fb      	strh	r3, [r7, #14]
            break;
 8006750:	bf00      	nop
    }

    // Setting up the data length
    if (SPI_DATA_8_BIT == len)
 8006752:	78bb      	ldrb	r3, [r7, #2]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <spiInitSPI+0x13a>
    {
        cr1 &= ~SPI_CR1_DFF_Msk;
 8006758:	89fb      	ldrh	r3, [r7, #14]
 800675a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800675e:	81fb      	strh	r3, [r7, #14]
 8006760:	e003      	b.n	800676a <spiInitSPI+0x142>
    }
    else
    {
        cr1 |= SPI_CR1_DFF;
 8006762:	89fb      	ldrh	r3, [r7, #14]
 8006764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006768:	81fb      	strh	r3, [r7, #14]
    }

    // Set SSM and SSI bits
    if (SSM_ON == ssm)
 800676a:	787b      	ldrb	r3, [r7, #1]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d110      	bne.n	8006792 <spiInitSPI+0x16a>
    {
        cr1 |= SPI_CR1_SSM;
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006776:	81fb      	strh	r3, [r7, #14]

        // SSI level works only if SSM is active
        if (SSI_LVL_HIGH == lvl)
 8006778:	7e3b      	ldrb	r3, [r7, #24]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d104      	bne.n	8006788 <spiInitSPI+0x160>
        {
            cr1 |= SPI_CR1_SSI;
 800677e:	89fb      	ldrh	r3, [r7, #14]
 8006780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006784:	81fb      	strh	r3, [r7, #14]
 8006786:	e008      	b.n	800679a <spiInitSPI+0x172>
        }
        else
        {
            cr1 &= ~SPI_CR1_SSI_Msk;
 8006788:	89fb      	ldrh	r3, [r7, #14]
 800678a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800678e:	81fb      	strh	r3, [r7, #14]
 8006790:	e003      	b.n	800679a <spiInitSPI+0x172>
        }
    }
    else
    {
        cr1 &= ~SPI_CR1_SSM_Msk;
 8006792:	89fb      	ldrh	r3, [r7, #14]
 8006794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006798:	81fb      	strh	r3, [r7, #14]
    }

    // Select between Master/Slave mode
    if (MASTER == opMode)
 800679a:	7f3b      	ldrb	r3, [r7, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <spiInitSPI+0x182>
    {
        cr1 |= SPI_CR1_MSTR;
 80067a0:	89fb      	ldrh	r3, [r7, #14]
 80067a2:	f043 0304 	orr.w	r3, r3, #4
 80067a6:	81fb      	strh	r3, [r7, #14]
 80067a8:	e003      	b.n	80067b2 <spiInitSPI+0x18a>
    }
    else
    {
        cr1 &= ~SPI_CR1_MSTR_Msk;
 80067aa:	89fb      	ldrh	r3, [r7, #14]
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock phase
    if (SPI_PHASE_EDGE_1 == phase)
 80067b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <spiInitSPI+0x19c>
    {
        cr1 &= ~SPI_CR1_CPHA_Msk;
 80067ba:	89fb      	ldrh	r3, [r7, #14]
 80067bc:	f023 0301 	bic.w	r3, r3, #1
 80067c0:	81fb      	strh	r3, [r7, #14]
 80067c2:	e003      	b.n	80067cc <spiInitSPI+0x1a4>
    }
    else
    {
        cr1 |= SPI_CR1_CPHA;
 80067c4:	89fb      	ldrh	r3, [r7, #14]
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	81fb      	strh	r3, [r7, #14]
    }

    // Set clock polarity
    if (SPI_IDLE_LOW == polarity)
 80067cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d104      	bne.n	80067de <spiInitSPI+0x1b6>
    {
        cr1 &= ~SPI_CR1_CPOL_Msk;
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	f023 0302 	bic.w	r3, r3, #2
 80067da:	81fb      	strh	r3, [r7, #14]
 80067dc:	e003      	b.n	80067e6 <spiInitSPI+0x1be>
    }
    else
    {
        cr1 |= SPI_CR1_CPOL;
 80067de:	89fb      	ldrh	r3, [r7, #14]
 80067e0:	f043 0302 	orr.w	r3, r3, #2
 80067e4:	81fb      	strh	r3, [r7, #14]
    }

    // Transfer settings to CR1 + CR2
    spi->CR1 = cr1;
 80067e6:	89fa      	ldrh	r2, [r7, #14]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	601a      	str	r2, [r3, #0]
    //spi->CR1 = 0x31E; //8-bit frames
    spi->CR2 = 0;                     // Simplified version. Should be modified.
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	605a      	str	r2, [r3, #4]

    // Finally, enable SPIn
    spiEnableSPI(spi);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f846 	bl	8006884 <spiEnableSPI>

    return SPI_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop

08006804 <spiSelectSPI>:


SPI_RETURN_CODE_t spiSelectSPI(SPI_TypeDef *spi)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
    // All parameter check passed successfully!

    // Selects the bus clock for SPIn
    if (SPI1 == spi)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a18      	ldr	r2, [pc, #96]	; (8006870 <spiSelectSPI+0x6c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d106      	bne.n	8006822 <spiSelectSPI+0x1e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <spiSelectSPI+0x70>)
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	4a16      	ldr	r2, [pc, #88]	; (8006874 <spiSelectSPI+0x70>)
 800681a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800681e:	6453      	str	r3, [r2, #68]	; 0x44
 8006820:	e01f      	b.n	8006862 <spiSelectSPI+0x5e>
    }
    else if (SPI2 == spi)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <spiSelectSPI+0x74>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d106      	bne.n	8006838 <spiSelectSPI+0x34>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800682a:	4b12      	ldr	r3, [pc, #72]	; (8006874 <spiSelectSPI+0x70>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682e:	4a11      	ldr	r2, [pc, #68]	; (8006874 <spiSelectSPI+0x70>)
 8006830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006834:	6413      	str	r3, [r2, #64]	; 0x40
 8006836:	e014      	b.n	8006862 <spiSelectSPI+0x5e>
    }
    else if (SPI3 == spi)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a10      	ldr	r2, [pc, #64]	; (800687c <spiSelectSPI+0x78>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d106      	bne.n	800684e <spiSelectSPI+0x4a>
    {
        RCC->APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006840:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <spiSelectSPI+0x70>)
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	4a0b      	ldr	r2, [pc, #44]	; (8006874 <spiSelectSPI+0x70>)
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	6413      	str	r3, [r2, #64]	; 0x40
 800684c:	e009      	b.n	8006862 <spiSelectSPI+0x5e>
    }
    else if (SPI4 == spi)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a0b      	ldr	r2, [pc, #44]	; (8006880 <spiSelectSPI+0x7c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d105      	bne.n	8006862 <spiSelectSPI+0x5e>
    {
        RCC->APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <spiSelectSPI+0x70>)
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	4a06      	ldr	r2, [pc, #24]	; (8006874 <spiSelectSPI+0x70>)
 800685c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006860:	6453      	str	r3, [r2, #68]	; 0x44
    }

    return SPI_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40013000 	.word	0x40013000
 8006874:	40023800 	.word	0x40023800
 8006878:	40003800 	.word	0x40003800
 800687c:	40003c00 	.word	0x40003c00
 8006880:	40013400 	.word	0x40013400

08006884 <spiEnableSPI>:

    return SPI_OK;
}

SPI_RETURN_CODE_t spiEnableSPI(SPI_TypeDef *spi)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]

	// Parameter verification
    if (spiVerifySPI(spi) != true)
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7ff fe2f 	bl	80064f0 <spiVerifySPI>
 8006892:	4603      	mov	r3, r0
 8006894:	f083 0301 	eor.w	r3, r3, #1
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <spiEnableSPI+0x20>
    {
        return SPI_INVALID_SPI;
 800689e:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80068a2:	e006      	b.n	80068b2 <spiEnableSPI+0x2e>
    }

    // All parameter check passed successfully!
    spi->CR1 |= SPI_CR1_SPE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]

    return SPI_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <spiWriteByte>:
    return SPI_OK;
}


SPI_RETURN_CODE_t spiWriteByte(SPI_TypeDef *spi, GPIO_TypeDef *port, PIN_NUM_t pin, uint8_t data)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	4611      	mov	r1, r2
 80068c6:	461a      	mov	r2, r3
 80068c8:	460b      	mov	r3, r1
 80068ca:	71fb      	strb	r3, [r7, #7]
 80068cc:	4613      	mov	r3, r2
 80068ce:	71bb      	strb	r3, [r7, #6]
    //static uint8_t state = SPI_SEND_BYTE_1;

    if (gpioVerifyPin(pin) != true)
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fe fdfc 	bl	80054d0 <gpioVerifyPin>
 80068d8:	4603      	mov	r3, r0
 80068da:	f083 0301 	eor.w	r3, r3, #1
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <spiWriteByte+0x30>
    {
        return GPIO_INVALID_PIN;
 80068e4:	f06f 0301 	mvn.w	r3, #1
 80068e8:	e016      	b.n	8006918 <spiWriteByte+0x5e>
    }
	__spi_Chk_TX_empty(spi);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7ff fdd2 	bl	8006494 <__spi_Chk_TX_empty>
    gpioResetPin(port, pin);              // Set CS input to low level
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	4619      	mov	r1, r3
 80068f4:	68b8      	ldr	r0, [r7, #8]
 80068f6:	f7fe ffe9 	bl	80058cc <gpioResetPin>

	spi->DR = data;                         // Send first byte to data register
 80068fa:	79ba      	ldrb	r2, [r7, #6]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	60da      	str	r2, [r3, #12]
	__spi_Chk_TX_empty(spi);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7ff fdc7 	bl	8006494 <__spi_Chk_TX_empty>

	__spi_Chk_notBSY(spi);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff fddf 	bl	80064ca <__spi_Chk_notBSY>
	gpioSetPin(port, pin);
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	4619      	mov	r1, r3
 8006910:	68b8      	ldr	r0, [r7, #8]
 8006912:	f7fe ffb0 	bl	8005876 <gpioSetPin>
            gpioSetPin(port, pin);
            state = SPI_SEND_BYTE_1;
        }
    }
*/
    return SPI_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	6039      	str	r1, [r7, #0]
 800692a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800692c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006930:	2b00      	cmp	r3, #0
 8006932:	db0a      	blt.n	800694a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	b2da      	uxtb	r2, r3
 8006938:	490c      	ldr	r1, [pc, #48]	; (800696c <__NVIC_SetPriority+0x4c>)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	0112      	lsls	r2, r2, #4
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	440b      	add	r3, r1
 8006944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006948:	e00a      	b.n	8006960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	4908      	ldr	r1, [pc, #32]	; (8006970 <__NVIC_SetPriority+0x50>)
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	f003 030f 	and.w	r3, r3, #15
 8006956:	3b04      	subs	r3, #4
 8006958:	0112      	lsls	r2, r2, #4
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	440b      	add	r3, r1
 800695e:	761a      	strb	r2, [r3, #24]
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr
 800696c:	e000e100 	.word	0xe000e100
 8006970:	e000ed00 	.word	0xe000ed00

08006974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3b01      	subs	r3, #1
 8006980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006984:	d301      	bcc.n	800698a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006986:	2301      	movs	r3, #1
 8006988:	e00f      	b.n	80069aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800698a:	4a0a      	ldr	r2, [pc, #40]	; (80069b4 <SysTick_Config+0x40>)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3b01      	subs	r3, #1
 8006990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006992:	210f      	movs	r1, #15
 8006994:	f04f 30ff 	mov.w	r0, #4294967295
 8006998:	f7ff ffc2 	bl	8006920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800699c:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <SysTick_Config+0x40>)
 800699e:	2200      	movs	r2, #0
 80069a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069a2:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <SysTick_Config+0x40>)
 80069a4:	2207      	movs	r2, #7
 80069a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	e000e010 	.word	0xe000e010

080069b8 <systickSetMillis>:
 * **systickSetMillis()** might be confusing since the user might expect to get a ticktime of a multiple of **one**
 * millisecond. However, depending on the setting of the divider used in function systickInit() the real ticktime might
 * be also a multiple of 10 or 100 milliseconds.
 */
void systickSetMillis(uint32_t *timer, uint32_t millis)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
    *timer = millis;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	601a      	str	r2, [r3, #0]
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <systickInit>:
 * Initialization of the SysTick timer
 *
 * @param  divisor : Sets the tick time of SysTick
 */
void systickInit(uint32_t divisor)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 80069dc:	f000 f8b2 	bl	8006b44 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / divisor);
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <systickInit+0x24>)
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7ff ffc2 	bl	8006974 <SysTick_Config>
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000028 	.word	0x20000028

080069fc <systickSetTicktime>:
 * @note
 * This function is a replacement for the deprecated functions systickSetMillis() and systickSetMicros(). The reason for
 * this replacement is documented in the 'Deprecated Systick Functions' section.
 */
void systickSetTicktime(uint32_t *timer, uint32_t ticktime)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
    *timer = ticktime;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	601a      	str	r2, [r3, #0]
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr

08006a18 <isSystickExpired>:
 * on the Systick timer.
 *
 * @param   timer : This is a software timer.
 */
bool isSystickExpired(uint32_t timer)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	bool timerState = false;
 8006a20:	2300      	movs	r3, #0
 8006a22:	73fb      	strb	r3, [r7, #15]

	if (0 == timer)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <isSystickExpired+0x16>
	{
		timerState = true;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	73fb      	strb	r3, [r7, #15]
	}

	return timerState;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <SysTick_Handler>:
 * @note
 * It is very important to provide a globally defined boolean variable with exactly the name <b>timerTrigger</b>. A very good place
 * for the introduction of this variable is the file <b>main.c</b> of your personal project.
 */
void SysTick_Handler(void)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	af00      	add	r7, sp, #0
	timerTrigger = true;
 8006a40:	4b03      	ldr	r3, [pc, #12]	; (8006a50 <SysTick_Handler+0x14>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
}
 8006a46:	bf00      	nop
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000224 	.word	0x20000224

08006a54 <systickUpdateTimer>:
 * Updates the given timer.
 *
 * @param *timer : A pointer to the variable representing this timer.
 */
void systickUpdateTimer(uint32_t *timer)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
    DECREMENT_TIMER(*timer);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <systickUpdateTimer+0x1a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
    timerTrigger = false;
 8006a6e:	4b04      	ldr	r3, [pc, #16]	; (8006a80 <systickUpdateTimer+0x2c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	20000224 	.word	0x20000224

08006a84 <systickUpdateTimerList>:
 *
 * @param  *list      : Pointer to an array of pointers
 * @param   arraySize : Size of the list
 */
void systickUpdateTimerList(uint32_t *list, uint8_t arraySize)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	70fb      	strb	r3, [r7, #3]
	uint32_t *timer;
	uint8_t  i;

	for (i = 0; i < (arraySize); ++i)
 8006a90:	2300      	movs	r3, #0
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e011      	b.n	8006aba <systickUpdateTimerList+0x36>
	{
		timer = (uint32_t *) list[i];
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	60bb      	str	r3, [r7, #8]
		DECREMENT_TIMER(*timer);
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <systickUpdateTimerList+0x30>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	1e5a      	subs	r2, r3, #1
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	601a      	str	r2, [r3, #0]
	for (i = 0; i < (arraySize); ++i)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	73fb      	strb	r3, [r7, #15]
 8006aba:	7bfa      	ldrb	r2, [r7, #15]
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d3e9      	bcc.n	8006a96 <systickUpdateTimerList+0x12>
	}
    timerTrigger = false;
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <systickUpdateTimerList+0x50>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	20000224 	.word	0x20000224

08006ad8 <systickDelay>:
 * of the while(1) loop, e.g. when initialization of a hardware component needs
 * time to perform one initialization step (e.g. if the datasheet of that component
 * demands a delay before doing the next initialization step).
 */
void systickDelay(uint32_t *timer, uint32_t delay)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
    systickSetMillis(timer, delay);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff67 	bl	80069b8 <systickSetMillis>
    while (!isSystickExpired(*timer))
 8006aea:	e006      	b.n	8006afa <systickDelay+0x22>
    {
        if (timerTrigger == true)
 8006aec:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <systickDelay+0x44>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d002      	beq.n	8006afa <systickDelay+0x22>
        {
            systickUpdateTimer(timer);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ffad 	bl	8006a54 <systickUpdateTimer>
    while (!isSystickExpired(*timer))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff ff8a 	bl	8006a18 <isSystickExpired>
 8006b04:	4603      	mov	r3, r0
 8006b06:	f083 0301 	eor.w	r3, r3, #1
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1ed      	bne.n	8006aec <systickDelay+0x14>
        }
    }
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	20000224 	.word	0x20000224

08006b20 <SystemInit>:
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	4b06      	ldr	r3, [pc, #24]	; (8006b40 <SystemInit+0x20>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	4a05      	ldr	r2, [pc, #20]	; (8006b40 <SystemInit+0x20>)
 8006b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	e000ed00 	.word	0xe000ed00

08006b44 <SystemCoreClockUpdate>:
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	2302      	movs	r3, #2
 8006b54:	60fb      	str	r3, [r7, #12]
 8006b56:	2300      	movs	r3, #0
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	2302      	movs	r3, #2
 8006b5c:	607b      	str	r3, [r7, #4]
 8006b5e:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2b08      	cmp	r3, #8
 8006b6c:	d011      	beq.n	8006b92 <SystemCoreClockUpdate+0x4e>
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d844      	bhi.n	8006bfe <SystemCoreClockUpdate+0xba>
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <SystemCoreClockUpdate+0x3e>
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d004      	beq.n	8006b8a <SystemCoreClockUpdate+0x46>
 8006b80:	e03d      	b.n	8006bfe <SystemCoreClockUpdate+0xba>
 8006b82:	4b2c      	ldr	r3, [pc, #176]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006b84:	4a2c      	ldr	r2, [pc, #176]	; (8006c38 <SystemCoreClockUpdate+0xf4>)
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e03d      	b.n	8006c06 <SystemCoreClockUpdate+0xc2>
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006b8c:	4a2b      	ldr	r2, [pc, #172]	; (8006c3c <SystemCoreClockUpdate+0xf8>)
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e039      	b.n	8006c06 <SystemCoreClockUpdate+0xc2>
 8006b92:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	0d9b      	lsrs	r3, r3, #22
 8006b98:	f003 0301 	and.w	r3, r3, #1
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba6:	607b      	str	r3, [r7, #4]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <SystemCoreClockUpdate+0x84>
 8006bae:	4a23      	ldr	r2, [pc, #140]	; (8006c3c <SystemCoreClockUpdate+0xf8>)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb6:	4a1e      	ldr	r2, [pc, #120]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006bb8:	6852      	ldr	r2, [r2, #4]
 8006bba:	0992      	lsrs	r2, r2, #6
 8006bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bc0:	fb02 f303 	mul.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	e00b      	b.n	8006be0 <SystemCoreClockUpdate+0x9c>
 8006bc8:	4a1b      	ldr	r2, [pc, #108]	; (8006c38 <SystemCoreClockUpdate+0xf4>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd0:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006bd2:	6852      	ldr	r2, [r2, #4]
 8006bd4:	0992      	lsrs	r2, r2, #6
 8006bd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bda:	fb02 f303 	mul.w	r3, r2, r3
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	4b13      	ldr	r3, [pc, #76]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	0c1b      	lsrs	r3, r3, #16
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	3301      	adds	r3, #1
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	e003      	b.n	8006c06 <SystemCoreClockUpdate+0xc2>
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006c00:	4a0d      	ldr	r2, [pc, #52]	; (8006c38 <SystemCoreClockUpdate+0xf4>)
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	bf00      	nop
 8006c06:	4b0a      	ldr	r3, [pc, #40]	; (8006c30 <SystemCoreClockUpdate+0xec>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 030f 	and.w	r3, r3, #15
 8006c10:	4a0b      	ldr	r2, [pc, #44]	; (8006c40 <SystemCoreClockUpdate+0xfc>)
 8006c12:	5cd3      	ldrb	r3, [r2, r3]
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c20:	4a04      	ldr	r2, [pc, #16]	; (8006c34 <SystemCoreClockUpdate+0xf0>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40023800 	.word	0x40023800
 8006c34:	20000028 	.word	0x20000028
 8006c38:	00f42400 	.word	0x00f42400
 8006c3c:	007a1200 	.word	0x007a1200
 8006c40:	0800b514 	.word	0x0800b514

08006c44 <__libc_init_array>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4d0d      	ldr	r5, [pc, #52]	; (8006c7c <__libc_init_array+0x38>)
 8006c48:	4c0d      	ldr	r4, [pc, #52]	; (8006c80 <__libc_init_array+0x3c>)
 8006c4a:	1b64      	subs	r4, r4, r5
 8006c4c:	10a4      	asrs	r4, r4, #2
 8006c4e:	2600      	movs	r6, #0
 8006c50:	42a6      	cmp	r6, r4
 8006c52:	d109      	bne.n	8006c68 <__libc_init_array+0x24>
 8006c54:	4d0b      	ldr	r5, [pc, #44]	; (8006c84 <__libc_init_array+0x40>)
 8006c56:	4c0c      	ldr	r4, [pc, #48]	; (8006c88 <__libc_init_array+0x44>)
 8006c58:	f003 fff0 	bl	800ac3c <_init>
 8006c5c:	1b64      	subs	r4, r4, r5
 8006c5e:	10a4      	asrs	r4, r4, #2
 8006c60:	2600      	movs	r6, #0
 8006c62:	42a6      	cmp	r6, r4
 8006c64:	d105      	bne.n	8006c72 <__libc_init_array+0x2e>
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6c:	4798      	blx	r3
 8006c6e:	3601      	adds	r6, #1
 8006c70:	e7ee      	b.n	8006c50 <__libc_init_array+0xc>
 8006c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c76:	4798      	blx	r3
 8006c78:	3601      	adds	r6, #1
 8006c7a:	e7f2      	b.n	8006c62 <__libc_init_array+0x1e>
 8006c7c:	0800bae0 	.word	0x0800bae0
 8006c80:	0800bae0 	.word	0x0800bae0
 8006c84:	0800bae0 	.word	0x0800bae0
 8006c88:	0800bae4 	.word	0x0800bae4

08006c8c <memset>:
 8006c8c:	4402      	add	r2, r0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d100      	bne.n	8006c96 <memset+0xa>
 8006c94:	4770      	bx	lr
 8006c96:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9a:	e7f9      	b.n	8006c90 <memset+0x4>

08006c9c <__cvt>:
 8006c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca0:	ec55 4b10 	vmov	r4, r5, d0
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	460e      	mov	r6, r1
 8006ca8:	4619      	mov	r1, r3
 8006caa:	462b      	mov	r3, r5
 8006cac:	bfbb      	ittet	lt
 8006cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cb2:	461d      	movlt	r5, r3
 8006cb4:	2300      	movge	r3, #0
 8006cb6:	232d      	movlt	r3, #45	; 0x2d
 8006cb8:	700b      	strb	r3, [r1, #0]
 8006cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cc0:	4691      	mov	r9, r2
 8006cc2:	f023 0820 	bic.w	r8, r3, #32
 8006cc6:	bfbc      	itt	lt
 8006cc8:	4622      	movlt	r2, r4
 8006cca:	4614      	movlt	r4, r2
 8006ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd0:	d005      	beq.n	8006cde <__cvt+0x42>
 8006cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cd6:	d100      	bne.n	8006cda <__cvt+0x3e>
 8006cd8:	3601      	adds	r6, #1
 8006cda:	2102      	movs	r1, #2
 8006cdc:	e000      	b.n	8006ce0 <__cvt+0x44>
 8006cde:	2103      	movs	r1, #3
 8006ce0:	ab03      	add	r3, sp, #12
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	ab02      	add	r3, sp, #8
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	ec45 4b10 	vmov	d0, r4, r5
 8006cec:	4653      	mov	r3, sl
 8006cee:	4632      	mov	r2, r6
 8006cf0:	f000 fcea 	bl	80076c8 <_dtoa_r>
 8006cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	d102      	bne.n	8006d02 <__cvt+0x66>
 8006cfc:	f019 0f01 	tst.w	r9, #1
 8006d00:	d022      	beq.n	8006d48 <__cvt+0xac>
 8006d02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d06:	eb07 0906 	add.w	r9, r7, r6
 8006d0a:	d110      	bne.n	8006d2e <__cvt+0x92>
 8006d0c:	783b      	ldrb	r3, [r7, #0]
 8006d0e:	2b30      	cmp	r3, #48	; 0x30
 8006d10:	d10a      	bne.n	8006d28 <__cvt+0x8c>
 8006d12:	2200      	movs	r2, #0
 8006d14:	2300      	movs	r3, #0
 8006d16:	4620      	mov	r0, r4
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fedd 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d1e:	b918      	cbnz	r0, 8006d28 <__cvt+0x8c>
 8006d20:	f1c6 0601 	rsb	r6, r6, #1
 8006d24:	f8ca 6000 	str.w	r6, [sl]
 8006d28:	f8da 3000 	ldr.w	r3, [sl]
 8006d2c:	4499      	add	r9, r3
 8006d2e:	2200      	movs	r2, #0
 8006d30:	2300      	movs	r3, #0
 8006d32:	4620      	mov	r0, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	f7f9 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d3a:	b108      	cbz	r0, 8006d40 <__cvt+0xa4>
 8006d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d40:	2230      	movs	r2, #48	; 0x30
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	454b      	cmp	r3, r9
 8006d46:	d307      	bcc.n	8006d58 <__cvt+0xbc>
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d4c:	1bdb      	subs	r3, r3, r7
 8006d4e:	4638      	mov	r0, r7
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	b004      	add	sp, #16
 8006d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	9103      	str	r1, [sp, #12]
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	e7f0      	b.n	8006d42 <__cvt+0xa6>

08006d60 <__exponent>:
 8006d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d62:	4603      	mov	r3, r0
 8006d64:	2900      	cmp	r1, #0
 8006d66:	bfb8      	it	lt
 8006d68:	4249      	neglt	r1, r1
 8006d6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006d6e:	bfb4      	ite	lt
 8006d70:	222d      	movlt	r2, #45	; 0x2d
 8006d72:	222b      	movge	r2, #43	; 0x2b
 8006d74:	2909      	cmp	r1, #9
 8006d76:	7042      	strb	r2, [r0, #1]
 8006d78:	dd2a      	ble.n	8006dd0 <__exponent+0x70>
 8006d7a:	f10d 0407 	add.w	r4, sp, #7
 8006d7e:	46a4      	mov	ip, r4
 8006d80:	270a      	movs	r7, #10
 8006d82:	46a6      	mov	lr, r4
 8006d84:	460a      	mov	r2, r1
 8006d86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006d8e:	3530      	adds	r5, #48	; 0x30
 8006d90:	2a63      	cmp	r2, #99	; 0x63
 8006d92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006d9a:	4631      	mov	r1, r6
 8006d9c:	dcf1      	bgt.n	8006d82 <__exponent+0x22>
 8006d9e:	3130      	adds	r1, #48	; 0x30
 8006da0:	f1ae 0502 	sub.w	r5, lr, #2
 8006da4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006da8:	1c44      	adds	r4, r0, #1
 8006daa:	4629      	mov	r1, r5
 8006dac:	4561      	cmp	r1, ip
 8006dae:	d30a      	bcc.n	8006dc6 <__exponent+0x66>
 8006db0:	f10d 0209 	add.w	r2, sp, #9
 8006db4:	eba2 020e 	sub.w	r2, r2, lr
 8006db8:	4565      	cmp	r5, ip
 8006dba:	bf88      	it	hi
 8006dbc:	2200      	movhi	r2, #0
 8006dbe:	4413      	add	r3, r2
 8006dc0:	1a18      	subs	r0, r3, r0
 8006dc2:	b003      	add	sp, #12
 8006dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dce:	e7ed      	b.n	8006dac <__exponent+0x4c>
 8006dd0:	2330      	movs	r3, #48	; 0x30
 8006dd2:	3130      	adds	r1, #48	; 0x30
 8006dd4:	7083      	strb	r3, [r0, #2]
 8006dd6:	70c1      	strb	r1, [r0, #3]
 8006dd8:	1d03      	adds	r3, r0, #4
 8006dda:	e7f1      	b.n	8006dc0 <__exponent+0x60>

08006ddc <_printf_float>:
 8006ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de0:	ed2d 8b02 	vpush	{d8}
 8006de4:	b08d      	sub	sp, #52	; 0x34
 8006de6:	460c      	mov	r4, r1
 8006de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006dec:	4616      	mov	r6, r2
 8006dee:	461f      	mov	r7, r3
 8006df0:	4605      	mov	r5, r0
 8006df2:	f001 fa57 	bl	80082a4 <_localeconv_r>
 8006df6:	f8d0 a000 	ldr.w	sl, [r0]
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f7f9 f9f0 	bl	80001e0 <strlen>
 8006e00:	2300      	movs	r3, #0
 8006e02:	930a      	str	r3, [sp, #40]	; 0x28
 8006e04:	6823      	ldr	r3, [r4, #0]
 8006e06:	9305      	str	r3, [sp, #20]
 8006e08:	f8d8 3000 	ldr.w	r3, [r8]
 8006e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e10:	3307      	adds	r3, #7
 8006e12:	f023 0307 	bic.w	r3, r3, #7
 8006e16:	f103 0208 	add.w	r2, r3, #8
 8006e1a:	f8c8 2000 	str.w	r2, [r8]
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e2e:	9307      	str	r3, [sp, #28]
 8006e30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e34:	ee08 0a10 	vmov	s16, r0
 8006e38:	4b9f      	ldr	r3, [pc, #636]	; (80070b8 <_printf_float+0x2dc>)
 8006e3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e42:	f7f9 fe7b 	bl	8000b3c <__aeabi_dcmpun>
 8006e46:	bb88      	cbnz	r0, 8006eac <_printf_float+0xd0>
 8006e48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e4c:	4b9a      	ldr	r3, [pc, #616]	; (80070b8 <_printf_float+0x2dc>)
 8006e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e52:	f7f9 fe55 	bl	8000b00 <__aeabi_dcmple>
 8006e56:	bb48      	cbnz	r0, 8006eac <_printf_float+0xd0>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	4640      	mov	r0, r8
 8006e5e:	4649      	mov	r1, r9
 8006e60:	f7f9 fe44 	bl	8000aec <__aeabi_dcmplt>
 8006e64:	b110      	cbz	r0, 8006e6c <_printf_float+0x90>
 8006e66:	232d      	movs	r3, #45	; 0x2d
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e6c:	4b93      	ldr	r3, [pc, #588]	; (80070bc <_printf_float+0x2e0>)
 8006e6e:	4894      	ldr	r0, [pc, #592]	; (80070c0 <_printf_float+0x2e4>)
 8006e70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e74:	bf94      	ite	ls
 8006e76:	4698      	movls	r8, r3
 8006e78:	4680      	movhi	r8, r0
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	f023 0204 	bic.w	r2, r3, #4
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	9700      	str	r7, [sp, #0]
 8006e8c:	4633      	mov	r3, r6
 8006e8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f9d8 	bl	8007248 <_printf_common>
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f040 8090 	bne.w	8006fbe <_printf_float+0x1e2>
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea2:	b00d      	add	sp, #52	; 0x34
 8006ea4:	ecbd 8b02 	vpop	{d8}
 8006ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	4640      	mov	r0, r8
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	f7f9 fe42 	bl	8000b3c <__aeabi_dcmpun>
 8006eb8:	b140      	cbz	r0, 8006ecc <_printf_float+0xf0>
 8006eba:	464b      	mov	r3, r9
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bfbc      	itt	lt
 8006ec0:	232d      	movlt	r3, #45	; 0x2d
 8006ec2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ec6:	487f      	ldr	r0, [pc, #508]	; (80070c4 <_printf_float+0x2e8>)
 8006ec8:	4b7f      	ldr	r3, [pc, #508]	; (80070c8 <_printf_float+0x2ec>)
 8006eca:	e7d1      	b.n	8006e70 <_printf_float+0x94>
 8006ecc:	6863      	ldr	r3, [r4, #4]
 8006ece:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ed2:	9206      	str	r2, [sp, #24]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	d13f      	bne.n	8006f58 <_printf_float+0x17c>
 8006ed8:	2306      	movs	r3, #6
 8006eda:	6063      	str	r3, [r4, #4]
 8006edc:	9b05      	ldr	r3, [sp, #20]
 8006ede:	6861      	ldr	r1, [r4, #4]
 8006ee0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9303      	str	r3, [sp, #12]
 8006ee8:	ab0a      	add	r3, sp, #40	; 0x28
 8006eea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006eee:	ab09      	add	r3, sp, #36	; 0x24
 8006ef0:	ec49 8b10 	vmov	d0, r8, r9
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	6022      	str	r2, [r4, #0]
 8006ef8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006efc:	4628      	mov	r0, r5
 8006efe:	f7ff fecd 	bl	8006c9c <__cvt>
 8006f02:	9b06      	ldr	r3, [sp, #24]
 8006f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f06:	2b47      	cmp	r3, #71	; 0x47
 8006f08:	4680      	mov	r8, r0
 8006f0a:	d108      	bne.n	8006f1e <_printf_float+0x142>
 8006f0c:	1cc8      	adds	r0, r1, #3
 8006f0e:	db02      	blt.n	8006f16 <_printf_float+0x13a>
 8006f10:	6863      	ldr	r3, [r4, #4]
 8006f12:	4299      	cmp	r1, r3
 8006f14:	dd41      	ble.n	8006f9a <_printf_float+0x1be>
 8006f16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006f1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f22:	d820      	bhi.n	8006f66 <_printf_float+0x18a>
 8006f24:	3901      	subs	r1, #1
 8006f26:	465a      	mov	r2, fp
 8006f28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f2e:	f7ff ff17 	bl	8006d60 <__exponent>
 8006f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f34:	1813      	adds	r3, r2, r0
 8006f36:	2a01      	cmp	r2, #1
 8006f38:	4681      	mov	r9, r0
 8006f3a:	6123      	str	r3, [r4, #16]
 8006f3c:	dc02      	bgt.n	8006f44 <_printf_float+0x168>
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	07d2      	lsls	r2, r2, #31
 8006f42:	d501      	bpl.n	8006f48 <_printf_float+0x16c>
 8006f44:	3301      	adds	r3, #1
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d09c      	beq.n	8006e8a <_printf_float+0xae>
 8006f50:	232d      	movs	r3, #45	; 0x2d
 8006f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f56:	e798      	b.n	8006e8a <_printf_float+0xae>
 8006f58:	9a06      	ldr	r2, [sp, #24]
 8006f5a:	2a47      	cmp	r2, #71	; 0x47
 8006f5c:	d1be      	bne.n	8006edc <_printf_float+0x100>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1bc      	bne.n	8006edc <_printf_float+0x100>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7b9      	b.n	8006eda <_printf_float+0xfe>
 8006f66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f6a:	d118      	bne.n	8006f9e <_printf_float+0x1c2>
 8006f6c:	2900      	cmp	r1, #0
 8006f6e:	6863      	ldr	r3, [r4, #4]
 8006f70:	dd0b      	ble.n	8006f8a <_printf_float+0x1ae>
 8006f72:	6121      	str	r1, [r4, #16]
 8006f74:	b913      	cbnz	r3, 8006f7c <_printf_float+0x1a0>
 8006f76:	6822      	ldr	r2, [r4, #0]
 8006f78:	07d0      	lsls	r0, r2, #31
 8006f7a:	d502      	bpl.n	8006f82 <_printf_float+0x1a6>
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	440b      	add	r3, r1
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f84:	f04f 0900 	mov.w	r9, #0
 8006f88:	e7de      	b.n	8006f48 <_printf_float+0x16c>
 8006f8a:	b913      	cbnz	r3, 8006f92 <_printf_float+0x1b6>
 8006f8c:	6822      	ldr	r2, [r4, #0]
 8006f8e:	07d2      	lsls	r2, r2, #31
 8006f90:	d501      	bpl.n	8006f96 <_printf_float+0x1ba>
 8006f92:	3302      	adds	r3, #2
 8006f94:	e7f4      	b.n	8006f80 <_printf_float+0x1a4>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e7f2      	b.n	8006f80 <_printf_float+0x1a4>
 8006f9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	db05      	blt.n	8006fb0 <_printf_float+0x1d4>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	6121      	str	r1, [r4, #16]
 8006fa8:	07d8      	lsls	r0, r3, #31
 8006faa:	d5ea      	bpl.n	8006f82 <_printf_float+0x1a6>
 8006fac:	1c4b      	adds	r3, r1, #1
 8006fae:	e7e7      	b.n	8006f80 <_printf_float+0x1a4>
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	bfd4      	ite	le
 8006fb4:	f1c1 0202 	rsble	r2, r1, #2
 8006fb8:	2201      	movgt	r2, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	e7e0      	b.n	8006f80 <_printf_float+0x1a4>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	055a      	lsls	r2, r3, #21
 8006fc2:	d407      	bmi.n	8006fd4 <_printf_float+0x1f8>
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	4642      	mov	r2, r8
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	47b8      	blx	r7
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d12c      	bne.n	800702c <_printf_float+0x250>
 8006fd2:	e764      	b.n	8006e9e <_printf_float+0xc2>
 8006fd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fd8:	f240 80e0 	bls.w	800719c <_printf_float+0x3c0>
 8006fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	f7f9 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d034      	beq.n	8007056 <_printf_float+0x27a>
 8006fec:	4a37      	ldr	r2, [pc, #220]	; (80070cc <_printf_float+0x2f0>)
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	f43f af51 	beq.w	8006e9e <_printf_float+0xc2>
 8006ffc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007000:	429a      	cmp	r2, r3
 8007002:	db02      	blt.n	800700a <_printf_float+0x22e>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	07d8      	lsls	r0, r3, #31
 8007008:	d510      	bpl.n	800702c <_printf_float+0x250>
 800700a:	ee18 3a10 	vmov	r3, s16
 800700e:	4652      	mov	r2, sl
 8007010:	4631      	mov	r1, r6
 8007012:	4628      	mov	r0, r5
 8007014:	47b8      	blx	r7
 8007016:	3001      	adds	r0, #1
 8007018:	f43f af41 	beq.w	8006e9e <_printf_float+0xc2>
 800701c:	f04f 0800 	mov.w	r8, #0
 8007020:	f104 091a 	add.w	r9, r4, #26
 8007024:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007026:	3b01      	subs	r3, #1
 8007028:	4543      	cmp	r3, r8
 800702a:	dc09      	bgt.n	8007040 <_printf_float+0x264>
 800702c:	6823      	ldr	r3, [r4, #0]
 800702e:	079b      	lsls	r3, r3, #30
 8007030:	f100 8105 	bmi.w	800723e <_printf_float+0x462>
 8007034:	68e0      	ldr	r0, [r4, #12]
 8007036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007038:	4298      	cmp	r0, r3
 800703a:	bfb8      	it	lt
 800703c:	4618      	movlt	r0, r3
 800703e:	e730      	b.n	8006ea2 <_printf_float+0xc6>
 8007040:	2301      	movs	r3, #1
 8007042:	464a      	mov	r2, r9
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f af27 	beq.w	8006e9e <_printf_float+0xc2>
 8007050:	f108 0801 	add.w	r8, r8, #1
 8007054:	e7e6      	b.n	8007024 <_printf_float+0x248>
 8007056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	dc39      	bgt.n	80070d0 <_printf_float+0x2f4>
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <_printf_float+0x2f0>)
 800705e:	2301      	movs	r3, #1
 8007060:	4631      	mov	r1, r6
 8007062:	4628      	mov	r0, r5
 8007064:	47b8      	blx	r7
 8007066:	3001      	adds	r0, #1
 8007068:	f43f af19 	beq.w	8006e9e <_printf_float+0xc2>
 800706c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007070:	4313      	orrs	r3, r2
 8007072:	d102      	bne.n	800707a <_printf_float+0x29e>
 8007074:	6823      	ldr	r3, [r4, #0]
 8007076:	07d9      	lsls	r1, r3, #31
 8007078:	d5d8      	bpl.n	800702c <_printf_float+0x250>
 800707a:	ee18 3a10 	vmov	r3, s16
 800707e:	4652      	mov	r2, sl
 8007080:	4631      	mov	r1, r6
 8007082:	4628      	mov	r0, r5
 8007084:	47b8      	blx	r7
 8007086:	3001      	adds	r0, #1
 8007088:	f43f af09 	beq.w	8006e9e <_printf_float+0xc2>
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	f104 0a1a 	add.w	sl, r4, #26
 8007094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007096:	425b      	negs	r3, r3
 8007098:	454b      	cmp	r3, r9
 800709a:	dc01      	bgt.n	80070a0 <_printf_float+0x2c4>
 800709c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709e:	e792      	b.n	8006fc6 <_printf_float+0x1ea>
 80070a0:	2301      	movs	r3, #1
 80070a2:	4652      	mov	r2, sl
 80070a4:	4631      	mov	r1, r6
 80070a6:	4628      	mov	r0, r5
 80070a8:	47b8      	blx	r7
 80070aa:	3001      	adds	r0, #1
 80070ac:	f43f aef7 	beq.w	8006e9e <_printf_float+0xc2>
 80070b0:	f109 0901 	add.w	r9, r9, #1
 80070b4:	e7ee      	b.n	8007094 <_printf_float+0x2b8>
 80070b6:	bf00      	nop
 80070b8:	7fefffff 	.word	0x7fefffff
 80070bc:	0800b528 	.word	0x0800b528
 80070c0:	0800b52c 	.word	0x0800b52c
 80070c4:	0800b534 	.word	0x0800b534
 80070c8:	0800b530 	.word	0x0800b530
 80070cc:	0800b538 	.word	0x0800b538
 80070d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070d4:	429a      	cmp	r2, r3
 80070d6:	bfa8      	it	ge
 80070d8:	461a      	movge	r2, r3
 80070da:	2a00      	cmp	r2, #0
 80070dc:	4691      	mov	r9, r2
 80070de:	dc37      	bgt.n	8007150 <_printf_float+0x374>
 80070e0:	f04f 0b00 	mov.w	fp, #0
 80070e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070e8:	f104 021a 	add.w	r2, r4, #26
 80070ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070ee:	9305      	str	r3, [sp, #20]
 80070f0:	eba3 0309 	sub.w	r3, r3, r9
 80070f4:	455b      	cmp	r3, fp
 80070f6:	dc33      	bgt.n	8007160 <_printf_float+0x384>
 80070f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80070fc:	429a      	cmp	r2, r3
 80070fe:	db3b      	blt.n	8007178 <_printf_float+0x39c>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	07da      	lsls	r2, r3, #31
 8007104:	d438      	bmi.n	8007178 <_printf_float+0x39c>
 8007106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007108:	9a05      	ldr	r2, [sp, #20]
 800710a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800710c:	1a9a      	subs	r2, r3, r2
 800710e:	eba3 0901 	sub.w	r9, r3, r1
 8007112:	4591      	cmp	r9, r2
 8007114:	bfa8      	it	ge
 8007116:	4691      	movge	r9, r2
 8007118:	f1b9 0f00 	cmp.w	r9, #0
 800711c:	dc35      	bgt.n	800718a <_printf_float+0x3ae>
 800711e:	f04f 0800 	mov.w	r8, #0
 8007122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007126:	f104 0a1a 	add.w	sl, r4, #26
 800712a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800712e:	1a9b      	subs	r3, r3, r2
 8007130:	eba3 0309 	sub.w	r3, r3, r9
 8007134:	4543      	cmp	r3, r8
 8007136:	f77f af79 	ble.w	800702c <_printf_float+0x250>
 800713a:	2301      	movs	r3, #1
 800713c:	4652      	mov	r2, sl
 800713e:	4631      	mov	r1, r6
 8007140:	4628      	mov	r0, r5
 8007142:	47b8      	blx	r7
 8007144:	3001      	adds	r0, #1
 8007146:	f43f aeaa 	beq.w	8006e9e <_printf_float+0xc2>
 800714a:	f108 0801 	add.w	r8, r8, #1
 800714e:	e7ec      	b.n	800712a <_printf_float+0x34e>
 8007150:	4613      	mov	r3, r2
 8007152:	4631      	mov	r1, r6
 8007154:	4642      	mov	r2, r8
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	d1c0      	bne.n	80070e0 <_printf_float+0x304>
 800715e:	e69e      	b.n	8006e9e <_printf_float+0xc2>
 8007160:	2301      	movs	r3, #1
 8007162:	4631      	mov	r1, r6
 8007164:	4628      	mov	r0, r5
 8007166:	9205      	str	r2, [sp, #20]
 8007168:	47b8      	blx	r7
 800716a:	3001      	adds	r0, #1
 800716c:	f43f ae97 	beq.w	8006e9e <_printf_float+0xc2>
 8007170:	9a05      	ldr	r2, [sp, #20]
 8007172:	f10b 0b01 	add.w	fp, fp, #1
 8007176:	e7b9      	b.n	80070ec <_printf_float+0x310>
 8007178:	ee18 3a10 	vmov	r3, s16
 800717c:	4652      	mov	r2, sl
 800717e:	4631      	mov	r1, r6
 8007180:	4628      	mov	r0, r5
 8007182:	47b8      	blx	r7
 8007184:	3001      	adds	r0, #1
 8007186:	d1be      	bne.n	8007106 <_printf_float+0x32a>
 8007188:	e689      	b.n	8006e9e <_printf_float+0xc2>
 800718a:	9a05      	ldr	r2, [sp, #20]
 800718c:	464b      	mov	r3, r9
 800718e:	4442      	add	r2, r8
 8007190:	4631      	mov	r1, r6
 8007192:	4628      	mov	r0, r5
 8007194:	47b8      	blx	r7
 8007196:	3001      	adds	r0, #1
 8007198:	d1c1      	bne.n	800711e <_printf_float+0x342>
 800719a:	e680      	b.n	8006e9e <_printf_float+0xc2>
 800719c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719e:	2a01      	cmp	r2, #1
 80071a0:	dc01      	bgt.n	80071a6 <_printf_float+0x3ca>
 80071a2:	07db      	lsls	r3, r3, #31
 80071a4:	d538      	bpl.n	8007218 <_printf_float+0x43c>
 80071a6:	2301      	movs	r3, #1
 80071a8:	4642      	mov	r2, r8
 80071aa:	4631      	mov	r1, r6
 80071ac:	4628      	mov	r0, r5
 80071ae:	47b8      	blx	r7
 80071b0:	3001      	adds	r0, #1
 80071b2:	f43f ae74 	beq.w	8006e9e <_printf_float+0xc2>
 80071b6:	ee18 3a10 	vmov	r3, s16
 80071ba:	4652      	mov	r2, sl
 80071bc:	4631      	mov	r1, r6
 80071be:	4628      	mov	r0, r5
 80071c0:	47b8      	blx	r7
 80071c2:	3001      	adds	r0, #1
 80071c4:	f43f ae6b 	beq.w	8006e9e <_printf_float+0xc2>
 80071c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071cc:	2200      	movs	r2, #0
 80071ce:	2300      	movs	r3, #0
 80071d0:	f7f9 fc82 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d4:	b9d8      	cbnz	r0, 800720e <_printf_float+0x432>
 80071d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071d8:	f108 0201 	add.w	r2, r8, #1
 80071dc:	3b01      	subs	r3, #1
 80071de:	4631      	mov	r1, r6
 80071e0:	4628      	mov	r0, r5
 80071e2:	47b8      	blx	r7
 80071e4:	3001      	adds	r0, #1
 80071e6:	d10e      	bne.n	8007206 <_printf_float+0x42a>
 80071e8:	e659      	b.n	8006e9e <_printf_float+0xc2>
 80071ea:	2301      	movs	r3, #1
 80071ec:	4652      	mov	r2, sl
 80071ee:	4631      	mov	r1, r6
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b8      	blx	r7
 80071f4:	3001      	adds	r0, #1
 80071f6:	f43f ae52 	beq.w	8006e9e <_printf_float+0xc2>
 80071fa:	f108 0801 	add.w	r8, r8, #1
 80071fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007200:	3b01      	subs	r3, #1
 8007202:	4543      	cmp	r3, r8
 8007204:	dcf1      	bgt.n	80071ea <_printf_float+0x40e>
 8007206:	464b      	mov	r3, r9
 8007208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800720c:	e6dc      	b.n	8006fc8 <_printf_float+0x1ec>
 800720e:	f04f 0800 	mov.w	r8, #0
 8007212:	f104 0a1a 	add.w	sl, r4, #26
 8007216:	e7f2      	b.n	80071fe <_printf_float+0x422>
 8007218:	2301      	movs	r3, #1
 800721a:	4642      	mov	r2, r8
 800721c:	e7df      	b.n	80071de <_printf_float+0x402>
 800721e:	2301      	movs	r3, #1
 8007220:	464a      	mov	r2, r9
 8007222:	4631      	mov	r1, r6
 8007224:	4628      	mov	r0, r5
 8007226:	47b8      	blx	r7
 8007228:	3001      	adds	r0, #1
 800722a:	f43f ae38 	beq.w	8006e9e <_printf_float+0xc2>
 800722e:	f108 0801 	add.w	r8, r8, #1
 8007232:	68e3      	ldr	r3, [r4, #12]
 8007234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007236:	1a5b      	subs	r3, r3, r1
 8007238:	4543      	cmp	r3, r8
 800723a:	dcf0      	bgt.n	800721e <_printf_float+0x442>
 800723c:	e6fa      	b.n	8007034 <_printf_float+0x258>
 800723e:	f04f 0800 	mov.w	r8, #0
 8007242:	f104 0919 	add.w	r9, r4, #25
 8007246:	e7f4      	b.n	8007232 <_printf_float+0x456>

08007248 <_printf_common>:
 8007248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800724c:	4616      	mov	r6, r2
 800724e:	4699      	mov	r9, r3
 8007250:	688a      	ldr	r2, [r1, #8]
 8007252:	690b      	ldr	r3, [r1, #16]
 8007254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007258:	4293      	cmp	r3, r2
 800725a:	bfb8      	it	lt
 800725c:	4613      	movlt	r3, r2
 800725e:	6033      	str	r3, [r6, #0]
 8007260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007264:	4607      	mov	r7, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b10a      	cbz	r2, 800726e <_printf_common+0x26>
 800726a:	3301      	adds	r3, #1
 800726c:	6033      	str	r3, [r6, #0]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	0699      	lsls	r1, r3, #26
 8007272:	bf42      	ittt	mi
 8007274:	6833      	ldrmi	r3, [r6, #0]
 8007276:	3302      	addmi	r3, #2
 8007278:	6033      	strmi	r3, [r6, #0]
 800727a:	6825      	ldr	r5, [r4, #0]
 800727c:	f015 0506 	ands.w	r5, r5, #6
 8007280:	d106      	bne.n	8007290 <_printf_common+0x48>
 8007282:	f104 0a19 	add.w	sl, r4, #25
 8007286:	68e3      	ldr	r3, [r4, #12]
 8007288:	6832      	ldr	r2, [r6, #0]
 800728a:	1a9b      	subs	r3, r3, r2
 800728c:	42ab      	cmp	r3, r5
 800728e:	dc26      	bgt.n	80072de <_printf_common+0x96>
 8007290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007294:	1e13      	subs	r3, r2, #0
 8007296:	6822      	ldr	r2, [r4, #0]
 8007298:	bf18      	it	ne
 800729a:	2301      	movne	r3, #1
 800729c:	0692      	lsls	r2, r2, #26
 800729e:	d42b      	bmi.n	80072f8 <_printf_common+0xb0>
 80072a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072a4:	4649      	mov	r1, r9
 80072a6:	4638      	mov	r0, r7
 80072a8:	47c0      	blx	r8
 80072aa:	3001      	adds	r0, #1
 80072ac:	d01e      	beq.n	80072ec <_printf_common+0xa4>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	68e5      	ldr	r5, [r4, #12]
 80072b2:	6832      	ldr	r2, [r6, #0]
 80072b4:	f003 0306 	and.w	r3, r3, #6
 80072b8:	2b04      	cmp	r3, #4
 80072ba:	bf08      	it	eq
 80072bc:	1aad      	subeq	r5, r5, r2
 80072be:	68a3      	ldr	r3, [r4, #8]
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	bf0c      	ite	eq
 80072c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072c8:	2500      	movne	r5, #0
 80072ca:	4293      	cmp	r3, r2
 80072cc:	bfc4      	itt	gt
 80072ce:	1a9b      	subgt	r3, r3, r2
 80072d0:	18ed      	addgt	r5, r5, r3
 80072d2:	2600      	movs	r6, #0
 80072d4:	341a      	adds	r4, #26
 80072d6:	42b5      	cmp	r5, r6
 80072d8:	d11a      	bne.n	8007310 <_printf_common+0xc8>
 80072da:	2000      	movs	r0, #0
 80072dc:	e008      	b.n	80072f0 <_printf_common+0xa8>
 80072de:	2301      	movs	r3, #1
 80072e0:	4652      	mov	r2, sl
 80072e2:	4649      	mov	r1, r9
 80072e4:	4638      	mov	r0, r7
 80072e6:	47c0      	blx	r8
 80072e8:	3001      	adds	r0, #1
 80072ea:	d103      	bne.n	80072f4 <_printf_common+0xac>
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f4:	3501      	adds	r5, #1
 80072f6:	e7c6      	b.n	8007286 <_printf_common+0x3e>
 80072f8:	18e1      	adds	r1, r4, r3
 80072fa:	1c5a      	adds	r2, r3, #1
 80072fc:	2030      	movs	r0, #48	; 0x30
 80072fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007302:	4422      	add	r2, r4
 8007304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800730c:	3302      	adds	r3, #2
 800730e:	e7c7      	b.n	80072a0 <_printf_common+0x58>
 8007310:	2301      	movs	r3, #1
 8007312:	4622      	mov	r2, r4
 8007314:	4649      	mov	r1, r9
 8007316:	4638      	mov	r0, r7
 8007318:	47c0      	blx	r8
 800731a:	3001      	adds	r0, #1
 800731c:	d0e6      	beq.n	80072ec <_printf_common+0xa4>
 800731e:	3601      	adds	r6, #1
 8007320:	e7d9      	b.n	80072d6 <_printf_common+0x8e>
	...

08007324 <_printf_i>:
 8007324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007328:	7e0f      	ldrb	r7, [r1, #24]
 800732a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800732c:	2f78      	cmp	r7, #120	; 0x78
 800732e:	4691      	mov	r9, r2
 8007330:	4680      	mov	r8, r0
 8007332:	460c      	mov	r4, r1
 8007334:	469a      	mov	sl, r3
 8007336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800733a:	d807      	bhi.n	800734c <_printf_i+0x28>
 800733c:	2f62      	cmp	r7, #98	; 0x62
 800733e:	d80a      	bhi.n	8007356 <_printf_i+0x32>
 8007340:	2f00      	cmp	r7, #0
 8007342:	f000 80d8 	beq.w	80074f6 <_printf_i+0x1d2>
 8007346:	2f58      	cmp	r7, #88	; 0x58
 8007348:	f000 80a3 	beq.w	8007492 <_printf_i+0x16e>
 800734c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007354:	e03a      	b.n	80073cc <_printf_i+0xa8>
 8007356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800735a:	2b15      	cmp	r3, #21
 800735c:	d8f6      	bhi.n	800734c <_printf_i+0x28>
 800735e:	a101      	add	r1, pc, #4	; (adr r1, 8007364 <_printf_i+0x40>)
 8007360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007364:	080073bd 	.word	0x080073bd
 8007368:	080073d1 	.word	0x080073d1
 800736c:	0800734d 	.word	0x0800734d
 8007370:	0800734d 	.word	0x0800734d
 8007374:	0800734d 	.word	0x0800734d
 8007378:	0800734d 	.word	0x0800734d
 800737c:	080073d1 	.word	0x080073d1
 8007380:	0800734d 	.word	0x0800734d
 8007384:	0800734d 	.word	0x0800734d
 8007388:	0800734d 	.word	0x0800734d
 800738c:	0800734d 	.word	0x0800734d
 8007390:	080074dd 	.word	0x080074dd
 8007394:	08007401 	.word	0x08007401
 8007398:	080074bf 	.word	0x080074bf
 800739c:	0800734d 	.word	0x0800734d
 80073a0:	0800734d 	.word	0x0800734d
 80073a4:	080074ff 	.word	0x080074ff
 80073a8:	0800734d 	.word	0x0800734d
 80073ac:	08007401 	.word	0x08007401
 80073b0:	0800734d 	.word	0x0800734d
 80073b4:	0800734d 	.word	0x0800734d
 80073b8:	080074c7 	.word	0x080074c7
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	1d1a      	adds	r2, r3, #4
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	602a      	str	r2, [r5, #0]
 80073c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073cc:	2301      	movs	r3, #1
 80073ce:	e0a3      	b.n	8007518 <_printf_i+0x1f4>
 80073d0:	6820      	ldr	r0, [r4, #0]
 80073d2:	6829      	ldr	r1, [r5, #0]
 80073d4:	0606      	lsls	r6, r0, #24
 80073d6:	f101 0304 	add.w	r3, r1, #4
 80073da:	d50a      	bpl.n	80073f2 <_printf_i+0xce>
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	2e00      	cmp	r6, #0
 80073e2:	da03      	bge.n	80073ec <_printf_i+0xc8>
 80073e4:	232d      	movs	r3, #45	; 0x2d
 80073e6:	4276      	negs	r6, r6
 80073e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ec:	485e      	ldr	r0, [pc, #376]	; (8007568 <_printf_i+0x244>)
 80073ee:	230a      	movs	r3, #10
 80073f0:	e019      	b.n	8007426 <_printf_i+0x102>
 80073f2:	680e      	ldr	r6, [r1, #0]
 80073f4:	602b      	str	r3, [r5, #0]
 80073f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073fa:	bf18      	it	ne
 80073fc:	b236      	sxthne	r6, r6
 80073fe:	e7ef      	b.n	80073e0 <_printf_i+0xbc>
 8007400:	682b      	ldr	r3, [r5, #0]
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	1d19      	adds	r1, r3, #4
 8007406:	6029      	str	r1, [r5, #0]
 8007408:	0601      	lsls	r1, r0, #24
 800740a:	d501      	bpl.n	8007410 <_printf_i+0xec>
 800740c:	681e      	ldr	r6, [r3, #0]
 800740e:	e002      	b.n	8007416 <_printf_i+0xf2>
 8007410:	0646      	lsls	r6, r0, #25
 8007412:	d5fb      	bpl.n	800740c <_printf_i+0xe8>
 8007414:	881e      	ldrh	r6, [r3, #0]
 8007416:	4854      	ldr	r0, [pc, #336]	; (8007568 <_printf_i+0x244>)
 8007418:	2f6f      	cmp	r7, #111	; 0x6f
 800741a:	bf0c      	ite	eq
 800741c:	2308      	moveq	r3, #8
 800741e:	230a      	movne	r3, #10
 8007420:	2100      	movs	r1, #0
 8007422:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007426:	6865      	ldr	r5, [r4, #4]
 8007428:	60a5      	str	r5, [r4, #8]
 800742a:	2d00      	cmp	r5, #0
 800742c:	bfa2      	ittt	ge
 800742e:	6821      	ldrge	r1, [r4, #0]
 8007430:	f021 0104 	bicge.w	r1, r1, #4
 8007434:	6021      	strge	r1, [r4, #0]
 8007436:	b90e      	cbnz	r6, 800743c <_printf_i+0x118>
 8007438:	2d00      	cmp	r5, #0
 800743a:	d04d      	beq.n	80074d8 <_printf_i+0x1b4>
 800743c:	4615      	mov	r5, r2
 800743e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007442:	fb03 6711 	mls	r7, r3, r1, r6
 8007446:	5dc7      	ldrb	r7, [r0, r7]
 8007448:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800744c:	4637      	mov	r7, r6
 800744e:	42bb      	cmp	r3, r7
 8007450:	460e      	mov	r6, r1
 8007452:	d9f4      	bls.n	800743e <_printf_i+0x11a>
 8007454:	2b08      	cmp	r3, #8
 8007456:	d10b      	bne.n	8007470 <_printf_i+0x14c>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07de      	lsls	r6, r3, #31
 800745c:	d508      	bpl.n	8007470 <_printf_i+0x14c>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	6861      	ldr	r1, [r4, #4]
 8007462:	4299      	cmp	r1, r3
 8007464:	bfde      	ittt	le
 8007466:	2330      	movle	r3, #48	; 0x30
 8007468:	f805 3c01 	strble.w	r3, [r5, #-1]
 800746c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007470:	1b52      	subs	r2, r2, r5
 8007472:	6122      	str	r2, [r4, #16]
 8007474:	f8cd a000 	str.w	sl, [sp]
 8007478:	464b      	mov	r3, r9
 800747a:	aa03      	add	r2, sp, #12
 800747c:	4621      	mov	r1, r4
 800747e:	4640      	mov	r0, r8
 8007480:	f7ff fee2 	bl	8007248 <_printf_common>
 8007484:	3001      	adds	r0, #1
 8007486:	d14c      	bne.n	8007522 <_printf_i+0x1fe>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	b004      	add	sp, #16
 800748e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007492:	4835      	ldr	r0, [pc, #212]	; (8007568 <_printf_i+0x244>)
 8007494:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007498:	6829      	ldr	r1, [r5, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a0:	6029      	str	r1, [r5, #0]
 80074a2:	061d      	lsls	r5, r3, #24
 80074a4:	d514      	bpl.n	80074d0 <_printf_i+0x1ac>
 80074a6:	07df      	lsls	r7, r3, #31
 80074a8:	bf44      	itt	mi
 80074aa:	f043 0320 	orrmi.w	r3, r3, #32
 80074ae:	6023      	strmi	r3, [r4, #0]
 80074b0:	b91e      	cbnz	r6, 80074ba <_printf_i+0x196>
 80074b2:	6823      	ldr	r3, [r4, #0]
 80074b4:	f023 0320 	bic.w	r3, r3, #32
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	2310      	movs	r3, #16
 80074bc:	e7b0      	b.n	8007420 <_printf_i+0xfc>
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	2378      	movs	r3, #120	; 0x78
 80074c8:	4828      	ldr	r0, [pc, #160]	; (800756c <_printf_i+0x248>)
 80074ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074ce:	e7e3      	b.n	8007498 <_printf_i+0x174>
 80074d0:	0659      	lsls	r1, r3, #25
 80074d2:	bf48      	it	mi
 80074d4:	b2b6      	uxthmi	r6, r6
 80074d6:	e7e6      	b.n	80074a6 <_printf_i+0x182>
 80074d8:	4615      	mov	r5, r2
 80074da:	e7bb      	b.n	8007454 <_printf_i+0x130>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	6826      	ldr	r6, [r4, #0]
 80074e0:	6961      	ldr	r1, [r4, #20]
 80074e2:	1d18      	adds	r0, r3, #4
 80074e4:	6028      	str	r0, [r5, #0]
 80074e6:	0635      	lsls	r5, r6, #24
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	d501      	bpl.n	80074f0 <_printf_i+0x1cc>
 80074ec:	6019      	str	r1, [r3, #0]
 80074ee:	e002      	b.n	80074f6 <_printf_i+0x1d2>
 80074f0:	0670      	lsls	r0, r6, #25
 80074f2:	d5fb      	bpl.n	80074ec <_printf_i+0x1c8>
 80074f4:	8019      	strh	r1, [r3, #0]
 80074f6:	2300      	movs	r3, #0
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	4615      	mov	r5, r2
 80074fc:	e7ba      	b.n	8007474 <_printf_i+0x150>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	1d1a      	adds	r2, r3, #4
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	6862      	ldr	r2, [r4, #4]
 8007508:	2100      	movs	r1, #0
 800750a:	4628      	mov	r0, r5
 800750c:	f7f8 fe70 	bl	80001f0 <memchr>
 8007510:	b108      	cbz	r0, 8007516 <_printf_i+0x1f2>
 8007512:	1b40      	subs	r0, r0, r5
 8007514:	6060      	str	r0, [r4, #4]
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	2300      	movs	r3, #0
 800751c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007520:	e7a8      	b.n	8007474 <_printf_i+0x150>
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	462a      	mov	r2, r5
 8007526:	4649      	mov	r1, r9
 8007528:	4640      	mov	r0, r8
 800752a:	47d0      	blx	sl
 800752c:	3001      	adds	r0, #1
 800752e:	d0ab      	beq.n	8007488 <_printf_i+0x164>
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	079b      	lsls	r3, r3, #30
 8007534:	d413      	bmi.n	800755e <_printf_i+0x23a>
 8007536:	68e0      	ldr	r0, [r4, #12]
 8007538:	9b03      	ldr	r3, [sp, #12]
 800753a:	4298      	cmp	r0, r3
 800753c:	bfb8      	it	lt
 800753e:	4618      	movlt	r0, r3
 8007540:	e7a4      	b.n	800748c <_printf_i+0x168>
 8007542:	2301      	movs	r3, #1
 8007544:	4632      	mov	r2, r6
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	47d0      	blx	sl
 800754c:	3001      	adds	r0, #1
 800754e:	d09b      	beq.n	8007488 <_printf_i+0x164>
 8007550:	3501      	adds	r5, #1
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	9903      	ldr	r1, [sp, #12]
 8007556:	1a5b      	subs	r3, r3, r1
 8007558:	42ab      	cmp	r3, r5
 800755a:	dcf2      	bgt.n	8007542 <_printf_i+0x21e>
 800755c:	e7eb      	b.n	8007536 <_printf_i+0x212>
 800755e:	2500      	movs	r5, #0
 8007560:	f104 0619 	add.w	r6, r4, #25
 8007564:	e7f5      	b.n	8007552 <_printf_i+0x22e>
 8007566:	bf00      	nop
 8007568:	0800b53a 	.word	0x0800b53a
 800756c:	0800b54b 	.word	0x0800b54b

08007570 <siprintf>:
 8007570:	b40e      	push	{r1, r2, r3}
 8007572:	b500      	push	{lr}
 8007574:	b09c      	sub	sp, #112	; 0x70
 8007576:	ab1d      	add	r3, sp, #116	; 0x74
 8007578:	9002      	str	r0, [sp, #8]
 800757a:	9006      	str	r0, [sp, #24]
 800757c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007580:	4809      	ldr	r0, [pc, #36]	; (80075a8 <siprintf+0x38>)
 8007582:	9107      	str	r1, [sp, #28]
 8007584:	9104      	str	r1, [sp, #16]
 8007586:	4909      	ldr	r1, [pc, #36]	; (80075ac <siprintf+0x3c>)
 8007588:	f853 2b04 	ldr.w	r2, [r3], #4
 800758c:	9105      	str	r1, [sp, #20]
 800758e:	6800      	ldr	r0, [r0, #0]
 8007590:	9301      	str	r3, [sp, #4]
 8007592:	a902      	add	r1, sp, #8
 8007594:	f001 fb76 	bl	8008c84 <_svfiprintf_r>
 8007598:	9b02      	ldr	r3, [sp, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	b01c      	add	sp, #112	; 0x70
 80075a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80075a4:	b003      	add	sp, #12
 80075a6:	4770      	bx	lr
 80075a8:	2000002c 	.word	0x2000002c
 80075ac:	ffff0208 	.word	0xffff0208

080075b0 <quorem>:
 80075b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	6903      	ldr	r3, [r0, #16]
 80075b6:	690c      	ldr	r4, [r1, #16]
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	4607      	mov	r7, r0
 80075bc:	f2c0 8081 	blt.w	80076c2 <quorem+0x112>
 80075c0:	3c01      	subs	r4, #1
 80075c2:	f101 0814 	add.w	r8, r1, #20
 80075c6:	f100 0514 	add.w	r5, r0, #20
 80075ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80075d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075d8:	3301      	adds	r3, #1
 80075da:	429a      	cmp	r2, r3
 80075dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80075e8:	d331      	bcc.n	800764e <quorem+0x9e>
 80075ea:	f04f 0e00 	mov.w	lr, #0
 80075ee:	4640      	mov	r0, r8
 80075f0:	46ac      	mov	ip, r5
 80075f2:	46f2      	mov	sl, lr
 80075f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80075f8:	b293      	uxth	r3, r2
 80075fa:	fb06 e303 	mla	r3, r6, r3, lr
 80075fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007602:	b29b      	uxth	r3, r3
 8007604:	ebaa 0303 	sub.w	r3, sl, r3
 8007608:	f8dc a000 	ldr.w	sl, [ip]
 800760c:	0c12      	lsrs	r2, r2, #16
 800760e:	fa13 f38a 	uxtah	r3, r3, sl
 8007612:	fb06 e202 	mla	r2, r6, r2, lr
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	9b00      	ldr	r3, [sp, #0]
 800761a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800761e:	b292      	uxth	r2, r2
 8007620:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007628:	f8bd 3000 	ldrh.w	r3, [sp]
 800762c:	4581      	cmp	r9, r0
 800762e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007632:	f84c 3b04 	str.w	r3, [ip], #4
 8007636:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800763a:	d2db      	bcs.n	80075f4 <quorem+0x44>
 800763c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007640:	b92b      	cbnz	r3, 800764e <quorem+0x9e>
 8007642:	9b01      	ldr	r3, [sp, #4]
 8007644:	3b04      	subs	r3, #4
 8007646:	429d      	cmp	r5, r3
 8007648:	461a      	mov	r2, r3
 800764a:	d32e      	bcc.n	80076aa <quorem+0xfa>
 800764c:	613c      	str	r4, [r7, #16]
 800764e:	4638      	mov	r0, r7
 8007650:	f001 f8c4 	bl	80087dc <__mcmp>
 8007654:	2800      	cmp	r0, #0
 8007656:	db24      	blt.n	80076a2 <quorem+0xf2>
 8007658:	3601      	adds	r6, #1
 800765a:	4628      	mov	r0, r5
 800765c:	f04f 0c00 	mov.w	ip, #0
 8007660:	f858 2b04 	ldr.w	r2, [r8], #4
 8007664:	f8d0 e000 	ldr.w	lr, [r0]
 8007668:	b293      	uxth	r3, r2
 800766a:	ebac 0303 	sub.w	r3, ip, r3
 800766e:	0c12      	lsrs	r2, r2, #16
 8007670:	fa13 f38e 	uxtah	r3, r3, lr
 8007674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800767c:	b29b      	uxth	r3, r3
 800767e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007682:	45c1      	cmp	r9, r8
 8007684:	f840 3b04 	str.w	r3, [r0], #4
 8007688:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800768c:	d2e8      	bcs.n	8007660 <quorem+0xb0>
 800768e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007696:	b922      	cbnz	r2, 80076a2 <quorem+0xf2>
 8007698:	3b04      	subs	r3, #4
 800769a:	429d      	cmp	r5, r3
 800769c:	461a      	mov	r2, r3
 800769e:	d30a      	bcc.n	80076b6 <quorem+0x106>
 80076a0:	613c      	str	r4, [r7, #16]
 80076a2:	4630      	mov	r0, r6
 80076a4:	b003      	add	sp, #12
 80076a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	6812      	ldr	r2, [r2, #0]
 80076ac:	3b04      	subs	r3, #4
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	d1cc      	bne.n	800764c <quorem+0x9c>
 80076b2:	3c01      	subs	r4, #1
 80076b4:	e7c7      	b.n	8007646 <quorem+0x96>
 80076b6:	6812      	ldr	r2, [r2, #0]
 80076b8:	3b04      	subs	r3, #4
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d1f0      	bne.n	80076a0 <quorem+0xf0>
 80076be:	3c01      	subs	r4, #1
 80076c0:	e7eb      	b.n	800769a <quorem+0xea>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e7ee      	b.n	80076a4 <quorem+0xf4>
	...

080076c8 <_dtoa_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	ed2d 8b04 	vpush	{d8-d9}
 80076d0:	ec57 6b10 	vmov	r6, r7, d0
 80076d4:	b093      	sub	sp, #76	; 0x4c
 80076d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076dc:	9106      	str	r1, [sp, #24]
 80076de:	ee10 aa10 	vmov	sl, s0
 80076e2:	4604      	mov	r4, r0
 80076e4:	9209      	str	r2, [sp, #36]	; 0x24
 80076e6:	930c      	str	r3, [sp, #48]	; 0x30
 80076e8:	46bb      	mov	fp, r7
 80076ea:	b975      	cbnz	r5, 800770a <_dtoa_r+0x42>
 80076ec:	2010      	movs	r0, #16
 80076ee:	f000 fddd 	bl	80082ac <malloc>
 80076f2:	4602      	mov	r2, r0
 80076f4:	6260      	str	r0, [r4, #36]	; 0x24
 80076f6:	b920      	cbnz	r0, 8007702 <_dtoa_r+0x3a>
 80076f8:	4ba7      	ldr	r3, [pc, #668]	; (8007998 <_dtoa_r+0x2d0>)
 80076fa:	21ea      	movs	r1, #234	; 0xea
 80076fc:	48a7      	ldr	r0, [pc, #668]	; (800799c <_dtoa_r+0x2d4>)
 80076fe:	f001 fbd1 	bl	8008ea4 <__assert_func>
 8007702:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007706:	6005      	str	r5, [r0, #0]
 8007708:	60c5      	str	r5, [r0, #12]
 800770a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800770c:	6819      	ldr	r1, [r3, #0]
 800770e:	b151      	cbz	r1, 8007726 <_dtoa_r+0x5e>
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	604a      	str	r2, [r1, #4]
 8007714:	2301      	movs	r3, #1
 8007716:	4093      	lsls	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
 800771a:	4620      	mov	r0, r4
 800771c:	f000 fe1c 	bl	8008358 <_Bfree>
 8007720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	1e3b      	subs	r3, r7, #0
 8007728:	bfaa      	itet	ge
 800772a:	2300      	movge	r3, #0
 800772c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007730:	f8c8 3000 	strge.w	r3, [r8]
 8007734:	4b9a      	ldr	r3, [pc, #616]	; (80079a0 <_dtoa_r+0x2d8>)
 8007736:	bfbc      	itt	lt
 8007738:	2201      	movlt	r2, #1
 800773a:	f8c8 2000 	strlt.w	r2, [r8]
 800773e:	ea33 030b 	bics.w	r3, r3, fp
 8007742:	d11b      	bne.n	800777c <_dtoa_r+0xb4>
 8007744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007746:	f242 730f 	movw	r3, #9999	; 0x270f
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007750:	4333      	orrs	r3, r6
 8007752:	f000 8592 	beq.w	800827a <_dtoa_r+0xbb2>
 8007756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007758:	b963      	cbnz	r3, 8007774 <_dtoa_r+0xac>
 800775a:	4b92      	ldr	r3, [pc, #584]	; (80079a4 <_dtoa_r+0x2dc>)
 800775c:	e022      	b.n	80077a4 <_dtoa_r+0xdc>
 800775e:	4b92      	ldr	r3, [pc, #584]	; (80079a8 <_dtoa_r+0x2e0>)
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	3308      	adds	r3, #8
 8007764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	9801      	ldr	r0, [sp, #4]
 800776a:	b013      	add	sp, #76	; 0x4c
 800776c:	ecbd 8b04 	vpop	{d8-d9}
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <_dtoa_r+0x2dc>)
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	3303      	adds	r3, #3
 800777a:	e7f3      	b.n	8007764 <_dtoa_r+0x9c>
 800777c:	2200      	movs	r2, #0
 800777e:	2300      	movs	r3, #0
 8007780:	4650      	mov	r0, sl
 8007782:	4659      	mov	r1, fp
 8007784:	f7f9 f9a8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007788:	ec4b ab19 	vmov	d9, sl, fp
 800778c:	4680      	mov	r8, r0
 800778e:	b158      	cbz	r0, 80077a8 <_dtoa_r+0xe0>
 8007790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007792:	2301      	movs	r3, #1
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 856b 	beq.w	8008274 <_dtoa_r+0xbac>
 800779e:	4883      	ldr	r0, [pc, #524]	; (80079ac <_dtoa_r+0x2e4>)
 80077a0:	6018      	str	r0, [r3, #0]
 80077a2:	1e43      	subs	r3, r0, #1
 80077a4:	9301      	str	r3, [sp, #4]
 80077a6:	e7df      	b.n	8007768 <_dtoa_r+0xa0>
 80077a8:	ec4b ab10 	vmov	d0, sl, fp
 80077ac:	aa10      	add	r2, sp, #64	; 0x40
 80077ae:	a911      	add	r1, sp, #68	; 0x44
 80077b0:	4620      	mov	r0, r4
 80077b2:	f001 f8b9 	bl	8008928 <__d2b>
 80077b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077ba:	ee08 0a10 	vmov	s16, r0
 80077be:	2d00      	cmp	r5, #0
 80077c0:	f000 8084 	beq.w	80078cc <_dtoa_r+0x204>
 80077c4:	ee19 3a90 	vmov	r3, s19
 80077c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80077d0:	4656      	mov	r6, sl
 80077d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80077d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077de:	4b74      	ldr	r3, [pc, #464]	; (80079b0 <_dtoa_r+0x2e8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	4630      	mov	r0, r6
 80077e4:	4639      	mov	r1, r7
 80077e6:	f7f8 fd57 	bl	8000298 <__aeabi_dsub>
 80077ea:	a365      	add	r3, pc, #404	; (adr r3, 8007980 <_dtoa_r+0x2b8>)
 80077ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f0:	f7f8 ff0a 	bl	8000608 <__aeabi_dmul>
 80077f4:	a364      	add	r3, pc, #400	; (adr r3, 8007988 <_dtoa_r+0x2c0>)
 80077f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fa:	f7f8 fd4f 	bl	800029c <__adddf3>
 80077fe:	4606      	mov	r6, r0
 8007800:	4628      	mov	r0, r5
 8007802:	460f      	mov	r7, r1
 8007804:	f7f8 fe96 	bl	8000534 <__aeabi_i2d>
 8007808:	a361      	add	r3, pc, #388	; (adr r3, 8007990 <_dtoa_r+0x2c8>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fefb 	bl	8000608 <__aeabi_dmul>
 8007812:	4602      	mov	r2, r0
 8007814:	460b      	mov	r3, r1
 8007816:	4630      	mov	r0, r6
 8007818:	4639      	mov	r1, r7
 800781a:	f7f8 fd3f 	bl	800029c <__adddf3>
 800781e:	4606      	mov	r6, r0
 8007820:	460f      	mov	r7, r1
 8007822:	f7f9 f9a1 	bl	8000b68 <__aeabi_d2iz>
 8007826:	2200      	movs	r2, #0
 8007828:	9000      	str	r0, [sp, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	4630      	mov	r0, r6
 800782e:	4639      	mov	r1, r7
 8007830:	f7f9 f95c 	bl	8000aec <__aeabi_dcmplt>
 8007834:	b150      	cbz	r0, 800784c <_dtoa_r+0x184>
 8007836:	9800      	ldr	r0, [sp, #0]
 8007838:	f7f8 fe7c 	bl	8000534 <__aeabi_i2d>
 800783c:	4632      	mov	r2, r6
 800783e:	463b      	mov	r3, r7
 8007840:	f7f9 f94a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007844:	b910      	cbnz	r0, 800784c <_dtoa_r+0x184>
 8007846:	9b00      	ldr	r3, [sp, #0]
 8007848:	3b01      	subs	r3, #1
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	9b00      	ldr	r3, [sp, #0]
 800784e:	2b16      	cmp	r3, #22
 8007850:	d85a      	bhi.n	8007908 <_dtoa_r+0x240>
 8007852:	9a00      	ldr	r2, [sp, #0]
 8007854:	4b57      	ldr	r3, [pc, #348]	; (80079b4 <_dtoa_r+0x2ec>)
 8007856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	ec51 0b19 	vmov	r0, r1, d9
 8007862:	f7f9 f943 	bl	8000aec <__aeabi_dcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d050      	beq.n	800790c <_dtoa_r+0x244>
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	3b01      	subs	r3, #1
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	2300      	movs	r3, #0
 8007872:	930b      	str	r3, [sp, #44]	; 0x2c
 8007874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007876:	1b5d      	subs	r5, r3, r5
 8007878:	1e6b      	subs	r3, r5, #1
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	bf45      	ittet	mi
 800787e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007882:	9304      	strmi	r3, [sp, #16]
 8007884:	2300      	movpl	r3, #0
 8007886:	2300      	movmi	r3, #0
 8007888:	bf4c      	ite	mi
 800788a:	9305      	strmi	r3, [sp, #20]
 800788c:	9304      	strpl	r3, [sp, #16]
 800788e:	9b00      	ldr	r3, [sp, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	db3d      	blt.n	8007910 <_dtoa_r+0x248>
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	9a00      	ldr	r2, [sp, #0]
 8007898:	920a      	str	r2, [sp, #40]	; 0x28
 800789a:	4413      	add	r3, r2
 800789c:	9305      	str	r3, [sp, #20]
 800789e:	2300      	movs	r3, #0
 80078a0:	9307      	str	r3, [sp, #28]
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	f200 8089 	bhi.w	80079bc <_dtoa_r+0x2f4>
 80078aa:	2b05      	cmp	r3, #5
 80078ac:	bfc4      	itt	gt
 80078ae:	3b04      	subgt	r3, #4
 80078b0:	9306      	strgt	r3, [sp, #24]
 80078b2:	9b06      	ldr	r3, [sp, #24]
 80078b4:	f1a3 0302 	sub.w	r3, r3, #2
 80078b8:	bfcc      	ite	gt
 80078ba:	2500      	movgt	r5, #0
 80078bc:	2501      	movle	r5, #1
 80078be:	2b03      	cmp	r3, #3
 80078c0:	f200 8087 	bhi.w	80079d2 <_dtoa_r+0x30a>
 80078c4:	e8df f003 	tbb	[pc, r3]
 80078c8:	59383a2d 	.word	0x59383a2d
 80078cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80078d0:	441d      	add	r5, r3
 80078d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	bfc1      	itttt	gt
 80078da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078e2:	fa0b f303 	lslgt.w	r3, fp, r3
 80078e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078ea:	bfda      	itte	le
 80078ec:	f1c3 0320 	rsble	r3, r3, #32
 80078f0:	fa06 f003 	lslle.w	r0, r6, r3
 80078f4:	4318      	orrgt	r0, r3
 80078f6:	f7f8 fe0d 	bl	8000514 <__aeabi_ui2d>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4606      	mov	r6, r0
 80078fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007902:	3d01      	subs	r5, #1
 8007904:	930e      	str	r3, [sp, #56]	; 0x38
 8007906:	e76a      	b.n	80077de <_dtoa_r+0x116>
 8007908:	2301      	movs	r3, #1
 800790a:	e7b2      	b.n	8007872 <_dtoa_r+0x1aa>
 800790c:	900b      	str	r0, [sp, #44]	; 0x2c
 800790e:	e7b1      	b.n	8007874 <_dtoa_r+0x1ac>
 8007910:	9b04      	ldr	r3, [sp, #16]
 8007912:	9a00      	ldr	r2, [sp, #0]
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	9304      	str	r3, [sp, #16]
 8007918:	4253      	negs	r3, r2
 800791a:	9307      	str	r3, [sp, #28]
 800791c:	2300      	movs	r3, #0
 800791e:	930a      	str	r3, [sp, #40]	; 0x28
 8007920:	e7bf      	b.n	80078a2 <_dtoa_r+0x1da>
 8007922:	2300      	movs	r3, #0
 8007924:	9308      	str	r3, [sp, #32]
 8007926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	dc55      	bgt.n	80079d8 <_dtoa_r+0x310>
 800792c:	2301      	movs	r3, #1
 800792e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007932:	461a      	mov	r2, r3
 8007934:	9209      	str	r2, [sp, #36]	; 0x24
 8007936:	e00c      	b.n	8007952 <_dtoa_r+0x28a>
 8007938:	2301      	movs	r3, #1
 800793a:	e7f3      	b.n	8007924 <_dtoa_r+0x25c>
 800793c:	2300      	movs	r3, #0
 800793e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007940:	9308      	str	r3, [sp, #32]
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	4413      	add	r3, r2
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	3301      	adds	r3, #1
 800794a:	2b01      	cmp	r3, #1
 800794c:	9303      	str	r3, [sp, #12]
 800794e:	bfb8      	it	lt
 8007950:	2301      	movlt	r3, #1
 8007952:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007954:	2200      	movs	r2, #0
 8007956:	6042      	str	r2, [r0, #4]
 8007958:	2204      	movs	r2, #4
 800795a:	f102 0614 	add.w	r6, r2, #20
 800795e:	429e      	cmp	r6, r3
 8007960:	6841      	ldr	r1, [r0, #4]
 8007962:	d93d      	bls.n	80079e0 <_dtoa_r+0x318>
 8007964:	4620      	mov	r0, r4
 8007966:	f000 fcb7 	bl	80082d8 <_Balloc>
 800796a:	9001      	str	r0, [sp, #4]
 800796c:	2800      	cmp	r0, #0
 800796e:	d13b      	bne.n	80079e8 <_dtoa_r+0x320>
 8007970:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <_dtoa_r+0x2f0>)
 8007972:	4602      	mov	r2, r0
 8007974:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007978:	e6c0      	b.n	80076fc <_dtoa_r+0x34>
 800797a:	2301      	movs	r3, #1
 800797c:	e7df      	b.n	800793e <_dtoa_r+0x276>
 800797e:	bf00      	nop
 8007980:	636f4361 	.word	0x636f4361
 8007984:	3fd287a7 	.word	0x3fd287a7
 8007988:	8b60c8b3 	.word	0x8b60c8b3
 800798c:	3fc68a28 	.word	0x3fc68a28
 8007990:	509f79fb 	.word	0x509f79fb
 8007994:	3fd34413 	.word	0x3fd34413
 8007998:	0800b569 	.word	0x0800b569
 800799c:	0800b580 	.word	0x0800b580
 80079a0:	7ff00000 	.word	0x7ff00000
 80079a4:	0800b565 	.word	0x0800b565
 80079a8:	0800b55c 	.word	0x0800b55c
 80079ac:	0800b539 	.word	0x0800b539
 80079b0:	3ff80000 	.word	0x3ff80000
 80079b4:	0800b670 	.word	0x0800b670
 80079b8:	0800b5db 	.word	0x0800b5db
 80079bc:	2501      	movs	r5, #1
 80079be:	2300      	movs	r3, #0
 80079c0:	9306      	str	r3, [sp, #24]
 80079c2:	9508      	str	r5, [sp, #32]
 80079c4:	f04f 33ff 	mov.w	r3, #4294967295
 80079c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079cc:	2200      	movs	r2, #0
 80079ce:	2312      	movs	r3, #18
 80079d0:	e7b0      	b.n	8007934 <_dtoa_r+0x26c>
 80079d2:	2301      	movs	r3, #1
 80079d4:	9308      	str	r3, [sp, #32]
 80079d6:	e7f5      	b.n	80079c4 <_dtoa_r+0x2fc>
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079de:	e7b8      	b.n	8007952 <_dtoa_r+0x28a>
 80079e0:	3101      	adds	r1, #1
 80079e2:	6041      	str	r1, [r0, #4]
 80079e4:	0052      	lsls	r2, r2, #1
 80079e6:	e7b8      	b.n	800795a <_dtoa_r+0x292>
 80079e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ea:	9a01      	ldr	r2, [sp, #4]
 80079ec:	601a      	str	r2, [r3, #0]
 80079ee:	9b03      	ldr	r3, [sp, #12]
 80079f0:	2b0e      	cmp	r3, #14
 80079f2:	f200 809d 	bhi.w	8007b30 <_dtoa_r+0x468>
 80079f6:	2d00      	cmp	r5, #0
 80079f8:	f000 809a 	beq.w	8007b30 <_dtoa_r+0x468>
 80079fc:	9b00      	ldr	r3, [sp, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	dd32      	ble.n	8007a68 <_dtoa_r+0x3a0>
 8007a02:	4ab7      	ldr	r2, [pc, #732]	; (8007ce0 <_dtoa_r+0x618>)
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a10:	9b00      	ldr	r3, [sp, #0]
 8007a12:	05d8      	lsls	r0, r3, #23
 8007a14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a18:	d516      	bpl.n	8007a48 <_dtoa_r+0x380>
 8007a1a:	4bb2      	ldr	r3, [pc, #712]	; (8007ce4 <_dtoa_r+0x61c>)
 8007a1c:	ec51 0b19 	vmov	r0, r1, d9
 8007a20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a24:	f7f8 ff1a 	bl	800085c <__aeabi_ddiv>
 8007a28:	f007 070f 	and.w	r7, r7, #15
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	468b      	mov	fp, r1
 8007a30:	2503      	movs	r5, #3
 8007a32:	4eac      	ldr	r6, [pc, #688]	; (8007ce4 <_dtoa_r+0x61c>)
 8007a34:	b957      	cbnz	r7, 8007a4c <_dtoa_r+0x384>
 8007a36:	4642      	mov	r2, r8
 8007a38:	464b      	mov	r3, r9
 8007a3a:	4650      	mov	r0, sl
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	f7f8 ff0d 	bl	800085c <__aeabi_ddiv>
 8007a42:	4682      	mov	sl, r0
 8007a44:	468b      	mov	fp, r1
 8007a46:	e028      	b.n	8007a9a <_dtoa_r+0x3d2>
 8007a48:	2502      	movs	r5, #2
 8007a4a:	e7f2      	b.n	8007a32 <_dtoa_r+0x36a>
 8007a4c:	07f9      	lsls	r1, r7, #31
 8007a4e:	d508      	bpl.n	8007a62 <_dtoa_r+0x39a>
 8007a50:	4640      	mov	r0, r8
 8007a52:	4649      	mov	r1, r9
 8007a54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a58:	f7f8 fdd6 	bl	8000608 <__aeabi_dmul>
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	107f      	asrs	r7, r7, #1
 8007a64:	3608      	adds	r6, #8
 8007a66:	e7e5      	b.n	8007a34 <_dtoa_r+0x36c>
 8007a68:	f000 809b 	beq.w	8007ba2 <_dtoa_r+0x4da>
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	4f9d      	ldr	r7, [pc, #628]	; (8007ce4 <_dtoa_r+0x61c>)
 8007a70:	425e      	negs	r6, r3
 8007a72:	4b9b      	ldr	r3, [pc, #620]	; (8007ce0 <_dtoa_r+0x618>)
 8007a74:	f006 020f 	and.w	r2, r6, #15
 8007a78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a80:	ec51 0b19 	vmov	r0, r1, d9
 8007a84:	f7f8 fdc0 	bl	8000608 <__aeabi_dmul>
 8007a88:	1136      	asrs	r6, r6, #4
 8007a8a:	4682      	mov	sl, r0
 8007a8c:	468b      	mov	fp, r1
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2502      	movs	r5, #2
 8007a92:	2e00      	cmp	r6, #0
 8007a94:	d17a      	bne.n	8007b8c <_dtoa_r+0x4c4>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1d3      	bne.n	8007a42 <_dtoa_r+0x37a>
 8007a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8082 	beq.w	8007ba6 <_dtoa_r+0x4de>
 8007aa2:	4b91      	ldr	r3, [pc, #580]	; (8007ce8 <_dtoa_r+0x620>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4650      	mov	r0, sl
 8007aa8:	4659      	mov	r1, fp
 8007aaa:	f7f9 f81f 	bl	8000aec <__aeabi_dcmplt>
 8007aae:	2800      	cmp	r0, #0
 8007ab0:	d079      	beq.n	8007ba6 <_dtoa_r+0x4de>
 8007ab2:	9b03      	ldr	r3, [sp, #12]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d076      	beq.n	8007ba6 <_dtoa_r+0x4de>
 8007ab8:	9b02      	ldr	r3, [sp, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	dd36      	ble.n	8007b2c <_dtoa_r+0x464>
 8007abe:	9b00      	ldr	r3, [sp, #0]
 8007ac0:	4650      	mov	r0, sl
 8007ac2:	4659      	mov	r1, fp
 8007ac4:	1e5f      	subs	r7, r3, #1
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	4b88      	ldr	r3, [pc, #544]	; (8007cec <_dtoa_r+0x624>)
 8007aca:	f7f8 fd9d 	bl	8000608 <__aeabi_dmul>
 8007ace:	9e02      	ldr	r6, [sp, #8]
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	468b      	mov	fp, r1
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	f7f8 fd2c 	bl	8000534 <__aeabi_i2d>
 8007adc:	4652      	mov	r2, sl
 8007ade:	465b      	mov	r3, fp
 8007ae0:	f7f8 fd92 	bl	8000608 <__aeabi_dmul>
 8007ae4:	4b82      	ldr	r3, [pc, #520]	; (8007cf0 <_dtoa_r+0x628>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f7f8 fbd8 	bl	800029c <__adddf3>
 8007aec:	46d0      	mov	r8, sl
 8007aee:	46d9      	mov	r9, fp
 8007af0:	4682      	mov	sl, r0
 8007af2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007af6:	2e00      	cmp	r6, #0
 8007af8:	d158      	bne.n	8007bac <_dtoa_r+0x4e4>
 8007afa:	4b7e      	ldr	r3, [pc, #504]	; (8007cf4 <_dtoa_r+0x62c>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f8 fbc9 	bl	8000298 <__aeabi_dsub>
 8007b06:	4652      	mov	r2, sl
 8007b08:	465b      	mov	r3, fp
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	f7f9 f80b 	bl	8000b28 <__aeabi_dcmpgt>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f040 8295 	bne.w	8008042 <_dtoa_r+0x97a>
 8007b18:	4652      	mov	r2, sl
 8007b1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b1e:	4640      	mov	r0, r8
 8007b20:	4649      	mov	r1, r9
 8007b22:	f7f8 ffe3 	bl	8000aec <__aeabi_dcmplt>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	f040 8289 	bne.w	800803e <_dtoa_r+0x976>
 8007b2c:	ec5b ab19 	vmov	sl, fp, d9
 8007b30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f2c0 8148 	blt.w	8007dc8 <_dtoa_r+0x700>
 8007b38:	9a00      	ldr	r2, [sp, #0]
 8007b3a:	2a0e      	cmp	r2, #14
 8007b3c:	f300 8144 	bgt.w	8007dc8 <_dtoa_r+0x700>
 8007b40:	4b67      	ldr	r3, [pc, #412]	; (8007ce0 <_dtoa_r+0x618>)
 8007b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f280 80d5 	bge.w	8007cfc <_dtoa_r+0x634>
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f300 80d1 	bgt.w	8007cfc <_dtoa_r+0x634>
 8007b5a:	f040 826f 	bne.w	800803c <_dtoa_r+0x974>
 8007b5e:	4b65      	ldr	r3, [pc, #404]	; (8007cf4 <_dtoa_r+0x62c>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	4640      	mov	r0, r8
 8007b64:	4649      	mov	r1, r9
 8007b66:	f7f8 fd4f 	bl	8000608 <__aeabi_dmul>
 8007b6a:	4652      	mov	r2, sl
 8007b6c:	465b      	mov	r3, fp
 8007b6e:	f7f8 ffd1 	bl	8000b14 <__aeabi_dcmpge>
 8007b72:	9e03      	ldr	r6, [sp, #12]
 8007b74:	4637      	mov	r7, r6
 8007b76:	2800      	cmp	r0, #0
 8007b78:	f040 8245 	bne.w	8008006 <_dtoa_r+0x93e>
 8007b7c:	9d01      	ldr	r5, [sp, #4]
 8007b7e:	2331      	movs	r3, #49	; 0x31
 8007b80:	f805 3b01 	strb.w	r3, [r5], #1
 8007b84:	9b00      	ldr	r3, [sp, #0]
 8007b86:	3301      	adds	r3, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	e240      	b.n	800800e <_dtoa_r+0x946>
 8007b8c:	07f2      	lsls	r2, r6, #31
 8007b8e:	d505      	bpl.n	8007b9c <_dtoa_r+0x4d4>
 8007b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b94:	f7f8 fd38 	bl	8000608 <__aeabi_dmul>
 8007b98:	3501      	adds	r5, #1
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	1076      	asrs	r6, r6, #1
 8007b9e:	3708      	adds	r7, #8
 8007ba0:	e777      	b.n	8007a92 <_dtoa_r+0x3ca>
 8007ba2:	2502      	movs	r5, #2
 8007ba4:	e779      	b.n	8007a9a <_dtoa_r+0x3d2>
 8007ba6:	9f00      	ldr	r7, [sp, #0]
 8007ba8:	9e03      	ldr	r6, [sp, #12]
 8007baa:	e794      	b.n	8007ad6 <_dtoa_r+0x40e>
 8007bac:	9901      	ldr	r1, [sp, #4]
 8007bae:	4b4c      	ldr	r3, [pc, #304]	; (8007ce0 <_dtoa_r+0x618>)
 8007bb0:	4431      	add	r1, r6
 8007bb2:	910d      	str	r1, [sp, #52]	; 0x34
 8007bb4:	9908      	ldr	r1, [sp, #32]
 8007bb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d043      	beq.n	8007c4a <_dtoa_r+0x582>
 8007bc2:	494d      	ldr	r1, [pc, #308]	; (8007cf8 <_dtoa_r+0x630>)
 8007bc4:	2000      	movs	r0, #0
 8007bc6:	f7f8 fe49 	bl	800085c <__aeabi_ddiv>
 8007bca:	4652      	mov	r2, sl
 8007bcc:	465b      	mov	r3, fp
 8007bce:	f7f8 fb63 	bl	8000298 <__aeabi_dsub>
 8007bd2:	9d01      	ldr	r5, [sp, #4]
 8007bd4:	4682      	mov	sl, r0
 8007bd6:	468b      	mov	fp, r1
 8007bd8:	4649      	mov	r1, r9
 8007bda:	4640      	mov	r0, r8
 8007bdc:	f7f8 ffc4 	bl	8000b68 <__aeabi_d2iz>
 8007be0:	4606      	mov	r6, r0
 8007be2:	f7f8 fca7 	bl	8000534 <__aeabi_i2d>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4640      	mov	r0, r8
 8007bec:	4649      	mov	r1, r9
 8007bee:	f7f8 fb53 	bl	8000298 <__aeabi_dsub>
 8007bf2:	3630      	adds	r6, #48	; 0x30
 8007bf4:	f805 6b01 	strb.w	r6, [r5], #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	465b      	mov	r3, fp
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	f7f8 ff74 	bl	8000aec <__aeabi_dcmplt>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d163      	bne.n	8007cd0 <_dtoa_r+0x608>
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	4936      	ldr	r1, [pc, #216]	; (8007ce8 <_dtoa_r+0x620>)
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f7f8 fb42 	bl	8000298 <__aeabi_dsub>
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	f7f8 ff68 	bl	8000aec <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 80b5 	bne.w	8007d8c <_dtoa_r+0x6c4>
 8007c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c24:	429d      	cmp	r5, r3
 8007c26:	d081      	beq.n	8007b2c <_dtoa_r+0x464>
 8007c28:	4b30      	ldr	r3, [pc, #192]	; (8007cec <_dtoa_r+0x624>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	4659      	mov	r1, fp
 8007c30:	f7f8 fcea 	bl	8000608 <__aeabi_dmul>
 8007c34:	4b2d      	ldr	r3, [pc, #180]	; (8007cec <_dtoa_r+0x624>)
 8007c36:	4682      	mov	sl, r0
 8007c38:	468b      	mov	fp, r1
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f7f8 fce2 	bl	8000608 <__aeabi_dmul>
 8007c44:	4680      	mov	r8, r0
 8007c46:	4689      	mov	r9, r1
 8007c48:	e7c6      	b.n	8007bd8 <_dtoa_r+0x510>
 8007c4a:	4650      	mov	r0, sl
 8007c4c:	4659      	mov	r1, fp
 8007c4e:	f7f8 fcdb 	bl	8000608 <__aeabi_dmul>
 8007c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c54:	9d01      	ldr	r5, [sp, #4]
 8007c56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c58:	4682      	mov	sl, r0
 8007c5a:	468b      	mov	fp, r1
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7f8 ff82 	bl	8000b68 <__aeabi_d2iz>
 8007c64:	4606      	mov	r6, r0
 8007c66:	f7f8 fc65 	bl	8000534 <__aeabi_i2d>
 8007c6a:	3630      	adds	r6, #48	; 0x30
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4640      	mov	r0, r8
 8007c72:	4649      	mov	r1, r9
 8007c74:	f7f8 fb10 	bl	8000298 <__aeabi_dsub>
 8007c78:	f805 6b01 	strb.w	r6, [r5], #1
 8007c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c7e:	429d      	cmp	r5, r3
 8007c80:	4680      	mov	r8, r0
 8007c82:	4689      	mov	r9, r1
 8007c84:	f04f 0200 	mov.w	r2, #0
 8007c88:	d124      	bne.n	8007cd4 <_dtoa_r+0x60c>
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	; (8007cf8 <_dtoa_r+0x630>)
 8007c8c:	4650      	mov	r0, sl
 8007c8e:	4659      	mov	r1, fp
 8007c90:	f7f8 fb04 	bl	800029c <__adddf3>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4640      	mov	r0, r8
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	f7f8 ff44 	bl	8000b28 <__aeabi_dcmpgt>
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d173      	bne.n	8007d8c <_dtoa_r+0x6c4>
 8007ca4:	4652      	mov	r2, sl
 8007ca6:	465b      	mov	r3, fp
 8007ca8:	4913      	ldr	r1, [pc, #76]	; (8007cf8 <_dtoa_r+0x630>)
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7f8 faf4 	bl	8000298 <__aeabi_dsub>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	4649      	mov	r1, r9
 8007cb8:	f7f8 ff18 	bl	8000aec <__aeabi_dcmplt>
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f43f af35 	beq.w	8007b2c <_dtoa_r+0x464>
 8007cc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cc4:	1e6b      	subs	r3, r5, #1
 8007cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ccc:	2b30      	cmp	r3, #48	; 0x30
 8007cce:	d0f8      	beq.n	8007cc2 <_dtoa_r+0x5fa>
 8007cd0:	9700      	str	r7, [sp, #0]
 8007cd2:	e049      	b.n	8007d68 <_dtoa_r+0x6a0>
 8007cd4:	4b05      	ldr	r3, [pc, #20]	; (8007cec <_dtoa_r+0x624>)
 8007cd6:	f7f8 fc97 	bl	8000608 <__aeabi_dmul>
 8007cda:	4680      	mov	r8, r0
 8007cdc:	4689      	mov	r9, r1
 8007cde:	e7bd      	b.n	8007c5c <_dtoa_r+0x594>
 8007ce0:	0800b670 	.word	0x0800b670
 8007ce4:	0800b648 	.word	0x0800b648
 8007ce8:	3ff00000 	.word	0x3ff00000
 8007cec:	40240000 	.word	0x40240000
 8007cf0:	401c0000 	.word	0x401c0000
 8007cf4:	40140000 	.word	0x40140000
 8007cf8:	3fe00000 	.word	0x3fe00000
 8007cfc:	9d01      	ldr	r5, [sp, #4]
 8007cfe:	4656      	mov	r6, sl
 8007d00:	465f      	mov	r7, fp
 8007d02:	4642      	mov	r2, r8
 8007d04:	464b      	mov	r3, r9
 8007d06:	4630      	mov	r0, r6
 8007d08:	4639      	mov	r1, r7
 8007d0a:	f7f8 fda7 	bl	800085c <__aeabi_ddiv>
 8007d0e:	f7f8 ff2b 	bl	8000b68 <__aeabi_d2iz>
 8007d12:	4682      	mov	sl, r0
 8007d14:	f7f8 fc0e 	bl	8000534 <__aeabi_i2d>
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	f7f8 fc74 	bl	8000608 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d2c:	f7f8 fab4 	bl	8000298 <__aeabi_dsub>
 8007d30:	f805 6b01 	strb.w	r6, [r5], #1
 8007d34:	9e01      	ldr	r6, [sp, #4]
 8007d36:	9f03      	ldr	r7, [sp, #12]
 8007d38:	1bae      	subs	r6, r5, r6
 8007d3a:	42b7      	cmp	r7, r6
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	d135      	bne.n	8007dae <_dtoa_r+0x6e6>
 8007d42:	f7f8 faab 	bl	800029c <__adddf3>
 8007d46:	4642      	mov	r2, r8
 8007d48:	464b      	mov	r3, r9
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460f      	mov	r7, r1
 8007d4e:	f7f8 feeb 	bl	8000b28 <__aeabi_dcmpgt>
 8007d52:	b9d0      	cbnz	r0, 8007d8a <_dtoa_r+0x6c2>
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	4630      	mov	r0, r6
 8007d5a:	4639      	mov	r1, r7
 8007d5c:	f7f8 febc 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d60:	b110      	cbz	r0, 8007d68 <_dtoa_r+0x6a0>
 8007d62:	f01a 0f01 	tst.w	sl, #1
 8007d66:	d110      	bne.n	8007d8a <_dtoa_r+0x6c2>
 8007d68:	4620      	mov	r0, r4
 8007d6a:	ee18 1a10 	vmov	r1, s16
 8007d6e:	f000 faf3 	bl	8008358 <_Bfree>
 8007d72:	2300      	movs	r3, #0
 8007d74:	9800      	ldr	r0, [sp, #0]
 8007d76:	702b      	strb	r3, [r5, #0]
 8007d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	6018      	str	r0, [r3, #0]
 8007d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f43f acf1 	beq.w	8007768 <_dtoa_r+0xa0>
 8007d86:	601d      	str	r5, [r3, #0]
 8007d88:	e4ee      	b.n	8007768 <_dtoa_r+0xa0>
 8007d8a:	9f00      	ldr	r7, [sp, #0]
 8007d8c:	462b      	mov	r3, r5
 8007d8e:	461d      	mov	r5, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a39      	cmp	r2, #57	; 0x39
 8007d96:	d106      	bne.n	8007da6 <_dtoa_r+0x6de>
 8007d98:	9a01      	ldr	r2, [sp, #4]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d1f7      	bne.n	8007d8e <_dtoa_r+0x6c6>
 8007d9e:	9901      	ldr	r1, [sp, #4]
 8007da0:	2230      	movs	r2, #48	; 0x30
 8007da2:	3701      	adds	r7, #1
 8007da4:	700a      	strb	r2, [r1, #0]
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	3201      	adds	r2, #1
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	e790      	b.n	8007cd0 <_dtoa_r+0x608>
 8007dae:	4ba6      	ldr	r3, [pc, #664]	; (8008048 <_dtoa_r+0x980>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	f7f8 fc29 	bl	8000608 <__aeabi_dmul>
 8007db6:	2200      	movs	r2, #0
 8007db8:	2300      	movs	r3, #0
 8007dba:	4606      	mov	r6, r0
 8007dbc:	460f      	mov	r7, r1
 8007dbe:	f7f8 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d09d      	beq.n	8007d02 <_dtoa_r+0x63a>
 8007dc6:	e7cf      	b.n	8007d68 <_dtoa_r+0x6a0>
 8007dc8:	9a08      	ldr	r2, [sp, #32]
 8007dca:	2a00      	cmp	r2, #0
 8007dcc:	f000 80d7 	beq.w	8007f7e <_dtoa_r+0x8b6>
 8007dd0:	9a06      	ldr	r2, [sp, #24]
 8007dd2:	2a01      	cmp	r2, #1
 8007dd4:	f300 80ba 	bgt.w	8007f4c <_dtoa_r+0x884>
 8007dd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	f000 80b2 	beq.w	8007f44 <_dtoa_r+0x87c>
 8007de0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007de4:	9e07      	ldr	r6, [sp, #28]
 8007de6:	9d04      	ldr	r5, [sp, #16]
 8007de8:	9a04      	ldr	r2, [sp, #16]
 8007dea:	441a      	add	r2, r3
 8007dec:	9204      	str	r2, [sp, #16]
 8007dee:	9a05      	ldr	r2, [sp, #20]
 8007df0:	2101      	movs	r1, #1
 8007df2:	441a      	add	r2, r3
 8007df4:	4620      	mov	r0, r4
 8007df6:	9205      	str	r2, [sp, #20]
 8007df8:	f000 fb66 	bl	80084c8 <__i2b>
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	2d00      	cmp	r5, #0
 8007e00:	dd0c      	ble.n	8007e1c <_dtoa_r+0x754>
 8007e02:	9b05      	ldr	r3, [sp, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	dd09      	ble.n	8007e1c <_dtoa_r+0x754>
 8007e08:	42ab      	cmp	r3, r5
 8007e0a:	9a04      	ldr	r2, [sp, #16]
 8007e0c:	bfa8      	it	ge
 8007e0e:	462b      	movge	r3, r5
 8007e10:	1ad2      	subs	r2, r2, r3
 8007e12:	9204      	str	r2, [sp, #16]
 8007e14:	9a05      	ldr	r2, [sp, #20]
 8007e16:	1aed      	subs	r5, r5, r3
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	b31b      	cbz	r3, 8007e68 <_dtoa_r+0x7a0>
 8007e20:	9b08      	ldr	r3, [sp, #32]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 80af 	beq.w	8007f86 <_dtoa_r+0x8be>
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	dd13      	ble.n	8007e54 <_dtoa_r+0x78c>
 8007e2c:	4639      	mov	r1, r7
 8007e2e:	4632      	mov	r2, r6
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 fc09 	bl	8008648 <__pow5mult>
 8007e36:	ee18 2a10 	vmov	r2, s16
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	4607      	mov	r7, r0
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 fb58 	bl	80084f4 <__multiply>
 8007e44:	ee18 1a10 	vmov	r1, s16
 8007e48:	4680      	mov	r8, r0
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 fa84 	bl	8008358 <_Bfree>
 8007e50:	ee08 8a10 	vmov	s16, r8
 8007e54:	9b07      	ldr	r3, [sp, #28]
 8007e56:	1b9a      	subs	r2, r3, r6
 8007e58:	d006      	beq.n	8007e68 <_dtoa_r+0x7a0>
 8007e5a:	ee18 1a10 	vmov	r1, s16
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 fbf2 	bl	8008648 <__pow5mult>
 8007e64:	ee08 0a10 	vmov	s16, r0
 8007e68:	2101      	movs	r1, #1
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fb2c 	bl	80084c8 <__i2b>
 8007e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	4606      	mov	r6, r0
 8007e76:	f340 8088 	ble.w	8007f8a <_dtoa_r+0x8c2>
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4601      	mov	r1, r0
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 fbe2 	bl	8008648 <__pow5mult>
 8007e84:	9b06      	ldr	r3, [sp, #24]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	4606      	mov	r6, r0
 8007e8a:	f340 8081 	ble.w	8007f90 <_dtoa_r+0x8c8>
 8007e8e:	f04f 0800 	mov.w	r8, #0
 8007e92:	6933      	ldr	r3, [r6, #16]
 8007e94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e98:	6918      	ldr	r0, [r3, #16]
 8007e9a:	f000 fac5 	bl	8008428 <__hi0bits>
 8007e9e:	f1c0 0020 	rsb	r0, r0, #32
 8007ea2:	9b05      	ldr	r3, [sp, #20]
 8007ea4:	4418      	add	r0, r3
 8007ea6:	f010 001f 	ands.w	r0, r0, #31
 8007eaa:	f000 8092 	beq.w	8007fd2 <_dtoa_r+0x90a>
 8007eae:	f1c0 0320 	rsb	r3, r0, #32
 8007eb2:	2b04      	cmp	r3, #4
 8007eb4:	f340 808a 	ble.w	8007fcc <_dtoa_r+0x904>
 8007eb8:	f1c0 001c 	rsb	r0, r0, #28
 8007ebc:	9b04      	ldr	r3, [sp, #16]
 8007ebe:	4403      	add	r3, r0
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	9b05      	ldr	r3, [sp, #20]
 8007ec4:	4403      	add	r3, r0
 8007ec6:	4405      	add	r5, r0
 8007ec8:	9305      	str	r3, [sp, #20]
 8007eca:	9b04      	ldr	r3, [sp, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dd07      	ble.n	8007ee0 <_dtoa_r+0x818>
 8007ed0:	ee18 1a10 	vmov	r1, s16
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fc10 	bl	80086fc <__lshift>
 8007edc:	ee08 0a10 	vmov	s16, r0
 8007ee0:	9b05      	ldr	r3, [sp, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	dd05      	ble.n	8007ef2 <_dtoa_r+0x82a>
 8007ee6:	4631      	mov	r1, r6
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 fc06 	bl	80086fc <__lshift>
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d06e      	beq.n	8007fd6 <_dtoa_r+0x90e>
 8007ef8:	ee18 0a10 	vmov	r0, s16
 8007efc:	4631      	mov	r1, r6
 8007efe:	f000 fc6d 	bl	80087dc <__mcmp>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	da67      	bge.n	8007fd6 <_dtoa_r+0x90e>
 8007f06:	9b00      	ldr	r3, [sp, #0]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	ee18 1a10 	vmov	r1, s16
 8007f0e:	9300      	str	r3, [sp, #0]
 8007f10:	220a      	movs	r2, #10
 8007f12:	2300      	movs	r3, #0
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 fa41 	bl	800839c <__multadd>
 8007f1a:	9b08      	ldr	r3, [sp, #32]
 8007f1c:	ee08 0a10 	vmov	s16, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 81b1 	beq.w	8008288 <_dtoa_r+0xbc0>
 8007f26:	2300      	movs	r3, #0
 8007f28:	4639      	mov	r1, r7
 8007f2a:	220a      	movs	r2, #10
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f000 fa35 	bl	800839c <__multadd>
 8007f32:	9b02      	ldr	r3, [sp, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	4607      	mov	r7, r0
 8007f38:	f300 808e 	bgt.w	8008058 <_dtoa_r+0x990>
 8007f3c:	9b06      	ldr	r3, [sp, #24]
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	dc51      	bgt.n	8007fe6 <_dtoa_r+0x91e>
 8007f42:	e089      	b.n	8008058 <_dtoa_r+0x990>
 8007f44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f4a:	e74b      	b.n	8007de4 <_dtoa_r+0x71c>
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	1e5e      	subs	r6, r3, #1
 8007f50:	9b07      	ldr	r3, [sp, #28]
 8007f52:	42b3      	cmp	r3, r6
 8007f54:	bfbf      	itttt	lt
 8007f56:	9b07      	ldrlt	r3, [sp, #28]
 8007f58:	9607      	strlt	r6, [sp, #28]
 8007f5a:	1af2      	sublt	r2, r6, r3
 8007f5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f5e:	bfb6      	itet	lt
 8007f60:	189b      	addlt	r3, r3, r2
 8007f62:	1b9e      	subge	r6, r3, r6
 8007f64:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f66:	9b03      	ldr	r3, [sp, #12]
 8007f68:	bfb8      	it	lt
 8007f6a:	2600      	movlt	r6, #0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	bfb7      	itett	lt
 8007f70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f78:	1a9d      	sublt	r5, r3, r2
 8007f7a:	2300      	movlt	r3, #0
 8007f7c:	e734      	b.n	8007de8 <_dtoa_r+0x720>
 8007f7e:	9e07      	ldr	r6, [sp, #28]
 8007f80:	9d04      	ldr	r5, [sp, #16]
 8007f82:	9f08      	ldr	r7, [sp, #32]
 8007f84:	e73b      	b.n	8007dfe <_dtoa_r+0x736>
 8007f86:	9a07      	ldr	r2, [sp, #28]
 8007f88:	e767      	b.n	8007e5a <_dtoa_r+0x792>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	dc18      	bgt.n	8007fc2 <_dtoa_r+0x8fa>
 8007f90:	f1ba 0f00 	cmp.w	sl, #0
 8007f94:	d115      	bne.n	8007fc2 <_dtoa_r+0x8fa>
 8007f96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f9a:	b993      	cbnz	r3, 8007fc2 <_dtoa_r+0x8fa>
 8007f9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fa0:	0d1b      	lsrs	r3, r3, #20
 8007fa2:	051b      	lsls	r3, r3, #20
 8007fa4:	b183      	cbz	r3, 8007fc8 <_dtoa_r+0x900>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	9304      	str	r3, [sp, #16]
 8007fac:	9b05      	ldr	r3, [sp, #20]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	f04f 0801 	mov.w	r8, #1
 8007fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f47f af6a 	bne.w	8007e92 <_dtoa_r+0x7ca>
 8007fbe:	2001      	movs	r0, #1
 8007fc0:	e76f      	b.n	8007ea2 <_dtoa_r+0x7da>
 8007fc2:	f04f 0800 	mov.w	r8, #0
 8007fc6:	e7f6      	b.n	8007fb6 <_dtoa_r+0x8ee>
 8007fc8:	4698      	mov	r8, r3
 8007fca:	e7f4      	b.n	8007fb6 <_dtoa_r+0x8ee>
 8007fcc:	f43f af7d 	beq.w	8007eca <_dtoa_r+0x802>
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	301c      	adds	r0, #28
 8007fd4:	e772      	b.n	8007ebc <_dtoa_r+0x7f4>
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc37      	bgt.n	800804c <_dtoa_r+0x984>
 8007fdc:	9b06      	ldr	r3, [sp, #24]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	dd34      	ble.n	800804c <_dtoa_r+0x984>
 8007fe2:	9b03      	ldr	r3, [sp, #12]
 8007fe4:	9302      	str	r3, [sp, #8]
 8007fe6:	9b02      	ldr	r3, [sp, #8]
 8007fe8:	b96b      	cbnz	r3, 8008006 <_dtoa_r+0x93e>
 8007fea:	4631      	mov	r1, r6
 8007fec:	2205      	movs	r2, #5
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 f9d4 	bl	800839c <__multadd>
 8007ff4:	4601      	mov	r1, r0
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	ee18 0a10 	vmov	r0, s16
 8007ffc:	f000 fbee 	bl	80087dc <__mcmp>
 8008000:	2800      	cmp	r0, #0
 8008002:	f73f adbb 	bgt.w	8007b7c <_dtoa_r+0x4b4>
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	9d01      	ldr	r5, [sp, #4]
 800800a:	43db      	mvns	r3, r3
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	4631      	mov	r1, r6
 8008014:	4620      	mov	r0, r4
 8008016:	f000 f99f 	bl	8008358 <_Bfree>
 800801a:	2f00      	cmp	r7, #0
 800801c:	f43f aea4 	beq.w	8007d68 <_dtoa_r+0x6a0>
 8008020:	f1b8 0f00 	cmp.w	r8, #0
 8008024:	d005      	beq.n	8008032 <_dtoa_r+0x96a>
 8008026:	45b8      	cmp	r8, r7
 8008028:	d003      	beq.n	8008032 <_dtoa_r+0x96a>
 800802a:	4641      	mov	r1, r8
 800802c:	4620      	mov	r0, r4
 800802e:	f000 f993 	bl	8008358 <_Bfree>
 8008032:	4639      	mov	r1, r7
 8008034:	4620      	mov	r0, r4
 8008036:	f000 f98f 	bl	8008358 <_Bfree>
 800803a:	e695      	b.n	8007d68 <_dtoa_r+0x6a0>
 800803c:	2600      	movs	r6, #0
 800803e:	4637      	mov	r7, r6
 8008040:	e7e1      	b.n	8008006 <_dtoa_r+0x93e>
 8008042:	9700      	str	r7, [sp, #0]
 8008044:	4637      	mov	r7, r6
 8008046:	e599      	b.n	8007b7c <_dtoa_r+0x4b4>
 8008048:	40240000 	.word	0x40240000
 800804c:	9b08      	ldr	r3, [sp, #32]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 80ca 	beq.w	80081e8 <_dtoa_r+0xb20>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	2d00      	cmp	r5, #0
 800805a:	dd05      	ble.n	8008068 <_dtoa_r+0x9a0>
 800805c:	4639      	mov	r1, r7
 800805e:	462a      	mov	r2, r5
 8008060:	4620      	mov	r0, r4
 8008062:	f000 fb4b 	bl	80086fc <__lshift>
 8008066:	4607      	mov	r7, r0
 8008068:	f1b8 0f00 	cmp.w	r8, #0
 800806c:	d05b      	beq.n	8008126 <_dtoa_r+0xa5e>
 800806e:	6879      	ldr	r1, [r7, #4]
 8008070:	4620      	mov	r0, r4
 8008072:	f000 f931 	bl	80082d8 <_Balloc>
 8008076:	4605      	mov	r5, r0
 8008078:	b928      	cbnz	r0, 8008086 <_dtoa_r+0x9be>
 800807a:	4b87      	ldr	r3, [pc, #540]	; (8008298 <_dtoa_r+0xbd0>)
 800807c:	4602      	mov	r2, r0
 800807e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008082:	f7ff bb3b 	b.w	80076fc <_dtoa_r+0x34>
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	3202      	adds	r2, #2
 800808a:	0092      	lsls	r2, r2, #2
 800808c:	f107 010c 	add.w	r1, r7, #12
 8008090:	300c      	adds	r0, #12
 8008092:	f000 f913 	bl	80082bc <memcpy>
 8008096:	2201      	movs	r2, #1
 8008098:	4629      	mov	r1, r5
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fb2e 	bl	80086fc <__lshift>
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	f103 0901 	add.w	r9, r3, #1
 80080a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80080aa:	4413      	add	r3, r2
 80080ac:	9305      	str	r3, [sp, #20]
 80080ae:	f00a 0301 	and.w	r3, sl, #1
 80080b2:	46b8      	mov	r8, r7
 80080b4:	9304      	str	r3, [sp, #16]
 80080b6:	4607      	mov	r7, r0
 80080b8:	4631      	mov	r1, r6
 80080ba:	ee18 0a10 	vmov	r0, s16
 80080be:	f7ff fa77 	bl	80075b0 <quorem>
 80080c2:	4641      	mov	r1, r8
 80080c4:	9002      	str	r0, [sp, #8]
 80080c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080ca:	ee18 0a10 	vmov	r0, s16
 80080ce:	f000 fb85 	bl	80087dc <__mcmp>
 80080d2:	463a      	mov	r2, r7
 80080d4:	9003      	str	r0, [sp, #12]
 80080d6:	4631      	mov	r1, r6
 80080d8:	4620      	mov	r0, r4
 80080da:	f000 fb9b 	bl	8008814 <__mdiff>
 80080de:	68c2      	ldr	r2, [r0, #12]
 80080e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80080e4:	4605      	mov	r5, r0
 80080e6:	bb02      	cbnz	r2, 800812a <_dtoa_r+0xa62>
 80080e8:	4601      	mov	r1, r0
 80080ea:	ee18 0a10 	vmov	r0, s16
 80080ee:	f000 fb75 	bl	80087dc <__mcmp>
 80080f2:	4602      	mov	r2, r0
 80080f4:	4629      	mov	r1, r5
 80080f6:	4620      	mov	r0, r4
 80080f8:	9207      	str	r2, [sp, #28]
 80080fa:	f000 f92d 	bl	8008358 <_Bfree>
 80080fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008102:	ea43 0102 	orr.w	r1, r3, r2
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	430b      	orrs	r3, r1
 800810a:	464d      	mov	r5, r9
 800810c:	d10f      	bne.n	800812e <_dtoa_r+0xa66>
 800810e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008112:	d02a      	beq.n	800816a <_dtoa_r+0xaa2>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd02      	ble.n	8008120 <_dtoa_r+0xa58>
 800811a:	9b02      	ldr	r3, [sp, #8]
 800811c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008120:	f88b a000 	strb.w	sl, [fp]
 8008124:	e775      	b.n	8008012 <_dtoa_r+0x94a>
 8008126:	4638      	mov	r0, r7
 8008128:	e7ba      	b.n	80080a0 <_dtoa_r+0x9d8>
 800812a:	2201      	movs	r2, #1
 800812c:	e7e2      	b.n	80080f4 <_dtoa_r+0xa2c>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	2b00      	cmp	r3, #0
 8008132:	db04      	blt.n	800813e <_dtoa_r+0xa76>
 8008134:	9906      	ldr	r1, [sp, #24]
 8008136:	430b      	orrs	r3, r1
 8008138:	9904      	ldr	r1, [sp, #16]
 800813a:	430b      	orrs	r3, r1
 800813c:	d122      	bne.n	8008184 <_dtoa_r+0xabc>
 800813e:	2a00      	cmp	r2, #0
 8008140:	ddee      	ble.n	8008120 <_dtoa_r+0xa58>
 8008142:	ee18 1a10 	vmov	r1, s16
 8008146:	2201      	movs	r2, #1
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fad7 	bl	80086fc <__lshift>
 800814e:	4631      	mov	r1, r6
 8008150:	ee08 0a10 	vmov	s16, r0
 8008154:	f000 fb42 	bl	80087dc <__mcmp>
 8008158:	2800      	cmp	r0, #0
 800815a:	dc03      	bgt.n	8008164 <_dtoa_r+0xa9c>
 800815c:	d1e0      	bne.n	8008120 <_dtoa_r+0xa58>
 800815e:	f01a 0f01 	tst.w	sl, #1
 8008162:	d0dd      	beq.n	8008120 <_dtoa_r+0xa58>
 8008164:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008168:	d1d7      	bne.n	800811a <_dtoa_r+0xa52>
 800816a:	2339      	movs	r3, #57	; 0x39
 800816c:	f88b 3000 	strb.w	r3, [fp]
 8008170:	462b      	mov	r3, r5
 8008172:	461d      	mov	r5, r3
 8008174:	3b01      	subs	r3, #1
 8008176:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800817a:	2a39      	cmp	r2, #57	; 0x39
 800817c:	d071      	beq.n	8008262 <_dtoa_r+0xb9a>
 800817e:	3201      	adds	r2, #1
 8008180:	701a      	strb	r2, [r3, #0]
 8008182:	e746      	b.n	8008012 <_dtoa_r+0x94a>
 8008184:	2a00      	cmp	r2, #0
 8008186:	dd07      	ble.n	8008198 <_dtoa_r+0xad0>
 8008188:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800818c:	d0ed      	beq.n	800816a <_dtoa_r+0xaa2>
 800818e:	f10a 0301 	add.w	r3, sl, #1
 8008192:	f88b 3000 	strb.w	r3, [fp]
 8008196:	e73c      	b.n	8008012 <_dtoa_r+0x94a>
 8008198:	9b05      	ldr	r3, [sp, #20]
 800819a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800819e:	4599      	cmp	r9, r3
 80081a0:	d047      	beq.n	8008232 <_dtoa_r+0xb6a>
 80081a2:	ee18 1a10 	vmov	r1, s16
 80081a6:	2300      	movs	r3, #0
 80081a8:	220a      	movs	r2, #10
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 f8f6 	bl	800839c <__multadd>
 80081b0:	45b8      	cmp	r8, r7
 80081b2:	ee08 0a10 	vmov	s16, r0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	f04f 020a 	mov.w	r2, #10
 80081be:	4641      	mov	r1, r8
 80081c0:	4620      	mov	r0, r4
 80081c2:	d106      	bne.n	80081d2 <_dtoa_r+0xb0a>
 80081c4:	f000 f8ea 	bl	800839c <__multadd>
 80081c8:	4680      	mov	r8, r0
 80081ca:	4607      	mov	r7, r0
 80081cc:	f109 0901 	add.w	r9, r9, #1
 80081d0:	e772      	b.n	80080b8 <_dtoa_r+0x9f0>
 80081d2:	f000 f8e3 	bl	800839c <__multadd>
 80081d6:	4639      	mov	r1, r7
 80081d8:	4680      	mov	r8, r0
 80081da:	2300      	movs	r3, #0
 80081dc:	220a      	movs	r2, #10
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 f8dc 	bl	800839c <__multadd>
 80081e4:	4607      	mov	r7, r0
 80081e6:	e7f1      	b.n	80081cc <_dtoa_r+0xb04>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	9302      	str	r3, [sp, #8]
 80081ec:	9d01      	ldr	r5, [sp, #4]
 80081ee:	ee18 0a10 	vmov	r0, s16
 80081f2:	4631      	mov	r1, r6
 80081f4:	f7ff f9dc 	bl	80075b0 <quorem>
 80081f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	f805 ab01 	strb.w	sl, [r5], #1
 8008202:	1aea      	subs	r2, r5, r3
 8008204:	9b02      	ldr	r3, [sp, #8]
 8008206:	4293      	cmp	r3, r2
 8008208:	dd09      	ble.n	800821e <_dtoa_r+0xb56>
 800820a:	ee18 1a10 	vmov	r1, s16
 800820e:	2300      	movs	r3, #0
 8008210:	220a      	movs	r2, #10
 8008212:	4620      	mov	r0, r4
 8008214:	f000 f8c2 	bl	800839c <__multadd>
 8008218:	ee08 0a10 	vmov	s16, r0
 800821c:	e7e7      	b.n	80081ee <_dtoa_r+0xb26>
 800821e:	9b02      	ldr	r3, [sp, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	bfc8      	it	gt
 8008224:	461d      	movgt	r5, r3
 8008226:	9b01      	ldr	r3, [sp, #4]
 8008228:	bfd8      	it	le
 800822a:	2501      	movle	r5, #1
 800822c:	441d      	add	r5, r3
 800822e:	f04f 0800 	mov.w	r8, #0
 8008232:	ee18 1a10 	vmov	r1, s16
 8008236:	2201      	movs	r2, #1
 8008238:	4620      	mov	r0, r4
 800823a:	f000 fa5f 	bl	80086fc <__lshift>
 800823e:	4631      	mov	r1, r6
 8008240:	ee08 0a10 	vmov	s16, r0
 8008244:	f000 faca 	bl	80087dc <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	dc91      	bgt.n	8008170 <_dtoa_r+0xaa8>
 800824c:	d102      	bne.n	8008254 <_dtoa_r+0xb8c>
 800824e:	f01a 0f01 	tst.w	sl, #1
 8008252:	d18d      	bne.n	8008170 <_dtoa_r+0xaa8>
 8008254:	462b      	mov	r3, r5
 8008256:	461d      	mov	r5, r3
 8008258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800825c:	2a30      	cmp	r2, #48	; 0x30
 800825e:	d0fa      	beq.n	8008256 <_dtoa_r+0xb8e>
 8008260:	e6d7      	b.n	8008012 <_dtoa_r+0x94a>
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	d184      	bne.n	8008172 <_dtoa_r+0xaaa>
 8008268:	9b00      	ldr	r3, [sp, #0]
 800826a:	3301      	adds	r3, #1
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2331      	movs	r3, #49	; 0x31
 8008270:	7013      	strb	r3, [r2, #0]
 8008272:	e6ce      	b.n	8008012 <_dtoa_r+0x94a>
 8008274:	4b09      	ldr	r3, [pc, #36]	; (800829c <_dtoa_r+0xbd4>)
 8008276:	f7ff ba95 	b.w	80077a4 <_dtoa_r+0xdc>
 800827a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800827c:	2b00      	cmp	r3, #0
 800827e:	f47f aa6e 	bne.w	800775e <_dtoa_r+0x96>
 8008282:	4b07      	ldr	r3, [pc, #28]	; (80082a0 <_dtoa_r+0xbd8>)
 8008284:	f7ff ba8e 	b.w	80077a4 <_dtoa_r+0xdc>
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	dcae      	bgt.n	80081ec <_dtoa_r+0xb24>
 800828e:	9b06      	ldr	r3, [sp, #24]
 8008290:	2b02      	cmp	r3, #2
 8008292:	f73f aea8 	bgt.w	8007fe6 <_dtoa_r+0x91e>
 8008296:	e7a9      	b.n	80081ec <_dtoa_r+0xb24>
 8008298:	0800b5db 	.word	0x0800b5db
 800829c:	0800b538 	.word	0x0800b538
 80082a0:	0800b55c 	.word	0x0800b55c

080082a4 <_localeconv_r>:
 80082a4:	4800      	ldr	r0, [pc, #0]	; (80082a8 <_localeconv_r+0x4>)
 80082a6:	4770      	bx	lr
 80082a8:	20000180 	.word	0x20000180

080082ac <malloc>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <malloc+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f000 bc17 	b.w	8008ae4 <_malloc_r>
 80082b6:	bf00      	nop
 80082b8:	2000002c 	.word	0x2000002c

080082bc <memcpy>:
 80082bc:	440a      	add	r2, r1
 80082be:	4291      	cmp	r1, r2
 80082c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80082c4:	d100      	bne.n	80082c8 <memcpy+0xc>
 80082c6:	4770      	bx	lr
 80082c8:	b510      	push	{r4, lr}
 80082ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082d2:	4291      	cmp	r1, r2
 80082d4:	d1f9      	bne.n	80082ca <memcpy+0xe>
 80082d6:	bd10      	pop	{r4, pc}

080082d8 <_Balloc>:
 80082d8:	b570      	push	{r4, r5, r6, lr}
 80082da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	b976      	cbnz	r6, 8008300 <_Balloc+0x28>
 80082e2:	2010      	movs	r0, #16
 80082e4:	f7ff ffe2 	bl	80082ac <malloc>
 80082e8:	4602      	mov	r2, r0
 80082ea:	6260      	str	r0, [r4, #36]	; 0x24
 80082ec:	b920      	cbnz	r0, 80082f8 <_Balloc+0x20>
 80082ee:	4b18      	ldr	r3, [pc, #96]	; (8008350 <_Balloc+0x78>)
 80082f0:	4818      	ldr	r0, [pc, #96]	; (8008354 <_Balloc+0x7c>)
 80082f2:	2166      	movs	r1, #102	; 0x66
 80082f4:	f000 fdd6 	bl	8008ea4 <__assert_func>
 80082f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082fc:	6006      	str	r6, [r0, #0]
 80082fe:	60c6      	str	r6, [r0, #12]
 8008300:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008302:	68f3      	ldr	r3, [r6, #12]
 8008304:	b183      	cbz	r3, 8008328 <_Balloc+0x50>
 8008306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800830e:	b9b8      	cbnz	r0, 8008340 <_Balloc+0x68>
 8008310:	2101      	movs	r1, #1
 8008312:	fa01 f605 	lsl.w	r6, r1, r5
 8008316:	1d72      	adds	r2, r6, #5
 8008318:	0092      	lsls	r2, r2, #2
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fb60 	bl	80089e0 <_calloc_r>
 8008320:	b160      	cbz	r0, 800833c <_Balloc+0x64>
 8008322:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008326:	e00e      	b.n	8008346 <_Balloc+0x6e>
 8008328:	2221      	movs	r2, #33	; 0x21
 800832a:	2104      	movs	r1, #4
 800832c:	4620      	mov	r0, r4
 800832e:	f000 fb57 	bl	80089e0 <_calloc_r>
 8008332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008334:	60f0      	str	r0, [r6, #12]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e4      	bne.n	8008306 <_Balloc+0x2e>
 800833c:	2000      	movs	r0, #0
 800833e:	bd70      	pop	{r4, r5, r6, pc}
 8008340:	6802      	ldr	r2, [r0, #0]
 8008342:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008346:	2300      	movs	r3, #0
 8008348:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800834c:	e7f7      	b.n	800833e <_Balloc+0x66>
 800834e:	bf00      	nop
 8008350:	0800b569 	.word	0x0800b569
 8008354:	0800b5ec 	.word	0x0800b5ec

08008358 <_Bfree>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800835c:	4605      	mov	r5, r0
 800835e:	460c      	mov	r4, r1
 8008360:	b976      	cbnz	r6, 8008380 <_Bfree+0x28>
 8008362:	2010      	movs	r0, #16
 8008364:	f7ff ffa2 	bl	80082ac <malloc>
 8008368:	4602      	mov	r2, r0
 800836a:	6268      	str	r0, [r5, #36]	; 0x24
 800836c:	b920      	cbnz	r0, 8008378 <_Bfree+0x20>
 800836e:	4b09      	ldr	r3, [pc, #36]	; (8008394 <_Bfree+0x3c>)
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <_Bfree+0x40>)
 8008372:	218a      	movs	r1, #138	; 0x8a
 8008374:	f000 fd96 	bl	8008ea4 <__assert_func>
 8008378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800837c:	6006      	str	r6, [r0, #0]
 800837e:	60c6      	str	r6, [r0, #12]
 8008380:	b13c      	cbz	r4, 8008392 <_Bfree+0x3a>
 8008382:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008384:	6862      	ldr	r2, [r4, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800838c:	6021      	str	r1, [r4, #0]
 800838e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008392:	bd70      	pop	{r4, r5, r6, pc}
 8008394:	0800b569 	.word	0x0800b569
 8008398:	0800b5ec 	.word	0x0800b5ec

0800839c <__multadd>:
 800839c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a0:	690d      	ldr	r5, [r1, #16]
 80083a2:	4607      	mov	r7, r0
 80083a4:	460c      	mov	r4, r1
 80083a6:	461e      	mov	r6, r3
 80083a8:	f101 0c14 	add.w	ip, r1, #20
 80083ac:	2000      	movs	r0, #0
 80083ae:	f8dc 3000 	ldr.w	r3, [ip]
 80083b2:	b299      	uxth	r1, r3
 80083b4:	fb02 6101 	mla	r1, r2, r1, r6
 80083b8:	0c1e      	lsrs	r6, r3, #16
 80083ba:	0c0b      	lsrs	r3, r1, #16
 80083bc:	fb02 3306 	mla	r3, r2, r6, r3
 80083c0:	b289      	uxth	r1, r1
 80083c2:	3001      	adds	r0, #1
 80083c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083c8:	4285      	cmp	r5, r0
 80083ca:	f84c 1b04 	str.w	r1, [ip], #4
 80083ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083d2:	dcec      	bgt.n	80083ae <__multadd+0x12>
 80083d4:	b30e      	cbz	r6, 800841a <__multadd+0x7e>
 80083d6:	68a3      	ldr	r3, [r4, #8]
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dc19      	bgt.n	8008410 <__multadd+0x74>
 80083dc:	6861      	ldr	r1, [r4, #4]
 80083de:	4638      	mov	r0, r7
 80083e0:	3101      	adds	r1, #1
 80083e2:	f7ff ff79 	bl	80082d8 <_Balloc>
 80083e6:	4680      	mov	r8, r0
 80083e8:	b928      	cbnz	r0, 80083f6 <__multadd+0x5a>
 80083ea:	4602      	mov	r2, r0
 80083ec:	4b0c      	ldr	r3, [pc, #48]	; (8008420 <__multadd+0x84>)
 80083ee:	480d      	ldr	r0, [pc, #52]	; (8008424 <__multadd+0x88>)
 80083f0:	21b5      	movs	r1, #181	; 0xb5
 80083f2:	f000 fd57 	bl	8008ea4 <__assert_func>
 80083f6:	6922      	ldr	r2, [r4, #16]
 80083f8:	3202      	adds	r2, #2
 80083fa:	f104 010c 	add.w	r1, r4, #12
 80083fe:	0092      	lsls	r2, r2, #2
 8008400:	300c      	adds	r0, #12
 8008402:	f7ff ff5b 	bl	80082bc <memcpy>
 8008406:	4621      	mov	r1, r4
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ffa5 	bl	8008358 <_Bfree>
 800840e:	4644      	mov	r4, r8
 8008410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008414:	3501      	adds	r5, #1
 8008416:	615e      	str	r6, [r3, #20]
 8008418:	6125      	str	r5, [r4, #16]
 800841a:	4620      	mov	r0, r4
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	0800b5db 	.word	0x0800b5db
 8008424:	0800b5ec 	.word	0x0800b5ec

08008428 <__hi0bits>:
 8008428:	0c03      	lsrs	r3, r0, #16
 800842a:	041b      	lsls	r3, r3, #16
 800842c:	b9d3      	cbnz	r3, 8008464 <__hi0bits+0x3c>
 800842e:	0400      	lsls	r0, r0, #16
 8008430:	2310      	movs	r3, #16
 8008432:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008436:	bf04      	itt	eq
 8008438:	0200      	lsleq	r0, r0, #8
 800843a:	3308      	addeq	r3, #8
 800843c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008440:	bf04      	itt	eq
 8008442:	0100      	lsleq	r0, r0, #4
 8008444:	3304      	addeq	r3, #4
 8008446:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800844a:	bf04      	itt	eq
 800844c:	0080      	lsleq	r0, r0, #2
 800844e:	3302      	addeq	r3, #2
 8008450:	2800      	cmp	r0, #0
 8008452:	db05      	blt.n	8008460 <__hi0bits+0x38>
 8008454:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008458:	f103 0301 	add.w	r3, r3, #1
 800845c:	bf08      	it	eq
 800845e:	2320      	moveq	r3, #32
 8008460:	4618      	mov	r0, r3
 8008462:	4770      	bx	lr
 8008464:	2300      	movs	r3, #0
 8008466:	e7e4      	b.n	8008432 <__hi0bits+0xa>

08008468 <__lo0bits>:
 8008468:	6803      	ldr	r3, [r0, #0]
 800846a:	f013 0207 	ands.w	r2, r3, #7
 800846e:	4601      	mov	r1, r0
 8008470:	d00b      	beq.n	800848a <__lo0bits+0x22>
 8008472:	07da      	lsls	r2, r3, #31
 8008474:	d423      	bmi.n	80084be <__lo0bits+0x56>
 8008476:	0798      	lsls	r0, r3, #30
 8008478:	bf49      	itett	mi
 800847a:	085b      	lsrmi	r3, r3, #1
 800847c:	089b      	lsrpl	r3, r3, #2
 800847e:	2001      	movmi	r0, #1
 8008480:	600b      	strmi	r3, [r1, #0]
 8008482:	bf5c      	itt	pl
 8008484:	600b      	strpl	r3, [r1, #0]
 8008486:	2002      	movpl	r0, #2
 8008488:	4770      	bx	lr
 800848a:	b298      	uxth	r0, r3
 800848c:	b9a8      	cbnz	r0, 80084ba <__lo0bits+0x52>
 800848e:	0c1b      	lsrs	r3, r3, #16
 8008490:	2010      	movs	r0, #16
 8008492:	b2da      	uxtb	r2, r3
 8008494:	b90a      	cbnz	r2, 800849a <__lo0bits+0x32>
 8008496:	3008      	adds	r0, #8
 8008498:	0a1b      	lsrs	r3, r3, #8
 800849a:	071a      	lsls	r2, r3, #28
 800849c:	bf04      	itt	eq
 800849e:	091b      	lsreq	r3, r3, #4
 80084a0:	3004      	addeq	r0, #4
 80084a2:	079a      	lsls	r2, r3, #30
 80084a4:	bf04      	itt	eq
 80084a6:	089b      	lsreq	r3, r3, #2
 80084a8:	3002      	addeq	r0, #2
 80084aa:	07da      	lsls	r2, r3, #31
 80084ac:	d403      	bmi.n	80084b6 <__lo0bits+0x4e>
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	f100 0001 	add.w	r0, r0, #1
 80084b4:	d005      	beq.n	80084c2 <__lo0bits+0x5a>
 80084b6:	600b      	str	r3, [r1, #0]
 80084b8:	4770      	bx	lr
 80084ba:	4610      	mov	r0, r2
 80084bc:	e7e9      	b.n	8008492 <__lo0bits+0x2a>
 80084be:	2000      	movs	r0, #0
 80084c0:	4770      	bx	lr
 80084c2:	2020      	movs	r0, #32
 80084c4:	4770      	bx	lr
	...

080084c8 <__i2b>:
 80084c8:	b510      	push	{r4, lr}
 80084ca:	460c      	mov	r4, r1
 80084cc:	2101      	movs	r1, #1
 80084ce:	f7ff ff03 	bl	80082d8 <_Balloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	b928      	cbnz	r0, 80084e2 <__i2b+0x1a>
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <__i2b+0x24>)
 80084d8:	4805      	ldr	r0, [pc, #20]	; (80084f0 <__i2b+0x28>)
 80084da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80084de:	f000 fce1 	bl	8008ea4 <__assert_func>
 80084e2:	2301      	movs	r3, #1
 80084e4:	6144      	str	r4, [r0, #20]
 80084e6:	6103      	str	r3, [r0, #16]
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	0800b5db 	.word	0x0800b5db
 80084f0:	0800b5ec 	.word	0x0800b5ec

080084f4 <__multiply>:
 80084f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f8:	4691      	mov	r9, r2
 80084fa:	690a      	ldr	r2, [r1, #16]
 80084fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008500:	429a      	cmp	r2, r3
 8008502:	bfb8      	it	lt
 8008504:	460b      	movlt	r3, r1
 8008506:	460c      	mov	r4, r1
 8008508:	bfbc      	itt	lt
 800850a:	464c      	movlt	r4, r9
 800850c:	4699      	movlt	r9, r3
 800850e:	6927      	ldr	r7, [r4, #16]
 8008510:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008514:	68a3      	ldr	r3, [r4, #8]
 8008516:	6861      	ldr	r1, [r4, #4]
 8008518:	eb07 060a 	add.w	r6, r7, sl
 800851c:	42b3      	cmp	r3, r6
 800851e:	b085      	sub	sp, #20
 8008520:	bfb8      	it	lt
 8008522:	3101      	addlt	r1, #1
 8008524:	f7ff fed8 	bl	80082d8 <_Balloc>
 8008528:	b930      	cbnz	r0, 8008538 <__multiply+0x44>
 800852a:	4602      	mov	r2, r0
 800852c:	4b44      	ldr	r3, [pc, #272]	; (8008640 <__multiply+0x14c>)
 800852e:	4845      	ldr	r0, [pc, #276]	; (8008644 <__multiply+0x150>)
 8008530:	f240 115d 	movw	r1, #349	; 0x15d
 8008534:	f000 fcb6 	bl	8008ea4 <__assert_func>
 8008538:	f100 0514 	add.w	r5, r0, #20
 800853c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008540:	462b      	mov	r3, r5
 8008542:	2200      	movs	r2, #0
 8008544:	4543      	cmp	r3, r8
 8008546:	d321      	bcc.n	800858c <__multiply+0x98>
 8008548:	f104 0314 	add.w	r3, r4, #20
 800854c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008550:	f109 0314 	add.w	r3, r9, #20
 8008554:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008558:	9202      	str	r2, [sp, #8]
 800855a:	1b3a      	subs	r2, r7, r4
 800855c:	3a15      	subs	r2, #21
 800855e:	f022 0203 	bic.w	r2, r2, #3
 8008562:	3204      	adds	r2, #4
 8008564:	f104 0115 	add.w	r1, r4, #21
 8008568:	428f      	cmp	r7, r1
 800856a:	bf38      	it	cc
 800856c:	2204      	movcc	r2, #4
 800856e:	9201      	str	r2, [sp, #4]
 8008570:	9a02      	ldr	r2, [sp, #8]
 8008572:	9303      	str	r3, [sp, #12]
 8008574:	429a      	cmp	r2, r3
 8008576:	d80c      	bhi.n	8008592 <__multiply+0x9e>
 8008578:	2e00      	cmp	r6, #0
 800857a:	dd03      	ble.n	8008584 <__multiply+0x90>
 800857c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008580:	2b00      	cmp	r3, #0
 8008582:	d05a      	beq.n	800863a <__multiply+0x146>
 8008584:	6106      	str	r6, [r0, #16]
 8008586:	b005      	add	sp, #20
 8008588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800858c:	f843 2b04 	str.w	r2, [r3], #4
 8008590:	e7d8      	b.n	8008544 <__multiply+0x50>
 8008592:	f8b3 a000 	ldrh.w	sl, [r3]
 8008596:	f1ba 0f00 	cmp.w	sl, #0
 800859a:	d024      	beq.n	80085e6 <__multiply+0xf2>
 800859c:	f104 0e14 	add.w	lr, r4, #20
 80085a0:	46a9      	mov	r9, r5
 80085a2:	f04f 0c00 	mov.w	ip, #0
 80085a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085aa:	f8d9 1000 	ldr.w	r1, [r9]
 80085ae:	fa1f fb82 	uxth.w	fp, r2
 80085b2:	b289      	uxth	r1, r1
 80085b4:	fb0a 110b 	mla	r1, sl, fp, r1
 80085b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085bc:	f8d9 2000 	ldr.w	r2, [r9]
 80085c0:	4461      	add	r1, ip
 80085c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085c6:	fb0a c20b 	mla	r2, sl, fp, ip
 80085ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085ce:	b289      	uxth	r1, r1
 80085d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085d4:	4577      	cmp	r7, lr
 80085d6:	f849 1b04 	str.w	r1, [r9], #4
 80085da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085de:	d8e2      	bhi.n	80085a6 <__multiply+0xb2>
 80085e0:	9a01      	ldr	r2, [sp, #4]
 80085e2:	f845 c002 	str.w	ip, [r5, r2]
 80085e6:	9a03      	ldr	r2, [sp, #12]
 80085e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085ec:	3304      	adds	r3, #4
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	d020      	beq.n	8008636 <__multiply+0x142>
 80085f4:	6829      	ldr	r1, [r5, #0]
 80085f6:	f104 0c14 	add.w	ip, r4, #20
 80085fa:	46ae      	mov	lr, r5
 80085fc:	f04f 0a00 	mov.w	sl, #0
 8008600:	f8bc b000 	ldrh.w	fp, [ip]
 8008604:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008608:	fb09 220b 	mla	r2, r9, fp, r2
 800860c:	4492      	add	sl, r2
 800860e:	b289      	uxth	r1, r1
 8008610:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008614:	f84e 1b04 	str.w	r1, [lr], #4
 8008618:	f85c 2b04 	ldr.w	r2, [ip], #4
 800861c:	f8be 1000 	ldrh.w	r1, [lr]
 8008620:	0c12      	lsrs	r2, r2, #16
 8008622:	fb09 1102 	mla	r1, r9, r2, r1
 8008626:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800862a:	4567      	cmp	r7, ip
 800862c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008630:	d8e6      	bhi.n	8008600 <__multiply+0x10c>
 8008632:	9a01      	ldr	r2, [sp, #4]
 8008634:	50a9      	str	r1, [r5, r2]
 8008636:	3504      	adds	r5, #4
 8008638:	e79a      	b.n	8008570 <__multiply+0x7c>
 800863a:	3e01      	subs	r6, #1
 800863c:	e79c      	b.n	8008578 <__multiply+0x84>
 800863e:	bf00      	nop
 8008640:	0800b5db 	.word	0x0800b5db
 8008644:	0800b5ec 	.word	0x0800b5ec

08008648 <__pow5mult>:
 8008648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800864c:	4615      	mov	r5, r2
 800864e:	f012 0203 	ands.w	r2, r2, #3
 8008652:	4606      	mov	r6, r0
 8008654:	460f      	mov	r7, r1
 8008656:	d007      	beq.n	8008668 <__pow5mult+0x20>
 8008658:	4c25      	ldr	r4, [pc, #148]	; (80086f0 <__pow5mult+0xa8>)
 800865a:	3a01      	subs	r2, #1
 800865c:	2300      	movs	r3, #0
 800865e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008662:	f7ff fe9b 	bl	800839c <__multadd>
 8008666:	4607      	mov	r7, r0
 8008668:	10ad      	asrs	r5, r5, #2
 800866a:	d03d      	beq.n	80086e8 <__pow5mult+0xa0>
 800866c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800866e:	b97c      	cbnz	r4, 8008690 <__pow5mult+0x48>
 8008670:	2010      	movs	r0, #16
 8008672:	f7ff fe1b 	bl	80082ac <malloc>
 8008676:	4602      	mov	r2, r0
 8008678:	6270      	str	r0, [r6, #36]	; 0x24
 800867a:	b928      	cbnz	r0, 8008688 <__pow5mult+0x40>
 800867c:	4b1d      	ldr	r3, [pc, #116]	; (80086f4 <__pow5mult+0xac>)
 800867e:	481e      	ldr	r0, [pc, #120]	; (80086f8 <__pow5mult+0xb0>)
 8008680:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008684:	f000 fc0e 	bl	8008ea4 <__assert_func>
 8008688:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800868c:	6004      	str	r4, [r0, #0]
 800868e:	60c4      	str	r4, [r0, #12]
 8008690:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008694:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008698:	b94c      	cbnz	r4, 80086ae <__pow5mult+0x66>
 800869a:	f240 2171 	movw	r1, #625	; 0x271
 800869e:	4630      	mov	r0, r6
 80086a0:	f7ff ff12 	bl	80084c8 <__i2b>
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80086aa:	4604      	mov	r4, r0
 80086ac:	6003      	str	r3, [r0, #0]
 80086ae:	f04f 0900 	mov.w	r9, #0
 80086b2:	07eb      	lsls	r3, r5, #31
 80086b4:	d50a      	bpl.n	80086cc <__pow5mult+0x84>
 80086b6:	4639      	mov	r1, r7
 80086b8:	4622      	mov	r2, r4
 80086ba:	4630      	mov	r0, r6
 80086bc:	f7ff ff1a 	bl	80084f4 <__multiply>
 80086c0:	4639      	mov	r1, r7
 80086c2:	4680      	mov	r8, r0
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fe47 	bl	8008358 <_Bfree>
 80086ca:	4647      	mov	r7, r8
 80086cc:	106d      	asrs	r5, r5, #1
 80086ce:	d00b      	beq.n	80086e8 <__pow5mult+0xa0>
 80086d0:	6820      	ldr	r0, [r4, #0]
 80086d2:	b938      	cbnz	r0, 80086e4 <__pow5mult+0x9c>
 80086d4:	4622      	mov	r2, r4
 80086d6:	4621      	mov	r1, r4
 80086d8:	4630      	mov	r0, r6
 80086da:	f7ff ff0b 	bl	80084f4 <__multiply>
 80086de:	6020      	str	r0, [r4, #0]
 80086e0:	f8c0 9000 	str.w	r9, [r0]
 80086e4:	4604      	mov	r4, r0
 80086e6:	e7e4      	b.n	80086b2 <__pow5mult+0x6a>
 80086e8:	4638      	mov	r0, r7
 80086ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ee:	bf00      	nop
 80086f0:	0800b738 	.word	0x0800b738
 80086f4:	0800b569 	.word	0x0800b569
 80086f8:	0800b5ec 	.word	0x0800b5ec

080086fc <__lshift>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	460c      	mov	r4, r1
 8008702:	6849      	ldr	r1, [r1, #4]
 8008704:	6923      	ldr	r3, [r4, #16]
 8008706:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800870a:	68a3      	ldr	r3, [r4, #8]
 800870c:	4607      	mov	r7, r0
 800870e:	4691      	mov	r9, r2
 8008710:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008714:	f108 0601 	add.w	r6, r8, #1
 8008718:	42b3      	cmp	r3, r6
 800871a:	db0b      	blt.n	8008734 <__lshift+0x38>
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff fddb 	bl	80082d8 <_Balloc>
 8008722:	4605      	mov	r5, r0
 8008724:	b948      	cbnz	r0, 800873a <__lshift+0x3e>
 8008726:	4602      	mov	r2, r0
 8008728:	4b2a      	ldr	r3, [pc, #168]	; (80087d4 <__lshift+0xd8>)
 800872a:	482b      	ldr	r0, [pc, #172]	; (80087d8 <__lshift+0xdc>)
 800872c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008730:	f000 fbb8 	bl	8008ea4 <__assert_func>
 8008734:	3101      	adds	r1, #1
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	e7ee      	b.n	8008718 <__lshift+0x1c>
 800873a:	2300      	movs	r3, #0
 800873c:	f100 0114 	add.w	r1, r0, #20
 8008740:	f100 0210 	add.w	r2, r0, #16
 8008744:	4618      	mov	r0, r3
 8008746:	4553      	cmp	r3, sl
 8008748:	db37      	blt.n	80087ba <__lshift+0xbe>
 800874a:	6920      	ldr	r0, [r4, #16]
 800874c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008750:	f104 0314 	add.w	r3, r4, #20
 8008754:	f019 091f 	ands.w	r9, r9, #31
 8008758:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800875c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008760:	d02f      	beq.n	80087c2 <__lshift+0xc6>
 8008762:	f1c9 0e20 	rsb	lr, r9, #32
 8008766:	468a      	mov	sl, r1
 8008768:	f04f 0c00 	mov.w	ip, #0
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	fa02 f209 	lsl.w	r2, r2, r9
 8008772:	ea42 020c 	orr.w	r2, r2, ip
 8008776:	f84a 2b04 	str.w	r2, [sl], #4
 800877a:	f853 2b04 	ldr.w	r2, [r3], #4
 800877e:	4298      	cmp	r0, r3
 8008780:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008784:	d8f2      	bhi.n	800876c <__lshift+0x70>
 8008786:	1b03      	subs	r3, r0, r4
 8008788:	3b15      	subs	r3, #21
 800878a:	f023 0303 	bic.w	r3, r3, #3
 800878e:	3304      	adds	r3, #4
 8008790:	f104 0215 	add.w	r2, r4, #21
 8008794:	4290      	cmp	r0, r2
 8008796:	bf38      	it	cc
 8008798:	2304      	movcc	r3, #4
 800879a:	f841 c003 	str.w	ip, [r1, r3]
 800879e:	f1bc 0f00 	cmp.w	ip, #0
 80087a2:	d001      	beq.n	80087a8 <__lshift+0xac>
 80087a4:	f108 0602 	add.w	r6, r8, #2
 80087a8:	3e01      	subs	r6, #1
 80087aa:	4638      	mov	r0, r7
 80087ac:	612e      	str	r6, [r5, #16]
 80087ae:	4621      	mov	r1, r4
 80087b0:	f7ff fdd2 	bl	8008358 <_Bfree>
 80087b4:	4628      	mov	r0, r5
 80087b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80087be:	3301      	adds	r3, #1
 80087c0:	e7c1      	b.n	8008746 <__lshift+0x4a>
 80087c2:	3904      	subs	r1, #4
 80087c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80087cc:	4298      	cmp	r0, r3
 80087ce:	d8f9      	bhi.n	80087c4 <__lshift+0xc8>
 80087d0:	e7ea      	b.n	80087a8 <__lshift+0xac>
 80087d2:	bf00      	nop
 80087d4:	0800b5db 	.word	0x0800b5db
 80087d8:	0800b5ec 	.word	0x0800b5ec

080087dc <__mcmp>:
 80087dc:	b530      	push	{r4, r5, lr}
 80087de:	6902      	ldr	r2, [r0, #16]
 80087e0:	690c      	ldr	r4, [r1, #16]
 80087e2:	1b12      	subs	r2, r2, r4
 80087e4:	d10e      	bne.n	8008804 <__mcmp+0x28>
 80087e6:	f100 0314 	add.w	r3, r0, #20
 80087ea:	3114      	adds	r1, #20
 80087ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087fc:	42a5      	cmp	r5, r4
 80087fe:	d003      	beq.n	8008808 <__mcmp+0x2c>
 8008800:	d305      	bcc.n	800880e <__mcmp+0x32>
 8008802:	2201      	movs	r2, #1
 8008804:	4610      	mov	r0, r2
 8008806:	bd30      	pop	{r4, r5, pc}
 8008808:	4283      	cmp	r3, r0
 800880a:	d3f3      	bcc.n	80087f4 <__mcmp+0x18>
 800880c:	e7fa      	b.n	8008804 <__mcmp+0x28>
 800880e:	f04f 32ff 	mov.w	r2, #4294967295
 8008812:	e7f7      	b.n	8008804 <__mcmp+0x28>

08008814 <__mdiff>:
 8008814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	460c      	mov	r4, r1
 800881a:	4606      	mov	r6, r0
 800881c:	4611      	mov	r1, r2
 800881e:	4620      	mov	r0, r4
 8008820:	4690      	mov	r8, r2
 8008822:	f7ff ffdb 	bl	80087dc <__mcmp>
 8008826:	1e05      	subs	r5, r0, #0
 8008828:	d110      	bne.n	800884c <__mdiff+0x38>
 800882a:	4629      	mov	r1, r5
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff fd53 	bl	80082d8 <_Balloc>
 8008832:	b930      	cbnz	r0, 8008842 <__mdiff+0x2e>
 8008834:	4b3a      	ldr	r3, [pc, #232]	; (8008920 <__mdiff+0x10c>)
 8008836:	4602      	mov	r2, r0
 8008838:	f240 2132 	movw	r1, #562	; 0x232
 800883c:	4839      	ldr	r0, [pc, #228]	; (8008924 <__mdiff+0x110>)
 800883e:	f000 fb31 	bl	8008ea4 <__assert_func>
 8008842:	2301      	movs	r3, #1
 8008844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	bfa4      	itt	ge
 800884e:	4643      	movge	r3, r8
 8008850:	46a0      	movge	r8, r4
 8008852:	4630      	mov	r0, r6
 8008854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008858:	bfa6      	itte	ge
 800885a:	461c      	movge	r4, r3
 800885c:	2500      	movge	r5, #0
 800885e:	2501      	movlt	r5, #1
 8008860:	f7ff fd3a 	bl	80082d8 <_Balloc>
 8008864:	b920      	cbnz	r0, 8008870 <__mdiff+0x5c>
 8008866:	4b2e      	ldr	r3, [pc, #184]	; (8008920 <__mdiff+0x10c>)
 8008868:	4602      	mov	r2, r0
 800886a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800886e:	e7e5      	b.n	800883c <__mdiff+0x28>
 8008870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008874:	6926      	ldr	r6, [r4, #16]
 8008876:	60c5      	str	r5, [r0, #12]
 8008878:	f104 0914 	add.w	r9, r4, #20
 800887c:	f108 0514 	add.w	r5, r8, #20
 8008880:	f100 0e14 	add.w	lr, r0, #20
 8008884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800888c:	f108 0210 	add.w	r2, r8, #16
 8008890:	46f2      	mov	sl, lr
 8008892:	2100      	movs	r1, #0
 8008894:	f859 3b04 	ldr.w	r3, [r9], #4
 8008898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800889c:	fa1f f883 	uxth.w	r8, r3
 80088a0:	fa11 f18b 	uxtah	r1, r1, fp
 80088a4:	0c1b      	lsrs	r3, r3, #16
 80088a6:	eba1 0808 	sub.w	r8, r1, r8
 80088aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80088ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088b2:	fa1f f888 	uxth.w	r8, r8
 80088b6:	1419      	asrs	r1, r3, #16
 80088b8:	454e      	cmp	r6, r9
 80088ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088be:	f84a 3b04 	str.w	r3, [sl], #4
 80088c2:	d8e7      	bhi.n	8008894 <__mdiff+0x80>
 80088c4:	1b33      	subs	r3, r6, r4
 80088c6:	3b15      	subs	r3, #21
 80088c8:	f023 0303 	bic.w	r3, r3, #3
 80088cc:	3304      	adds	r3, #4
 80088ce:	3415      	adds	r4, #21
 80088d0:	42a6      	cmp	r6, r4
 80088d2:	bf38      	it	cc
 80088d4:	2304      	movcc	r3, #4
 80088d6:	441d      	add	r5, r3
 80088d8:	4473      	add	r3, lr
 80088da:	469e      	mov	lr, r3
 80088dc:	462e      	mov	r6, r5
 80088de:	4566      	cmp	r6, ip
 80088e0:	d30e      	bcc.n	8008900 <__mdiff+0xec>
 80088e2:	f10c 0203 	add.w	r2, ip, #3
 80088e6:	1b52      	subs	r2, r2, r5
 80088e8:	f022 0203 	bic.w	r2, r2, #3
 80088ec:	3d03      	subs	r5, #3
 80088ee:	45ac      	cmp	ip, r5
 80088f0:	bf38      	it	cc
 80088f2:	2200      	movcc	r2, #0
 80088f4:	441a      	add	r2, r3
 80088f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80088fa:	b17b      	cbz	r3, 800891c <__mdiff+0x108>
 80088fc:	6107      	str	r7, [r0, #16]
 80088fe:	e7a3      	b.n	8008848 <__mdiff+0x34>
 8008900:	f856 8b04 	ldr.w	r8, [r6], #4
 8008904:	fa11 f288 	uxtah	r2, r1, r8
 8008908:	1414      	asrs	r4, r2, #16
 800890a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800890e:	b292      	uxth	r2, r2
 8008910:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008914:	f84e 2b04 	str.w	r2, [lr], #4
 8008918:	1421      	asrs	r1, r4, #16
 800891a:	e7e0      	b.n	80088de <__mdiff+0xca>
 800891c:	3f01      	subs	r7, #1
 800891e:	e7ea      	b.n	80088f6 <__mdiff+0xe2>
 8008920:	0800b5db 	.word	0x0800b5db
 8008924:	0800b5ec 	.word	0x0800b5ec

08008928 <__d2b>:
 8008928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800892c:	4689      	mov	r9, r1
 800892e:	2101      	movs	r1, #1
 8008930:	ec57 6b10 	vmov	r6, r7, d0
 8008934:	4690      	mov	r8, r2
 8008936:	f7ff fccf 	bl	80082d8 <_Balloc>
 800893a:	4604      	mov	r4, r0
 800893c:	b930      	cbnz	r0, 800894c <__d2b+0x24>
 800893e:	4602      	mov	r2, r0
 8008940:	4b25      	ldr	r3, [pc, #148]	; (80089d8 <__d2b+0xb0>)
 8008942:	4826      	ldr	r0, [pc, #152]	; (80089dc <__d2b+0xb4>)
 8008944:	f240 310a 	movw	r1, #778	; 0x30a
 8008948:	f000 faac 	bl	8008ea4 <__assert_func>
 800894c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008950:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008954:	bb35      	cbnz	r5, 80089a4 <__d2b+0x7c>
 8008956:	2e00      	cmp	r6, #0
 8008958:	9301      	str	r3, [sp, #4]
 800895a:	d028      	beq.n	80089ae <__d2b+0x86>
 800895c:	4668      	mov	r0, sp
 800895e:	9600      	str	r6, [sp, #0]
 8008960:	f7ff fd82 	bl	8008468 <__lo0bits>
 8008964:	9900      	ldr	r1, [sp, #0]
 8008966:	b300      	cbz	r0, 80089aa <__d2b+0x82>
 8008968:	9a01      	ldr	r2, [sp, #4]
 800896a:	f1c0 0320 	rsb	r3, r0, #32
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	430b      	orrs	r3, r1
 8008974:	40c2      	lsrs	r2, r0
 8008976:	6163      	str	r3, [r4, #20]
 8008978:	9201      	str	r2, [sp, #4]
 800897a:	9b01      	ldr	r3, [sp, #4]
 800897c:	61a3      	str	r3, [r4, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	bf14      	ite	ne
 8008982:	2202      	movne	r2, #2
 8008984:	2201      	moveq	r2, #1
 8008986:	6122      	str	r2, [r4, #16]
 8008988:	b1d5      	cbz	r5, 80089c0 <__d2b+0x98>
 800898a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800898e:	4405      	add	r5, r0
 8008990:	f8c9 5000 	str.w	r5, [r9]
 8008994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008998:	f8c8 0000 	str.w	r0, [r8]
 800899c:	4620      	mov	r0, r4
 800899e:	b003      	add	sp, #12
 80089a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a8:	e7d5      	b.n	8008956 <__d2b+0x2e>
 80089aa:	6161      	str	r1, [r4, #20]
 80089ac:	e7e5      	b.n	800897a <__d2b+0x52>
 80089ae:	a801      	add	r0, sp, #4
 80089b0:	f7ff fd5a 	bl	8008468 <__lo0bits>
 80089b4:	9b01      	ldr	r3, [sp, #4]
 80089b6:	6163      	str	r3, [r4, #20]
 80089b8:	2201      	movs	r2, #1
 80089ba:	6122      	str	r2, [r4, #16]
 80089bc:	3020      	adds	r0, #32
 80089be:	e7e3      	b.n	8008988 <__d2b+0x60>
 80089c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089c8:	f8c9 0000 	str.w	r0, [r9]
 80089cc:	6918      	ldr	r0, [r3, #16]
 80089ce:	f7ff fd2b 	bl	8008428 <__hi0bits>
 80089d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089d6:	e7df      	b.n	8008998 <__d2b+0x70>
 80089d8:	0800b5db 	.word	0x0800b5db
 80089dc:	0800b5ec 	.word	0x0800b5ec

080089e0 <_calloc_r>:
 80089e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80089e2:	fba1 2402 	umull	r2, r4, r1, r2
 80089e6:	b94c      	cbnz	r4, 80089fc <_calloc_r+0x1c>
 80089e8:	4611      	mov	r1, r2
 80089ea:	9201      	str	r2, [sp, #4]
 80089ec:	f000 f87a 	bl	8008ae4 <_malloc_r>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	4605      	mov	r5, r0
 80089f4:	b930      	cbnz	r0, 8008a04 <_calloc_r+0x24>
 80089f6:	4628      	mov	r0, r5
 80089f8:	b003      	add	sp, #12
 80089fa:	bd30      	pop	{r4, r5, pc}
 80089fc:	220c      	movs	r2, #12
 80089fe:	6002      	str	r2, [r0, #0]
 8008a00:	2500      	movs	r5, #0
 8008a02:	e7f8      	b.n	80089f6 <_calloc_r+0x16>
 8008a04:	4621      	mov	r1, r4
 8008a06:	f7fe f941 	bl	8006c8c <memset>
 8008a0a:	e7f4      	b.n	80089f6 <_calloc_r+0x16>

08008a0c <_free_r>:
 8008a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d044      	beq.n	8008a9c <_free_r+0x90>
 8008a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a16:	9001      	str	r0, [sp, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a1e:	bfb8      	it	lt
 8008a20:	18e4      	addlt	r4, r4, r3
 8008a22:	f000 fa9b 	bl	8008f5c <__malloc_lock>
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <_free_r+0x94>)
 8008a28:	9801      	ldr	r0, [sp, #4]
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	b933      	cbnz	r3, 8008a3c <_free_r+0x30>
 8008a2e:	6063      	str	r3, [r4, #4]
 8008a30:	6014      	str	r4, [r2, #0]
 8008a32:	b003      	add	sp, #12
 8008a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a38:	f000 ba96 	b.w	8008f68 <__malloc_unlock>
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	d908      	bls.n	8008a52 <_free_r+0x46>
 8008a40:	6825      	ldr	r5, [r4, #0]
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf01      	itttt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	1949      	addeq	r1, r1, r5
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	e7ed      	b.n	8008a2e <_free_r+0x22>
 8008a52:	461a      	mov	r2, r3
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b10b      	cbz	r3, 8008a5c <_free_r+0x50>
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d9fa      	bls.n	8008a52 <_free_r+0x46>
 8008a5c:	6811      	ldr	r1, [r2, #0]
 8008a5e:	1855      	adds	r5, r2, r1
 8008a60:	42a5      	cmp	r5, r4
 8008a62:	d10b      	bne.n	8008a7c <_free_r+0x70>
 8008a64:	6824      	ldr	r4, [r4, #0]
 8008a66:	4421      	add	r1, r4
 8008a68:	1854      	adds	r4, r2, r1
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	6011      	str	r1, [r2, #0]
 8008a6e:	d1e0      	bne.n	8008a32 <_free_r+0x26>
 8008a70:	681c      	ldr	r4, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	6053      	str	r3, [r2, #4]
 8008a76:	4421      	add	r1, r4
 8008a78:	6011      	str	r1, [r2, #0]
 8008a7a:	e7da      	b.n	8008a32 <_free_r+0x26>
 8008a7c:	d902      	bls.n	8008a84 <_free_r+0x78>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	e7d6      	b.n	8008a32 <_free_r+0x26>
 8008a84:	6825      	ldr	r5, [r4, #0]
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf04      	itt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	bf04      	itt	eq
 8008a94:	1949      	addeq	r1, r1, r5
 8008a96:	6021      	streq	r1, [r4, #0]
 8008a98:	6054      	str	r4, [r2, #4]
 8008a9a:	e7ca      	b.n	8008a32 <_free_r+0x26>
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bd30      	pop	{r4, r5, pc}
 8008aa0:	20000258 	.word	0x20000258

08008aa4 <sbrk_aligned>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4e0e      	ldr	r6, [pc, #56]	; (8008ae0 <sbrk_aligned+0x3c>)
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	6831      	ldr	r1, [r6, #0]
 8008aac:	4605      	mov	r5, r0
 8008aae:	b911      	cbnz	r1, 8008ab6 <sbrk_aligned+0x12>
 8008ab0:	f000 f9e8 	bl	8008e84 <_sbrk_r>
 8008ab4:	6030      	str	r0, [r6, #0]
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	4628      	mov	r0, r5
 8008aba:	f000 f9e3 	bl	8008e84 <_sbrk_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	d00a      	beq.n	8008ad8 <sbrk_aligned+0x34>
 8008ac2:	1cc4      	adds	r4, r0, #3
 8008ac4:	f024 0403 	bic.w	r4, r4, #3
 8008ac8:	42a0      	cmp	r0, r4
 8008aca:	d007      	beq.n	8008adc <sbrk_aligned+0x38>
 8008acc:	1a21      	subs	r1, r4, r0
 8008ace:	4628      	mov	r0, r5
 8008ad0:	f000 f9d8 	bl	8008e84 <_sbrk_r>
 8008ad4:	3001      	adds	r0, #1
 8008ad6:	d101      	bne.n	8008adc <sbrk_aligned+0x38>
 8008ad8:	f04f 34ff 	mov.w	r4, #4294967295
 8008adc:	4620      	mov	r0, r4
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	2000025c 	.word	0x2000025c

08008ae4 <_malloc_r>:
 8008ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae8:	1ccd      	adds	r5, r1, #3
 8008aea:	f025 0503 	bic.w	r5, r5, #3
 8008aee:	3508      	adds	r5, #8
 8008af0:	2d0c      	cmp	r5, #12
 8008af2:	bf38      	it	cc
 8008af4:	250c      	movcc	r5, #12
 8008af6:	2d00      	cmp	r5, #0
 8008af8:	4607      	mov	r7, r0
 8008afa:	db01      	blt.n	8008b00 <_malloc_r+0x1c>
 8008afc:	42a9      	cmp	r1, r5
 8008afe:	d905      	bls.n	8008b0c <_malloc_r+0x28>
 8008b00:	230c      	movs	r3, #12
 8008b02:	603b      	str	r3, [r7, #0]
 8008b04:	2600      	movs	r6, #0
 8008b06:	4630      	mov	r0, r6
 8008b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b0c:	4e2e      	ldr	r6, [pc, #184]	; (8008bc8 <_malloc_r+0xe4>)
 8008b0e:	f000 fa25 	bl	8008f5c <__malloc_lock>
 8008b12:	6833      	ldr	r3, [r6, #0]
 8008b14:	461c      	mov	r4, r3
 8008b16:	bb34      	cbnz	r4, 8008b66 <_malloc_r+0x82>
 8008b18:	4629      	mov	r1, r5
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	f7ff ffc2 	bl	8008aa4 <sbrk_aligned>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	4604      	mov	r4, r0
 8008b24:	d14d      	bne.n	8008bc2 <_malloc_r+0xde>
 8008b26:	6834      	ldr	r4, [r6, #0]
 8008b28:	4626      	mov	r6, r4
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	d140      	bne.n	8008bb0 <_malloc_r+0xcc>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	4631      	mov	r1, r6
 8008b32:	4638      	mov	r0, r7
 8008b34:	eb04 0803 	add.w	r8, r4, r3
 8008b38:	f000 f9a4 	bl	8008e84 <_sbrk_r>
 8008b3c:	4580      	cmp	r8, r0
 8008b3e:	d13a      	bne.n	8008bb6 <_malloc_r+0xd2>
 8008b40:	6821      	ldr	r1, [r4, #0]
 8008b42:	3503      	adds	r5, #3
 8008b44:	1a6d      	subs	r5, r5, r1
 8008b46:	f025 0503 	bic.w	r5, r5, #3
 8008b4a:	3508      	adds	r5, #8
 8008b4c:	2d0c      	cmp	r5, #12
 8008b4e:	bf38      	it	cc
 8008b50:	250c      	movcc	r5, #12
 8008b52:	4629      	mov	r1, r5
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7ff ffa5 	bl	8008aa4 <sbrk_aligned>
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d02b      	beq.n	8008bb6 <_malloc_r+0xd2>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	442b      	add	r3, r5
 8008b62:	6023      	str	r3, [r4, #0]
 8008b64:	e00e      	b.n	8008b84 <_malloc_r+0xa0>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	1b52      	subs	r2, r2, r5
 8008b6a:	d41e      	bmi.n	8008baa <_malloc_r+0xc6>
 8008b6c:	2a0b      	cmp	r2, #11
 8008b6e:	d916      	bls.n	8008b9e <_malloc_r+0xba>
 8008b70:	1961      	adds	r1, r4, r5
 8008b72:	42a3      	cmp	r3, r4
 8008b74:	6025      	str	r5, [r4, #0]
 8008b76:	bf18      	it	ne
 8008b78:	6059      	strne	r1, [r3, #4]
 8008b7a:	6863      	ldr	r3, [r4, #4]
 8008b7c:	bf08      	it	eq
 8008b7e:	6031      	streq	r1, [r6, #0]
 8008b80:	5162      	str	r2, [r4, r5]
 8008b82:	604b      	str	r3, [r1, #4]
 8008b84:	4638      	mov	r0, r7
 8008b86:	f104 060b 	add.w	r6, r4, #11
 8008b8a:	f000 f9ed 	bl	8008f68 <__malloc_unlock>
 8008b8e:	f026 0607 	bic.w	r6, r6, #7
 8008b92:	1d23      	adds	r3, r4, #4
 8008b94:	1af2      	subs	r2, r6, r3
 8008b96:	d0b6      	beq.n	8008b06 <_malloc_r+0x22>
 8008b98:	1b9b      	subs	r3, r3, r6
 8008b9a:	50a3      	str	r3, [r4, r2]
 8008b9c:	e7b3      	b.n	8008b06 <_malloc_r+0x22>
 8008b9e:	6862      	ldr	r2, [r4, #4]
 8008ba0:	42a3      	cmp	r3, r4
 8008ba2:	bf0c      	ite	eq
 8008ba4:	6032      	streq	r2, [r6, #0]
 8008ba6:	605a      	strne	r2, [r3, #4]
 8008ba8:	e7ec      	b.n	8008b84 <_malloc_r+0xa0>
 8008baa:	4623      	mov	r3, r4
 8008bac:	6864      	ldr	r4, [r4, #4]
 8008bae:	e7b2      	b.n	8008b16 <_malloc_r+0x32>
 8008bb0:	4634      	mov	r4, r6
 8008bb2:	6876      	ldr	r6, [r6, #4]
 8008bb4:	e7b9      	b.n	8008b2a <_malloc_r+0x46>
 8008bb6:	230c      	movs	r3, #12
 8008bb8:	603b      	str	r3, [r7, #0]
 8008bba:	4638      	mov	r0, r7
 8008bbc:	f000 f9d4 	bl	8008f68 <__malloc_unlock>
 8008bc0:	e7a1      	b.n	8008b06 <_malloc_r+0x22>
 8008bc2:	6025      	str	r5, [r4, #0]
 8008bc4:	e7de      	b.n	8008b84 <_malloc_r+0xa0>
 8008bc6:	bf00      	nop
 8008bc8:	20000258 	.word	0x20000258

08008bcc <__ssputs_r>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	688e      	ldr	r6, [r1, #8]
 8008bd2:	429e      	cmp	r6, r3
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	4690      	mov	r8, r2
 8008bda:	461f      	mov	r7, r3
 8008bdc:	d838      	bhi.n	8008c50 <__ssputs_r+0x84>
 8008bde:	898a      	ldrh	r2, [r1, #12]
 8008be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008be4:	d032      	beq.n	8008c4c <__ssputs_r+0x80>
 8008be6:	6825      	ldr	r5, [r4, #0]
 8008be8:	6909      	ldr	r1, [r1, #16]
 8008bea:	eba5 0901 	sub.w	r9, r5, r1
 8008bee:	6965      	ldr	r5, [r4, #20]
 8008bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	444b      	add	r3, r9
 8008bfc:	106d      	asrs	r5, r5, #1
 8008bfe:	429d      	cmp	r5, r3
 8008c00:	bf38      	it	cc
 8008c02:	461d      	movcc	r5, r3
 8008c04:	0553      	lsls	r3, r2, #21
 8008c06:	d531      	bpl.n	8008c6c <__ssputs_r+0xa0>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7ff ff6b 	bl	8008ae4 <_malloc_r>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	b950      	cbnz	r0, 8008c28 <__ssputs_r+0x5c>
 8008c12:	230c      	movs	r3, #12
 8008c14:	f8ca 3000 	str.w	r3, [sl]
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c28:	6921      	ldr	r1, [r4, #16]
 8008c2a:	464a      	mov	r2, r9
 8008c2c:	f7ff fb46 	bl	80082bc <memcpy>
 8008c30:	89a3      	ldrh	r3, [r4, #12]
 8008c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	6126      	str	r6, [r4, #16]
 8008c3e:	6165      	str	r5, [r4, #20]
 8008c40:	444e      	add	r6, r9
 8008c42:	eba5 0509 	sub.w	r5, r5, r9
 8008c46:	6026      	str	r6, [r4, #0]
 8008c48:	60a5      	str	r5, [r4, #8]
 8008c4a:	463e      	mov	r6, r7
 8008c4c:	42be      	cmp	r6, r7
 8008c4e:	d900      	bls.n	8008c52 <__ssputs_r+0x86>
 8008c50:	463e      	mov	r6, r7
 8008c52:	6820      	ldr	r0, [r4, #0]
 8008c54:	4632      	mov	r2, r6
 8008c56:	4641      	mov	r1, r8
 8008c58:	f000 f966 	bl	8008f28 <memmove>
 8008c5c:	68a3      	ldr	r3, [r4, #8]
 8008c5e:	1b9b      	subs	r3, r3, r6
 8008c60:	60a3      	str	r3, [r4, #8]
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	4433      	add	r3, r6
 8008c66:	6023      	str	r3, [r4, #0]
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e7db      	b.n	8008c24 <__ssputs_r+0x58>
 8008c6c:	462a      	mov	r2, r5
 8008c6e:	f000 f981 	bl	8008f74 <_realloc_r>
 8008c72:	4606      	mov	r6, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d1e1      	bne.n	8008c3c <__ssputs_r+0x70>
 8008c78:	6921      	ldr	r1, [r4, #16]
 8008c7a:	4650      	mov	r0, sl
 8008c7c:	f7ff fec6 	bl	8008a0c <_free_r>
 8008c80:	e7c7      	b.n	8008c12 <__ssputs_r+0x46>
	...

08008c84 <_svfiprintf_r>:
 8008c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	4698      	mov	r8, r3
 8008c8a:	898b      	ldrh	r3, [r1, #12]
 8008c8c:	061b      	lsls	r3, r3, #24
 8008c8e:	b09d      	sub	sp, #116	; 0x74
 8008c90:	4607      	mov	r7, r0
 8008c92:	460d      	mov	r5, r1
 8008c94:	4614      	mov	r4, r2
 8008c96:	d50e      	bpl.n	8008cb6 <_svfiprintf_r+0x32>
 8008c98:	690b      	ldr	r3, [r1, #16]
 8008c9a:	b963      	cbnz	r3, 8008cb6 <_svfiprintf_r+0x32>
 8008c9c:	2140      	movs	r1, #64	; 0x40
 8008c9e:	f7ff ff21 	bl	8008ae4 <_malloc_r>
 8008ca2:	6028      	str	r0, [r5, #0]
 8008ca4:	6128      	str	r0, [r5, #16]
 8008ca6:	b920      	cbnz	r0, 8008cb2 <_svfiprintf_r+0x2e>
 8008ca8:	230c      	movs	r3, #12
 8008caa:	603b      	str	r3, [r7, #0]
 8008cac:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb0:	e0d1      	b.n	8008e56 <_svfiprintf_r+0x1d2>
 8008cb2:	2340      	movs	r3, #64	; 0x40
 8008cb4:	616b      	str	r3, [r5, #20]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cba:	2320      	movs	r3, #32
 8008cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cc4:	2330      	movs	r3, #48	; 0x30
 8008cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e70 <_svfiprintf_r+0x1ec>
 8008cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cce:	f04f 0901 	mov.w	r9, #1
 8008cd2:	4623      	mov	r3, r4
 8008cd4:	469a      	mov	sl, r3
 8008cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cda:	b10a      	cbz	r2, 8008ce0 <_svfiprintf_r+0x5c>
 8008cdc:	2a25      	cmp	r2, #37	; 0x25
 8008cde:	d1f9      	bne.n	8008cd4 <_svfiprintf_r+0x50>
 8008ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ce4:	d00b      	beq.n	8008cfe <_svfiprintf_r+0x7a>
 8008ce6:	465b      	mov	r3, fp
 8008ce8:	4622      	mov	r2, r4
 8008cea:	4629      	mov	r1, r5
 8008cec:	4638      	mov	r0, r7
 8008cee:	f7ff ff6d 	bl	8008bcc <__ssputs_r>
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f000 80aa 	beq.w	8008e4c <_svfiprintf_r+0x1c8>
 8008cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cfa:	445a      	add	r2, fp
 8008cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	f000 80a2 	beq.w	8008e4c <_svfiprintf_r+0x1c8>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d12:	f10a 0a01 	add.w	sl, sl, #1
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	9307      	str	r3, [sp, #28]
 8008d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d20:	4654      	mov	r4, sl
 8008d22:	2205      	movs	r2, #5
 8008d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d28:	4851      	ldr	r0, [pc, #324]	; (8008e70 <_svfiprintf_r+0x1ec>)
 8008d2a:	f7f7 fa61 	bl	80001f0 <memchr>
 8008d2e:	9a04      	ldr	r2, [sp, #16]
 8008d30:	b9d8      	cbnz	r0, 8008d6a <_svfiprintf_r+0xe6>
 8008d32:	06d0      	lsls	r0, r2, #27
 8008d34:	bf44      	itt	mi
 8008d36:	2320      	movmi	r3, #32
 8008d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d3c:	0711      	lsls	r1, r2, #28
 8008d3e:	bf44      	itt	mi
 8008d40:	232b      	movmi	r3, #43	; 0x2b
 8008d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d46:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008d4c:	d015      	beq.n	8008d7a <_svfiprintf_r+0xf6>
 8008d4e:	9a07      	ldr	r2, [sp, #28]
 8008d50:	4654      	mov	r4, sl
 8008d52:	2000      	movs	r0, #0
 8008d54:	f04f 0c0a 	mov.w	ip, #10
 8008d58:	4621      	mov	r1, r4
 8008d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d5e:	3b30      	subs	r3, #48	; 0x30
 8008d60:	2b09      	cmp	r3, #9
 8008d62:	d94e      	bls.n	8008e02 <_svfiprintf_r+0x17e>
 8008d64:	b1b0      	cbz	r0, 8008d94 <_svfiprintf_r+0x110>
 8008d66:	9207      	str	r2, [sp, #28]
 8008d68:	e014      	b.n	8008d94 <_svfiprintf_r+0x110>
 8008d6a:	eba0 0308 	sub.w	r3, r0, r8
 8008d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d72:	4313      	orrs	r3, r2
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	46a2      	mov	sl, r4
 8008d78:	e7d2      	b.n	8008d20 <_svfiprintf_r+0x9c>
 8008d7a:	9b03      	ldr	r3, [sp, #12]
 8008d7c:	1d19      	adds	r1, r3, #4
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	9103      	str	r1, [sp, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	bfbb      	ittet	lt
 8008d86:	425b      	neglt	r3, r3
 8008d88:	f042 0202 	orrlt.w	r2, r2, #2
 8008d8c:	9307      	strge	r3, [sp, #28]
 8008d8e:	9307      	strlt	r3, [sp, #28]
 8008d90:	bfb8      	it	lt
 8008d92:	9204      	strlt	r2, [sp, #16]
 8008d94:	7823      	ldrb	r3, [r4, #0]
 8008d96:	2b2e      	cmp	r3, #46	; 0x2e
 8008d98:	d10c      	bne.n	8008db4 <_svfiprintf_r+0x130>
 8008d9a:	7863      	ldrb	r3, [r4, #1]
 8008d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008d9e:	d135      	bne.n	8008e0c <_svfiprintf_r+0x188>
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	1d1a      	adds	r2, r3, #4
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	9203      	str	r2, [sp, #12]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bfb8      	it	lt
 8008dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8008db0:	3402      	adds	r4, #2
 8008db2:	9305      	str	r3, [sp, #20]
 8008db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e80 <_svfiprintf_r+0x1fc>
 8008db8:	7821      	ldrb	r1, [r4, #0]
 8008dba:	2203      	movs	r2, #3
 8008dbc:	4650      	mov	r0, sl
 8008dbe:	f7f7 fa17 	bl	80001f0 <memchr>
 8008dc2:	b140      	cbz	r0, 8008dd6 <_svfiprintf_r+0x152>
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	eba0 000a 	sub.w	r0, r0, sl
 8008dca:	fa03 f000 	lsl.w	r0, r3, r0
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	4303      	orrs	r3, r0
 8008dd2:	3401      	adds	r4, #1
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dda:	4826      	ldr	r0, [pc, #152]	; (8008e74 <_svfiprintf_r+0x1f0>)
 8008ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008de0:	2206      	movs	r2, #6
 8008de2:	f7f7 fa05 	bl	80001f0 <memchr>
 8008de6:	2800      	cmp	r0, #0
 8008de8:	d038      	beq.n	8008e5c <_svfiprintf_r+0x1d8>
 8008dea:	4b23      	ldr	r3, [pc, #140]	; (8008e78 <_svfiprintf_r+0x1f4>)
 8008dec:	bb1b      	cbnz	r3, 8008e36 <_svfiprintf_r+0x1b2>
 8008dee:	9b03      	ldr	r3, [sp, #12]
 8008df0:	3307      	adds	r3, #7
 8008df2:	f023 0307 	bic.w	r3, r3, #7
 8008df6:	3308      	adds	r3, #8
 8008df8:	9303      	str	r3, [sp, #12]
 8008dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dfc:	4433      	add	r3, r6
 8008dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008e00:	e767      	b.n	8008cd2 <_svfiprintf_r+0x4e>
 8008e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e06:	460c      	mov	r4, r1
 8008e08:	2001      	movs	r0, #1
 8008e0a:	e7a5      	b.n	8008d58 <_svfiprintf_r+0xd4>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	3401      	adds	r4, #1
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	4619      	mov	r1, r3
 8008e14:	f04f 0c0a 	mov.w	ip, #10
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e1e:	3a30      	subs	r2, #48	; 0x30
 8008e20:	2a09      	cmp	r2, #9
 8008e22:	d903      	bls.n	8008e2c <_svfiprintf_r+0x1a8>
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0c5      	beq.n	8008db4 <_svfiprintf_r+0x130>
 8008e28:	9105      	str	r1, [sp, #20]
 8008e2a:	e7c3      	b.n	8008db4 <_svfiprintf_r+0x130>
 8008e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e30:	4604      	mov	r4, r0
 8008e32:	2301      	movs	r3, #1
 8008e34:	e7f0      	b.n	8008e18 <_svfiprintf_r+0x194>
 8008e36:	ab03      	add	r3, sp, #12
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <_svfiprintf_r+0x1f8>)
 8008e3e:	a904      	add	r1, sp, #16
 8008e40:	4638      	mov	r0, r7
 8008e42:	f7fd ffcb 	bl	8006ddc <_printf_float>
 8008e46:	1c42      	adds	r2, r0, #1
 8008e48:	4606      	mov	r6, r0
 8008e4a:	d1d6      	bne.n	8008dfa <_svfiprintf_r+0x176>
 8008e4c:	89ab      	ldrh	r3, [r5, #12]
 8008e4e:	065b      	lsls	r3, r3, #25
 8008e50:	f53f af2c 	bmi.w	8008cac <_svfiprintf_r+0x28>
 8008e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e56:	b01d      	add	sp, #116	; 0x74
 8008e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e5c:	ab03      	add	r3, sp, #12
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	462a      	mov	r2, r5
 8008e62:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <_svfiprintf_r+0x1f8>)
 8008e64:	a904      	add	r1, sp, #16
 8008e66:	4638      	mov	r0, r7
 8008e68:	f7fe fa5c 	bl	8007324 <_printf_i>
 8008e6c:	e7eb      	b.n	8008e46 <_svfiprintf_r+0x1c2>
 8008e6e:	bf00      	nop
 8008e70:	0800b744 	.word	0x0800b744
 8008e74:	0800b74e 	.word	0x0800b74e
 8008e78:	08006ddd 	.word	0x08006ddd
 8008e7c:	08008bcd 	.word	0x08008bcd
 8008e80:	0800b74a 	.word	0x0800b74a

08008e84 <_sbrk_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d06      	ldr	r5, [pc, #24]	; (8008ea0 <_sbrk_r+0x1c>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	602b      	str	r3, [r5, #0]
 8008e90:	f001 febc 	bl	800ac0c <_sbrk>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	d102      	bne.n	8008e9e <_sbrk_r+0x1a>
 8008e98:	682b      	ldr	r3, [r5, #0]
 8008e9a:	b103      	cbz	r3, 8008e9e <_sbrk_r+0x1a>
 8008e9c:	6023      	str	r3, [r4, #0]
 8008e9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ea0:	20000260 	.word	0x20000260

08008ea4 <__assert_func>:
 8008ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <__assert_func+0x2c>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4605      	mov	r5, r0
 8008eb0:	68d8      	ldr	r0, [r3, #12]
 8008eb2:	b14c      	cbz	r4, 8008ec8 <__assert_func+0x24>
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <__assert_func+0x30>)
 8008eb6:	9100      	str	r1, [sp, #0]
 8008eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ebc:	4906      	ldr	r1, [pc, #24]	; (8008ed8 <__assert_func+0x34>)
 8008ebe:	462b      	mov	r3, r5
 8008ec0:	f000 f80e 	bl	8008ee0 <fiprintf>
 8008ec4:	f000 faac 	bl	8009420 <abort>
 8008ec8:	4b04      	ldr	r3, [pc, #16]	; (8008edc <__assert_func+0x38>)
 8008eca:	461c      	mov	r4, r3
 8008ecc:	e7f3      	b.n	8008eb6 <__assert_func+0x12>
 8008ece:	bf00      	nop
 8008ed0:	2000002c 	.word	0x2000002c
 8008ed4:	0800b755 	.word	0x0800b755
 8008ed8:	0800b762 	.word	0x0800b762
 8008edc:	0800b790 	.word	0x0800b790

08008ee0 <fiprintf>:
 8008ee0:	b40e      	push	{r1, r2, r3}
 8008ee2:	b503      	push	{r0, r1, lr}
 8008ee4:	4601      	mov	r1, r0
 8008ee6:	ab03      	add	r3, sp, #12
 8008ee8:	4805      	ldr	r0, [pc, #20]	; (8008f00 <fiprintf+0x20>)
 8008eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eee:	6800      	ldr	r0, [r0, #0]
 8008ef0:	9301      	str	r3, [sp, #4]
 8008ef2:	f000 f897 	bl	8009024 <_vfiprintf_r>
 8008ef6:	b002      	add	sp, #8
 8008ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008efc:	b003      	add	sp, #12
 8008efe:	4770      	bx	lr
 8008f00:	2000002c 	.word	0x2000002c

08008f04 <__ascii_mbtowc>:
 8008f04:	b082      	sub	sp, #8
 8008f06:	b901      	cbnz	r1, 8008f0a <__ascii_mbtowc+0x6>
 8008f08:	a901      	add	r1, sp, #4
 8008f0a:	b142      	cbz	r2, 8008f1e <__ascii_mbtowc+0x1a>
 8008f0c:	b14b      	cbz	r3, 8008f22 <__ascii_mbtowc+0x1e>
 8008f0e:	7813      	ldrb	r3, [r2, #0]
 8008f10:	600b      	str	r3, [r1, #0]
 8008f12:	7812      	ldrb	r2, [r2, #0]
 8008f14:	1e10      	subs	r0, r2, #0
 8008f16:	bf18      	it	ne
 8008f18:	2001      	movne	r0, #1
 8008f1a:	b002      	add	sp, #8
 8008f1c:	4770      	bx	lr
 8008f1e:	4610      	mov	r0, r2
 8008f20:	e7fb      	b.n	8008f1a <__ascii_mbtowc+0x16>
 8008f22:	f06f 0001 	mvn.w	r0, #1
 8008f26:	e7f8      	b.n	8008f1a <__ascii_mbtowc+0x16>

08008f28 <memmove>:
 8008f28:	4288      	cmp	r0, r1
 8008f2a:	b510      	push	{r4, lr}
 8008f2c:	eb01 0402 	add.w	r4, r1, r2
 8008f30:	d902      	bls.n	8008f38 <memmove+0x10>
 8008f32:	4284      	cmp	r4, r0
 8008f34:	4623      	mov	r3, r4
 8008f36:	d807      	bhi.n	8008f48 <memmove+0x20>
 8008f38:	1e43      	subs	r3, r0, #1
 8008f3a:	42a1      	cmp	r1, r4
 8008f3c:	d008      	beq.n	8008f50 <memmove+0x28>
 8008f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f46:	e7f8      	b.n	8008f3a <memmove+0x12>
 8008f48:	4402      	add	r2, r0
 8008f4a:	4601      	mov	r1, r0
 8008f4c:	428a      	cmp	r2, r1
 8008f4e:	d100      	bne.n	8008f52 <memmove+0x2a>
 8008f50:	bd10      	pop	{r4, pc}
 8008f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f5a:	e7f7      	b.n	8008f4c <memmove+0x24>

08008f5c <__malloc_lock>:
 8008f5c:	4801      	ldr	r0, [pc, #4]	; (8008f64 <__malloc_lock+0x8>)
 8008f5e:	f000 bc1f 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 8008f62:	bf00      	nop
 8008f64:	20000264 	.word	0x20000264

08008f68 <__malloc_unlock>:
 8008f68:	4801      	ldr	r0, [pc, #4]	; (8008f70 <__malloc_unlock+0x8>)
 8008f6a:	f000 bc1a 	b.w	80097a2 <__retarget_lock_release_recursive>
 8008f6e:	bf00      	nop
 8008f70:	20000264 	.word	0x20000264

08008f74 <_realloc_r>:
 8008f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f78:	4680      	mov	r8, r0
 8008f7a:	4614      	mov	r4, r2
 8008f7c:	460e      	mov	r6, r1
 8008f7e:	b921      	cbnz	r1, 8008f8a <_realloc_r+0x16>
 8008f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f84:	4611      	mov	r1, r2
 8008f86:	f7ff bdad 	b.w	8008ae4 <_malloc_r>
 8008f8a:	b92a      	cbnz	r2, 8008f98 <_realloc_r+0x24>
 8008f8c:	f7ff fd3e 	bl	8008a0c <_free_r>
 8008f90:	4625      	mov	r5, r4
 8008f92:	4628      	mov	r0, r5
 8008f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f98:	f000 fc6a 	bl	8009870 <_malloc_usable_size_r>
 8008f9c:	4284      	cmp	r4, r0
 8008f9e:	4607      	mov	r7, r0
 8008fa0:	d802      	bhi.n	8008fa8 <_realloc_r+0x34>
 8008fa2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fa6:	d812      	bhi.n	8008fce <_realloc_r+0x5a>
 8008fa8:	4621      	mov	r1, r4
 8008faa:	4640      	mov	r0, r8
 8008fac:	f7ff fd9a 	bl	8008ae4 <_malloc_r>
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d0ed      	beq.n	8008f92 <_realloc_r+0x1e>
 8008fb6:	42bc      	cmp	r4, r7
 8008fb8:	4622      	mov	r2, r4
 8008fba:	4631      	mov	r1, r6
 8008fbc:	bf28      	it	cs
 8008fbe:	463a      	movcs	r2, r7
 8008fc0:	f7ff f97c 	bl	80082bc <memcpy>
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	f7ff fd20 	bl	8008a0c <_free_r>
 8008fcc:	e7e1      	b.n	8008f92 <_realloc_r+0x1e>
 8008fce:	4635      	mov	r5, r6
 8008fd0:	e7df      	b.n	8008f92 <_realloc_r+0x1e>

08008fd2 <__sfputc_r>:
 8008fd2:	6893      	ldr	r3, [r2, #8]
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	b410      	push	{r4}
 8008fda:	6093      	str	r3, [r2, #8]
 8008fdc:	da08      	bge.n	8008ff0 <__sfputc_r+0x1e>
 8008fde:	6994      	ldr	r4, [r2, #24]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	db01      	blt.n	8008fe8 <__sfputc_r+0x16>
 8008fe4:	290a      	cmp	r1, #10
 8008fe6:	d103      	bne.n	8008ff0 <__sfputc_r+0x1e>
 8008fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fec:	f000 b94a 	b.w	8009284 <__swbuf_r>
 8008ff0:	6813      	ldr	r3, [r2, #0]
 8008ff2:	1c58      	adds	r0, r3, #1
 8008ff4:	6010      	str	r0, [r2, #0]
 8008ff6:	7019      	strb	r1, [r3, #0]
 8008ff8:	4608      	mov	r0, r1
 8008ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <__sfputs_r>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	4614      	mov	r4, r2
 8009008:	18d5      	adds	r5, r2, r3
 800900a:	42ac      	cmp	r4, r5
 800900c:	d101      	bne.n	8009012 <__sfputs_r+0x12>
 800900e:	2000      	movs	r0, #0
 8009010:	e007      	b.n	8009022 <__sfputs_r+0x22>
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	463a      	mov	r2, r7
 8009018:	4630      	mov	r0, r6
 800901a:	f7ff ffda 	bl	8008fd2 <__sfputc_r>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d1f3      	bne.n	800900a <__sfputs_r+0xa>
 8009022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009024 <_vfiprintf_r>:
 8009024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009028:	460d      	mov	r5, r1
 800902a:	b09d      	sub	sp, #116	; 0x74
 800902c:	4614      	mov	r4, r2
 800902e:	4698      	mov	r8, r3
 8009030:	4606      	mov	r6, r0
 8009032:	b118      	cbz	r0, 800903c <_vfiprintf_r+0x18>
 8009034:	6983      	ldr	r3, [r0, #24]
 8009036:	b90b      	cbnz	r3, 800903c <_vfiprintf_r+0x18>
 8009038:	f000 fb14 	bl	8009664 <__sinit>
 800903c:	4b89      	ldr	r3, [pc, #548]	; (8009264 <_vfiprintf_r+0x240>)
 800903e:	429d      	cmp	r5, r3
 8009040:	d11b      	bne.n	800907a <_vfiprintf_r+0x56>
 8009042:	6875      	ldr	r5, [r6, #4]
 8009044:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009046:	07d9      	lsls	r1, r3, #31
 8009048:	d405      	bmi.n	8009056 <_vfiprintf_r+0x32>
 800904a:	89ab      	ldrh	r3, [r5, #12]
 800904c:	059a      	lsls	r2, r3, #22
 800904e:	d402      	bmi.n	8009056 <_vfiprintf_r+0x32>
 8009050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009052:	f000 fba5 	bl	80097a0 <__retarget_lock_acquire_recursive>
 8009056:	89ab      	ldrh	r3, [r5, #12]
 8009058:	071b      	lsls	r3, r3, #28
 800905a:	d501      	bpl.n	8009060 <_vfiprintf_r+0x3c>
 800905c:	692b      	ldr	r3, [r5, #16]
 800905e:	b9eb      	cbnz	r3, 800909c <_vfiprintf_r+0x78>
 8009060:	4629      	mov	r1, r5
 8009062:	4630      	mov	r0, r6
 8009064:	f000 f96e 	bl	8009344 <__swsetup_r>
 8009068:	b1c0      	cbz	r0, 800909c <_vfiprintf_r+0x78>
 800906a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800906c:	07dc      	lsls	r4, r3, #31
 800906e:	d50e      	bpl.n	800908e <_vfiprintf_r+0x6a>
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	b01d      	add	sp, #116	; 0x74
 8009076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800907a:	4b7b      	ldr	r3, [pc, #492]	; (8009268 <_vfiprintf_r+0x244>)
 800907c:	429d      	cmp	r5, r3
 800907e:	d101      	bne.n	8009084 <_vfiprintf_r+0x60>
 8009080:	68b5      	ldr	r5, [r6, #8]
 8009082:	e7df      	b.n	8009044 <_vfiprintf_r+0x20>
 8009084:	4b79      	ldr	r3, [pc, #484]	; (800926c <_vfiprintf_r+0x248>)
 8009086:	429d      	cmp	r5, r3
 8009088:	bf08      	it	eq
 800908a:	68f5      	ldreq	r5, [r6, #12]
 800908c:	e7da      	b.n	8009044 <_vfiprintf_r+0x20>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	0598      	lsls	r0, r3, #22
 8009092:	d4ed      	bmi.n	8009070 <_vfiprintf_r+0x4c>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f000 fb84 	bl	80097a2 <__retarget_lock_release_recursive>
 800909a:	e7e9      	b.n	8009070 <_vfiprintf_r+0x4c>
 800909c:	2300      	movs	r3, #0
 800909e:	9309      	str	r3, [sp, #36]	; 0x24
 80090a0:	2320      	movs	r3, #32
 80090a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090aa:	2330      	movs	r3, #48	; 0x30
 80090ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009270 <_vfiprintf_r+0x24c>
 80090b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b4:	f04f 0901 	mov.w	r9, #1
 80090b8:	4623      	mov	r3, r4
 80090ba:	469a      	mov	sl, r3
 80090bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c0:	b10a      	cbz	r2, 80090c6 <_vfiprintf_r+0xa2>
 80090c2:	2a25      	cmp	r2, #37	; 0x25
 80090c4:	d1f9      	bne.n	80090ba <_vfiprintf_r+0x96>
 80090c6:	ebba 0b04 	subs.w	fp, sl, r4
 80090ca:	d00b      	beq.n	80090e4 <_vfiprintf_r+0xc0>
 80090cc:	465b      	mov	r3, fp
 80090ce:	4622      	mov	r2, r4
 80090d0:	4629      	mov	r1, r5
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ff94 	bl	8009000 <__sfputs_r>
 80090d8:	3001      	adds	r0, #1
 80090da:	f000 80aa 	beq.w	8009232 <_vfiprintf_r+0x20e>
 80090de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090e0:	445a      	add	r2, fp
 80090e2:	9209      	str	r2, [sp, #36]	; 0x24
 80090e4:	f89a 3000 	ldrb.w	r3, [sl]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80a2 	beq.w	8009232 <_vfiprintf_r+0x20e>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f04f 32ff 	mov.w	r2, #4294967295
 80090f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f8:	f10a 0a01 	add.w	sl, sl, #1
 80090fc:	9304      	str	r3, [sp, #16]
 80090fe:	9307      	str	r3, [sp, #28]
 8009100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009104:	931a      	str	r3, [sp, #104]	; 0x68
 8009106:	4654      	mov	r4, sl
 8009108:	2205      	movs	r2, #5
 800910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910e:	4858      	ldr	r0, [pc, #352]	; (8009270 <_vfiprintf_r+0x24c>)
 8009110:	f7f7 f86e 	bl	80001f0 <memchr>
 8009114:	9a04      	ldr	r2, [sp, #16]
 8009116:	b9d8      	cbnz	r0, 8009150 <_vfiprintf_r+0x12c>
 8009118:	06d1      	lsls	r1, r2, #27
 800911a:	bf44      	itt	mi
 800911c:	2320      	movmi	r3, #32
 800911e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009122:	0713      	lsls	r3, r2, #28
 8009124:	bf44      	itt	mi
 8009126:	232b      	movmi	r3, #43	; 0x2b
 8009128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912c:	f89a 3000 	ldrb.w	r3, [sl]
 8009130:	2b2a      	cmp	r3, #42	; 0x2a
 8009132:	d015      	beq.n	8009160 <_vfiprintf_r+0x13c>
 8009134:	9a07      	ldr	r2, [sp, #28]
 8009136:	4654      	mov	r4, sl
 8009138:	2000      	movs	r0, #0
 800913a:	f04f 0c0a 	mov.w	ip, #10
 800913e:	4621      	mov	r1, r4
 8009140:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009144:	3b30      	subs	r3, #48	; 0x30
 8009146:	2b09      	cmp	r3, #9
 8009148:	d94e      	bls.n	80091e8 <_vfiprintf_r+0x1c4>
 800914a:	b1b0      	cbz	r0, 800917a <_vfiprintf_r+0x156>
 800914c:	9207      	str	r2, [sp, #28]
 800914e:	e014      	b.n	800917a <_vfiprintf_r+0x156>
 8009150:	eba0 0308 	sub.w	r3, r0, r8
 8009154:	fa09 f303 	lsl.w	r3, r9, r3
 8009158:	4313      	orrs	r3, r2
 800915a:	9304      	str	r3, [sp, #16]
 800915c:	46a2      	mov	sl, r4
 800915e:	e7d2      	b.n	8009106 <_vfiprintf_r+0xe2>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	1d19      	adds	r1, r3, #4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	9103      	str	r1, [sp, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	bfbb      	ittet	lt
 800916c:	425b      	neglt	r3, r3
 800916e:	f042 0202 	orrlt.w	r2, r2, #2
 8009172:	9307      	strge	r3, [sp, #28]
 8009174:	9307      	strlt	r3, [sp, #28]
 8009176:	bfb8      	it	lt
 8009178:	9204      	strlt	r2, [sp, #16]
 800917a:	7823      	ldrb	r3, [r4, #0]
 800917c:	2b2e      	cmp	r3, #46	; 0x2e
 800917e:	d10c      	bne.n	800919a <_vfiprintf_r+0x176>
 8009180:	7863      	ldrb	r3, [r4, #1]
 8009182:	2b2a      	cmp	r3, #42	; 0x2a
 8009184:	d135      	bne.n	80091f2 <_vfiprintf_r+0x1ce>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	9203      	str	r2, [sp, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	bfb8      	it	lt
 8009192:	f04f 33ff 	movlt.w	r3, #4294967295
 8009196:	3402      	adds	r4, #2
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009280 <_vfiprintf_r+0x25c>
 800919e:	7821      	ldrb	r1, [r4, #0]
 80091a0:	2203      	movs	r2, #3
 80091a2:	4650      	mov	r0, sl
 80091a4:	f7f7 f824 	bl	80001f0 <memchr>
 80091a8:	b140      	cbz	r0, 80091bc <_vfiprintf_r+0x198>
 80091aa:	2340      	movs	r3, #64	; 0x40
 80091ac:	eba0 000a 	sub.w	r0, r0, sl
 80091b0:	fa03 f000 	lsl.w	r0, r3, r0
 80091b4:	9b04      	ldr	r3, [sp, #16]
 80091b6:	4303      	orrs	r3, r0
 80091b8:	3401      	adds	r4, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c0:	482c      	ldr	r0, [pc, #176]	; (8009274 <_vfiprintf_r+0x250>)
 80091c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c6:	2206      	movs	r2, #6
 80091c8:	f7f7 f812 	bl	80001f0 <memchr>
 80091cc:	2800      	cmp	r0, #0
 80091ce:	d03f      	beq.n	8009250 <_vfiprintf_r+0x22c>
 80091d0:	4b29      	ldr	r3, [pc, #164]	; (8009278 <_vfiprintf_r+0x254>)
 80091d2:	bb1b      	cbnz	r3, 800921c <_vfiprintf_r+0x1f8>
 80091d4:	9b03      	ldr	r3, [sp, #12]
 80091d6:	3307      	adds	r3, #7
 80091d8:	f023 0307 	bic.w	r3, r3, #7
 80091dc:	3308      	adds	r3, #8
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e2:	443b      	add	r3, r7
 80091e4:	9309      	str	r3, [sp, #36]	; 0x24
 80091e6:	e767      	b.n	80090b8 <_vfiprintf_r+0x94>
 80091e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ec:	460c      	mov	r4, r1
 80091ee:	2001      	movs	r0, #1
 80091f0:	e7a5      	b.n	800913e <_vfiprintf_r+0x11a>
 80091f2:	2300      	movs	r3, #0
 80091f4:	3401      	adds	r4, #1
 80091f6:	9305      	str	r3, [sp, #20]
 80091f8:	4619      	mov	r1, r3
 80091fa:	f04f 0c0a 	mov.w	ip, #10
 80091fe:	4620      	mov	r0, r4
 8009200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009204:	3a30      	subs	r2, #48	; 0x30
 8009206:	2a09      	cmp	r2, #9
 8009208:	d903      	bls.n	8009212 <_vfiprintf_r+0x1ee>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d0c5      	beq.n	800919a <_vfiprintf_r+0x176>
 800920e:	9105      	str	r1, [sp, #20]
 8009210:	e7c3      	b.n	800919a <_vfiprintf_r+0x176>
 8009212:	fb0c 2101 	mla	r1, ip, r1, r2
 8009216:	4604      	mov	r4, r0
 8009218:	2301      	movs	r3, #1
 800921a:	e7f0      	b.n	80091fe <_vfiprintf_r+0x1da>
 800921c:	ab03      	add	r3, sp, #12
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	462a      	mov	r2, r5
 8009222:	4b16      	ldr	r3, [pc, #88]	; (800927c <_vfiprintf_r+0x258>)
 8009224:	a904      	add	r1, sp, #16
 8009226:	4630      	mov	r0, r6
 8009228:	f7fd fdd8 	bl	8006ddc <_printf_float>
 800922c:	4607      	mov	r7, r0
 800922e:	1c78      	adds	r0, r7, #1
 8009230:	d1d6      	bne.n	80091e0 <_vfiprintf_r+0x1bc>
 8009232:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009234:	07d9      	lsls	r1, r3, #31
 8009236:	d405      	bmi.n	8009244 <_vfiprintf_r+0x220>
 8009238:	89ab      	ldrh	r3, [r5, #12]
 800923a:	059a      	lsls	r2, r3, #22
 800923c:	d402      	bmi.n	8009244 <_vfiprintf_r+0x220>
 800923e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009240:	f000 faaf 	bl	80097a2 <__retarget_lock_release_recursive>
 8009244:	89ab      	ldrh	r3, [r5, #12]
 8009246:	065b      	lsls	r3, r3, #25
 8009248:	f53f af12 	bmi.w	8009070 <_vfiprintf_r+0x4c>
 800924c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800924e:	e711      	b.n	8009074 <_vfiprintf_r+0x50>
 8009250:	ab03      	add	r3, sp, #12
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	462a      	mov	r2, r5
 8009256:	4b09      	ldr	r3, [pc, #36]	; (800927c <_vfiprintf_r+0x258>)
 8009258:	a904      	add	r1, sp, #16
 800925a:	4630      	mov	r0, r6
 800925c:	f7fe f862 	bl	8007324 <_printf_i>
 8009260:	e7e4      	b.n	800922c <_vfiprintf_r+0x208>
 8009262:	bf00      	nop
 8009264:	0800b8bc 	.word	0x0800b8bc
 8009268:	0800b8dc 	.word	0x0800b8dc
 800926c:	0800b89c 	.word	0x0800b89c
 8009270:	0800b744 	.word	0x0800b744
 8009274:	0800b74e 	.word	0x0800b74e
 8009278:	08006ddd 	.word	0x08006ddd
 800927c:	08009001 	.word	0x08009001
 8009280:	0800b74a 	.word	0x0800b74a

08009284 <__swbuf_r>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	460e      	mov	r6, r1
 8009288:	4614      	mov	r4, r2
 800928a:	4605      	mov	r5, r0
 800928c:	b118      	cbz	r0, 8009296 <__swbuf_r+0x12>
 800928e:	6983      	ldr	r3, [r0, #24]
 8009290:	b90b      	cbnz	r3, 8009296 <__swbuf_r+0x12>
 8009292:	f000 f9e7 	bl	8009664 <__sinit>
 8009296:	4b21      	ldr	r3, [pc, #132]	; (800931c <__swbuf_r+0x98>)
 8009298:	429c      	cmp	r4, r3
 800929a:	d12b      	bne.n	80092f4 <__swbuf_r+0x70>
 800929c:	686c      	ldr	r4, [r5, #4]
 800929e:	69a3      	ldr	r3, [r4, #24]
 80092a0:	60a3      	str	r3, [r4, #8]
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	071a      	lsls	r2, r3, #28
 80092a6:	d52f      	bpl.n	8009308 <__swbuf_r+0x84>
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	b36b      	cbz	r3, 8009308 <__swbuf_r+0x84>
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	1ac0      	subs	r0, r0, r3
 80092b2:	6963      	ldr	r3, [r4, #20]
 80092b4:	b2f6      	uxtb	r6, r6
 80092b6:	4283      	cmp	r3, r0
 80092b8:	4637      	mov	r7, r6
 80092ba:	dc04      	bgt.n	80092c6 <__swbuf_r+0x42>
 80092bc:	4621      	mov	r1, r4
 80092be:	4628      	mov	r0, r5
 80092c0:	f000 f93c 	bl	800953c <_fflush_r>
 80092c4:	bb30      	cbnz	r0, 8009314 <__swbuf_r+0x90>
 80092c6:	68a3      	ldr	r3, [r4, #8]
 80092c8:	3b01      	subs	r3, #1
 80092ca:	60a3      	str	r3, [r4, #8]
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	6022      	str	r2, [r4, #0]
 80092d2:	701e      	strb	r6, [r3, #0]
 80092d4:	6963      	ldr	r3, [r4, #20]
 80092d6:	3001      	adds	r0, #1
 80092d8:	4283      	cmp	r3, r0
 80092da:	d004      	beq.n	80092e6 <__swbuf_r+0x62>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	07db      	lsls	r3, r3, #31
 80092e0:	d506      	bpl.n	80092f0 <__swbuf_r+0x6c>
 80092e2:	2e0a      	cmp	r6, #10
 80092e4:	d104      	bne.n	80092f0 <__swbuf_r+0x6c>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4628      	mov	r0, r5
 80092ea:	f000 f927 	bl	800953c <_fflush_r>
 80092ee:	b988      	cbnz	r0, 8009314 <__swbuf_r+0x90>
 80092f0:	4638      	mov	r0, r7
 80092f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092f4:	4b0a      	ldr	r3, [pc, #40]	; (8009320 <__swbuf_r+0x9c>)
 80092f6:	429c      	cmp	r4, r3
 80092f8:	d101      	bne.n	80092fe <__swbuf_r+0x7a>
 80092fa:	68ac      	ldr	r4, [r5, #8]
 80092fc:	e7cf      	b.n	800929e <__swbuf_r+0x1a>
 80092fe:	4b09      	ldr	r3, [pc, #36]	; (8009324 <__swbuf_r+0xa0>)
 8009300:	429c      	cmp	r4, r3
 8009302:	bf08      	it	eq
 8009304:	68ec      	ldreq	r4, [r5, #12]
 8009306:	e7ca      	b.n	800929e <__swbuf_r+0x1a>
 8009308:	4621      	mov	r1, r4
 800930a:	4628      	mov	r0, r5
 800930c:	f000 f81a 	bl	8009344 <__swsetup_r>
 8009310:	2800      	cmp	r0, #0
 8009312:	d0cb      	beq.n	80092ac <__swbuf_r+0x28>
 8009314:	f04f 37ff 	mov.w	r7, #4294967295
 8009318:	e7ea      	b.n	80092f0 <__swbuf_r+0x6c>
 800931a:	bf00      	nop
 800931c:	0800b8bc 	.word	0x0800b8bc
 8009320:	0800b8dc 	.word	0x0800b8dc
 8009324:	0800b89c 	.word	0x0800b89c

08009328 <__ascii_wctomb>:
 8009328:	b149      	cbz	r1, 800933e <__ascii_wctomb+0x16>
 800932a:	2aff      	cmp	r2, #255	; 0xff
 800932c:	bf85      	ittet	hi
 800932e:	238a      	movhi	r3, #138	; 0x8a
 8009330:	6003      	strhi	r3, [r0, #0]
 8009332:	700a      	strbls	r2, [r1, #0]
 8009334:	f04f 30ff 	movhi.w	r0, #4294967295
 8009338:	bf98      	it	ls
 800933a:	2001      	movls	r0, #1
 800933c:	4770      	bx	lr
 800933e:	4608      	mov	r0, r1
 8009340:	4770      	bx	lr
	...

08009344 <__swsetup_r>:
 8009344:	4b32      	ldr	r3, [pc, #200]	; (8009410 <__swsetup_r+0xcc>)
 8009346:	b570      	push	{r4, r5, r6, lr}
 8009348:	681d      	ldr	r5, [r3, #0]
 800934a:	4606      	mov	r6, r0
 800934c:	460c      	mov	r4, r1
 800934e:	b125      	cbz	r5, 800935a <__swsetup_r+0x16>
 8009350:	69ab      	ldr	r3, [r5, #24]
 8009352:	b913      	cbnz	r3, 800935a <__swsetup_r+0x16>
 8009354:	4628      	mov	r0, r5
 8009356:	f000 f985 	bl	8009664 <__sinit>
 800935a:	4b2e      	ldr	r3, [pc, #184]	; (8009414 <__swsetup_r+0xd0>)
 800935c:	429c      	cmp	r4, r3
 800935e:	d10f      	bne.n	8009380 <__swsetup_r+0x3c>
 8009360:	686c      	ldr	r4, [r5, #4]
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009368:	0719      	lsls	r1, r3, #28
 800936a:	d42c      	bmi.n	80093c6 <__swsetup_r+0x82>
 800936c:	06dd      	lsls	r5, r3, #27
 800936e:	d411      	bmi.n	8009394 <__swsetup_r+0x50>
 8009370:	2309      	movs	r3, #9
 8009372:	6033      	str	r3, [r6, #0]
 8009374:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009378:	81a3      	strh	r3, [r4, #12]
 800937a:	f04f 30ff 	mov.w	r0, #4294967295
 800937e:	e03e      	b.n	80093fe <__swsetup_r+0xba>
 8009380:	4b25      	ldr	r3, [pc, #148]	; (8009418 <__swsetup_r+0xd4>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d101      	bne.n	800938a <__swsetup_r+0x46>
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	e7eb      	b.n	8009362 <__swsetup_r+0x1e>
 800938a:	4b24      	ldr	r3, [pc, #144]	; (800941c <__swsetup_r+0xd8>)
 800938c:	429c      	cmp	r4, r3
 800938e:	bf08      	it	eq
 8009390:	68ec      	ldreq	r4, [r5, #12]
 8009392:	e7e6      	b.n	8009362 <__swsetup_r+0x1e>
 8009394:	0758      	lsls	r0, r3, #29
 8009396:	d512      	bpl.n	80093be <__swsetup_r+0x7a>
 8009398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800939a:	b141      	cbz	r1, 80093ae <__swsetup_r+0x6a>
 800939c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a0:	4299      	cmp	r1, r3
 80093a2:	d002      	beq.n	80093aa <__swsetup_r+0x66>
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff fb31 	bl	8008a0c <_free_r>
 80093aa:	2300      	movs	r3, #0
 80093ac:	6363      	str	r3, [r4, #52]	; 0x34
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	2300      	movs	r3, #0
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	89a3      	ldrh	r3, [r4, #12]
 80093c0:	f043 0308 	orr.w	r3, r3, #8
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	6923      	ldr	r3, [r4, #16]
 80093c8:	b94b      	cbnz	r3, 80093de <__swsetup_r+0x9a>
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093d4:	d003      	beq.n	80093de <__swsetup_r+0x9a>
 80093d6:	4621      	mov	r1, r4
 80093d8:	4630      	mov	r0, r6
 80093da:	f000 fa09 	bl	80097f0 <__smakebuf_r>
 80093de:	89a0      	ldrh	r0, [r4, #12]
 80093e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e4:	f010 0301 	ands.w	r3, r0, #1
 80093e8:	d00a      	beq.n	8009400 <__swsetup_r+0xbc>
 80093ea:	2300      	movs	r3, #0
 80093ec:	60a3      	str	r3, [r4, #8]
 80093ee:	6963      	ldr	r3, [r4, #20]
 80093f0:	425b      	negs	r3, r3
 80093f2:	61a3      	str	r3, [r4, #24]
 80093f4:	6923      	ldr	r3, [r4, #16]
 80093f6:	b943      	cbnz	r3, 800940a <__swsetup_r+0xc6>
 80093f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80093fc:	d1ba      	bne.n	8009374 <__swsetup_r+0x30>
 80093fe:	bd70      	pop	{r4, r5, r6, pc}
 8009400:	0781      	lsls	r1, r0, #30
 8009402:	bf58      	it	pl
 8009404:	6963      	ldrpl	r3, [r4, #20]
 8009406:	60a3      	str	r3, [r4, #8]
 8009408:	e7f4      	b.n	80093f4 <__swsetup_r+0xb0>
 800940a:	2000      	movs	r0, #0
 800940c:	e7f7      	b.n	80093fe <__swsetup_r+0xba>
 800940e:	bf00      	nop
 8009410:	2000002c 	.word	0x2000002c
 8009414:	0800b8bc 	.word	0x0800b8bc
 8009418:	0800b8dc 	.word	0x0800b8dc
 800941c:	0800b89c 	.word	0x0800b89c

08009420 <abort>:
 8009420:	b508      	push	{r3, lr}
 8009422:	2006      	movs	r0, #6
 8009424:	f000 fa54 	bl	80098d0 <raise>
 8009428:	2001      	movs	r0, #1
 800942a:	f001 fc05 	bl	800ac38 <_exit>
	...

08009430 <__sflush_r>:
 8009430:	898a      	ldrh	r2, [r1, #12]
 8009432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009436:	4605      	mov	r5, r0
 8009438:	0710      	lsls	r0, r2, #28
 800943a:	460c      	mov	r4, r1
 800943c:	d458      	bmi.n	80094f0 <__sflush_r+0xc0>
 800943e:	684b      	ldr	r3, [r1, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	dc05      	bgt.n	8009450 <__sflush_r+0x20>
 8009444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009446:	2b00      	cmp	r3, #0
 8009448:	dc02      	bgt.n	8009450 <__sflush_r+0x20>
 800944a:	2000      	movs	r0, #0
 800944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009452:	2e00      	cmp	r6, #0
 8009454:	d0f9      	beq.n	800944a <__sflush_r+0x1a>
 8009456:	2300      	movs	r3, #0
 8009458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800945c:	682f      	ldr	r7, [r5, #0]
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	d032      	beq.n	80094c8 <__sflush_r+0x98>
 8009462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	075a      	lsls	r2, r3, #29
 8009468:	d505      	bpl.n	8009476 <__sflush_r+0x46>
 800946a:	6863      	ldr	r3, [r4, #4]
 800946c:	1ac0      	subs	r0, r0, r3
 800946e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009470:	b10b      	cbz	r3, 8009476 <__sflush_r+0x46>
 8009472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009474:	1ac0      	subs	r0, r0, r3
 8009476:	2300      	movs	r3, #0
 8009478:	4602      	mov	r2, r0
 800947a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800947c:	6a21      	ldr	r1, [r4, #32]
 800947e:	4628      	mov	r0, r5
 8009480:	47b0      	blx	r6
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	d106      	bne.n	8009496 <__sflush_r+0x66>
 8009488:	6829      	ldr	r1, [r5, #0]
 800948a:	291d      	cmp	r1, #29
 800948c:	d82c      	bhi.n	80094e8 <__sflush_r+0xb8>
 800948e:	4a2a      	ldr	r2, [pc, #168]	; (8009538 <__sflush_r+0x108>)
 8009490:	40ca      	lsrs	r2, r1
 8009492:	07d6      	lsls	r6, r2, #31
 8009494:	d528      	bpl.n	80094e8 <__sflush_r+0xb8>
 8009496:	2200      	movs	r2, #0
 8009498:	6062      	str	r2, [r4, #4]
 800949a:	04d9      	lsls	r1, r3, #19
 800949c:	6922      	ldr	r2, [r4, #16]
 800949e:	6022      	str	r2, [r4, #0]
 80094a0:	d504      	bpl.n	80094ac <__sflush_r+0x7c>
 80094a2:	1c42      	adds	r2, r0, #1
 80094a4:	d101      	bne.n	80094aa <__sflush_r+0x7a>
 80094a6:	682b      	ldr	r3, [r5, #0]
 80094a8:	b903      	cbnz	r3, 80094ac <__sflush_r+0x7c>
 80094aa:	6560      	str	r0, [r4, #84]	; 0x54
 80094ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094ae:	602f      	str	r7, [r5, #0]
 80094b0:	2900      	cmp	r1, #0
 80094b2:	d0ca      	beq.n	800944a <__sflush_r+0x1a>
 80094b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094b8:	4299      	cmp	r1, r3
 80094ba:	d002      	beq.n	80094c2 <__sflush_r+0x92>
 80094bc:	4628      	mov	r0, r5
 80094be:	f7ff faa5 	bl	8008a0c <_free_r>
 80094c2:	2000      	movs	r0, #0
 80094c4:	6360      	str	r0, [r4, #52]	; 0x34
 80094c6:	e7c1      	b.n	800944c <__sflush_r+0x1c>
 80094c8:	6a21      	ldr	r1, [r4, #32]
 80094ca:	2301      	movs	r3, #1
 80094cc:	4628      	mov	r0, r5
 80094ce:	47b0      	blx	r6
 80094d0:	1c41      	adds	r1, r0, #1
 80094d2:	d1c7      	bne.n	8009464 <__sflush_r+0x34>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0c4      	beq.n	8009464 <__sflush_r+0x34>
 80094da:	2b1d      	cmp	r3, #29
 80094dc:	d001      	beq.n	80094e2 <__sflush_r+0xb2>
 80094de:	2b16      	cmp	r3, #22
 80094e0:	d101      	bne.n	80094e6 <__sflush_r+0xb6>
 80094e2:	602f      	str	r7, [r5, #0]
 80094e4:	e7b1      	b.n	800944a <__sflush_r+0x1a>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094ec:	81a3      	strh	r3, [r4, #12]
 80094ee:	e7ad      	b.n	800944c <__sflush_r+0x1c>
 80094f0:	690f      	ldr	r7, [r1, #16]
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	d0a9      	beq.n	800944a <__sflush_r+0x1a>
 80094f6:	0793      	lsls	r3, r2, #30
 80094f8:	680e      	ldr	r6, [r1, #0]
 80094fa:	bf08      	it	eq
 80094fc:	694b      	ldreq	r3, [r1, #20]
 80094fe:	600f      	str	r7, [r1, #0]
 8009500:	bf18      	it	ne
 8009502:	2300      	movne	r3, #0
 8009504:	eba6 0807 	sub.w	r8, r6, r7
 8009508:	608b      	str	r3, [r1, #8]
 800950a:	f1b8 0f00 	cmp.w	r8, #0
 800950e:	dd9c      	ble.n	800944a <__sflush_r+0x1a>
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009514:	4643      	mov	r3, r8
 8009516:	463a      	mov	r2, r7
 8009518:	4628      	mov	r0, r5
 800951a:	47b0      	blx	r6
 800951c:	2800      	cmp	r0, #0
 800951e:	dc06      	bgt.n	800952e <__sflush_r+0xfe>
 8009520:	89a3      	ldrh	r3, [r4, #12]
 8009522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	f04f 30ff 	mov.w	r0, #4294967295
 800952c:	e78e      	b.n	800944c <__sflush_r+0x1c>
 800952e:	4407      	add	r7, r0
 8009530:	eba8 0800 	sub.w	r8, r8, r0
 8009534:	e7e9      	b.n	800950a <__sflush_r+0xda>
 8009536:	bf00      	nop
 8009538:	20400001 	.word	0x20400001

0800953c <_fflush_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	690b      	ldr	r3, [r1, #16]
 8009540:	4605      	mov	r5, r0
 8009542:	460c      	mov	r4, r1
 8009544:	b913      	cbnz	r3, 800954c <_fflush_r+0x10>
 8009546:	2500      	movs	r5, #0
 8009548:	4628      	mov	r0, r5
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	b118      	cbz	r0, 8009556 <_fflush_r+0x1a>
 800954e:	6983      	ldr	r3, [r0, #24]
 8009550:	b90b      	cbnz	r3, 8009556 <_fflush_r+0x1a>
 8009552:	f000 f887 	bl	8009664 <__sinit>
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <_fflush_r+0x6c>)
 8009558:	429c      	cmp	r4, r3
 800955a:	d11b      	bne.n	8009594 <_fflush_r+0x58>
 800955c:	686c      	ldr	r4, [r5, #4]
 800955e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0ef      	beq.n	8009546 <_fflush_r+0xa>
 8009566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009568:	07d0      	lsls	r0, r2, #31
 800956a:	d404      	bmi.n	8009576 <_fflush_r+0x3a>
 800956c:	0599      	lsls	r1, r3, #22
 800956e:	d402      	bmi.n	8009576 <_fflush_r+0x3a>
 8009570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009572:	f000 f915 	bl	80097a0 <__retarget_lock_acquire_recursive>
 8009576:	4628      	mov	r0, r5
 8009578:	4621      	mov	r1, r4
 800957a:	f7ff ff59 	bl	8009430 <__sflush_r>
 800957e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009580:	07da      	lsls	r2, r3, #31
 8009582:	4605      	mov	r5, r0
 8009584:	d4e0      	bmi.n	8009548 <_fflush_r+0xc>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	059b      	lsls	r3, r3, #22
 800958a:	d4dd      	bmi.n	8009548 <_fflush_r+0xc>
 800958c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958e:	f000 f908 	bl	80097a2 <__retarget_lock_release_recursive>
 8009592:	e7d9      	b.n	8009548 <_fflush_r+0xc>
 8009594:	4b05      	ldr	r3, [pc, #20]	; (80095ac <_fflush_r+0x70>)
 8009596:	429c      	cmp	r4, r3
 8009598:	d101      	bne.n	800959e <_fflush_r+0x62>
 800959a:	68ac      	ldr	r4, [r5, #8]
 800959c:	e7df      	b.n	800955e <_fflush_r+0x22>
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <_fflush_r+0x74>)
 80095a0:	429c      	cmp	r4, r3
 80095a2:	bf08      	it	eq
 80095a4:	68ec      	ldreq	r4, [r5, #12]
 80095a6:	e7da      	b.n	800955e <_fflush_r+0x22>
 80095a8:	0800b8bc 	.word	0x0800b8bc
 80095ac:	0800b8dc 	.word	0x0800b8dc
 80095b0:	0800b89c 	.word	0x0800b89c

080095b4 <std>:
 80095b4:	2300      	movs	r3, #0
 80095b6:	b510      	push	{r4, lr}
 80095b8:	4604      	mov	r4, r0
 80095ba:	e9c0 3300 	strd	r3, r3, [r0]
 80095be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095c2:	6083      	str	r3, [r0, #8]
 80095c4:	8181      	strh	r1, [r0, #12]
 80095c6:	6643      	str	r3, [r0, #100]	; 0x64
 80095c8:	81c2      	strh	r2, [r0, #14]
 80095ca:	6183      	str	r3, [r0, #24]
 80095cc:	4619      	mov	r1, r3
 80095ce:	2208      	movs	r2, #8
 80095d0:	305c      	adds	r0, #92	; 0x5c
 80095d2:	f7fd fb5b 	bl	8006c8c <memset>
 80095d6:	4b05      	ldr	r3, [pc, #20]	; (80095ec <std+0x38>)
 80095d8:	6263      	str	r3, [r4, #36]	; 0x24
 80095da:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <std+0x3c>)
 80095dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <std+0x40>)
 80095e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095e2:	4b05      	ldr	r3, [pc, #20]	; (80095f8 <std+0x44>)
 80095e4:	6224      	str	r4, [r4, #32]
 80095e6:	6323      	str	r3, [r4, #48]	; 0x30
 80095e8:	bd10      	pop	{r4, pc}
 80095ea:	bf00      	nop
 80095ec:	08009909 	.word	0x08009909
 80095f0:	0800992b 	.word	0x0800992b
 80095f4:	08009963 	.word	0x08009963
 80095f8:	08009987 	.word	0x08009987

080095fc <_cleanup_r>:
 80095fc:	4901      	ldr	r1, [pc, #4]	; (8009604 <_cleanup_r+0x8>)
 80095fe:	f000 b8af 	b.w	8009760 <_fwalk_reent>
 8009602:	bf00      	nop
 8009604:	0800953d 	.word	0x0800953d

08009608 <__sfmoreglue>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	2268      	movs	r2, #104	; 0x68
 800960c:	1e4d      	subs	r5, r1, #1
 800960e:	4355      	muls	r5, r2
 8009610:	460e      	mov	r6, r1
 8009612:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009616:	f7ff fa65 	bl	8008ae4 <_malloc_r>
 800961a:	4604      	mov	r4, r0
 800961c:	b140      	cbz	r0, 8009630 <__sfmoreglue+0x28>
 800961e:	2100      	movs	r1, #0
 8009620:	e9c0 1600 	strd	r1, r6, [r0]
 8009624:	300c      	adds	r0, #12
 8009626:	60a0      	str	r0, [r4, #8]
 8009628:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800962c:	f7fd fb2e 	bl	8006c8c <memset>
 8009630:	4620      	mov	r0, r4
 8009632:	bd70      	pop	{r4, r5, r6, pc}

08009634 <__sfp_lock_acquire>:
 8009634:	4801      	ldr	r0, [pc, #4]	; (800963c <__sfp_lock_acquire+0x8>)
 8009636:	f000 b8b3 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 800963a:	bf00      	nop
 800963c:	20000265 	.word	0x20000265

08009640 <__sfp_lock_release>:
 8009640:	4801      	ldr	r0, [pc, #4]	; (8009648 <__sfp_lock_release+0x8>)
 8009642:	f000 b8ae 	b.w	80097a2 <__retarget_lock_release_recursive>
 8009646:	bf00      	nop
 8009648:	20000265 	.word	0x20000265

0800964c <__sinit_lock_acquire>:
 800964c:	4801      	ldr	r0, [pc, #4]	; (8009654 <__sinit_lock_acquire+0x8>)
 800964e:	f000 b8a7 	b.w	80097a0 <__retarget_lock_acquire_recursive>
 8009652:	bf00      	nop
 8009654:	20000266 	.word	0x20000266

08009658 <__sinit_lock_release>:
 8009658:	4801      	ldr	r0, [pc, #4]	; (8009660 <__sinit_lock_release+0x8>)
 800965a:	f000 b8a2 	b.w	80097a2 <__retarget_lock_release_recursive>
 800965e:	bf00      	nop
 8009660:	20000266 	.word	0x20000266

08009664 <__sinit>:
 8009664:	b510      	push	{r4, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	f7ff fff0 	bl	800964c <__sinit_lock_acquire>
 800966c:	69a3      	ldr	r3, [r4, #24]
 800966e:	b11b      	cbz	r3, 8009678 <__sinit+0x14>
 8009670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009674:	f7ff bff0 	b.w	8009658 <__sinit_lock_release>
 8009678:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800967c:	6523      	str	r3, [r4, #80]	; 0x50
 800967e:	4b13      	ldr	r3, [pc, #76]	; (80096cc <__sinit+0x68>)
 8009680:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <__sinit+0x6c>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	62a2      	str	r2, [r4, #40]	; 0x28
 8009686:	42a3      	cmp	r3, r4
 8009688:	bf04      	itt	eq
 800968a:	2301      	moveq	r3, #1
 800968c:	61a3      	streq	r3, [r4, #24]
 800968e:	4620      	mov	r0, r4
 8009690:	f000 f820 	bl	80096d4 <__sfp>
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	4620      	mov	r0, r4
 8009698:	f000 f81c 	bl	80096d4 <__sfp>
 800969c:	60a0      	str	r0, [r4, #8]
 800969e:	4620      	mov	r0, r4
 80096a0:	f000 f818 	bl	80096d4 <__sfp>
 80096a4:	2200      	movs	r2, #0
 80096a6:	60e0      	str	r0, [r4, #12]
 80096a8:	2104      	movs	r1, #4
 80096aa:	6860      	ldr	r0, [r4, #4]
 80096ac:	f7ff ff82 	bl	80095b4 <std>
 80096b0:	68a0      	ldr	r0, [r4, #8]
 80096b2:	2201      	movs	r2, #1
 80096b4:	2109      	movs	r1, #9
 80096b6:	f7ff ff7d 	bl	80095b4 <std>
 80096ba:	68e0      	ldr	r0, [r4, #12]
 80096bc:	2202      	movs	r2, #2
 80096be:	2112      	movs	r1, #18
 80096c0:	f7ff ff78 	bl	80095b4 <std>
 80096c4:	2301      	movs	r3, #1
 80096c6:	61a3      	str	r3, [r4, #24]
 80096c8:	e7d2      	b.n	8009670 <__sinit+0xc>
 80096ca:	bf00      	nop
 80096cc:	0800b524 	.word	0x0800b524
 80096d0:	080095fd 	.word	0x080095fd

080096d4 <__sfp>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	4607      	mov	r7, r0
 80096d8:	f7ff ffac 	bl	8009634 <__sfp_lock_acquire>
 80096dc:	4b1e      	ldr	r3, [pc, #120]	; (8009758 <__sfp+0x84>)
 80096de:	681e      	ldr	r6, [r3, #0]
 80096e0:	69b3      	ldr	r3, [r6, #24]
 80096e2:	b913      	cbnz	r3, 80096ea <__sfp+0x16>
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7ff ffbd 	bl	8009664 <__sinit>
 80096ea:	3648      	adds	r6, #72	; 0x48
 80096ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80096f0:	3b01      	subs	r3, #1
 80096f2:	d503      	bpl.n	80096fc <__sfp+0x28>
 80096f4:	6833      	ldr	r3, [r6, #0]
 80096f6:	b30b      	cbz	r3, 800973c <__sfp+0x68>
 80096f8:	6836      	ldr	r6, [r6, #0]
 80096fa:	e7f7      	b.n	80096ec <__sfp+0x18>
 80096fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009700:	b9d5      	cbnz	r5, 8009738 <__sfp+0x64>
 8009702:	4b16      	ldr	r3, [pc, #88]	; (800975c <__sfp+0x88>)
 8009704:	60e3      	str	r3, [r4, #12]
 8009706:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800970a:	6665      	str	r5, [r4, #100]	; 0x64
 800970c:	f000 f847 	bl	800979e <__retarget_lock_init_recursive>
 8009710:	f7ff ff96 	bl	8009640 <__sfp_lock_release>
 8009714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800971c:	6025      	str	r5, [r4, #0]
 800971e:	61a5      	str	r5, [r4, #24]
 8009720:	2208      	movs	r2, #8
 8009722:	4629      	mov	r1, r5
 8009724:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009728:	f7fd fab0 	bl	8006c8c <memset>
 800972c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009730:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009734:	4620      	mov	r0, r4
 8009736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009738:	3468      	adds	r4, #104	; 0x68
 800973a:	e7d9      	b.n	80096f0 <__sfp+0x1c>
 800973c:	2104      	movs	r1, #4
 800973e:	4638      	mov	r0, r7
 8009740:	f7ff ff62 	bl	8009608 <__sfmoreglue>
 8009744:	4604      	mov	r4, r0
 8009746:	6030      	str	r0, [r6, #0]
 8009748:	2800      	cmp	r0, #0
 800974a:	d1d5      	bne.n	80096f8 <__sfp+0x24>
 800974c:	f7ff ff78 	bl	8009640 <__sfp_lock_release>
 8009750:	230c      	movs	r3, #12
 8009752:	603b      	str	r3, [r7, #0]
 8009754:	e7ee      	b.n	8009734 <__sfp+0x60>
 8009756:	bf00      	nop
 8009758:	0800b524 	.word	0x0800b524
 800975c:	ffff0001 	.word	0xffff0001

08009760 <_fwalk_reent>:
 8009760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009764:	4606      	mov	r6, r0
 8009766:	4688      	mov	r8, r1
 8009768:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800976c:	2700      	movs	r7, #0
 800976e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009772:	f1b9 0901 	subs.w	r9, r9, #1
 8009776:	d505      	bpl.n	8009784 <_fwalk_reent+0x24>
 8009778:	6824      	ldr	r4, [r4, #0]
 800977a:	2c00      	cmp	r4, #0
 800977c:	d1f7      	bne.n	800976e <_fwalk_reent+0xe>
 800977e:	4638      	mov	r0, r7
 8009780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009784:	89ab      	ldrh	r3, [r5, #12]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d907      	bls.n	800979a <_fwalk_reent+0x3a>
 800978a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800978e:	3301      	adds	r3, #1
 8009790:	d003      	beq.n	800979a <_fwalk_reent+0x3a>
 8009792:	4629      	mov	r1, r5
 8009794:	4630      	mov	r0, r6
 8009796:	47c0      	blx	r8
 8009798:	4307      	orrs	r7, r0
 800979a:	3568      	adds	r5, #104	; 0x68
 800979c:	e7e9      	b.n	8009772 <_fwalk_reent+0x12>

0800979e <__retarget_lock_init_recursive>:
 800979e:	4770      	bx	lr

080097a0 <__retarget_lock_acquire_recursive>:
 80097a0:	4770      	bx	lr

080097a2 <__retarget_lock_release_recursive>:
 80097a2:	4770      	bx	lr

080097a4 <__swhatbuf_r>:
 80097a4:	b570      	push	{r4, r5, r6, lr}
 80097a6:	460e      	mov	r6, r1
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2900      	cmp	r1, #0
 80097ae:	b096      	sub	sp, #88	; 0x58
 80097b0:	4614      	mov	r4, r2
 80097b2:	461d      	mov	r5, r3
 80097b4:	da08      	bge.n	80097c8 <__swhatbuf_r+0x24>
 80097b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	602a      	str	r2, [r5, #0]
 80097be:	061a      	lsls	r2, r3, #24
 80097c0:	d410      	bmi.n	80097e4 <__swhatbuf_r+0x40>
 80097c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097c6:	e00e      	b.n	80097e6 <__swhatbuf_r+0x42>
 80097c8:	466a      	mov	r2, sp
 80097ca:	f000 f903 	bl	80099d4 <_fstat_r>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	dbf1      	blt.n	80097b6 <__swhatbuf_r+0x12>
 80097d2:	9a01      	ldr	r2, [sp, #4]
 80097d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097dc:	425a      	negs	r2, r3
 80097de:	415a      	adcs	r2, r3
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	e7ee      	b.n	80097c2 <__swhatbuf_r+0x1e>
 80097e4:	2340      	movs	r3, #64	; 0x40
 80097e6:	2000      	movs	r0, #0
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	b016      	add	sp, #88	; 0x58
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080097f0 <__smakebuf_r>:
 80097f0:	898b      	ldrh	r3, [r1, #12]
 80097f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097f4:	079d      	lsls	r5, r3, #30
 80097f6:	4606      	mov	r6, r0
 80097f8:	460c      	mov	r4, r1
 80097fa:	d507      	bpl.n	800980c <__smakebuf_r+0x1c>
 80097fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	2301      	movs	r3, #1
 8009806:	6163      	str	r3, [r4, #20]
 8009808:	b002      	add	sp, #8
 800980a:	bd70      	pop	{r4, r5, r6, pc}
 800980c:	ab01      	add	r3, sp, #4
 800980e:	466a      	mov	r2, sp
 8009810:	f7ff ffc8 	bl	80097a4 <__swhatbuf_r>
 8009814:	9900      	ldr	r1, [sp, #0]
 8009816:	4605      	mov	r5, r0
 8009818:	4630      	mov	r0, r6
 800981a:	f7ff f963 	bl	8008ae4 <_malloc_r>
 800981e:	b948      	cbnz	r0, 8009834 <__smakebuf_r+0x44>
 8009820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009824:	059a      	lsls	r2, r3, #22
 8009826:	d4ef      	bmi.n	8009808 <__smakebuf_r+0x18>
 8009828:	f023 0303 	bic.w	r3, r3, #3
 800982c:	f043 0302 	orr.w	r3, r3, #2
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	e7e3      	b.n	80097fc <__smakebuf_r+0xc>
 8009834:	4b0d      	ldr	r3, [pc, #52]	; (800986c <__smakebuf_r+0x7c>)
 8009836:	62b3      	str	r3, [r6, #40]	; 0x28
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	6020      	str	r0, [r4, #0]
 800983c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	9b00      	ldr	r3, [sp, #0]
 8009844:	6163      	str	r3, [r4, #20]
 8009846:	9b01      	ldr	r3, [sp, #4]
 8009848:	6120      	str	r0, [r4, #16]
 800984a:	b15b      	cbz	r3, 8009864 <__smakebuf_r+0x74>
 800984c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009850:	4630      	mov	r0, r6
 8009852:	f000 f8d1 	bl	80099f8 <_isatty_r>
 8009856:	b128      	cbz	r0, 8009864 <__smakebuf_r+0x74>
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	89a0      	ldrh	r0, [r4, #12]
 8009866:	4305      	orrs	r5, r0
 8009868:	81a5      	strh	r5, [r4, #12]
 800986a:	e7cd      	b.n	8009808 <__smakebuf_r+0x18>
 800986c:	080095fd 	.word	0x080095fd

08009870 <_malloc_usable_size_r>:
 8009870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009874:	1f18      	subs	r0, r3, #4
 8009876:	2b00      	cmp	r3, #0
 8009878:	bfbc      	itt	lt
 800987a:	580b      	ldrlt	r3, [r1, r0]
 800987c:	18c0      	addlt	r0, r0, r3
 800987e:	4770      	bx	lr

08009880 <_raise_r>:
 8009880:	291f      	cmp	r1, #31
 8009882:	b538      	push	{r3, r4, r5, lr}
 8009884:	4604      	mov	r4, r0
 8009886:	460d      	mov	r5, r1
 8009888:	d904      	bls.n	8009894 <_raise_r+0x14>
 800988a:	2316      	movs	r3, #22
 800988c:	6003      	str	r3, [r0, #0]
 800988e:	f04f 30ff 	mov.w	r0, #4294967295
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009896:	b112      	cbz	r2, 800989e <_raise_r+0x1e>
 8009898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800989c:	b94b      	cbnz	r3, 80098b2 <_raise_r+0x32>
 800989e:	4620      	mov	r0, r4
 80098a0:	f000 f830 	bl	8009904 <_getpid_r>
 80098a4:	462a      	mov	r2, r5
 80098a6:	4601      	mov	r1, r0
 80098a8:	4620      	mov	r0, r4
 80098aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ae:	f000 b817 	b.w	80098e0 <_kill_r>
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d00a      	beq.n	80098cc <_raise_r+0x4c>
 80098b6:	1c59      	adds	r1, r3, #1
 80098b8:	d103      	bne.n	80098c2 <_raise_r+0x42>
 80098ba:	2316      	movs	r3, #22
 80098bc:	6003      	str	r3, [r0, #0]
 80098be:	2001      	movs	r0, #1
 80098c0:	e7e7      	b.n	8009892 <_raise_r+0x12>
 80098c2:	2400      	movs	r4, #0
 80098c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098c8:	4628      	mov	r0, r5
 80098ca:	4798      	blx	r3
 80098cc:	2000      	movs	r0, #0
 80098ce:	e7e0      	b.n	8009892 <_raise_r+0x12>

080098d0 <raise>:
 80098d0:	4b02      	ldr	r3, [pc, #8]	; (80098dc <raise+0xc>)
 80098d2:	4601      	mov	r1, r0
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	f7ff bfd3 	b.w	8009880 <_raise_r>
 80098da:	bf00      	nop
 80098dc:	2000002c 	.word	0x2000002c

080098e0 <_kill_r>:
 80098e0:	b538      	push	{r3, r4, r5, lr}
 80098e2:	4d07      	ldr	r5, [pc, #28]	; (8009900 <_kill_r+0x20>)
 80098e4:	2300      	movs	r3, #0
 80098e6:	4604      	mov	r4, r0
 80098e8:	4608      	mov	r0, r1
 80098ea:	4611      	mov	r1, r2
 80098ec:	602b      	str	r3, [r5, #0]
 80098ee:	f001 f975 	bl	800abdc <_kill>
 80098f2:	1c43      	adds	r3, r0, #1
 80098f4:	d102      	bne.n	80098fc <_kill_r+0x1c>
 80098f6:	682b      	ldr	r3, [r5, #0]
 80098f8:	b103      	cbz	r3, 80098fc <_kill_r+0x1c>
 80098fa:	6023      	str	r3, [r4, #0]
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	bf00      	nop
 8009900:	20000260 	.word	0x20000260

08009904 <_getpid_r>:
 8009904:	f001 b95a 	b.w	800abbc <_getpid>

08009908 <__sread>:
 8009908:	b510      	push	{r4, lr}
 800990a:	460c      	mov	r4, r1
 800990c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009910:	f000 f894 	bl	8009a3c <_read_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	bfab      	itete	ge
 8009918:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800991a:	89a3      	ldrhlt	r3, [r4, #12]
 800991c:	181b      	addge	r3, r3, r0
 800991e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009922:	bfac      	ite	ge
 8009924:	6563      	strge	r3, [r4, #84]	; 0x54
 8009926:	81a3      	strhlt	r3, [r4, #12]
 8009928:	bd10      	pop	{r4, pc}

0800992a <__swrite>:
 800992a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	461f      	mov	r7, r3
 8009930:	898b      	ldrh	r3, [r1, #12]
 8009932:	05db      	lsls	r3, r3, #23
 8009934:	4605      	mov	r5, r0
 8009936:	460c      	mov	r4, r1
 8009938:	4616      	mov	r6, r2
 800993a:	d505      	bpl.n	8009948 <__swrite+0x1e>
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	2302      	movs	r3, #2
 8009942:	2200      	movs	r2, #0
 8009944:	f000 f868 	bl	8009a18 <_lseek_r>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800994e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	4632      	mov	r2, r6
 8009956:	463b      	mov	r3, r7
 8009958:	4628      	mov	r0, r5
 800995a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	f000 b817 	b.w	8009990 <_write_r>

08009962 <__sseek>:
 8009962:	b510      	push	{r4, lr}
 8009964:	460c      	mov	r4, r1
 8009966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996a:	f000 f855 	bl	8009a18 <_lseek_r>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	89a3      	ldrh	r3, [r4, #12]
 8009972:	bf15      	itete	ne
 8009974:	6560      	strne	r0, [r4, #84]	; 0x54
 8009976:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800997a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800997e:	81a3      	strheq	r3, [r4, #12]
 8009980:	bf18      	it	ne
 8009982:	81a3      	strhne	r3, [r4, #12]
 8009984:	bd10      	pop	{r4, pc}

08009986 <__sclose>:
 8009986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998a:	f000 b813 	b.w	80099b4 <_close_r>
	...

08009990 <_write_r>:
 8009990:	b538      	push	{r3, r4, r5, lr}
 8009992:	4d07      	ldr	r5, [pc, #28]	; (80099b0 <_write_r+0x20>)
 8009994:	4604      	mov	r4, r0
 8009996:	4608      	mov	r0, r1
 8009998:	4611      	mov	r1, r2
 800999a:	2200      	movs	r2, #0
 800999c:	602a      	str	r2, [r5, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	f001 f942 	bl	800ac28 <_write>
 80099a4:	1c43      	adds	r3, r0, #1
 80099a6:	d102      	bne.n	80099ae <_write_r+0x1e>
 80099a8:	682b      	ldr	r3, [r5, #0]
 80099aa:	b103      	cbz	r3, 80099ae <_write_r+0x1e>
 80099ac:	6023      	str	r3, [r4, #0]
 80099ae:	bd38      	pop	{r3, r4, r5, pc}
 80099b0:	20000260 	.word	0x20000260

080099b4 <_close_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	4d06      	ldr	r5, [pc, #24]	; (80099d0 <_close_r+0x1c>)
 80099b8:	2300      	movs	r3, #0
 80099ba:	4604      	mov	r4, r0
 80099bc:	4608      	mov	r0, r1
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	f001 f8ec 	bl	800ab9c <_close>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_close_r+0x1a>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_close_r+0x1a>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	20000260 	.word	0x20000260

080099d4 <_fstat_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d07      	ldr	r5, [pc, #28]	; (80099f4 <_fstat_r+0x20>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	4611      	mov	r1, r2
 80099e0:	602b      	str	r3, [r5, #0]
 80099e2:	f001 f8e3 	bl	800abac <_fstat>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	d102      	bne.n	80099f0 <_fstat_r+0x1c>
 80099ea:	682b      	ldr	r3, [r5, #0]
 80099ec:	b103      	cbz	r3, 80099f0 <_fstat_r+0x1c>
 80099ee:	6023      	str	r3, [r4, #0]
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	bf00      	nop
 80099f4:	20000260 	.word	0x20000260

080099f8 <_isatty_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d06      	ldr	r5, [pc, #24]	; (8009a14 <_isatty_r+0x1c>)
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	602b      	str	r3, [r5, #0]
 8009a04:	f001 f8e2 	bl	800abcc <_isatty>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_isatty_r+0x1a>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_isatty_r+0x1a>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	20000260 	.word	0x20000260

08009a18 <_lseek_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d07      	ldr	r5, [pc, #28]	; (8009a38 <_lseek_r+0x20>)
 8009a1c:	4604      	mov	r4, r0
 8009a1e:	4608      	mov	r0, r1
 8009a20:	4611      	mov	r1, r2
 8009a22:	2200      	movs	r2, #0
 8009a24:	602a      	str	r2, [r5, #0]
 8009a26:	461a      	mov	r2, r3
 8009a28:	f001 f8e0 	bl	800abec <_lseek>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_lseek_r+0x1e>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_lseek_r+0x1e>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000260 	.word	0x20000260

08009a3c <_read_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d07      	ldr	r5, [pc, #28]	; (8009a5c <_read_r+0x20>)
 8009a40:	4604      	mov	r4, r0
 8009a42:	4608      	mov	r0, r1
 8009a44:	4611      	mov	r1, r2
 8009a46:	2200      	movs	r2, #0
 8009a48:	602a      	str	r2, [r5, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f001 f8d6 	bl	800abfc <_read>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_read_r+0x1e>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_read_r+0x1e>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000260 	.word	0x20000260

08009a60 <cos>:
 8009a60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a62:	ec53 2b10 	vmov	r2, r3, d0
 8009a66:	4826      	ldr	r0, [pc, #152]	; (8009b00 <cos+0xa0>)
 8009a68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a6c:	4281      	cmp	r1, r0
 8009a6e:	dc06      	bgt.n	8009a7e <cos+0x1e>
 8009a70:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009af8 <cos+0x98>
 8009a74:	b005      	add	sp, #20
 8009a76:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a7a:	f000 baa9 	b.w	8009fd0 <__kernel_cos>
 8009a7e:	4821      	ldr	r0, [pc, #132]	; (8009b04 <cos+0xa4>)
 8009a80:	4281      	cmp	r1, r0
 8009a82:	dd09      	ble.n	8009a98 <cos+0x38>
 8009a84:	ee10 0a10 	vmov	r0, s0
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f7f6 fc05 	bl	8000298 <__aeabi_dsub>
 8009a8e:	ec41 0b10 	vmov	d0, r0, r1
 8009a92:	b005      	add	sp, #20
 8009a94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a98:	4668      	mov	r0, sp
 8009a9a:	f000 f88d 	bl	8009bb8 <__ieee754_rem_pio2>
 8009a9e:	f000 0003 	and.w	r0, r0, #3
 8009aa2:	2801      	cmp	r0, #1
 8009aa4:	d00b      	beq.n	8009abe <cos+0x5e>
 8009aa6:	2802      	cmp	r0, #2
 8009aa8:	d016      	beq.n	8009ad8 <cos+0x78>
 8009aaa:	b9e0      	cbnz	r0, 8009ae6 <cos+0x86>
 8009aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ab0:	ed9d 0b00 	vldr	d0, [sp]
 8009ab4:	f000 fa8c 	bl	8009fd0 <__kernel_cos>
 8009ab8:	ec51 0b10 	vmov	r0, r1, d0
 8009abc:	e7e7      	b.n	8009a8e <cos+0x2e>
 8009abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ac2:	ed9d 0b00 	vldr	d0, [sp]
 8009ac6:	f000 fe9b 	bl	800a800 <__kernel_sin>
 8009aca:	ec53 2b10 	vmov	r2, r3, d0
 8009ace:	ee10 0a10 	vmov	r0, s0
 8009ad2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ad6:	e7da      	b.n	8009a8e <cos+0x2e>
 8009ad8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009adc:	ed9d 0b00 	vldr	d0, [sp]
 8009ae0:	f000 fa76 	bl	8009fd0 <__kernel_cos>
 8009ae4:	e7f1      	b.n	8009aca <cos+0x6a>
 8009ae6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aea:	ed9d 0b00 	vldr	d0, [sp]
 8009aee:	2001      	movs	r0, #1
 8009af0:	f000 fe86 	bl	800a800 <__kernel_sin>
 8009af4:	e7e0      	b.n	8009ab8 <cos+0x58>
 8009af6:	bf00      	nop
	...
 8009b00:	3fe921fb 	.word	0x3fe921fb
 8009b04:	7fefffff 	.word	0x7fefffff

08009b08 <sin>:
 8009b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b0a:	ec53 2b10 	vmov	r2, r3, d0
 8009b0e:	4828      	ldr	r0, [pc, #160]	; (8009bb0 <sin+0xa8>)
 8009b10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009b14:	4281      	cmp	r1, r0
 8009b16:	dc07      	bgt.n	8009b28 <sin+0x20>
 8009b18:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009ba8 <sin+0xa0>
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	b005      	add	sp, #20
 8009b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b24:	f000 be6c 	b.w	800a800 <__kernel_sin>
 8009b28:	4822      	ldr	r0, [pc, #136]	; (8009bb4 <sin+0xac>)
 8009b2a:	4281      	cmp	r1, r0
 8009b2c:	dd09      	ble.n	8009b42 <sin+0x3a>
 8009b2e:	ee10 0a10 	vmov	r0, s0
 8009b32:	4619      	mov	r1, r3
 8009b34:	f7f6 fbb0 	bl	8000298 <__aeabi_dsub>
 8009b38:	ec41 0b10 	vmov	d0, r0, r1
 8009b3c:	b005      	add	sp, #20
 8009b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009b42:	4668      	mov	r0, sp
 8009b44:	f000 f838 	bl	8009bb8 <__ieee754_rem_pio2>
 8009b48:	f000 0003 	and.w	r0, r0, #3
 8009b4c:	2801      	cmp	r0, #1
 8009b4e:	d00c      	beq.n	8009b6a <sin+0x62>
 8009b50:	2802      	cmp	r0, #2
 8009b52:	d011      	beq.n	8009b78 <sin+0x70>
 8009b54:	b9f0      	cbnz	r0, 8009b94 <sin+0x8c>
 8009b56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b5a:	ed9d 0b00 	vldr	d0, [sp]
 8009b5e:	2001      	movs	r0, #1
 8009b60:	f000 fe4e 	bl	800a800 <__kernel_sin>
 8009b64:	ec51 0b10 	vmov	r0, r1, d0
 8009b68:	e7e6      	b.n	8009b38 <sin+0x30>
 8009b6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b6e:	ed9d 0b00 	vldr	d0, [sp]
 8009b72:	f000 fa2d 	bl	8009fd0 <__kernel_cos>
 8009b76:	e7f5      	b.n	8009b64 <sin+0x5c>
 8009b78:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b7c:	ed9d 0b00 	vldr	d0, [sp]
 8009b80:	2001      	movs	r0, #1
 8009b82:	f000 fe3d 	bl	800a800 <__kernel_sin>
 8009b86:	ec53 2b10 	vmov	r2, r3, d0
 8009b8a:	ee10 0a10 	vmov	r0, s0
 8009b8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b92:	e7d1      	b.n	8009b38 <sin+0x30>
 8009b94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009b98:	ed9d 0b00 	vldr	d0, [sp]
 8009b9c:	f000 fa18 	bl	8009fd0 <__kernel_cos>
 8009ba0:	e7f1      	b.n	8009b86 <sin+0x7e>
 8009ba2:	bf00      	nop
 8009ba4:	f3af 8000 	nop.w
	...
 8009bb0:	3fe921fb 	.word	0x3fe921fb
 8009bb4:	7fefffff 	.word	0x7fefffff

08009bb8 <__ieee754_rem_pio2>:
 8009bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bbc:	ed2d 8b02 	vpush	{d8}
 8009bc0:	ec55 4b10 	vmov	r4, r5, d0
 8009bc4:	4bca      	ldr	r3, [pc, #808]	; (8009ef0 <__ieee754_rem_pio2+0x338>)
 8009bc6:	b08b      	sub	sp, #44	; 0x2c
 8009bc8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009bcc:	4598      	cmp	r8, r3
 8009bce:	4682      	mov	sl, r0
 8009bd0:	9502      	str	r5, [sp, #8]
 8009bd2:	dc08      	bgt.n	8009be6 <__ieee754_rem_pio2+0x2e>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	ed80 0b00 	vstr	d0, [r0]
 8009bdc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009be0:	f04f 0b00 	mov.w	fp, #0
 8009be4:	e028      	b.n	8009c38 <__ieee754_rem_pio2+0x80>
 8009be6:	4bc3      	ldr	r3, [pc, #780]	; (8009ef4 <__ieee754_rem_pio2+0x33c>)
 8009be8:	4598      	cmp	r8, r3
 8009bea:	dc78      	bgt.n	8009cde <__ieee754_rem_pio2+0x126>
 8009bec:	9b02      	ldr	r3, [sp, #8]
 8009bee:	4ec2      	ldr	r6, [pc, #776]	; (8009ef8 <__ieee754_rem_pio2+0x340>)
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	ee10 0a10 	vmov	r0, s0
 8009bf6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009eb8 <__ieee754_rem_pio2+0x300>)
 8009bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	dd39      	ble.n	8009c74 <__ieee754_rem_pio2+0xbc>
 8009c00:	f7f6 fb4a 	bl	8000298 <__aeabi_dsub>
 8009c04:	45b0      	cmp	r8, r6
 8009c06:	4604      	mov	r4, r0
 8009c08:	460d      	mov	r5, r1
 8009c0a:	d01b      	beq.n	8009c44 <__ieee754_rem_pio2+0x8c>
 8009c0c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009ec0 <__ieee754_rem_pio2+0x308>)
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f7f6 fb41 	bl	8000298 <__aeabi_dsub>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	e9ca 2300 	strd	r2, r3, [sl]
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 fb39 	bl	8000298 <__aeabi_dsub>
 8009c26:	a3a6      	add	r3, pc, #664	; (adr r3, 8009ec0 <__ieee754_rem_pio2+0x308>)
 8009c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2c:	f7f6 fb34 	bl	8000298 <__aeabi_dsub>
 8009c30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c34:	f04f 0b01 	mov.w	fp, #1
 8009c38:	4658      	mov	r0, fp
 8009c3a:	b00b      	add	sp, #44	; 0x2c
 8009c3c:	ecbd 8b02 	vpop	{d8}
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ec8 <__ieee754_rem_pio2+0x310>)
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	f7f6 fb25 	bl	8000298 <__aeabi_dsub>
 8009c4e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ed0 <__ieee754_rem_pio2+0x318>)
 8009c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c54:	4604      	mov	r4, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	f7f6 fb1e 	bl	8000298 <__aeabi_dsub>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	e9ca 2300 	strd	r2, r3, [sl]
 8009c64:	4620      	mov	r0, r4
 8009c66:	4629      	mov	r1, r5
 8009c68:	f7f6 fb16 	bl	8000298 <__aeabi_dsub>
 8009c6c:	a398      	add	r3, pc, #608	; (adr r3, 8009ed0 <__ieee754_rem_pio2+0x318>)
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	e7db      	b.n	8009c2c <__ieee754_rem_pio2+0x74>
 8009c74:	f7f6 fb12 	bl	800029c <__adddf3>
 8009c78:	45b0      	cmp	r8, r6
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	460d      	mov	r5, r1
 8009c7e:	d016      	beq.n	8009cae <__ieee754_rem_pio2+0xf6>
 8009c80:	a38f      	add	r3, pc, #572	; (adr r3, 8009ec0 <__ieee754_rem_pio2+0x308>)
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f7f6 fb09 	bl	800029c <__adddf3>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	e9ca 2300 	strd	r2, r3, [sl]
 8009c92:	4620      	mov	r0, r4
 8009c94:	4629      	mov	r1, r5
 8009c96:	f7f6 faff 	bl	8000298 <__aeabi_dsub>
 8009c9a:	a389      	add	r3, pc, #548	; (adr r3, 8009ec0 <__ieee754_rem_pio2+0x308>)
 8009c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca0:	f7f6 fafc 	bl	800029c <__adddf3>
 8009ca4:	f04f 3bff 	mov.w	fp, #4294967295
 8009ca8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009cac:	e7c4      	b.n	8009c38 <__ieee754_rem_pio2+0x80>
 8009cae:	a386      	add	r3, pc, #536	; (adr r3, 8009ec8 <__ieee754_rem_pio2+0x310>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 faf2 	bl	800029c <__adddf3>
 8009cb8:	a385      	add	r3, pc, #532	; (adr r3, 8009ed0 <__ieee754_rem_pio2+0x318>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	460d      	mov	r5, r1
 8009cc2:	f7f6 faeb 	bl	800029c <__adddf3>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	e9ca 2300 	strd	r2, r3, [sl]
 8009cce:	4620      	mov	r0, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	f7f6 fae1 	bl	8000298 <__aeabi_dsub>
 8009cd6:	a37e      	add	r3, pc, #504	; (adr r3, 8009ed0 <__ieee754_rem_pio2+0x318>)
 8009cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cdc:	e7e0      	b.n	8009ca0 <__ieee754_rem_pio2+0xe8>
 8009cde:	4b87      	ldr	r3, [pc, #540]	; (8009efc <__ieee754_rem_pio2+0x344>)
 8009ce0:	4598      	cmp	r8, r3
 8009ce2:	f300 80d9 	bgt.w	8009e98 <__ieee754_rem_pio2+0x2e0>
 8009ce6:	f000 fe49 	bl	800a97c <fabs>
 8009cea:	ec55 4b10 	vmov	r4, r5, d0
 8009cee:	ee10 0a10 	vmov	r0, s0
 8009cf2:	a379      	add	r3, pc, #484	; (adr r3, 8009ed8 <__ieee754_rem_pio2+0x320>)
 8009cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7f6 fc85 	bl	8000608 <__aeabi_dmul>
 8009cfe:	4b80      	ldr	r3, [pc, #512]	; (8009f00 <__ieee754_rem_pio2+0x348>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	f7f6 facb 	bl	800029c <__adddf3>
 8009d06:	f7f6 ff2f 	bl	8000b68 <__aeabi_d2iz>
 8009d0a:	4683      	mov	fp, r0
 8009d0c:	f7f6 fc12 	bl	8000534 <__aeabi_i2d>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	ec43 2b18 	vmov	d8, r2, r3
 8009d18:	a367      	add	r3, pc, #412	; (adr r3, 8009eb8 <__ieee754_rem_pio2+0x300>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 fc73 	bl	8000608 <__aeabi_dmul>
 8009d22:	4602      	mov	r2, r0
 8009d24:	460b      	mov	r3, r1
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 fab5 	bl	8000298 <__aeabi_dsub>
 8009d2e:	a364      	add	r3, pc, #400	; (adr r3, 8009ec0 <__ieee754_rem_pio2+0x308>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	ec51 0b18 	vmov	r0, r1, d8
 8009d3c:	f7f6 fc64 	bl	8000608 <__aeabi_dmul>
 8009d40:	f1bb 0f1f 	cmp.w	fp, #31
 8009d44:	4604      	mov	r4, r0
 8009d46:	460d      	mov	r5, r1
 8009d48:	dc0d      	bgt.n	8009d66 <__ieee754_rem_pio2+0x1ae>
 8009d4a:	4b6e      	ldr	r3, [pc, #440]	; (8009f04 <__ieee754_rem_pio2+0x34c>)
 8009d4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d54:	4543      	cmp	r3, r8
 8009d56:	d006      	beq.n	8009d66 <__ieee754_rem_pio2+0x1ae>
 8009d58:	4622      	mov	r2, r4
 8009d5a:	462b      	mov	r3, r5
 8009d5c:	4630      	mov	r0, r6
 8009d5e:	4639      	mov	r1, r7
 8009d60:	f7f6 fa9a 	bl	8000298 <__aeabi_dsub>
 8009d64:	e00f      	b.n	8009d86 <__ieee754_rem_pio2+0x1ce>
 8009d66:	462b      	mov	r3, r5
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 fa93 	bl	8000298 <__aeabi_dsub>
 8009d72:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009d76:	9303      	str	r3, [sp, #12]
 8009d78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009d80:	f1b8 0f10 	cmp.w	r8, #16
 8009d84:	dc02      	bgt.n	8009d8c <__ieee754_rem_pio2+0x1d4>
 8009d86:	e9ca 0100 	strd	r0, r1, [sl]
 8009d8a:	e039      	b.n	8009e00 <__ieee754_rem_pio2+0x248>
 8009d8c:	a34e      	add	r3, pc, #312	; (adr r3, 8009ec8 <__ieee754_rem_pio2+0x310>)
 8009d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d92:	ec51 0b18 	vmov	r0, r1, d8
 8009d96:	f7f6 fc37 	bl	8000608 <__aeabi_dmul>
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4630      	mov	r0, r6
 8009da4:	4639      	mov	r1, r7
 8009da6:	f7f6 fa77 	bl	8000298 <__aeabi_dsub>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	4680      	mov	r8, r0
 8009db0:	4689      	mov	r9, r1
 8009db2:	4630      	mov	r0, r6
 8009db4:	4639      	mov	r1, r7
 8009db6:	f7f6 fa6f 	bl	8000298 <__aeabi_dsub>
 8009dba:	4622      	mov	r2, r4
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	f7f6 fa6b 	bl	8000298 <__aeabi_dsub>
 8009dc2:	a343      	add	r3, pc, #268	; (adr r3, 8009ed0 <__ieee754_rem_pio2+0x318>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	460d      	mov	r5, r1
 8009dcc:	ec51 0b18 	vmov	r0, r1, d8
 8009dd0:	f7f6 fc1a 	bl	8000608 <__aeabi_dmul>
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	462b      	mov	r3, r5
 8009dd8:	f7f6 fa5e 	bl	8000298 <__aeabi_dsub>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4604      	mov	r4, r0
 8009de2:	460d      	mov	r5, r1
 8009de4:	4640      	mov	r0, r8
 8009de6:	4649      	mov	r1, r9
 8009de8:	f7f6 fa56 	bl	8000298 <__aeabi_dsub>
 8009dec:	9a03      	ldr	r2, [sp, #12]
 8009dee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	2b31      	cmp	r3, #49	; 0x31
 8009df6:	dc24      	bgt.n	8009e42 <__ieee754_rem_pio2+0x28a>
 8009df8:	e9ca 0100 	strd	r0, r1, [sl]
 8009dfc:	4646      	mov	r6, r8
 8009dfe:	464f      	mov	r7, r9
 8009e00:	e9da 8900 	ldrd	r8, r9, [sl]
 8009e04:	4630      	mov	r0, r6
 8009e06:	4642      	mov	r2, r8
 8009e08:	464b      	mov	r3, r9
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	f7f6 fa44 	bl	8000298 <__aeabi_dsub>
 8009e10:	462b      	mov	r3, r5
 8009e12:	4622      	mov	r2, r4
 8009e14:	f7f6 fa40 	bl	8000298 <__aeabi_dsub>
 8009e18:	9b02      	ldr	r3, [sp, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009e20:	f6bf af0a 	bge.w	8009c38 <__ieee754_rem_pio2+0x80>
 8009e24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e28:	f8ca 3004 	str.w	r3, [sl, #4]
 8009e2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e30:	f8ca 8000 	str.w	r8, [sl]
 8009e34:	f8ca 0008 	str.w	r0, [sl, #8]
 8009e38:	f8ca 300c 	str.w	r3, [sl, #12]
 8009e3c:	f1cb 0b00 	rsb	fp, fp, #0
 8009e40:	e6fa      	b.n	8009c38 <__ieee754_rem_pio2+0x80>
 8009e42:	a327      	add	r3, pc, #156	; (adr r3, 8009ee0 <__ieee754_rem_pio2+0x328>)
 8009e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e48:	ec51 0b18 	vmov	r0, r1, d8
 8009e4c:	f7f6 fbdc 	bl	8000608 <__aeabi_dmul>
 8009e50:	4604      	mov	r4, r0
 8009e52:	460d      	mov	r5, r1
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fa1c 	bl	8000298 <__aeabi_dsub>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4606      	mov	r6, r0
 8009e66:	460f      	mov	r7, r1
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fa14 	bl	8000298 <__aeabi_dsub>
 8009e70:	4622      	mov	r2, r4
 8009e72:	462b      	mov	r3, r5
 8009e74:	f7f6 fa10 	bl	8000298 <__aeabi_dsub>
 8009e78:	a31b      	add	r3, pc, #108	; (adr r3, 8009ee8 <__ieee754_rem_pio2+0x330>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	4604      	mov	r4, r0
 8009e80:	460d      	mov	r5, r1
 8009e82:	ec51 0b18 	vmov	r0, r1, d8
 8009e86:	f7f6 fbbf 	bl	8000608 <__aeabi_dmul>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f7f6 fa03 	bl	8000298 <__aeabi_dsub>
 8009e92:	4604      	mov	r4, r0
 8009e94:	460d      	mov	r5, r1
 8009e96:	e75f      	b.n	8009d58 <__ieee754_rem_pio2+0x1a0>
 8009e98:	4b1b      	ldr	r3, [pc, #108]	; (8009f08 <__ieee754_rem_pio2+0x350>)
 8009e9a:	4598      	cmp	r8, r3
 8009e9c:	dd36      	ble.n	8009f0c <__ieee754_rem_pio2+0x354>
 8009e9e:	ee10 2a10 	vmov	r2, s0
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	4629      	mov	r1, r5
 8009ea8:	f7f6 f9f6 	bl	8000298 <__aeabi_dsub>
 8009eac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009eb0:	e9ca 0100 	strd	r0, r1, [sl]
 8009eb4:	e694      	b.n	8009be0 <__ieee754_rem_pio2+0x28>
 8009eb6:	bf00      	nop
 8009eb8:	54400000 	.word	0x54400000
 8009ebc:	3ff921fb 	.word	0x3ff921fb
 8009ec0:	1a626331 	.word	0x1a626331
 8009ec4:	3dd0b461 	.word	0x3dd0b461
 8009ec8:	1a600000 	.word	0x1a600000
 8009ecc:	3dd0b461 	.word	0x3dd0b461
 8009ed0:	2e037073 	.word	0x2e037073
 8009ed4:	3ba3198a 	.word	0x3ba3198a
 8009ed8:	6dc9c883 	.word	0x6dc9c883
 8009edc:	3fe45f30 	.word	0x3fe45f30
 8009ee0:	2e000000 	.word	0x2e000000
 8009ee4:	3ba3198a 	.word	0x3ba3198a
 8009ee8:	252049c1 	.word	0x252049c1
 8009eec:	397b839a 	.word	0x397b839a
 8009ef0:	3fe921fb 	.word	0x3fe921fb
 8009ef4:	4002d97b 	.word	0x4002d97b
 8009ef8:	3ff921fb 	.word	0x3ff921fb
 8009efc:	413921fb 	.word	0x413921fb
 8009f00:	3fe00000 	.word	0x3fe00000
 8009f04:	0800b8fc 	.word	0x0800b8fc
 8009f08:	7fefffff 	.word	0x7fefffff
 8009f0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8009f10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8009f14:	ee10 0a10 	vmov	r0, s0
 8009f18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8009f1c:	ee10 6a10 	vmov	r6, s0
 8009f20:	460f      	mov	r7, r1
 8009f22:	f7f6 fe21 	bl	8000b68 <__aeabi_d2iz>
 8009f26:	f7f6 fb05 	bl	8000534 <__aeabi_i2d>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4630      	mov	r0, r6
 8009f30:	4639      	mov	r1, r7
 8009f32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009f36:	f7f6 f9af 	bl	8000298 <__aeabi_dsub>
 8009f3a:	4b23      	ldr	r3, [pc, #140]	; (8009fc8 <__ieee754_rem_pio2+0x410>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	f7f6 fb63 	bl	8000608 <__aeabi_dmul>
 8009f42:	460f      	mov	r7, r1
 8009f44:	4606      	mov	r6, r0
 8009f46:	f7f6 fe0f 	bl	8000b68 <__aeabi_d2iz>
 8009f4a:	f7f6 faf3 	bl	8000534 <__aeabi_i2d>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4630      	mov	r0, r6
 8009f54:	4639      	mov	r1, r7
 8009f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009f5a:	f7f6 f99d 	bl	8000298 <__aeabi_dsub>
 8009f5e:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <__ieee754_rem_pio2+0x410>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	f7f6 fb51 	bl	8000608 <__aeabi_dmul>
 8009f66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f6a:	ad04      	add	r5, sp, #16
 8009f6c:	f04f 0803 	mov.w	r8, #3
 8009f70:	46a9      	mov	r9, r5
 8009f72:	2600      	movs	r6, #0
 8009f74:	2700      	movs	r7, #0
 8009f76:	4632      	mov	r2, r6
 8009f78:	463b      	mov	r3, r7
 8009f7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009f7e:	46c3      	mov	fp, r8
 8009f80:	3d08      	subs	r5, #8
 8009f82:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f86:	f7f6 fda7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d1f3      	bne.n	8009f76 <__ieee754_rem_pio2+0x3be>
 8009f8e:	4b0f      	ldr	r3, [pc, #60]	; (8009fcc <__ieee754_rem_pio2+0x414>)
 8009f90:	9301      	str	r3, [sp, #4]
 8009f92:	2302      	movs	r3, #2
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	4622      	mov	r2, r4
 8009f98:	465b      	mov	r3, fp
 8009f9a:	4651      	mov	r1, sl
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	f000 f8df 	bl	800a160 <__kernel_rem_pio2>
 8009fa2:	9b02      	ldr	r3, [sp, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	4683      	mov	fp, r0
 8009fa8:	f6bf ae46 	bge.w	8009c38 <__ieee754_rem_pio2+0x80>
 8009fac:	e9da 2100 	ldrd	r2, r1, [sl]
 8009fb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fb4:	e9ca 2300 	strd	r2, r3, [sl]
 8009fb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009fbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009fc4:	e73a      	b.n	8009e3c <__ieee754_rem_pio2+0x284>
 8009fc6:	bf00      	nop
 8009fc8:	41700000 	.word	0x41700000
 8009fcc:	0800b97c 	.word	0x0800b97c

08009fd0 <__kernel_cos>:
 8009fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	ec57 6b10 	vmov	r6, r7, d0
 8009fd8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009fdc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009fe0:	ed8d 1b00 	vstr	d1, [sp]
 8009fe4:	da07      	bge.n	8009ff6 <__kernel_cos+0x26>
 8009fe6:	ee10 0a10 	vmov	r0, s0
 8009fea:	4639      	mov	r1, r7
 8009fec:	f7f6 fdbc 	bl	8000b68 <__aeabi_d2iz>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	f000 8088 	beq.w	800a106 <__kernel_cos+0x136>
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	463b      	mov	r3, r7
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 fb03 	bl	8000608 <__aeabi_dmul>
 800a002:	4b51      	ldr	r3, [pc, #324]	; (800a148 <__kernel_cos+0x178>)
 800a004:	2200      	movs	r2, #0
 800a006:	4604      	mov	r4, r0
 800a008:	460d      	mov	r5, r1
 800a00a:	f7f6 fafd 	bl	8000608 <__aeabi_dmul>
 800a00e:	a340      	add	r3, pc, #256	; (adr r3, 800a110 <__kernel_cos+0x140>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	4682      	mov	sl, r0
 800a016:	468b      	mov	fp, r1
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7f6 faf4 	bl	8000608 <__aeabi_dmul>
 800a020:	a33d      	add	r3, pc, #244	; (adr r3, 800a118 <__kernel_cos+0x148>)
 800a022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a026:	f7f6 f939 	bl	800029c <__adddf3>
 800a02a:	4622      	mov	r2, r4
 800a02c:	462b      	mov	r3, r5
 800a02e:	f7f6 faeb 	bl	8000608 <__aeabi_dmul>
 800a032:	a33b      	add	r3, pc, #236	; (adr r3, 800a120 <__kernel_cos+0x150>)
 800a034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a038:	f7f6 f92e 	bl	8000298 <__aeabi_dsub>
 800a03c:	4622      	mov	r2, r4
 800a03e:	462b      	mov	r3, r5
 800a040:	f7f6 fae2 	bl	8000608 <__aeabi_dmul>
 800a044:	a338      	add	r3, pc, #224	; (adr r3, 800a128 <__kernel_cos+0x158>)
 800a046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04a:	f7f6 f927 	bl	800029c <__adddf3>
 800a04e:	4622      	mov	r2, r4
 800a050:	462b      	mov	r3, r5
 800a052:	f7f6 fad9 	bl	8000608 <__aeabi_dmul>
 800a056:	a336      	add	r3, pc, #216	; (adr r3, 800a130 <__kernel_cos+0x160>)
 800a058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05c:	f7f6 f91c 	bl	8000298 <__aeabi_dsub>
 800a060:	4622      	mov	r2, r4
 800a062:	462b      	mov	r3, r5
 800a064:	f7f6 fad0 	bl	8000608 <__aeabi_dmul>
 800a068:	a333      	add	r3, pc, #204	; (adr r3, 800a138 <__kernel_cos+0x168>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 f915 	bl	800029c <__adddf3>
 800a072:	4622      	mov	r2, r4
 800a074:	462b      	mov	r3, r5
 800a076:	f7f6 fac7 	bl	8000608 <__aeabi_dmul>
 800a07a:	4622      	mov	r2, r4
 800a07c:	462b      	mov	r3, r5
 800a07e:	f7f6 fac3 	bl	8000608 <__aeabi_dmul>
 800a082:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a086:	4604      	mov	r4, r0
 800a088:	460d      	mov	r5, r1
 800a08a:	4630      	mov	r0, r6
 800a08c:	4639      	mov	r1, r7
 800a08e:	f7f6 fabb 	bl	8000608 <__aeabi_dmul>
 800a092:	460b      	mov	r3, r1
 800a094:	4602      	mov	r2, r0
 800a096:	4629      	mov	r1, r5
 800a098:	4620      	mov	r0, r4
 800a09a:	f7f6 f8fd 	bl	8000298 <__aeabi_dsub>
 800a09e:	4b2b      	ldr	r3, [pc, #172]	; (800a14c <__kernel_cos+0x17c>)
 800a0a0:	4598      	cmp	r8, r3
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460f      	mov	r7, r1
 800a0a6:	dc10      	bgt.n	800a0ca <__kernel_cos+0xfa>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	4659      	mov	r1, fp
 800a0b0:	f7f6 f8f2 	bl	8000298 <__aeabi_dsub>
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4926      	ldr	r1, [pc, #152]	; (800a150 <__kernel_cos+0x180>)
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	f7f6 f8ec 	bl	8000298 <__aeabi_dsub>
 800a0c0:	ec41 0b10 	vmov	d0, r0, r1
 800a0c4:	b003      	add	sp, #12
 800a0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ca:	4b22      	ldr	r3, [pc, #136]	; (800a154 <__kernel_cos+0x184>)
 800a0cc:	4920      	ldr	r1, [pc, #128]	; (800a150 <__kernel_cos+0x180>)
 800a0ce:	4598      	cmp	r8, r3
 800a0d0:	bfcc      	ite	gt
 800a0d2:	4d21      	ldrgt	r5, [pc, #132]	; (800a158 <__kernel_cos+0x188>)
 800a0d4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a0d8:	2400      	movs	r4, #0
 800a0da:	4622      	mov	r2, r4
 800a0dc:	462b      	mov	r3, r5
 800a0de:	2000      	movs	r0, #0
 800a0e0:	f7f6 f8da 	bl	8000298 <__aeabi_dsub>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4680      	mov	r8, r0
 800a0e8:	4689      	mov	r9, r1
 800a0ea:	462b      	mov	r3, r5
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	4659      	mov	r1, fp
 800a0f0:	f7f6 f8d2 	bl	8000298 <__aeabi_dsub>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	463b      	mov	r3, r7
 800a0f8:	f7f6 f8ce 	bl	8000298 <__aeabi_dsub>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	460b      	mov	r3, r1
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	e7da      	b.n	800a0bc <__kernel_cos+0xec>
 800a106:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a140 <__kernel_cos+0x170>
 800a10a:	e7db      	b.n	800a0c4 <__kernel_cos+0xf4>
 800a10c:	f3af 8000 	nop.w
 800a110:	be8838d4 	.word	0xbe8838d4
 800a114:	bda8fae9 	.word	0xbda8fae9
 800a118:	bdb4b1c4 	.word	0xbdb4b1c4
 800a11c:	3e21ee9e 	.word	0x3e21ee9e
 800a120:	809c52ad 	.word	0x809c52ad
 800a124:	3e927e4f 	.word	0x3e927e4f
 800a128:	19cb1590 	.word	0x19cb1590
 800a12c:	3efa01a0 	.word	0x3efa01a0
 800a130:	16c15177 	.word	0x16c15177
 800a134:	3f56c16c 	.word	0x3f56c16c
 800a138:	5555554c 	.word	0x5555554c
 800a13c:	3fa55555 	.word	0x3fa55555
 800a140:	00000000 	.word	0x00000000
 800a144:	3ff00000 	.word	0x3ff00000
 800a148:	3fe00000 	.word	0x3fe00000
 800a14c:	3fd33332 	.word	0x3fd33332
 800a150:	3ff00000 	.word	0x3ff00000
 800a154:	3fe90000 	.word	0x3fe90000
 800a158:	3fd20000 	.word	0x3fd20000
 800a15c:	00000000 	.word	0x00000000

0800a160 <__kernel_rem_pio2>:
 800a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	ed2d 8b02 	vpush	{d8}
 800a168:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a16c:	f112 0f14 	cmn.w	r2, #20
 800a170:	9308      	str	r3, [sp, #32]
 800a172:	9101      	str	r1, [sp, #4]
 800a174:	4bc4      	ldr	r3, [pc, #784]	; (800a488 <__kernel_rem_pio2+0x328>)
 800a176:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a178:	900b      	str	r0, [sp, #44]	; 0x2c
 800a17a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a17e:	9302      	str	r3, [sp, #8]
 800a180:	9b08      	ldr	r3, [sp, #32]
 800a182:	f103 33ff 	add.w	r3, r3, #4294967295
 800a186:	bfa8      	it	ge
 800a188:	1ed4      	subge	r4, r2, #3
 800a18a:	9306      	str	r3, [sp, #24]
 800a18c:	bfb2      	itee	lt
 800a18e:	2400      	movlt	r4, #0
 800a190:	2318      	movge	r3, #24
 800a192:	fb94 f4f3 	sdivge	r4, r4, r3
 800a196:	f06f 0317 	mvn.w	r3, #23
 800a19a:	fb04 3303 	mla	r3, r4, r3, r3
 800a19e:	eb03 0a02 	add.w	sl, r3, r2
 800a1a2:	9b02      	ldr	r3, [sp, #8]
 800a1a4:	9a06      	ldr	r2, [sp, #24]
 800a1a6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a478 <__kernel_rem_pio2+0x318>
 800a1aa:	eb03 0802 	add.w	r8, r3, r2
 800a1ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a1b0:	1aa7      	subs	r7, r4, r2
 800a1b2:	ae22      	add	r6, sp, #136	; 0x88
 800a1b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a1b8:	2500      	movs	r5, #0
 800a1ba:	4545      	cmp	r5, r8
 800a1bc:	dd13      	ble.n	800a1e6 <__kernel_rem_pio2+0x86>
 800a1be:	9b08      	ldr	r3, [sp, #32]
 800a1c0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a478 <__kernel_rem_pio2+0x318>
 800a1c4:	aa22      	add	r2, sp, #136	; 0x88
 800a1c6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a1ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a1ce:	f04f 0800 	mov.w	r8, #0
 800a1d2:	9b02      	ldr	r3, [sp, #8]
 800a1d4:	4598      	cmp	r8, r3
 800a1d6:	dc2f      	bgt.n	800a238 <__kernel_rem_pio2+0xd8>
 800a1d8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a1dc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a1e0:	462f      	mov	r7, r5
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	e01b      	b.n	800a21e <__kernel_rem_pio2+0xbe>
 800a1e6:	42ef      	cmn	r7, r5
 800a1e8:	d407      	bmi.n	800a1fa <__kernel_rem_pio2+0x9a>
 800a1ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a1ee:	f7f6 f9a1 	bl	8000534 <__aeabi_i2d>
 800a1f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a1f6:	3501      	adds	r5, #1
 800a1f8:	e7df      	b.n	800a1ba <__kernel_rem_pio2+0x5a>
 800a1fa:	ec51 0b18 	vmov	r0, r1, d8
 800a1fe:	e7f8      	b.n	800a1f2 <__kernel_rem_pio2+0x92>
 800a200:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a204:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a208:	f7f6 f9fe 	bl	8000608 <__aeabi_dmul>
 800a20c:	4602      	mov	r2, r0
 800a20e:	460b      	mov	r3, r1
 800a210:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a214:	f7f6 f842 	bl	800029c <__adddf3>
 800a218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a21c:	3601      	adds	r6, #1
 800a21e:	9b06      	ldr	r3, [sp, #24]
 800a220:	429e      	cmp	r6, r3
 800a222:	f1a7 0708 	sub.w	r7, r7, #8
 800a226:	ddeb      	ble.n	800a200 <__kernel_rem_pio2+0xa0>
 800a228:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a22c:	f108 0801 	add.w	r8, r8, #1
 800a230:	ecab 7b02 	vstmia	fp!, {d7}
 800a234:	3508      	adds	r5, #8
 800a236:	e7cc      	b.n	800a1d2 <__kernel_rem_pio2+0x72>
 800a238:	9b02      	ldr	r3, [sp, #8]
 800a23a:	aa0e      	add	r2, sp, #56	; 0x38
 800a23c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a240:	930d      	str	r3, [sp, #52]	; 0x34
 800a242:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a244:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a248:	9c02      	ldr	r4, [sp, #8]
 800a24a:	930c      	str	r3, [sp, #48]	; 0x30
 800a24c:	00e3      	lsls	r3, r4, #3
 800a24e:	930a      	str	r3, [sp, #40]	; 0x28
 800a250:	ab9a      	add	r3, sp, #616	; 0x268
 800a252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a256:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a25a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a25e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a260:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a264:	46c3      	mov	fp, r8
 800a266:	46a1      	mov	r9, r4
 800a268:	f1b9 0f00 	cmp.w	r9, #0
 800a26c:	f1a5 0508 	sub.w	r5, r5, #8
 800a270:	dc77      	bgt.n	800a362 <__kernel_rem_pio2+0x202>
 800a272:	ec47 6b10 	vmov	d0, r6, r7
 800a276:	4650      	mov	r0, sl
 800a278:	f000 fc0a 	bl	800aa90 <scalbn>
 800a27c:	ec57 6b10 	vmov	r6, r7, d0
 800a280:	2200      	movs	r2, #0
 800a282:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a286:	ee10 0a10 	vmov	r0, s0
 800a28a:	4639      	mov	r1, r7
 800a28c:	f7f6 f9bc 	bl	8000608 <__aeabi_dmul>
 800a290:	ec41 0b10 	vmov	d0, r0, r1
 800a294:	f000 fb7c 	bl	800a990 <floor>
 800a298:	4b7c      	ldr	r3, [pc, #496]	; (800a48c <__kernel_rem_pio2+0x32c>)
 800a29a:	ec51 0b10 	vmov	r0, r1, d0
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f7f6 f9b2 	bl	8000608 <__aeabi_dmul>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f5 fff4 	bl	8000298 <__aeabi_dsub>
 800a2b0:	460f      	mov	r7, r1
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	f7f6 fc58 	bl	8000b68 <__aeabi_d2iz>
 800a2b8:	9004      	str	r0, [sp, #16]
 800a2ba:	f7f6 f93b 	bl	8000534 <__aeabi_i2d>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	f7f5 ffe7 	bl	8000298 <__aeabi_dsub>
 800a2ca:	f1ba 0f00 	cmp.w	sl, #0
 800a2ce:	4606      	mov	r6, r0
 800a2d0:	460f      	mov	r7, r1
 800a2d2:	dd6d      	ble.n	800a3b0 <__kernel_rem_pio2+0x250>
 800a2d4:	1e62      	subs	r2, r4, #1
 800a2d6:	ab0e      	add	r3, sp, #56	; 0x38
 800a2d8:	9d04      	ldr	r5, [sp, #16]
 800a2da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a2de:	f1ca 0118 	rsb	r1, sl, #24
 800a2e2:	fa40 f301 	asr.w	r3, r0, r1
 800a2e6:	441d      	add	r5, r3
 800a2e8:	408b      	lsls	r3, r1
 800a2ea:	1ac0      	subs	r0, r0, r3
 800a2ec:	ab0e      	add	r3, sp, #56	; 0x38
 800a2ee:	9504      	str	r5, [sp, #16]
 800a2f0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a2f4:	f1ca 0317 	rsb	r3, sl, #23
 800a2f8:	fa40 fb03 	asr.w	fp, r0, r3
 800a2fc:	f1bb 0f00 	cmp.w	fp, #0
 800a300:	dd65      	ble.n	800a3ce <__kernel_rem_pio2+0x26e>
 800a302:	9b04      	ldr	r3, [sp, #16]
 800a304:	2200      	movs	r2, #0
 800a306:	3301      	adds	r3, #1
 800a308:	9304      	str	r3, [sp, #16]
 800a30a:	4615      	mov	r5, r2
 800a30c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a310:	4294      	cmp	r4, r2
 800a312:	f300 809c 	bgt.w	800a44e <__kernel_rem_pio2+0x2ee>
 800a316:	f1ba 0f00 	cmp.w	sl, #0
 800a31a:	dd07      	ble.n	800a32c <__kernel_rem_pio2+0x1cc>
 800a31c:	f1ba 0f01 	cmp.w	sl, #1
 800a320:	f000 80c0 	beq.w	800a4a4 <__kernel_rem_pio2+0x344>
 800a324:	f1ba 0f02 	cmp.w	sl, #2
 800a328:	f000 80c6 	beq.w	800a4b8 <__kernel_rem_pio2+0x358>
 800a32c:	f1bb 0f02 	cmp.w	fp, #2
 800a330:	d14d      	bne.n	800a3ce <__kernel_rem_pio2+0x26e>
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	4956      	ldr	r1, [pc, #344]	; (800a490 <__kernel_rem_pio2+0x330>)
 800a338:	2000      	movs	r0, #0
 800a33a:	f7f5 ffad 	bl	8000298 <__aeabi_dsub>
 800a33e:	4606      	mov	r6, r0
 800a340:	460f      	mov	r7, r1
 800a342:	2d00      	cmp	r5, #0
 800a344:	d043      	beq.n	800a3ce <__kernel_rem_pio2+0x26e>
 800a346:	4650      	mov	r0, sl
 800a348:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a480 <__kernel_rem_pio2+0x320>
 800a34c:	f000 fba0 	bl	800aa90 <scalbn>
 800a350:	4630      	mov	r0, r6
 800a352:	4639      	mov	r1, r7
 800a354:	ec53 2b10 	vmov	r2, r3, d0
 800a358:	f7f5 ff9e 	bl	8000298 <__aeabi_dsub>
 800a35c:	4606      	mov	r6, r0
 800a35e:	460f      	mov	r7, r1
 800a360:	e035      	b.n	800a3ce <__kernel_rem_pio2+0x26e>
 800a362:	4b4c      	ldr	r3, [pc, #304]	; (800a494 <__kernel_rem_pio2+0x334>)
 800a364:	2200      	movs	r2, #0
 800a366:	4630      	mov	r0, r6
 800a368:	4639      	mov	r1, r7
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	f7f6 fbfb 	bl	8000b68 <__aeabi_d2iz>
 800a372:	f7f6 f8df 	bl	8000534 <__aeabi_i2d>
 800a376:	4602      	mov	r2, r0
 800a378:	460b      	mov	r3, r1
 800a37a:	ec43 2b18 	vmov	d8, r2, r3
 800a37e:	4b46      	ldr	r3, [pc, #280]	; (800a498 <__kernel_rem_pio2+0x338>)
 800a380:	2200      	movs	r2, #0
 800a382:	f7f6 f941 	bl	8000608 <__aeabi_dmul>
 800a386:	4602      	mov	r2, r0
 800a388:	460b      	mov	r3, r1
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f5 ff83 	bl	8000298 <__aeabi_dsub>
 800a392:	f7f6 fbe9 	bl	8000b68 <__aeabi_d2iz>
 800a396:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a39a:	f84b 0b04 	str.w	r0, [fp], #4
 800a39e:	ec51 0b18 	vmov	r0, r1, d8
 800a3a2:	f7f5 ff7b 	bl	800029c <__adddf3>
 800a3a6:	f109 39ff 	add.w	r9, r9, #4294967295
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	e75b      	b.n	800a268 <__kernel_rem_pio2+0x108>
 800a3b0:	d106      	bne.n	800a3c0 <__kernel_rem_pio2+0x260>
 800a3b2:	1e63      	subs	r3, r4, #1
 800a3b4:	aa0e      	add	r2, sp, #56	; 0x38
 800a3b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a3ba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a3be:	e79d      	b.n	800a2fc <__kernel_rem_pio2+0x19c>
 800a3c0:	4b36      	ldr	r3, [pc, #216]	; (800a49c <__kernel_rem_pio2+0x33c>)
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f7f6 fba6 	bl	8000b14 <__aeabi_dcmpge>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d13d      	bne.n	800a448 <__kernel_rem_pio2+0x2e8>
 800a3cc:	4683      	mov	fp, r0
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	4639      	mov	r1, r7
 800a3d6:	f7f6 fb7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3da:	2800      	cmp	r0, #0
 800a3dc:	f000 80c0 	beq.w	800a560 <__kernel_rem_pio2+0x400>
 800a3e0:	1e65      	subs	r5, r4, #1
 800a3e2:	462b      	mov	r3, r5
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	9902      	ldr	r1, [sp, #8]
 800a3e8:	428b      	cmp	r3, r1
 800a3ea:	da6c      	bge.n	800a4c6 <__kernel_rem_pio2+0x366>
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	f000 8089 	beq.w	800a504 <__kernel_rem_pio2+0x3a4>
 800a3f2:	ab0e      	add	r3, sp, #56	; 0x38
 800a3f4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a3f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f000 80ad 	beq.w	800a55c <__kernel_rem_pio2+0x3fc>
 800a402:	4650      	mov	r0, sl
 800a404:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a480 <__kernel_rem_pio2+0x320>
 800a408:	f000 fb42 	bl	800aa90 <scalbn>
 800a40c:	ab9a      	add	r3, sp, #616	; 0x268
 800a40e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a412:	ec57 6b10 	vmov	r6, r7, d0
 800a416:	00ec      	lsls	r4, r5, #3
 800a418:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a41c:	46aa      	mov	sl, r5
 800a41e:	f1ba 0f00 	cmp.w	sl, #0
 800a422:	f280 80d6 	bge.w	800a5d2 <__kernel_rem_pio2+0x472>
 800a426:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a478 <__kernel_rem_pio2+0x318>
 800a42a:	462e      	mov	r6, r5
 800a42c:	2e00      	cmp	r6, #0
 800a42e:	f2c0 8104 	blt.w	800a63a <__kernel_rem_pio2+0x4da>
 800a432:	ab72      	add	r3, sp, #456	; 0x1c8
 800a434:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a438:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a4a0 <__kernel_rem_pio2+0x340>
 800a43c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a440:	f04f 0800 	mov.w	r8, #0
 800a444:	1baf      	subs	r7, r5, r6
 800a446:	e0ea      	b.n	800a61e <__kernel_rem_pio2+0x4be>
 800a448:	f04f 0b02 	mov.w	fp, #2
 800a44c:	e759      	b.n	800a302 <__kernel_rem_pio2+0x1a2>
 800a44e:	f8d8 3000 	ldr.w	r3, [r8]
 800a452:	b955      	cbnz	r5, 800a46a <__kernel_rem_pio2+0x30a>
 800a454:	b123      	cbz	r3, 800a460 <__kernel_rem_pio2+0x300>
 800a456:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a45a:	f8c8 3000 	str.w	r3, [r8]
 800a45e:	2301      	movs	r3, #1
 800a460:	3201      	adds	r2, #1
 800a462:	f108 0804 	add.w	r8, r8, #4
 800a466:	461d      	mov	r5, r3
 800a468:	e752      	b.n	800a310 <__kernel_rem_pio2+0x1b0>
 800a46a:	1acb      	subs	r3, r1, r3
 800a46c:	f8c8 3000 	str.w	r3, [r8]
 800a470:	462b      	mov	r3, r5
 800a472:	e7f5      	b.n	800a460 <__kernel_rem_pio2+0x300>
 800a474:	f3af 8000 	nop.w
	...
 800a484:	3ff00000 	.word	0x3ff00000
 800a488:	0800bac8 	.word	0x0800bac8
 800a48c:	40200000 	.word	0x40200000
 800a490:	3ff00000 	.word	0x3ff00000
 800a494:	3e700000 	.word	0x3e700000
 800a498:	41700000 	.word	0x41700000
 800a49c:	3fe00000 	.word	0x3fe00000
 800a4a0:	0800ba88 	.word	0x0800ba88
 800a4a4:	1e62      	subs	r2, r4, #1
 800a4a6:	ab0e      	add	r3, sp, #56	; 0x38
 800a4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a4b0:	a90e      	add	r1, sp, #56	; 0x38
 800a4b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a4b6:	e739      	b.n	800a32c <__kernel_rem_pio2+0x1cc>
 800a4b8:	1e62      	subs	r2, r4, #1
 800a4ba:	ab0e      	add	r3, sp, #56	; 0x38
 800a4bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a4c4:	e7f4      	b.n	800a4b0 <__kernel_rem_pio2+0x350>
 800a4c6:	a90e      	add	r1, sp, #56	; 0x38
 800a4c8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a4cc:	3b01      	subs	r3, #1
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	e789      	b.n	800a3e6 <__kernel_rem_pio2+0x286>
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a4d8:	2900      	cmp	r1, #0
 800a4da:	d0fa      	beq.n	800a4d2 <__kernel_rem_pio2+0x372>
 800a4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4de:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a4e2:	446a      	add	r2, sp
 800a4e4:	3a98      	subs	r2, #152	; 0x98
 800a4e6:	920a      	str	r2, [sp, #40]	; 0x28
 800a4e8:	9a08      	ldr	r2, [sp, #32]
 800a4ea:	18e3      	adds	r3, r4, r3
 800a4ec:	18a5      	adds	r5, r4, r2
 800a4ee:	aa22      	add	r2, sp, #136	; 0x88
 800a4f0:	f104 0801 	add.w	r8, r4, #1
 800a4f4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a4f8:	9304      	str	r3, [sp, #16]
 800a4fa:	9b04      	ldr	r3, [sp, #16]
 800a4fc:	4543      	cmp	r3, r8
 800a4fe:	da04      	bge.n	800a50a <__kernel_rem_pio2+0x3aa>
 800a500:	461c      	mov	r4, r3
 800a502:	e6a3      	b.n	800a24c <__kernel_rem_pio2+0xec>
 800a504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a506:	2301      	movs	r3, #1
 800a508:	e7e4      	b.n	800a4d4 <__kernel_rem_pio2+0x374>
 800a50a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a50c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a510:	f7f6 f810 	bl	8000534 <__aeabi_i2d>
 800a514:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a518:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a51a:	46ab      	mov	fp, r5
 800a51c:	461c      	mov	r4, r3
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	2600      	movs	r6, #0
 800a524:	2700      	movs	r7, #0
 800a526:	9b06      	ldr	r3, [sp, #24]
 800a528:	4599      	cmp	r9, r3
 800a52a:	dd06      	ble.n	800a53a <__kernel_rem_pio2+0x3da>
 800a52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a52e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a532:	f108 0801 	add.w	r8, r8, #1
 800a536:	930a      	str	r3, [sp, #40]	; 0x28
 800a538:	e7df      	b.n	800a4fa <__kernel_rem_pio2+0x39a>
 800a53a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a53e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a542:	f7f6 f861 	bl	8000608 <__aeabi_dmul>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fea5 	bl	800029c <__adddf3>
 800a552:	f109 0901 	add.w	r9, r9, #1
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	e7e4      	b.n	800a526 <__kernel_rem_pio2+0x3c6>
 800a55c:	3d01      	subs	r5, #1
 800a55e:	e748      	b.n	800a3f2 <__kernel_rem_pio2+0x292>
 800a560:	ec47 6b10 	vmov	d0, r6, r7
 800a564:	f1ca 0000 	rsb	r0, sl, #0
 800a568:	f000 fa92 	bl	800aa90 <scalbn>
 800a56c:	ec57 6b10 	vmov	r6, r7, d0
 800a570:	4ba0      	ldr	r3, [pc, #640]	; (800a7f4 <__kernel_rem_pio2+0x694>)
 800a572:	ee10 0a10 	vmov	r0, s0
 800a576:	2200      	movs	r2, #0
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f6 facb 	bl	8000b14 <__aeabi_dcmpge>
 800a57e:	b1f8      	cbz	r0, 800a5c0 <__kernel_rem_pio2+0x460>
 800a580:	4b9d      	ldr	r3, [pc, #628]	; (800a7f8 <__kernel_rem_pio2+0x698>)
 800a582:	2200      	movs	r2, #0
 800a584:	4630      	mov	r0, r6
 800a586:	4639      	mov	r1, r7
 800a588:	f7f6 f83e 	bl	8000608 <__aeabi_dmul>
 800a58c:	f7f6 faec 	bl	8000b68 <__aeabi_d2iz>
 800a590:	4680      	mov	r8, r0
 800a592:	f7f5 ffcf 	bl	8000534 <__aeabi_i2d>
 800a596:	4b97      	ldr	r3, [pc, #604]	; (800a7f4 <__kernel_rem_pio2+0x694>)
 800a598:	2200      	movs	r2, #0
 800a59a:	f7f6 f835 	bl	8000608 <__aeabi_dmul>
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	f7f5 fe77 	bl	8000298 <__aeabi_dsub>
 800a5aa:	f7f6 fadd 	bl	8000b68 <__aeabi_d2iz>
 800a5ae:	1c65      	adds	r5, r4, #1
 800a5b0:	ab0e      	add	r3, sp, #56	; 0x38
 800a5b2:	f10a 0a18 	add.w	sl, sl, #24
 800a5b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a5ba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a5be:	e720      	b.n	800a402 <__kernel_rem_pio2+0x2a2>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f6 fad0 	bl	8000b68 <__aeabi_d2iz>
 800a5c8:	ab0e      	add	r3, sp, #56	; 0x38
 800a5ca:	4625      	mov	r5, r4
 800a5cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a5d0:	e717      	b.n	800a402 <__kernel_rem_pio2+0x2a2>
 800a5d2:	ab0e      	add	r3, sp, #56	; 0x38
 800a5d4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a5d8:	f7f5 ffac 	bl	8000534 <__aeabi_i2d>
 800a5dc:	4632      	mov	r2, r6
 800a5de:	463b      	mov	r3, r7
 800a5e0:	f7f6 f812 	bl	8000608 <__aeabi_dmul>
 800a5e4:	4b84      	ldr	r3, [pc, #528]	; (800a7f8 <__kernel_rem_pio2+0x698>)
 800a5e6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	4639      	mov	r1, r7
 800a5f0:	f7f6 f80a 	bl	8000608 <__aeabi_dmul>
 800a5f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5f8:	4606      	mov	r6, r0
 800a5fa:	460f      	mov	r7, r1
 800a5fc:	e70f      	b.n	800a41e <__kernel_rem_pio2+0x2be>
 800a5fe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a602:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800a606:	f7f5 ffff 	bl	8000608 <__aeabi_dmul>
 800a60a:	4602      	mov	r2, r0
 800a60c:	460b      	mov	r3, r1
 800a60e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a612:	f7f5 fe43 	bl	800029c <__adddf3>
 800a616:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a61a:	f108 0801 	add.w	r8, r8, #1
 800a61e:	9b02      	ldr	r3, [sp, #8]
 800a620:	4598      	cmp	r8, r3
 800a622:	dc01      	bgt.n	800a628 <__kernel_rem_pio2+0x4c8>
 800a624:	45b8      	cmp	r8, r7
 800a626:	ddea      	ble.n	800a5fe <__kernel_rem_pio2+0x49e>
 800a628:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a62c:	ab4a      	add	r3, sp, #296	; 0x128
 800a62e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a632:	ed87 7b00 	vstr	d7, [r7]
 800a636:	3e01      	subs	r6, #1
 800a638:	e6f8      	b.n	800a42c <__kernel_rem_pio2+0x2cc>
 800a63a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	dc0b      	bgt.n	800a658 <__kernel_rem_pio2+0x4f8>
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc35      	bgt.n	800a6b0 <__kernel_rem_pio2+0x550>
 800a644:	d059      	beq.n	800a6fa <__kernel_rem_pio2+0x59a>
 800a646:	9b04      	ldr	r3, [sp, #16]
 800a648:	f003 0007 	and.w	r0, r3, #7
 800a64c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a650:	ecbd 8b02 	vpop	{d8}
 800a654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a658:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d1f3      	bne.n	800a646 <__kernel_rem_pio2+0x4e6>
 800a65e:	ab4a      	add	r3, sp, #296	; 0x128
 800a660:	4423      	add	r3, r4
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	461c      	mov	r4, r3
 800a666:	469a      	mov	sl, r3
 800a668:	9502      	str	r5, [sp, #8]
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	f1aa 0a08 	sub.w	sl, sl, #8
 800a672:	dc6b      	bgt.n	800a74c <__kernel_rem_pio2+0x5ec>
 800a674:	46aa      	mov	sl, r5
 800a676:	f1ba 0f01 	cmp.w	sl, #1
 800a67a:	f1a4 0408 	sub.w	r4, r4, #8
 800a67e:	f300 8085 	bgt.w	800a78c <__kernel_rem_pio2+0x62c>
 800a682:	9c06      	ldr	r4, [sp, #24]
 800a684:	2000      	movs	r0, #0
 800a686:	3408      	adds	r4, #8
 800a688:	2100      	movs	r1, #0
 800a68a:	2d01      	cmp	r5, #1
 800a68c:	f300 809d 	bgt.w	800a7ca <__kernel_rem_pio2+0x66a>
 800a690:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800a694:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800a698:	f1bb 0f00 	cmp.w	fp, #0
 800a69c:	f040 809b 	bne.w	800a7d6 <__kernel_rem_pio2+0x676>
 800a6a0:	9b01      	ldr	r3, [sp, #4]
 800a6a2:	e9c3 5600 	strd	r5, r6, [r3]
 800a6a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800a6aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a6ae:	e7ca      	b.n	800a646 <__kernel_rem_pio2+0x4e6>
 800a6b0:	3408      	adds	r4, #8
 800a6b2:	ab4a      	add	r3, sp, #296	; 0x128
 800a6b4:	441c      	add	r4, r3
 800a6b6:	462e      	mov	r6, r5
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	2e00      	cmp	r6, #0
 800a6be:	da36      	bge.n	800a72e <__kernel_rem_pio2+0x5ce>
 800a6c0:	f1bb 0f00 	cmp.w	fp, #0
 800a6c4:	d039      	beq.n	800a73a <__kernel_rem_pio2+0x5da>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6cc:	9c01      	ldr	r4, [sp, #4]
 800a6ce:	e9c4 2300 	strd	r2, r3, [r4]
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a6da:	f7f5 fddd 	bl	8000298 <__aeabi_dsub>
 800a6de:	ae4c      	add	r6, sp, #304	; 0x130
 800a6e0:	2401      	movs	r4, #1
 800a6e2:	42a5      	cmp	r5, r4
 800a6e4:	da2c      	bge.n	800a740 <__kernel_rem_pio2+0x5e0>
 800a6e6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ea:	d002      	beq.n	800a6f2 <__kernel_rem_pio2+0x592>
 800a6ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	9b01      	ldr	r3, [sp, #4]
 800a6f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a6f8:	e7a5      	b.n	800a646 <__kernel_rem_pio2+0x4e6>
 800a6fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800a6fe:	eb0d 0403 	add.w	r4, sp, r3
 800a702:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a706:	2000      	movs	r0, #0
 800a708:	2100      	movs	r1, #0
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	da09      	bge.n	800a722 <__kernel_rem_pio2+0x5c2>
 800a70e:	f1bb 0f00 	cmp.w	fp, #0
 800a712:	d002      	beq.n	800a71a <__kernel_rem_pio2+0x5ba>
 800a714:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a718:	4619      	mov	r1, r3
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	e9c3 0100 	strd	r0, r1, [r3]
 800a720:	e791      	b.n	800a646 <__kernel_rem_pio2+0x4e6>
 800a722:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a726:	f7f5 fdb9 	bl	800029c <__adddf3>
 800a72a:	3d01      	subs	r5, #1
 800a72c:	e7ed      	b.n	800a70a <__kernel_rem_pio2+0x5aa>
 800a72e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a732:	f7f5 fdb3 	bl	800029c <__adddf3>
 800a736:	3e01      	subs	r6, #1
 800a738:	e7c0      	b.n	800a6bc <__kernel_rem_pio2+0x55c>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	e7c5      	b.n	800a6cc <__kernel_rem_pio2+0x56c>
 800a740:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a744:	f7f5 fdaa 	bl	800029c <__adddf3>
 800a748:	3401      	adds	r4, #1
 800a74a:	e7ca      	b.n	800a6e2 <__kernel_rem_pio2+0x582>
 800a74c:	e9da 8900 	ldrd	r8, r9, [sl]
 800a750:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	3b01      	subs	r3, #1
 800a758:	9302      	str	r3, [sp, #8]
 800a75a:	4632      	mov	r2, r6
 800a75c:	463b      	mov	r3, r7
 800a75e:	4640      	mov	r0, r8
 800a760:	4649      	mov	r1, r9
 800a762:	f7f5 fd9b 	bl	800029c <__adddf3>
 800a766:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4640      	mov	r0, r8
 800a770:	4649      	mov	r1, r9
 800a772:	f7f5 fd91 	bl	8000298 <__aeabi_dsub>
 800a776:	4632      	mov	r2, r6
 800a778:	463b      	mov	r3, r7
 800a77a:	f7f5 fd8f 	bl	800029c <__adddf3>
 800a77e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800a782:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a786:	ed8a 7b00 	vstr	d7, [sl]
 800a78a:	e76e      	b.n	800a66a <__kernel_rem_pio2+0x50a>
 800a78c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a790:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800a794:	4640      	mov	r0, r8
 800a796:	4632      	mov	r2, r6
 800a798:	463b      	mov	r3, r7
 800a79a:	4649      	mov	r1, r9
 800a79c:	f7f5 fd7e 	bl	800029c <__adddf3>
 800a7a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4640      	mov	r0, r8
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	f7f5 fd74 	bl	8000298 <__aeabi_dsub>
 800a7b0:	4632      	mov	r2, r6
 800a7b2:	463b      	mov	r3, r7
 800a7b4:	f7f5 fd72 	bl	800029c <__adddf3>
 800a7b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7c0:	ed84 7b00 	vstr	d7, [r4]
 800a7c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7c8:	e755      	b.n	800a676 <__kernel_rem_pio2+0x516>
 800a7ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a7ce:	f7f5 fd65 	bl	800029c <__adddf3>
 800a7d2:	3d01      	subs	r5, #1
 800a7d4:	e759      	b.n	800a68a <__kernel_rem_pio2+0x52a>
 800a7d6:	9b01      	ldr	r3, [sp, #4]
 800a7d8:	9a01      	ldr	r2, [sp, #4]
 800a7da:	601d      	str	r5, [r3, #0]
 800a7dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800a7e0:	605c      	str	r4, [r3, #4]
 800a7e2:	609f      	str	r7, [r3, #8]
 800a7e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800a7e8:	60d3      	str	r3, [r2, #12]
 800a7ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7ee:	6110      	str	r0, [r2, #16]
 800a7f0:	6153      	str	r3, [r2, #20]
 800a7f2:	e728      	b.n	800a646 <__kernel_rem_pio2+0x4e6>
 800a7f4:	41700000 	.word	0x41700000
 800a7f8:	3e700000 	.word	0x3e700000
 800a7fc:	00000000 	.word	0x00000000

0800a800 <__kernel_sin>:
 800a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a804:	ed2d 8b04 	vpush	{d8-d9}
 800a808:	eeb0 8a41 	vmov.f32	s16, s2
 800a80c:	eef0 8a61 	vmov.f32	s17, s3
 800a810:	ec55 4b10 	vmov	r4, r5, d0
 800a814:	b083      	sub	sp, #12
 800a816:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a81a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a81e:	9001      	str	r0, [sp, #4]
 800a820:	da06      	bge.n	800a830 <__kernel_sin+0x30>
 800a822:	ee10 0a10 	vmov	r0, s0
 800a826:	4629      	mov	r1, r5
 800a828:	f7f6 f99e 	bl	8000b68 <__aeabi_d2iz>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d051      	beq.n	800a8d4 <__kernel_sin+0xd4>
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	4620      	mov	r0, r4
 800a836:	4629      	mov	r1, r5
 800a838:	f7f5 fee6 	bl	8000608 <__aeabi_dmul>
 800a83c:	4682      	mov	sl, r0
 800a83e:	468b      	mov	fp, r1
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f5 fede 	bl	8000608 <__aeabi_dmul>
 800a84c:	a341      	add	r3, pc, #260	; (adr r3, 800a954 <__kernel_sin+0x154>)
 800a84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a852:	4680      	mov	r8, r0
 800a854:	4689      	mov	r9, r1
 800a856:	4650      	mov	r0, sl
 800a858:	4659      	mov	r1, fp
 800a85a:	f7f5 fed5 	bl	8000608 <__aeabi_dmul>
 800a85e:	a33f      	add	r3, pc, #252	; (adr r3, 800a95c <__kernel_sin+0x15c>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fd18 	bl	8000298 <__aeabi_dsub>
 800a868:	4652      	mov	r2, sl
 800a86a:	465b      	mov	r3, fp
 800a86c:	f7f5 fecc 	bl	8000608 <__aeabi_dmul>
 800a870:	a33c      	add	r3, pc, #240	; (adr r3, 800a964 <__kernel_sin+0x164>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fd11 	bl	800029c <__adddf3>
 800a87a:	4652      	mov	r2, sl
 800a87c:	465b      	mov	r3, fp
 800a87e:	f7f5 fec3 	bl	8000608 <__aeabi_dmul>
 800a882:	a33a      	add	r3, pc, #232	; (adr r3, 800a96c <__kernel_sin+0x16c>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f5 fd06 	bl	8000298 <__aeabi_dsub>
 800a88c:	4652      	mov	r2, sl
 800a88e:	465b      	mov	r3, fp
 800a890:	f7f5 feba 	bl	8000608 <__aeabi_dmul>
 800a894:	a337      	add	r3, pc, #220	; (adr r3, 800a974 <__kernel_sin+0x174>)
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 fcff 	bl	800029c <__adddf3>
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	4606      	mov	r6, r0
 800a8a2:	460f      	mov	r7, r1
 800a8a4:	b9eb      	cbnz	r3, 800a8e2 <__kernel_sin+0xe2>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4650      	mov	r0, sl
 800a8ac:	4659      	mov	r1, fp
 800a8ae:	f7f5 feab 	bl	8000608 <__aeabi_dmul>
 800a8b2:	a325      	add	r3, pc, #148	; (adr r3, 800a948 <__kernel_sin+0x148>)
 800a8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b8:	f7f5 fcee 	bl	8000298 <__aeabi_dsub>
 800a8bc:	4642      	mov	r2, r8
 800a8be:	464b      	mov	r3, r9
 800a8c0:	f7f5 fea2 	bl	8000608 <__aeabi_dmul>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	f7f5 fce6 	bl	800029c <__adddf3>
 800a8d0:	4604      	mov	r4, r0
 800a8d2:	460d      	mov	r5, r1
 800a8d4:	ec45 4b10 	vmov	d0, r4, r5
 800a8d8:	b003      	add	sp, #12
 800a8da:	ecbd 8b04 	vpop	{d8-d9}
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	4b1b      	ldr	r3, [pc, #108]	; (800a950 <__kernel_sin+0x150>)
 800a8e4:	ec51 0b18 	vmov	r0, r1, d8
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f7f5 fe8d 	bl	8000608 <__aeabi_dmul>
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	ec41 0b19 	vmov	d9, r0, r1
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	4640      	mov	r0, r8
 800a8f8:	4649      	mov	r1, r9
 800a8fa:	f7f5 fe85 	bl	8000608 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	ec51 0b19 	vmov	r0, r1, d9
 800a906:	f7f5 fcc7 	bl	8000298 <__aeabi_dsub>
 800a90a:	4652      	mov	r2, sl
 800a90c:	465b      	mov	r3, fp
 800a90e:	f7f5 fe7b 	bl	8000608 <__aeabi_dmul>
 800a912:	ec53 2b18 	vmov	r2, r3, d8
 800a916:	f7f5 fcbf 	bl	8000298 <__aeabi_dsub>
 800a91a:	a30b      	add	r3, pc, #44	; (adr r3, 800a948 <__kernel_sin+0x148>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	4606      	mov	r6, r0
 800a922:	460f      	mov	r7, r1
 800a924:	4640      	mov	r0, r8
 800a926:	4649      	mov	r1, r9
 800a928:	f7f5 fe6e 	bl	8000608 <__aeabi_dmul>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4630      	mov	r0, r6
 800a932:	4639      	mov	r1, r7
 800a934:	f7f5 fcb2 	bl	800029c <__adddf3>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4620      	mov	r0, r4
 800a93e:	4629      	mov	r1, r5
 800a940:	f7f5 fcaa 	bl	8000298 <__aeabi_dsub>
 800a944:	e7c4      	b.n	800a8d0 <__kernel_sin+0xd0>
 800a946:	bf00      	nop
 800a948:	55555549 	.word	0x55555549
 800a94c:	3fc55555 	.word	0x3fc55555
 800a950:	3fe00000 	.word	0x3fe00000
 800a954:	5acfd57c 	.word	0x5acfd57c
 800a958:	3de5d93a 	.word	0x3de5d93a
 800a95c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a960:	3e5ae5e6 	.word	0x3e5ae5e6
 800a964:	57b1fe7d 	.word	0x57b1fe7d
 800a968:	3ec71de3 	.word	0x3ec71de3
 800a96c:	19c161d5 	.word	0x19c161d5
 800a970:	3f2a01a0 	.word	0x3f2a01a0
 800a974:	1110f8a6 	.word	0x1110f8a6
 800a978:	3f811111 	.word	0x3f811111

0800a97c <fabs>:
 800a97c:	ec51 0b10 	vmov	r0, r1, d0
 800a980:	ee10 2a10 	vmov	r2, s0
 800a984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a988:	ec43 2b10 	vmov	d0, r2, r3
 800a98c:	4770      	bx	lr
	...

0800a990 <floor>:
 800a990:	ec51 0b10 	vmov	r0, r1, d0
 800a994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a998:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a99c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a9a0:	2e13      	cmp	r6, #19
 800a9a2:	ee10 5a10 	vmov	r5, s0
 800a9a6:	ee10 8a10 	vmov	r8, s0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	dc32      	bgt.n	800aa14 <floor+0x84>
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	da14      	bge.n	800a9dc <floor+0x4c>
 800a9b2:	a333      	add	r3, pc, #204	; (adr r3, 800aa80 <floor+0xf0>)
 800a9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b8:	f7f5 fc70 	bl	800029c <__adddf3>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f7f6 f8b2 	bl	8000b28 <__aeabi_dcmpgt>
 800a9c4:	b138      	cbz	r0, 800a9d6 <floor+0x46>
 800a9c6:	2c00      	cmp	r4, #0
 800a9c8:	da57      	bge.n	800aa7a <floor+0xea>
 800a9ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a9ce:	431d      	orrs	r5, r3
 800a9d0:	d001      	beq.n	800a9d6 <floor+0x46>
 800a9d2:	4c2d      	ldr	r4, [pc, #180]	; (800aa88 <floor+0xf8>)
 800a9d4:	2500      	movs	r5, #0
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	4628      	mov	r0, r5
 800a9da:	e025      	b.n	800aa28 <floor+0x98>
 800a9dc:	4f2b      	ldr	r7, [pc, #172]	; (800aa8c <floor+0xfc>)
 800a9de:	4137      	asrs	r7, r6
 800a9e0:	ea01 0307 	and.w	r3, r1, r7
 800a9e4:	4303      	orrs	r3, r0
 800a9e6:	d01f      	beq.n	800aa28 <floor+0x98>
 800a9e8:	a325      	add	r3, pc, #148	; (adr r3, 800aa80 <floor+0xf0>)
 800a9ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ee:	f7f5 fc55 	bl	800029c <__adddf3>
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	f7f6 f897 	bl	8000b28 <__aeabi_dcmpgt>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d0eb      	beq.n	800a9d6 <floor+0x46>
 800a9fe:	2c00      	cmp	r4, #0
 800aa00:	bfbe      	ittt	lt
 800aa02:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aa06:	fa43 f606 	asrlt.w	r6, r3, r6
 800aa0a:	19a4      	addlt	r4, r4, r6
 800aa0c:	ea24 0407 	bic.w	r4, r4, r7
 800aa10:	2500      	movs	r5, #0
 800aa12:	e7e0      	b.n	800a9d6 <floor+0x46>
 800aa14:	2e33      	cmp	r6, #51	; 0x33
 800aa16:	dd0b      	ble.n	800aa30 <floor+0xa0>
 800aa18:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa1c:	d104      	bne.n	800aa28 <floor+0x98>
 800aa1e:	ee10 2a10 	vmov	r2, s0
 800aa22:	460b      	mov	r3, r1
 800aa24:	f7f5 fc3a 	bl	800029c <__adddf3>
 800aa28:	ec41 0b10 	vmov	d0, r0, r1
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800aa34:	f04f 33ff 	mov.w	r3, #4294967295
 800aa38:	fa23 f707 	lsr.w	r7, r3, r7
 800aa3c:	4207      	tst	r7, r0
 800aa3e:	d0f3      	beq.n	800aa28 <floor+0x98>
 800aa40:	a30f      	add	r3, pc, #60	; (adr r3, 800aa80 <floor+0xf0>)
 800aa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa46:	f7f5 fc29 	bl	800029c <__adddf3>
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f7f6 f86b 	bl	8000b28 <__aeabi_dcmpgt>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d0bf      	beq.n	800a9d6 <floor+0x46>
 800aa56:	2c00      	cmp	r4, #0
 800aa58:	da02      	bge.n	800aa60 <floor+0xd0>
 800aa5a:	2e14      	cmp	r6, #20
 800aa5c:	d103      	bne.n	800aa66 <floor+0xd6>
 800aa5e:	3401      	adds	r4, #1
 800aa60:	ea25 0507 	bic.w	r5, r5, r7
 800aa64:	e7b7      	b.n	800a9d6 <floor+0x46>
 800aa66:	2301      	movs	r3, #1
 800aa68:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800aa6c:	fa03 f606 	lsl.w	r6, r3, r6
 800aa70:	4435      	add	r5, r6
 800aa72:	4545      	cmp	r5, r8
 800aa74:	bf38      	it	cc
 800aa76:	18e4      	addcc	r4, r4, r3
 800aa78:	e7f2      	b.n	800aa60 <floor+0xd0>
 800aa7a:	2500      	movs	r5, #0
 800aa7c:	462c      	mov	r4, r5
 800aa7e:	e7aa      	b.n	800a9d6 <floor+0x46>
 800aa80:	8800759c 	.word	0x8800759c
 800aa84:	7e37e43c 	.word	0x7e37e43c
 800aa88:	bff00000 	.word	0xbff00000
 800aa8c:	000fffff 	.word	0x000fffff

0800aa90 <scalbn>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	ec55 4b10 	vmov	r4, r5, d0
 800aa96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	b99a      	cbnz	r2, 800aac8 <scalbn+0x38>
 800aaa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaa4:	4323      	orrs	r3, r4
 800aaa6:	d036      	beq.n	800ab16 <scalbn+0x86>
 800aaa8:	4b39      	ldr	r3, [pc, #228]	; (800ab90 <scalbn+0x100>)
 800aaaa:	4629      	mov	r1, r5
 800aaac:	ee10 0a10 	vmov	r0, s0
 800aab0:	2200      	movs	r2, #0
 800aab2:	f7f5 fda9 	bl	8000608 <__aeabi_dmul>
 800aab6:	4b37      	ldr	r3, [pc, #220]	; (800ab94 <scalbn+0x104>)
 800aab8:	429e      	cmp	r6, r3
 800aaba:	4604      	mov	r4, r0
 800aabc:	460d      	mov	r5, r1
 800aabe:	da10      	bge.n	800aae2 <scalbn+0x52>
 800aac0:	a32b      	add	r3, pc, #172	; (adr r3, 800ab70 <scalbn+0xe0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	e03a      	b.n	800ab3e <scalbn+0xae>
 800aac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800aacc:	428a      	cmp	r2, r1
 800aace:	d10c      	bne.n	800aaea <scalbn+0x5a>
 800aad0:	ee10 2a10 	vmov	r2, s0
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fbe0 	bl	800029c <__adddf3>
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	e019      	b.n	800ab16 <scalbn+0x86>
 800aae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aae6:	460b      	mov	r3, r1
 800aae8:	3a36      	subs	r2, #54	; 0x36
 800aaea:	4432      	add	r2, r6
 800aaec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aaf0:	428a      	cmp	r2, r1
 800aaf2:	dd08      	ble.n	800ab06 <scalbn+0x76>
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	a120      	add	r1, pc, #128	; (adr r1, 800ab78 <scalbn+0xe8>)
 800aaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafc:	da1c      	bge.n	800ab38 <scalbn+0xa8>
 800aafe:	a120      	add	r1, pc, #128	; (adr r1, 800ab80 <scalbn+0xf0>)
 800ab00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab04:	e018      	b.n	800ab38 <scalbn+0xa8>
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	dd08      	ble.n	800ab1c <scalbn+0x8c>
 800ab0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab16:	ec45 4b10 	vmov	d0, r4, r5
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab20:	da19      	bge.n	800ab56 <scalbn+0xc6>
 800ab22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab26:	429e      	cmp	r6, r3
 800ab28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ab2c:	dd0a      	ble.n	800ab44 <scalbn+0xb4>
 800ab2e:	a112      	add	r1, pc, #72	; (adr r1, 800ab78 <scalbn+0xe8>)
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e2      	bne.n	800aafe <scalbn+0x6e>
 800ab38:	a30f      	add	r3, pc, #60	; (adr r3, 800ab78 <scalbn+0xe8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	e7cb      	b.n	800aadc <scalbn+0x4c>
 800ab44:	a10a      	add	r1, pc, #40	; (adr r1, 800ab70 <scalbn+0xe0>)
 800ab46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d0b8      	beq.n	800aac0 <scalbn+0x30>
 800ab4e:	a10e      	add	r1, pc, #56	; (adr r1, 800ab88 <scalbn+0xf8>)
 800ab50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab54:	e7b4      	b.n	800aac0 <scalbn+0x30>
 800ab56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab5a:	3236      	adds	r2, #54	; 0x36
 800ab5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ab64:	4620      	mov	r0, r4
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <scalbn+0x108>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	e7e8      	b.n	800ab3e <scalbn+0xae>
 800ab6c:	f3af 8000 	nop.w
 800ab70:	c2f8f359 	.word	0xc2f8f359
 800ab74:	01a56e1f 	.word	0x01a56e1f
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	7e37e43c 	.word	0x7e37e43c
 800ab80:	8800759c 	.word	0x8800759c
 800ab84:	fe37e43c 	.word	0xfe37e43c
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	81a56e1f 	.word	0x81a56e1f
 800ab90:	43500000 	.word	0x43500000
 800ab94:	ffff3cb0 	.word	0xffff3cb0
 800ab98:	3c900000 	.word	0x3c900000

0800ab9c <_close>:
 800ab9c:	4b02      	ldr	r3, [pc, #8]	; (800aba8 <_close+0xc>)
 800ab9e:	2258      	movs	r2, #88	; 0x58
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	f04f 30ff 	mov.w	r0, #4294967295
 800aba6:	4770      	bx	lr
 800aba8:	20000260 	.word	0x20000260

0800abac <_fstat>:
 800abac:	4b02      	ldr	r3, [pc, #8]	; (800abb8 <_fstat+0xc>)
 800abae:	2258      	movs	r2, #88	; 0x58
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	4770      	bx	lr
 800abb8:	20000260 	.word	0x20000260

0800abbc <_getpid>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <_getpid+0xc>)
 800abbe:	2258      	movs	r2, #88	; 0x58
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	f04f 30ff 	mov.w	r0, #4294967295
 800abc6:	4770      	bx	lr
 800abc8:	20000260 	.word	0x20000260

0800abcc <_isatty>:
 800abcc:	4b02      	ldr	r3, [pc, #8]	; (800abd8 <_isatty+0xc>)
 800abce:	2258      	movs	r2, #88	; 0x58
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	2000      	movs	r0, #0
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	20000260 	.word	0x20000260

0800abdc <_kill>:
 800abdc:	4b02      	ldr	r3, [pc, #8]	; (800abe8 <_kill+0xc>)
 800abde:	2258      	movs	r2, #88	; 0x58
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295
 800abe6:	4770      	bx	lr
 800abe8:	20000260 	.word	0x20000260

0800abec <_lseek>:
 800abec:	4b02      	ldr	r3, [pc, #8]	; (800abf8 <_lseek+0xc>)
 800abee:	2258      	movs	r2, #88	; 0x58
 800abf0:	601a      	str	r2, [r3, #0]
 800abf2:	f04f 30ff 	mov.w	r0, #4294967295
 800abf6:	4770      	bx	lr
 800abf8:	20000260 	.word	0x20000260

0800abfc <_read>:
 800abfc:	4b02      	ldr	r3, [pc, #8]	; (800ac08 <_read+0xc>)
 800abfe:	2258      	movs	r2, #88	; 0x58
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	f04f 30ff 	mov.w	r0, #4294967295
 800ac06:	4770      	bx	lr
 800ac08:	20000260 	.word	0x20000260

0800ac0c <_sbrk>:
 800ac0c:	4a04      	ldr	r2, [pc, #16]	; (800ac20 <_sbrk+0x14>)
 800ac0e:	6811      	ldr	r1, [r2, #0]
 800ac10:	4603      	mov	r3, r0
 800ac12:	b909      	cbnz	r1, 800ac18 <_sbrk+0xc>
 800ac14:	4903      	ldr	r1, [pc, #12]	; (800ac24 <_sbrk+0x18>)
 800ac16:	6011      	str	r1, [r2, #0]
 800ac18:	6810      	ldr	r0, [r2, #0]
 800ac1a:	4403      	add	r3, r0
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	4770      	bx	lr
 800ac20:	20000268 	.word	0x20000268
 800ac24:	20000270 	.word	0x20000270

0800ac28 <_write>:
 800ac28:	4b02      	ldr	r3, [pc, #8]	; (800ac34 <_write+0xc>)
 800ac2a:	2258      	movs	r2, #88	; 0x58
 800ac2c:	601a      	str	r2, [r3, #0]
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac32:	4770      	bx	lr
 800ac34:	20000260 	.word	0x20000260

0800ac38 <_exit>:
 800ac38:	e7fe      	b.n	800ac38 <_exit>
	...

0800ac3c <_init>:
 800ac3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac3e:	bf00      	nop
 800ac40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac42:	bc08      	pop	{r3}
 800ac44:	469e      	mov	lr, r3
 800ac46:	4770      	bx	lr

0800ac48 <_fini>:
 800ac48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac4a:	bf00      	nop
 800ac4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac4e:	bc08      	pop	{r3}
 800ac50:	469e      	mov	lr, r3
 800ac52:	4770      	bx	lr
